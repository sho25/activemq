begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SocketProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DurableSubscriberWithNetworkDisconnectTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DurableSubscriberWithNetworkDisconnectTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NETWORK_DOWN_TIME
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HUB
init|=
literal|"HubBroker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPOKE
init|=
literal|"SpokeBroker"
decl_stmt|;
specifier|private
name|SocketProxy
name|socketProxy
decl_stmt|;
specifier|private
name|long
name|networkDownTimeStart
decl_stmt|;
specifier|private
name|long
name|inactiveDuration
init|=
literal|1000
decl_stmt|;
specifier|private
name|long
name|receivedMsgs
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|useSocketProxy
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|200
decl_stmt|;
specifier|public
name|boolean
name|useDuplexNetworkBridge
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|simulateStalledNetwork
decl_stmt|;
specifier|public
name|boolean
name|dynamicOnly
init|=
literal|true
decl_stmt|;
specifier|public
name|long
name|networkTTL
init|=
literal|3
decl_stmt|;
specifier|public
name|boolean
name|exponentialBackOff
decl_stmt|;
specifier|public
name|boolean
name|failover
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|inactivity
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|initCombosForTestSendOnAReceiveOnBWithTransportDisconnect
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"failover"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendOnAReceiveOnBWithTransportDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|bridgeBrokers
argument_list|(
name|SPOKE
argument_list|,
name|HUB
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup connection
name|URI
name|hubURI
init|=
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
operator|.
name|broker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|URI
name|spokeURI
init|=
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
operator|.
name|broker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|facHub
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|hubURI
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|facSpoke
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|spokeURI
argument_list|)
decl_stmt|;
name|Connection
name|conHub
init|=
name|facHub
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Connection
name|conSpoke
init|=
name|facSpoke
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conHub
operator|.
name|setClientID
argument_list|(
literal|"clientHUB"
argument_list|)
expr_stmt|;
name|conSpoke
operator|.
name|setClientID
argument_list|(
literal|"clientSPOKE"
argument_list|)
expr_stmt|;
name|conHub
operator|.
name|start
argument_list|()
expr_stmt|;
name|conSpoke
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sesHub
init|=
name|conHub
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Session
name|sesSpoke
init|=
name|conSpoke
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
name|String
name|consumerName
init|=
literal|"consumerName"
decl_stmt|;
comment|// Setup consumers
name|MessageConsumer
name|remoteConsumer
init|=
name|sesSpoke
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|consumerName
argument_list|)
decl_stmt|;
name|remoteConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
try|try
block|{
name|TextMessage
name|textMsg
init|=
operator|(
name|TextMessage
operator|)
name|msg
decl_stmt|;
name|receivedMsgs
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received messages ("
operator|+
name|receivedMsgs
operator|+
literal|"): "
operator|+
name|textMsg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// allow subscription information to flow back to Spoke
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Setup producer
name|MessageProducer
name|localProducer
init|=
name|sesHub
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|localProducer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
comment|// Send messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|50
operator|||
name|i
operator|==
literal|150
condition|)
block|{
if|if
condition|(
name|simulateStalledNetwork
condition|)
block|{
name|socketProxy
operator|.
name|pause
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|socketProxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|networkDownTimeStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|networkDownTimeStart
operator|>
literal|0
condition|)
block|{
comment|// restart after NETWORK_DOWN_TIME seconds
name|sleep
argument_list|(
name|NETWORK_DOWN_TIME
argument_list|)
expr_stmt|;
name|networkDownTimeStart
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|simulateStalledNetwork
condition|)
block|{
name|socketProxy
operator|.
name|goOn
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|socketProxy
operator|.
name|reopen
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// slow message production to allow bridge to recover and limit message duplication
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|Message
name|test
init|=
name|sesHub
operator|.
name|createTextMessage
argument_list|(
literal|"test-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|localProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for messages to flow"
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|receivedMsgs
operator|>=
name|MESSAGE_COUNT
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"At least message "
operator|+
name|MESSAGE_COUNT
operator|+
literal|" must be received, count="
operator|+
name|receivedMsgs
argument_list|,
name|MESSAGE_COUNT
operator|<=
name|receivedMsgs
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
operator|.
name|broker
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
operator|.
name|broker
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|conHub
operator|.
name|close
argument_list|()
expr_stmt|;
name|conSpoke
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startAllBrokers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensure HUB is started first so bridge will be active from the get go
name|BrokerItem
name|brokerItem
init|=
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
decl_stmt|;
name|brokerItem
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerItem
operator|=
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
expr_stmt|;
name|brokerItem
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|sleep
argument_list|(
literal|600
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|networkDownTimeStart
operator|=
literal|0
expr_stmt|;
name|inactiveDuration
operator|=
literal|1000
expr_stmt|;
name|useSocketProxy
operator|=
literal|true
expr_stmt|;
name|receivedMsgs
operator|=
literal|0
expr_stmt|;
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|String
name|options
init|=
literal|"?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"
decl_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/"
operator|+
name|HUB
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/"
operator|+
name|SPOKE
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|socketProxy
operator|!=
literal|null
condition|)
block|{
name|socketProxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|DurableSubscriberWithNetworkDisconnectTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|milliSecondTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliSecondTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|igonred
parameter_list|)
block|{         }
block|}
annotation|@
name|Override
specifier|protected
name|NetworkConnector
name|bridgeBrokers
parameter_list|(
name|BrokerService
name|localBroker
parameter_list|,
name|BrokerService
name|remoteBroker
parameter_list|,
name|boolean
name|l_dynamicOnly
parameter_list|,
name|int
name|networkTTL
parameter_list|,
name|boolean
name|l_conduit
parameter_list|,
name|boolean
name|l_failover
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
name|remoteBroker
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
name|URI
name|remoteURI
decl_stmt|;
if|if
condition|(
operator|!
name|transportConnectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remoteURI
operator|=
operator|(
operator|(
name|TransportConnector
operator|)
name|transportConnectors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getConnectUri
argument_list|()
expr_stmt|;
if|if
condition|(
name|useSocketProxy
condition|)
block|{
name|socketProxy
operator|=
operator|new
name|SocketProxy
argument_list|(
name|remoteURI
argument_list|)
expr_stmt|;
name|remoteURI
operator|=
name|socketProxy
operator|.
name|getUrl
argument_list|()
expr_stmt|;
block|}
name|String
name|options
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|failover
condition|)
block|{
name|options
operator|=
literal|"static:(failover:("
operator|+
name|remoteURI
expr_stmt|;
block|}
else|else
block|{
name|options
operator|=
literal|"static:("
operator|+
name|remoteURI
expr_stmt|;
block|}
if|if
condition|(
name|inactivity
condition|)
block|{
name|options
operator|+=
literal|"?wireFormat.maxInactivityDuration="
operator|+
name|inactiveDuration
operator|+
literal|"&wireFormat.maxInactivityDurationInitalDelay="
operator|+
name|inactiveDuration
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|options
operator|+=
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|failover
condition|)
block|{
name|options
operator|+=
literal|"?maxReconnectAttempts=0)"
expr_stmt|;
block|}
name|options
operator|+=
literal|"?useExponentialBackOff="
operator|+
name|exponentialBackOff
expr_stmt|;
name|DiscoveryNetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|options
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setDynamicOnly
argument_list|(
name|dynamicOnly
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setNetworkTTL
argument_list|(
name|networkTTL
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|maxSetupTime
operator|=
literal|2000
expr_stmt|;
if|if
condition|(
name|useDuplexNetworkBridge
condition|)
block|{
name|connector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Remote broker has no registered connectors."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

