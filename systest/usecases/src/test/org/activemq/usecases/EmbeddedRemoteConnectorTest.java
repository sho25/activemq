begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Protique Ltd  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|impl
operator|.
name|BrokerContainerImpl
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|spring
operator|.
name|SpringBrokerContainerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|ClassPathResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|impl
operator|.
name|DefaultWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddedRemoteConnectorTest
extends|extends
name|TestCase
block|{
name|BrokerContainer
name|receiveBroker
decl_stmt|;
name|String
name|subject
init|=
literal|"TOOL.DEFAULT"
decl_stmt|;
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
name|boolean
name|init
init|=
literal|false
decl_stmt|;
specifier|protected
name|ActiveMQConnectionFactory
name|createReceiverConnectionFactory
parameter_list|()
throws|throws
name|JMSException
block|{
name|receiveBroker
operator|=
operator|new
name|BrokerContainerImpl
argument_list|(
literal|"receiver"
argument_list|)
expr_stmt|;
name|receiveBroker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|receiveBroker
operator|.
name|setPersistenceAdapter
argument_list|(
name|createPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|receiveBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|receiveBroker
argument_list|,
literal|"tcp://localhost:61616"
argument_list|)
decl_stmt|;
return|return
name|factory
return|;
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createEmbeddedRemoteBrokerConnectionFactory
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|()
decl_stmt|;
name|connectionFactory
operator|.
name|setUseEmbeddedBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setBrokerContainerFactory
argument_list|(
operator|new
name|SpringBrokerContainerFactory
argument_list|(
operator|new
name|ClassPathResource
argument_list|(
literal|"org/activemq/usecases/EmbeddedRemoteConnector.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|connectionFactory
return|;
block|}
specifier|public
name|void
name|testSendFromEmbeddedRemote
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|embeddedRemoteFactory
init|=
name|createEmbeddedRemoteBrokerConnectionFactory
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|embeddedRemoteFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Message : "
operator|+
name|i
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sending   "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReceiver
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|receiveFactory
init|=
name|createReceiverConnectionFactory
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|receiveFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|subject
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Before receive"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|txtMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received : "
operator|+
name|txtMsg
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|//increment counter only when a message is received
if|if
condition|(
name|txtMsg
operator|.
name|getText
argument_list|()
operator|!=
literal|null
operator|&&
name|txtMsg
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|counter
operator|++
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No messages were received"
argument_list|,
name|counter
operator|==
name|messageCount
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|receiveBroker
operator|!=
literal|null
condition|)
block|{
name|receiveBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the persistence adapter.      * Sets up the testing database to be used when the messages are persistent.      * It attempts to recreate the tables everytime the test is executed.      *      * @return PersistenceAdapter - persistence adapter.      */
specifier|protected
name|PersistenceAdapter
name|createPersistenceAdapter
parameter_list|()
block|{
name|EmbeddedDataSource
name|ds
init|=
operator|new
name|EmbeddedDataSource
argument_list|()
decl_stmt|;
name|ds
operator|.
name|setDatabaseName
argument_list|(
literal|"testdb"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|init
condition|)
block|{
name|ds
operator|.
name|setCreateDatabase
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
block|}
name|JDBCPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|JDBCPersistenceAdapter
argument_list|(
name|ds
argument_list|,
operator|new
name|DefaultWireFormat
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|init
condition|)
block|{
name|persistenceAdapter
operator|.
name|setDropTablesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|init
operator|=
literal|true
expr_stmt|;
return|return
name|persistenceAdapter
return|;
block|}
block|}
end_class

end_unit

