begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|sampler
operator|.
name|MeasurableClient
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJmsMeasurableClient
extends|extends
name|AbstractJmsClient
implements|implements
name|MeasurableClient
block|{
specifier|protected
name|AtomicLong
name|throughput
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|AbstractJmsMeasurableClient
parameter_list|(
name|ConnectionFactory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|setThroughput
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getThroughput
parameter_list|()
block|{
return|return
name|throughput
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setThroughput
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|throughput
operator|.
name|set
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incThroughput
parameter_list|()
block|{
name|throughput
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|incThroughput
parameter_list|(
name|long
name|val
parameter_list|)
block|{
name|throughput
operator|.
name|addAndGet
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

