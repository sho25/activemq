begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannelServer
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Adapts a {@see org.activeio,SynchChannelServer} so that it provides an   * {@see org.activeio.AsyncChannelServer} interface.  When this channel  * is started, a background thread is used to poll the (@see org.activeio.SynchChannelServer}  * for accepted channel connections which are then delivered to the {@see org.activeio.AcceptConsumer}.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|SyncToAsyncChannelServer
implements|implements
name|AsyncChannelServer
implements|,
name|Runnable
block|{
specifier|private
specifier|final
name|SyncChannelServer
name|syncChannelServer
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
name|AcceptListener
name|acceptListener
decl_stmt|;
specifier|private
name|CountDownLatch
name|doneCountDownLatch
decl_stmt|;
specifier|static
specifier|public
name|AsyncChannelServer
name|adapt
parameter_list|(
name|ChannelServer
name|channel
parameter_list|)
block|{
return|return
name|adapt
argument_list|(
name|channel
argument_list|,
name|ChannelFactory
operator|.
name|DEFAULT_EXECUTOR
argument_list|)
return|;
block|}
specifier|static
specifier|public
name|AsyncChannelServer
name|adapt
parameter_list|(
name|ChannelServer
name|channel
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
comment|// It might not need adapting
if|if
condition|(
name|channel
operator|instanceof
name|AsyncChannelServer
condition|)
block|{
return|return
operator|(
name|AsyncChannelServer
operator|)
name|channel
return|;
block|}
comment|// Can we just just undo the adaptor
if|if
condition|(
name|channel
operator|.
name|getClass
argument_list|()
operator|==
name|SyncToAsyncChannel
operator|.
name|class
condition|)
block|{
return|return
operator|(
operator|(
name|AsyncToSyncChannelServer
operator|)
name|channel
operator|)
operator|.
name|getAsyncChannelServer
argument_list|()
return|;
block|}
return|return
operator|new
name|SyncToAsyncChannelServer
argument_list|(
operator|(
name|SyncChannelServer
operator|)
name|channel
argument_list|,
name|executor
argument_list|)
return|;
block|}
specifier|public
name|SyncToAsyncChannelServer
parameter_list|(
name|SyncChannelServer
name|syncServer
parameter_list|)
block|{
name|this
argument_list|(
name|syncServer
argument_list|,
name|ChannelFactory
operator|.
name|DEFAULT_EXECUTOR
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SyncToAsyncChannelServer
parameter_list|(
name|SyncChannelServer
name|syncServer
parameter_list|,
name|Executor
name|executor
parameter_list|)
block|{
name|this
operator|.
name|syncChannelServer
operator|=
name|syncServer
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|running
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|acceptListener
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"AcceptListener must be set before object can be started."
argument_list|)
throw|;
name|syncChannelServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|doneCountDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|running
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
try|try
block|{
name|doneCountDownLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
name|syncChannelServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Change the thread name.
name|String
name|oldName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|syncChannelServer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|Channel
name|channel
init|=
name|syncChannelServer
operator|.
name|accept
argument_list|(
literal|500
argument_list|)
decl_stmt|;
if|if
condition|(
name|channel
operator|==
literal|null
condition|)
continue|continue;
name|acceptListener
operator|.
name|onAccept
argument_list|(
name|channel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
name|acceptListener
operator|.
name|onAcceptError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
name|acceptListener
operator|.
name|onAcceptError
argument_list|(
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Unexpected Error: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|doneCountDownLatch
operator|!=
literal|null
condition|)
name|doneCountDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.activeio.packet.async.AsyncChannelServer#setAcceptListener(org.activeio.AcceptListener)      */
specifier|public
name|void
name|setAcceptListener
parameter_list|(
name|AcceptListener
name|acceptListener
parameter_list|)
block|{
if|if
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot change the AcceptListener while the object is running."
argument_list|)
throw|;
name|this
operator|.
name|acceptListener
operator|=
name|acceptListener
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Disposable#dispose()      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{         }
name|syncChannelServer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|URI
name|getBindURI
parameter_list|()
block|{
return|return
name|syncChannelServer
operator|.
name|getBindURI
argument_list|()
return|;
block|}
specifier|public
name|URI
name|getConnectURI
parameter_list|()
block|{
return|return
name|syncChannelServer
operator|.
name|getConnectURI
argument_list|()
return|;
block|}
specifier|public
name|SyncChannelServer
name|getSynchChannelServer
parameter_list|()
block|{
return|return
name|syncChannelServer
return|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|syncChannelServer
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|syncChannelServer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

