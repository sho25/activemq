begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Buffers up incoming headers to reorder them. This class is only accessed by  * one thread at once.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|CommandReadBuffer
block|{
specifier|private
name|OpenWireFormat
name|wireFormat
decl_stmt|;
specifier|private
name|SortedSet
name|headers
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
specifier|private
name|int
name|expectedCounter
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|public
name|CommandReadBuffer
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|Command
name|read
parameter_list|(
name|DatagramHeader
name|header
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|expectedCounter
operator|!=
name|header
operator|.
name|getCounter
argument_list|()
condition|)
block|{
comment|// lets add it to the list for later on
name|headers
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
comment|// lets see if the first item in the set is the next header
name|header
operator|=
operator|(
name|DatagramHeader
operator|)
name|headers
operator|.
name|first
argument_list|()
expr_stmt|;
if|if
condition|(
name|expectedCounter
operator|!=
name|header
operator|.
name|getCounter
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// we've got a valid header so increment counter
name|expectedCounter
operator|++
expr_stmt|;
name|Command
name|answer
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|header
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|answer
operator|=
name|header
operator|.
name|getCommand
argument_list|()
expr_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The header should have a command!: "
operator|+
name|header
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|data
init|=
name|header
operator|.
name|getPartialData
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|isComplete
argument_list|()
condition|)
block|{
name|answer
operator|=
operator|(
name|Command
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

