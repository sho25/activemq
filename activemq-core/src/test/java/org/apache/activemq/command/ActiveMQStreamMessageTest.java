begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotReadableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQStreamMessageTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|ActiveMQStreamMessageTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/*      * @see TestCase#setUp()      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/*      * @see TestCase#tearDown()      */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Constructor for ActiveMQStreamMessageTest.      *      * @param arg0      */
specifier|public
name|ActiveMQStreamMessageTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetDataStructureType
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getDataStructureType
argument_list|()
argument_list|,
name|CommandTypes
operator|.
name|ACTIVEMQ_STREAM_MESSAGE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadBoolean
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testreadByte
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
name|test
init|=
operator|(
name|byte
operator|)
literal|4
decl_stmt|;
name|msg
operator|.
name|writeByte
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readByte
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readShort
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readInt
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readLong
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Byte
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadShort
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|short
name|test
init|=
operator|(
name|short
operator|)
literal|4
decl_stmt|;
name|msg
operator|.
name|writeShort
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readShort
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readInt
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readLong
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Short
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadChar
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|char
name|test
init|=
literal|'z'
decl_stmt|;
name|msg
operator|.
name|writeChar
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readChar
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Character
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadInt
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|test
init|=
literal|4
decl_stmt|;
name|msg
operator|.
name|writeInt
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readInt
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readLong
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Integer
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadLong
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|test
init|=
literal|4l
decl_stmt|;
name|msg
operator|.
name|writeLong
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readLong
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Long
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadFloat
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|float
name|test
init|=
literal|4.4f
decl_stmt|;
name|msg
operator|.
name|writeFloat
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readFloat
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readDouble
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Float
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadDouble
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|double
name|test
init|=
literal|4.4d
decl_stmt|;
name|msg
operator|.
name|writeDouble
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readDouble
argument_list|()
operator|==
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readString
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Double
argument_list|(
name|test
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadString
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
name|testByte
init|=
operator|(
name|byte
operator|)
literal|2
decl_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
operator|new
name|Byte
argument_list|(
name|testByte
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readByte
argument_list|()
operator|==
name|testByte
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|short
name|testShort
init|=
literal|3
decl_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
operator|new
name|Short
argument_list|(
name|testShort
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readShort
argument_list|()
operator|==
name|testShort
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|int
name|testInt
init|=
literal|4
decl_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
operator|new
name|Integer
argument_list|(
name|testInt
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readInt
argument_list|()
operator|==
name|testInt
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|long
name|testLong
init|=
literal|6l
decl_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
operator|new
name|Long
argument_list|(
name|testLong
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readLong
argument_list|()
operator|==
name|testLong
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|float
name|testFloat
init|=
literal|6.6f
decl_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
operator|new
name|Float
argument_list|(
name|testFloat
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readFloat
argument_list|()
operator|==
name|testFloat
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|double
name|testDouble
init|=
literal|7.7d
decl_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
operator|new
name|Double
argument_list|(
name|testDouble
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readDouble
argument_list|()
operator|==
name|testDouble
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|e
parameter_list|)
block|{             }
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|msg
operator|.
name|writeString
argument_list|(
literal|"777"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|e
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadBytes
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|test
init|=
operator|new
name|byte
index|[
literal|50
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|test
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|test
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|msg
operator|.
name|writeBytes
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|valid
init|=
operator|new
name|byte
index|[
name|test
operator|.
name|length
index|]
decl_stmt|;
name|msg
operator|.
name|readBytes
argument_list|(
name|valid
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valid
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|valid
index|[
name|i
index|]
operator|==
name|test
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|readString
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{             }
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReadObject
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|msg
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
name|testByte
init|=
operator|(
name|byte
operator|)
literal|2
decl_stmt|;
name|msg
operator|.
name|writeByte
argument_list|(
name|testByte
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|byteValue
argument_list|()
operator|==
name|testByte
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|short
name|testShort
init|=
literal|3
decl_stmt|;
name|msg
operator|.
name|writeShort
argument_list|(
name|testShort
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|shortValue
argument_list|()
operator|==
name|testShort
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|int
name|testInt
init|=
literal|4
decl_stmt|;
name|msg
operator|.
name|writeInt
argument_list|(
name|testInt
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|==
name|testInt
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|long
name|testLong
init|=
literal|6l
decl_stmt|;
name|msg
operator|.
name|writeLong
argument_list|(
name|testLong
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
operator|==
name|testLong
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|float
name|testFloat
init|=
literal|6.6f
decl_stmt|;
name|msg
operator|.
name|writeFloat
argument_list|(
name|testFloat
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|floatValue
argument_list|()
operator|==
name|testFloat
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|double
name|testDouble
init|=
literal|7.7d
decl_stmt|;
name|msg
operator|.
name|writeDouble
argument_list|(
name|testDouble
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
operator|==
name|testDouble
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|char
name|testChar
init|=
literal|'z'
decl_stmt|;
name|msg
operator|.
name|writeChar
argument_list|(
name|testChar
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Character
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|charValue
argument_list|()
operator|==
name|testChar
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|50
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
name|msg
operator|.
name|writeBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|byte
index|[]
name|valid
init|=
operator|(
name|byte
index|[]
operator|)
name|msg
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|valid
operator|.
name|length
operator|==
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|valid
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|valid
index|[
name|i
index|]
operator|==
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|msg
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|msg
operator|.
name|readObject
argument_list|()
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testClearBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQStreamMessage
name|streamMessage
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|streamMessage
operator|.
name|writeObject
argument_list|(
operator|new
name|Serializable
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|5181896809607968727L
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
name|streamMessage
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|streamMessage
operator|.
name|isReadOnlyBody
argument_list|()
argument_list|)
expr_stmt|;
name|streamMessage
operator|.
name|writeObject
argument_list|(
operator|new
name|Serializable
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5074177640797561141L
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
name|streamMessage
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|mnwe
parameter_list|)
block|{         }
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should be writeable"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReset
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQStreamMessage
name|streamMessage
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|streamMessage
operator|.
name|writeDouble
argument_list|(
literal|24.5
argument_list|)
expr_stmt|;
name|streamMessage
operator|.
name|writeLong
argument_list|(
literal|311
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should be writeable"
argument_list|)
expr_stmt|;
block|}
name|streamMessage
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|streamMessage
operator|.
name|isReadOnlyBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|streamMessage
operator|.
name|readDouble
argument_list|()
argument_list|,
literal|24.5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|streamMessage
operator|.
name|readLong
argument_list|()
argument_list|,
literal|311
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|mnre
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should be readable"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|streamMessage
operator|.
name|writeInt
argument_list|(
literal|33
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testReadOnlyBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQStreamMessage
name|message
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|message
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeDouble
argument_list|(
literal|1.5
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeFloat
argument_list|(
operator|(
name|float
operator|)
literal|1.5
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeObject
argument_list|(
literal|"stringobj"
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeString
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be writeable"
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|message
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|message
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|message
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|message
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|message
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|message
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|message
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|message
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|message
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|message
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|message
operator|.
name|readString
argument_list|()
expr_stmt|;
name|message
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|message
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|mnwe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be readable"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|message
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeDouble
argument_list|(
literal|1.5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeFloat
argument_list|(
operator|(
name|float
operator|)
literal|1.5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeObject
argument_list|(
literal|"stringobj"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|writeString
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testWriteOnlyBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQStreamMessage
name|message
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|clearBody
argument_list|()
expr_stmt|;
try|try
block|{
name|message
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeChar
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeDouble
argument_list|(
literal|1.5
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeFloat
argument_list|(
operator|(
name|float
operator|)
literal|1.5
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeObject
argument_list|(
literal|"stringobj"
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|writeString
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be writeable"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|message
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readBytes
argument_list|(
operator|new
name|byte
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readDouble
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readFloat
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readString
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readShort
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
try|try
block|{
name|message
operator|.
name|readString
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|e
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

