begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SimpleSecurityBrokerSystemTest
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|SecureDLQTest
extends|extends
name|DeadLetterTestSupport
block|{
name|Connection
name|dlqConnection
decl_stmt|;
name|Session
name|dlqSession
decl_stmt|;
specifier|public
specifier|static
name|AuthorizationMap
name|createAuthorizationMap
parameter_list|()
block|{
name|DestinationMap
name|readAccess
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|DestinationMap
name|writeAccess
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|DestinationMap
name|adminAccess
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleAuthorizationMap
argument_list|(
name|writeAccess
argument_list|,
name|readAccess
argument_list|,
name|adminAccess
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|super
operator|.
name|createBroker
argument_list|()
decl_stmt|;
name|AuthorizationPlugin
name|authorizationPlugin
init|=
operator|new
name|AuthorizationPlugin
argument_list|(
name|createAuthorizationMap
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
name|authorizationPlugin
block|,
operator|new
name|SimpleSecurityBrokerSystemTest
operator|.
name|SimpleAuthenticationFactory
argument_list|()
block|}
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
comment|// lets disable the inapplicable tests
specifier|public
name|void
name|testTransientTopicMessage
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|public
name|void
name|testDurableTopicMessage
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|protected
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|timeToLive
operator|=
literal|1000
expr_stmt|;
name|acknowledgeMode
operator|=
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
expr_stmt|;
name|makeConsumer
argument_list|()
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// this should try to send expired messages to dlq
name|makeConsumer
argument_list|()
expr_stmt|;
name|makeDlqConsumer
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|dlqConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertMessage
argument_list|(
name|msg
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should be a DLQ message for loop: "
operator|+
name|i
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|dlqSession
operator|!=
literal|null
condition|)
block|{
name|dlqSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dlqConsumer
operator|!=
literal|null
condition|)
block|{
name|dlqConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|(
literal|"user"
argument_list|,
literal|"password"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|makeDlqConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|dlqDestination
operator|=
name|createDlqDestination
argument_list|()
expr_stmt|;
name|dlqConnection
operator|=
name|getConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|dlqConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|dlqSession
operator|=
name|dlqConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|dlqConsumer
operator|=
name|dlqSession
operator|.
name|createConsumer
argument_list|(
name|dlqDestination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Destination
name|createDlqDestination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getDestinationString
parameter_list|()
block|{
return|return
literal|"TEST"
return|;
block|}
block|}
end_class

end_unit

