begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ErrorCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ReceiverSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|SenderSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Delivery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|EndpointState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * Unmodifiable Session wrapper used to prevent test code from accidentally  * modifying Session state.  */
end_comment

begin_class
specifier|public
class|class
name|UnmodifiableLink
implements|implements
name|Link
block|{
specifier|private
specifier|final
name|Link
name|link
decl_stmt|;
specifier|public
name|UnmodifiableLink
parameter_list|(
name|Link
name|link
parameter_list|)
block|{
name|this
operator|.
name|link
operator|=
name|link
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|EndpointState
name|getLocalState
parameter_list|()
block|{
return|return
name|link
operator|.
name|getLocalState
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EndpointState
name|getRemoteState
parameter_list|()
block|{
return|return
name|link
operator|.
name|getRemoteState
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ErrorCondition
name|getCondition
parameter_list|()
block|{
return|return
name|link
operator|.
name|getCondition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCondition
parameter_list|(
name|ErrorCondition
name|condition
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ErrorCondition
name|getRemoteCondition
parameter_list|()
block|{
return|return
name|link
operator|.
name|getRemoteCondition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|free
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setContext
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getContext
parameter_list|()
block|{
return|return
name|link
operator|.
name|getContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|link
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Delivery
name|delivery
parameter_list|(
name|byte
index|[]
name|tag
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Delivery
name|delivery
parameter_list|(
name|byte
index|[]
name|tag
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Delivery
name|head
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableDelivery
argument_list|(
name|link
operator|.
name|head
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Delivery
name|current
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableDelivery
argument_list|(
name|link
operator|.
name|current
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advance
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
comment|// TODO Figure out a simple way to wrap the odd Source types in Proton-J
return|return
name|link
operator|.
name|getSource
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Target
name|getTarget
parameter_list|()
block|{
comment|// TODO Figure out a simple way to wrap the odd Source types in Proton-J
return|return
name|link
operator|.
name|getTarget
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSource
parameter_list|(
name|Source
name|address
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTarget
parameter_list|(
name|Target
name|address
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Source
name|getRemoteSource
parameter_list|()
block|{
comment|// TODO Figure out a simple way to wrap the odd Source types in Proton-J
return|return
name|link
operator|.
name|getRemoteSource
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Target
name|getRemoteTarget
parameter_list|()
block|{
comment|// TODO Figure out a simple way to wrap the odd Target types in Proton-J
return|return
name|link
operator|.
name|getRemoteTarget
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Link
name|next
parameter_list|(
name|EnumSet
argument_list|<
name|EndpointState
argument_list|>
name|local
parameter_list|,
name|EnumSet
argument_list|<
name|EndpointState
argument_list|>
name|remote
parameter_list|)
block|{
name|Link
name|next
init|=
name|link
operator|.
name|next
argument_list|(
name|local
argument_list|,
name|remote
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|instanceof
name|Sender
condition|)
block|{
name|next
operator|=
operator|new
name|UnmodifiableSender
argument_list|(
operator|(
name|Sender
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
operator|new
name|UnmodifiableReceiver
argument_list|(
operator|(
name|Receiver
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|next
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCredit
parameter_list|()
block|{
return|return
name|link
operator|.
name|getCredit
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getQueued
parameter_list|()
block|{
return|return
name|link
operator|.
name|getQueued
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getUnsettled
parameter_list|()
block|{
return|return
name|link
operator|.
name|getUnsettled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableSession
argument_list|(
name|link
operator|.
name|getSession
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SenderSettleMode
name|getSenderSettleMode
parameter_list|()
block|{
return|return
name|link
operator|.
name|getSenderSettleMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSenderSettleMode
parameter_list|(
name|SenderSettleMode
name|senderSettleMode
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SenderSettleMode
name|getRemoteSenderSettleMode
parameter_list|()
block|{
return|return
name|link
operator|.
name|getRemoteSenderSettleMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReceiverSettleMode
name|getReceiverSettleMode
parameter_list|()
block|{
return|return
name|link
operator|.
name|getReceiverSettleMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReceiverSettleMode
parameter_list|(
name|ReceiverSettleMode
name|receiverSettleMode
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|ReceiverSettleMode
name|getRemoteReceiverSettleMode
parameter_list|()
block|{
return|return
name|link
operator|.
name|getRemoteReceiverSettleMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRemoteSenderSettleMode
parameter_list|(
name|SenderSettleMode
name|remoteSenderSettleMode
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|drained
parameter_list|()
block|{
return|return
name|link
operator|.
name|drained
argument_list|()
return|;
comment|// TODO - Is this a mutating call?
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRemoteCredit
parameter_list|()
block|{
return|return
name|link
operator|.
name|getRemoteCredit
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getDrain
parameter_list|()
block|{
return|return
name|link
operator|.
name|getDrain
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|detach
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot alter the Link state"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

