begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|StreamMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQJMSVendor
block|{
specifier|final
specifier|public
specifier|static
name|ActiveMQJMSVendor
name|INSTANCE
init|=
operator|new
name|ActiveMQJMSVendor
argument_list|()
decl_stmt|;
specifier|private
name|ActiveMQJMSVendor
parameter_list|()
block|{     }
comment|/**      * @return a new vendor specific Message instance.      */
specifier|public
name|Message
name|createMessage
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQMessage
argument_list|()
return|;
block|}
comment|/**      * @return a new vendor specific BytesMessage instance.      */
specifier|public
name|BytesMessage
name|createBytesMessage
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQBytesMessage
argument_list|()
return|;
block|}
comment|/**      * @return a new vendor specific BytesMessage instance with the given payload.      */
specifier|public
name|BytesMessage
name|createBytesMessage
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ActiveMQBytesMessage
name|message
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
operator|new
name|ByteSequence
argument_list|(
name|content
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
comment|/**      * @return a new vendor specific StreamMessage instance.      */
specifier|public
name|StreamMessage
name|createStreamMessage
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQStreamMessage
argument_list|()
return|;
block|}
comment|/**      * @return a new vendor specific TextMessage instance.      */
specifier|public
name|TextMessage
name|createTextMessage
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQTextMessage
argument_list|()
return|;
block|}
comment|/**      * @return a new vendor specific TextMessage instance with the given string in the body.      */
specifier|public
name|TextMessage
name|createTextMessage
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|message
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|ex
parameter_list|)
block|{}
return|return
name|message
return|;
block|}
comment|/**      * @return a new vendor specific ObjectMessage instance.      */
specifier|public
name|ObjectMessage
name|createObjectMessage
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQObjectMessage
argument_list|()
return|;
block|}
comment|/**      * @return a new vendor specific ObjectMessage instance with the serialized form given.      */
specifier|public
name|ObjectMessage
name|createObjectMessage
parameter_list|(
name|byte
index|[]
name|content
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ActiveMQObjectMessage
name|message
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
operator|new
name|ByteSequence
argument_list|(
name|content
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
comment|/**      * @return a new vendor specific MapMessage instance.      */
specifier|public
name|MapMessage
name|createMapMessage
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQMapMessage
argument_list|()
return|;
block|}
comment|/**      * @return a new vendor specific MapMessage instance with the given map as its content.      */
specifier|public
name|MapMessage
name|createMapMessage
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|content
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|message
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|set
init|=
name|content
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|set
control|)
block|{
name|message
operator|.
name|setObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
comment|/**      * Creates a new JMS Destination instance from the given name.      *      * @param name      *      the name to use to construct the new Destination      *      * @return a new JMS Destination object derived from the given name.      */
specifier|public
name|Destination
name|createDestination
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|name
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
comment|/**      * Set the given value as the JMSXUserID on the message instance.      *      * @param message      *      the message to be updated.      * @param value      *      the value to apply to the message.      */
specifier|public
name|void
name|setJMSXUserID
parameter_list|(
name|Message
name|msg
parameter_list|,
name|String
name|value
parameter_list|)
block|{
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
operator|)
operator|.
name|setUserID
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the given value as the JMSXGroupID on the message instance.      *      * @param message      *      the message to be updated.      * @param value      *      the value to apply to the message.      */
specifier|public
name|void
name|setJMSXGroupID
parameter_list|(
name|Message
name|msg
parameter_list|,
name|String
name|value
parameter_list|)
block|{
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
operator|)
operator|.
name|setGroupID
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the given value as the JMSXGroupSequence on the message instance.      *      * @param message      *      the message to be updated.      * @param value      *      the value to apply to the message.      */
specifier|public
name|void
name|setJMSXGroupSequence
parameter_list|(
name|Message
name|msg
parameter_list|,
name|int
name|value
parameter_list|)
block|{
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
operator|)
operator|.
name|setGroupSequence
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the given value as the JMSXDeliveryCount on the message instance.      *      * @param message      *      the message to be updated.      * @param value      *      the value to apply to the message.      */
specifier|public
name|void
name|setJMSXDeliveryCount
parameter_list|(
name|Message
name|msg
parameter_list|,
name|long
name|value
parameter_list|)
block|{
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
operator|)
operator|.
name|setRedeliveryCounter
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert the given JMS Destination into the appropriate AMQP address string      * for assignment to the 'to' or 'replyTo' field of an AMQP message.      *      * @param destination      *      the JMS Destination instance to be converted.      *      * @return the converted string address to assign to the message.      */
specifier|public
name|String
name|toAddress
parameter_list|(
name|Destination
name|dest
parameter_list|)
block|{
return|return
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|dest
operator|)
operator|.
name|getQualifiedName
argument_list|()
return|;
block|}
comment|/**      * Given an Message instance return the original Message ID that was assigned the      * Message when it was first processed by the broker.  For an AMQP message this      * should be the original value of the message's MessageId field with the correct      * type preserved.      *      * @param message      *      the message which is being accessed.      *      * @return the original MessageId assigned to this Message instance.      */
specifier|public
name|Object
name|getOriginalMessageId
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Object
name|result
decl_stmt|;
name|MessageId
name|msgId
init|=
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|message
operator|)
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|msgId
operator|.
name|getTextView
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|AMQPMessageIdHelper
operator|.
name|INSTANCE
operator|.
name|toIdObject
argument_list|(
name|msgId
operator|.
name|getTextView
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|e
parameter_list|)
block|{
name|result
operator|=
name|msgId
operator|.
name|getTextView
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|msgId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Return the encoded form of the BytesMessage as an AMQP Binary instance.      *      * @param message      *      the Message whose binary encoded body is needed.      *      * @return a Binary instance containing the encoded message body.      *      * @throws JMSException if an error occurs while fetching the binary payload.      */
specifier|public
name|Binary
name|getBinaryFromMessageBody
parameter_list|(
name|BytesMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQBytesMessage
name|bytesMessage
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|message
decl_stmt|;
name|Binary
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bytesMessage
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|contents
init|=
name|bytesMessage
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|bytesMessage
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
name|int
name|length
init|=
operator|(
name|int
operator|)
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|uncompressed
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|bytesMessage
operator|.
name|readBytes
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
operator|new
name|Binary
argument_list|(
name|contents
operator|.
name|getData
argument_list|()
argument_list|,
name|contents
operator|.
name|getOffset
argument_list|()
argument_list|,
name|contents
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Return the encoded form of the BytesMessage as an AMQP Binary instance.      *      * @param message      *      the Message whose binary encoded body is needed.      *      * @return a Binary instance containing the encoded message body.      *      * @throws JMSException if an error occurs while fetching the binary payload.      */
specifier|public
name|Binary
name|getBinaryFromMessageBody
parameter_list|(
name|ObjectMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQObjectMessage
name|objectMessage
init|=
operator|(
name|ActiveMQObjectMessage
operator|)
name|message
decl_stmt|;
name|Binary
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|objectMessage
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|contents
init|=
name|objectMessage
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|objectMessage
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
try|try
init|(
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;                      ByteArrayInputStream is = new ByteArrayInputStream(contents)
empty_stmt|;
name|InflaterInputStream
name|iis
init|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
block|)
block|{
name|byte
name|value
decl_stmt|;
while|while
condition|(
operator|(
name|value
operator|=
operator|(
name|byte
operator|)
name|iis
operator|.
name|read
argument_list|()
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|ByteSequence
name|expanded
init|=
name|os
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|expanded
operator|.
name|getData
argument_list|()
argument_list|,
name|expanded
operator|.
name|getOffset
argument_list|()
argument_list|,
name|expanded
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|Binary
argument_list|(
name|contents
operator|.
name|getData
argument_list|()
argument_list|,
name|contents
operator|.
name|getOffset
argument_list|()
argument_list|,
name|contents
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|result
return|;
block|}
end_class

begin_comment
comment|/**      * Return the encoded form of the Message as an AMQP Binary instance.      *      * @param message      *      the Message whose binary encoded body is needed.      *      * @return a Binary instance containing the encoded message body.      *      * @throws JMSException if an error occurs while fetching the binary payload.      */
end_comment

begin_function
specifier|public
name|Binary
name|getBinaryFromMessageBody
parameter_list|(
name|TextMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQTextMessage
name|textMessage
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
decl_stmt|;
name|Binary
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|textMessage
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|contents
init|=
name|textMessage
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|textMessage
operator|.
name|isCompressed
argument_list|()
condition|)
block|{
try|try
init|(
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|contents
argument_list|)
init|;                      InflaterInputStream iis = new InflaterInputStream(is)
empty_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|iis
argument_list|)
decl_stmt|;
block|)
block|{
name|int
name|size
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|uncompressed
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|uncompressed
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|cause
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Message includes a size prefix of four bytes for the OpenWire marshaler
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|contents
operator|.
name|getData
argument_list|()
argument_list|,
name|contents
operator|.
name|getOffset
argument_list|()
operator|+
literal|4
argument_list|,
name|contents
operator|.
name|getLength
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_elseif
elseif|else
if|if
condition|(
name|textMessage
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Binary
argument_list|(
name|textMessage
operator|.
name|getText
argument_list|()
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_return
return|return
name|result
return|;
end_return

begin_comment
unit|}
comment|/**      * Return the underlying Map from the JMS MapMessage instance.      *      * @param message      *      the MapMessage whose underlying Map is requested.      *      * @return the underlying Map used to store the value in the given MapMessage.      *      * @throws JMSException if an error occurs in constructing or fetching the Map.      */
end_comment

begin_function
unit|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getMapFromMessageBody
parameter_list|(
name|MapMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ActiveMQMapMessage
name|mapMessage
init|=
operator|(
name|ActiveMQMapMessage
operator|)
name|message
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contentMap
init|=
name|mapMessage
operator|.
name|getContentMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentMap
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|contentMap
argument_list|)
expr_stmt|;
block|}
return|return
name|contentMap
return|;
block|}
end_function

begin_comment
comment|/**      * Sets the given Message Property on the given message overriding any read-only      * state on the Message long enough for the property to be added.      *      * @param message      *      the message to set the property on.      * @param key      *      the String key for the new Message property      * @param value      *      the Object to assign to the new Message property.      *      * @throws JMSException if an error occurs while setting the property.      */
end_comment

begin_function
specifier|public
name|void
name|setMessageProperty
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|ActiveMQMessage
name|amqMessage
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
decl_stmt|;
name|boolean
name|oldValue
init|=
name|amqMessage
operator|.
name|isReadOnlyProperties
argument_list|()
decl_stmt|;
name|amqMessage
operator|.
name|setReadOnlyProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|amqMessage
operator|.
name|setObjectProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|amqMessage
operator|.
name|setReadOnlyProperties
argument_list|(
name|oldValue
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

