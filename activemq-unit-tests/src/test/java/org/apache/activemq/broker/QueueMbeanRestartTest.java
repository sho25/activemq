begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|QueueMbeanRestartTest
extends|extends
name|TestSupport
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueMbeanRestartTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|QueueMbeanRestartTest
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|topic
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestMBeanPresenceOnRestart
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"defaultPersistenceAdapter"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|PersistenceAdapterChoice
operator|.
name|KahaDB
block|,
name|PersistenceAdapterChoice
operator|.
name|LevelDB
block|,
name|PersistenceAdapterChoice
operator|.
name|JDBC
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMBeanPresenceOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|verifyPresenceOfQueueMbean
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"restart...."
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|()
expr_stmt|;
name|verifyPresenceOfQueueMbean
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|restartBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPresenceOfQueueMbean
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ObjectName
name|name
range|:
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|queryNames
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"candidate :"
operator|+
name|name
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|name
operator|.
name|getKeyProperty
argument_list|(
literal|"destinationType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|equals
argument_list|(
literal|"Queue"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
operator|(
operator|(
name|ActiveMQQueue
operator|)
name|createDestination
argument_list|()
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
argument_list|,
name|name
operator|.
name|getKeyProperty
argument_list|(
literal|"destinationName"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"found mbbean "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"expected to find matching queue mbean for: "
operator|+
name|createDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|createConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|createDestination
argument_list|()
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createBroker
parameter_list|(
name|boolean
name|deleteAll
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|setDefaultPersistenceAdapter
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAll
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

