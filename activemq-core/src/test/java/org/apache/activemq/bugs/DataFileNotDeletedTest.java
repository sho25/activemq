begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|async
operator|.
name|AsyncDataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQPersistenceAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * see https://issues.apache.org/activemq/browse/AMQ-1926  */
end_comment

begin_class
specifier|public
class|class
name|DataFileNotDeletedTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DataFileNotDeletedTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|max_messages
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|max_messages
init|=
literal|600
decl_stmt|;
specifier|private
specifier|static
name|int
name|messageCounter
decl_stmt|;
specifier|private
specifier|final
name|String
name|destinationName
init|=
name|getName
argument_list|()
operator|+
literal|"_Queue"
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|Connection
name|receiverConnection
decl_stmt|;
specifier|private
name|Connection
name|producerConnection
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useTopic
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
name|AMQPersistenceAdapter
name|persistentAdapter
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|payload
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
literal|512
index|]
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|messageCounter
operator|=
literal|0
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|receiverConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|receiverConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|producerConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|receiverConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testForDataFileNotDeleted
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestForDataFileNotDeleted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testForDataFileNotDeletedTransacted
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestForDataFileNotDeleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestForDataFileNotDeleted
parameter_list|(
name|boolean
name|transacted
parameter_list|)
throws|throws
name|Exception
block|{
name|Receiver
name|receiver
init|=
operator|new
name|Receiver
argument_list|()
block|{
specifier|public
name|void
name|receive
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|Exception
block|{
name|messageCounter
operator|++
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|buildReceiver
argument_list|(
name|receiverConnection
argument_list|,
name|destinationName
argument_list|,
name|transacted
argument_list|,
name|receiver
argument_list|,
name|useTopic
argument_list|)
expr_stmt|;
specifier|final
name|MessageSender
name|producer
init|=
operator|new
name|MessageSender
argument_list|(
name|destinationName
argument_list|,
name|producerConnection
argument_list|,
name|transacted
argument_list|,
name|useTopic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|max_messages
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|payload
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|max_messages
argument_list|,
name|messageCounter
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent and received + "
operator|+
name|messageCounter
operator|+
literal|", file count "
operator|+
name|persistentAdapter
operator|.
name|getAsyncDataManager
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitFordataFilesToBeCleanedUp
argument_list|(
name|persistentAdapter
operator|.
name|getAsyncDataManager
argument_list|()
argument_list|,
literal|60000
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitFordataFilesToBeCleanedUp
parameter_list|(
name|AsyncDataManager
name|asyncDataManager
parameter_list|,
name|int
name|timeout
parameter_list|,
name|int
name|numExpected
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|expiry
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
while|while
condition|(
name|expiry
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
if|if
condition|(
name|asyncDataManager
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|numExpected
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|assertEquals
argument_list|(
literal|"persistence adapter dataManager has correct number of files"
argument_list|,
name|numExpected
argument_list|,
name|asyncDataManager
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|createConnection
argument_list|()
return|;
block|}
specifier|private
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Default"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceFactory
argument_list|(
operator|new
name|AMQPersistenceAdapterFactory
argument_list|()
argument_list|)
expr_stmt|;
name|AMQPersistenceAdapterFactory
name|factory
init|=
operator|(
name|AMQPersistenceAdapterFactory
operator|)
name|broker
operator|.
name|getPersistenceFactory
argument_list|()
decl_stmt|;
comment|// ensure there are a bunch of data files but multiple entries in each
name|factory
operator|.
name|setMaxFileLength
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
comment|// speed up the test case, checkpoint an cleanup early and often
name|factory
operator|.
name|setCheckpointInterval
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setCleanupInterval
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setSyncOnWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|persistentAdapter
operator|=
operator|(
name|AMQPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting broker.."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|buildReceiver
parameter_list|(
name|Connection
name|connection
parameter_list|,
specifier|final
name|String
name|queueName
parameter_list|,
name|boolean
name|transacted
parameter_list|,
specifier|final
name|Receiver
name|receiver
parameter_list|,
name|boolean
name|isTopic
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Session
name|session
init|=
name|transacted
condition|?
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
else|:
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|inputMessageConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|isTopic
condition|?
name|session
operator|.
name|createTopic
argument_list|(
name|queueName
argument_list|)
else|:
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
argument_list|)
decl_stmt|;
name|MessageListener
name|messageListener
init|=
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|ObjectMessage
name|objectMessage
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|objectMessage
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|receiver
operator|.
name|receive
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|inputMessageConsumer
operator|.
name|setMessageListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

