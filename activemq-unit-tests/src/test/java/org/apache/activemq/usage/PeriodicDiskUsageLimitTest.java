begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|StoreUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  * This test is for AMQ-5393  and will check that schedulePeriodForDiskLimitCheck  * properly schedules a task that will update disk limits if the amount of usable disk space drops  * because another process uses up disk space.  *  */
end_comment

begin_class
specifier|public
class|class
name|PeriodicDiskUsageLimitTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PeriodicDiskUsageLimitTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dataFileDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|testfile
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|PersistenceAdapter
name|adapter
decl_stmt|;
specifier|private
name|TempUsage
name|tempUsage
decl_stmt|;
specifier|private
name|StoreUsage
name|storeUsage
decl_stmt|;
specifier|protected
name|URI
name|brokerConnectURI
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUpBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testfile
operator|=
name|dataFileDir
operator|.
name|newFile
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataFileDir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adapter
operator|=
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|brokerConnectURI
operator|=
name|broker
operator|.
name|getConnectorByName
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getConnectUri
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|testfile
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|broker
operator|.
name|getTempDataStore
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SystemUsage
name|systemUsage
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
decl_stmt|;
name|tempUsage
operator|=
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
expr_stmt|;
name|storeUsage
operator|=
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|testfile
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test will show that if a file is written to take away free space, and      * if the usage limit is now less than the store size plus remaining free space, then      * the usage limits will adjust lower.      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
specifier|public
name|void
name|testDiskUsageAdjustLower
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set the limit to max space so that if a file is added to eat up free space then
comment|//the broker should adjust the usage limit..set time to 2 seconds for testing
name|setLimitMaxSpace
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setSchedulePeriodForDiskUsageCheck
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|assertRampDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * This test will show that if a file is written to take away free space, and      * if the usage limit is now less than the store size plus remaining free space, then      * the usage limits will adjust lower.  Then test that size regrows when file is deleted.      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90000
argument_list|)
specifier|public
name|void
name|testDiskUsageAdjustLowerAndHigherUsingPercent
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set the limit to max space so that if a file is added to eat up free space then
comment|//the broker should adjust the usage limit..add 5% above free space
name|tempUsage
operator|.
name|setPercentLimit
argument_list|(
name|getFreePercentage
argument_list|(
name|broker
operator|.
name|getTempDataStore
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|+
literal|5
argument_list|)
expr_stmt|;
name|storeUsage
operator|.
name|setPercentLimit
argument_list|(
name|getFreePercentage
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|+
literal|5
argument_list|)
expr_stmt|;
comment|//set threshold to 1 megabyte
name|broker
operator|.
name|setDiskUsageCheckRegrowThreshold
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSchedulePeriodForDiskUsageCheck
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|assertRampDown
argument_list|()
expr_stmt|;
comment|//get the limits and then delete the test file to free up space
specifier|final
name|long
name|storeLimit
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
specifier|final
name|long
name|tmpLimit
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|testfile
argument_list|)
expr_stmt|;
comment|//regrow
name|assertTrue
argument_list|(
literal|"Store Usage should ramp up."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>
name|storeLimit
return|;
block|}
block|}
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
comment|//regrow
name|assertTrue
argument_list|(
literal|"Temp Usage should ramp up."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>
name|tmpLimit
return|;
block|}
block|}
argument_list|,
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test shows that the usage limits will not change if the      * schedulePeriodForDiskLimitCheck property is not set because no task will run      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDiskLimitCheckNotSet
parameter_list|()
throws|throws
name|Exception
block|{
name|setLimitMaxSpace
argument_list|()
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|long
name|originalDisk
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|long
name|originalTmp
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//write a 5 meg file to the file system
name|writeTestFile
argument_list|(
literal|5
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|//assert that the usage limits have not changed because a task should not have run
name|assertEquals
argument_list|(
name|originalDisk
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalTmp
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test shows that the usage limits will not change if the      * schedulePeriodForDiskLimitCheck property is not set because no task will run      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDiskLimitCheckNotSetUsingPercent
parameter_list|()
throws|throws
name|Exception
block|{
name|tempUsage
operator|.
name|setPercentLimit
argument_list|(
name|getFreePercentage
argument_list|(
name|broker
operator|.
name|getTempDataStore
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|+
literal|5
argument_list|)
expr_stmt|;
name|storeUsage
operator|.
name|setPercentLimit
argument_list|(
name|getFreePercentage
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
operator|+
literal|5
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|long
name|originalDisk
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|long
name|originalTmp
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//write a 5 meg file to the file system
name|writeTestFile
argument_list|(
literal|5
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|//assert that the usage limits have not changed because a task should not have run
name|assertEquals
argument_list|(
name|originalDisk
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalTmp
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test will show that if a file is written to take away free space, but      * if the limit is greater than the store size and the remaining free space, then      * the usage limits will not adjust.      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDiskUsageStaySame
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set a limit lower than max available space and set the period to 2 seconds
name|tempUsage
operator|.
name|setLimit
argument_list|(
literal|10000000
argument_list|)
expr_stmt|;
name|storeUsage
operator|.
name|setLimit
argument_list|(
literal|100000000
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSchedulePeriodForDiskUsageCheck
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|long
name|originalDisk
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|long
name|originalTmp
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//write a 2 meg file to the file system
name|writeTestFile
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|//Assert that the usage limits have not changed because writing a 2 meg file
comment|//did not decrease the the free space below the already set limit
name|assertEquals
argument_list|(
name|originalDisk
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalTmp
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test will show that if a file is written to take away free space, but      * if the limit is greater than the store size and the remaining free space, then      * the usage limits will not adjust.      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDiskUsageStaySameUsingPercent
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set a limit lower than max available space and set the period to 5 seconds
comment|//only run if at least 4 percent disk space free
name|int
name|tempFreePercent
init|=
name|getFreePercentage
argument_list|(
name|broker
operator|.
name|getTempDataStore
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|freePercent
init|=
name|getFreePercentage
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|freePercent
operator|>=
literal|4
operator|&&
name|tempFreePercent
operator|>=
literal|4
condition|)
block|{
name|tempUsage
operator|.
name|setPercentLimit
argument_list|(
name|freePercent
operator|/
literal|2
argument_list|)
expr_stmt|;
name|storeUsage
operator|.
name|setPercentLimit
argument_list|(
name|tempFreePercent
operator|/
literal|2
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSchedulePeriodForDiskUsageCheck
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|long
name|originalDisk
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
name|long
name|originalTmp
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//write a 5 meg file to the file system
name|writeTestFile
argument_list|(
literal|5
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|//Assert that the usage limits have not changed because writing a 2 meg file
comment|//did not decrease the the free space below the already set limit
name|assertEquals
argument_list|(
name|originalDisk
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|originalTmp
argument_list|,
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertRampDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Try a couple of times because other processes could write/delete from disk
name|assertTrue
argument_list|(
literal|"Store Usage should ramp down"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|testfile
argument_list|)
expr_stmt|;
specifier|final
name|long
name|originalDisk
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
specifier|final
name|long
name|originalTmp
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//write a 10 meg file to the file system
name|writeTestFile
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|//Assert that the usage limits have been decreased because some free space was used
comment|//up by a file
name|boolean
name|storeUsageRampDown
init|=
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
name|originalDisk
return|;
block|}
block|}
argument_list|,
literal|12000
argument_list|)
decl_stmt|;
name|boolean
name|tempUsageRampDown
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|storeUsageRampDown
condition|)
block|{
name|tempUsageRampDown
operator|=
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
name|originalTmp
return|;
block|}
block|}
argument_list|,
literal|12000
argument_list|)
expr_stmt|;
block|}
return|return
name|storeUsageRampDown
operator|&&
name|tempUsageRampDown
return|;
block|}
block|}
argument_list|,
literal|60000
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setLimitMaxSpace
parameter_list|()
block|{
comment|//Configure store limits to be the max usable space on startup
name|tempUsage
operator|.
name|setLimit
argument_list|(
name|broker
operator|.
name|getTempDataStore
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|.
name|getUsableSpace
argument_list|()
argument_list|)
expr_stmt|;
name|storeUsage
operator|.
name|setLimit
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
operator|.
name|getUsableSpace
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeTestFile
parameter_list|(
name|int
name|size
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
specifier|final
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
try|try
init|(
name|FileOutputStream
name|stream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|testfile
argument_list|)
init|)
block|{
name|IOUtils
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|getFreePercentage
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|File
name|storeDir
init|=
name|StoreUtil
operator|.
name|findParentDirectory
argument_list|(
name|directory
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|double
operator|)
name|storeDir
operator|.
name|getUsableSpace
argument_list|()
operator|/
name|storeDir
operator|.
name|getTotalSpace
argument_list|()
operator|)
operator|*
literal|100
argument_list|)
return|;
block|}
block|}
end_class

end_unit

