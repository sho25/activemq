begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_comment
comment|/**  * A helper class for running code with a PersistenceAdapter  * in a transaction.  *  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|TransactionTemplate
block|{
specifier|private
name|PersistenceAdapter
name|persistenceAdapter
decl_stmt|;
specifier|private
name|ConnectionContext
name|context
decl_stmt|;
specifier|public
name|TransactionTemplate
parameter_list|(
name|PersistenceAdapter
name|persistenceAdapter
parameter_list|,
name|ConnectionContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|persistenceAdapter
operator|=
name|persistenceAdapter
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|(
name|Callback
name|task
parameter_list|)
throws|throws
name|IOException
block|{
name|persistenceAdapter
operator|.
name|beginTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|Throwable
name|throwable
init|=
literal|null
decl_stmt|;
try|try
block|{
name|task
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|t
parameter_list|)
block|{
name|throwable
operator|=
name|t
expr_stmt|;
throw|throw
name|t
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|t
parameter_list|)
block|{
name|throwable
operator|=
name|t
expr_stmt|;
throw|throw
name|t
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|throwable
operator|=
name|t
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Persistence task failed: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|throwable
operator|==
literal|null
condition|)
block|{
name|persistenceAdapter
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|persistenceAdapter
operator|.
name|rollbackTransaction
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ConnectionContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|PersistenceAdapter
name|getPersistenceAdapter
parameter_list|()
block|{
return|return
name|persistenceAdapter
return|;
block|}
block|}
end_class

end_unit

