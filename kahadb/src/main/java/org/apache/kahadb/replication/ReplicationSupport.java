begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBJournalLocation
import|;
end_import

begin_class
specifier|public
class|class
name|ReplicationSupport
block|{
specifier|static
specifier|public
name|PBJournalLocation
name|convert
parameter_list|(
name|Location
name|loc
parameter_list|)
block|{
if|if
condition|(
name|loc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|PBJournalLocation
argument_list|()
operator|.
name|setFileId
argument_list|(
name|loc
operator|.
name|getDataFileId
argument_list|()
argument_list|)
operator|.
name|setOffset
argument_list|(
name|loc
operator|.
name|getOffset
argument_list|()
argument_list|)
return|;
block|}
specifier|static
specifier|public
name|Location
name|convert
parameter_list|(
name|PBJournalLocation
name|location
parameter_list|)
block|{
name|Location
name|rc
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setDataFileId
argument_list|(
name|location
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOffset
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|static
specifier|public
name|long
name|copyAndChecksum
parameter_list|(
name|File
name|input
parameter_list|,
name|File
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|is
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
name|Checksum
name|checksum
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|checksum
operator|.
name|getValue
argument_list|()
return|;
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|public
specifier|static
name|PBFileInfo
name|createInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|File
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|PBFileInfo
name|rc
init|=
operator|new
name|PBFileInfo
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setChecksum
argument_list|(
name|checksum
argument_list|(
name|file
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setEnd
argument_list|(
name|length
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
specifier|static
name|long
name|checksum
parameter_list|(
name|File
name|file
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|RandomAccessFile
name|raf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
decl_stmt|;
try|try
block|{
name|Checksum
name|checksum
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
name|long
name|pos
init|=
name|start
decl_stmt|;
name|raf
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
while|while
condition|(
name|pos
operator|<
name|end
operator|&&
operator|(
name|c
operator|=
name|raf
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|end
operator|-
name|pos
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|checksum
operator|.
name|update
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|c
expr_stmt|;
block|}
return|return
name|checksum
operator|.
name|getValue
argument_list|()
return|;
block|}
finally|finally
block|{
try|try
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
block|}
block|}
block|}
end_class

end_unit

