begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly  * compute the size of the messages in the store.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMessageStoreSizeTest
block|{
specifier|protected
specifier|static
specifier|final
name|IdGenerator
name|id
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|protected
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
specifier|protected
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
literal|"1.1.1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|20
decl_stmt|;
specifier|protected
specifier|static
name|String
name|dataDirectory
init|=
literal|"target/test-amq-5748/datadb"
decl_stmt|;
specifier|protected
specifier|static
name|int
name|testMessageSize
init|=
literal|1000
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|initStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|destroyStore
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|initStore
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|protected
specifier|abstract
name|void
name|destroyStore
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * This method tests that the message size exists after writing a bunch of messages to the store.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|writeMessages
argument_list|()
expr_stmt|;
name|long
name|messageSize
init|=
name|getMessageStore
argument_list|()
operator|.
name|getMessageSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|getMessageStore
argument_list|()
operator|.
name|getMessageCount
argument_list|()
operator|==
literal|20
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|messageSize
operator|>
literal|20
operator|*
name|testMessageSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write random byte messages to the store for testing.      *      * @throws Exception      */
specifier|protected
name|void
name|writeMessages
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQMessage
name|message
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|testMessageSize
index|]
decl_stmt|;
specifier|final
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
operator|new
name|ByteSequence
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|id
operator|.
name|generateId
argument_list|()
operator|+
literal|":1"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|getMessageStore
argument_list|()
operator|.
name|addMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|MessageStore
name|getMessageStore
parameter_list|()
function_decl|;
block|}
end_class

end_unit

