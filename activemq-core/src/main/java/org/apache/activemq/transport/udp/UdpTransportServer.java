begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|InactivityMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCorrelator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A UDP based implementation of {@link TransportServer}  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|UdpTransportServer
extends|extends
name|TransportServerSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UdpTransportServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|UdpTransport
name|serverTransport
decl_stmt|;
specifier|private
name|Map
name|transports
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|UdpTransportServer
parameter_list|(
name|UdpTransport
name|serverTransport
parameter_list|)
block|{
name|this
operator|.
name|serverTransport
operator|=
name|serverTransport
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"UdpTransportServer@"
operator|+
name|serverTransport
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{     }
specifier|public
name|UdpTransport
name|getServerTransport
parameter_list|()
block|{
return|return
name|serverTransport
return|;
block|}
specifier|public
name|void
name|setBrokerInfo
parameter_list|(
name|BrokerInfo
name|brokerInfo
parameter_list|)
block|{     }
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|serverTransport
operator|.
name|start
argument_list|()
expr_stmt|;
name|serverTransport
operator|.
name|setCommandProcessor
argument_list|(
operator|new
name|CommandProcessor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Command
name|command
parameter_list|,
name|SocketAddress
name|address
parameter_list|)
block|{
name|onInboundCommand
argument_list|(
name|command
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|serverTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|onInboundCommand
parameter_list|(
name|Command
name|command
parameter_list|,
name|SocketAddress
name|address
parameter_list|)
block|{
name|Transport
name|transport
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|transports
init|)
block|{
name|transport
operator|=
operator|(
name|Transport
operator|)
name|transports
operator|.
name|get
argument_list|(
name|address
argument_list|)
expr_stmt|;
if|if
condition|(
name|transport
operator|==
literal|null
condition|)
block|{
name|transport
operator|=
name|createTransport
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|transport
operator|=
name|configureTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|transports
operator|.
name|put
argument_list|(
name|address
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
block|}
name|processInboundCommand
argument_list|(
name|command
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendOutboundCommand
parameter_list|(
name|Command
name|command
parameter_list|,
name|SocketAddress
name|address
parameter_list|)
block|{
comment|// TODO we should use an inbound buffer to make this async
block|}
specifier|protected
name|void
name|processInboundCommand
parameter_list|(
name|Command
name|command
parameter_list|,
name|Transport
name|transport
parameter_list|)
block|{
comment|// TODO - consider making this asynchronous
name|TransportListener
name|listener
init|=
name|transport
operator|.
name|getTransportListener
argument_list|()
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"No transportListener available for transport: "
operator|+
name|transport
operator|+
literal|" to process inbound command: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Transport
name|configureTransport
parameter_list|(
name|Transport
name|transport
parameter_list|)
block|{
name|transport
operator|=
operator|new
name|ResponseCorrelator
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|InactivityMonitor
argument_list|(
name|transport
argument_list|,
name|serverTransport
operator|.
name|getMaxInactivityDuration
argument_list|()
argument_list|)
expr_stmt|;
name|getAcceptListener
argument_list|()
operator|.
name|onAccept
argument_list|(
name|transport
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
specifier|protected
name|TransportSupport
name|createTransport
parameter_list|(
name|SocketAddress
name|address
parameter_list|)
block|{
return|return
operator|new
name|UdpTransportServerClient
argument_list|(
name|this
argument_list|,
name|address
argument_list|)
return|;
block|}
block|}
end_class

end_unit

