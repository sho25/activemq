begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_class
specifier|public
class|class
name|WildcardToRegExTransformFilter
extends|extends
name|WildcardTransformFilter
block|{
comment|/**      * Creates a filter that is able to transform a wildcard query to a regular expression query string      * @param next - next query filter      */
specifier|public
name|WildcardToRegExTransformFilter
parameter_list|(
name|RegExQueryFilter
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Use to determine if a query string is a wildcard query. A query string is a wildcard query if it is a key-value      * pair with the format<key>=<value> and the value contains '*' and '?'.      * @param query - query string      * @return true, if the query string is a wildcard query, false otherwise      */
specifier|protected
name|boolean
name|isWildcardQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
comment|// If the query is a key=value pair
name|String
name|key
init|=
name|query
decl_stmt|;
name|String
name|val
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|val
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// If the value contains wildcards
return|return
operator|(
operator|(
name|val
operator|.
name|indexOf
argument_list|(
literal|"*"
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
name|val
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
operator|>=
literal|0
operator|)
operator|)
return|;
block|}
comment|/**      * Transform a wildcard query to regular expression format      * @param query - query string to transform      * @return regex query string      */
specifier|protected
name|String
name|transformWildcardQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
comment|// Get the key=value pair
name|String
name|key
init|=
name|query
decl_stmt|;
name|String
name|val
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|val
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|val
operator|=
name|val
operator|.
name|replaceAll
argument_list|(
literal|"[.]"
argument_list|,
literal|"\\\\."
argument_list|)
expr_stmt|;
comment|// Escape all dot characters. From (.) to (\.)
name|val
operator|=
name|val
operator|.
name|replaceAll
argument_list|(
literal|"[?]"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
comment|// Match single characters
name|val
operator|=
name|val
operator|.
name|replaceAll
argument_list|(
literal|"[*]"
argument_list|,
literal|".*?"
argument_list|)
expr_stmt|;
comment|// Match all characters, use reluctant quantifier
name|val
operator|=
literal|"("
operator|+
name|val
operator|+
literal|")"
expr_stmt|;
comment|// Let's group the query for clarity
name|val
operator|=
name|RegExQueryFilter
operator|.
name|REGEX_PREFIX
operator|+
name|val
expr_stmt|;
comment|// Flag as a regular expression query
return|return
name|key
operator|+
literal|"="
operator|+
name|val
return|;
block|}
block|}
end_class

end_unit

