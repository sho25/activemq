begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_comment
comment|/**  * Various Tests to show the memory leak suspect in network of brokers. This is  * for https://issues.apache.org/activemq/browse/AMQ-2530  *  */
end_comment

begin_class
specifier|public
class|class
name|NetworkRemovesSubscriptionsTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
specifier|static
name|String
name|frontEndAddress
init|=
literal|"tcp://0.0.0.0:61617"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|backEndAddress
init|=
literal|"tcp://0.0.0.0:61616"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TOPIC_NAME
init|=
literal|"TEST_TOPIC"
decl_stmt|;
specifier|private
name|BrokerService
name|frontEnd
decl_stmt|;
specifier|private
name|BrokerService
name|backEnd
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|frontEndAddress
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|TOPIC_NAME
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testWithSessionAndSubsciberClose
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|TopicSession
name|subscriberSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|subscriber
init|=
name|subscriberSession
operator|.
name|createSubscriber
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|DummyMessageListener
name|listener
init|=
operator|new
name|DummyMessageListener
argument_list|()
decl_stmt|;
name|subscriber
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|subscriberSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Destination
name|dest
init|=
name|backEnd
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWithSessionCloseOutsideTheLoop
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|TopicSession
name|subscriberSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|TopicSubscriber
name|subscriber
init|=
name|subscriberSession
operator|.
name|createSubscriber
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|DummyMessageListener
name|listener
init|=
operator|new
name|DummyMessageListener
argument_list|()
decl_stmt|;
name|subscriber
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|subscriberSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Destination
name|dest
init|=
name|backEnd
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWithOneSubscriber
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|TopicSession
name|subscriberSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|subscriber
init|=
name|subscriberSession
operator|.
name|createSubscriber
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|DummyMessageListener
name|listener
init|=
operator|new
name|DummyMessageListener
argument_list|()
decl_stmt|;
name|subscriber
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|subscriberSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Destination
name|dest
init|=
name|backEnd
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWithoutSessionAndSubsciberClose
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|TopicSession
name|subscriberSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|subscriber
init|=
name|subscriberSession
operator|.
name|createSubscriber
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Destination
name|dest
init|=
name|backEnd
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Running this test you can produce a leak of only 2 ConsumerInfo on BE      * broker, NOT 200 as in other cases!      *      */
specifier|public
name|void
name|testWithoutSessionAndSubsciberClosePlayAround
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|TopicSession
name|subscriberSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|subscriber
init|=
name|subscriberSession
operator|.
name|createSubscriber
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|DummyMessageListener
name|listener
init|=
operator|new
name|DummyMessageListener
argument_list|()
decl_stmt|;
name|subscriber
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|50
condition|)
block|{
name|subscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|subscriberSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Destination
name|dest
init|=
name|backEnd
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dest
operator|.
name|getConsumers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
class|class
name|DummyMessageListener
implements|implements
name|MessageListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|arg0
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|backEnd
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|this
operator|.
name|backEnd
operator|.
name|setBrokerName
argument_list|(
literal|"backEnd"
argument_list|)
expr_stmt|;
name|this
operator|.
name|backEnd
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NetworkConnector
name|backEndNetwork
init|=
name|this
operator|.
name|backEnd
operator|.
name|addNetworkConnector
argument_list|(
literal|"static://"
operator|+
name|frontEndAddress
argument_list|)
decl_stmt|;
name|backEndNetwork
operator|.
name|setName
argument_list|(
literal|"backEndNetwork"
argument_list|)
expr_stmt|;
name|backEndNetwork
operator|.
name|setDynamicOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|backEnd
operator|.
name|addConnector
argument_list|(
name|backEndAddress
argument_list|)
expr_stmt|;
name|this
operator|.
name|backEnd
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|frontEnd
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|this
operator|.
name|frontEnd
operator|.
name|setBrokerName
argument_list|(
literal|"frontEnd"
argument_list|)
expr_stmt|;
name|this
operator|.
name|frontEnd
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|NetworkConnector
name|frontEndNetwork
init|=
name|this
operator|.
name|frontEnd
operator|.
name|addNetworkConnector
argument_list|(
literal|"static://"
operator|+
name|backEndAddress
argument_list|)
decl_stmt|;
name|frontEndNetwork
operator|.
name|setName
argument_list|(
literal|"frontEndNetwork"
argument_list|)
expr_stmt|;
name|this
operator|.
name|frontEnd
operator|.
name|addConnector
argument_list|(
name|frontEndAddress
argument_list|)
expr_stmt|;
name|this
operator|.
name|frontEnd
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|backEnd
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|backEnd
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|frontEnd
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|frontEnd
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

