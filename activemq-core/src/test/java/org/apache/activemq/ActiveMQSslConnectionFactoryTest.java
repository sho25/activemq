begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslBrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQSslConnectionFactoryTest
extends|extends
name|CombinationTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ActiveMQSslConnectionFactoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_TYPE
init|=
literal|"jks"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_KEYSTORE
init|=
literal|"src/test/resources/server.keystore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUST_KEYSTORE
init|=
literal|"src/test/resources/client.keystore"
decl_stmt|;
specifier|private
name|TransportConnector
name|connector
decl_stmt|;
specifier|private
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Try our best to close any previously opend connection.
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
comment|// Try our best to stop any previously started broker.
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testCreateTcpConnectionUsingKnownPort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Control case: check that the factory can create an ordinary (non-ssl) connection.
name|broker
operator|=
name|createBroker
argument_list|(
literal|"tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true"
argument_list|)
expr_stmt|;
comment|// This should create the connection.
name|ActiveMQSslConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQSslConnectionFactory
argument_list|(
literal|"tcp://localhost:61610?wireFormat.tcpNoDelayEnabled=true"
argument_list|)
decl_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|brokerStop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateSslConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create SSL/TLS connection with trusted cert from truststore.
name|String
name|sslUri
init|=
literal|"ssl://localhost:61611"
decl_stmt|;
name|broker
operator|=
name|createSslBroker
argument_list|(
name|sslUri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// This should create the connection.
name|ActiveMQSslConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQSslConnectionFactory
argument_list|(
name|sslUri
argument_list|)
decl_stmt|;
name|cf
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created client connection"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|brokerStop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testNegativeCreateSslConnectionWithWrongPassword
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create SSL/TLS connection with trusted cert from truststore.
name|String
name|sslUri
init|=
literal|"ssl://localhost:61611"
decl_stmt|;
name|broker
operator|=
name|createSslBroker
argument_list|(
name|sslUri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// This should FAIL to connect, due to wrong password.
name|ActiveMQSslConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQSslConnectionFactory
argument_list|(
name|sslUri
argument_list|)
decl_stmt|;
name|cf
operator|.
name|setTrustStore
argument_list|(
literal|"server.keystore"
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setTrustStorePassword
argument_list|(
literal|"wrongPassword"
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|ignore
parameter_list|)
block|{
comment|// Expected exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected java.io.Exception ["
operator|+
name|ignore
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|brokerStop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testNegativeCreateSslConnectionWithWrongCert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create SSL/TLS connection with trusted cert from truststore.
name|String
name|sslUri
init|=
literal|"ssl://localhost:61611"
decl_stmt|;
name|broker
operator|=
name|createSslBroker
argument_list|(
name|sslUri
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// This should FAIL to connect, due to wrong password.
name|ActiveMQSslConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQSslConnectionFactory
argument_list|(
name|sslUri
argument_list|)
decl_stmt|;
name|cf
operator|.
name|setTrustStore
argument_list|(
literal|"dummy.keystore"
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setTrustStorePassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|ignore
parameter_list|)
block|{
comment|// Expected exception
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected SSLHandshakeException ["
operator|+
name|ignore
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|brokerStop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Start up a broker with a tcp connector.
name|BrokerService
name|service
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|=
name|service
operator|.
name|addConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|BrokerService
name|createSslBroker
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
comment|// http://java.sun.com/javase/javaseforbusiness/docs/TLSReadme.html
comment|// work around: javax.net.ssl.SSLHandshakeException: renegotiation is not allowed
comment|//System.setProperty("sun.security.ssl.allowUnsafeRenegotiation", "true");
name|SslBrokerService
name|service
init|=
operator|new
name|SslBrokerService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|KeyManager
index|[]
name|km
init|=
name|getKeyManager
argument_list|()
decl_stmt|;
name|TrustManager
index|[]
name|tm
init|=
name|getTrustManager
argument_list|()
decl_stmt|;
name|connector
operator|=
name|service
operator|.
name|addSslConnector
argument_list|(
name|uri
argument_list|,
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|void
name|brokerStop
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|TrustManager
index|[]
name|getTrustManager
parameter_list|()
throws|throws
name|Exception
block|{
name|TrustManager
index|[]
name|trustStoreManagers
init|=
literal|null
decl_stmt|;
name|KeyStore
name|trustedCertStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|ActiveMQSslConnectionFactoryTest
operator|.
name|KEYSTORE_TYPE
argument_list|)
decl_stmt|;
name|trustedCertStore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|ActiveMQSslConnectionFactoryTest
operator|.
name|TRUST_KEYSTORE
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|trustedCertStore
argument_list|)
expr_stmt|;
name|trustStoreManagers
operator|=
name|tmf
operator|.
name|getTrustManagers
argument_list|()
expr_stmt|;
return|return
name|trustStoreManagers
return|;
block|}
specifier|public
specifier|static
name|KeyManager
index|[]
name|getKeyManager
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|ActiveMQSslConnectionFactoryTest
operator|.
name|KEYSTORE_TYPE
argument_list|)
decl_stmt|;
name|KeyManager
index|[]
name|keystoreManagers
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|sslCert
init|=
name|loadClientCredential
argument_list|(
name|ActiveMQSslConnectionFactoryTest
operator|.
name|SERVER_KEYSTORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslCert
operator|!=
literal|null
operator|&&
name|sslCert
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|sslCert
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|bin
argument_list|,
name|ActiveMQSslConnectionFactoryTest
operator|.
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|ActiveMQSslConnectionFactoryTest
operator|.
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|keystoreManagers
operator|=
name|kmf
operator|.
name|getKeyManagers
argument_list|()
expr_stmt|;
block|}
return|return
name|keystoreManagers
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|loadClientCredential
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|int
name|i
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

