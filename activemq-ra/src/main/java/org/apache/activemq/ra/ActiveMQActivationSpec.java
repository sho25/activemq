begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|IntrospectionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ActivationSpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|InvalidPropertyException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ResourceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|selector
operator|.
name|SelectorParser
import|;
end_import

begin_comment
comment|/**  * Configures the inbound JMS consumer specification using ActiveMQ  *   * @org.apache.xbean.XBean element="activationSpec"  *   * @version $Revision$ $Date$  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQActivationSpec
implements|implements
name|ActivationSpec
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7153087544100459975L
decl_stmt|;
comment|/** Auto-acknowledge constant for<code>acknowledgeMode</code> property **/
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_ACKNOWLEDGE_MODE
init|=
literal|"Auto-acknowledge"
decl_stmt|;
comment|/** Dups-ok-acknowledge constant for<code>acknowledgeMode</code> property * */
specifier|public
specifier|static
specifier|final
name|String
name|DUPS_OK_ACKNOWLEDGE_MODE
init|=
literal|"Dups-ok-acknowledge"
decl_stmt|;
comment|/** Durable constant for<code>subscriptionDurability</code> property * */
specifier|public
specifier|static
specifier|final
name|String
name|DURABLE_SUBSCRIPTION
init|=
literal|"Durable"
decl_stmt|;
comment|/** NonDurable constant for<code>subscriptionDurability</code> property * */
specifier|public
specifier|static
specifier|final
name|String
name|NON_DURABLE_SUBSCRIPTION
init|=
literal|"NonDurable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|INVALID_ACKNOWLEDGE_MODE
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|transient
name|ActiveMQResourceAdapter
name|resourceAdapter
decl_stmt|;
specifier|private
name|String
name|destinationType
decl_stmt|;
specifier|private
name|String
name|messageSelector
decl_stmt|;
specifier|private
name|String
name|destination
decl_stmt|;
specifier|private
name|String
name|acknowledgeMode
init|=
name|AUTO_ACKNOWLEDGE_MODE
decl_stmt|;
specifier|private
name|String
name|userName
decl_stmt|;
specifier|private
name|String
name|password
decl_stmt|;
specifier|private
name|String
name|clientId
decl_stmt|;
specifier|private
name|String
name|subscriptionName
decl_stmt|;
specifier|private
name|String
name|subscriptionDurability
init|=
name|NON_DURABLE_SUBSCRIPTION
decl_stmt|;
specifier|private
name|String
name|noLocal
init|=
literal|"false"
decl_stmt|;
specifier|private
name|String
name|useRAManagedTransaction
init|=
literal|"false"
decl_stmt|;
specifier|private
name|String
name|maxSessions
init|=
literal|"10"
decl_stmt|;
specifier|private
name|String
name|maxMessagesPerSessions
init|=
literal|"10"
decl_stmt|;
specifier|private
name|String
name|enableBatch
init|=
literal|"false"
decl_stmt|;
specifier|private
name|String
name|maxMessagesPerBatch
init|=
literal|"10"
decl_stmt|;
specifier|private
name|RedeliveryPolicy
name|redeliveryPolicy
decl_stmt|;
comment|/**      * @see javax.resource.spi.ActivationSpec#validate()      */
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|InvalidPropertyException
block|{
name|List
name|errorMessages
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
name|propsNotSet
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isValidDestination
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"destination"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidDestinationType
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"destinationType"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidAcknowledgeMode
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"acknowledgeMode"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidSubscriptionDurability
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"subscriptionDurability"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidClientId
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"clientId"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidSubscriptionName
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"subscriptionName"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidMaxMessagesPerSessions
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"maxMessagesPerSessions"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidMaxSessions
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"maxSessions"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidMessageSelector
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"messageSelector"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidNoLocal
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"noLocal"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidUseRAManagedTransaction
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"useRAManagedTransaction"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidEnableBatch
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"enableBatch"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidMaxMessagesPerBatch
argument_list|(
name|errorMessages
argument_list|)
condition|)
name|propsNotSet
operator|.
name|add
argument_list|(
operator|new
name|PropertyDescriptor
argument_list|(
literal|"maxMessagesPerBatch"
argument_list|,
name|ActiveMQActivationSpec
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IntrospectionException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|propsNotSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuffer
name|b
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"Invalid settings:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|errorMessages
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InvalidPropertyException
name|e
init|=
operator|new
name|InvalidPropertyException
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PropertyDescriptor
index|[]
name|descriptors
init|=
operator|(
name|PropertyDescriptor
index|[]
operator|)
name|propsNotSet
operator|.
name|toArray
argument_list|(
operator|new
name|PropertyDescriptor
index|[
name|propsNotSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|e
operator|.
name|setInvalidPropertyDescriptors
argument_list|(
name|descriptors
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|boolean
name|isValidUseRAManagedTransaction
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
try|try
block|{
operator|new
name|Boolean
argument_list|(
name|noLocal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
name|errorMessages
operator|.
name|add
argument_list|(
literal|"noLocal must be set to: true or false."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidNoLocal
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
try|try
block|{
operator|new
name|Boolean
argument_list|(
name|noLocal
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
name|errorMessages
operator|.
name|add
argument_list|(
literal|"noLocal must be set to: true or false."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidMessageSelector
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|messageSelector
argument_list|)
condition|)
block|{
operator|new
name|SelectorParser
argument_list|()
operator|.
name|parse
argument_list|(
name|messageSelector
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|errorMessages
operator|.
name|add
argument_list|(
literal|"messageSelector not set to valid message selector: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|isValidMaxSessions
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxSessions
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{         }
name|errorMessages
operator|.
name|add
argument_list|(
literal|"maxSessions must be set to number> 0"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidMaxMessagesPerSessions
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxMessagesPerSessions
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{         }
name|errorMessages
operator|.
name|add
argument_list|(
literal|"maxMessagesPerSessions must be set to number> 0"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidMaxMessagesPerBatch
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxMessagesPerBatch
argument_list|)
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{         }
name|errorMessages
operator|.
name|add
argument_list|(
literal|"maxMessagesPerBatch must be set to number> 0"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidEnableBatch
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
try|try
block|{
operator|new
name|Boolean
argument_list|(
name|enableBatch
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{         }
name|errorMessages
operator|.
name|add
argument_list|(
literal|"enableBatch must be set to: true or false"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|/**      * @see javax.resource.spi.ResourceAdapterAssociation#getResourceAdapter()      */
specifier|public
name|ResourceAdapter
name|getResourceAdapter
parameter_list|()
block|{
return|return
name|resourceAdapter
return|;
block|}
comment|/**      * @see javax.resource.spi.ResourceAdapterAssociation#setResourceAdapter(javax.resource.spi.ResourceAdapter)      */
specifier|public
name|void
name|setResourceAdapter
parameter_list|(
name|ResourceAdapter
name|resourceAdapter
parameter_list|)
throws|throws
name|ResourceException
block|{
comment|//spec section 5.3.3
if|if
condition|(
name|this
operator|.
name|resourceAdapter
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ResourceException
argument_list|(
literal|"ResourceAdapter already set"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|resourceAdapter
operator|instanceof
name|ActiveMQResourceAdapter
operator|)
condition|)
block|{
throw|throw
operator|new
name|ResourceException
argument_list|(
literal|"ResourceAdapter is not of type: "
operator|+
name|ActiveMQResourceAdapter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|this
operator|.
name|resourceAdapter
operator|=
operator|(
name|ActiveMQResourceAdapter
operator|)
name|resourceAdapter
expr_stmt|;
block|}
comment|/////////////////////////////////////////////////////////////////////////
comment|//
comment|// Java Bean getters and setters for this ActivationSpec class.
comment|//
comment|/////////////////////////////////////////////////////////////////////////
comment|/**      * @return Returns the destinationType.      */
specifier|public
name|String
name|getDestinationType
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|destinationType
argument_list|)
condition|)
block|{
return|return
name|destinationType
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param destinationType The destinationType to set.      */
specifier|public
name|void
name|setDestinationType
parameter_list|(
name|String
name|destinationType
parameter_list|)
block|{
name|this
operator|.
name|destinationType
operator|=
name|destinationType
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|password
argument_list|)
condition|)
block|{
return|return
name|password
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|userName
argument_list|)
condition|)
block|{
return|return
name|userName
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
comment|/**      * @return Returns the messageSelector.      */
specifier|public
name|String
name|getMessageSelector
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|messageSelector
argument_list|)
condition|)
block|{
return|return
name|messageSelector
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param messageSelector The messageSelector to set.      */
specifier|public
name|void
name|setMessageSelector
parameter_list|(
name|String
name|messageSelector
parameter_list|)
block|{
name|this
operator|.
name|messageSelector
operator|=
name|messageSelector
expr_stmt|;
block|}
comment|/**      * @return Returns the noLocal.      */
specifier|public
name|String
name|getNoLocal
parameter_list|()
block|{
return|return
name|noLocal
return|;
block|}
comment|/**      * @param noLocal The noLocal to set.      */
specifier|public
name|void
name|setNoLocal
parameter_list|(
name|String
name|noLocal
parameter_list|)
block|{
if|if
condition|(
name|noLocal
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|noLocal
operator|=
name|noLocal
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getAcknowledgeMode
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|acknowledgeMode
argument_list|)
condition|)
block|{
return|return
name|acknowledgeMode
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setAcknowledgeMode
parameter_list|(
name|String
name|acknowledgeMode
parameter_list|)
block|{
name|this
operator|.
name|acknowledgeMode
operator|=
name|acknowledgeMode
expr_stmt|;
block|}
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|clientId
argument_list|)
condition|)
block|{
return|return
name|clientId
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
block|}
specifier|public
name|String
name|getDestination
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|destination
argument_list|)
condition|)
block|{
return|return
name|destination
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setDestination
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
specifier|public
name|String
name|getSubscriptionDurability
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|subscriptionDurability
argument_list|)
condition|)
block|{
return|return
name|subscriptionDurability
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setSubscriptionDurability
parameter_list|(
name|String
name|subscriptionDurability
parameter_list|)
block|{
name|this
operator|.
name|subscriptionDurability
operator|=
name|subscriptionDurability
expr_stmt|;
block|}
specifier|public
name|String
name|getSubscriptionName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|subscriptionName
argument_list|)
condition|)
block|{
return|return
name|subscriptionName
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setSubscriptionName
parameter_list|(
name|String
name|subscriptionName
parameter_list|)
block|{
name|this
operator|.
name|subscriptionName
operator|=
name|subscriptionName
expr_stmt|;
block|}
specifier|private
name|boolean
name|isValidSubscriptionName
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDurableSubscription
argument_list|()
condition|?
literal|true
else|:
name|subscriptionName
operator|!=
literal|null
operator|&&
name|subscriptionName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|errorMessages
operator|.
name|add
argument_list|(
literal|"subscriptionName must be set since durable subscription was requested."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidClientId
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isDurableSubscription
argument_list|()
condition|?
literal|true
else|:
name|clientId
operator|!=
literal|null
operator|&&
name|clientId
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|errorMessages
operator|.
name|add
argument_list|(
literal|"clientId must be set since durable subscription was requested."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isDurableSubscription
parameter_list|()
block|{
return|return
name|DURABLE_SUBSCRIPTION
operator|.
name|equals
argument_list|(
name|subscriptionDurability
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isValidSubscriptionDurability
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
comment|// subscriptionDurability only applies to Topics
if|if
condition|(
name|DURABLE_SUBSCRIPTION
operator|.
name|equals
argument_list|(
name|subscriptionDurability
argument_list|)
operator|&&
name|getDestinationType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|Topic
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getDestinationType
argument_list|()
argument_list|)
condition|)
block|{
name|errorMessages
operator|.
name|add
argument_list|(
literal|"subscriptionDurability cannot be set to: "
operator|+
name|DURABLE_SUBSCRIPTION
operator|+
literal|" when destinationType is set to "
operator|+
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" as it is only valid when destinationType is set to "
operator|+
name|Topic
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|NON_DURABLE_SUBSCRIPTION
operator|.
name|equals
argument_list|(
name|subscriptionDurability
argument_list|)
operator|||
name|DURABLE_SUBSCRIPTION
operator|.
name|equals
argument_list|(
name|subscriptionDurability
argument_list|)
condition|)
return|return
literal|true
return|;
name|errorMessages
operator|.
name|add
argument_list|(
literal|"subscriptionDurability must be set to: "
operator|+
name|NON_DURABLE_SUBSCRIPTION
operator|+
literal|" or "
operator|+
name|DURABLE_SUBSCRIPTION
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidAcknowledgeMode
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
if|if
condition|(
name|AUTO_ACKNOWLEDGE_MODE
operator|.
name|equals
argument_list|(
name|acknowledgeMode
argument_list|)
operator|||
name|DUPS_OK_ACKNOWLEDGE_MODE
operator|.
name|equals
argument_list|(
name|acknowledgeMode
argument_list|)
condition|)
return|return
literal|true
return|;
name|errorMessages
operator|.
name|add
argument_list|(
literal|"acknowledgeMode must be set to: "
operator|+
name|AUTO_ACKNOWLEDGE_MODE
operator|+
literal|" or "
operator|+
name|DUPS_OK_ACKNOWLEDGE_MODE
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidDestinationType
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
if|if
condition|(
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|destinationType
argument_list|)
operator|||
name|Topic
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|destinationType
argument_list|)
condition|)
return|return
literal|true
return|;
name|errorMessages
operator|.
name|add
argument_list|(
literal|"destinationType must be set to: "
operator|+
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" or "
operator|+
name|Topic
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidDestination
parameter_list|(
name|List
name|errorMessages
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|destination
operator|==
literal|null
operator|||
name|destination
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
return|return
literal|true
return|;
name|errorMessages
operator|.
name|add
argument_list|(
literal|"destination is a required field and must be set to the destination name."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isEmpty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|value
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ActiveMQActivationSpec{"
operator|+
literal|"acknowledgeMode='"
operator|+
name|acknowledgeMode
operator|+
literal|"'"
operator|+
literal|", destinationType='"
operator|+
name|destinationType
operator|+
literal|"'"
operator|+
literal|", messageSelector='"
operator|+
name|messageSelector
operator|+
literal|"'"
operator|+
literal|", destination='"
operator|+
name|destination
operator|+
literal|"'"
operator|+
literal|", clientId='"
operator|+
name|clientId
operator|+
literal|"'"
operator|+
literal|", subscriptionName='"
operator|+
name|subscriptionName
operator|+
literal|"'"
operator|+
literal|", subscriptionDurability='"
operator|+
name|subscriptionDurability
operator|+
literal|"'"
operator|+
literal|"}"
return|;
block|}
specifier|public
name|int
name|getAcknowledgeModeForSession
parameter_list|()
block|{
if|if
condition|(
name|AUTO_ACKNOWLEDGE_MODE
operator|.
name|equals
argument_list|(
name|acknowledgeMode
argument_list|)
condition|)
block|{
return|return
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
return|;
block|}
elseif|else
if|if
condition|(
name|DUPS_OK_ACKNOWLEDGE_MODE
operator|.
name|equals
argument_list|(
name|acknowledgeMode
argument_list|)
condition|)
block|{
return|return
name|Session
operator|.
name|DUPS_OK_ACKNOWLEDGE
return|;
block|}
else|else
block|{
return|return
name|INVALID_ACKNOWLEDGE_MODE
return|;
block|}
block|}
comment|/**      * A helper method mostly for use in Dependency Injection containers      * which allows you to customize the destination and destinationType properties      * from a single ActiveMQDestination POJO      */
specifier|public
name|void
name|setActiveMQDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|setDestination
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
name|setDestinationType
argument_list|(
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setDestinationType
argument_list|(
name|Topic
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ActiveMQDestination
name|createDestination
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|destinationType
argument_list|)
operator|||
name|isEmpty
argument_list|(
name|destination
argument_list|)
condition|)
return|return
literal|null
return|;
name|ActiveMQDestination
name|dest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|Queue
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|destinationType
argument_list|)
condition|)
block|{
name|dest
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Topic
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|destinationType
argument_list|)
condition|)
block|{
name|dest
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|false
operator|:
literal|"Execution should never reach here"
assert|;
block|}
return|return
name|dest
return|;
block|}
specifier|public
name|String
name|getMaxMessagesPerSessions
parameter_list|()
block|{
return|return
name|maxMessagesPerSessions
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMaxMessagesPerSessions
parameter_list|(
name|String
name|maxMessagesPerSessions
parameter_list|)
block|{
if|if
condition|(
name|maxMessagesPerSessions
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|maxMessagesPerSessions
operator|=
name|maxMessagesPerSessions
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getMaxSessions
parameter_list|()
block|{
return|return
name|maxSessions
return|;
block|}
specifier|public
name|void
name|setMaxSessions
parameter_list|(
name|String
name|maxSessions
parameter_list|)
block|{
if|if
condition|(
name|maxSessions
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|maxSessions
operator|=
name|maxSessions
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getUseRAManagedTransaction
parameter_list|()
block|{
return|return
name|useRAManagedTransaction
return|;
block|}
specifier|public
name|void
name|setUseRAManagedTransaction
parameter_list|(
name|String
name|useRAManagedTransaction
parameter_list|)
block|{
if|if
condition|(
name|useRAManagedTransaction
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|useRAManagedTransaction
operator|=
name|useRAManagedTransaction
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMaxMessagesPerSessionsIntValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxMessagesPerSessions
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMaxSessionsIntValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxSessions
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isUseRAManagedTransactionEnabled
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|useRAManagedTransaction
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getNoLocalBooleanValue
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|noLocal
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getEnableBatch
parameter_list|()
block|{
return|return
name|enableBatch
return|;
block|}
specifier|public
name|void
name|setEnableBatch
parameter_list|(
name|String
name|enableBatch
parameter_list|)
block|{
if|if
condition|(
name|enableBatch
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|enableBatch
operator|=
name|enableBatch
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|getEnableBatchBooleanValue
parameter_list|()
block|{
return|return
operator|new
name|Boolean
argument_list|(
name|enableBatch
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMaxMessagesPerBatchIntValue
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxMessagesPerBatch
argument_list|)
return|;
block|}
specifier|public
name|String
name|getMaxMessagesPerBatch
parameter_list|()
block|{
return|return
name|maxMessagesPerBatch
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMaxMessagesPerBatch
parameter_list|(
name|String
name|maxMessagesPerBatch
parameter_list|)
block|{
if|if
condition|(
name|maxMessagesPerBatch
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|maxMessagesPerBatch
operator|=
name|maxMessagesPerBatch
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getBackOffMultiplier
parameter_list|()
block|{
if|if
condition|(
name|redeliveryPolicy
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|redeliveryPolicy
operator|.
name|getBackOffMultiplier
argument_list|()
return|;
block|}
specifier|public
name|long
name|getInitialRedeliveryDelay
parameter_list|()
block|{
if|if
condition|(
name|redeliveryPolicy
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|redeliveryPolicy
operator|.
name|getInitialRedeliveryDelay
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMaximumRedeliveries
parameter_list|()
block|{
if|if
condition|(
name|redeliveryPolicy
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|redeliveryPolicy
operator|.
name|getMaximumRedeliveries
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isUseExponentialBackOff
parameter_list|()
block|{
if|if
condition|(
name|redeliveryPolicy
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|redeliveryPolicy
operator|.
name|isUseExponentialBackOff
argument_list|()
return|;
block|}
specifier|public
name|void
name|setBackOffMultiplier
parameter_list|(
name|short
name|backOffMultiplier
parameter_list|)
block|{
name|lazyCreateRedeliveryPolicy
argument_list|()
operator|.
name|setBackOffMultiplier
argument_list|(
name|backOffMultiplier
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setInitialRedeliveryDelay
parameter_list|(
name|long
name|initialRedeliveryDelay
parameter_list|)
block|{
name|lazyCreateRedeliveryPolicy
argument_list|()
operator|.
name|setInitialRedeliveryDelay
argument_list|(
name|initialRedeliveryDelay
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMaximumRedeliveries
parameter_list|(
name|int
name|maximumRedeliveries
parameter_list|)
block|{
name|lazyCreateRedeliveryPolicy
argument_list|()
operator|.
name|setMaximumRedeliveries
argument_list|(
name|maximumRedeliveries
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUseExponentialBackOff
parameter_list|(
name|boolean
name|useExponentialBackOff
parameter_list|)
block|{
name|lazyCreateRedeliveryPolicy
argument_list|()
operator|.
name|setUseExponentialBackOff
argument_list|(
name|useExponentialBackOff
argument_list|)
expr_stmt|;
block|}
comment|// don't use getter to avoid causing introspection errors in containers
specifier|public
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|()
block|{
return|return
name|redeliveryPolicy
return|;
block|}
specifier|protected
name|RedeliveryPolicy
name|lazyCreateRedeliveryPolicy
parameter_list|()
block|{
if|if
condition|(
name|redeliveryPolicy
operator|==
literal|null
condition|)
block|{
name|redeliveryPolicy
operator|=
operator|new
name|RedeliveryPolicy
argument_list|()
expr_stmt|;
block|}
return|return
name|redeliveryPolicy
return|;
block|}
block|}
end_class

end_unit

