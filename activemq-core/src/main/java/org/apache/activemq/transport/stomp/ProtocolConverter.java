begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContextAware
import|;
end_import

begin_comment
comment|/**  * @author<a href="http://hiramchirino.com">chirino</a>  */
end_comment

begin_class
specifier|public
class|class
name|ProtocolConverter
block|{
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|CONNECTION_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|CONNECTION_ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionId
name|sessionId
init|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
name|sessionId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|transactionIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|tempDestinationGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
name|resposeHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|StompSubscription
argument_list|>
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|StompSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ActiveMQDestination
argument_list|>
name|tempDestinations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tempDestinationAmqToStompMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalTransactionId
argument_list|>
name|transactions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|LocalTransactionId
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StompTransportFilter
name|transportFilter
decl_stmt|;
specifier|private
specifier|final
name|Object
name|commnadIdMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastCommandId
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|connected
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FrameTranslator
name|frameTranslator
decl_stmt|;
specifier|private
specifier|final
name|FactoryFinder
name|FRAME_TRANSLATOR_FINDER
init|=
operator|new
name|FactoryFinder
argument_list|(
literal|"META-INF/services/org/apache/activemq/transport/frametranslator/"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ApplicationContext
name|applicationContext
decl_stmt|;
specifier|public
name|ProtocolConverter
parameter_list|(
name|StompTransportFilter
name|stompTransportFilter
parameter_list|,
name|FrameTranslator
name|translator
parameter_list|,
name|ApplicationContext
name|applicationContext
parameter_list|)
block|{
name|this
operator|.
name|transportFilter
operator|=
name|stompTransportFilter
expr_stmt|;
name|this
operator|.
name|frameTranslator
operator|=
name|translator
expr_stmt|;
name|this
operator|.
name|applicationContext
operator|=
name|applicationContext
expr_stmt|;
block|}
specifier|protected
name|int
name|generateCommandId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commnadIdMutex
init|)
block|{
return|return
name|lastCommandId
operator|++
return|;
block|}
block|}
specifier|protected
name|ResponseHandler
name|createResponseHandler
parameter_list|(
specifier|final
name|StompFrame
name|command
parameter_list|)
block|{
specifier|final
name|String
name|receiptId
init|=
name|command
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
decl_stmt|;
if|if
condition|(
name|receiptId
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|ProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// Generally a command can fail.. but that does not invalidate the connection.
comment|// We report back the failure but we don't close the connection.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StompFrame
name|sc
init|=
operator|new
name|StompFrame
argument_list|()
decl_stmt|;
name|sc
operator|.
name|setAction
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|RECEIPT
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setHeaders
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sc
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|transportFilter
operator|.
name|sendToStomp
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|,
name|ResponseHandler
name|handler
parameter_list|)
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|generateCommandId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resposeHandlers
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|transportFilter
operator|.
name|sendToActiveMQ
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendToStomp
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|transportFilter
operator|.
name|sendToStomp
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|FrameTranslator
name|findTranslator
parameter_list|(
name|String
name|header
parameter_list|)
block|{
name|FrameTranslator
name|translator
init|=
name|frameTranslator
decl_stmt|;
try|try
block|{
if|if
condition|(
name|header
operator|!=
literal|null
condition|)
block|{
name|translator
operator|=
operator|(
name|FrameTranslator
operator|)
name|FRAME_TRANSLATOR_FINDER
operator|.
name|newInstance
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|translator
operator|instanceof
name|ApplicationContextAware
condition|)
block|{
operator|(
operator|(
name|ApplicationContextAware
operator|)
name|translator
operator|)
operator|.
name|setApplicationContext
argument_list|(
name|applicationContext
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// if anything goes wrong use the default translator
block|}
return|return
name|translator
return|;
block|}
comment|/** 	 * Convert a stomp command 	 *  	 * @param command 	 */
specifier|public
name|void
name|onStompCommad
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|==
name|StompFrameError
operator|.
name|class
condition|)
block|{
throw|throw
operator|(
operator|(
name|StompFrameError
operator|)
name|command
operator|)
operator|.
name|getException
argument_list|()
throw|;
block|}
name|String
name|action
init|=
name|command
operator|.
name|getAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|SEND
argument_list|)
condition|)
block|{
name|onStompSend
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|ACK
argument_list|)
condition|)
block|{
name|onStompAck
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|BEGIN
argument_list|)
condition|)
block|{
name|onStompBegin
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|COMMIT
argument_list|)
condition|)
block|{
name|onStompCommit
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|ABORT
argument_list|)
condition|)
block|{
name|onStompAbort
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|SUBSCRIBE
argument_list|)
condition|)
block|{
name|onStompSubscribe
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|UNSUBSCRIBE
argument_list|)
condition|)
block|{
name|onStompUnsubscribe
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|CONNECT
argument_list|)
condition|)
block|{
name|onStompConnect
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|DISCONNECT
argument_list|)
condition|)
block|{
name|onStompDisconnect
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Unknown STOMP action: "
operator|+
name|action
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|,
name|command
argument_list|)
expr_stmt|;
comment|// Some protocol errors can cause the connection to get closed.
if|if
condition|(
name|e
operator|.
name|isFatal
argument_list|()
condition|)
block|{
name|getTransportFilter
argument_list|()
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|,
name|StompFrame
name|command
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Let the stomp client know about any protocol errors.
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintWriter
name|stream
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Error
operator|.
name|MESSAGE
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|receiptId
init|=
name|command
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
decl_stmt|;
if|if
condition|(
name|receiptId
operator|!=
literal|null
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
block|}
block|}
name|StompFrame
name|errorMessage
init|=
operator|new
name|StompFrame
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|ERROR
argument_list|,
name|headers
argument_list|,
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|sendToStomp
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStompSend
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|stompTx
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSACTION
argument_list|)
decl_stmt|;
name|ActiveMQMessage
name|message
init|=
name|convertMessage
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|message
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
name|MessageId
name|id
init|=
operator|new
name|MessageId
argument_list|(
name|producerId
argument_list|,
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stompTx
operator|!=
literal|null
condition|)
block|{
name|TransactionId
name|activemqTx
init|=
name|transactions
operator|.
name|get
argument_list|(
name|stompTx
argument_list|)
decl_stmt|;
if|if
condition|(
name|activemqTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Invalid transaction id: "
operator|+
name|stompTx
argument_list|)
throw|;
block|}
name|message
operator|.
name|setTransactionId
argument_list|(
name|activemqTx
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|message
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStompAck
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
comment|// TODO: acking with just a message id is very bogus
comment|// since the same message id could have been sent to 2 different
comment|// subscriptions
comment|// on the same stomp connection. For example, when 2 subs are created on
comment|// the same topic.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|messageId
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Ack
operator|.
name|MESSAGE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"ACK received without a message-id to acknowledge!"
argument_list|)
throw|;
block|}
name|TransactionId
name|activemqTx
init|=
literal|null
decl_stmt|;
name|String
name|stompTx
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|stompTx
operator|!=
literal|null
condition|)
block|{
name|activemqTx
operator|=
name|transactions
operator|.
name|get
argument_list|(
name|stompTx
argument_list|)
expr_stmt|;
if|if
condition|(
name|activemqTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Invalid transaction id: "
operator|+
name|stompTx
argument_list|)
throw|;
block|}
block|}
name|boolean
name|acked
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StompSubscription
argument_list|>
name|iter
init|=
name|subscriptionsByConsumerId
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StompSubscription
name|sub
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|MessageAck
name|ack
init|=
name|sub
operator|.
name|onStompMessageAck
argument_list|(
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
name|ack
operator|.
name|setTransactionId
argument_list|(
name|activemqTx
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|acked
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|acked
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Unexpected ACK received for message-id ["
operator|+
name|messageId
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|onStompBegin
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|stompTx
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSACTION
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|headers
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSACTION
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Must specify the transaction you are beginning"
argument_list|)
throw|;
block|}
if|if
condition|(
name|transactions
operator|.
name|get
argument_list|(
name|stompTx
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"The transaction was allready started: "
operator|+
name|stompTx
argument_list|)
throw|;
block|}
name|LocalTransactionId
name|activemqTx
init|=
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|transactionIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|transactions
operator|.
name|put
argument_list|(
name|stompTx
argument_list|,
name|activemqTx
argument_list|)
expr_stmt|;
name|TransactionInfo
name|tx
init|=
operator|new
name|TransactionInfo
argument_list|()
decl_stmt|;
name|tx
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|tx
operator|.
name|setTransactionId
argument_list|(
name|activemqTx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|setType
argument_list|(
name|TransactionInfo
operator|.
name|BEGIN
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|tx
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStompCommit
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|stompTx
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|stompTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Must specify the transaction you are committing"
argument_list|)
throw|;
block|}
name|TransactionId
name|activemqTx
init|=
name|transactions
operator|.
name|remove
argument_list|(
name|stompTx
argument_list|)
decl_stmt|;
if|if
condition|(
name|activemqTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Invalid transaction id: "
operator|+
name|stompTx
argument_list|)
throw|;
block|}
name|TransactionInfo
name|tx
init|=
operator|new
name|TransactionInfo
argument_list|()
decl_stmt|;
name|tx
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|tx
operator|.
name|setTransactionId
argument_list|(
name|activemqTx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|setType
argument_list|(
name|TransactionInfo
operator|.
name|COMMIT_ONE_PHASE
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|tx
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStompAbort
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|stompTx
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSACTION
argument_list|)
decl_stmt|;
if|if
condition|(
name|stompTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Must specify the transaction you are committing"
argument_list|)
throw|;
block|}
name|TransactionId
name|activemqTx
init|=
name|transactions
operator|.
name|remove
argument_list|(
name|stompTx
argument_list|)
decl_stmt|;
if|if
condition|(
name|activemqTx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Invalid transaction id: "
operator|+
name|stompTx
argument_list|)
throw|;
block|}
name|TransactionInfo
name|tx
init|=
operator|new
name|TransactionInfo
argument_list|()
decl_stmt|;
name|tx
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|tx
operator|.
name|setTransactionId
argument_list|(
name|activemqTx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|setType
argument_list|(
name|TransactionInfo
operator|.
name|ROLLBACK
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|tx
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStompSubscribe
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|FrameTranslator
name|translator
init|=
name|findTranslator
argument_list|(
name|command
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|subscriptionId
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|ID
argument_list|)
decl_stmt|;
name|String
name|destination
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|DESTINATION
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|actualDest
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|ConsumerId
name|id
init|=
operator|new
name|ConsumerId
argument_list|(
name|sessionId
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
operator|new
name|ConsumerInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setDispatchAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|selector
init|=
name|headers
operator|.
name|remove
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|SELECTOR
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|consumerInfo
argument_list|,
name|headers
argument_list|,
literal|"activemq."
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setDestination
argument_list|(
name|translator
operator|.
name|convertDestination
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|StompSubscription
name|stompSubscription
init|=
operator|new
name|StompSubscription
argument_list|(
name|this
argument_list|,
name|subscriptionId
argument_list|,
name|consumerInfo
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION
argument_list|)
argument_list|)
decl_stmt|;
name|stompSubscription
operator|.
name|setDestination
argument_list|(
name|actualDest
argument_list|)
expr_stmt|;
name|String
name|ackMode
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|ACK_MODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|CLIENT
operator|.
name|equals
argument_list|(
name|ackMode
argument_list|)
condition|)
block|{
name|stompSubscription
operator|.
name|setAckMode
argument_list|(
name|StompSubscription
operator|.
name|CLIENT_ACK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stompSubscription
operator|.
name|setAckMode
argument_list|(
name|StompSubscription
operator|.
name|AUTO_ACK
argument_list|)
expr_stmt|;
block|}
name|subscriptionsByConsumerId
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|stompSubscription
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|consumerInfo
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStompUnsubscribe
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
literal|null
decl_stmt|;
name|Object
name|o
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Unsubscribe
operator|.
name|DESTINATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|destination
operator|=
name|findTranslator
argument_list|(
name|command
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION
argument_list|)
argument_list|)
operator|.
name|convertDestination
argument_list|(
name|this
argument_list|,
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
name|String
name|subscriptionId
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Unsubscribe
operator|.
name|ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|subscriptionId
operator|==
literal|null
operator|&&
name|destination
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Must specify the subscriptionId or the destination you are unsubscribing from"
argument_list|)
throw|;
block|}
comment|// check if it is a durable subscription
name|String
name|durable
init|=
name|command
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"activemq.subscriptionName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|durable
operator|!=
literal|null
condition|)
block|{
name|RemoveSubscriptionInfo
name|info
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|durable
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSubscriptionName
argument_list|(
name|durable
argument_list|)
expr_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|info
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// TODO: Unsubscribing using a destination is a bit wierd if multiple
comment|// subscriptions
comment|// are created with the same destination. Perhaps this should be
comment|// removed.
comment|//
for|for
control|(
name|Iterator
argument_list|<
name|StompSubscription
argument_list|>
name|iter
init|=
name|subscriptionsByConsumerId
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StompSubscription
name|sub
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|subscriptionId
operator|!=
literal|null
operator|&&
name|subscriptionId
operator|.
name|equals
argument_list|(
name|sub
operator|.
name|getSubscriptionId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|destination
operator|!=
literal|null
operator|&&
name|destination
operator|.
name|equals
argument_list|(
name|sub
operator|.
name|getDestination
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|sendToActiveMQ
argument_list|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|createRemoveCommand
argument_list|()
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"No subscription matched."
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|onStompConnect
parameter_list|(
specifier|final
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
if|if
condition|(
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Allready connected."
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
comment|// allow anyone to login for now
name|String
name|login
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connect
operator|.
name|LOGIN
argument_list|)
decl_stmt|;
name|String
name|passcode
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connect
operator|.
name|PASSCODE
argument_list|)
decl_stmt|;
name|String
name|clientId
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connect
operator|.
name|CLIENT_ID
argument_list|)
decl_stmt|;
specifier|final
name|ConnectionInfo
name|connectionInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|connectionInfo
argument_list|,
name|headers
argument_list|,
literal|"activemq."
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|""
operator|+
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connectionInfo
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|login
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setPassword
argument_list|(
name|passcode
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|connectionInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|ProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// If the connection attempt fails we close the socket.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|getTransportFilter
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SessionInfo
name|sessionInfo
init|=
operator|new
name|SessionInfo
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|sessionInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|ProducerInfo
name|producerInfo
init|=
operator|new
name|ProducerInfo
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|producerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|ProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// If the connection attempt fails we close the socket.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|getTransportFilter
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connected
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|responseHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|responseHeaders
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connected
operator|.
name|SESSION
argument_list|,
name|connectionInfo
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|requestId
init|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connect
operator|.
name|REQUEST_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestId
operator|==
literal|null
condition|)
block|{
comment|// TODO legacy
name|requestId
operator|=
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requestId
operator|!=
literal|null
condition|)
block|{
comment|// TODO legacy
name|responseHeaders
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connected
operator|.
name|RESPONSE_ID
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|responseHeaders
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
block|}
name|StompFrame
name|sc
init|=
operator|new
name|StompFrame
argument_list|()
decl_stmt|;
name|sc
operator|.
name|setAction
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|CONNECTED
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setHeaders
argument_list|(
name|responseHeaders
argument_list|)
expr_stmt|;
name|sendToStomp
argument_list|(
name|sc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStompDisconnect
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|ProtocolException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|,
name|createResponseHandler
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|connected
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkConnected
parameter_list|()
throws|throws
name|ProtocolException
block|{
if|if
condition|(
operator|!
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Not connected."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Dispatch a ActiveMQ command      *       * @param command      * @throws IOException      */
specifier|public
name|void
name|onActiveMQCommad
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|ResponseHandler
name|rh
init|=
name|resposeHandlers
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rh
operator|!=
literal|null
condition|)
block|{
name|rh
operator|.
name|onResponse
argument_list|(
name|this
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pass down any unexpected errors. Should this close the connection?
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|StompSubscription
name|sub
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|onMessageDispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ConnectionError
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
comment|// Pass down any unexpected async errors. Should this close the connection?
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ConnectionError
operator|)
name|command
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ActiveMQMessage
name|convertMessage
parameter_list|(
name|StompFrame
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|ActiveMQMessage
name|msg
init|=
name|findTranslator
argument_list|(
name|command
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION
argument_list|)
argument_list|)
operator|.
name|convertFrame
argument_list|(
name|this
argument_list|,
name|command
argument_list|)
decl_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
name|StompFrame
name|convertMessage
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|,
name|boolean
name|ignoreTransformation
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
if|if
condition|(
name|ignoreTransformation
operator|==
literal|true
condition|)
block|{
return|return
name|frameTranslator
operator|.
name|convertMessage
argument_list|(
name|this
argument_list|,
name|message
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|findTranslator
argument_list|(
name|message
operator|.
name|getStringProperty
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION
argument_list|)
argument_list|)
operator|.
name|convertMessage
argument_list|(
name|this
argument_list|,
name|message
argument_list|)
return|;
block|}
block|}
specifier|public
name|StompTransportFilter
name|getTransportFilter
parameter_list|()
block|{
return|return
name|transportFilter
return|;
block|}
specifier|public
name|ActiveMQDestination
name|createTempQueue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ActiveMQDestination
name|rc
init|=
name|tempDestinations
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionId
argument_list|,
name|tempDestinationGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|DestinationInfo
argument_list|(
name|connectionId
argument_list|,
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|,
name|rc
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tempDestinations
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|ActiveMQDestination
name|createTempTopic
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ActiveMQDestination
name|rc
init|=
name|tempDestinations
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
operator|new
name|ActiveMQTempTopic
argument_list|(
name|connectionId
argument_list|,
name|tempDestinationGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|DestinationInfo
argument_list|(
name|connectionId
argument_list|,
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|,
name|rc
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tempDestinations
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|tempDestinationAmqToStompMap
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|String
name|getCreatedTempDestinationName
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
name|tempDestinationAmqToStompMap
operator|.
name|get
argument_list|(
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

