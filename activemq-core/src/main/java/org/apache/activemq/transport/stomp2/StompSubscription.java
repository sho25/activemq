begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_comment
comment|/**  * Keeps track of the STOMP susbscription so that acking is correctly done.  *    * @author<a href="http://hiramchirino.com">chirino</a>   */
end_comment

begin_class
specifier|public
class|class
name|StompSubscription
block|{
specifier|public
specifier|static
specifier|final
name|String
name|AUTO_ACK
init|=
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CLIENT_ACK
init|=
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|CLIENT
decl_stmt|;
specifier|private
specifier|final
name|ProtocolConverter
name|protocolConverter
decl_stmt|;
specifier|private
specifier|final
name|String
name|subscriptionId
decl_stmt|;
specifier|private
specifier|final
name|ConsumerInfo
name|consumerInfo
decl_stmt|;
specifier|private
specifier|final
name|LinkedHashMap
name|dispatchedMessage
init|=
operator|new
name|LinkedHashMap
argument_list|()
decl_stmt|;
specifier|private
name|String
name|ackMode
init|=
name|AUTO_ACK
decl_stmt|;
specifier|private
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|StompSubscription
parameter_list|(
name|ProtocolConverter
name|stompTransport
parameter_list|,
name|String
name|subscriptionId
parameter_list|,
name|ConsumerInfo
name|consumerInfo
parameter_list|)
block|{
name|this
operator|.
name|protocolConverter
operator|=
name|stompTransport
expr_stmt|;
name|this
operator|.
name|subscriptionId
operator|=
name|subscriptionId
expr_stmt|;
name|this
operator|.
name|consumerInfo
operator|=
name|consumerInfo
expr_stmt|;
block|}
name|void
name|onMessageDispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|ackMode
operator|==
name|CLIENT_ACK
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|dispatchedMessage
operator|.
name|put
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ackMode
operator|==
name|AUTO_ACK
condition|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|protocolConverter
operator|.
name|getTransportFilter
argument_list|()
operator|.
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|StompFrame
name|command
init|=
name|protocolConverter
operator|.
name|convertMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|command
operator|.
name|setAction
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|subscriptionId
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|getHeaders
argument_list|()
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|,
name|subscriptionId
argument_list|)
expr_stmt|;
block|}
name|protocolConverter
operator|.
name|getTransportFilter
argument_list|()
operator|.
name|sendToStomp
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|MessageAck
name|onStompMessageAck
parameter_list|(
name|String
name|messageId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dispatchedMessage
operator|.
name|containsKey
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setDestination
argument_list|(
name|consumerInfo
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setConsumerId
argument_list|(
name|consumerInfo
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|dispatchedMessage
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|id
init|=
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|==
literal|null
condition|)
name|ack
operator|.
name|setFirstMessageId
argument_list|(
operator|(
name|MessageId
operator|)
name|dispatchedMessage
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
name|ack
operator|.
name|setLastMessageId
argument_list|(
operator|(
name|MessageId
operator|)
name|dispatchedMessage
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|ack
operator|.
name|setMessageCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
return|return
name|ack
return|;
block|}
specifier|public
name|String
name|getAckMode
parameter_list|()
block|{
return|return
name|ackMode
return|;
block|}
specifier|public
name|void
name|setAckMode
parameter_list|(
name|String
name|ackMode
parameter_list|)
block|{
name|this
operator|.
name|ackMode
operator|=
name|ackMode
expr_stmt|;
block|}
specifier|public
name|String
name|getSubscriptionId
parameter_list|()
block|{
return|return
name|subscriptionId
return|;
block|}
specifier|public
name|void
name|setDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
specifier|public
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|ConsumerInfo
name|getConsumerInfo
parameter_list|()
block|{
return|return
name|consumerInfo
return|;
block|}
block|}
end_class

end_unit

