begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_comment
comment|/**  * This JDBCAdapter inserts and extracts BLOB data using the getBlob()/setBlob()  * operations. This is a little more involved since to insert a blob you have  * to:  *   * 1: insert empty blob. 2: select the blob 3: finally update the blob with data  * value.  *   * The databases/JDBC drivers that use this adapter are:  *<ul>  *<li></li>  *</ul>  *   * @org.apache.xbean.XBean element="blobJDBCAdapter"  *   *   */
end_comment

begin_class
specifier|public
class|class
name|BlobJDBCAdapter
extends|extends
name|DefaultJDBCAdapter
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAddMessage
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|long
name|sequence
parameter_list|,
name|MessageId
name|messageID
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|long
name|expiration
parameter_list|,
name|byte
name|priority
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|cleanupExclusiveLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Add the Blob record.
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getAddMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|messageID
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|3
argument_list|,
name|messageID
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|4
argument_list|,
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|5
argument_list|,
name|expiration
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|6
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|7
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|executeUpdate
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to add broker message: "
operator|+
name|messageID
operator|+
literal|" in container."
argument_list|)
throw|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Select the blob record so that we can update it.
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindMessageByIdStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|1
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed select blob for message: "
operator|+
name|messageID
operator|+
literal|" in container."
argument_list|)
throw|;
block|}
comment|// Update the blob
name|Blob
name|blob
init|=
name|rs
operator|.
name|getBlob
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|OutputStream
name|stream
init|=
name|blob
operator|.
name|setBinaryStream
argument_list|(
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Update the row with the updated blob
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getUpdateMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setBlob
argument_list|(
literal|1
argument_list|,
name|blob
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupExclusiveLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|doGetMessage
parameter_list|(
name|TransactionContext
name|c
parameter_list|,
name|MessageId
name|id
parameter_list|)
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|PreparedStatement
name|s
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
name|cleanupExclusiveLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|s
operator|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|prepareStatement
argument_list|(
name|statements
operator|.
name|getFindMessageStatement
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLong
argument_list|(
literal|2
argument_list|,
name|id
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|rs
operator|=
name|s
operator|.
name|executeQuery
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Blob
name|blob
init|=
name|rs
operator|.
name|getBlob
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|blob
operator|.
name|getBinaryStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
operator|(
name|int
operator|)
name|blob
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ch
decl_stmt|;
while|while
condition|(
operator|(
name|ch
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|cleanupExclusiveLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|close
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

