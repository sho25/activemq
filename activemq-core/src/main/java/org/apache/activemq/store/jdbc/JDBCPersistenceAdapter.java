begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
operator|.
name|DefaultJDBCAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryTransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A {@link PersistenceAdapter} implementation using JDBC for persistence  * storage.  *   * This persistence adapter will correctly remember prepared XA transactions,  * but it will not keep track of local transaction commits so that operations  * performed against the Message store are done as a single uow.  *   * @org.apache.xbean.XBean element="jdbcPersistenceAdapter"  *   * @version $Revision: 1.9 $  */
end_comment

begin_class
specifier|public
class|class
name|JDBCPersistenceAdapter
implements|implements
name|PersistenceAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JDBCPersistenceAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|FactoryFinder
name|factoryFinder
init|=
operator|new
name|FactoryFinder
argument_list|(
literal|"META-INF/services/org/apache/activemq/store/jdbc/"
argument_list|)
decl_stmt|;
specifier|private
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|DataSource
name|dataSource
decl_stmt|;
specifier|private
name|JDBCAdapter
name|adapter
decl_stmt|;
specifier|private
name|String
name|adapterClass
decl_stmt|;
specifier|private
name|MemoryTransactionStore
name|transactionStore
decl_stmt|;
specifier|private
name|ScheduledThreadPoolExecutor
name|clockDaemon
decl_stmt|;
specifier|private
name|ScheduledFuture
name|clockTicket
decl_stmt|;
name|int
name|cleanupPeriod
init|=
literal|1000
operator|*
literal|60
operator|*
literal|5
decl_stmt|;
specifier|private
name|boolean
name|useExternalMessageReferences
decl_stmt|;
specifier|public
name|JDBCPersistenceAdapter
parameter_list|()
block|{     }
specifier|public
name|JDBCPersistenceAdapter
parameter_list|(
name|DataSource
name|ds
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|ds
expr_stmt|;
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|Set
name|getDestinations
parameter_list|()
block|{
comment|// Get a connection and insert the message into the DB.
name|TransactionContext
name|c
init|=
name|getTransactionContext
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|getAdapter
argument_list|()
operator|.
name|doGetDestinations
argument_list|(
name|c
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_SET
return|;
block|}
finally|finally
block|{
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageStore
name|rc
init|=
operator|new
name|JDBCMessageStore
argument_list|(
name|this
argument_list|,
name|getAdapter
argument_list|()
argument_list|,
name|wireFormat
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionStore
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|transactionStore
operator|.
name|proxy
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|TopicMessageStore
name|rc
init|=
operator|new
name|JDBCTopicMessageStore
argument_list|(
name|this
argument_list|,
name|getAdapter
argument_list|()
argument_list|,
name|wireFormat
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionStore
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|transactionStore
operator|.
name|proxy
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|TransactionStore
name|createTransactionStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|transactionStore
operator|==
literal|null
condition|)
block|{
name|transactionStore
operator|=
operator|new
name|MemoryTransactionStore
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|transactionStore
return|;
block|}
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Get a connection and insert the message into the DB.
name|TransactionContext
name|c
init|=
name|getTransactionContext
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|getAdapter
argument_list|()
operator|.
name|doGetLastMessageBrokerSequenceId
argument_list|(
name|c
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Failed to get last broker message id: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|getAdapter
argument_list|()
operator|.
name|setUseExternalMessageReferences
argument_list|(
name|isUseExternalMessageReferences
argument_list|()
argument_list|)
expr_stmt|;
name|TransactionContext
name|transactionContext
init|=
name|getTransactionContext
argument_list|()
decl_stmt|;
name|transactionContext
operator|.
name|begin
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|getAdapter
argument_list|()
operator|.
name|doCreateTables
argument_list|(
name|transactionContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot create tables due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|transactionContext
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|cleanup
argument_list|()
expr_stmt|;
comment|// Cleanup the db periodically.
if|if
condition|(
name|cleanupPeriod
operator|>
literal|0
condition|)
block|{
name|clockTicket
operator|=
name|getScheduledThreadPoolExecutor
argument_list|()
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|cleanupPeriod
argument_list|,
name|cleanupPeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|clockTicket
operator|!=
literal|null
condition|)
block|{
name|clockTicket
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clockTicket
operator|=
literal|null
expr_stmt|;
name|clockDaemon
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
name|TransactionContext
name|c
init|=
name|getTransactionContext
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Cleaning up old messages."
argument_list|)
expr_stmt|;
name|c
operator|=
name|getTransactionContext
argument_list|()
expr_stmt|;
name|getAdapter
argument_list|()
operator|.
name|doDeleteOldMessages
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Old message cleanup failed due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Old message cleanup failed due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
name|log
operator|.
name|debug
argument_list|(
literal|"Cleanup done."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setScheduledThreadPoolExecutor
parameter_list|(
name|ScheduledThreadPoolExecutor
name|clockDaemon
parameter_list|)
block|{
name|this
operator|.
name|clockDaemon
operator|=
name|clockDaemon
expr_stmt|;
block|}
specifier|public
name|ScheduledThreadPoolExecutor
name|getScheduledThreadPoolExecutor
parameter_list|()
block|{
if|if
condition|(
name|clockDaemon
operator|==
literal|null
condition|)
block|{
name|clockDaemon
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|5
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"Cleanup Timmer"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|clockDaemon
return|;
block|}
specifier|public
name|JDBCAdapter
name|getAdapter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|adapter
operator|=
name|createAdapter
argument_list|()
expr_stmt|;
block|}
return|return
name|adapter
return|;
block|}
comment|/**      * @throws IOException      */
specifier|protected
name|JDBCAdapter
name|createAdapter
parameter_list|()
throws|throws
name|IOException
block|{
name|JDBCAdapter
name|adapter
init|=
literal|null
decl_stmt|;
name|TransactionContext
name|c
init|=
name|getTransactionContext
argument_list|()
decl_stmt|;
try|try
block|{
comment|// If the adapter class is not specified.. try to detect the right
comment|// type by getting info from the database.
if|if
condition|(
name|adapterClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// Make the filename file system safe.
name|String
name|dirverName
init|=
name|c
operator|.
name|getConnection
argument_list|()
operator|.
name|getMetaData
argument_list|()
operator|.
name|getDriverName
argument_list|()
decl_stmt|;
name|dirverName
operator|=
name|dirverName
operator|.
name|replaceAll
argument_list|(
literal|"[^a-zA-Z0-9\\-]"
argument_list|,
literal|"_"
argument_list|)
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
try|try
block|{
name|adapter
operator|=
operator|(
name|DefaultJDBCAdapter
operator|)
name|factoryFinder
operator|.
name|newInstance
argument_list|(
name|dirverName
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Database driver recognized: ["
operator|+
name|dirverName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Database driver NOT recognized: ["
operator|+
name|dirverName
operator|+
literal|"].  Will use default JDBC implementation."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"JDBC error occured while trying to detect database type.  Will use default JDBC implementation: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|JDBCPersistenceAdapter
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|adapterClass
argument_list|)
decl_stmt|;
name|adapter
operator|=
operator|(
name|DefaultJDBCAdapter
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid JDBC adapter class class ("
operator|+
name|adapterClass
operator|+
literal|").  Will use default JDBC implementation."
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Use the default JDBC adapter if the
comment|// Database type is not recognized.
if|if
condition|(
name|adapter
operator|==
literal|null
condition|)
block|{
name|adapter
operator|=
operator|new
name|DefaultJDBCAdapter
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|adapter
return|;
block|}
specifier|public
name|void
name|setAdapter
parameter_list|(
name|JDBCAdapter
name|adapter
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
block|}
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
return|return
name|dataSource
return|;
block|}
specifier|public
name|void
name|setDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
block|}
specifier|public
name|WireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|wireFormat
return|;
block|}
specifier|public
name|void
name|setWireFormat
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|TransactionContext
name|getTransactionContext
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
return|return
name|getTransactionContext
argument_list|()
return|;
block|}
else|else
block|{
name|TransactionContext
name|answer
init|=
operator|(
name|TransactionContext
operator|)
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
operator|new
name|TransactionContext
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|context
operator|.
name|setLongTermStoreContext
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
block|}
specifier|public
name|TransactionContext
name|getTransactionContext
parameter_list|()
block|{
return|return
operator|new
name|TransactionContext
argument_list|(
name|dataSource
argument_list|)
return|;
block|}
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionContext
name|transactionContext
init|=
name|getTransactionContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|transactionContext
operator|.
name|begin
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionContext
name|transactionContext
init|=
name|getTransactionContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|transactionContext
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionContext
name|transactionContext
init|=
name|getTransactionContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|transactionContext
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the adapterClass.      */
specifier|public
name|String
name|getAdapterClass
parameter_list|()
block|{
return|return
name|adapterClass
return|;
block|}
comment|/**      * @param adapterClass      *            The adapterClass to set.      */
specifier|public
name|void
name|setAdapterClass
parameter_list|(
name|String
name|adapterClass
parameter_list|)
block|{
name|this
operator|.
name|adapterClass
operator|=
name|adapterClass
expr_stmt|;
block|}
specifier|public
name|int
name|getCleanupPeriod
parameter_list|()
block|{
return|return
name|cleanupPeriod
return|;
block|}
specifier|public
name|void
name|setCleanupPeriod
parameter_list|(
name|int
name|cleanupPeriod
parameter_list|)
block|{
name|this
operator|.
name|cleanupPeriod
operator|=
name|cleanupPeriod
expr_stmt|;
block|}
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|TransactionContext
name|c
init|=
name|getTransactionContext
argument_list|()
decl_stmt|;
try|try
block|{
name|getAdapter
argument_list|()
operator|.
name|doDropTables
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|getAdapter
argument_list|()
operator|.
name|setUseExternalMessageReferences
argument_list|(
name|isUseExternalMessageReferences
argument_list|()
argument_list|)
expr_stmt|;
name|getAdapter
argument_list|()
operator|.
name|doCreateTables
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isUseExternalMessageReferences
parameter_list|()
block|{
return|return
name|useExternalMessageReferences
return|;
block|}
specifier|public
name|void
name|setUseExternalMessageReferences
parameter_list|(
name|boolean
name|useExternalMessageReferences
parameter_list|)
block|{
name|this
operator|.
name|useExternalMessageReferences
operator|=
name|useExternalMessageReferences
expr_stmt|;
block|}
block|}
end_class

end_unit

