begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryTopic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|MessageAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|JMSMappingInboundTransformerTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testTransformMessageWithAmqpValueStringCreatesTextMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|TextMessage
name|mockTextMessage
init|=
name|createMockTextMessage
argument_list|()
decl_stmt|;
name|JMSVendor
name|mockVendor
init|=
name|createMockVendor
argument_list|(
name|mockTextMessage
argument_list|)
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|mockVendor
argument_list|)
decl_stmt|;
name|String
name|contentString
init|=
literal|"myTextMessageContent"
decl_stmt|;
name|Message
name|amqp
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|amqp
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|contentString
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|amqp
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected TextMessage"
argument_list|,
name|jmsMessage
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|mockTextMessage
argument_list|)
operator|.
name|setText
argument_list|(
name|contentString
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Expected provided mock message, got a different one"
argument_list|,
name|mockTextMessage
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
block|}
comment|// ======= JMSDestination Handling =========
comment|// --- String type annotation ---
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithNoToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|null
argument_list|,
name|Destination
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithQueueStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue"
argument_list|,
name|Queue
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryQueueStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue,temporary"
argument_list|,
name|TemporaryQueue
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTopicStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic"
argument_list|,
name|Topic
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryTopicStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic,temporary"
argument_list|,
name|TemporaryTopic
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// --- byte type annotation ---
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithNoToTypeDestinationTypeAnnotationUsingByteAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|null
argument_list|,
name|Queue
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithQueueByteToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|QUEUE_TYPE
argument_list|,
name|Queue
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryQueueByteToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|TEMP_QUEUE_TYPE
argument_list|,
name|TemporaryQueue
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTopicByteToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|TOPIC_TYPE
argument_list|,
name|Topic
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryTopicByteToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|TEMP_TOPIC_TYPE
argument_list|,
name|TemporaryTopic
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
parameter_list|(
name|Object
name|toTypeAnnotationValue
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|expectedClass
parameter_list|,
name|boolean
name|byteType
parameter_list|)
throws|throws
name|Exception
block|{
name|TextMessage
name|mockTextMessage
init|=
name|createMockTextMessage
argument_list|()
decl_stmt|;
name|JMSVendor
name|mockVendor
init|=
name|createMockVendor
argument_list|(
name|mockTextMessage
argument_list|)
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|mockVendor
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteType
condition|)
block|{
name|transformer
operator|.
name|setUseByteDestinationTypeAnnotations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|toAddress
init|=
literal|"toAddress"
decl_stmt|;
name|Message
name|amqp
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|amqp
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
literal|"myTextMessageContent"
argument_list|)
argument_list|)
expr_stmt|;
name|amqp
operator|.
name|setAddress
argument_list|(
name|toAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTypeAnnotationValue
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-to-type"
argument_list|)
argument_list|,
name|toTypeAnnotationValue
argument_list|)
expr_stmt|;
name|MessageAnnotations
name|ma
init|=
operator|new
name|MessageAnnotations
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|amqp
operator|.
name|setMessageAnnotations
argument_list|(
name|ma
argument_list|)
expr_stmt|;
block|}
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|amqp
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected TextMessage"
argument_list|,
name|jmsMessage
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
comment|// Verify that createDestination was called with the provided 'to'
comment|// address and 'Destination' class
name|Mockito
operator|.
name|verify
argument_list|(
name|mockVendor
argument_list|)
operator|.
name|createDestination
argument_list|(
name|toAddress
argument_list|,
name|expectedClass
argument_list|)
expr_stmt|;
block|}
comment|// ======= JMSReplyTo Handling =========
comment|// --- String type annotation ---
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithNoReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|null
argument_list|,
name|Destination
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithQueueStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue"
argument_list|,
name|Queue
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryQueueStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue,temporary"
argument_list|,
name|TemporaryQueue
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTopicStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic"
argument_list|,
name|Topic
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryTopicStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic,temporary"
argument_list|,
name|TemporaryTopic
operator|.
name|class
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// --- byte type annotation ---
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithNoReplyToTypeDestinationTypeAnnotationUsingByteAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|null
argument_list|,
name|Queue
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithQueueByteReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|QUEUE_TYPE
argument_list|,
name|Queue
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryQueueByteReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|TEMP_QUEUE_TYPE
argument_list|,
name|TemporaryQueue
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTopicByteReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|TOPIC_TYPE
argument_list|,
name|Topic
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryTopicByteReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
name|JMSVendor
operator|.
name|TEMP_TOPIC_TYPE
argument_list|,
name|TemporaryTopic
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
parameter_list|(
name|Object
name|replyToTypeAnnotationValue
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|expectedClass
parameter_list|,
name|boolean
name|byteType
parameter_list|)
throws|throws
name|Exception
block|{
name|TextMessage
name|mockTextMessage
init|=
name|createMockTextMessage
argument_list|()
decl_stmt|;
name|JMSVendor
name|mockVendor
init|=
name|createMockVendor
argument_list|(
name|mockTextMessage
argument_list|)
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|mockVendor
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteType
condition|)
block|{
name|transformer
operator|.
name|setUseByteDestinationTypeAnnotations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
name|replyToAddress
init|=
literal|"replyToAddress"
decl_stmt|;
name|Message
name|amqp
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|amqp
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
literal|"myTextMessageContent"
argument_list|)
argument_list|)
expr_stmt|;
name|amqp
operator|.
name|setReplyTo
argument_list|(
name|replyToAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|replyToTypeAnnotationValue
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-reply-type"
argument_list|)
argument_list|,
name|replyToTypeAnnotationValue
argument_list|)
expr_stmt|;
name|MessageAnnotations
name|ma
init|=
operator|new
name|MessageAnnotations
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|amqp
operator|.
name|setMessageAnnotations
argument_list|(
name|ma
argument_list|)
expr_stmt|;
block|}
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|amqp
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected TextMessage"
argument_list|,
name|jmsMessage
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
comment|// Verify that createDestination was called with the provided 'replyTo'
comment|// address and 'Destination' class
name|Mockito
operator|.
name|verify
argument_list|(
name|mockVendor
argument_list|)
operator|.
name|createDestination
argument_list|(
name|replyToAddress
argument_list|,
name|expectedClass
argument_list|)
expr_stmt|;
block|}
comment|// ======= Utility Methods =========
specifier|private
name|TextMessage
name|createMockTextMessage
parameter_list|()
block|{
name|TextMessage
name|mockTextMessage
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TextMessage
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|mockTextMessage
return|;
block|}
specifier|private
name|JMSVendor
name|createMockVendor
parameter_list|(
name|TextMessage
name|mockTextMessage
parameter_list|)
block|{
name|JMSVendor
name|mockVendor
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|JMSVendor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockVendor
operator|.
name|createTextMessage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTextMessage
argument_list|)
expr_stmt|;
return|return
name|mockVendor
return|;
block|}
specifier|private
name|EncodedMessage
name|encodeMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|byte
index|[]
name|encodeBuffer
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|8
index|]
decl_stmt|;
name|int
name|encodedSize
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|encodedSize
operator|=
name|message
operator|.
name|encode
argument_list|(
name|encodeBuffer
argument_list|,
literal|0
argument_list|,
name|encodeBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
name|e
parameter_list|)
block|{
name|encodeBuffer
operator|=
operator|new
name|byte
index|[
name|encodeBuffer
operator|.
name|length
operator|*
literal|2
index|]
expr_stmt|;
block|}
block|}
name|long
name|messageFormat
init|=
literal|0
decl_stmt|;
return|return
operator|new
name|EncodedMessage
argument_list|(
name|messageFormat
argument_list|,
name|encodeBuffer
argument_list|,
literal|0
argument_list|,
name|encodedSize
argument_list|)
return|;
block|}
block|}
end_class

end_unit

