begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|protocol
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test that the Broker handles connections from older clients or  * non-AMQP client correctly by returning an AMQP header prior to  * closing the socket.  */
end_comment

begin_class
specifier|public
class|class
name|UnsupportedClientTest
extends|extends
name|AmqpTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UnsupportedClientTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|,
literal|"src/test/resources/client.keystore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStoreType"
argument_list|,
literal|"jks"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|,
literal|"src/test/resources/server.keystore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStoreType"
argument_list|,
literal|"jks"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAdditionalConfig
parameter_list|()
block|{
return|return
literal|"&wireFormat.allowNonSaslConnections=false"
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOlderProtocolIsRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpHeader
name|header
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|setProtocolId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMajor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMinor
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|header
operator|.
name|setRevision
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Test TCP
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test NIO
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test NIO+SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPlusSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNewerMajorIsRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpHeader
name|header
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|setProtocolId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMajor
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMinor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|setRevision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Test TCP
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test NIO
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test NIO+SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPlusSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNewerMinorIsRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpHeader
name|header
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|setProtocolId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMajor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMinor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|header
operator|.
name|setRevision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Test TCP
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test NIO
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test NIO+SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPlusSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNewerRevisionIsRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpHeader
name|header
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|setProtocolId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMajor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMinor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|setRevision
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Test TCP
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test NIO
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test NIO+SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPlusSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNonSaslClientIsRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpHeader
name|header
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|setProtocolId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMajor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMinor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|setRevision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Test TCP
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test NIO
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test NIO+SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPlusSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testUnkownProtocolIdIsRejected
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpHeader
name|header
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|header
operator|.
name|setProtocolId
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMajor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|header
operator|.
name|setMinor
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|header
operator|.
name|setRevision
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Test TCP
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test NIO
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test NIO+SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPlusSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testInvalidProtocolHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpHeader
name|header
init|=
operator|new
name|AmqpHeader
argument_list|(
operator|new
name|Buffer
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'S'
block|,
literal|'T'
block|,
literal|'O'
block|,
literal|'M'
block|,
literal|'P'
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Test TCP
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test NIO
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPort
argument_list|,
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test NIO+SSL
name|doTestInvalidHeaderProcessing
argument_list|(
name|amqpNioPlusSslPort
argument_list|,
name|header
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doTestInvalidHeaderProcessing
parameter_list|(
name|int
name|port
parameter_list|,
specifier|final
name|AmqpHeader
name|header
parameter_list|,
name|boolean
name|ssl
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ClientConnection
name|connection
init|=
name|createClientConnection
argument_list|(
name|ssl
argument_list|)
decl_stmt|;
name|connection
operator|.
name|open
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|AmqpHeader
name|response
init|=
name|connection
operator|.
name|readAmqpHeader
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker responded with: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Broker should have closed client connection"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|connection
operator|.
name|send
argument_list|(
name|header
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|250
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClientConnection
name|createClientConnection
parameter_list|(
name|boolean
name|ssl
parameter_list|)
block|{
if|if
condition|(
name|ssl
condition|)
block|{
return|return
operator|new
name|SslClientConnection
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|ClientConnection
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|ClientConnection
block|{
specifier|protected
specifier|static
specifier|final
name|long
name|RECEIVE_TIMEOUT
init|=
literal|10000
decl_stmt|;
specifier|protected
name|Socket
name|clientSocket
decl_stmt|;
specifier|public
name|void
name|open
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|clientSocket
operator|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|AmqpHeader
name|header
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStream
name|outputStream
init|=
name|clientSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|header
operator|.
name|getBuffer
argument_list|()
operator|.
name|writeTo
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AmqpHeader
name|readAmqpHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|clientSocket
operator|.
name|setSoTimeout
argument_list|(
operator|(
name|int
operator|)
name|RECEIVE_TIMEOUT
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|clientSocket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|header
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|int
name|read
init|=
name|is
operator|.
name|read
argument_list|(
name|header
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|==
name|header
operator|.
name|length
condition|)
block|{
return|return
operator|new
name|AmqpHeader
argument_list|(
operator|new
name|Buffer
argument_list|(
name|header
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
class|class
name|SslClientConnection
extends|extends
name|ClientConnection
block|{
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|SocketFactory
name|factory
init|=
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|clientSocket
operator|=
name|factory
operator|.
name|createSocket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseTcpConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseSslConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioPlusSslConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

