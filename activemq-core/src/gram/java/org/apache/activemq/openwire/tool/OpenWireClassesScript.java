begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|mx4j
operator|.
name|tools
operator|.
name|adaptor
operator|.
name|http
operator|.
name|GetAttributeCommandProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JamClassIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|OpenWireClassesScript
extends|extends
name|OpenWireScript
block|{
specifier|protected
name|Set
name|manuallyMaintainedClasses
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|protected
name|File
name|destDir
init|=
operator|new
name|File
argument_list|(
literal|"target/generated/classes"
argument_list|)
decl_stmt|;
specifier|protected
name|File
name|destFile
decl_stmt|;
specifier|protected
name|String
name|filePostFix
init|=
literal|""
decl_stmt|;
specifier|protected
name|JClass
name|jclass
decl_stmt|;
specifier|protected
name|JClass
name|superclass
decl_stmt|;
specifier|protected
name|String
name|simpleName
decl_stmt|;
specifier|protected
name|String
name|className
decl_stmt|;
specifier|protected
name|String
name|baseClass
decl_stmt|;
specifier|protected
name|StringBuffer
name|buffer
decl_stmt|;
specifier|public
name|OpenWireClassesScript
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
block|{
literal|"ActiveMQDestination"
block|,
literal|"ActiveMQTempDestination"
block|,
literal|"ActiveMQQueue"
block|,
literal|"ActiveMQTopic"
block|,
literal|"ActiveMQTempQueue"
block|,
literal|"ActiveMQTempTopic"
block|,
literal|"BaseCommand"
block|,
literal|"ActiveMQMessage"
block|,
literal|"ActiveMQTextMessage"
block|,
literal|"ActiveMQMapMessage"
block|,
literal|"ActiveMQBytesMessage"
block|,
literal|"ActiveMQStreamMessage"
block|,
literal|"ActiveMQStreamMessage"
block|,
literal|"DataStructureSupport"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|manuallyMaintainedClasses
operator|.
name|add
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|destDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|JamClassIterator
name|iter
init|=
name|getClasses
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|jclass
operator|=
name|iter
operator|.
name|nextClass
argument_list|()
expr_stmt|;
if|if
condition|(
name|isValidClass
argument_list|(
name|jclass
argument_list|)
condition|)
block|{
name|processClass
argument_list|(
name|jclass
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|boolean
name|isValidClass
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
if|if
condition|(
name|jclass
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:marshaller"
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|manuallyMaintainedClasses
operator|.
name|contains
argument_list|(
name|jclass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|processClass
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
name|simpleName
operator|=
name|jclass
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
name|superclass
operator|=
name|jclass
operator|.
name|getSuperclass
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Processing class: "
operator|+
name|simpleName
argument_list|)
expr_stmt|;
name|className
operator|=
name|getClassName
argument_list|(
name|jclass
argument_list|)
expr_stmt|;
name|destFile
operator|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|className
operator|+
name|filePostFix
argument_list|)
expr_stmt|;
name|baseClass
operator|=
name|getBaseClassName
argument_list|(
name|jclass
argument_list|)
expr_stmt|;
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|destFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|generateFile
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
function_decl|;
specifier|protected
name|String
name|getBaseClassName
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
name|String
name|answer
init|=
literal|"AbstractCommand"
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|superclass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
literal|"Object"
argument_list|)
condition|)
block|{
name|answer
operator|=
name|name
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|String
name|getClassName
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
return|return
literal|"AbstractCommand"
return|;
block|}
block|}
end_class

end_unit

