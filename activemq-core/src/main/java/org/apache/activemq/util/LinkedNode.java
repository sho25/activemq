begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Provides a base class for you to extend when you want object to maintain  * a doubly linked list to other objects without using a collection class.   *   * @author chirino  */
end_comment

begin_class
specifier|public
class|class
name|LinkedNode
block|{
specifier|protected
name|LinkedNode
name|next
init|=
name|this
decl_stmt|;
specifier|protected
name|LinkedNode
name|prev
init|=
name|this
decl_stmt|;
specifier|protected
name|boolean
name|tail
init|=
literal|true
decl_stmt|;
specifier|public
name|LinkedNode
name|getHeadNode
parameter_list|()
block|{
if|if
condition|(
name|isHeadNode
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|isTailNode
argument_list|()
condition|)
block|{
return|return
name|next
return|;
block|}
name|LinkedNode
name|rc
init|=
name|prev
decl_stmt|;
while|while
condition|(
operator|!
name|rc
operator|.
name|isHeadNode
argument_list|()
condition|)
block|{
name|rc
operator|=
name|rc
operator|.
name|prev
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|LinkedNode
name|getTailNode
parameter_list|()
block|{
if|if
condition|(
name|isTailNode
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
if|if
condition|(
name|isHeadNode
argument_list|()
condition|)
block|{
return|return
name|prev
return|;
block|}
name|LinkedNode
name|rc
init|=
name|next
decl_stmt|;
while|while
condition|(
operator|!
name|rc
operator|.
name|isTailNode
argument_list|()
condition|)
block|{
name|rc
operator|=
name|rc
operator|.
name|next
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|LinkedNode
name|getNext
parameter_list|()
block|{
return|return
name|tail
condition|?
literal|null
else|:
name|next
return|;
block|}
specifier|public
name|LinkedNode
name|getPrevious
parameter_list|()
block|{
return|return
name|prev
operator|.
name|tail
condition|?
literal|null
else|:
name|prev
return|;
block|}
specifier|public
name|boolean
name|isHeadNode
parameter_list|()
block|{
return|return
name|prev
operator|.
name|isTailNode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isTailNode
parameter_list|()
block|{
return|return
name|tail
return|;
block|}
comment|/** 	 * @param rightHead the node to link after this node. 	 * @return this 	 */
specifier|public
name|LinkedNode
name|linkAfter
parameter_list|(
name|LinkedNode
name|rightHead
parameter_list|)
block|{
if|if
condition|(
name|rightHead
operator|==
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot link to yourself"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|rightHead
operator|.
name|isHeadNode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You only insert nodes that are the first in a list"
argument_list|)
throw|;
block|}
name|LinkedNode
name|rightTail
init|=
name|rightHead
operator|.
name|prev
decl_stmt|;
if|if
condition|(
name|tail
condition|)
block|{
name|tail
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|rightTail
operator|.
name|tail
operator|=
literal|false
expr_stmt|;
block|}
name|rightHead
operator|.
name|prev
operator|=
name|this
expr_stmt|;
comment|// link the head of the right side.
name|rightTail
operator|.
name|next
operator|=
name|next
expr_stmt|;
comment|// link the tail of the right side
name|next
operator|.
name|prev
operator|=
name|rightTail
expr_stmt|;
comment|// link the head of the left side
name|next
operator|=
name|rightHead
expr_stmt|;
comment|// link the tail of the left side.
return|return
name|this
return|;
block|}
comment|/** 	 * @param leftHead the node to link after this node. 	 * @return  	 * @return this 	 */
specifier|public
name|LinkedNode
name|linkBefore
parameter_list|(
name|LinkedNode
name|leftHead
parameter_list|)
block|{
if|if
condition|(
name|leftHead
operator|==
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You cannot link to yourself"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|leftHead
operator|.
name|isHeadNode
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You only insert nodes that are the first in a list"
argument_list|)
throw|;
block|}
comment|// The left side is no longer going to be a tail..
name|LinkedNode
name|leftTail
init|=
name|leftHead
operator|.
name|prev
decl_stmt|;
name|leftTail
operator|.
name|tail
operator|=
literal|false
expr_stmt|;
name|leftTail
operator|.
name|next
operator|=
name|this
expr_stmt|;
comment|// link the tail of the left side.
name|leftHead
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
comment|// link the head of the left side.
name|prev
operator|.
name|next
operator|=
name|leftHead
expr_stmt|;
comment|// link the tail of the right side.
name|prev
operator|=
name|leftTail
expr_stmt|;
comment|// link the head of the right side.
return|return
name|leftHead
return|;
block|}
comment|/** 	 * Removes this node out of the linked list it is chained in.   	 */
specifier|public
name|void
name|unlink
parameter_list|()
block|{
comment|// If we are allready unlinked...
if|if
condition|(
name|prev
operator|==
name|this
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|tail
condition|)
block|{
name|prev
operator|.
name|tail
operator|=
literal|true
expr_stmt|;
block|}
comment|// Update the peers links..
name|next
operator|.
name|prev
operator|=
name|prev
expr_stmt|;
name|prev
operator|.
name|next
operator|=
name|next
expr_stmt|;
comment|// Update our links..
name|next
operator|=
name|this
expr_stmt|;
name|prev
operator|=
name|this
expr_stmt|;
name|tail
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

