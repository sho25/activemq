begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_comment
comment|/**  * Creates<a href="http://activemq.org/site/virtual-destinations.html">Virtual  * Topics</a> using a prefix and postfix. The virtual destination creates a  * wildcard that is then used to look up all active queue subscriptions which  * match.  *   * @org.apache.xbean.XBean  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|VirtualTopic
implements|implements
name|VirtualDestination
block|{
specifier|private
name|String
name|prefix
init|=
literal|"Consumer.*."
decl_stmt|;
specifier|private
name|String
name|postfix
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|name
init|=
literal|">"
decl_stmt|;
specifier|private
name|boolean
name|selectorAware
init|=
literal|false
decl_stmt|;
specifier|public
name|ActiveMQDestination
name|getVirtualDestination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Destination
name|intercept
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
return|return
name|selectorAware
condition|?
operator|new
name|SelectorAwareVirtualTopicInterceptor
argument_list|(
name|destination
argument_list|,
name|getPrefix
argument_list|()
argument_list|,
name|getPostfix
argument_list|()
argument_list|)
else|:
operator|new
name|VirtualTopicInterceptor
argument_list|(
name|destination
argument_list|,
name|getPrefix
argument_list|()
argument_list|,
name|getPostfix
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{             }
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|String
name|getPostfix
parameter_list|()
block|{
return|return
name|postfix
return|;
block|}
comment|/**      * Sets any postix used to identify the queue consumers      */
specifier|public
name|void
name|setPostfix
parameter_list|(
name|String
name|postfix
parameter_list|)
block|{
name|this
operator|.
name|postfix
operator|=
name|postfix
expr_stmt|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
comment|/**      * Sets the prefix wildcard used to identify the queue consumers for a given      * topic      */
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Indicates whether the selectors of consumers are used to determine dispatch      * to a virtual destination, when true only messages matching an existing       * consumer will be dispatched.      * @param selectorAware when true take consumer selectors into consideration      */
specifier|public
name|void
name|setSelectorAware
parameter_list|(
name|boolean
name|selectorAware
parameter_list|)
block|{
name|this
operator|.
name|selectorAware
operator|=
name|selectorAware
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectorAware
parameter_list|()
block|{
return|return
name|selectorAware
return|;
block|}
block|}
end_class

end_unit

