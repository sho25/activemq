begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|xstream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|ConverterLookup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|MarshallingContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|converters
operator|.
name|UnmarshallingContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MarshallAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|util
operator|.
name|TextWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_comment
comment|/**  * A {@link WireFormat} implementation which uses the<a  * href="http://xstream.codehaus.org/>XStream</a> library to marshall commands  * onto the wire  *  *  */
end_comment

begin_class
specifier|public
class|class
name|XStreamWireFormat
extends|extends
name|TextWireFormat
block|{
specifier|private
name|XStream
name|xStream
decl_stmt|;
specifier|private
name|int
name|version
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|WireFormat
name|copy
parameter_list|()
block|{
return|return
operator|new
name|XStreamWireFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|unmarshalText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|getXStream
argument_list|()
operator|.
name|fromXML
argument_list|(
name|text
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|unmarshalText
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
return|return
name|getXStream
argument_list|()
operator|.
name|fromXML
argument_list|(
name|reader
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|marshalText
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|command
operator|instanceof
name|MarshallAware
condition|)
block|{
operator|(
operator|(
name|MarshallAware
operator|)
name|command
operator|)
operator|.
name|beforeMarshall
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|instanceof
name|MessageDispatch
condition|)
block|{
name|MessageDispatch
name|dispatch
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
if|if
condition|(
name|dispatch
operator|!=
literal|null
operator|&&
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|.
name|beforeMarshall
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|getXStream
argument_list|()
operator|.
name|toXML
argument_list|(
name|command
argument_list|)
return|;
block|}
comment|/**      * Can this wireformat process packets of this version      *      * @param version the version number to test      * @return true if can accept the version      */
specifier|public
name|boolean
name|canProcessWireFormatVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @return the current version of this wire format      */
specifier|public
name|int
name|getCurrentWireFormatVersion
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|XStream
name|getXStream
parameter_list|()
block|{
if|if
condition|(
name|xStream
operator|==
literal|null
condition|)
block|{
name|xStream
operator|=
name|createXStream
argument_list|()
expr_stmt|;
comment|// make it work in OSGi env
name|xStream
operator|.
name|setClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|xStream
return|;
block|}
specifier|public
name|void
name|setXStream
parameter_list|(
name|XStream
name|xStream
parameter_list|)
block|{
name|this
operator|.
name|xStream
operator|=
name|xStream
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
specifier|protected
name|XStream
name|createXStream
parameter_list|()
block|{
specifier|final
name|XStream
name|xstream
init|=
operator|new
name|XStream
argument_list|()
decl_stmt|;
name|xstream
operator|.
name|ignoreUnknownElements
argument_list|()
expr_stmt|;
name|xstream
operator|.
name|registerConverter
argument_list|(
operator|new
name|Converter
argument_list|()
block|{
specifier|final
name|Converter
name|delegate
init|=
name|xstream
operator|.
name|getConverterLookup
argument_list|()
operator|.
name|lookupConverterForType
argument_list|(
name|ByteSequence
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|marshal
parameter_list|(
name|Object
name|o
parameter_list|,
name|HierarchicalStreamWriter
name|hierarchicalStreamWriter
parameter_list|,
name|MarshallingContext
name|marshallingContext
parameter_list|)
block|{
name|ByteSequence
name|byteSequence
init|=
operator|(
name|ByteSequence
operator|)
name|o
decl_stmt|;
name|byteSequence
operator|.
name|compact
argument_list|()
expr_stmt|;
name|delegate
operator|.
name|marshal
argument_list|(
name|byteSequence
argument_list|,
name|hierarchicalStreamWriter
argument_list|,
name|marshallingContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|HierarchicalStreamReader
name|hierarchicalStreamReader
parameter_list|,
name|UnmarshallingContext
name|unmarshallingContext
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|unmarshal
argument_list|(
name|hierarchicalStreamReader
argument_list|,
name|unmarshallingContext
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canConvert
parameter_list|(
name|Class
name|aClass
parameter_list|)
block|{
return|return
name|aClass
operator|==
name|ByteSequence
operator|.
name|class
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|xstream
return|;
block|}
block|}
end_class

end_unit

