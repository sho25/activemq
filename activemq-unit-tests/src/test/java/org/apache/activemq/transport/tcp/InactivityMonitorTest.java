begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportAcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|InactivityMonitorTest
extends|extends
name|CombinationTestSupport
implements|implements
name|TransportAcceptListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InactivityMonitorTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|Runnable
name|serverRunOnCommand
decl_stmt|;
specifier|public
name|Runnable
name|clientRunOnCommand
decl_stmt|;
specifier|private
name|TransportServer
name|server
decl_stmt|;
specifier|private
name|Transport
name|clientTransport
decl_stmt|;
specifier|private
name|Transport
name|serverTransport
decl_stmt|;
specifier|private
name|int
name|serverPort
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|clientReceiveCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|clientErrorCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|serverReceiveCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|serverErrorCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|ignoreClientError
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|ignoreServerError
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|startTransportServer
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws Exception      * @throws URISyntaxException      */
specifier|private
name|void
name|startClient
parameter_list|()
throws|throws
name|Exception
throws|,
name|URISyntaxException
block|{
name|clientTransport
operator|=
name|TransportFactory
operator|.
name|connect
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:"
operator|+
name|serverPort
operator|+
literal|"?trace=true&wireFormat.maxInactivityDuration=1000"
argument_list|)
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|clientReceiveCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|clientRunOnCommand
operator|!=
literal|null
condition|)
block|{
name|clientRunOnCommand
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreClientError
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client transport error:"
argument_list|)
expr_stmt|;
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|clientErrorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{             }
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{             }
block|}
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws IOException      * @throws URISyntaxException      * @throws Exception      */
specifier|private
name|void
name|startTransportServer
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|Exception
block|{
name|server
operator|=
name|TransportFactory
operator|.
name|bind
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:0?trace=true&wireFormat.maxInactivityDuration=1000"
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAcceptListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|serverPort
operator|=
name|server
operator|.
name|getSocketAddress
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ignoreClientError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ignoreServerError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|clientTransport
operator|!=
literal|null
condition|)
block|{
name|clientTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serverTransport
operator|!=
literal|null
condition|)
block|{
name|serverTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onAccept
parameter_list|(
name|Transport
name|transport
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"] Server Accepted a Connection"
argument_list|)
expr_stmt|;
name|serverTransport
operator|=
name|transport
expr_stmt|;
name|serverTransport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|serverReceiveCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|serverRunOnCommand
operator|!=
literal|null
condition|)
block|{
name|serverRunOnCommand
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreClientError
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Server transport error:"
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|serverErrorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{                 }
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{                 }
block|}
argument_list|)
expr_stmt|;
name|serverTransport
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onAcceptError
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|error
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClientHang
parameter_list|()
throws|throws
name|Exception
block|{
comment|//
comment|// Manually create a client transport so that it does not send KeepAlive
comment|// packets.
comment|// this should simulate a client hang.
name|clientTransport
operator|=
operator|new
name|TcpTransport
argument_list|(
operator|new
name|OpenWireFormat
argument_list|()
argument_list|,
name|SocketFactory
operator|.
name|getDefault
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:"
operator|+
name|serverPort
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|clientReceiveCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|clientRunOnCommand
operator|!=
literal|null
condition|)
block|{
name|clientRunOnCommand
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreClientError
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client transport error:"
argument_list|)
expr_stmt|;
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|clientErrorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{             }
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{             }
block|}
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|start
argument_list|()
expr_stmt|;
name|WireFormatInfo
name|info
init|=
operator|new
name|WireFormatInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setVersion
argument_list|(
name|OpenWireFormat
operator|.
name|DEFAULT_VERSION
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMaxInactivityDuration
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|oneway
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Server should consider the client timed out right away since the
comment|// client is not hart beating fast enough.
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|serverErrorCount
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoClientHang
parameter_list|()
throws|throws
name|Exception
block|{
name|startClient
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Used to test when a operation blocks. This should not cause transport to      * get disconnected.      *      * @throws Exception      * @throws URISyntaxException      */
specifier|public
name|void
name|initCombosForTestNoClientHangWithServerBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|startClient
argument_list|()
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"clientInactivityLimit"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|1000
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"serverInactivityLimit"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|1000
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"serverRunOnCommand"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
block|}
block|}
end_class

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_function
unit|}      public
name|void
name|testNoClientHangWithServerBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|startClient
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|clientErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

