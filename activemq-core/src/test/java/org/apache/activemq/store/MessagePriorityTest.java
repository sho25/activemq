begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|abstract
specifier|public
class|class
name|MessagePriorityTest
extends|extends
name|CombinationTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MessagePriorityTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
name|PersistenceAdapter
name|adapter
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
decl_stmt|;
name|Connection
name|conn
decl_stmt|;
specifier|protected
name|Session
name|sess
decl_stmt|;
specifier|public
name|boolean
name|useCache
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|dispatchAsync
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|prioritizeMessages
init|=
literal|true
decl_stmt|;
specifier|public
name|int
name|prefetchVal
init|=
literal|500
decl_stmt|;
specifier|public
name|int
name|MSG_NUM
init|=
literal|600
decl_stmt|;
specifier|public
name|int
name|HIGH_PRI
init|=
literal|7
decl_stmt|;
specifier|public
name|int
name|LOW_PRI
init|=
literal|3
decl_stmt|;
specifier|abstract
specifier|protected
name|PersistenceAdapter
name|createPersistenceAdapter
parameter_list|(
name|boolean
name|delete
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"priorityTest"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adapter
operator|=
name|createPersistenceAdapter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setPrioritizedMessages
argument_list|(
name|prioritizeMessages
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseCache
argument_list|(
name|useCache
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://priorityTest"
argument_list|)
expr_stmt|;
name|ActiveMQPrefetchPolicy
name|prefetch
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|prefetch
operator|.
name|setAll
argument_list|(
name|prefetchVal
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPrefetchPolicy
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setDispatchAsync
argument_list|(
name|dispatchAsync
argument_list|)
expr_stmt|;
name|conn
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setClientID
argument_list|(
literal|"priority"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|sess
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{         }
finally|finally
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testStoreConfigured
parameter_list|()
throws|throws
name|Exception
block|{
name|Queue
name|queue
init|=
name|sess
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|queueProducer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|MessageProducer
name|topicProducer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// get it all propagated
name|assertTrue
argument_list|(
name|broker
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|queue
argument_list|)
operator|.
name|getMessageStore
argument_list|()
operator|.
name|isPrioritizedMessages
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|get
argument_list|(
name|topic
argument_list|)
operator|.
name|getMessageStore
argument_list|()
operator|.
name|isPrioritizedMessages
argument_list|()
argument_list|)
expr_stmt|;
name|queueProducer
operator|.
name|close
argument_list|()
expr_stmt|;
name|topicProducer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
class|class
name|ProducerThread
extends|extends
name|Thread
block|{
name|int
name|priority
decl_stmt|;
name|int
name|messageCount
decl_stmt|;
name|ActiveMQDestination
name|dest
decl_stmt|;
specifier|public
name|ProducerThread
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|messageCount
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|messageCount
operator|=
name|messageCount
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|MessageProducer
name|producer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"message priority: "
operator|+
name|priority
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|initCombosForTestQueues
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"useCache"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
block|,
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQQueue
name|queue
init|=
operator|(
name|ActiveMQQueue
operator|)
name|sess
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|ProducerThread
name|lowPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|queue
argument_list|,
name|MSG_NUM
argument_list|,
name|LOW_PRI
argument_list|)
decl_stmt|;
name|ProducerThread
name|highPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|queue
argument_list|,
name|MSG_NUM
argument_list|,
name|HIGH_PRI
argument_list|)
decl_stmt|;
name|lowPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|lowPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|MessageConsumer
name|queueConsumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_NUM
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"received i="
operator|+
name|i
operator|+
literal|", "
operator|+
operator|(
name|msg
operator|!=
literal|null
condition|?
name|msg
operator|.
name|getJMSMessageID
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" was null"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" has wrong priority"
argument_list|,
name|i
operator|<
name|MSG_NUM
condition|?
name|HIGH_PRI
else|:
name|LOW_PRI
argument_list|,
name|msg
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|int
name|priority
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|text
init|=
literal|"priority "
operator|+
name|priority
decl_stmt|;
name|Message
name|msg
init|=
name|sess
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending  "
operator|+
name|text
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
name|void
name|initCombosForTestDurableSubs
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prefetchVal"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|MSG_NUM
operator|/
literal|4
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurableSubs
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"priority"
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|ProducerThread
name|lowPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|LOW_PRI
argument_list|)
decl_stmt|;
name|ProducerThread
name|highPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|HIGH_PRI
argument_list|)
decl_stmt|;
name|lowPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|lowPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|sub
operator|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"priority"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_NUM
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|sub
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" was null"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" has wrong priority"
argument_list|,
name|i
operator|<
name|MSG_NUM
condition|?
name|HIGH_PRI
else|:
name|LOW_PRI
argument_list|,
name|msg
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestDurableSubsReconnect
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prefetchVal"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|1000
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|MSG_NUM
operator|/
literal|2
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// REVISIT = is dispatchAsync = true a problem or is it just the test?
name|addCombinationValues
argument_list|(
literal|"dispatchAsync"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"useCache"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|,
name|Boolean
operator|.
name|FALSE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurableSubsReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subName
init|=
literal|"priorityDisconnect"
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|ProducerThread
name|lowPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|LOW_PRI
argument_list|)
decl_stmt|;
name|ProducerThread
name|highPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|HIGH_PRI
argument_list|)
decl_stmt|;
name|lowPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|lowPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|int
name|closeFrequency
init|=
name|MSG_NUM
operator|/
literal|4
decl_stmt|;
name|sub
operator|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_NUM
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|sub
operator|.
name|receive
argument_list|(
literal|15000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"received i="
operator|+
name|i
operator|+
literal|", "
operator|+
operator|(
name|msg
operator|!=
literal|null
condition|?
name|msg
operator|.
name|getJMSMessageID
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" was null"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" has wrong priority"
argument_list|,
name|i
operator|<
name|MSG_NUM
condition|?
name|HIGH_PRI
else|:
name|LOW_PRI
argument_list|,
name|msg
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
name|closeFrequency
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing durable sub.. on: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|sub
operator|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

