begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_class
specifier|public
class|class
name|MBeansRegExQueryFilter
extends|extends
name|RegExQueryFilter
block|{
comment|/**      * Creates a regular expression query that is able to match the values of specific mbeans      * @param next - next query filter      */
specifier|public
name|MBeansRegExQueryFilter
parameter_list|(
name|QueryFilter
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Try to match the object data using the regular expression map. The regex map contains a key-value mapping of an attribute      * key to a regular expression the value of the key should match. The basic rule of matching is that the data must contain      * a property key that is included in the regex map, and that the value of the property key should match the regex specified.      * @param data - object data to match      * @param regex - regex map      * @return true if the data matches the regex map specified      * @throws Exception      */
specifier|protected
name|boolean
name|matches
parameter_list|(
name|Object
name|data
parameter_list|,
name|Map
name|regex
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Use reflection to determine where the object should go
try|try
block|{
name|Method
name|method
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"matches"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|data
operator|.
name|getClass
argument_list|()
block|,
name|Map
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
operator|new
name|Object
index|[]
block|{
name|data
block|,
name|regex
block|}
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Try to match the object instance using the regular expression map      * @param data - object instance to match      * @param regex - regex map      * @return true if the object instance matches the regex map      */
specifier|protected
name|boolean
name|matches
parameter_list|(
name|ObjectInstance
name|data
parameter_list|,
name|Map
name|regex
parameter_list|)
block|{
return|return
name|matches
argument_list|(
name|data
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|regex
argument_list|)
return|;
block|}
comment|/**      * Try to match the object name instance using the regular expression map      * @param data - object name to match      * @param regex - regex map      * @return true if the object name matches the regex map      */
specifier|protected
name|boolean
name|matches
parameter_list|(
name|ObjectName
name|data
parameter_list|,
name|Map
name|regex
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|regex
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|target
init|=
name|data
operator|.
name|getKeyProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|// Try to match the value of the property of the object name
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
operator|!
operator|(
operator|(
name|Pattern
operator|)
name|regex
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|matcher
argument_list|(
name|target
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Try to match the attribute list using the regular expression map      * @param data - attribute list to match      * @param regex - regex map      * @return true if the attribute list matches the regex map      */
specifier|protected
name|boolean
name|matches
parameter_list|(
name|AttributeList
name|data
parameter_list|,
name|Map
name|regex
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|regex
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Try to match each regex to the attributes of the mbean including its ObjectName
for|for
control|(
name|Iterator
name|j
init|=
name|data
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|attrib
init|=
operator|(
name|Attribute
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Try to match to the properties of the ObjectName
if|if
condition|(
name|attrib
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MBeansAttributeQueryFilter
operator|.
name|KEY_OBJECT_NAME_ATTRIBUTE
argument_list|)
condition|)
block|{
name|String
name|target
init|=
operator|(
operator|(
name|ObjectName
operator|)
name|attrib
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getKeyProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
operator|||
operator|!
operator|(
operator|(
name|Pattern
operator|)
name|regex
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|matcher
argument_list|(
name|target
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// If match skip to the next regex
break|break;
block|}
comment|// Try to match to the mbean attributes
block|}
elseif|else
if|if
condition|(
name|attrib
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Pattern
operator|)
name|regex
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|matcher
argument_list|(
name|attrib
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// If match skip to the next regex
break|break;
block|}
comment|// If mbean does not contain the specified attribute
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

