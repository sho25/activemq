begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|protocol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  *  *  */
end_comment

begin_class
specifier|public
class|class
name|MqttProtocolVerifier
implements|implements
name|ProtocolVerifier
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isProtocol
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|buf
operator|.
name|get
argument_list|()
operator|==
literal|16
operator|&&
name|validateRemainingLength
argument_list|(
name|buf
argument_list|)
operator|&&
name|buf
operator|.
name|get
argument_list|()
operator|==
operator|(
name|byte
operator|)
literal|0
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|byte
name|b
init|=
name|buf
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|b
operator|==
literal|4
operator|||
name|b
operator|==
literal|6
operator|)
operator|&&
operator|(
name|buf
operator|.
name|get
argument_list|()
operator|==
literal|77
operator|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|validateRemainingLength
parameter_list|(
name|ByteBuffer
name|buffer
parameter_list|)
block|{
name|byte
name|msb
init|=
operator|(
name|byte
operator|)
literal|0b10000000
decl_stmt|;
for|for
control|(
name|byte
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|buffer
operator|.
name|get
argument_list|()
operator|&
name|msb
operator|)
operator|!=
name|msb
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

