begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryMonitoringTool
implements|implements
name|Runnable
block|{
specifier|private
name|long
name|checkpointInterval
init|=
literal|5000
decl_stmt|;
comment|// 5 sec sample checkpointInterval
specifier|private
name|long
name|resultIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|AtomicBoolean
name|isRunning
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|DataOutputStream
name|dataDoutputStream
init|=
literal|null
decl_stmt|;
specifier|protected
name|Properties
name|testSettings
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|protected
name|ReportGenerator
name|reportGenerator
init|=
operator|new
name|ReportGenerator
argument_list|()
decl_stmt|;
specifier|private
name|MemoryMXBean
name|memoryBean
decl_stmt|;
specifier|public
name|Properties
name|getTestSettings
parameter_list|()
block|{
return|return
name|testSettings
return|;
block|}
specifier|public
name|void
name|setTestSettings
parameter_list|(
name|Properties
name|sysTestSettings
parameter_list|)
block|{
name|this
operator|.
name|testSettings
operator|=
name|sysTestSettings
expr_stmt|;
block|}
specifier|public
name|DataOutputStream
name|getDataOutputStream
parameter_list|()
block|{
return|return
name|dataDoutputStream
return|;
block|}
specifier|public
name|void
name|setDataOutputStream
parameter_list|(
name|DataOutputStream
name|dataDoutputStream
parameter_list|)
block|{
name|this
operator|.
name|dataDoutputStream
operator|=
name|dataDoutputStream
expr_stmt|;
block|}
specifier|public
name|void
name|stopMonitor
parameter_list|()
block|{
name|isRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getCheckpointInterval
parameter_list|()
block|{
return|return
name|checkpointInterval
return|;
block|}
specifier|public
name|void
name|setCheckpointInterval
parameter_list|(
name|long
name|checkpointInterval
parameter_list|)
block|{
name|this
operator|.
name|checkpointInterval
operator|=
name|checkpointInterval
expr_stmt|;
block|}
specifier|public
name|Thread
name|startMonitor
parameter_list|()
block|{
name|String
name|intervalStr
init|=
name|this
operator|.
name|getTestSettings
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"checkpoint_interval"
argument_list|)
decl_stmt|;
name|checkpointInterval
operator|=
operator|new
name|Integer
argument_list|(
name|intervalStr
argument_list|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|this
operator|.
name|getTestSettings
argument_list|()
operator|.
name|remove
argument_list|(
literal|"checkpoint_interval"
argument_list|)
expr_stmt|;
name|memoryBean
operator|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
expr_stmt|;
name|reportGenerator
operator|.
name|setTestSettings
argument_list|(
name|getTestSettings
argument_list|()
argument_list|)
expr_stmt|;
name|addTestInformation
argument_list|()
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"Memory monitoring tool"
argument_list|)
expr_stmt|;
name|isRunning
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
name|void
name|addTestInformation
parameter_list|()
block|{
name|reportGenerator
operator|.
name|setReportName
argument_list|(
name|this
operator|.
name|getTestSettings
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"report_name"
argument_list|)
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|setReportDirectory
argument_list|(
name|this
operator|.
name|getTestSettings
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"report_directory"
argument_list|)
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|startGenerateReport
argument_list|()
expr_stmt|;
name|reportGenerator
operator|.
name|addTestInformation
argument_list|()
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|4
argument_list|,
literal|"<jvm_memory_settings>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|6
argument_list|,
literal|"<heap_memory>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|8
argument_list|,
literal|"<committed>"
operator|+
name|memoryBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getCommitted
argument_list|()
operator|+
literal|"</committed>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|8
argument_list|,
literal|"<max>"
operator|+
name|memoryBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
operator|+
literal|"</max>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|6
argument_list|,
literal|"</heap_memory>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|6
argument_list|,
literal|"<non_heap_memory>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|8
argument_list|,
literal|"<committed>"
operator|+
name|memoryBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getCommitted
argument_list|()
operator|+
literal|"</committed>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|8
argument_list|,
literal|"<max>"
operator|+
name|memoryBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getMax
argument_list|()
operator|+
literal|"</max>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|6
argument_list|,
literal|"</non_heap_memory>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|4
argument_list|,
literal|"</jvm_memory_settings>"
argument_list|)
expr_stmt|;
name|reportGenerator
operator|.
name|addClientSettings
argument_list|()
expr_stmt|;
name|reportGenerator
operator|.
name|endTestInformation
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|nonHeapMB
init|=
literal|0
decl_stmt|;
name|long
name|heapMB
init|=
literal|0
decl_stmt|;
name|long
name|oneMB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
name|reportGenerator
operator|.
name|startTestResult
argument_list|(
name|getCheckpointInterval
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|isRunning
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
comment|//wait every check point before getting the next memory usage
name|Thread
operator|.
name|sleep
argument_list|(
name|checkpointInterval
argument_list|)
expr_stmt|;
name|nonHeapMB
operator|=
name|memoryBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|/
name|oneMB
expr_stmt|;
name|heapMB
operator|=
name|memoryBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|/
name|oneMB
expr_stmt|;
name|reportGenerator
operator|.
name|writeWithIndent
argument_list|(
literal|6
argument_list|,
literal|"<memory_usage index="
operator|+
name|resultIndex
operator|+
literal|" non_heap_mb="
operator|+
name|nonHeapMB
operator|+
literal|" non_heap_bytes="
operator|+
name|memoryBean
operator|.
name|getNonHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|+
literal|" heap_mb="
operator|+
name|heapMB
operator|+
literal|" heap_bytes="
operator|+
name|memoryBean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
operator|+
literal|"/>"
argument_list|)
expr_stmt|;
name|resultIndex
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|reportGenerator
operator|.
name|endTestResult
argument_list|()
expr_stmt|;
name|reportGenerator
operator|.
name|stopGenerateReport
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

