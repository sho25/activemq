begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|AgentStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|AgentSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|systest
operator|.
name|BrokerAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_comment
comment|/**  * A simple in-memory broker implementation  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|BrokerAgentImpl
extends|extends
name|AgentSupport
implements|implements
name|BrokerAgent
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BrokerAgentImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|counter
decl_stmt|;
specifier|private
specifier|static
name|int
name|port
init|=
literal|61616
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|String
name|brokerName
decl_stmt|;
specifier|private
name|boolean
name|persistent
decl_stmt|;
specifier|private
name|String
name|connectionURI
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
specifier|private
name|boolean
name|deleteAllMessage
init|=
literal|true
decl_stmt|;
specifier|public
name|BrokerAgentImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerName
operator|=
literal|"broker-"
operator|+
operator|(
operator|++
name|counter
operator|)
expr_stmt|;
name|connectionURI
operator|=
literal|"tcp://localhost:"
operator|+
operator|(
name|port
operator|++
operator|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating broker on URI: "
operator|+
name|getConnectionURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|kill
parameter_list|()
throws|throws
name|Exception
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|getConnectionURI
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getConnectionURI
parameter_list|()
block|{
return|return
name|connectionURI
return|;
block|}
specifier|public
name|void
name|connectTo
parameter_list|(
name|BrokerAgent
name|remoteBroker
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|remoteURI
init|=
literal|"static://"
operator|+
name|remoteBroker
operator|.
name|getConnectionURI
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Broker is connecting to network using: "
operator|+
name|remoteURI
argument_list|)
expr_stmt|;
name|NetworkConnector
name|connector
init|=
name|getBroker
argument_list|()
operator|.
name|addNetworkConnector
argument_list|(
name|remoteURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|started
condition|)
block|{
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|started
operator|=
literal|true
expr_stmt|;
name|getBroker
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|AgentStopper
name|stopper
parameter_list|)
block|{
name|started
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
return|;
block|}
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
specifier|public
name|BrokerService
name|getBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
return|return
name|broker
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
name|isPersistent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete all the message the first time the broker is started.
name|answer
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessage
argument_list|)
expr_stmt|;
name|deleteAllMessage
operator|=
literal|false
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|getConnectionURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
return|return
name|brokerName
return|;
block|}
block|}
end_class

end_unit

