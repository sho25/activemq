begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|DataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|DataManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_class
specifier|public
class|class
name|DiskIndexLinkedListTest
extends|extends
name|VMIndexLinkedListTest
block|{
specifier|private
name|IndexManager
name|im
decl_stmt|;
specifier|protected
name|IndexLinkedList
name|createList
parameter_list|(
name|IndexItem
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|dirName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/target/activemq-data/testIndex"
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|file
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|DataManager
name|dm
init|=
operator|new
name|DataManagerImpl
argument_list|(
name|file
argument_list|,
literal|"test"
argument_list|,
operator|new
name|AtomicLong
argument_list|()
argument_list|)
decl_stmt|;
name|im
operator|=
operator|new
name|IndexManager
argument_list|(
name|file
argument_list|,
literal|"test"
argument_list|,
literal|"rw"
argument_list|,
name|dm
argument_list|,
operator|new
name|AtomicLong
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|=
name|im
operator|.
name|createNewIndex
argument_list|()
expr_stmt|;
name|im
operator|.
name|storeIndex
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
operator|new
name|DiskIndexLinkedList
argument_list|(
name|im
argument_list|,
name|root
argument_list|)
return|;
block|}
name|IndexItem
name|createIndex
parameter_list|(
name|IndexLinkedList
name|indexList
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexItem
name|result
init|=
name|im
operator|.
name|createNewIndex
argument_list|()
decl_stmt|;
name|im
operator|.
name|storeIndex
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|addToList
parameter_list|(
name|IndexLinkedList
name|list
parameter_list|,
name|IndexItem
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexItem
name|root
init|=
name|list
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|IndexItem
name|prev
init|=
name|list
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|prev
operator|=
name|prev
operator|!=
literal|null
condition|?
name|prev
else|:
name|root
expr_stmt|;
name|IndexItem
name|next
init|=
name|list
operator|.
name|getNextEntry
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|prev
operator|.
name|setNextItem
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|updateIndexes
argument_list|(
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPreviousItem
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|updateIndexes
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|im
operator|.
name|storeIndex
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|insertToList
parameter_list|(
name|IndexLinkedList
name|list
parameter_list|,
name|int
name|pos
parameter_list|,
name|IndexItem
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexItem
name|root
init|=
name|list
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|IndexItem
name|prev
init|=
literal|null
decl_stmt|;
name|IndexItem
name|next
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pos
operator|<=
literal|0
condition|)
block|{
name|prev
operator|=
name|root
expr_stmt|;
name|next
operator|=
name|list
operator|.
name|getNextEntry
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pos
operator|>=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
name|prev
operator|=
name|list
operator|.
name|getLast
argument_list|()
expr_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
condition|)
block|{
name|prev
operator|=
name|root
expr_stmt|;
block|}
name|next
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|prev
operator|=
name|list
operator|.
name|get
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|prev
operator|=
name|prev
operator|!=
literal|null
condition|?
name|prev
else|:
name|root
expr_stmt|;
name|next
operator|=
name|list
operator|.
name|getNextEntry
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
name|prev
operator|.
name|setNextItem
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|updateIndexes
argument_list|(
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPreviousItem
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|updateIndexes
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|im
operator|.
name|storeIndex
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|list
operator|.
name|setRoot
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|pos
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|insertFirst
parameter_list|(
name|IndexLinkedList
name|list
parameter_list|,
name|IndexItem
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexItem
name|root
init|=
name|list
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|IndexItem
name|prev
init|=
name|root
decl_stmt|;
name|IndexItem
name|next
init|=
name|list
operator|.
name|getNextEntry
argument_list|(
name|prev
argument_list|)
decl_stmt|;
name|prev
operator|.
name|setNextItem
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|updateIndexes
argument_list|(
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPreviousItem
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|updateIndexes
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|im
operator|.
name|storeIndex
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|list
operator|.
name|addFirst
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|remove
parameter_list|(
name|IndexLinkedList
name|list
parameter_list|,
name|IndexItem
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexItem
name|root
init|=
name|list
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|IndexItem
name|prev
init|=
name|list
operator|.
name|getPrevEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|IndexItem
name|next
init|=
name|list
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|list
operator|.
name|remove
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|prev
operator|=
name|prev
operator|==
literal|null
condition|?
name|root
else|:
name|prev
expr_stmt|;
name|next
operator|=
operator|(
name|next
operator|==
literal|null
operator|||
operator|!
name|next
operator|.
name|equals
argument_list|(
name|root
argument_list|)
operator|)
condition|?
name|next
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|prev
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|im
operator|.
name|updateIndexes
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prev
operator|.
name|setNextItem
argument_list|(
name|Item
operator|.
name|POSITION_NOT_SET
argument_list|)
expr_stmt|;
block|}
name|im
operator|.
name|updateIndexes
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

