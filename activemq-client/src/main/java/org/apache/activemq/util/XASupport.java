begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMENDRSCAN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMFAIL
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMJOIN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMNOFLAGS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMONEPHASE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMRESUME
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMSTARTRSCAN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMSUCCESS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMSUSPEND
import|;
end_import

begin_class
specifier|public
class|class
name|XASupport
block|{
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
if|if
condition|(
name|flags
operator|==
name|TMNOFLAGS
condition|)
block|{
return|return
literal|"TMNOFLAGS"
return|;
block|}
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMENDRSCAN
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMENDRSCAN"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMFAIL
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMFAIL"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMJOIN
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMJOIN"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMONEPHASE
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMONEPHASE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMRESUME
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMRESUME"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMSTARTRSCAN
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMSTARTRSCAN"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMSUCCESS
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMSUCCESS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFlag
argument_list|(
name|flags
argument_list|,
name|TMSUSPEND
argument_list|)
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
literal|"TMSUSPEND"
argument_list|)
expr_stmt|;
block|}
name|int
name|nonStandardFlags
init|=
name|flags
operator|&
operator|~
name|TMENDRSCAN
operator|&
operator|~
name|TMFAIL
operator|&
operator|~
name|TMJOIN
operator|&
operator|~
name|TMONEPHASE
operator|&
operator|~
name|TMRESUME
operator|&
operator|~
name|TMSTARTRSCAN
operator|&
operator|~
name|TMSUCCESS
operator|&
operator|~
name|TMSUSPEND
decl_stmt|;
if|if
condition|(
name|nonStandardFlags
operator|!=
literal|0
condition|)
block|{
name|add
argument_list|(
name|result
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"0x%08x"
argument_list|,
name|nonStandardFlags
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasFlag
parameter_list|(
name|int
name|flags
parameter_list|,
name|int
name|flag
parameter_list|)
block|{
return|return
operator|(
name|flags
operator|&
name|flag
operator|)
operator|==
name|flag
return|;
block|}
specifier|private
specifier|static
name|void
name|add
parameter_list|(
name|StringBuilder
name|result
parameter_list|,
name|String
name|string
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" | "
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

