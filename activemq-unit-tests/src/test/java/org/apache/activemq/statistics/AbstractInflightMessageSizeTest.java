begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|statistics
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * This test shows Inflight Message sizes are correct for various acknowledgement modes.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractInflightMessageSizeTest
block|{
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|String
name|brokerUrlString
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|protected
name|javax
operator|.
name|jms
operator|.
name|Destination
name|dest
decl_stmt|;
specifier|protected
name|Destination
name|amqDestination
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|int
name|prefetch
init|=
literal|100
decl_stmt|;
specifier|final
specifier|protected
name|int
name|ackType
decl_stmt|;
specifier|final
specifier|protected
name|boolean
name|optimizeAcknowledge
decl_stmt|;
specifier|final
specifier|protected
name|String
name|destName
init|=
literal|"testDest"
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|ActiveMQSession
operator|.
name|SESSION_TRANSACTED
block|,
literal|true
block|}
block|,
block|{
name|ActiveMQSession
operator|.
name|AUTO_ACKNOWLEDGE
block|,
literal|true
block|}
block|,
block|{
name|ActiveMQSession
operator|.
name|INDIVIDUAL_ACKNOWLEDGE
block|,
literal|true
block|}
block|,
block|{
name|ActiveMQSession
operator|.
name|CLIENT_ACKNOWLEDGE
block|,
literal|true
block|}
block|,
block|{
name|ActiveMQSession
operator|.
name|SESSION_TRANSACTED
block|,
literal|false
block|}
block|,
block|{
name|ActiveMQSession
operator|.
name|AUTO_ACKNOWLEDGE
block|,
literal|false
block|}
block|,
block|{
name|ActiveMQSession
operator|.
name|INDIVIDUAL_ACKNOWLEDGE
block|,
literal|false
block|}
block|,
block|{
name|ActiveMQSession
operator|.
name|CLIENT_ACKNOWLEDGE
block|,
literal|false
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|AbstractInflightMessageSizeTest
parameter_list|(
name|int
name|ackType
parameter_list|,
name|boolean
name|optimizeAcknowledge
parameter_list|)
block|{
name|this
operator|.
name|ackType
operator|=
name|ackType
expr_stmt|;
name|this
operator|.
name|optimizeAcknowledge
operator|=
name|optimizeAcknowledge
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TransportConnector
name|tcp
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//used to test optimizeAcknowledge works
name|String
name|optAckString
init|=
name|optimizeAcknowledge
condition|?
literal|"?jms.optimizeAcknowledge=true&jms.optimizedAckScheduledAckInterval=2000"
else|:
literal|""
decl_stmt|;
name|brokerUrlString
operator|=
name|tcp
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
name|optAckString
expr_stmt|;
name|connection
operator|=
name|createConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"client1"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
name|ackType
operator|==
name|ActiveMQSession
operator|.
name|SESSION_TRANSACTED
argument_list|,
name|ackType
argument_list|)
expr_stmt|;
name|dest
operator|=
name|getDestination
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|getMessageConsumer
argument_list|()
expr_stmt|;
name|amqDestination
operator|=
name|TestSupport
operator|.
name|getDestination
argument_list|(
name|brokerService
argument_list|,
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUrlString
argument_list|)
decl_stmt|;
name|ActiveMQPrefetchPolicy
name|prefetchPolicy
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|prefetchPolicy
operator|.
name|setTopicPrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|prefetchPolicy
operator|.
name|setQueuePrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|prefetchPolicy
operator|.
name|setOptimizeDurableTopicPrefetch
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPrefetchPolicy
argument_list|(
name|prefetchPolicy
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests that inflight message size goes up and comes back down to 0 after      * messages are consumed      *      * @throws javax.jms.JMSException      * @throws InterruptedException      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
specifier|public
name|void
name|testInflightMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|size
init|=
name|sendMessages
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Inflight message size should be greater than the content length sent"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|>
name|size
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|receiveMessages
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Inflight message size should be 0"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the in flight message size won't rise after prefetch is filled      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
specifier|public
name|void
name|testInflightMessageSizePrefetchFilled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|size
init|=
name|sendMessages
argument_list|(
name|prefetch
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Inflight message size should be greater than content length"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|>
name|size
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|inFlightSize
init|=
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
decl_stmt|;
name|sendMessages
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|//Prefetch has been filled, so the size should not change with 10 more messages
name|assertEquals
argument_list|(
literal|"Inflight message size should not change"
argument_list|,
name|inFlightSize
argument_list|,
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
argument_list|)
expr_stmt|;
name|receiveMessages
argument_list|(
name|prefetch
operator|+
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Inflight message size should be 0"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the in flight message size will still rise if prefetch is not filled      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
specifier|public
name|void
name|testInflightMessageSizePrefetchNotFilled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|size
init|=
name|sendMessages
argument_list|(
name|prefetch
operator|-
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Inflight message size should be greater than content length"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|>
name|size
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|//capture the inflight size and send 10 more messages
specifier|final
name|long
name|inFlightSize
init|=
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
decl_stmt|;
name|sendMessages
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|//Prefetch has NOT been filled, so the size should rise with 10 more messages
name|assertTrue
argument_list|(
literal|"Inflight message size should be greater than previous inlight size"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|>
name|inFlightSize
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|receiveMessages
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Inflight message size should be 0"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests that inflight message size goes up and doesn't go down if receive is rolledback      *      * @throws javax.jms.JMSException      * @throws InterruptedException      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|15000
argument_list|)
specifier|public
name|void
name|testInflightMessageSizeRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|ackType
operator|==
name|ActiveMQSession
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
specifier|final
name|long
name|size
init|=
name|sendMessages
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Inflight message size should be greater than the content length sent"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
operator|>
name|size
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|inFlightSize
init|=
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|consumer
operator|.
name|receive
argument_list|()
expr_stmt|;
block|}
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Inflight message size should not change on rollback"
argument_list|,
name|inFlightSize
argument_list|,
name|getSubscription
argument_list|()
operator|.
name|getInFlightMessageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method will generate random sized messages up to 150000 bytes.      *      * @param count      * @throws JMSException      */
specifier|protected
name|long
name|sendMessages
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|150000
argument_list|)
decl_stmt|;
name|totalSize
operator|+=
name|size
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|size
operator|>
literal|0
condition|?
name|size
else|:
literal|1
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|BytesMessage
name|bytesMessage
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|bytesMessage
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|bytesMessage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
name|totalSize
return|;
block|}
specifier|protected
name|void
name|receiveMessages
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|JMSException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|javax
operator|.
name|jms
operator|.
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
if|if
condition|(
name|ackType
operator|==
name|ActiveMQSession
operator|.
name|SESSION_TRANSACTED
condition|)
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ackType
operator|!=
name|ActiveMQSession
operator|.
name|AUTO_ACKNOWLEDGE
condition|)
block|{
name|m
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|Subscription
name|getSubscription
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|ActiveMQDestination
name|getActiveMQDestination
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|MessageConsumer
name|getMessageConsumer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
specifier|protected
specifier|abstract
name|javax
operator|.
name|jms
operator|.
name|Destination
name|getDestination
parameter_list|()
throws|throws
name|JMSException
function_decl|;
block|}
end_class

end_unit

