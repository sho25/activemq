begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ServerSessionPool
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|RedeliveryPolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_class
specifier|public
class|class
name|RedeliveryPolicyTest
extends|extends
name|JmsTestSupport
block|{
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|RedeliveryPolicyTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNext
parameter_list|()
throws|throws
name|Exception
block|{
name|RedeliveryPolicy
name|policy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setBackOffMultiplier
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|long
name|delay
init|=
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|delay
operator|=
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
operator|*
literal|2
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|delay
operator|=
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
operator|*
literal|4
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|delay
operator|=
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetNextWithInitialDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|RedeliveryPolicy
name|policy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|long
name|delay
init|=
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|delay
operator|=
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|delay
operator|=
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testExponentialRedeliveryPolicyDelaysDeliveryOnRollback
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setBackOffMultiplier
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// No delay on first rollback..
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// Show subsequent re-delivery delay is incrementing.
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|700
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// Show re-delivery delay is incrementing exponentially
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|700
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testNornalRedeliveryPolicyDelaysDeliveryOnRollback
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// No delay on first rollback..
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// Show subsequent re-delivery delay is incrementing.
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|700
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// The message gets redelivered after 500 ms every time since
comment|// we are not using exponential backoff.
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|700
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testDLQHandling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|dlqConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// The last rollback should cause the 1st message to get sent to the DLQ
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// We should be able to get the message off the DLQ now.
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|dlqConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cause
init|=
name|m
operator|.
name|getStringProperty
argument_list|(
name|ActiveMQMessage
operator|.
name|DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cause exception has policy ref"
argument_list|,
name|cause
operator|.
name|contains
argument_list|(
literal|"RedeliveryPolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testInfiniteMaximumNumberOfRedeliveries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//  let's set the maximum redeliveries to no maximum (ie. infinite)
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|//we should be able to get the 1st message redelivered until a session.commit is called
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testMaximumRedeliveryDelay
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setBackOffMultiplier
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
comment|// we should be able to get the 1st message redelivered until a session.commit is called
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|getNextRedeliveryDelay
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|==
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testZeroMaximumNumberOfRedeliveries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//let's set the maximum redeliveries to 0
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|//the 1st  message should not be redelivered since maximumRedeliveries is set to 0
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRepeatedRedeliveryReceiveNoCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|dlqSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|dlqSession
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|dlqSession
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|dlqSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|MessageConsumer
name|dlqConsumer
init|=
name|dlqSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxRedeliveries
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxRedeliveries
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
name|maxRedeliveries
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|m
init|=
operator|(
operator|(
name|ActiveMQTextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|i
operator|<=
name|maxRedeliveries
condition|)
block|{
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|m
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
literal|"null on exceeding redelivery count"
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connections
operator|.
name|remove
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
comment|// We should be able to get the message off the DLQ now.
name|TextMessage
name|m
init|=
operator|(
name|TextMessage
operator|)
name|dlqConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Got message from DLQ"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cause
init|=
name|m
operator|.
name|getStringProperty
argument_list|(
name|ActiveMQMessage
operator|.
name|DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cause exception has policy ref"
argument_list|,
name|cause
operator|.
name|contains
argument_list|(
literal|"RedeliveryPolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|dlqSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRepeatedRedeliveryOnMessageNoCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|dlqSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|dlqSession
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|dlqSession
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|dlqSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|MessageConsumer
name|dlqConsumer
init|=
name|dlqSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxRedeliveries
init|=
literal|4
decl_stmt|;
specifier|final
name|AtomicInteger
name|receivedCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxRedeliveries
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
name|maxRedeliveries
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|ActiveMQTextMessage
name|m
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|receivedCount
operator|.
name|get
argument_list|()
argument_list|,
name|m
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
name|receivedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
name|maxRedeliveries
condition|)
block|{
name|assertTrue
argument_list|(
literal|"listener done"
argument_list|,
name|done
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// final redlivery gets poisoned before dispatch
name|assertFalse
argument_list|(
literal|"listener done"
argument_list|,
name|done
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connections
operator|.
name|remove
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
comment|// We should be able to get the message off the DLQ now.
name|TextMessage
name|m
init|=
operator|(
name|TextMessage
operator|)
name|dlqConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Got message from DLQ"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cause
init|=
name|m
operator|.
name|getStringProperty
argument_list|(
name|ActiveMQMessage
operator|.
name|DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cause exception has policy ref"
argument_list|,
name|cause
operator|.
name|contains
argument_list|(
literal|"RedeliveryPolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|dlqSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRepeatedRedeliveryServerSessionNoCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|dlqSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|dlqSession
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|dlqSession
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|dlqSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|MessageConsumer
name|dlqConsumer
init|=
name|dlqSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxRedeliveries
init|=
literal|4
decl_stmt|;
specifier|final
name|AtomicInteger
name|receivedCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|maxRedeliveries
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
name|maxRedeliveries
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQSession
name|session
init|=
operator|(
name|ActiveMQSession
operator|)
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|session
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|ActiveMQTextMessage
name|m
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|receivedCount
operator|.
name|get
argument_list|()
argument_list|,
name|m
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
name|receivedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|ignored
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|createConnectionConsumer
argument_list|(
name|destination
argument_list|,
literal|null
argument_list|,
operator|new
name|ServerSessionPool
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServerSession
name|getServerSession
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
operator|new
name|ServerSession
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Session
name|getSession
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|session
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
block|{                                 }
block|}
return|;
block|}
block|}
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|done
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<=
name|maxRedeliveries
condition|)
block|{
name|assertTrue
argument_list|(
literal|"listener done @"
operator|+
name|i
argument_list|,
name|done
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// final redlivery gets poisoned before dispatch
name|assertFalse
argument_list|(
literal|"listener not done @"
operator|+
name|i
argument_list|,
name|done
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connections
operator|.
name|remove
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
comment|// We should be able to get the message off the DLQ now.
name|TextMessage
name|m
init|=
operator|(
name|TextMessage
operator|)
name|dlqConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Got message from DLQ"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|cause
init|=
name|m
operator|.
name|getStringProperty
argument_list|(
name|ActiveMQMessage
operator|.
name|DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"cause exception has policy ref"
argument_list|,
name|cause
operator|.
name|contains
argument_list|(
literal|"RedeliveryPolicy"
argument_list|)
argument_list|)
expr_stmt|;
name|dlqSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testInitialRedeliveryDelayZero
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testInitialRedeliveryDelayOne
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRedeliveryDelayOne
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Receive a message with the JMS API
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"first immediate redelivery"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"second delivery delayed: "
operator|+
name|m
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRedeliveryPolicyPerDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|RedeliveryPolicy
name|queuePolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|queuePolicy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|queuePolicy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|queuePolicy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|queuePolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|RedeliveryPolicy
name|topicPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|topicPolicy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|topicPolicy
operator|.
name|setRedeliveryDelay
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|topicPolicy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|topicPolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Receive a message with the JMS API
name|RedeliveryPolicyMap
name|map
init|=
name|connection
operator|.
name|getRedeliveryPolicyMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|topicPolicy
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|queuePolicy
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|MessageConsumer
name|queueConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|topicConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
comment|// Send the messages
name|producer
operator|.
name|send
argument_list|(
name|queue
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|queue
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"1st"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"2nd"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|TextMessage
name|m
decl_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"first immediate redelivery"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"first immediate redelivery"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"second delivery delayed: "
operator|+
name|m
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"second delivery delayed: "
operator|+
name|m
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// No third attempt for the Queue consumer
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1st"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|queueConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|TextMessage
operator|)
name|topicConsumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2nd"
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

