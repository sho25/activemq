begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|VirtualTopicConcurrentSendDeleteTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VirtualTopicConcurrentSendDeleteTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createBroker
parameter_list|(
name|boolean
name|delete
parameter_list|)
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
comment|//brokerService.setPersistent(false);
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|setConcurrentStoreAndDispatchQueues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|activeMQConnectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
decl_stmt|;
name|activeMQConnectionFactory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|activeMQConnectionFactory
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ActiveMQPrefetchPolicy
name|zeroPrefetch
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|zeroPrefetch
operator|.
name|setAll
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|activeMQConnectionFactory
operator|.
name|setPrefetchPolicy
argument_list|(
name|zeroPrefetch
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
name|activeMQConnectionFactory
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsumerQueueDeleteOk
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numConnections
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|numDestinations
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numMessages
init|=
literal|4000
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numConnections
operator|*
literal|2
argument_list|)
decl_stmt|;
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.TEST"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// precreate dests to accentuate read access
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDestinations
condition|;
name|i
operator|++
control|)
block|{
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer."
operator|+
name|i
operator|+
literal|".VirtualTopic.TEST"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CountDownLatch
name|doneOne
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numConnections
argument_list|)
decl_stmt|;
name|Runnable
name|runnable
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|messagestoSend
init|=
literal|0
decl_stmt|;
name|Connection
name|connection1
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection1
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
do|do
block|{
name|producer
operator|.
name|send
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.TEST"
argument_list|)
argument_list|,
operator|new
name|ActiveMQMessage
argument_list|()
argument_list|)
expr_stmt|;
name|messagestoSend
operator|++
expr_stmt|;
if|if
condition|(
name|messagestoSend
operator|==
literal|1000
condition|)
block|{
name|doneOne
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|messagestoSend
operator|<
name|numMessages
condition|)
do|;
name|connection1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numConnections
condition|;
name|i
operator|++
control|)
block|{
name|executorService
operator|.
name|execute
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
comment|// delete all of the consumer queues
specifier|final
name|String
name|prefix
init|=
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
decl_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doneOne
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// delete in reverse to clash with send in forward direction
for|for
control|(
name|int
name|i
init|=
name|numDestinations
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|ActiveMQQueue
name|toDelete
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer."
operator|+
name|i
operator|+
literal|".VirtualTopic.TEST"
argument_list|)
decl_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
name|prefix
operator|+
name|toDelete
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|brokerService
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Q len: "
operator|+
name|toDelete
operator|.
name|getQueueName
argument_list|()
operator|+
literal|", "
operator|+
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|removeQueue
argument_list|(
name|toDelete
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Enqueues: "
operator|+
operator|(
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
operator|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numQueues
init|=
operator|(
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
operator|)
operator|.
name|getQueueRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Destinations: "
operator|+
name|numQueues
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no queues left"
argument_list|,
literal|0
argument_list|,
name|numQueues
argument_list|)
expr_stmt|;
comment|// the bug
name|assertEquals
argument_list|(
literal|"no queues, just one topic, in kahadb"
argument_list|,
literal|1
argument_list|,
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|getDestinations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

