begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
operator|.
name|BrokerFactoryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Simple BrokerFactorySPI which using the brokerURI to extract the configuration   * parameters for the broker service.  This directly configures the pojo model  * so there is no dependency on spring for configuration.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|DefaultBrokerFactory
implements|implements
name|BrokerFactoryHandler
block|{
specifier|public
name|BrokerService
name|createBroker
parameter_list|(
name|URI
name|brokerURI
parameter_list|)
throws|throws
name|Exception
block|{
name|CompositeData
name|compositeData
init|=
name|URISupport
operator|.
name|parseComposite
argument_list|(
name|brokerURI
argument_list|)
decl_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|(
name|compositeData
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|brokerService
argument_list|,
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|compositeData
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
name|brokerService
operator|.
name|setBrokerName
argument_list|(
name|compositeData
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|URI
index|[]
name|components
init|=
name|compositeData
operator|.
name|getComponents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|components
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"network"
operator|.
name|equals
argument_list|(
name|components
index|[
name|i
index|]
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|brokerService
operator|.
name|addNetworkConnector
argument_list|(
name|components
index|[
name|i
index|]
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"proxy"
operator|.
name|equals
argument_list|(
name|components
index|[
name|i
index|]
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|brokerService
operator|.
name|addProxyConnector
argument_list|(
name|components
index|[
name|i
index|]
operator|.
name|getSchemeSpecificPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|brokerService
operator|.
name|addConnector
argument_list|(
name|components
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO we want folks to be able to add other connectors and start the broker afterwards
comment|//brokerService.start();
return|return
name|brokerService
return|;
block|}
block|}
end_class

end_unit

