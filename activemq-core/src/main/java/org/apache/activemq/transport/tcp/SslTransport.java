begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLPeerUnverifiedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_comment
comment|/**  * A Transport class that uses SSL and client-side certificate authentication.  *  * Client-side certificate authentication must be enabled through the constructor.  * By default, this class will have the same client authentication behavior as the socket it is passed.  * This class will set ConnectionInfo's transportContext to the SSL certificates of the client.  * NOTE: Accessor method for needClientAuth was not provided on purpose. This is because needClientAuth's value must be  *      set before the socket is connected. Otherwise, unexpected situations may occur.  *   */
end_comment

begin_class
specifier|public
class|class
name|SslTransport
extends|extends
name|TcpTransport
block|{
comment|/**      * Connect to a remote node such as a Broker.      *       * @param wireFormat The WireFormat to be used.      * @param socketFactory The socket factory to be used. Forcing SSLSockets      *      for obvious reasons.      * @param remoteLocation The remote location.      * @param localLocation The local location.      * @param needClientAuth If set to true, the underlying socket will need      *      client certificate authentication.      * @throws UnknownHostException If TcpTransport throws.      * @throws IOException If TcpTransport throws.      */
specifier|public
name|SslTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|SSLSocketFactory
name|socketFactory
parameter_list|,
name|URI
name|remoteLocation
parameter_list|,
name|URI
name|localLocation
parameter_list|,
name|boolean
name|needClientAuth
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socketFactory
argument_list|,
name|remoteLocation
argument_list|,
name|localLocation
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|socket
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|SSLSocket
operator|)
name|this
operator|.
name|socket
operator|)
operator|.
name|setNeedClientAuth
argument_list|(
name|needClientAuth
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Initialize from a ServerSocket.      *       * No access to needClientAuth is given since it is already set within the      *      provided socket.      *       * @param wireFormat The WireFormat to be used.      * @param socket The Socket to be used. Forcing SSL.      * @throws IOException If TcpTransport throws.      */
specifier|public
name|SslTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|SSLSocket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overriding in order to add the client's certificates to ConnectionInfo Commmands.       *       * @param command The Command coming in.      */
specifier|public
name|void
name|doConsume
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
comment|// The instanceof can be avoided, but that would require modifying the
comment|//      Command clas tree and that would require too much effort right
comment|//      now.
if|if
condition|(
name|command
operator|instanceof
name|ConnectionInfo
condition|)
block|{
name|ConnectionInfo
name|connectionInfo
init|=
operator|(
name|ConnectionInfo
operator|)
name|command
decl_stmt|;
name|SSLSocket
name|sslSocket
init|=
operator|(
name|SSLSocket
operator|)
name|this
operator|.
name|socket
decl_stmt|;
name|SSLSession
name|sslSession
init|=
name|sslSocket
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|X509Certificate
index|[]
name|clientCertChain
decl_stmt|;
try|try
block|{
name|clientCertChain
operator|=
operator|(
name|X509Certificate
index|[]
operator|)
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLPeerUnverifiedException
name|e
parameter_list|)
block|{
name|clientCertChain
operator|=
literal|null
expr_stmt|;
block|}
name|connectionInfo
operator|.
name|setTransportContext
argument_list|(
name|clientCertChain
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doConsume
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return pretty print of 'this'      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ssl://"
operator|+
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|+
literal|":"
operator|+
name|socket
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

