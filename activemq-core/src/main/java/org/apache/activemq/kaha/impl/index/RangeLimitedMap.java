begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|RuntimeStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|DataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A Map of keys and IndexItems - which is limited in size  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|RangeLimitedMap
implements|implements
name|Map
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RangeLimitedMap
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LinkedHashMap
name|internalMap
decl_stmt|;
specifier|private
name|IndexLinkedList
name|indexList
decl_stmt|;
specifier|private
name|DataManager
name|keyDataManager
decl_stmt|;
specifier|private
name|Marshaller
name|keyMarshaller
decl_stmt|;
specifier|private
name|int
name|maxRange
init|=
literal|1000
decl_stmt|;
specifier|private
name|IndexItem
name|rangeStart
decl_stmt|;
specifier|private
name|IndexItem
name|rangeStop
decl_stmt|;
comment|/**      * @param indexList      * @param keyDataManager      * @param keyMarshaller      */
specifier|public
name|RangeLimitedMap
parameter_list|(
name|IndexLinkedList
name|indexList
parameter_list|,
name|DataManager
name|keyDataManager
parameter_list|,
name|Marshaller
name|keyMarshaller
parameter_list|)
block|{
name|this
operator|.
name|indexList
operator|=
name|indexList
expr_stmt|;
name|this
operator|.
name|keyDataManager
operator|=
name|keyDataManager
expr_stmt|;
name|this
operator|.
name|keyMarshaller
operator|=
name|keyMarshaller
expr_stmt|;
name|this
operator|.
name|internalMap
operator|=
operator|new
name|LinkedHashMap
argument_list|()
block|{
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
name|eldest
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|>
name|maxRange
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|rangeStart
operator|!=
literal|null
operator|&&
name|rangeStart
operator|.
name|equals
argument_list|(
name|eldest
argument_list|)
condition|)
block|{
name|rangeStart
operator|=
literal|null
expr_stmt|;
name|Iterator
name|i
init|=
name|this
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//eldest
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|rangeStart
operator|=
operator|(
name|IndexItem
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/**      * @param key      * @return      * @see java.util.Map#containsKey(java.lang.Object)      */
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * @param value      * @return      * @see java.util.Map#containsValue(java.lang.Object)      */
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
comment|/**      * @return      * @see java.util.Map#entrySet()      */
specifier|public
name|Set
name|entrySet
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
comment|/**      * @param key      * @return the value associated with the key      * @see java.util.Map#get(java.lang.Object)      */
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|Object
name|result
init|=
name|internalMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// page through the indexes till we get a hit
comment|// if rangeStart doesn't equal the the first entry
comment|// start from there
name|IndexItem
name|first
init|=
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|IndexItem
name|last
init|=
name|indexList
operator|.
name|getLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|rangeStart
operator|!=
literal|null
operator|&&
operator|(
name|first
operator|==
literal|null
operator|||
name|first
operator|.
name|equals
argument_list|(
name|rangeStart
argument_list|)
operator|)
condition|)
block|{
name|rangeStart
operator|=
literal|null
expr_stmt|;
name|rangeStop
operator|=
name|first
expr_stmt|;
block|}
do|do
block|{
name|pageIntoMap
argument_list|(
name|rangeStop
argument_list|)
expr_stmt|;
name|result
operator|=
name|internalMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|result
operator|==
literal|null
operator|||
name|rangeStop
operator|!=
literal|null
operator|||
name|rangeStop
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|)
do|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return      * @see java.util.Map#isEmpty()      */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|indexList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * @return      * @see java.util.Map#keySet()      */
specifier|public
name|Set
name|keySet
parameter_list|()
block|{
return|return
operator|new
name|RangeLimitedMapKeySet
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * @param key      * @param value      * @return      * @see java.util.Map#put(java.lang.Object, java.lang.Object)      */
specifier|public
name|Object
name|put
parameter_list|(
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
comment|//we desire objects to be cached for FIFO
if|if
condition|(
name|internalMap
operator|.
name|size
argument_list|()
operator|<=
name|maxRange
condition|)
block|{
name|rangeStop
operator|=
operator|(
name|IndexItem
operator|)
name|value
expr_stmt|;
name|internalMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * @param t      * @see java.util.Map#putAll(java.util.Map)      */
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
name|t
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|t
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param key      * @return      * @see java.util.Map#remove(java.lang.Object)      */
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|IndexItem
name|item
init|=
operator|(
name|IndexItem
operator|)
name|internalMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rangeStart
operator|!=
literal|null
operator|&&
name|item
operator|.
name|equals
argument_list|(
name|rangeStart
argument_list|)
condition|)
block|{
name|rangeStart
operator|=
literal|null
expr_stmt|;
name|Iterator
name|i
init|=
name|internalMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
comment|//eldest
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|rangeStart
operator|=
operator|(
name|IndexItem
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rangeStop
operator|!=
literal|null
operator|&&
name|item
operator|.
name|equals
argument_list|(
name|rangeStop
argument_list|)
condition|)
block|{
name|rangeStop
operator|=
name|indexList
operator|.
name|getPrevEntry
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|item
return|;
block|}
comment|/**      * @return      * @see java.util.Map#size()      */
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|indexList
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * @return      * @see java.util.Map#values()      */
specifier|public
name|Collection
name|values
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
comment|/**      * @return the maxRange      */
specifier|public
name|int
name|getMaxRange
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxRange
return|;
block|}
comment|/**      * @param maxRange the maxRange to set      */
specifier|public
name|void
name|setMaxRange
parameter_list|(
name|int
name|maxRange
parameter_list|)
block|{
name|this
operator|.
name|maxRange
operator|=
name|maxRange
expr_stmt|;
block|}
comment|/**      * fill the internalMap      *       * @param start      * @param numberOfItems      * @return the actual number of items paged into the internalMap      */
specifier|protected
name|int
name|pageIntoMap
parameter_list|(
name|IndexItem
name|start
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|internalMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rangeStart
operator|=
literal|null
expr_stmt|;
name|rangeStop
operator|=
literal|null
expr_stmt|;
name|IndexItem
name|item
init|=
name|start
operator|!=
literal|null
condition|?
name|start
else|:
name|indexList
operator|.
name|getFirst
argument_list|()
decl_stmt|;
while|while
condition|(
name|item
operator|!=
literal|null
operator|&&
name|count
operator|<
name|maxRange
condition|)
block|{
if|if
condition|(
name|rangeStart
operator|==
literal|null
condition|)
block|{
name|rangeStart
operator|=
name|item
expr_stmt|;
block|}
name|rangeStop
operator|=
name|item
expr_stmt|;
name|Object
name|key
init|=
name|getKey
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|put
argument_list|(
name|key
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|item
operator|=
name|getNextEntry
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**      *       * @see java.util.Map#clear()      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|internalMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|indexList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rangeStart
operator|=
literal|null
expr_stmt|;
name|rangeStop
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * @return the indexList      */
specifier|protected
name|IndexLinkedList
name|getIndexList
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexList
return|;
block|}
specifier|protected
name|Object
name|getKey
parameter_list|(
name|IndexItem
name|item
parameter_list|)
block|{
name|StoreLocation
name|data
init|=
name|item
operator|.
name|getKeyDataItem
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|keyDataManager
operator|.
name|readItem
argument_list|(
name|keyMarshaller
argument_list|,
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to get key for "
operator|+
name|item
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|IndexItem
name|getNextEntry
parameter_list|(
name|IndexItem
name|item
parameter_list|)
block|{
return|return
name|indexList
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
return|;
block|}
block|}
end_class

end_unit

