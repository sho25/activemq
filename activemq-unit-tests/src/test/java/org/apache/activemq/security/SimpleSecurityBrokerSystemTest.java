begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_comment
comment|/**  * Tests that the broker allows/fails access to destinations based on the  * security policy installed on the broker.  *  *  */
end_comment

begin_class
specifier|public
class|class
name|SimpleSecurityBrokerSystemTest
extends|extends
name|SecurityTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleSecurityBrokerSystemTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|GUESTS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"guests"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|USERS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|ADMINS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"admins"
argument_list|)
decl_stmt|;
specifier|static
name|Principal
name|WILDCARD
decl_stmt|;
static|static
block|{
try|try
block|{
name|WILDCARD
operator|=
operator|(
name|Principal
operator|)
name|DefaultAuthorizationMap
operator|.
name|createGroupPrincipal
argument_list|(
literal|"*"
argument_list|,
name|GroupPrincipal
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to make wildcard principal"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|BrokerPlugin
name|authorizationPlugin
decl_stmt|;
specifier|public
name|BrokerPlugin
name|authenticationPlugin
decl_stmt|;
static|static
block|{
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.security.auth.login.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|URL
name|resource
init|=
name|SimpleSecurityBrokerSystemTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"login.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|resource
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.auth.login.config"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Path to login config: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|SimpleSecurityBrokerSystemTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws javax.jms.JMSException      */
specifier|public
name|void
name|testPopulateJMSXUserID
parameter_list|()
throws|throws
name|Exception
block|{
name|destination
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|sendMessages
argument_list|(
name|session
argument_list|,
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// make sure that the JMSXUserID is exposed over JMX
name|MBeanServer
name|mbs
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|CompositeData
index|[]
name|browse
init|=
operator|(
name|CompositeData
index|[]
operator|)
name|mbs
operator|.
name|invoke
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
argument_list|,
literal|"browse"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|browse
index|[
literal|0
index|]
operator|.
name|get
argument_list|(
literal|"JMSXUserID"
argument_list|)
argument_list|)
expr_stmt|;
comment|// And also via JMS.
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|m
operator|.
name|propertyExists
argument_list|(
literal|"JMSXUserID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|m
operator|.
name|getStringProperty
argument_list|(
literal|"JMSXUserID"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|AuthorizationMap
name|createAuthorizationMap
parameter_list|()
block|{
name|DestinationMap
name|readAccess
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|GUESTS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|GUESTS
argument_list|)
expr_stmt|;
name|DestinationMap
name|writeAccess
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|GUESTS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|GUESTS
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|DestinationMap
name|adminAccess
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|GUESTS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|ADMINS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|USERS
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|GUESTS
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleAuthorizationMap
argument_list|(
name|writeAccess
argument_list|,
name|readAccess
argument_list|,
name|adminAccess
argument_list|)
return|;
block|}
specifier|static
class|class
name|SimpleAuthenticationFactory
implements|implements
name|BrokerPlugin
block|{
specifier|public
name|Broker
name|installPlugin
parameter_list|(
name|Broker
name|broker
parameter_list|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|u
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"guest"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Principal
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
literal|"system"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Principal
index|[]
block|{
name|ADMINS
block|,
name|USERS
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Principal
index|[]
block|{
name|USERS
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
literal|"guest"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Principal
index|[]
block|{
name|GUESTS
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleAuthenticationBroker
argument_list|(
name|broker
argument_list|,
name|u
argument_list|,
name|groups
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SimpleAuthenticationBroker"
return|;
block|}
block|}
comment|/**      * @see {@link CombinationTestSupport}      */
specifier|public
name|void
name|initCombos
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"authorizationPlugin"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|AuthorizationPlugin
argument_list|(
name|createAuthorizationMap
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"authenticationPlugin"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|SimpleAuthenticationFactory
argument_list|()
block|,
operator|new
name|JaasAuthenticationPlugin
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|super
operator|.
name|createBroker
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setPopulateJMSXUserID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseAuthenticatedPrincipalForJMSXUserID
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
name|authorizationPlugin
block|,
name|authenticationPlugin
block|}
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
end_class

end_unit

