begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Used to evaluate an XPath Expression in a JMS selector.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XPathExpression
implements|implements
name|BooleanExpression
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|XPathExpression
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|EVALUATOR_SYSTEM_PROPERTY
init|=
literal|"org.apache.activemq.XPathEvaluatorClassName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_EVALUATOR_CLASS_NAME
init|=
name|XalanXPathEvaluator
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Constructor
name|EVALUATOR_CONSTRUCTOR
decl_stmt|;
static|static
block|{
name|String
name|cn
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|EVALUATOR_SYSTEM_PROPERTY
argument_list|,
name|DEFAULT_EVALUATOR_CLASS_NAME
argument_list|)
decl_stmt|;
name|Constructor
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|m
operator|=
name|getXPathEvaluatorConstructor
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid "
operator|+
name|XPathEvaluator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|" implementation: "
operator|+
name|cn
operator|+
literal|", reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cn
operator|=
name|DEFAULT_EVALUATOR_CLASS_NAME
expr_stmt|;
try|try
block|{
name|m
operator|=
name|getXPathEvaluatorConstructor
argument_list|(
name|cn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e2
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Default XPath evaluator could not be loaded"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|EVALUATOR_CONSTRUCTOR
operator|=
name|m
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Constructor
name|getXPathEvaluatorConstructor
parameter_list|(
name|String
name|cn
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|SecurityException
throws|,
name|NoSuchMethodException
block|{
name|Class
name|c
init|=
name|XPathExpression
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|cn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|XPathEvaluator
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ClassCastException
argument_list|(
literal|""
operator|+
name|c
operator|+
literal|" is not an instance of "
operator|+
name|XPathEvaluator
operator|.
name|class
argument_list|)
throw|;
block|}
return|return
name|c
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|String
name|xpath
decl_stmt|;
specifier|private
specifier|final
name|XPathEvaluator
name|evaluator
decl_stmt|;
specifier|static
specifier|public
interface|interface
name|XPathEvaluator
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
function_decl|;
block|}
name|XPathExpression
parameter_list|(
name|String
name|xpath
parameter_list|)
block|{
name|this
operator|.
name|xpath
operator|=
name|xpath
expr_stmt|;
name|this
operator|.
name|evaluator
operator|=
name|createEvaluator
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XPathEvaluator
name|createEvaluator
parameter_list|(
name|String
name|xpath2
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|XPathEvaluator
operator|)
name|EVALUATOR_CONSTRUCTOR
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|xpath
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid XPath Expression: "
operator|+
name|xpath
operator|+
literal|" reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid XPath Expression: "
operator|+
name|xpath
operator|+
literal|" reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|evaluate
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|message
operator|.
name|isDropped
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|evaluator
operator|.
name|evaluate
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"XPATH "
operator|+
name|ConstantExpression
operator|.
name|encodeString
argument_list|(
name|xpath
argument_list|)
return|;
block|}
comment|/**      * @param message      * @return true if the expression evaluates to Boolean.TRUE.      * @throws JMSException      */
specifier|public
name|boolean
name|matches
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|object
init|=
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|object
operator|!=
literal|null
operator|&&
name|object
operator|==
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
end_class

end_unit

