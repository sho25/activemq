begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_comment
comment|/**  * Factory for network bridges  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|NetworkBridgeFactory
block|{
specifier|private
name|NetworkBridgeFactory
parameter_list|()
block|{     }
comment|/**      * Create a network bridge      *       * @param config      * @param localTransport      * @param remoteTransport      * @return the NetworkBridge      */
specifier|public
specifier|static
name|DemandForwardingBridge
name|createBridge
parameter_list|(
name|NetworkBridgeConfiguration
name|config
parameter_list|,
name|Transport
name|localTransport
parameter_list|,
name|Transport
name|remoteTransport
parameter_list|)
block|{
return|return
name|createBridge
argument_list|(
name|config
argument_list|,
name|localTransport
argument_list|,
name|remoteTransport
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * create a network bridge      *       * @param configuration      * @param localTransport      * @param remoteTransport      * @param listener      * @return the NetworkBridge      */
specifier|public
specifier|static
name|DemandForwardingBridge
name|createBridge
parameter_list|(
name|NetworkBridgeConfiguration
name|configuration
parameter_list|,
name|Transport
name|localTransport
parameter_list|,
name|Transport
name|remoteTransport
parameter_list|,
specifier|final
name|NetworkBridgeListener
name|listener
parameter_list|)
block|{
name|DemandForwardingBridge
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configuration
operator|.
name|isConduitSubscriptions
argument_list|()
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|isDynamicOnly
argument_list|()
condition|)
block|{
name|result
operator|=
operator|new
name|ConduitBridge
argument_list|(
name|configuration
argument_list|,
name|localTransport
argument_list|,
name|remoteTransport
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|DurableConduitBridge
argument_list|(
name|configuration
argument_list|,
name|localTransport
argument_list|,
name|remoteTransport
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
operator|new
name|DemandForwardingBridge
argument_list|(
name|configuration
argument_list|,
name|localTransport
argument_list|,
name|remoteTransport
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setNetworkBridgeListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

