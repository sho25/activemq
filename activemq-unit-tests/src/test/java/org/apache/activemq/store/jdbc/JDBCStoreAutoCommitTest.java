begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|CallableStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Clob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|DatabaseMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|NClob
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLClientInfoException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLFeatureNotSupportedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLWarning
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLXML
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Savepoint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * to be compliant with JDBC spec; officially commit is not supposed to be  * called on a connection that uses autocommit.The oracle v12 driver does a  * check for autocommitSpecCompliance and it causes issues  *<p/>  * To test; wrap the datasource used by the broker and check for autocommit  * before delegating to real datasource. If commit is called on connection with  * autocommit, wrapper throws a SQLException.  */
end_comment

begin_class
specifier|public
class|class
name|JDBCStoreAutoCommitTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_NAME
init|=
literal|"AutoCommitTest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DEST
init|=
literal|"commitCheck"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MSG_TEXT
init|=
literal|"JDBCStoreAutoCommitTest TEST"
decl_stmt|;
comment|/**      * verify dropping and recreating tables      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testDeleteAllMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
comment|/**      * Send message and consume message, JMS session is not transacted      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testSendConsume
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|doSendConsume
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * send message and consume message, JMS session is transacted      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testSendConsumeTransacted
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|doSendConsume
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doSendConsume
parameter_list|(
name|boolean
name|transacted
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
operator|new
name|URI
argument_list|(
literal|"vm:"
operator|+
name|BROKER_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|c1
init|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c1
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
comment|// message send
name|Session
name|session1
init|=
name|c1
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|session1
operator|.
name|createProducer
argument_list|(
name|session1
operator|.
name|createQueue
argument_list|(
name|TEST_DEST
argument_list|)
argument_list|)
decl_stmt|;
name|TextMessage
name|textMessage
init|=
name|session1
operator|.
name|createTextMessage
argument_list|(
name|MSG_TEXT
argument_list|)
decl_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|transacted
condition|)
block|{
name|session1
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// consume
name|Session
name|session2
init|=
name|c1
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|messageConsumer
init|=
name|session2
operator|.
name|createConsumer
argument_list|(
name|session2
operator|.
name|createQueue
argument_list|(
name|TEST_DEST
argument_list|)
argument_list|)
decl_stmt|;
name|TextMessage
name|messageReceived
init|=
operator|(
name|TextMessage
operator|)
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"check message received"
argument_list|,
name|MSG_TEXT
argument_list|,
name|messageReceived
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|c1
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|BrokerService
name|createBrokerService
parameter_list|()
throws|throws
name|IOException
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|BROKER_NAME
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JDBCPersistenceAdapter
name|jdbc
init|=
operator|new
name|JDBCPersistenceAdapter
argument_list|()
decl_stmt|;
name|EmbeddedDataSource
name|embeddedDataSource
init|=
operator|new
name|EmbeddedDataSource
argument_list|()
decl_stmt|;
name|embeddedDataSource
operator|.
name|setDatabaseName
argument_list|(
literal|"derbyDb"
argument_list|)
expr_stmt|;
name|embeddedDataSource
operator|.
name|setCreateDatabase
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
name|javax
operator|.
name|sql
operator|.
name|DataSource
name|wrappedDataSource
init|=
operator|new
name|TestDataSource
argument_list|(
name|embeddedDataSource
argument_list|)
decl_stmt|;
name|jdbc
operator|.
name|setDataSource
argument_list|(
name|wrappedDataSource
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|jdbc
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|private
class|class
name|TestDataSource
implements|implements
name|javax
operator|.
name|sql
operator|.
name|DataSource
block|{
specifier|private
specifier|final
name|javax
operator|.
name|sql
operator|.
name|DataSource
name|realDataSource
decl_stmt|;
specifier|public
name|TestDataSource
parameter_list|(
name|javax
operator|.
name|sql
operator|.
name|DataSource
name|dataSource
parameter_list|)
block|{
name|realDataSource
operator|=
name|dataSource
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|getConnection
parameter_list|()
throws|throws
name|SQLException
block|{
name|Connection
name|autoCommitCheckConnection
init|=
operator|new
name|AutoCommitCheckConnection
argument_list|(
name|realDataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|autoCommitCheckConnection
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|getConnection
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|SQLException
block|{
name|Connection
name|autoCommitCheckConnection
init|=
operator|new
name|AutoCommitCheckConnection
argument_list|(
name|realDataSource
operator|.
name|getConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|autoCommitCheckConnection
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrintWriter
name|getLogWriter
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realDataSource
operator|.
name|getLogWriter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLogWriter
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|SQLException
block|{
name|realDataSource
operator|.
name|setLogWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLoginTimeout
parameter_list|(
name|int
name|seconds
parameter_list|)
throws|throws
name|SQLException
block|{
name|realDataSource
operator|.
name|setLoginTimeout
argument_list|(
name|seconds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLoginTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realDataSource
operator|.
name|getLoginTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Logger
name|getParentLogger
parameter_list|()
throws|throws
name|SQLFeatureNotSupportedException
block|{
return|return
name|realDataSource
operator|.
name|getParentLogger
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realDataSource
operator|.
name|unwrap
argument_list|(
name|iface
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realDataSource
operator|.
name|isWrapperFor
argument_list|(
name|iface
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|AutoCommitCheckConnection
implements|implements
name|Connection
block|{
specifier|private
specifier|final
name|Connection
name|realConnection
decl_stmt|;
specifier|public
name|AutoCommitCheckConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|realConnection
operator|=
name|connection
expr_stmt|;
block|}
comment|// verify commit is not called on an auto-commit connection
annotation|@
name|Override
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|SQLException
block|{
if|if
condition|(
name|getAutoCommit
argument_list|()
operator|==
literal|true
condition|)
block|{
throw|throw
operator|new
name|SQLException
argument_list|(
literal|"AutoCommitCheckConnection: Called commit on autoCommit Connection"
argument_list|)
throw|;
block|}
name|realConnection
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// Just plumbing for wrapper. Might have been better to do a Dynamic Proxy here.
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createStatement
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|nativeSQL
parameter_list|(
name|String
name|sql
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|nativeSQL
argument_list|(
name|sql
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAutoCommit
parameter_list|(
name|boolean
name|autoCommit
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setAutoCommit
argument_list|(
name|autoCommit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getAutoCommit
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getAutoCommit
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isClosed
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|isClosed
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DatabaseMetaData
name|getMetaData
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getMetaData
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setReadOnly
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|isReadOnly
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCatalog
parameter_list|(
name|String
name|catalog
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCatalog
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getCatalog
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTransactionIsolation
parameter_list|(
name|int
name|level
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setTransactionIsolation
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTransactionIsolation
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getTransactionIsolation
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SQLWarning
name|getWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getWarnings
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearWarnings
parameter_list|()
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|clearWarnings
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createStatement
argument_list|(
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getTypeMap
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getTypeMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|map
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setTypeMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHoldability
parameter_list|(
name|int
name|holdability
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setHoldability
argument_list|(
name|holdability
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getHoldability
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getHoldability
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|setSavepoint
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Savepoint
name|setSavepoint
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|setSavepoint
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollback
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseSavepoint
parameter_list|(
name|Savepoint
name|savepoint
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|releaseSavepoint
argument_list|(
name|savepoint
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Statement
name|createStatement
parameter_list|(
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createStatement
argument_list|(
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CallableStatement
name|prepareCall
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|resultSetType
parameter_list|,
name|int
name|resultSetConcurrency
parameter_list|,
name|int
name|resultSetHoldability
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareCall
argument_list|(
name|sql
argument_list|,
name|resultSetType
argument_list|,
name|resultSetConcurrency
argument_list|,
name|resultSetHoldability
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
name|autoGeneratedKeys
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|autoGeneratedKeys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|int
index|[]
name|columnIndexes
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnIndexes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PreparedStatement
name|prepareStatement
parameter_list|(
name|String
name|sql
parameter_list|,
name|String
index|[]
name|columnNames
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|prepareStatement
argument_list|(
name|sql
argument_list|,
name|columnNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Clob
name|createClob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createClob
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|createBlob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createBlob
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NClob
name|createNClob
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createNClob
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|SQLXML
name|createSQLXML
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createSQLXML
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|isValid
argument_list|(
name|timeout
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
name|realConnection
operator|.
name|setClientInfo
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClientInfo
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|SQLClientInfoException
block|{
name|realConnection
operator|.
name|setClientInfo
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getClientInfo
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getClientInfo
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Properties
name|getClientInfo
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getClientInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Array
name|createArrayOf
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Object
index|[]
name|elements
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createArrayOf
argument_list|(
name|typeName
argument_list|,
name|elements
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Struct
name|createStruct
parameter_list|(
name|String
name|typeName
parameter_list|,
name|Object
index|[]
name|attributes
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|createStruct
argument_list|(
name|typeName
argument_list|,
name|attributes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSchema
parameter_list|(
name|String
name|schema
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSchema
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getSchema
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|Executor
name|executor
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|abort
argument_list|(
name|executor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNetworkTimeout
parameter_list|(
name|Executor
name|executor
parameter_list|,
name|int
name|milliseconds
parameter_list|)
throws|throws
name|SQLException
block|{
name|realConnection
operator|.
name|setNetworkTimeout
argument_list|(
name|executor
argument_list|,
name|milliseconds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNetworkTimeout
parameter_list|()
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|getNetworkTimeout
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|unwrap
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|unwrap
argument_list|(
name|iface
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWrapperFor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|iface
parameter_list|)
throws|throws
name|SQLException
block|{
return|return
name|realConnection
operator|.
name|isWrapperFor
argument_list|(
name|iface
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

