begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|MessageDatabase
operator|.
name|StoredDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaUpdateMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MessageDatabaseSizeTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MessageDatabaseSizeTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"subStatsEnabled={0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// Subscription stats on
block|{
literal|true
block|}
block|,
comment|// Subscription stats off
block|{
literal|false
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dataDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|payload
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
specifier|private
name|KahaDBPersistenceAdapter
name|adapter
decl_stmt|;
specifier|private
name|boolean
name|subStatsEnabled
decl_stmt|;
specifier|public
name|MessageDatabaseSizeTest
parameter_list|(
name|boolean
name|subStatsEnabled
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|subStatsEnabled
operator|=
name|subStatsEnabled
expr_stmt|;
block|}
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectory
argument_list|(
name|dataDir
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|adapter
operator|=
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
expr_stmt|;
name|adapter
operator|.
name|setEnableSubscriptionStatistics
argument_list|(
name|subStatsEnabled
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting broker.."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|startBroker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test that when only updating the index and not rewriting the message to the journal      * that the size doesn't change      *      * This was broken before AMQ-6356      */
annotation|@
name|Test
specifier|public
name|void
name|testUpdateMessageSameLocation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KahaDBStore
name|store
init|=
name|adapter
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|MessageId
name|messageId
init|=
operator|new
name|MessageId
argument_list|(
literal|"111:222:333"
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|textMessage
init|=
name|getMessage
argument_list|(
operator|new
name|MessageId
argument_list|(
literal|"111:222:333"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Add a single message and update once so we can compare the size consistently
name|MessageStore
name|messageStore
init|=
name|store
operator|.
name|createQueueMessageStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|messageStore
operator|.
name|addMessage
argument_list|(
name|broker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|textMessage
argument_list|)
expr_stmt|;
name|messageStore
operator|.
name|updateMessage
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
name|Location
name|location
init|=
name|findMessageLocation
argument_list|(
name|messageId
operator|.
name|toString
argument_list|()
argument_list|,
name|store
operator|.
name|convert
argument_list|(
name|destination
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|existingSize
init|=
name|messageStore
operator|.
name|getMessageSize
argument_list|()
decl_stmt|;
comment|//Process the update command for the index and verify the size doesn't change
name|KahaUpdateMessageCommand
name|updateMessageCommand
init|=
operator|(
name|KahaUpdateMessageCommand
operator|)
name|store
operator|.
name|load
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|store
operator|.
name|process
argument_list|(
name|updateMessageCommand
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|existingSize
argument_list|,
name|messageStore
operator|.
name|getMessageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateMessageSameLocationDifferentSize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KahaDBStore
name|store
init|=
name|adapter
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|MessageId
name|messageId
init|=
operator|new
name|MessageId
argument_list|(
literal|"111:222:333"
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|textMessage
init|=
name|getMessage
argument_list|(
operator|new
name|MessageId
argument_list|(
literal|"111:222:333"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Add a single message and update once so we can compare the size consistently
name|MessageStore
name|messageStore
init|=
name|store
operator|.
name|createQueueMessageStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|messageStore
operator|.
name|addMessage
argument_list|(
name|broker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|textMessage
argument_list|)
expr_stmt|;
name|textMessage
operator|.
name|setText
argument_list|(
literal|"new size of message"
argument_list|)
expr_stmt|;
name|messageStore
operator|.
name|updateMessage
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|findMessageLocation
argument_list|(
name|messageId
operator|.
name|toString
argument_list|()
argument_list|,
name|store
operator|.
name|convert
argument_list|(
name|destination
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that when updating an existing message to a different location in the      * journal that the index size doesn't change      */
annotation|@
name|Test
specifier|public
name|void
name|testUpdateMessageDifferentLocation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|KahaDBStore
name|store
init|=
name|adapter
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|ActiveMQTextMessage
name|textMessage
init|=
name|getMessage
argument_list|(
operator|new
name|MessageId
argument_list|(
literal|"111:222:333"
argument_list|)
argument_list|)
decl_stmt|;
comment|//Add a single message and update once so we can compare the size consistently
name|MessageStore
name|messageStore
init|=
name|store
operator|.
name|createQueueMessageStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|messageStore
operator|.
name|addMessage
argument_list|(
name|broker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|textMessage
argument_list|)
expr_stmt|;
name|messageStore
operator|.
name|updateMessage
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
comment|//Update again and make sure the size is the same
name|long
name|existingSize
init|=
name|messageStore
operator|.
name|getMessageSize
argument_list|()
decl_stmt|;
name|messageStore
operator|.
name|updateMessage
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|existingSize
argument_list|,
name|messageStore
operator|.
name|getMessageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ActiveMQTextMessage
name|getMessage
parameter_list|(
specifier|final
name|MessageId
name|messageId
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|textMessage
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|textMessage
operator|.
name|setMessageId
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
name|textMessage
operator|.
name|setText
argument_list|(
name|payload
argument_list|)
expr_stmt|;
return|return
name|textMessage
return|;
block|}
specifier|private
name|Location
name|findMessageLocation
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
specifier|final
name|KahaDestination
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|KahaDBStore
name|store
init|=
name|adapter
operator|.
name|getStore
argument_list|()
decl_stmt|;
return|return
name|store
operator|.
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|CallableClosure
argument_list|<
name|Location
argument_list|,
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Location
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|store
operator|.
name|getStoredDestination
argument_list|(
name|destination
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|Long
name|sequence
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequence
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|sd
operator|.
name|orderIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|sequence
argument_list|)
operator|.
name|location
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

