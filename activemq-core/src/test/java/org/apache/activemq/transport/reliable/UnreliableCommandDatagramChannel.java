begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2005-2006 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|reliable
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
operator|.
name|CommandDatagramChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
operator|.
name|DatagramHeaderMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
operator|.
name|UdpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|DatagramChannel
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|UnreliableCommandDatagramChannel
extends|extends
name|CommandDatagramChannel
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UnreliableCommandDatagramChannel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DropCommandStrategy
name|dropCommandStrategy
decl_stmt|;
specifier|public
name|UnreliableCommandDatagramChannel
parameter_list|(
name|UdpTransport
name|transport
parameter_list|,
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|int
name|datagramSize
parameter_list|,
name|SocketAddress
name|targetAddress
parameter_list|,
name|DatagramHeaderMarshaller
name|headerMarshaller
parameter_list|,
name|ReplayBuffer
name|replayBuffer
parameter_list|,
name|DatagramChannel
name|channel
parameter_list|,
name|ByteBufferPool
name|bufferPool
parameter_list|,
name|DropCommandStrategy
name|strategy
parameter_list|)
block|{
name|super
argument_list|(
name|transport
argument_list|,
name|wireFormat
argument_list|,
name|datagramSize
argument_list|,
name|targetAddress
argument_list|,
name|headerMarshaller
argument_list|,
name|channel
argument_list|,
name|bufferPool
argument_list|)
expr_stmt|;
name|this
operator|.
name|dropCommandStrategy
operator|=
name|strategy
expr_stmt|;
block|}
specifier|protected
name|void
name|sendWriteBuffer
parameter_list|(
name|int
name|commandId
parameter_list|,
name|SocketAddress
name|address
parameter_list|,
name|ByteBuffer
name|writeBuffer
parameter_list|,
name|boolean
name|redelivery
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dropCommandStrategy
operator|.
name|shouldDropCommand
argument_list|(
name|commandId
argument_list|,
name|address
argument_list|,
name|redelivery
argument_list|)
condition|)
block|{
name|writeBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Dropping datagram with command: "
operator|+
name|commandId
argument_list|)
expr_stmt|;
comment|// lets still add it to the replay buffer though!
name|getReplayBuffer
argument_list|()
operator|.
name|addBuffer
argument_list|(
name|commandId
argument_list|,
name|writeBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|sendWriteBuffer
argument_list|(
name|commandId
argument_list|,
name|address
argument_list|,
name|writeBuffer
argument_list|,
name|redelivery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

