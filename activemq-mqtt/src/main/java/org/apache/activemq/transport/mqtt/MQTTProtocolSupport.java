begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_comment
comment|/**  * A set of static methods useful for handling MQTT based client connections.  */
end_comment

begin_class
specifier|public
class|class
name|MQTTProtocolSupport
block|{
comment|/**      * Converts an MQTT formatted Topic name into a suitable ActiveMQ Destination      * name string.      *      * @param name      *        the MQTT formatted topic name.      *      * @return an destination name that fits the ActiveMQ conventions.      */
specifier|public
specifier|static
name|String
name|convertMQTTToActiveMQ
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|char
index|[]
name|chars
init|=
name|name
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|chars
index|[
name|i
index|]
condition|)
block|{
case|case
literal|'#'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'>'
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'#'
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'*'
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'+'
expr_stmt|;
break|break;
case|case
literal|'/'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'.'
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
name|chars
index|[
name|i
index|]
operator|=
literal|'/'
expr_stmt|;
break|break;
block|}
block|}
name|String
name|rc
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
comment|/**      * Converts an ActiveMQ destination name into a correctly formatted      * MQTT destination name.      *      * @param destinationName      *        the ActiveMQ destination name to process.      *      * @return a destination name formatted for MQTT.      */
specifier|public
specifier|static
name|String
name|convertActiveMQToMQTT
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
return|return
name|destinationName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
return|;
block|}
block|}
end_class

end_unit

