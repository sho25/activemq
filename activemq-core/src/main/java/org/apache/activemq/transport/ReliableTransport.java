begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|CommandIdComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|replay
operator|.
name|ReplayStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * This interceptor deals with out of order commands together with being able to  * handle dropped commands and the re-requesting dropped commands.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ReliableTransport
extends|extends
name|TransportFilter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReliableTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ReplayStrategy
name|replayStrategy
decl_stmt|;
specifier|private
name|SortedSet
name|headers
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|CommandIdComparator
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|expectedCounter
init|=
literal|1
decl_stmt|;
specifier|public
name|ReliableTransport
parameter_list|(
name|Transport
name|next
parameter_list|,
name|ReplayStrategy
name|replayStrategy
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|replayStrategy
operator|=
name|replayStrategy
expr_stmt|;
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|int
name|actualCounter
init|=
name|command
operator|.
name|getCommandId
argument_list|()
decl_stmt|;
name|boolean
name|valid
init|=
name|expectedCounter
operator|==
name|actualCounter
decl_stmt|;
if|if
condition|(
operator|!
name|valid
condition|)
block|{
comment|// lets add it to the list for later on
name|headers
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
try|try
block|{
name|replayStrategy
operator|.
name|onDroppedPackets
argument_list|(
name|this
argument_list|,
name|expectedCounter
argument_list|,
name|actualCounter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getTransportListener
argument_list|()
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|headers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// lets see if the first item in the set is the next header
name|command
operator|=
operator|(
name|Command
operator|)
name|headers
operator|.
name|first
argument_list|()
expr_stmt|;
name|valid
operator|=
name|expectedCounter
operator|==
name|command
operator|.
name|getCommandId
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|valid
condition|)
block|{
comment|// we've got a valid header so increment counter
name|replayStrategy
operator|.
name|onReceivedPacket
argument_list|(
name|this
argument_list|,
name|expectedCounter
argument_list|)
expr_stmt|;
name|expectedCounter
operator|++
expr_stmt|;
name|getTransportListener
argument_list|()
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|next
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

