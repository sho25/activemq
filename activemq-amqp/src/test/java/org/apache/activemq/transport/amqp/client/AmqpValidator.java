begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * Abstract base for a validation hook that is used in tests to check  * the state of a remote resource after a variety of lifecycle events.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpValidator
block|{
specifier|private
name|boolean
name|valid
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|errorMessage
decl_stmt|;
specifier|public
name|void
name|inspectOpenedResource
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectOpenedResource
parameter_list|(
name|Session
name|session
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectOpenedResource
parameter_list|(
name|Sender
name|sender
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectOpenedResource
parameter_list|(
name|Receiver
name|receiver
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectClosedResource
parameter_list|(
name|Connection
name|remoteConnection
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectClosedResource
parameter_list|(
name|Session
name|session
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectClosedResource
parameter_list|(
name|Sender
name|sender
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectClosedResource
parameter_list|(
name|Receiver
name|receiver
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectDetachedResource
parameter_list|(
name|Sender
name|sender
parameter_list|)
block|{      }
specifier|public
name|void
name|inspectDetachedResource
parameter_list|(
name|Receiver
name|receiver
parameter_list|)
block|{      }
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|valid
return|;
block|}
specifier|protected
name|void
name|setValid
parameter_list|(
name|boolean
name|valid
parameter_list|)
block|{
name|this
operator|.
name|valid
operator|=
name|valid
expr_stmt|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|errorMessage
return|;
block|}
specifier|protected
name|void
name|setErrorMessage
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
name|this
operator|.
name|errorMessage
operator|=
name|errorMessage
expr_stmt|;
block|}
specifier|protected
name|void
name|markAsInvalid
parameter_list|(
name|String
name|errorMessage
parameter_list|)
block|{
if|if
condition|(
name|valid
condition|)
block|{
name|setValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setErrorMessage
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|assertValid
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

