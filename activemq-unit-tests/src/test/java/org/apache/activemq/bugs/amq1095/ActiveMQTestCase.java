begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* ====================================================================    Licensed to the Apache Software Foundation (ASF) under one or more    contributor license agreements.  See the NOTICE file distributed with    this work for additional information regarding copyright ownership.    The ASF licenses this file to You under the Apache License, Version 2.0    (the "License"); you may not use this file except in compliance with    the License.  You may obtain a copy of the License at         http://www.apache.org/licenses/LICENSE-2.0     Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an "AS IS" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License. ==================================================================== */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
operator|.
name|amq1095
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_comment
comment|/**  *<p>  * Common functionality for ActiveMQ test cases.  *</p>  *   * @author Rainer Klute<a  *         href="mailto:rainer.klute@dp-itsolutions.de">&lt;rainer.klute@dp-itsolutions.de&gt;</a>  * @since 2007-08-10  * @version $Id: ActiveMQTestCase.java 12 2007-08-14 12:02:02Z rke $  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQTestCase
extends|extends
name|TestCase
block|{
specifier|private
name|Context
name|context
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Destination
name|destination
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MessageConsumer
argument_list|>
name|consumersToEmpty
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageConsumer
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|long
name|RECEIVE_TIMEOUT
init|=
literal|500
decl_stmt|;
comment|/**<p>Constructor</p> */
specifier|public
name|ActiveMQTestCase
parameter_list|()
block|{}
comment|/**<p>Constructor</p>       * @param name the test case's name      */
specifier|public
name|ActiveMQTestCase
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      *<p>Sets up the JUnit testing environment.      */
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
name|URI
name|uri
decl_stmt|;
try|try
block|{
comment|/* Copy all system properties starting with "java.naming." to the initial context. */
specifier|final
name|Properties
name|systemProperties
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|jndiProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
name|i
init|=
name|systemProperties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"java.naming."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"topic."
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"queue."
argument_list|)
condition|)
block|{
specifier|final
name|String
name|value
init|=
operator|(
name|String
operator|)
name|systemProperties
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|jndiProperties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|=
operator|new
name|InitialContext
argument_list|(
name|jndiProperties
argument_list|)
expr_stmt|;
name|uri
operator|=
operator|new
name|URI
argument_list|(
literal|"xbean:org/apache/activemq/bugs/amq1095/activemq.xml"
argument_list|)
expr_stmt|;
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
specifier|final
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
try|try
block|{
comment|/* Lookup the connection factory. */
name|connectionFactory
operator|=
operator|(
name|ConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
literal|"TopicConnectionFactory"
argument_list|)
expr_stmt|;
name|destination
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TestTopic"
argument_list|)
expr_stmt|;
comment|/* Create a connection: */
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"sampleClientID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex1
parameter_list|)
block|{
name|ex1
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|ex1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|ex2
parameter_list|)
block|{
name|ex2
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|ex2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex3
parameter_list|)
block|{
name|ex3
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|ex3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *<p>      * Tear down the testing environment by receiving any messages that might be      * left in the topic after a failure and shutting down the broker properly.      * This is quite important for subsequent test cases that assume the topic      * to be empty.      *</p>      */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TextMessage
name|msg
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|Iterator
name|i
init|=
name|consumersToEmpty
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|MessageConsumer
name|consumer
init|=
operator|(
name|MessageConsumer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
do|do
name|msg
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
name|RECEIVE_TIMEOUT
argument_list|)
expr_stmt|;
do|while
condition|(
name|msg
operator|!=
literal|null
condition|)
do|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{ 		}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|registerToBeEmptiedOnShutdown
parameter_list|(
specifier|final
name|MessageConsumer
name|consumer
parameter_list|)
block|{
name|consumersToEmpty
operator|.
name|add
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

