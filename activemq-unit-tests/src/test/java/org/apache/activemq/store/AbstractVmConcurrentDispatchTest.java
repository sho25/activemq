begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This test can also be used to debug AMQ-6218 and AMQ-6221  *  * This test shows that messages are received with non-null data while  * several consumers are used.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractVmConcurrentDispatchTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractVmConcurrentDispatchTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MessageType
name|messageType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|reduceMemoryFootPrint
decl_stmt|;
specifier|protected
specifier|static
enum|enum
name|MessageType
block|{
name|TEXT
block|,
name|MAP
block|,
name|OBJECT
block|}
specifier|protected
specifier|final
specifier|static
name|boolean
index|[]
name|booleanVals
init|=
block|{
literal|true
block|,
literal|false
block|}
decl_stmt|;
specifier|protected
specifier|static
name|boolean
index|[]
name|reduceMemoryFootPrintVals
init|=
name|booleanVals
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dataFileDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|AbstractVmConcurrentDispatchTest
parameter_list|(
name|MessageType
name|messageType
parameter_list|,
name|boolean
name|reduceMemoryFootPrint
parameter_list|)
block|{
name|this
operator|.
name|messageType
operator|=
name|messageType
expr_stmt|;
name|this
operator|.
name|reduceMemoryFootPrint
operator|=
name|reduceMemoryFootPrint
expr_stmt|;
block|}
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|failure
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|CountDownLatch
name|ready
decl_stmt|;
specifier|private
name|URI
name|connectionURI
decl_stmt|;
specifier|private
name|URI
name|vmConnectionURI
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|USE_VM_TRANSPORT
init|=
literal|true
decl_stmt|;
specifier|private
specifier|final
name|int
name|NUM_CONSUMERS
init|=
literal|30
decl_stmt|;
specifier|private
specifier|final
name|int
name|NUM_PRODUCERS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|int
name|NUM_TASKS
init|=
name|NUM_CONSUMERS
operator|+
name|NUM_PRODUCERS
decl_stmt|;
specifier|private
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|MessageId
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|MessageCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultPolicy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultPolicy
operator|.
name|setReduceMemoryFootprint
argument_list|(
name|reduceMemoryFootPrint
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultPolicy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataFileDir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|configurePersistenceAdapter
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|ready
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_TASKS
argument_list|)
expr_stmt|;
name|connectionURI
operator|=
name|connector
operator|.
name|getPublishableConnectURI
argument_list|()
expr_stmt|;
name|vmConnectionURI
operator|=
name|broker
operator|.
name|getVmConnectorURI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|configurePersistenceAdapter
parameter_list|(
specifier|final
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testMessagesAreValid
parameter_list|()
throws|throws
name|Exception
block|{
name|ExecutorService
name|tasks
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_TASKS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CONSUMERS
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created Consumer: {}"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|execute
argument_list|(
operator|new
name|HelloWorldConsumer
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PRODUCERS
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created Producer: {}"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|tasks
operator|.
name|execute
argument_list|(
operator|new
name|HelloWorldProducer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ready
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|tasks
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|tasks
operator|.
name|awaitTermination
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//should get exception with no errors
block|}
name|assertFalse
argument_list|(
literal|"Test Encountered a null bodied message"
argument_list|,
name|failure
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URI
name|getBrokerURI
parameter_list|()
block|{
if|if
condition|(
name|USE_VM_TRANSPORT
condition|)
block|{
return|return
name|vmConnectionURI
return|;
block|}
else|else
block|{
return|return
name|connectionURI
return|;
block|}
block|}
specifier|public
class|class
name|HelloWorldProducer
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|getBrokerURI
argument_list|()
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"VirtualTopic.AMQ6218Test"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Producer: {}"
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setPriority
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ready
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|failure
operator|.
name|get
argument_list|()
condition|)
block|{
name|j
operator|++
expr_stmt|;
name|String
name|text
init|=
literal|"AMQ Message Number :"
operator|+
name|j
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|MessageType
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|MapMessage
name|mapMessage
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"text"
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|message
operator|=
name|mapMessage
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|MessageType
operator|.
name|OBJECT
argument_list|)
condition|)
block|{
name|ObjectMessage
name|objectMessage
init|=
name|session
operator|.
name|createObjectMessage
argument_list|()
decl_stmt|;
name|objectMessage
operator|.
name|setObject
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|message
operator|=
name|objectMessage
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent message: {}"
argument_list|,
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|HelloWorldConsumer
implements|implements
name|Runnable
implements|,
name|ExceptionListener
block|{
name|String
name|queueName
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|getBrokerURI
argument_list|()
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|ActiveMQSession
operator|.
name|INDIVIDUAL_ACKNOWLEDGE
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|queueName
operator|=
literal|"Consumer.Q"
operator|+
name|i
operator|+
literal|".VirtualTopic.AMQ6218Test"
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|ready
operator|.
name|countDown
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|failure
operator|.
name|get
argument_list|()
condition|)
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|500
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|MessageId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|MessageId
argument_list|)
condition|)
block|{
name|MessageCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Count of message "
operator|+
name|MessageId
operator|+
literal|" is "
operator|+
name|MessageCount
argument_list|)
expr_stmt|;
name|MessageCount
operator|=
literal|1
expr_stmt|;
name|MessageId
operator|=
name|message
operator|.
name|getJMSMessageID
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|MessageId
operator|=
name|message
operator|.
name|getJMSMessageID
argument_list|()
expr_stmt|;
name|MessageCount
operator|=
literal|1
expr_stmt|;
block|}
block|}
name|String
name|text
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|MessageType
operator|.
name|OBJECT
argument_list|)
operator|&&
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
name|ObjectMessage
name|objectMessage
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|text
operator|=
operator|(
name|String
operator|)
name|objectMessage
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|MessageType
operator|.
name|TEXT
argument_list|)
operator|&&
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|text
operator|=
name|textMessage
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|MessageType
operator|.
name|MAP
argument_list|)
operator|&&
name|message
operator|instanceof
name|MapMessage
condition|)
block|{
name|MapMessage
name|mapMessage
init|=
operator|(
name|MapMessage
operator|)
name|message
decl_stmt|;
name|text
operator|=
name|mapMessage
operator|.
name|getString
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|queueName
operator|+
literal|" Message is not a instanceof "
operator|+
name|messageType
operator|+
literal|" message id: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|queueName
operator|+
literal|" text received as a null "
operator|+
name|message
argument_list|)
expr_stmt|;
name|failure
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|queueName
operator|+
literal|" text "
operator|+
name|text
operator|+
literal|" message id: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|onException
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JMS Exception occurred.  Shutting down client."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

