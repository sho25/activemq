begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|j2ee
operator|.
name|statistics
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IndentPrinter
import|;
end_import

begin_comment
comment|/**  * Statistics for a JMS session  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|JMSSessionStatsImpl
extends|extends
name|StatsImpl
block|{
specifier|private
name|List
name|producers
decl_stmt|;
specifier|private
name|List
name|consumers
decl_stmt|;
specifier|private
name|CountStatisticImpl
name|messageCount
decl_stmt|;
specifier|private
name|CountStatisticImpl
name|pendingMessageCount
decl_stmt|;
specifier|private
name|CountStatisticImpl
name|expiredMessageCount
decl_stmt|;
specifier|private
name|TimeStatisticImpl
name|messageWaitTime
decl_stmt|;
specifier|private
name|CountStatisticImpl
name|durableSubscriptionCount
decl_stmt|;
specifier|private
name|TimeStatisticImpl
name|messageRateTime
decl_stmt|;
specifier|public
name|JMSSessionStatsImpl
parameter_list|(
name|List
name|producers
parameter_list|,
name|List
name|consumers
parameter_list|)
block|{
name|this
operator|.
name|producers
operator|=
name|producers
expr_stmt|;
name|this
operator|.
name|consumers
operator|=
name|consumers
expr_stmt|;
name|this
operator|.
name|messageCount
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"messageCount"
argument_list|,
literal|"Number of messages exchanged"
argument_list|)
expr_stmt|;
name|this
operator|.
name|pendingMessageCount
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"pendingMessageCount"
argument_list|,
literal|"Number of pending messages"
argument_list|)
expr_stmt|;
name|this
operator|.
name|expiredMessageCount
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"expiredMessageCount"
argument_list|,
literal|"Number of expired messages"
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageWaitTime
operator|=
operator|new
name|TimeStatisticImpl
argument_list|(
literal|"messageWaitTime"
argument_list|,
literal|"Time spent by a message before being delivered"
argument_list|)
expr_stmt|;
name|this
operator|.
name|durableSubscriptionCount
operator|=
operator|new
name|CountStatisticImpl
argument_list|(
literal|"durableSubscriptionCount"
argument_list|,
literal|"The number of durable subscriptions"
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageWaitTime
operator|=
operator|new
name|TimeStatisticImpl
argument_list|(
literal|"messageWaitTime"
argument_list|,
literal|"Time spent by a message before being delivered"
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageRateTime
operator|=
operator|new
name|TimeStatisticImpl
argument_list|(
literal|"messageRateTime"
argument_list|,
literal|"Time taken to process a message (thoughtput rate)"
argument_list|)
expr_stmt|;
comment|// lets add named stats
name|addStatistic
argument_list|(
literal|"messageCount"
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"pendingMessageCount"
argument_list|,
name|pendingMessageCount
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"expiredMessageCount"
argument_list|,
name|expiredMessageCount
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"messageWaitTime"
argument_list|,
name|messageWaitTime
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"durableSubscriptionCount"
argument_list|,
name|durableSubscriptionCount
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"messageRateTime"
argument_list|,
name|messageRateTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JMSProducerStatsImpl
index|[]
name|getProducers
parameter_list|()
block|{
comment|// lets make a snapshot before we process them
name|Object
index|[]
name|producerArray
init|=
name|producers
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|producerArray
operator|.
name|length
decl_stmt|;
name|JMSProducerStatsImpl
index|[]
name|answer
init|=
operator|new
name|JMSProducerStatsImpl
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQMessageProducer
name|producer
init|=
operator|(
name|ActiveMQMessageProducer
operator|)
name|producerArray
index|[
name|i
index|]
decl_stmt|;
name|answer
index|[
name|i
index|]
operator|=
name|producer
operator|.
name|getProducerStats
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|public
name|JMSConsumerStatsImpl
index|[]
name|getConsumers
parameter_list|()
block|{
comment|// lets make a snapshot before we process them
name|Object
index|[]
name|consumerArray
init|=
name|consumers
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|consumerArray
operator|.
name|length
decl_stmt|;
name|JMSConsumerStatsImpl
index|[]
name|answer
init|=
operator|new
name|JMSConsumerStatsImpl
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|consumerArray
index|[
name|i
index|]
decl_stmt|;
name|answer
index|[
name|i
index|]
operator|=
name|consumer
operator|.
name|getConsumerStats
argument_list|()
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|JMSConsumerStatsImpl
index|[]
name|cstats
init|=
name|getConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|cstats
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|cstats
index|[
name|i
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|JMSProducerStatsImpl
index|[]
name|pstats
init|=
name|getProducers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|pstats
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|pstats
index|[
name|i
index|]
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @param enabled the enabled to set      */
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|super
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
name|JMSConsumerStatsImpl
index|[]
name|cstats
init|=
name|getConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|cstats
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|cstats
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
name|JMSProducerStatsImpl
index|[]
name|pstats
init|=
name|getProducers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|pstats
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|pstats
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CountStatisticImpl
name|getMessageCount
parameter_list|()
block|{
return|return
name|messageCount
return|;
block|}
specifier|public
name|CountStatisticImpl
name|getPendingMessageCount
parameter_list|()
block|{
return|return
name|pendingMessageCount
return|;
block|}
specifier|public
name|CountStatisticImpl
name|getExpiredMessageCount
parameter_list|()
block|{
return|return
name|expiredMessageCount
return|;
block|}
specifier|public
name|TimeStatisticImpl
name|getMessageWaitTime
parameter_list|()
block|{
return|return
name|messageWaitTime
return|;
block|}
specifier|public
name|CountStatisticImpl
name|getDurableSubscriptionCount
parameter_list|()
block|{
return|return
name|durableSubscriptionCount
return|;
block|}
specifier|public
name|TimeStatisticImpl
name|getMessageRateTime
parameter_list|()
block|{
return|return
name|messageRateTime
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|messageRateTime
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|pendingMessageCount
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|expiredMessageCount
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|messageWaitTime
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|durableSubscriptionCount
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" producers{ "
argument_list|)
expr_stmt|;
name|JMSProducerStatsImpl
index|[]
name|producerArray
init|=
name|getProducers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|producerArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|producerArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|" } consumers{ "
argument_list|)
expr_stmt|;
name|JMSConsumerStatsImpl
index|[]
name|consumerArray
init|=
name|getConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumerArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|consumerArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|dump
parameter_list|(
name|IndentPrinter
name|out
parameter_list|)
block|{
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|messageRateTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|pendingMessageCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|expiredMessageCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|messageWaitTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
name|durableSubscriptionCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"producers {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|incrementIndent
argument_list|()
expr_stmt|;
name|JMSProducerStatsImpl
index|[]
name|producerArray
init|=
name|getProducers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|producerArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JMSProducerStatsImpl
name|producer
init|=
operator|(
name|JMSProducerStatsImpl
operator|)
name|producerArray
index|[
name|i
index|]
decl_stmt|;
name|producer
operator|.
name|dump
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|decrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"consumers {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|incrementIndent
argument_list|()
expr_stmt|;
name|JMSConsumerStatsImpl
index|[]
name|consumerArray
init|=
name|getConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumerArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JMSConsumerStatsImpl
name|consumer
init|=
operator|(
name|JMSConsumerStatsImpl
operator|)
name|consumerArray
index|[
name|i
index|]
decl_stmt|;
name|consumer
operator|.
name|dump
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|decrementIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|printIndent
argument_list|()
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onCreateDurableSubscriber
parameter_list|()
block|{
name|durableSubscriptionCount
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onRemoveDurableSubscriber
parameter_list|()
block|{
name|durableSubscriptionCount
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

