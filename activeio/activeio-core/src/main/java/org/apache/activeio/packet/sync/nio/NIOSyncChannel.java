begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteBufferPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EmptyPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannelServer
import|;
end_import

begin_comment
comment|/**  * A {@see org.apache.activeio.SynchChannel} implementation that uses a {@see java.nio.channels.SocketChannel}  * to talk to the network.  *   * Using a SocketChannelSynchChannel should be more efficient than using a SocketSynchChannel since  * direct ByteBuffer can be used to reduce the jvm overhead needed to copy byte[]s.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|NIOSyncChannel
extends|extends
name|NIOBaseChannel
implements|implements
name|SyncChannel
block|{
specifier|private
name|ByteBuffer
name|inputByteBuffer
decl_stmt|;
comment|//    private Packet data2;
specifier|protected
name|NIOSyncChannel
parameter_list|(
name|SocketChannel
name|socketChannel
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|socketChannel
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|NIOSyncChannel
parameter_list|(
name|SocketChannel
name|socketChannel
parameter_list|,
name|boolean
name|useDirect
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|socketChannel
argument_list|,
name|useDirect
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Packet
name|read
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|timeout
operator|==
name|SyncChannelServer
operator|.
name|WAIT_FOREVER_TIMEOUT
condition|)
name|setSoTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|timeout
operator|==
name|SyncChannelServer
operator|.
name|NO_WAIT_TIMEOUT
condition|)
name|setSoTimeout
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|setSoTimeout
argument_list|(
operator|(
name|int
operator|)
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputByteBuffer
operator|==
literal|null
operator|||
operator|!
name|inputByteBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|inputByteBuffer
operator|=
name|allocateBuffer
argument_list|()
expr_stmt|;
block|}
name|int
name|size
init|=
name|socketChannel
operator|.
name|read
argument_list|(
name|inputByteBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
return|return
name|EOSPacket
operator|.
name|EOS_PACKET
return|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|EmptyPacket
operator|.
name|EMPTY_PACKET
return|;
name|ByteBuffer
name|remaining
init|=
name|inputByteBuffer
operator|.
name|slice
argument_list|()
decl_stmt|;
name|Packet
name|data
init|=
operator|new
name|ByteBufferPacket
argument_list|(
operator|(
operator|(
name|ByteBuffer
operator|)
name|inputByteBuffer
operator|.
name|flip
argument_list|()
operator|)
operator|.
name|slice
argument_list|()
argument_list|)
decl_stmt|;
comment|// Keep the remaining buffer around to fill with data.
name|inputByteBuffer
operator|=
name|remaining
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteBuffer
name|data
decl_stmt|;
if|if
condition|(
name|packet
operator|.
name|getClass
argument_list|()
operator|==
name|ByteBufferPacket
operator|.
name|class
condition|)
block|{
name|data
operator|=
operator|(
operator|(
name|ByteBufferPacket
operator|)
name|packet
operator|)
operator|.
name|getByteBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ByteSequence
name|sequence
init|=
name|packet
operator|.
name|asByteSequence
argument_list|()
decl_stmt|;
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|socketChannel
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{ 	}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{ 	}
block|}
end_class

end_unit

