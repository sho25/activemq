begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|artifact
operator|.
name|Artifact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|ArchiverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|UnArchiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|manager
operator|.
name|ArchiverManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|archiver
operator|.
name|manager
operator|.
name|NoSuchArchiverException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|plexus
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_comment
comment|/**  * @goal createbundle  * @description Creates an xfire bundle  */
end_comment

begin_class
specifier|public
class|class
name|BundleMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * The output directory of the assembled distribution file.      *      * @parameter expression="${project.build.outputDirectory}"      * @required      */
specifier|protected
name|File
name|outputDirectory
decl_stmt|;
comment|/**      * Inclusion list      *      * @parameter      */
name|String
name|includes
init|=
literal|""
decl_stmt|;
comment|/**      * The Maven Project.      *      * @parameter expression="${project}"      * @required      * @readonly      */
name|MavenProject
name|project
decl_stmt|;
comment|/**      * To look up Archiver/UnArchiver implementations      *      * @parameter expression="${component.org.codehaus.plexus.archiver.manager.ArchiverManager}"      * @required      */
specifier|protected
name|ArchiverManager
name|archiverManager
decl_stmt|;
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
name|String
index|[]
name|include
init|=
name|includes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|List
name|includeList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|include
argument_list|)
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Inclusions: "
operator|+
name|includeList
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"OutputDirectory: "
operator|+
name|outputDirectory
argument_list|)
expr_stmt|;
name|outputDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|project
operator|.
name|getArtifacts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Artifact
name|a
init|=
operator|(
name|Artifact
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeList
operator|.
name|contains
argument_list|(
name|a
operator|.
name|getArtifactId
argument_list|()
argument_list|)
operator|&&
literal|"jar"
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|a
operator|.
name|getArtifactId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|unpack
argument_list|(
name|a
operator|.
name|getFile
argument_list|()
argument_list|,
name|outputDirectory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MojoExecutionException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchArchiverException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|unpack
parameter_list|(
name|File
name|file
parameter_list|,
name|File
name|location
parameter_list|)
throws|throws
name|MojoExecutionException
throws|,
name|NoSuchArchiverException
block|{
name|String
name|archiveExt
init|=
name|FileUtils
operator|.
name|getExtension
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
try|try
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Extracting: "
operator|+
name|file
operator|+
literal|": to "
operator|+
name|location
argument_list|)
expr_stmt|;
name|UnArchiver
name|unArchiver
init|=
name|this
operator|.
name|archiverManager
operator|.
name|getUnArchiver
argument_list|(
name|archiveExt
argument_list|)
decl_stmt|;
name|unArchiver
operator|.
name|setSourceFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|unArchiver
operator|.
name|setDestDirectory
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|unArchiver
operator|.
name|extract
argument_list|()
expr_stmt|;
name|File
name|metaDir
init|=
operator|new
name|File
argument_list|(
name|location
argument_list|,
literal|"META-INF"
argument_list|)
decl_stmt|;
name|File
name|jarMetaDir
init|=
operator|new
name|File
argument_list|(
name|metaDir
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|mkdir
argument_list|(
name|jarMetaDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|metaDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|files
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MANIFEST.MF"
argument_list|)
operator|||
name|name
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"COPYRIGHT"
argument_list|)
operator|||
name|name
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"LICENSE"
argument_list|)
operator|||
name|name
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"NOTICE"
argument_list|)
operator|||
name|name
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"DISCLAIMER"
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
name|files
index|[
name|i
index|]
argument_list|,
name|jarMetaDir
argument_list|)
expr_stmt|;
name|files
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error unpacking file: "
operator|+
name|file
operator|+
literal|"to: "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ArchiverException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MojoExecutionException
argument_list|(
literal|"Error unpacking file: "
operator|+
name|file
operator|+
literal|"to: "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

