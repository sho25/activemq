begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SuppressReplyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @org.apache.xbean.XBean  */
end_comment

begin_class
specifier|public
class|class
name|DefaultIOExceptionHandler
implements|implements
name|IOExceptionHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DefaultIOExceptionHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|boolean
name|ignoreAllErrors
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|ignoreNoSpaceErrors
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|ignoreSQLExceptions
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|stopStartConnectors
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|noSpaceMessage
init|=
literal|"space"
decl_stmt|;
specifier|private
name|String
name|sqlExceptionMessage
init|=
literal|""
decl_stmt|;
comment|// match all
specifier|private
name|long
name|resumeCheckSleepPeriod
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|handlingException
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
if|if
condition|(
name|ignoreAllErrors
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring IO exception, "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|ignoreNoSpaceErrors
condition|)
block|{
name|Throwable
name|cause
init|=
name|exception
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
operator|&&
name|cause
operator|instanceof
name|IOException
condition|)
block|{
name|String
name|message
init|=
name|cause
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|contains
argument_list|(
name|noSpaceMessage
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring no space left exception, "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
return|return;
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ignoreSQLExceptions
condition|)
block|{
name|Throwable
name|cause
init|=
name|exception
decl_stmt|;
while|while
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cause
operator|instanceof
name|SQLException
condition|)
block|{
name|String
name|message
init|=
name|cause
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|message
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|.
name|contains
argument_list|(
name|sqlExceptionMessage
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Ignoring SQLException, "
operator|+
name|exception
argument_list|,
name|cause
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|cause
operator|=
name|cause
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stopStartConnectors
condition|)
block|{
if|if
condition|(
name|handlingException
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Initiating stop/restart of transports on "
operator|+
name|broker
operator|+
literal|" due to IO exception, "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
literal|"IOExceptionHandler: stop transports"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|ServiceStopper
name|stopper
init|=
operator|new
name|ServiceStopper
argument_list|()
decl_stmt|;
name|broker
operator|.
name|stopAllConnectors
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully stopped transports on "
operator|+
name|broker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure occurred while stopping broker connectors"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// resume again
operator|new
name|Thread
argument_list|(
literal|"IOExceptionHandler: restart transports"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|hasLockOwnership
argument_list|()
operator|&&
name|isPersistenceAdapterDown
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for broker persistence adapter checkpoint to succeed before restarting transports"
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
name|resumeCheckSleepPeriod
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasLockOwnership
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
name|destinations
init|=
operator|(
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
operator|)
operator|.
name|getDestinationMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Destination
name|destination
range|:
name|destinations
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|isResetNeeded
argument_list|()
condition|)
block|{
name|queue
operator|.
name|clearPendingMessages
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|broker
operator|.
name|startAllConnectors
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully restarted transports on "
operator|+
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stopping "
operator|+
name|broker
operator|+
literal|" due to failure restarting transports"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stopBroker
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|handlingException
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isPersistenceAdapterDown
parameter_list|()
block|{
name|boolean
name|checkpointSuccess
init|=
literal|false
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|checkpoint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkpointSuccess
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignored
parameter_list|)
block|{                                     }
return|return
operator|!
name|checkpointSuccess
return|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SuppressReplyException
argument_list|(
literal|"Stop/RestartTransportsInitiated"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
if|if
condition|(
name|handlingException
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|stopBroker
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|// we don't want to propagate the exception back to the client
comment|// They will see a delay till they see a disconnect via socket.close
comment|// at which point failover: can kick in.
throw|throw
operator|new
name|SuppressReplyException
argument_list|(
literal|"ShutdownBrokerInitiated"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
specifier|private
name|void
name|stopBroker
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping "
operator|+
name|broker
operator|+
literal|" due to exception, "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
literal|"IOExceptionHandler: stopping "
operator|+
name|broker
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|broker
operator|.
name|isRestartAllowed
argument_list|()
condition|)
block|{
name|broker
operator|.
name|requestRestart
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure occurred while stopping broker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|hasLockOwnership
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreAllErrors
parameter_list|()
block|{
return|return
name|ignoreAllErrors
return|;
block|}
specifier|public
name|void
name|setIgnoreAllErrors
parameter_list|(
name|boolean
name|ignoreAllErrors
parameter_list|)
block|{
name|this
operator|.
name|ignoreAllErrors
operator|=
name|ignoreAllErrors
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreNoSpaceErrors
parameter_list|()
block|{
return|return
name|ignoreNoSpaceErrors
return|;
block|}
specifier|public
name|void
name|setIgnoreNoSpaceErrors
parameter_list|(
name|boolean
name|ignoreNoSpaceErrors
parameter_list|)
block|{
name|this
operator|.
name|ignoreNoSpaceErrors
operator|=
name|ignoreNoSpaceErrors
expr_stmt|;
block|}
specifier|public
name|String
name|getNoSpaceMessage
parameter_list|()
block|{
return|return
name|noSpaceMessage
return|;
block|}
specifier|public
name|void
name|setNoSpaceMessage
parameter_list|(
name|String
name|noSpaceMessage
parameter_list|)
block|{
name|this
operator|.
name|noSpaceMessage
operator|=
name|noSpaceMessage
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreSQLExceptions
parameter_list|()
block|{
return|return
name|ignoreSQLExceptions
return|;
block|}
specifier|public
name|void
name|setIgnoreSQLExceptions
parameter_list|(
name|boolean
name|ignoreSQLExceptions
parameter_list|)
block|{
name|this
operator|.
name|ignoreSQLExceptions
operator|=
name|ignoreSQLExceptions
expr_stmt|;
block|}
specifier|public
name|String
name|getSqlExceptionMessage
parameter_list|()
block|{
return|return
name|sqlExceptionMessage
return|;
block|}
specifier|public
name|void
name|setSqlExceptionMessage
parameter_list|(
name|String
name|sqlExceptionMessage
parameter_list|)
block|{
name|this
operator|.
name|sqlExceptionMessage
operator|=
name|sqlExceptionMessage
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStopStartConnectors
parameter_list|()
block|{
return|return
name|stopStartConnectors
return|;
block|}
specifier|public
name|void
name|setStopStartConnectors
parameter_list|(
name|boolean
name|stopStartConnectors
parameter_list|)
block|{
name|this
operator|.
name|stopStartConnectors
operator|=
name|stopStartConnectors
expr_stmt|;
block|}
specifier|public
name|long
name|getResumeCheckSleepPeriod
parameter_list|()
block|{
return|return
name|resumeCheckSleepPeriod
return|;
block|}
specifier|public
name|void
name|setResumeCheckSleepPeriod
parameter_list|(
name|long
name|resumeCheckSleepPeriod
parameter_list|)
block|{
name|this
operator|.
name|resumeCheckSleepPeriod
operator|=
name|resumeCheckSleepPeriod
expr_stmt|;
block|}
block|}
end_class

end_unit

