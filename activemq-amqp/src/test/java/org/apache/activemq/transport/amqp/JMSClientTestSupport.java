begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_class
specifier|public
class|class
name|JMSClientTestSupport
extends|extends
name|AmqpTestSupport
block|{
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Thread
name|connectionCloseThread
decl_stmt|;
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Future
argument_list|<
name|Boolean
argument_list|>
name|future
init|=
name|testService
operator|.
name|submit
argument_list|(
operator|new
name|CloseConnectionTask
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"tearDown started."
argument_list|)
expr_stmt|;
name|future
operator|.
name|get
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
if|if
condition|(
name|connectionCloseThread
operator|!=
literal|null
condition|)
block|{
name|connectionCloseThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
empty_stmt|;
block|}
name|testService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|testService
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"CloseConnection timed out"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|connectionCloseThread
operator|=
literal|null
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|CloseConnectionTask
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connectionCloseThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"in CloseConnectionTask.call(), calling connection.close()"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
comment|/**      * @return the proper destination name to use for each test method invocation.      */
specifier|protected
name|String
name|getDestinationName
parameter_list|()
block|{
return|return
name|name
operator|.
name|getMethodName
argument_list|()
return|;
block|}
comment|/**      * Can be overridden in subclasses to test against a different transport suchs as NIO.      *      * @return the URI to connect to on the Broker for AMQP.      */
specifier|protected
name|URI
name|getBrokerURI
parameter_list|()
block|{
return|return
name|amqpURI
return|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|createConnection
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|boolean
name|syncPublish
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|createConnection
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|,
name|syncPublish
argument_list|)
return|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|String
name|clientId
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|createConnection
argument_list|(
name|clientId
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|String
name|clientId
parameter_list|,
name|boolean
name|syncPublish
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|connection
init|=
name|JMSClientContext
operator|.
name|INSTANCE
operator|.
name|createConnection
argument_list|(
name|getBrokerURI
argument_list|()
argument_list|,
literal|"admin"
argument_list|,
literal|"password"
argument_list|,
name|clientId
argument_list|,
name|syncPublish
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
end_class

end_unit

