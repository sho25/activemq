begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DurableSubscriberNonPersistentMessageTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableSubscriberNonPersistentMessageTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|brokerURL
decl_stmt|;
specifier|private
name|String
name|consumerBrokerURL
decl_stmt|;
name|int
name|initialMaxMsgs
init|=
literal|10
decl_stmt|;
name|int
name|cleanupMsgCount
init|=
literal|10
decl_stmt|;
name|int
name|totalMsgCount
init|=
name|initialMaxMsgs
operator|+
name|cleanupMsgCount
decl_stmt|;
name|int
name|totalMsgReceived
init|=
literal|0
decl_stmt|;
name|int
name|sleep
init|=
literal|500
decl_stmt|;
name|int
name|reconnectSleep
init|=
literal|2000
decl_stmt|;
name|int
name|messageTimeout
init|=
literal|1000
decl_stmt|;
name|int
name|messageSize
init|=
literal|1024
decl_stmt|;
comment|// Note: If ttl is set 0, the default set by the broker will be used if any
comment|// setting a value greater than 0 will enable the producer to set the ttl on
comment|// the message
name|long
name|ttl
init|=
literal|0
decl_stmt|;
specifier|static
name|String
name|clientId
init|=
literal|"Jason"
decl_stmt|;
name|MBeanServer
name|mbeanServer
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|TransportConnector
name|transportConnector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|KahaDBStore
name|store
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerURL
operator|=
literal|"failover:("
operator|+
name|transportConnector
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|consumerBrokerURL
operator|=
name|brokerURL
operator|+
literal|"?jms.prefetchPolicy.all=100"
expr_stmt|;
name|mbeanServer
operator|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create the test case      *      * @param testName      *            name of the test case      */
specifier|public
name|DurableSubscriberNonPersistentMessageTest
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the suite of tests being tested      */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestSuite
argument_list|(
name|DurableSubscriberNonPersistentMessageTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|void
name|testDurableSubscriberNonPersistentMessage
parameter_list|()
block|{
name|String
name|interest
init|=
literal|"TEST"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DurableSubscriberNonPersistentMessageTest"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// create durable topic consumer and disconnect
name|createConsumer
argument_list|(
name|interest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// produce 15 messages to topic
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|brokerURL
argument_list|,
name|interest
argument_list|,
name|messageSize
argument_list|,
name|ttl
argument_list|)
decl_stmt|;
name|producer
operator|.
name|sendMessages
argument_list|(
name|totalMsgCount
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|totalMsgCount
operator|+
literal|" messages sent"
argument_list|)
expr_stmt|;
comment|// durable topic consumer will consume 10 messages and disconnect
name|createConsumer
argument_list|(
name|interest
argument_list|,
name|initialMaxMsgs
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|reconnectSleep
argument_list|)
expr_stmt|;
name|createConsumer
argument_list|(
name|interest
argument_list|,
name|cleanupMsgCount
argument_list|)
expr_stmt|;
name|String
name|brokerVersion
init|=
operator|(
name|String
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:BrokerName=localhost,Type=Broker"
argument_list|)
argument_list|,
literal|"BrokerVersion"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Test run on: "
operator|+
name|brokerVersion
argument_list|)
expr_stmt|;
specifier|final
name|String
name|theJmxObject
init|=
literal|"org.apache.activemq:BrokerName=localhost,Type=Subscription,persistentMode=Durable,subscriptionID=MyDurableTopic,destinationType=Topic,destinationName=TEST,clientId=Jason"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"pendingQueueSize should be zero"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|pendingQueueSize
init|=
operator|(
name|Integer
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|theJmxObject
argument_list|)
argument_list|,
literal|"PendingQueueSize"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"pendingQueueSize = "
operator|+
name|pendingQueueSize
argument_list|)
expr_stmt|;
return|return
name|pendingQueueSize
operator|.
name|intValue
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cursorMemoryUsage should be zero"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|Long
name|cursorMemoryUsage
init|=
operator|(
name|Long
operator|)
name|mbeanServer
operator|.
name|getAttribute
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|theJmxObject
argument_list|)
argument_list|,
literal|"CursorMemoryUsage"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cursorMemoryUsage = "
operator|+
name|cursorMemoryUsage
argument_list|)
expr_stmt|;
return|return
name|cursorMemoryUsage
operator|.
name|longValue
argument_list|()
operator|==
literal|0L
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not sure what the behavior should be here, if the messages
comment|// expired the received count shouldn't equal total message count
name|assertTrue
argument_list|(
name|totalMsgReceived
operator|==
name|initialMaxMsgs
operator|+
name|cleanupMsgCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception Executing DurableSubscriberNonPersistentMessageTest: "
operator|+
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not throw any exceptions"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create durable topic consumer and max number of messages
specifier|public
name|void
name|createConsumer
parameter_list|(
name|String
name|interest
parameter_list|,
name|int
name|maxMsgs
parameter_list|)
block|{
name|int
name|messageReceived
init|=
literal|0
decl_stmt|;
name|int
name|messagesNotReceived
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DurableSubscriber"
argument_list|)
expr_stmt|;
name|Consumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|consumer
operator|=
operator|new
name|Consumer
argument_list|(
name|consumerBrokerURL
argument_list|,
name|interest
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxMsgs
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Message
name|msg
init|=
name|consumer
operator|.
name|getMessage
argument_list|(
name|messageTimeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received Message: "
operator|+
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|messageReceived
operator|++
expr_stmt|;
name|totalMsgReceived
operator|++
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"message "
operator|+
name|i
operator|+
literal|" not received"
argument_list|)
expr_stmt|;
name|messagesNotReceived
operator|++
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception: "
operator|+
name|ie
argument_list|)
expr_stmt|;
block|}
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer Finished"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received "
operator|+
name|messageReceived
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Not Received "
operator|+
name|messagesNotReceived
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception Executing SimpleConsumer: "
operator|+
name|getStackTrace
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getStackTrace
parameter_list|(
name|Throwable
name|aThrowable
parameter_list|)
block|{
specifier|final
name|Writer
name|result
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|printWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|aThrowable
operator|.
name|printStackTrace
argument_list|(
name|printWriter
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
class|class
name|Producer
block|{
specifier|protected
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|protected
specifier|transient
name|Connection
name|connection
decl_stmt|;
specifier|protected
specifier|transient
name|Session
name|session
decl_stmt|;
specifier|protected
specifier|transient
name|MessageProducer
name|producer
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|messageSize
init|=
literal|1024
decl_stmt|;
specifier|public
name|Producer
parameter_list|(
name|String
name|brokerURL
parameter_list|,
name|String
name|interest
parameter_list|,
name|int
name|messageSize
parameter_list|,
name|long
name|ttl
parameter_list|)
throws|throws
name|JMSException
block|{
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
name|interest
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|ttl
operator|>
literal|0
condition|)
block|{
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|sendMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|TextMessage
name|textMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test message"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendMessages
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|JMSException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|textMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|createMessageText
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|createMessageText
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
name|messageSize
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"Message: "
operator|+
name|index
operator|+
literal|" sent at: "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
name|messageSize
condition|)
block|{
return|return
name|buffer
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|messageSize
argument_list|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|buffer
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|messageSize
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|commitTransaction
parameter_list|()
throws|throws
name|JMSException
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|Consumer
block|{
specifier|private
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|private
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageConsumer
name|messageConsumer
decl_stmt|;
specifier|public
name|Consumer
parameter_list|(
name|String
name|brokerURL
parameter_list|,
name|String
name|interest
parameter_list|,
name|String
name|clientId
parameter_list|)
throws|throws
name|JMSException
block|{
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|connection
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setAll
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|interest
argument_list|)
decl_stmt|;
name|messageConsumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
literal|"MyDurableTopic"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|JMSException
block|{
while|while
condition|(
name|getMessage
argument_list|(
literal|500
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// empty queue
block|}
block|}
specifier|public
name|Message
name|getMessage
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|messageConsumer
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|messageConsumer
operator|!=
literal|null
condition|)
block|{
name|messageConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
block|}
block|}
end_class

end_unit

