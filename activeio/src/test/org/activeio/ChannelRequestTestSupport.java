begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|ChannelRequestTestSupport
extends|extends
name|TestCase
implements|implements
name|RequestListener
block|{
specifier|private
name|ChannelServer
name|server
decl_stmt|;
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|RequestChannel
name|channel
init|=
name|createClientRequestChannel
argument_list|()
decl_stmt|;
try|try
block|{
name|channel
operator|.
name|start
argument_list|()
expr_stmt|;
name|sendRequest
argument_list|(
name|channel
argument_list|,
literal|1001
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|channel
argument_list|,
literal|1002
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|channel
argument_list|,
literal|1003
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|channel
argument_list|,
literal|1004
argument_list|)
expr_stmt|;
name|sendRequest
argument_list|(
name|channel
argument_list|,
literal|1005
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|channel
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|sendRequest
parameter_list|(
specifier|final
name|RequestChannel
name|channel
parameter_list|,
name|int
name|packetSize
parameter_list|)
throws|throws
name|IOException
block|{
name|Packet
name|request
init|=
operator|new
name|ByteArrayPacket
argument_list|(
name|fill
argument_list|(
operator|new
name|byte
index|[
name|packetSize
index|]
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Packet
name|response
init|=
name|channel
operator|.
name|request
argument_list|(
name|request
argument_list|,
literal|1000
operator|*
literal|30
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|packetSize
argument_list|,
name|response
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|fill
parameter_list|(
name|byte
index|[]
name|bs
parameter_list|,
name|byte
name|b
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bs
index|[
name|i
index|]
operator|=
name|b
expr_stmt|;
block|}
return|return
name|bs
return|;
block|}
specifier|public
name|Packet
name|onRequest
parameter_list|(
name|Packet
name|request
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayPacket
argument_list|(
name|fill
argument_list|(
operator|new
name|byte
index|[
name|request
operator|.
name|remaining
argument_list|()
index|]
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|onRquestError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|=
name|createChannelServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|abstract
specifier|protected
name|RequestChannel
name|createClientRequestChannel
parameter_list|()
throws|throws
name|IOException
function_decl|;
specifier|abstract
specifier|protected
name|ChannelServer
name|createChannelServer
parameter_list|(
specifier|final
name|RequestListener
name|requestListener
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
function_decl|;
block|}
end_class

end_unit

