begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A couple of tests against the PooledConnection class.  *  */
end_comment

begin_class
specifier|public
class|class
name|PooledConnectionTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PooledConnectionTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"setUp() called."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"tearDown() called."
argument_list|)
expr_stmt|;
block|}
comment|/**      * AMQ-3752:      * Tests how the ActiveMQConnection reacts to repeated calls to      * setClientID().      *      * @throws Exception      */
specifier|public
name|void
name|testRepeatedSetClientIDCalls
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"running testRepeatedSetClientIDCalls()"
argument_list|)
expr_stmt|;
comment|// 1st test: call setClientID("newID") twice
comment|// this should be tolerated and not result in an exception
comment|//
name|ConnectionFactory
name|cf
init|=
name|createPooledConnectionFactory
argument_list|()
decl_stmt|;
name|Connection
name|conn
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setClientID
argument_list|(
literal|"newID"
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|setClientID
argument_list|(
literal|"newID"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|cf
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused "
operator|+
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Repeated calls to ActiveMQConnection.setClientID(\"newID\") caused "
operator|+
name|ise
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 2nd test: call setClientID() twice with different IDs
comment|// this should result in an IllegalStateException
comment|//
name|cf
operator|=
name|createPooledConnectionFactory
argument_list|()
expr_stmt|;
name|conn
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setClientID
argument_list|(
literal|"newID1"
argument_list|)
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|setClientID
argument_list|(
literal|"newID2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"calling ActiveMQConnection.setClientID() twice with different clientID must raise an IllegalStateException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Correctly received "
operator|+
name|ise
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// 3rd test: try to call setClientID() after start()
comment|// should result in an exception
name|cf
operator|=
name|createPooledConnectionFactory
argument_list|()
expr_stmt|;
name|conn
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
try|try
block|{
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setClientID
argument_list|(
literal|"newID3"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Calling setClientID() after start() mut raise a JMSException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ise
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Correctly received "
operator|+
name|ise
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Test finished."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ConnectionFactory
name|createPooledConnectionFactory
parameter_list|()
block|{
name|ConnectionFactory
name|cf
init|=
operator|new
name|PooledConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|PooledConnectionFactory
operator|)
name|cf
operator|)
operator|.
name|setMaxConnections
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"ConnectionFactory initialized."
argument_list|)
expr_stmt|;
return|return
name|cf
return|;
block|}
block|}
end_class

end_unit

