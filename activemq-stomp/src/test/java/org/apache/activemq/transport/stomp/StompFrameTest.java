begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|StompFrameTest
block|{
name|StompFrame
name|underTest
init|=
operator|new
name|StompFrame
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNoPasscodeInToString
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"userName"
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"passcode"
argument_list|,
literal|"please"
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no password present"
argument_list|,
operator|-
literal|1
argument_list|,
name|underTest
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"please"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"*** present"
argument_list|,
name|underTest
operator|.
name|toString
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"***"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

