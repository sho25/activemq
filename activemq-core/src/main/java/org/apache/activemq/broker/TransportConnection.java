begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ft
operator|.
name|MasterBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|ConnectionStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ControlCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataArrayResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|FlushCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|IntegerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|KeepAliveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatchNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessagePull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DemandForwardingBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkBridgeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkBridgeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|MessageAuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|CommandVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConnectionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConsumerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|TransactionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|DefaultTransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCorrelator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MarshallingSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.8 $  */
end_comment

begin_class
specifier|public
class|class
name|TransportConnection
implements|implements
name|Connection
implements|,
name|Task
implements|,
name|CommandVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransportConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|TRANSPORTLOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransportConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".Transport"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|SERVICELOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TransportConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".Service"
argument_list|)
decl_stmt|;
comment|// Keeps track of the broker and connector that created this connection.
specifier|protected
specifier|final
name|Broker
name|broker
decl_stmt|;
specifier|protected
specifier|final
name|TransportConnector
name|connector
decl_stmt|;
comment|// Keeps track of the state of the connections.
comment|// protected final ConcurrentHashMap localConnectionStates=new
comment|// ConcurrentHashMap();
specifier|protected
specifier|final
name|Map
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionState
argument_list|>
name|brokerConnectionStates
decl_stmt|;
comment|// The broker and wireformat info that was exchanged.
specifier|protected
name|BrokerInfo
name|brokerInfo
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Command
argument_list|>
name|dispatchQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|Command
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|TaskRunner
name|taskRunner
decl_stmt|;
specifier|protected
specifier|final
name|AtomicReference
argument_list|<
name|IOException
argument_list|>
name|transportException
init|=
operator|new
name|AtomicReference
argument_list|<
name|IOException
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|dispatchStopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|MasterBroker
name|masterBroker
decl_stmt|;
specifier|private
specifier|final
name|Transport
name|transport
decl_stmt|;
specifier|private
name|MessageAuthorizationPolicy
name|messageAuthorizationPolicy
decl_stmt|;
specifier|private
name|WireFormatInfo
name|wireFormatInfo
decl_stmt|;
comment|// Used to do async dispatch.. this should perhaps be pushed down into the
comment|// transport layer..
specifier|private
name|boolean
name|inServiceException
decl_stmt|;
specifier|private
name|ConnectionStatistics
name|statistics
init|=
operator|new
name|ConnectionStatistics
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|manageable
decl_stmt|;
specifier|private
name|boolean
name|slow
decl_stmt|;
specifier|private
name|boolean
name|markedCandidate
decl_stmt|;
specifier|private
name|boolean
name|blockedCandidate
decl_stmt|;
specifier|private
name|boolean
name|blocked
decl_stmt|;
specifier|private
name|boolean
name|connected
decl_stmt|;
specifier|private
name|boolean
name|active
decl_stmt|;
specifier|private
name|boolean
name|starting
decl_stmt|;
specifier|private
name|boolean
name|pendingStop
decl_stmt|;
specifier|private
name|long
name|timeStamp
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|stopping
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|CountDownLatch
name|stopped
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|asyncException
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ProducerId
argument_list|,
name|ProducerBrokerExchange
argument_list|>
name|producerExchanges
init|=
operator|new
name|HashMap
argument_list|<
name|ProducerId
argument_list|,
name|ProducerBrokerExchange
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerBrokerExchange
argument_list|>
name|consumerExchanges
init|=
operator|new
name|HashMap
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerBrokerExchange
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CountDownLatch
name|dispatchStoppedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|ConnectionContext
name|context
decl_stmt|;
specifier|private
name|boolean
name|networkConnection
decl_stmt|;
specifier|private
name|boolean
name|faultTolerantConnection
decl_stmt|;
specifier|private
name|AtomicInteger
name|protocolVersion
init|=
operator|new
name|AtomicInteger
argument_list|(
name|CommandTypes
operator|.
name|PROTOCOL_VERSION
argument_list|)
decl_stmt|;
specifier|private
name|DemandForwardingBridge
name|duplexBridge
decl_stmt|;
specifier|private
specifier|final
name|TaskRunnerFactory
name|taskRunnerFactory
decl_stmt|;
specifier|private
name|TransportConnectionStateRegister
name|connectionStateRegister
init|=
operator|new
name|SingleTransportConnectionStateRegister
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|serviceLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
comment|/**      * @param connector      * @param transport      * @param broker      * @param taskRunnerFactory - can be null if you want direct dispatch to the      *                transport else commands are sent async.      */
specifier|public
name|TransportConnection
parameter_list|(
name|TransportConnector
name|connector
parameter_list|,
specifier|final
name|Transport
name|transport
parameter_list|,
name|Broker
name|broker
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|messageAuthorizationPolicy
operator|=
name|connector
operator|.
name|getMessageAuthorizationPolicy
argument_list|()
expr_stmt|;
name|RegionBroker
name|rb
init|=
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|brokerConnectionStates
operator|=
name|rb
operator|.
name|getConnectionStates
argument_list|()
expr_stmt|;
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|statistics
operator|.
name|setParent
argument_list|(
name|connector
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|taskRunnerFactory
operator|=
name|taskRunnerFactory
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|transport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|DefaultTransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|serviceLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Command
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Protocol violation - Command corrupted: "
operator|+
name|o
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
name|Response
name|response
init|=
name|service
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|dispatchSync
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|serviceLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|serviceTransportException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|connected
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Returns the number of messages to be dispatched to this connection      *       * @return size of dispatch queue      */
specifier|public
name|int
name|getDispatchQueueSize
parameter_list|()
block|{
synchronized|synchronized
init|(
name|dispatchQueue
init|)
block|{
return|return
name|dispatchQueue
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|serviceTransportException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|BrokerService
name|bService
init|=
name|connector
operator|.
name|getBrokerService
argument_list|()
decl_stmt|;
if|if
condition|(
name|bService
operator|.
name|isShutdownOnSlaveFailure
argument_list|()
condition|)
block|{
if|if
condition|(
name|brokerInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|brokerInfo
operator|.
name|isSlaveBroker
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Slave has exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" shutting down master now."
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|bService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to stop the master"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|stopping
operator|.
name|get
argument_list|()
condition|)
block|{
name|transportException
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|TRANSPORTLOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|TRANSPORTLOG
operator|.
name|debug
argument_list|(
literal|"Transport failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|stopAsync
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Calls the serviceException method in an async thread. Since handling a      * service exception closes a socket, we should not tie up broker threads      * since client sockets may hang or cause deadlocks.      *       * @param e      */
specifier|public
name|void
name|serviceExceptionAsync
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|asyncException
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
operator|new
name|Thread
argument_list|(
literal|"Async Exception Handler"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|serviceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Closes a clients connection due to a detected error. Errors are ignored      * if: the client is closing or broker is closing. Otherwise, the connection      * error transmitted to the client before stopping it's transport.      */
specifier|public
name|void
name|serviceException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// are we a transport exception such as not being able to dispatch
comment|// synchronously to a transport
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
name|serviceTransportException
argument_list|(
operator|(
name|IOException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getClass
argument_list|()
operator|==
name|BrokerStoppedException
operator|.
name|class
condition|)
block|{
comment|// Handle the case where the broker is stopped
comment|// But the client is still connected.
if|if
condition|(
operator|!
name|stopping
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|SERVICELOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|SERVICELOG
operator|.
name|debug
argument_list|(
literal|"Broker has been stopped.  Notifying client and closing his connection."
argument_list|)
expr_stmt|;
block|}
name|ConnectionError
name|ce
init|=
operator|new
name|ConnectionError
argument_list|()
decl_stmt|;
name|ce
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|dispatchSync
argument_list|(
name|ce
argument_list|)
expr_stmt|;
comment|// Wait a little bit to try to get the output buffer to flush
comment|// the exption notification to the client.
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
comment|// Worst case is we just kill the connection before the
comment|// notification gets to him.
name|stopAsync
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|stopping
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|inServiceException
condition|)
block|{
name|inServiceException
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|SERVICELOG
operator|.
name|warn
argument_list|(
literal|"Async error occurred: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ConnectionError
name|ce
init|=
operator|new
name|ConnectionError
argument_list|()
decl_stmt|;
name|ce
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|dispatchAsync
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inServiceException
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Response
name|service
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
name|boolean
name|responseRequired
init|=
name|command
operator|.
name|isResponseRequired
argument_list|()
decl_stmt|;
name|int
name|commandId
init|=
name|command
operator|.
name|getCommandId
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|=
name|command
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|SERVICELOG
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|e
operator|.
name|getClass
argument_list|()
operator|!=
name|BrokerStoppedException
operator|.
name|class
condition|)
block|{
name|SERVICELOG
operator|.
name|debug
argument_list|(
literal|"Error occured while processing "
operator|+
operator|(
name|responseRequired
condition|?
literal|"sync"
else|:
literal|"async"
operator|)
operator|+
literal|" command: "
operator|+
name|command
operator|+
literal|", exception: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|responseRequired
condition|)
block|{
name|response
operator|=
operator|new
name|ExceptionResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|responseRequired
condition|)
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setCorrelationId
argument_list|(
name|commandId
argument_list|)
expr_stmt|;
block|}
comment|// The context may have been flagged so that the response is not
comment|// sent.
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|isDontSendReponse
argument_list|()
condition|)
block|{
name|context
operator|.
name|setDontSendReponse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|response
operator|=
literal|null
expr_stmt|;
block|}
name|context
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|public
name|Response
name|processKeepAlive
parameter_list|(
name|KeepAliveInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveSubscription
parameter_list|(
name|RemoveSubscriptionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|.
name|removeSubscription
argument_list|(
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processWireFormat
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|wireFormatInfo
operator|=
name|info
expr_stmt|;
name|protocolVersion
operator|.
name|set
argument_list|(
name|info
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processShutdown
parameter_list|(
name|ShutdownInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|stopAsync
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processFlush
parameter_list|(
name|FlushCommand
name|command
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processBeginTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Context is null"
argument_list|)
throw|;
block|}
comment|// Avoid replaying dup commands
if|if
condition|(
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|cs
operator|.
name|addTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|beginTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processEndTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
comment|// No need to do anything. This packet is just sent by the client
comment|// make sure he is synced with the server as commit command could
comment|// come from a different connection.
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processPrepareTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Context is null"
argument_list|)
throw|;
block|}
name|TransactionState
name|transactionState
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot prepare a transaction that had not been started: "
operator|+
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
throw|;
block|}
comment|// Avoid dups.
if|if
condition|(
operator|!
name|transactionState
operator|.
name|isPrepared
argument_list|()
condition|)
block|{
name|transactionState
operator|.
name|setPrepared
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|broker
operator|.
name|prepareTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
name|transactionState
operator|.
name|setPreparedResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|IntegerResponse
name|response
init|=
operator|new
name|IntegerResponse
argument_list|(
name|result
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
else|else
block|{
name|IntegerResponse
name|response
init|=
operator|new
name|IntegerResponse
argument_list|(
name|transactionState
operator|.
name|getPreparedResult
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
block|}
specifier|public
name|Response
name|processCommitTransactionOnePhase
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|cs
operator|.
name|removeTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processCommitTransactionTwoPhase
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|cs
operator|.
name|removeTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRollbackTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|cs
operator|.
name|removeTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|rollbackTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processForgetTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|broker
operator|.
name|forgetTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRecoverTransactions
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|TransactionId
index|[]
name|preparedTransactions
init|=
name|broker
operator|.
name|getPreparedTransactions
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|DataArrayResponse
argument_list|(
name|preparedTransactions
argument_list|)
return|;
block|}
specifier|public
name|Response
name|processMessage
parameter_list|(
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
name|ProducerId
name|producerId
init|=
name|messageSend
operator|.
name|getProducerId
argument_list|()
decl_stmt|;
name|ProducerBrokerExchange
name|producerExchange
init|=
name|getProducerBrokerExchange
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
name|broker
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processMessageAck
parameter_list|(
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
name|ConsumerBrokerExchange
name|consumerExchange
init|=
name|getConsumerBrokerExchange
argument_list|(
name|ack
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|acknowledge
argument_list|(
name|consumerExchange
argument_list|,
name|ack
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processMessagePull
parameter_list|(
name|MessagePull
name|pull
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|broker
operator|.
name|messagePull
argument_list|(
name|lookupConnectionState
argument_list|(
name|pull
operator|.
name|getConsumerId
argument_list|()
argument_list|)
operator|.
name|getContext
argument_list|()
argument_list|,
name|pull
argument_list|)
return|;
block|}
specifier|public
name|Response
name|processMessageDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|notification
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|.
name|processDispatchNotification
argument_list|(
name|notification
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddDestination
parameter_list|(
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addDestinationInfo
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|cs
operator|.
name|addTempDestination
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveDestination
parameter_list|(
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|removeDestinationInfo
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|cs
operator|.
name|removeTempDestination
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddProducer
parameter_list|(
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionId
name|sessionId
init|=
name|info
operator|.
name|getProducerId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot add a producer to a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
block|}
comment|// Avoid replaying dup commands
if|if
condition|(
operator|!
name|ss
operator|.
name|getProducerIds
argument_list|()
operator|.
name|contains
argument_list|(
name|info
operator|.
name|getProducerId
argument_list|()
argument_list|)
condition|)
block|{
name|broker
operator|.
name|addProducer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
try|try
block|{
name|ss
operator|.
name|addProducer
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|broker
operator|.
name|removeProducer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveProducer
parameter_list|(
name|ProducerId
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionId
name|sessionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a producer from a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
block|}
name|ProducerState
name|ps
init|=
name|ss
operator|.
name|removeProducer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a producer that had not been registered: "
operator|+
name|id
argument_list|)
throw|;
block|}
name|removeProducerBrokerExchange
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeProducer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|ps
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddConsumer
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionId
name|sessionId
init|=
name|info
operator|.
name|getConsumerId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Cannot add a consumer to a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
block|}
comment|// Avoid replaying dup commands
if|if
condition|(
operator|!
name|ss
operator|.
name|getConsumerIds
argument_list|()
operator|.
name|contains
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
condition|)
block|{
name|broker
operator|.
name|addConsumer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
try|try
block|{
name|ss
operator|.
name|addConsumer
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|broker
operator|.
name|removeConsumer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveConsumer
parameter_list|(
name|ConsumerId
name|id
parameter_list|,
name|long
name|lastDeliveredSequenceId
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionId
name|sessionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a consumer from a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
block|}
name|ConsumerState
name|consumerState
init|=
name|ss
operator|.
name|removeConsumer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerState
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a consumer that had not been registered: "
operator|+
name|id
argument_list|)
throw|;
block|}
name|ConsumerInfo
name|info
init|=
name|consumerState
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setLastDeliveredSequenceId
argument_list|(
name|lastDeliveredSequenceId
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeConsumer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|consumerState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
name|removeConsumerBrokerExchange
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddSession
parameter_list|(
name|SessionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getSessionId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
comment|// Avoid replaying dup commands
if|if
condition|(
operator|!
name|cs
operator|.
name|getSessionIds
argument_list|()
operator|.
name|contains
argument_list|(
name|info
operator|.
name|getSessionId
argument_list|()
argument_list|)
condition|)
block|{
name|broker
operator|.
name|addSession
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
try|try
block|{
name|cs
operator|.
name|addSession
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|broker
operator|.
name|removeSession
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveSession
parameter_list|(
name|SessionId
name|id
parameter_list|,
name|long
name|lastDeliveredSequenceId
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionId
name|connectionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|session
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove session that had not been registered: "
operator|+
name|id
argument_list|)
throw|;
block|}
comment|// Don't let new consumers or producers get added while we are closing
comment|// this down.
name|session
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Cascade the connection stop to the consumers and producers.
for|for
control|(
name|Iterator
name|iter
init|=
name|session
operator|.
name|getConsumerIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConsumerId
name|consumerId
init|=
operator|(
name|ConsumerId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|processRemoveConsumer
argument_list|(
name|consumerId
argument_list|,
name|lastDeliveredSequenceId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to remove consumer: "
operator|+
name|consumerId
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|session
operator|.
name|getProducerIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProducerId
name|producerId
init|=
operator|(
name|ProducerId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|processRemoveProducer
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to remove producer: "
operator|+
name|producerId
operator|+
literal|". Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|cs
operator|.
name|removeSession
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeSession
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|session
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddConnection
parameter_list|(
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
comment|//if the broker service has slave attached, wait for the slave to be attached to allow client connection. slave connection is fine
if|if
condition|(
operator|!
name|info
operator|.
name|isBrokerMasterConnector
argument_list|()
operator|&&
name|connector
operator|.
name|getBrokerService
argument_list|()
operator|.
name|isWaitForSlave
argument_list|()
operator|&&
name|connector
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getSlaveStartSignal
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|transport
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExceptionResponse
argument_list|(
operator|new
name|Exception
argument_list|(
literal|"Master's slave not attached yet."
argument_list|)
argument_list|)
return|;
block|}
comment|// Older clients should have been defaulting this field to true.. but they were not.
if|if
condition|(
name|wireFormatInfo
operator|!=
literal|null
operator|&&
name|wireFormatInfo
operator|.
name|getVersion
argument_list|()
operator|<=
literal|2
condition|)
block|{
name|info
operator|.
name|setClientMaster
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|TransportConnectionState
name|state
decl_stmt|;
comment|// Make sure 2 concurrent connections by the same ID only generate 1
comment|// TransportConnectionState object.
synchronized|synchronized
init|(
name|brokerConnectionStates
init|)
block|{
name|state
operator|=
operator|(
name|TransportConnectionState
operator|)
name|brokerConnectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|state
operator|=
operator|new
name|TransportConnectionState
argument_list|(
name|info
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|brokerConnectionStates
operator|.
name|put
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|incrementReference
argument_list|()
expr_stmt|;
block|}
comment|// If there are 2 concurrent connections for the same connection id,
comment|// then last one in wins, we need to sync here
comment|// to figure out the winner.
synchronized|synchronized
init|(
name|state
operator|.
name|getConnectionMutex
argument_list|()
init|)
block|{
if|if
condition|(
name|state
operator|.
name|getConnection
argument_list|()
operator|!=
name|this
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Killing previous stale connection: "
operator|+
name|state
operator|.
name|getConnection
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|getConnection
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection "
operator|+
name|getRemoteAddress
argument_list|()
operator|+
literal|" taking over previous connection: "
operator|+
name|state
operator|.
name|getConnection
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|state
operator|.
name|setConnection
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|state
operator|.
name|reset
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
name|registerConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting up new connection: "
operator|+
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup the context.
name|String
name|clientId
init|=
name|info
operator|.
name|getClientId
argument_list|()
decl_stmt|;
name|context
operator|=
operator|new
name|ConnectionContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|context
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setClientMaster
argument_list|(
name|info
operator|.
name|isClientMaster
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setConnection
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|setConnectionId
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|context
operator|.
name|setMessageAuthorizationPolicy
argument_list|(
name|getMessageAuthorizationPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setNetworkConnection
argument_list|(
name|networkConnection
argument_list|)
expr_stmt|;
name|context
operator|.
name|setFaultTolerant
argument_list|(
name|faultTolerantConnection
argument_list|)
expr_stmt|;
name|context
operator|.
name|setTransactions
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|TransactionId
argument_list|,
name|Transaction
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setUserName
argument_list|(
name|info
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setWireFormatInfo
argument_list|(
name|wireFormatInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|manageable
operator|=
name|info
operator|.
name|isManageable
argument_list|()
expr_stmt|;
name|state
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|state
operator|.
name|setConnection
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|brokerConnectionStates
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to add Connection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|info
operator|.
name|isManageable
argument_list|()
operator|&&
name|broker
operator|.
name|isFaultTolerantConfiguration
argument_list|()
condition|)
block|{
comment|// send ConnectionCommand
name|ConnectionControl
name|command
init|=
operator|new
name|ConnectionControl
argument_list|()
decl_stmt|;
name|command
operator|.
name|setFaultTolerant
argument_list|(
name|broker
operator|.
name|isFaultTolerantConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|dispatchAsync
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|synchronized
name|Response
name|processRemoveConnection
parameter_list|(
name|ConnectionId
name|id
parameter_list|,
name|long
name|lastDeliveredSequenceId
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|TransportConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
comment|// Don't allow things to be added to the connection state while we are
comment|// shutting down.
name|cs
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Cascade the connection stop to the sessions.
for|for
control|(
name|Iterator
name|iter
init|=
name|cs
operator|.
name|getSessionIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SessionId
name|sessionId
init|=
operator|(
name|SessionId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|processRemoveSession
argument_list|(
name|sessionId
argument_list|,
name|lastDeliveredSequenceId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SERVICELOG
operator|.
name|warn
argument_list|(
literal|"Failed to remove session "
operator|+
name|sessionId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Cascade the connection stop to temp destinations.
for|for
control|(
name|Iterator
name|iter
init|=
name|cs
operator|.
name|getTempDesinations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DestinationInfo
name|di
init|=
operator|(
name|DestinationInfo
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|removeDestination
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|di
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SERVICELOG
operator|.
name|warn
argument_list|(
literal|"Failed to remove tmp destination "
operator|+
name|di
operator|.
name|getDestination
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|broker
operator|.
name|removeConnection
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|cs
operator|.
name|getInfo
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|SERVICELOG
operator|.
name|warn
argument_list|(
literal|"Failed to remove connection "
operator|+
name|cs
operator|.
name|getInfo
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|TransportConnectionState
name|state
init|=
name|unregisterConnectionState
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|brokerConnectionStates
init|)
block|{
comment|// If we are the last reference, we should remove the state
comment|// from the broker.
if|if
condition|(
name|state
operator|.
name|decrementReference
argument_list|()
operator|==
literal|0
condition|)
block|{
name|brokerConnectionStates
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processProducerAck
parameter_list|(
name|ProducerAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
comment|// A broker should not get ProducerAck messages.
return|return
literal|null
return|;
block|}
specifier|public
name|Connector
name|getConnector
parameter_list|()
block|{
return|return
name|connector
return|;
block|}
specifier|public
name|void
name|dispatchSync
parameter_list|(
name|Command
name|message
parameter_list|)
block|{
comment|//getStatistics().getEnqueues().increment();
try|try
block|{
name|processDispatch
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|serviceExceptionAsync
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dispatchAsync
parameter_list|(
name|Command
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|stopping
operator|.
name|get
argument_list|()
condition|)
block|{
comment|//getStatistics().getEnqueues().increment();
if|if
condition|(
name|taskRunner
operator|==
literal|null
condition|)
block|{
name|dispatchSync
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|dispatchQueue
init|)
block|{
name|dispatchQueue
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|taskRunner
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|message
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|message
decl_stmt|;
name|Runnable
name|sub
init|=
name|md
operator|.
name|getTransmitCallback
argument_list|()
decl_stmt|;
name|broker
operator|.
name|postProcessDispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|processDispatch
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MessageDispatch
name|messageDispatch
init|=
call|(
name|MessageDispatch
call|)
argument_list|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|?
name|command
else|:
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|stopping
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|messageDispatch
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|preProcessDispatch
argument_list|(
name|messageDispatch
argument_list|)
expr_stmt|;
block|}
name|dispatch
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|messageDispatch
operator|!=
literal|null
condition|)
block|{
name|Runnable
name|sub
init|=
name|messageDispatch
operator|.
name|getTransmitCallback
argument_list|()
decl_stmt|;
name|broker
operator|.
name|postProcessDispatch
argument_list|(
name|messageDispatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
comment|//getStatistics().getDequeues().increment();
block|}
block|}
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|stopping
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|dispatchStopped
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|transportException
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|dispatch
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{                         }
block|}
name|dispatchStoppedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|dispatchStopped
operator|.
name|get
argument_list|()
condition|)
block|{
name|Command
name|command
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|dispatchQueue
init|)
block|{
if|if
condition|(
name|dispatchQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|command
operator|=
name|dispatchQueue
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|processDispatch
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|dispatchStopped
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|dispatchStoppedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|serviceExceptionAsync
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**      * Returns the statistics for this connection      */
specifier|public
name|ConnectionStatistics
name|getStatistics
parameter_list|()
block|{
return|return
name|statistics
return|;
block|}
specifier|public
name|MessageAuthorizationPolicy
name|getMessageAuthorizationPolicy
parameter_list|()
block|{
return|return
name|messageAuthorizationPolicy
return|;
block|}
specifier|public
name|void
name|setMessageAuthorizationPolicy
parameter_list|(
name|MessageAuthorizationPolicy
name|messageAuthorizationPolicy
parameter_list|)
block|{
name|this
operator|.
name|messageAuthorizationPolicy
operator|=
name|messageAuthorizationPolicy
expr_stmt|;
block|}
specifier|public
name|boolean
name|isManageable
parameter_list|()
block|{
return|return
name|manageable
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|starting
operator|=
literal|true
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|taskRunnerFactory
operator|!=
literal|null
condition|)
block|{
name|taskRunner
operator|=
name|taskRunnerFactory
operator|.
name|createTaskRunner
argument_list|(
name|this
argument_list|,
literal|"ActiveMQ Connection Dispatcher: "
operator|+
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskRunner
operator|=
literal|null
expr_stmt|;
block|}
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
name|active
operator|=
literal|true
expr_stmt|;
name|dispatchAsync
argument_list|(
name|connector
operator|.
name|getBrokerInfo
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|onStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Force clean up on an error starting up.
name|stop
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
comment|// stop() can be called from within the above block,
comment|// but we want to be sure start() completes before
comment|// stop() runs, so queue the stop until right now:
name|starting
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|pendingStop
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calling the delayed stop()"
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|pendingStop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|starting
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"stop() called in the middle of start(). Delaying..."
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|stopAsync
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stopped
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The connection to '"
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
operator|+
literal|"' is taking a long time to shutdown."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopAsync
parameter_list|()
block|{
comment|// If we're in the middle of starting
comment|// then go no further... for now.
if|if
condition|(
name|stopping
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Let all the connection contexts know we are shutting down
comment|// so that in progress operations can notice and unblock.
name|List
argument_list|<
name|TransportConnectionState
argument_list|>
name|connectionStates
init|=
name|listConnectionStates
argument_list|()
decl_stmt|;
for|for
control|(
name|TransportConnectionState
name|cs
range|:
name|connectionStates
control|)
block|{
name|cs
operator|.
name|getContext
argument_list|()
operator|.
name|getStopping
argument_list|()
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
operator|new
name|Thread
argument_list|(
literal|"ActiveMQ Transport Stopper: "
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|serviceLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|doStop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error occured while shutting down a connection to '"
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
operator|+
literal|"': "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopped
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|serviceLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Transport Connection to: "
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
return|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping connection: "
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|onStopped
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|masterBroker
operator|!=
literal|null
condition|)
block|{
name|masterBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|duplexBridge
operator|!=
literal|null
condition|)
block|{
name|duplexBridge
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Exception caught stopping"
argument_list|,
name|ignore
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopped transport: "
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Could not stop transport: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskRunner
operator|!=
literal|null
condition|)
block|{
name|taskRunner
operator|.
name|shutdown
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|active
operator|=
literal|false
expr_stmt|;
comment|// Run the MessageDispatch callbacks so that message references get
comment|// cleaned up.
synchronized|synchronized
init|(
name|dispatchQueue
init|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Command
argument_list|>
name|iter
init|=
name|dispatchQueue
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Command
name|command
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|Runnable
name|sub
init|=
name|md
operator|.
name|getTransmitCallback
argument_list|()
decl_stmt|;
name|broker
operator|.
name|postProcessDispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|dispatchQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|//
comment|// Remove all logical connection associated with this connection
comment|// from the broker.
if|if
condition|(
operator|!
name|broker
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TransportConnectionState
argument_list|>
name|connectionStates
init|=
name|listConnectionStates
argument_list|()
decl_stmt|;
name|connectionStates
operator|=
name|listConnectionStates
argument_list|()
expr_stmt|;
for|for
control|(
name|TransportConnectionState
name|cs
range|:
name|connectionStates
control|)
block|{
name|cs
operator|.
name|getContext
argument_list|()
operator|.
name|getStopping
argument_list|()
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleaning up connection resources: "
operator|+
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
name|processRemoveConnection
argument_list|(
name|cs
operator|.
name|getInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
name|ignore
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|brokerInfo
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeBroker
argument_list|(
name|this
argument_list|,
name|brokerInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection Stopped: "
operator|+
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the blockedCandidate.      */
specifier|public
name|boolean
name|isBlockedCandidate
parameter_list|()
block|{
return|return
name|blockedCandidate
return|;
block|}
comment|/**      * @param blockedCandidate The blockedCandidate to set.      */
specifier|public
name|void
name|setBlockedCandidate
parameter_list|(
name|boolean
name|blockedCandidate
parameter_list|)
block|{
name|this
operator|.
name|blockedCandidate
operator|=
name|blockedCandidate
expr_stmt|;
block|}
comment|/**      * @return Returns the markedCandidate.      */
specifier|public
name|boolean
name|isMarkedCandidate
parameter_list|()
block|{
return|return
name|markedCandidate
return|;
block|}
comment|/**      * @param markedCandidate The markedCandidate to set.      */
specifier|public
name|void
name|setMarkedCandidate
parameter_list|(
name|boolean
name|markedCandidate
parameter_list|)
block|{
name|this
operator|.
name|markedCandidate
operator|=
name|markedCandidate
expr_stmt|;
if|if
condition|(
operator|!
name|markedCandidate
condition|)
block|{
name|timeStamp
operator|=
literal|0
expr_stmt|;
name|blockedCandidate
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * @param slow The slow to set.      */
specifier|public
name|void
name|setSlow
parameter_list|(
name|boolean
name|slow
parameter_list|)
block|{
name|this
operator|.
name|slow
operator|=
name|slow
expr_stmt|;
block|}
comment|/**      * @return true if the Connection is slow      */
specifier|public
name|boolean
name|isSlow
parameter_list|()
block|{
return|return
name|slow
return|;
block|}
comment|/**      * @return true if the Connection is potentially blocked      */
specifier|public
name|boolean
name|isMarkedBlockedCandidate
parameter_list|()
block|{
return|return
name|markedCandidate
return|;
block|}
comment|/**      * Mark the Connection, so we can deem if it's collectable on the next sweep      */
specifier|public
name|void
name|doMark
parameter_list|()
block|{
if|if
condition|(
name|timeStamp
operator|==
literal|0
condition|)
block|{
name|timeStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return if after being marked, the Connection is still writing      */
specifier|public
name|boolean
name|isBlocked
parameter_list|()
block|{
return|return
name|blocked
return|;
block|}
comment|/**      * @return true if the Connection is connected      */
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
return|;
block|}
comment|/**      * @param blocked The blocked to set.      */
specifier|public
name|void
name|setBlocked
parameter_list|(
name|boolean
name|blocked
parameter_list|)
block|{
name|this
operator|.
name|blocked
operator|=
name|blocked
expr_stmt|;
block|}
comment|/**      * @param connected The connected to set.      */
specifier|public
name|void
name|setConnected
parameter_list|(
name|boolean
name|connected
parameter_list|)
block|{
name|this
operator|.
name|connected
operator|=
name|connected
expr_stmt|;
block|}
comment|/**      * @return true if the Connection is active      */
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
name|active
return|;
block|}
comment|/**      * @param active The active to set.      */
specifier|public
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
block|}
comment|/**      * @return true if the Connection is starting      */
specifier|public
specifier|synchronized
name|boolean
name|isStarting
parameter_list|()
block|{
return|return
name|starting
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isNetworkConnection
parameter_list|()
block|{
return|return
name|networkConnection
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setStarting
parameter_list|(
name|boolean
name|starting
parameter_list|)
block|{
name|this
operator|.
name|starting
operator|=
name|starting
expr_stmt|;
block|}
comment|/**      * @return true if the Connection needs to stop      */
specifier|public
specifier|synchronized
name|boolean
name|isPendingStop
parameter_list|()
block|{
return|return
name|pendingStop
return|;
block|}
specifier|protected
specifier|synchronized
name|void
name|setPendingStop
parameter_list|(
name|boolean
name|pendingStop
parameter_list|)
block|{
name|this
operator|.
name|pendingStop
operator|=
name|pendingStop
expr_stmt|;
block|}
specifier|public
name|Response
name|processBrokerInfo
parameter_list|(
name|BrokerInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|isSlaveBroker
argument_list|()
condition|)
block|{
comment|// stream messages from this broker (the master) to
comment|// the slave
name|MutableBrokerFilter
name|parent
init|=
operator|(
name|MutableBrokerFilter
operator|)
name|broker
operator|.
name|getAdaptor
argument_list|(
name|MutableBrokerFilter
operator|.
name|class
argument_list|)
decl_stmt|;
name|masterBroker
operator|=
operator|new
name|MasterBroker
argument_list|(
name|parent
argument_list|,
name|transport
argument_list|)
expr_stmt|;
name|masterBroker
operator|.
name|startProcessing
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Slave Broker "
operator|+
name|info
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" is attached"
argument_list|)
expr_stmt|;
name|BrokerService
name|bService
init|=
name|connector
operator|.
name|getBrokerService
argument_list|()
decl_stmt|;
name|bService
operator|.
name|slaveConnectionEstablished
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|isNetworkConnection
argument_list|()
operator|&&
name|info
operator|.
name|isDuplexConnection
argument_list|()
condition|)
block|{
comment|// so this TransportConnection is the rear end of a network bridge
comment|// We have been requested to create a two way pipe ...
try|try
block|{
name|Properties
name|properties
init|=
name|MarshallingSupport
operator|.
name|stringToProperties
argument_list|(
name|info
operator|.
name|getNetworkProperties
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|createMap
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|NetworkBridgeConfiguration
name|config
init|=
operator|new
name|NetworkBridgeConfiguration
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|config
argument_list|,
name|props
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|config
operator|.
name|setBrokerName
argument_list|(
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|broker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"network"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"async"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|URISupport
operator|.
name|createURIWithQuery
argument_list|(
name|uri
argument_list|,
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|Transport
name|localTransport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|Transport
name|remoteBridgeTransport
init|=
operator|new
name|ResponseCorrelator
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|duplexBridge
operator|=
name|NetworkBridgeFactory
operator|.
name|createBridge
argument_list|(
name|config
argument_list|,
name|localTransport
argument_list|,
name|remoteBridgeTransport
argument_list|)
expr_stmt|;
name|duplexBridge
operator|.
name|setBrokerService
argument_list|(
name|broker
operator|.
name|getBrokerService
argument_list|()
argument_list|)
expr_stmt|;
comment|// now turn duplex off this side
name|info
operator|.
name|setDuplexConnection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|duplexBridge
operator|.
name|setCreatedByDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|duplexBridge
operator|.
name|duplexStart
argument_list|(
name|this
argument_list|,
name|brokerInfo
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created Duplex Bridge back to "
operator|+
name|info
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Creating duplex network bridge"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We only expect to get one broker info command per connection
if|if
condition|(
name|this
operator|.
name|brokerInfo
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected extra broker info command received: "
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|brokerInfo
operator|=
name|info
expr_stmt|;
name|broker
operator|.
name|addBroker
argument_list|(
name|this
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|networkConnection
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|TransportConnectionState
argument_list|>
name|connectionStates
init|=
name|listConnectionStates
argument_list|()
decl_stmt|;
for|for
control|(
name|TransportConnectionState
name|cs
range|:
name|connectionStates
control|)
block|{
name|cs
operator|.
name|getContext
argument_list|()
operator|.
name|setNetworkConnection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|createMap
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
return|return
operator|new
name|HashMap
argument_list|(
name|properties
argument_list|)
return|;
block|}
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|setMarkedCandidate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transport
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setMarkedCandidate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|transport
operator|.
name|getRemoteAddress
argument_list|()
return|;
block|}
specifier|public
name|String
name|getConnectionId
parameter_list|()
block|{
name|List
argument_list|<
name|TransportConnectionState
argument_list|>
name|connectionStates
init|=
name|listConnectionStates
argument_list|()
decl_stmt|;
for|for
control|(
name|TransportConnectionState
name|cs
range|:
name|connectionStates
control|)
block|{
if|if
condition|(
name|cs
operator|.
name|getInfo
argument_list|()
operator|.
name|getClientId
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|cs
operator|.
name|getInfo
argument_list|()
operator|.
name|getClientId
argument_list|()
return|;
block|}
return|return
name|cs
operator|.
name|getInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|ProducerBrokerExchange
name|getProducerBrokerExchange
parameter_list|(
name|ProducerId
name|id
parameter_list|)
block|{
name|ProducerBrokerExchange
name|result
init|=
name|producerExchanges
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|producerExchanges
init|)
block|{
name|result
operator|=
operator|new
name|ProducerBrokerExchange
argument_list|()
expr_stmt|;
name|TransportConnectionState
name|state
init|=
name|lookupConnectionState
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|context
operator|=
name|state
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|result
operator|.
name|setConnectionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|SessionState
name|ss
init|=
name|state
operator|.
name|getSessionState
argument_list|(
name|id
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|setProducerState
argument_list|(
name|ss
operator|.
name|getProducerState
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|ProducerState
name|producerState
init|=
name|ss
operator|.
name|getProducerState
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|producerState
operator|!=
literal|null
operator|&&
name|producerState
operator|.
name|getInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ProducerInfo
name|info
init|=
name|producerState
operator|.
name|getInfo
argument_list|()
decl_stmt|;
name|result
operator|.
name|setMutable
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
operator|==
literal|null
operator|||
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|producerExchanges
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|context
operator|=
name|result
operator|.
name|getConnectionContext
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|removeProducerBrokerExchange
parameter_list|(
name|ProducerId
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|producerExchanges
init|)
block|{
name|producerExchanges
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ConsumerBrokerExchange
name|getConsumerBrokerExchange
parameter_list|(
name|ConsumerId
name|id
parameter_list|)
block|{
name|ConsumerBrokerExchange
name|result
init|=
name|consumerExchanges
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|consumerExchanges
init|)
block|{
name|result
operator|=
operator|new
name|ConsumerBrokerExchange
argument_list|()
expr_stmt|;
name|TransportConnectionState
name|state
init|=
name|lookupConnectionState
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|context
operator|=
name|state
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|result
operator|.
name|setConnectionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|SessionState
name|ss
init|=
name|state
operator|.
name|getSessionState
argument_list|(
name|id
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|ConsumerState
name|cs
init|=
name|ss
operator|.
name|getConsumerState
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|ConsumerInfo
name|info
init|=
name|cs
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isPattern
argument_list|()
condition|)
block|{
name|result
operator|.
name|setWildcard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|consumerExchanges
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|removeConsumerBrokerExchange
parameter_list|(
name|ConsumerId
name|id
parameter_list|)
block|{
synchronized|synchronized
init|(
name|consumerExchanges
init|)
block|{
name|consumerExchanges
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getProtocolVersion
parameter_list|()
block|{
return|return
name|protocolVersion
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|Response
name|processControlCommand
parameter_list|(
name|ControlCommand
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|control
init|=
name|command
operator|.
name|getCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|control
operator|!=
literal|null
operator|&&
name|control
operator|.
name|equals
argument_list|(
literal|"shutdown"
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processMessageDispatch
parameter_list|(
name|MessageDispatch
name|dispatch
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processConnectionControl
parameter_list|(
name|ConnectionControl
name|control
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|control
operator|!=
literal|null
condition|)
block|{
name|faultTolerantConnection
operator|=
name|control
operator|.
name|isFaultTolerant
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processConnectionError
parameter_list|(
name|ConnectionError
name|error
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processConsumerControl
parameter_list|(
name|ConsumerControl
name|control
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
specifier|protected
specifier|synchronized
name|TransportConnectionState
name|registerConnectionState
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|,
name|TransportConnectionState
name|state
parameter_list|)
block|{
name|TransportConnectionState
name|cs
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|connectionStateRegister
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|connectionStateRegister
operator|.
name|doesHandleMultipleConnectionStates
argument_list|()
condition|)
block|{
comment|//swap implementations
name|TransportConnectionStateRegister
name|newRegister
init|=
operator|new
name|MapTransportConnectionStateRegister
argument_list|()
decl_stmt|;
name|newRegister
operator|.
name|intialize
argument_list|(
name|connectionStateRegister
argument_list|)
expr_stmt|;
name|connectionStateRegister
operator|=
name|newRegister
expr_stmt|;
block|}
name|cs
operator|=
name|connectionStateRegister
operator|.
name|registerConnectionState
argument_list|(
name|connectionId
argument_list|,
name|state
argument_list|)
expr_stmt|;
return|return
name|cs
return|;
block|}
specifier|protected
specifier|synchronized
name|TransportConnectionState
name|unregisterConnectionState
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|)
block|{
return|return
name|connectionStateRegister
operator|.
name|unregisterConnectionState
argument_list|(
name|connectionId
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|List
argument_list|<
name|TransportConnectionState
argument_list|>
name|listConnectionStates
parameter_list|()
block|{
return|return
name|connectionStateRegister
operator|.
name|listConnectionStates
argument_list|()
return|;
block|}
specifier|protected
specifier|synchronized
name|TransportConnectionState
name|lookupConnectionState
parameter_list|(
name|String
name|connectionId
parameter_list|)
block|{
return|return
name|connectionStateRegister
operator|.
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|TransportConnectionState
name|lookupConnectionState
parameter_list|(
name|ConsumerId
name|id
parameter_list|)
block|{
return|return
name|connectionStateRegister
operator|.
name|lookupConnectionState
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|TransportConnectionState
name|lookupConnectionState
parameter_list|(
name|ProducerId
name|id
parameter_list|)
block|{
return|return
name|connectionStateRegister
operator|.
name|lookupConnectionState
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|TransportConnectionState
name|lookupConnectionState
parameter_list|(
name|SessionId
name|id
parameter_list|)
block|{
return|return
name|connectionStateRegister
operator|.
name|lookupConnectionState
argument_list|(
name|id
argument_list|)
return|;
block|}
specifier|protected
specifier|synchronized
name|TransportConnectionState
name|lookupConnectionState
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|)
block|{
return|return
name|connectionStateRegister
operator|.
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

