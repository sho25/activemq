begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleMessageListener
implements|implements
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleMessageListener
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CountDownLatch
name|messageReceivedToken
decl_stmt|;
specifier|private
name|String
name|lastJMSDestination
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000L
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dest:"
operator|+
name|message
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
expr_stmt|;
name|lastJMSDestination
operator|=
name|message
operator|.
name|getJMSDestination
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|Enumeration
name|propertyNames
init|=
name|message
operator|.
name|getPropertyNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|propertyNames
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Object
name|object
init|=
name|propertyNames
operator|.
name|nextElement
argument_list|()
decl_stmt|;
block|}
block|}
name|messageReceivedToken
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while listening to a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Interrupted while listening to a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param countDown    *          the countDown to set    */
specifier|public
name|void
name|setCountDown
parameter_list|(
name|CountDownLatch
name|countDown
parameter_list|)
block|{
name|this
operator|.
name|messageReceivedToken
operator|=
name|countDown
expr_stmt|;
block|}
comment|/**    * @return the lastJMSDestination    */
specifier|public
name|String
name|getLastJMSDestination
parameter_list|()
block|{
return|return
name|lastJMSDestination
return|;
block|}
block|}
end_class

end_unit

