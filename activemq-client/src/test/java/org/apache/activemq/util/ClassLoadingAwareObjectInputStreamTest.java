begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
specifier|public
class|class
name|ClassLoadingAwareObjectInputStreamTest
block|{
specifier|private
specifier|final
name|String
name|ACCEPTS_ALL_FILTER
init|=
literal|"*"
decl_stmt|;
specifier|private
specifier|final
name|String
name|ACCEPTS_NONE_FILTER
init|=
literal|""
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|//----- Test for serialized objects --------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testReadObject
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Expect to succeed
name|doTestReadObject
argument_list|(
operator|new
name|SimplePojo
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
comment|// Expect to fail
try|try
block|{
name|doTestReadObject
argument_list|(
operator|new
name|SimplePojo
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to read"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// Expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectWithAnonymousClass
parameter_list|()
throws|throws
name|Exception
block|{
name|AnonymousSimplePojoParent
name|pojoParent
init|=
operator|new
name|AnonymousSimplePojoParent
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
name|pojoParent
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org.apache.activemq.util"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|reader
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|AnonymousSimplePojoParent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected payload"
argument_list|,
name|pojoParent
operator|.
name|getPayload
argument_list|()
argument_list|,
operator|(
operator|(
name|AnonymousSimplePojoParent
operator|)
name|obj
operator|)
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectWitLocalClass
parameter_list|()
throws|throws
name|Exception
block|{
name|LocalSimplePojoParent
name|pojoParent
init|=
operator|new
name|LocalSimplePojoParent
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
name|pojoParent
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org.apache.activemq.util"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|reader
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|LocalSimplePojoParent
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected payload"
argument_list|,
name|pojoParent
operator|.
name|getPayload
argument_list|()
argument_list|,
operator|(
operator|(
name|LocalSimplePojoParent
operator|)
name|obj
operator|)
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectByte
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|255
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectShort
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|255
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectInteger
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
literal|255
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectLong
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|255l
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectFloat
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
literal|255.0f
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
literal|255.0
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectString
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
operator|new
name|String
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
comment|//----- Test that arrays of objects can be read --------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectStringArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|value
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-1"
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-2"
expr_stmt|;
name|doTestReadObject
argument_list|(
name|value
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectMultiDimensionalArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
index|[]
index|[]
name|value
init|=
operator|new
name|String
index|[
literal|2
index|]
index|[
literal|2
index|]
index|[
literal|1
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
literal|"0-0-0"
expr_stmt|;
name|value
index|[
literal|0
index|]
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
literal|"0-1-0"
expr_stmt|;
name|value
index|[
literal|1
index|]
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
literal|"1-0-0"
expr_stmt|;
name|value
index|[
literal|1
index|]
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
literal|"1-1-0"
expr_stmt|;
name|doTestReadObject
argument_list|(
name|value
argument_list|,
name|ACCEPTS_ALL_FILTER
argument_list|)
expr_stmt|;
block|}
comment|//----- Test that primitive types are not filtered -----------------------//
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveByteNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
operator|(
name|byte
operator|)
literal|255
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveShortNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
operator|(
name|short
operator|)
literal|255
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveIntegerNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
literal|255
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveLongNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
operator|(
name|long
operator|)
literal|255
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveFloatNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
operator|(
name|float
operator|)
literal|255.0
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveDoubleNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
literal|255.0
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveBooleanNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
literal|false
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitveCharNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadPrimitive
argument_list|(
literal|'c'
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectStringNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReadObject
argument_list|(
operator|new
name|String
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
comment|//----- Test that primitive arrays get past filters ----------------------//
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveByteArrayNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|doTestReadPrimitiveArray
argument_list|(
name|value
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveShortArrayNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|short
index|[]
name|value
init|=
operator|new
name|short
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|doTestReadPrimitiveArray
argument_list|(
name|value
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveIntegerArrayNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|value
init|=
operator|new
name|int
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|doTestReadPrimitiveArray
argument_list|(
name|value
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveLongArrayNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|long
index|[]
name|value
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
literal|2
expr_stmt|;
name|doTestReadPrimitiveArray
argument_list|(
name|value
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveFloatArrayNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|float
index|[]
name|value
init|=
operator|new
name|float
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
literal|1.1f
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
literal|2.1f
expr_stmt|;
name|doTestReadPrimitiveArray
argument_list|(
name|value
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrimitiveDoubleArrayNotFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|double
index|[]
name|value
init|=
operator|new
name|double
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
literal|1.1
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
literal|2.1
expr_stmt|;
name|doTestReadPrimitiveArray
argument_list|(
name|value
argument_list|,
name|ACCEPTS_NONE_FILTER
argument_list|)
expr_stmt|;
block|}
comment|//----- Tests for types that should be filtered --------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectArrayFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|UUID
index|[]
name|value
init|=
operator|new
name|UUID
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACCEPTS_NONE_FILTER
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to read the payload."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectMixedTypeArrayGetsFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|Object
index|[]
name|value
init|=
operator|new
name|Object
index|[
literal|4
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
operator|=
name|name
operator|.
name|getMethodName
argument_list|()
expr_stmt|;
name|value
index|[
literal|1
index|]
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|value
index|[
literal|2
index|]
operator|=
operator|new
name|Vector
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|value
index|[
literal|3
index|]
operator|=
operator|new
name|SimplePojo
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"java"
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to read the payload."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{             }
block|}
comment|// Replace the filtered type and try again
name|value
index|[
literal|3
index|]
operator|=
operator|new
name|Integer
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|serialized
operator|=
name|serializeObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"java"
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Object
name|result
init|=
name|reader
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be able to read the payload."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectMultiDimensionalArrayFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|UUID
index|[]
index|[]
name|value
init|=
operator|new
name|UUID
index|[
literal|2
index|]
index|[
literal|2
index|]
decl_stmt|;
name|value
index|[
literal|0
index|]
index|[
literal|0
index|]
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|value
index|[
literal|0
index|]
index|[
literal|1
index|]
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|value
index|[
literal|1
index|]
index|[
literal|0
index|]
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|value
index|[
literal|1
index|]
index|[
literal|1
index|]
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ACCEPTS_NONE_FILTER
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to read the payload."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectFailsWithUntrustedType
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
operator|new
name|SimplePojo
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"java"
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to read the payload."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{}
block|}
name|serialized
operator|=
name|serializeObject
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
try|try
block|{
name|reader
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be able to read the payload."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadObjectFailsWithUnstrustedContentInTrustedType
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
operator|new
name|SimplePojo
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
try|try
init|(
name|ClassLoadingAwareObjectInputStream
name|reader
init|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org.apache.activemq"
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to read the payload."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{}
block|}
name|serialized
operator|=
name|serializeObject
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
name|input
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
expr_stmt|;
try|try
init|(
name|ClassLoadingAwareObjectInputStream
name|reader
init|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"org.apache.activemq"
block|}
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to read the payload."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{             }
block|}
block|}
comment|//----- Internal methods -------------------------------------------------//
specifier|private
name|void
name|doTestReadObject
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|reader
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|deepEquals
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|value
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|value
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|byte
index|[]
name|serializeObject
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;                  ObjectOutputStream oos = new ObjectOutputStream(baos)
block|)
block|{
name|oos
operator|.
name|writeObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_class

begin_function
specifier|private
name|void
name|doTestReadPrimitive
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|serialized
init|=
name|serializePrimitive
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readByte
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readShort
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readFloat
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readDouble
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Character
condition|)
block|{
name|result
operator|=
name|reader
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsuitable type for primitive deserialization"
argument_list|)
throw|;
block|}
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|doTestReadPrimitiveArray
parameter_list|(
name|Object
name|value
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|serialized
init|=
name|serializeObject
argument_list|(
name|value
argument_list|)
decl_stmt|;
try|try
init|(
name|ByteArrayInputStream
name|input
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|serialized
argument_list|)
init|;
name|ClassLoadingAwareObjectInputStream
name|reader
operator|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
name|input
argument_list|)
init|)
block|{
name|reader
operator|.
name|setTrustAllPackages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setTrustedPackages
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|filter
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|reader
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|byte
index|[]
name|serializePrimitive
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
init|(
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
init|;                  ObjectOutputStream oos = new ObjectOutputStream(baos)
block|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
name|oos
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
name|oos
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|oos
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|oos
operator|.
name|writeLong
argument_list|(
operator|(
name|long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|oos
operator|.
name|writeFloat
argument_list|(
operator|(
name|float
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|oos
operator|.
name|writeDouble
argument_list|(
operator|(
name|double
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|oos
operator|.
name|writeBoolean
argument_list|(
operator|(
name|boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Character
condition|)
block|{
name|oos
operator|.
name|writeChar
argument_list|(
operator|(
name|char
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unsuitable type for primitive serialization"
argument_list|)
throw|;
block|}
name|oos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|=
name|baos
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_return
return|return
name|result
return|;
end_return

unit|} }
end_unit

