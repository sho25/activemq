begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|vmpipe
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelServer
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|VMPipeAsyncChannelFactory
implements|implements
name|AsyncChannelFactory
block|{
comment|//
comment|// We do all this crazy stuff of looking the server map using System
comment|// properties
comment|// because this class could be loaded multiple times in different
comment|// classloaders.
comment|//
specifier|private
specifier|static
specifier|final
name|String
name|SERVER_MAP_LOCATION
init|=
name|VMPipeAsyncChannelFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".SERVER_MAP"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
name|SERVER_MAP
decl_stmt|;
static|static
block|{
name|Map
name|m
init|=
literal|null
decl_stmt|;
name|m
operator|=
operator|(
name|Map
operator|)
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|SERVER_MAP_LOCATION
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|SERVER_MAP_LOCATION
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|SERVER_MAP
operator|=
name|m
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|ClassLoader
name|MY_CLASSLOADER
init|=
name|Packet
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
comment|/**      * Used to marshal calls to a PipeChannel in a different classloader.      */
specifier|static
specifier|public
class|class
name|ClassloaderAsyncChannelAdapter
implements|implements
name|AsyncChannel
block|{
specifier|private
specifier|final
name|ClassLoader
name|cl
decl_stmt|;
specifier|private
specifier|final
name|Object
name|channel
decl_stmt|;
specifier|private
specifier|final
name|Method
name|writeMethod
decl_stmt|;
specifier|private
specifier|final
name|Method
name|setListenerMethod
decl_stmt|;
specifier|private
specifier|final
name|Class
name|listenerClazz
decl_stmt|;
specifier|private
specifier|final
name|Class
name|packetClazz
decl_stmt|;
specifier|private
specifier|final
name|Object
name|listenerProxy
decl_stmt|;
specifier|private
specifier|final
name|Method
name|duplicateMethod
decl_stmt|;
specifier|private
specifier|final
name|Method
name|startMethod
decl_stmt|;
specifier|private
specifier|final
name|Method
name|stopMethod
decl_stmt|;
specifier|private
specifier|final
name|Method
name|disposeMethod
decl_stmt|;
specifier|private
name|AsyncChannelListener
name|channelListener
decl_stmt|;
specifier|public
class|class
name|ListenerProxyHandler
implements|implements
name|InvocationHandler
block|{
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
switch|switch
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
case|case
literal|8
case|:
comment|// onPacket
name|Object
name|packet
init|=
name|duplicateMethod
operator|.
name|invoke
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
operator|new
name|Object
index|[]
block|{
name|MY_CLASSLOADER
block|}
argument_list|)
decl_stmt|;
name|channelListener
operator|.
name|onPacket
argument_list|(
operator|(
name|Packet
operator|)
name|packet
argument_list|)
expr_stmt|;
break|break;
case|case
literal|13
case|:
comment|// onPacketError
name|channelListener
operator|.
name|onPacketError
argument_list|(
operator|(
name|IOException
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
default|default:
name|channelListener
operator|.
name|onPacketError
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Unknown proxy method invocation: "
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|ClassloaderAsyncChannelAdapter
parameter_list|(
name|Object
name|channel
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchMethodException
throws|,
name|ClassNotFoundException
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|Class
name|clazz
init|=
name|channel
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|cl
operator|=
name|clazz
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
name|listenerClazz
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|AsyncChannelListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|packetClazz
operator|=
name|cl
operator|.
name|loadClass
argument_list|(
name|Packet
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeMethod
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"write"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|packetClazz
block|}
argument_list|)
expr_stmt|;
name|startMethod
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"start"
argument_list|,
operator|new
name|Class
index|[]
block|{ }
argument_list|)
expr_stmt|;
name|stopMethod
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"stop"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
expr_stmt|;
name|disposeMethod
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"dispose"
argument_list|,
operator|new
name|Class
index|[]
block|{ }
argument_list|)
expr_stmt|;
name|setListenerMethod
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"setAsyncChannelListener"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|listenerClazz
block|}
argument_list|)
expr_stmt|;
name|duplicateMethod
operator|=
name|packetClazz
operator|.
name|getMethod
argument_list|(
literal|"duplicate"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|ClassLoader
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
name|ListenerProxyHandler
name|handler
init|=
operator|new
name|ListenerProxyHandler
argument_list|()
decl_stmt|;
name|listenerProxy
operator|=
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|cl
argument_list|,
operator|new
name|Class
index|[]
block|{
name|listenerClazz
block|}
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|callIOExceptionMethod
argument_list|(
name|writeMethod
argument_list|,
operator|new
name|Object
index|[]
block|{
name|packet
operator|.
name|duplicate
argument_list|(
name|cl
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAsyncChannelListener
parameter_list|(
name|AsyncChannelListener
name|channelListener
parameter_list|)
block|{
name|this
operator|.
name|channelListener
operator|=
name|channelListener
expr_stmt|;
name|callMethod
argument_list|(
name|setListenerMethod
argument_list|,
operator|new
name|Object
index|[]
block|{
name|channelListener
operator|==
literal|null
condition|?
literal|null
else|:
name|listenerProxy
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AsyncChannelListener
name|getAsyncChannelListener
parameter_list|()
block|{
return|return
name|channelListener
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|callMethod
argument_list|(
name|disposeMethod
argument_list|,
operator|new
name|Object
index|[]
block|{ }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|callIOExceptionMethod
argument_list|(
name|startMethod
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|callIOExceptionMethod
argument_list|(
name|stopMethod
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|callMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|channel
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getTargetException
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Reflexive invocation failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|callIOExceptionMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|method
operator|.
name|invoke
argument_list|(
name|channel
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getTargetException
argument_list|()
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
if|if
condition|(
name|e
operator|.
name|getTargetException
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getTargetException
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Reflexive invocation failed: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// The following methods do not need to delegate since they
comment|// are implemented as noops in the PipeChannel
comment|//
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{         }
block|}
specifier|private
name|boolean
name|forceRefelection
decl_stmt|;
specifier|public
name|AsyncChannel
name|openAsyncChannel
parameter_list|(
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|server
init|=
name|lookupServer
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|forceRefelection
operator|&&
name|server
operator|.
name|getClass
argument_list|()
operator|==
name|VMPipeAsyncChannelServer
operator|.
name|class
condition|)
block|{
return|return
operator|(
operator|(
name|VMPipeAsyncChannelServer
operator|)
name|server
operator|)
operator|.
name|connect
argument_list|()
return|;
block|}
comment|// Asume server is in a different classloader.
comment|// Use reflection to connect.
try|try
block|{
name|Method
name|method
init|=
name|server
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"connect"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Object
name|channel
init|=
name|method
operator|.
name|invoke
argument_list|(
name|server
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
return|return
operator|new
name|ClassloaderAsyncChannelAdapter
argument_list|(
name|channel
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Connection could not be established: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AsyncChannelServer
name|bindAsyncChannel
parameter_list|(
name|URI
name|bindURI
parameter_list|)
throws|throws
name|IOException
block|{
name|VMPipeAsyncChannelServer
name|server
init|=
operator|new
name|VMPipeAsyncChannelServer
argument_list|(
name|bindURI
argument_list|)
decl_stmt|;
name|bindServer
argument_list|(
name|bindURI
argument_list|,
name|server
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
specifier|private
specifier|static
name|Map
name|getServerMap
parameter_list|()
block|{
return|return
name|SERVER_MAP
return|;
block|}
specifier|static
specifier|public
name|String
name|getServerKeyForURI
parameter_list|(
name|URI
name|location
parameter_list|)
block|{
return|return
name|location
operator|.
name|getHost
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|bindServer
parameter_list|(
name|URI
name|bindURI
parameter_list|,
name|VMPipeAsyncChannelServer
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getServerKeyForURI
argument_list|(
name|bindURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|getServerMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server is allready bound at: "
operator|+
name|bindURI
argument_list|)
throw|;
name|getServerMap
argument_list|()
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
name|lookupServer
parameter_list|(
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|getServerKeyForURI
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|Object
name|server
init|=
name|getServerMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Connection refused."
argument_list|)
throw|;
block|}
return|return
name|server
return|;
block|}
specifier|public
specifier|static
name|void
name|unbindServer
parameter_list|(
name|URI
name|bindURI
parameter_list|)
block|{
name|String
name|key
init|=
name|getServerKeyForURI
argument_list|(
name|bindURI
argument_list|)
decl_stmt|;
name|getServerMap
argument_list|()
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isForceRefelection
parameter_list|()
block|{
return|return
name|forceRefelection
return|;
block|}
specifier|public
name|void
name|setForceRefelection
parameter_list|(
name|boolean
name|forceRefelection
parameter_list|)
block|{
name|this
operator|.
name|forceRefelection
operator|=
name|forceRefelection
expr_stmt|;
block|}
block|}
end_class

end_unit

