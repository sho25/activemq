begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatchNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessagePull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
operator|.
name|CountStatisticImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @author gtully  * @see https://issues.apache.org/activemq/browse/AMQ-2020  **/
end_comment

begin_class
specifier|public
class|class
name|QueueDuplicatesFromStoreTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueDuplicatesFromStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue-"
operator|+
name|QueueDuplicatesFromStoreTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
specifier|final
specifier|static
name|String
name|mesageIdRoot
init|=
literal|"11111:22222:"
decl_stmt|;
specifier|final
name|int
name|messageBytesSize
init|=
literal|256
decl_stmt|;
specifier|final
name|String
name|text
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
name|messageBytesSize
index|]
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ackStartIndex
init|=
literal|100
decl_stmt|;
specifier|final
name|int
name|ackWindow
init|=
literal|50
decl_stmt|;
specifier|final
name|int
name|ackBatchSize
init|=
literal|50
decl_stmt|;
specifier|final
name|int
name|fullWindow
init|=
literal|200
decl_stmt|;
specifier|protected
name|int
name|count
init|=
literal|5000
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|BrokerService
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testNoDuplicateAfterCacheFullAndAckedWithLargeAuditDepth
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoDuplicateAfterCacheFullAndAcked
argument_list|(
literal|1024
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNoDuplicateAfterCacheFullAndAckedWithSmallAuditDepth
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoDuplicateAfterCacheFullAndAcked
argument_list|(
literal|512
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestNoDuplicateAfterCacheFullAndAcked
parameter_list|(
specifier|final
name|int
name|auditDepth
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|PersistenceAdapter
name|persistenceAdapter
init|=
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
specifier|final
name|MessageStore
name|queueMessageStore
init|=
name|persistenceAdapter
operator|.
name|createQueueMessageStore
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|ConnectionContext
name|contextNotInTx
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
specifier|final
name|ConsumerInfo
name|consumerInfo
init|=
operator|new
name|ConsumerInfo
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
operator|new
name|DestinationStatistics
argument_list|()
decl_stmt|;
name|consumerInfo
operator|.
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Queue
name|queue
init|=
operator|new
name|Queue
argument_list|(
name|brokerService
argument_list|,
name|destination
argument_list|,
name|queueMessageStore
argument_list|,
name|destinationStatistics
argument_list|,
name|brokerService
operator|.
name|getTaskRunnerFactory
argument_list|()
argument_list|)
decl_stmt|;
comment|// a workaround for this issue
comment|// queue.setUseCache(false);
name|queue
operator|.
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|10
argument_list|)
expr_stmt|;
name|queue
operator|.
name|setMaxAuditDepth
argument_list|(
name|auditDepth
argument_list|)
expr_stmt|;
name|queue
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|queue
operator|.
name|start
argument_list|()
expr_stmt|;
name|ProducerBrokerExchange
name|producerExchange
init|=
operator|new
name|ProducerBrokerExchange
argument_list|()
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
operator|new
name|ProducerInfo
argument_list|()
decl_stmt|;
name|ProducerState
name|producerState
init|=
operator|new
name|ProducerState
argument_list|(
name|producerInfo
argument_list|)
decl_stmt|;
name|producerExchange
operator|.
name|setProducerState
argument_list|(
name|producerState
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setConnectionContext
argument_list|(
name|contextNotInTx
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|receivedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|count
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|ackedCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|enqueueCounter
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|errors
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// populate the queue store, exceed memory limit so that cache is disabled
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|getMessage
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|queue
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"store count is correct"
argument_list|,
name|count
argument_list|,
name|queueMessageStore
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// pull from store in small windows
name|Subscription
name|subscription
init|=
operator|new
name|Subscription
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|MessageReference
name|node
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|enqueueCounter
operator|.
name|get
argument_list|()
operator|!=
name|node
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
condition|)
block|{
name|errors
operator|.
name|add
argument_list|(
literal|"Not in sequence at: "
operator|+
name|enqueueCounter
operator|.
name|get
argument_list|()
operator|+
literal|", received: "
operator|+
name|node
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"is in order"
argument_list|,
name|enqueueCounter
operator|.
name|get
argument_list|()
argument_list|,
name|node
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|receivedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|enqueueCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{             }
annotation|@
name|Override
specifier|public
name|int
name|countBeforeFull
parameter_list|()
block|{
if|if
condition|(
name|isFull
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|fullWindow
operator|-
call|(
name|int
call|)
argument_list|(
name|enqueueCounter
operator|.
name|get
argument_list|()
operator|-
name|ackedCount
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{             }
empty_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|gc
parameter_list|()
block|{             }
annotation|@
name|Override
specifier|public
name|ConsumerInfo
name|getConsumerInfo
parameter_list|()
block|{
return|return
name|consumerInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionContext
name|getContext
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDequeueCounter
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDispatchedCounter
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDispatchedQueueSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEnqueueCounter
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInFlightSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInFlightUsage
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectName
name|getObjectName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPendingQueueSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPrefetchSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSelector
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isBrowser
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFull
parameter_list|()
block|{
return|return
operator|(
name|enqueueCounter
operator|.
name|get
argument_list|()
operator|-
name|ackedCount
operator|.
name|get
argument_list|()
operator|)
operator|>=
name|fullWindow
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isHighWaterMark
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLowWaterMark
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRecoveryRequired
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|MessageReference
name|node
parameter_list|,
name|MessageEvaluationContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processMessageDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|mdn
parameter_list|)
throws|throws
name|Exception
block|{             }
annotation|@
name|Override
specifier|public
name|Response
name|pullMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessagePull
name|pull
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MessageReference
argument_list|>
name|remove
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setObjectName
parameter_list|(
name|ObjectName
name|objectName
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|setSelector
parameter_list|(
name|String
name|selector
parameter_list|)
throws|throws
name|InvalidSelectorException
throws|,
name|UnsupportedOperationException
block|{             }
annotation|@
name|Override
specifier|public
name|void
name|updateConsumerPrefetch
parameter_list|(
name|int
name|newPrefetch
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|boolean
name|addRecoveredMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|message
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveMQDestination
name|getActiveMQDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{             }
annotation|@
name|Override
specifier|public
name|int
name|getCursorMemoryHighWaterMark
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCursorMemoryHighWaterMark
parameter_list|(
name|int
name|cursorMemoryHighWaterMark
parameter_list|)
block|{             }
annotation|@
name|Override
specifier|public
name|boolean
name|isSlowConsumer
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unmatched
parameter_list|(
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
block|{             }
annotation|@
name|Override
specifier|public
name|long
name|getTimeOfLastMessageAck
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getConsumedCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|incrementConsumedCount
parameter_list|()
block|{              }
specifier|public
name|void
name|resetConsumedCount
parameter_list|()
block|{              }
block|}
decl_stmt|;
name|queue
operator|.
name|addSubscription
argument_list|(
name|contextNotInTx
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
name|int
name|removeIndex
init|=
literal|0
decl_stmt|;
do|do
block|{
comment|// Simulate periodic acks in small but recent windows
name|long
name|receivedCount
init|=
name|enqueueCounter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|receivedCount
operator|>
name|ackStartIndex
condition|)
block|{
if|if
condition|(
name|receivedCount
operator|>=
name|removeIndex
operator|+
name|ackWindow
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ackBatchSize
condition|;
name|j
operator|++
operator|,
name|removeIndex
operator|++
control|)
block|{
name|ackedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setLastMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|mesageIdRoot
operator|+
name|removeIndex
argument_list|)
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|queue
operator|.
name|removeMessage
argument_list|(
name|contextNotInTx
argument_list|,
name|subscription
argument_list|,
operator|new
name|IndirectMessageReference
argument_list|(
name|getMessage
argument_list|(
name|removeIndex
argument_list|)
argument_list|)
argument_list|,
name|ack
argument_list|)
expr_stmt|;
name|queue
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|removeIndex
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"acked: "
operator|+
name|removeIndex
argument_list|)
expr_stmt|;
name|persistenceAdapter
operator|.
name|checkpoint
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
do|while
condition|(
operator|!
name|receivedLatch
operator|.
name|await
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|&&
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
name|assertTrue
argument_list|(
literal|"There are no errors: "
operator|+
name|errors
argument_list|,
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|enqueueCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"store count is correct"
argument_list|,
name|count
operator|-
name|removeIndex
argument_list|,
name|queueMessageStore
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|getMessage
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|mesageIdRoot
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Msg:"
operator|+
name|i
operator|+
literal|" "
operator|+
name|text
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

