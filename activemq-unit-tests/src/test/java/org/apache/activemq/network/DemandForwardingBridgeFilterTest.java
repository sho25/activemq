begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|StubConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|public
class|class
name|DemandForwardingBridgeFilterTest
extends|extends
name|NetworkTestSupport
block|{
specifier|private
name|DemandForwardingBridge
name|bridge
decl_stmt|;
specifier|private
name|StubConnection
name|producerConnection
decl_stmt|;
specifier|private
name|ProducerInfo
name|producerInfo
decl_stmt|;
specifier|private
name|StubConnection
name|consumerConnection
decl_stmt|;
specifier|private
name|SessionInfo
name|consumerSessionInfo
decl_stmt|;
specifier|public
name|void
name|testWildcardOnExcludedDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|NetworkBridgeConfiguration
name|configuration
init|=
name|getDefaultBridgeConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setExcludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"OTHER.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"TEST"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configureAndStartBridge
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|assertReceiveMessageOn
argument_list|(
literal|"TEST"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
name|assertReceiveNoMessageOn
argument_list|(
literal|"OTHER.T1"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWildcardOnTwoExcludedDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|NetworkBridgeConfiguration
name|configuration
init|=
name|getDefaultBridgeConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setExcludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"OTHER.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|,
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"TEST.X1"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"TEST.X2"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configureAndStartBridge
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|assertReceiveMessageOn
argument_list|(
literal|"TEST.X2"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
name|assertReceiveNoMessageOn
argument_list|(
literal|"OTHER.X1"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
name|assertReceiveNoMessageOn
argument_list|(
literal|"TEST.X1"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWildcardOnDynamicallyIncludedDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|NetworkBridgeConfiguration
name|configuration
init|=
name|getDefaultBridgeConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"OTHER.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|,
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"TEST.X2"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configureAndStartBridge
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|assertReceiveMessageOn
argument_list|(
literal|"OTHER.X1"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
name|assertReceiveMessageOn
argument_list|(
literal|"TEST.X2"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDistinctTopicAndQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|NetworkBridgeConfiguration
name|configuration
init|=
name|getDefaultBridgeConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setExcludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|">"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|">"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configureAndStartBridge
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|assertReceiveMessageOn
argument_list|(
literal|"TEST"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
name|assertReceiveNoMessageOn
argument_list|(
literal|"TEST"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testListOfExcludedDestinationWithWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|NetworkBridgeConfiguration
name|configuration
init|=
name|getDefaultBridgeConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setExcludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"OTHER.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|,
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"TEST.*"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"TEST.X1"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|configureAndStartBridge
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|assertReceiveMessageOn
argument_list|(
literal|"TEST.X1"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
name|assertReceiveNoMessageOn
argument_list|(
literal|"OTHER.T1"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
name|assertReceiveNoMessageOn
argument_list|(
literal|"OTHER.T2"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertReceiveMessageOn
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|byte
name|destinationType
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|ActiveMQDestination
name|destination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
comment|// Send the message to the local broker.
name|producerConnection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|destinationType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the message was delivered via the remote.
name|Message
name|m
init|=
name|createConsumerAndReceiveMessage
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertReceiveNoMessageOn
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|byte
name|destinationType
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|ActiveMQDestination
name|destination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
comment|// Send the message to the local broker.
name|producerConnection
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|,
name|destinationType
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the message was delivered via the remote.
name|Message
name|m
init|=
name|createConsumerAndReceiveMessage
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|createConsumerAndReceiveMessage
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Now create remote consumer that should cause message to move to this
comment|// remote consumer.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|consumerSessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerConnection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|consumerConnection
argument_list|)
decl_stmt|;
return|return
name|m
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|producerConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|ConnectionInfo
name|producerConnectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|producerSessionInfo
init|=
name|createSessionInfo
argument_list|(
name|producerConnectionInfo
argument_list|)
decl_stmt|;
name|producerInfo
operator|=
name|createProducerInfo
argument_list|(
name|producerSessionInfo
argument_list|)
expr_stmt|;
name|producerConnection
operator|.
name|send
argument_list|(
name|producerConnectionInfo
argument_list|)
expr_stmt|;
name|producerConnection
operator|.
name|send
argument_list|(
name|producerSessionInfo
argument_list|)
expr_stmt|;
name|producerConnection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|consumerConnection
operator|=
name|createRemoteConnection
argument_list|()
expr_stmt|;
name|ConnectionInfo
name|consumerConnectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|consumerSessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|consumerConnectionInfo
argument_list|)
expr_stmt|;
name|consumerConnection
operator|.
name|send
argument_list|(
name|consumerConnectionInfo
argument_list|)
expr_stmt|;
name|consumerConnection
operator|.
name|send
argument_list|(
name|consumerSessionInfo
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|bridge
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|DemandForwardingBridgeFilterTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NetworkBridgeConfiguration
name|getDefaultBridgeConfiguration
parameter_list|()
block|{
name|NetworkBridgeConfiguration
name|config
init|=
operator|new
name|NetworkBridgeConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBrokerName
argument_list|(
literal|"local"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
specifier|private
name|void
name|configureAndStartBridge
parameter_list|(
name|NetworkBridgeConfiguration
name|configuration
parameter_list|)
throws|throws
name|Exception
block|{
name|bridge
operator|=
operator|new
name|DemandForwardingBridge
argument_list|(
name|configuration
argument_list|,
name|createTransport
argument_list|()
argument_list|,
name|createRemoteTransport
argument_list|()
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setBrokerService
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|configuration
operator|.
name|getDynamicallyIncludedDestinations
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ActiveMQDestination
index|[
name|configuration
operator|.
name|getDynamicallyIncludedDestinations
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setExcludedDestinations
argument_list|(
name|configuration
operator|.
name|getExcludedDestinations
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ActiveMQDestination
index|[
name|configuration
operator|.
name|getExcludedDestinations
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setStaticallyIncludedDestinations
argument_list|(
name|configuration
operator|.
name|getStaticallyIncludedDestinations
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ActiveMQDestination
index|[
name|configuration
operator|.
name|getStaticallyIncludedDestinations
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

