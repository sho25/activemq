begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|JarURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_comment
comment|/**  * Main class that can bootstrap a ActiveMQ Broker. Handles command line  * argument parsing to set up the broker classpath and System properties.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|Main
block|{
specifier|public
specifier|static
specifier|final
name|int
name|HELP_MAIN
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HELP_START_TASK
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HELP_STOP_TASK
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HELP_LIST_TASK
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|HELP_QUERY_TASK
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TASK_NONE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TASK_START
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TASK_STOP
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TASK_LIST
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TASK_QUERY
init|=
literal|4
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BROKER_FACTORY_CLASS
init|=
literal|"org.apache.activemq.broker.BrokerFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONFIG_URI
init|=
literal|"xbean:activemq.xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_JMX_URL
init|=
literal|"service:jmx:rmi:///jndi/rmi://localhost:1099/jmxconnector"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_JMX_DOMAIN
init|=
literal|"org.apache.activemq"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_KEY_BROKER_NAME
init|=
literal|"BrokerName"
decl_stmt|;
comment|// Predefined type=identifier query
specifier|private
specifier|static
specifier|final
name|Properties
name|PREDEFINED_OBJNAME_QUERY
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Broker"
argument_list|,
literal|"Type=Broker,BrokerName=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Connection"
argument_list|,
literal|"Type=Connection,Connection=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Connector"
argument_list|,
literal|"Type=Connector,ConnectorName=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"NetworkConnector"
argument_list|,
literal|"Type=NetworkConnector,BrokerName=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Queue"
argument_list|,
literal|"Type=Queue,Destination=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Topic"
argument_list|,
literal|"Type=Topic,Destination=%1,*"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|private
specifier|final
name|List
name|brokers
init|=
operator|new
name|ArrayList
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
name|extensions
init|=
operator|new
name|ArrayList
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
name|queryAddObjects
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
name|querySubObjects
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
name|queryViews
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
name|int
name|taskType
init|=
name|TASK_NONE
decl_stmt|;
specifier|private
name|boolean
name|stopAll
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|printHelp
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|printVer
init|=
literal|false
decl_stmt|;
specifier|private
name|JMXServiceURL
name|jmxUrl
decl_stmt|;
specifier|private
name|URI
name|configURI
decl_stmt|;
specifier|private
name|File
name|activeMQHome
decl_stmt|;
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Main
name|app
init|=
operator|new
name|Main
argument_list|()
decl_stmt|;
comment|// Convert arguments to collection for easier management
name|List
name|tokens
init|=
operator|new
name|LinkedList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
decl_stmt|;
comment|// First token should be task type (start|stop|list|query)
name|app
operator|.
name|setTaskType
argument_list|(
name|app
operator|.
name|parseTask
argument_list|(
name|tokens
argument_list|)
argument_list|)
expr_stmt|;
comment|// Succeeding tokens should be task specific options identified by "-" at the start
name|app
operator|.
name|parseOptions
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
comment|// If display version is set, display and quit no matter the task
if|if
condition|(
name|app
operator|.
name|isPrintVersion
argument_list|()
condition|)
block|{
name|app
operator|.
name|printVersion
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Display the main help, if there is no selected task and help flag is set
if|if
condition|(
name|app
operator|.
name|getTaskType
argument_list|()
operator|==
name|TASK_NONE
operator|&&
name|app
operator|.
name|isPrintHelp
argument_list|()
condition|)
block|{
name|app
operator|.
name|printHelp
argument_list|(
name|HELP_MAIN
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Succeeding tokens should be the task data
switch|switch
condition|(
name|app
operator|.
name|getTaskType
argument_list|()
condition|)
block|{
case|case
name|TASK_START
case|:
comment|// Print start task help
if|if
condition|(
name|app
operator|.
name|isPrintHelp
argument_list|()
condition|)
block|{
name|app
operator|.
name|printHelp
argument_list|(
name|HELP_START_TASK
argument_list|)
expr_stmt|;
comment|// Run start broker task
block|}
else|else
block|{
try|try
block|{
name|app
operator|.
name|taskStart
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to execute start task. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TASK_STOP
case|:
comment|// Print stop task help
if|if
condition|(
name|app
operator|.
name|isPrintHelp
argument_list|()
condition|)
block|{
name|app
operator|.
name|printHelp
argument_list|(
name|HELP_STOP_TASK
argument_list|)
expr_stmt|;
comment|// Run stop broker task
block|}
else|else
block|{
try|try
block|{
name|app
operator|.
name|taskStop
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to execute stop task. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TASK_LIST
case|:
comment|// Print list broker help
if|if
condition|(
name|app
operator|.
name|isPrintHelp
argument_list|()
condition|)
block|{
name|app
operator|.
name|printHelp
argument_list|(
name|HELP_LIST_TASK
argument_list|)
expr_stmt|;
comment|// Run list task
block|}
else|else
block|{
try|try
block|{
name|app
operator|.
name|taskList
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to execute list task. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TASK_QUERY
case|:
comment|// Print query broker help
if|if
condition|(
name|app
operator|.
name|isPrintHelp
argument_list|()
condition|)
block|{
name|app
operator|.
name|printHelp
argument_list|(
name|HELP_QUERY_TASK
argument_list|)
expr_stmt|;
comment|// Run query task
block|}
else|else
block|{
try|try
block|{
name|app
operator|.
name|taskQuery
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to execute query task. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TASK_NONE
case|:
break|break;
default|default:
name|app
operator|.
name|printHelp
argument_list|(
name|HELP_MAIN
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|int
name|parseTask
parameter_list|(
name|List
name|tokens
parameter_list|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If no defined arguments, assume start task and default uri
return|return
name|TASK_START
return|;
block|}
comment|// Process task token
name|String
name|taskToken
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|taskToken
operator|.
name|equals
argument_list|(
literal|"start"
argument_list|)
condition|)
block|{
return|return
name|TASK_START
return|;
block|}
elseif|else
if|if
condition|(
name|taskToken
operator|.
name|equals
argument_list|(
literal|"stop"
argument_list|)
condition|)
block|{
return|return
name|TASK_STOP
return|;
block|}
elseif|else
if|if
condition|(
name|taskToken
operator|.
name|equals
argument_list|(
literal|"list"
argument_list|)
condition|)
block|{
return|return
name|TASK_LIST
return|;
block|}
elseif|else
if|if
condition|(
name|taskToken
operator|.
name|equals
argument_list|(
literal|"query"
argument_list|)
condition|)
block|{
return|return
name|TASK_QUERY
return|;
block|}
else|else
block|{
comment|// If not valid task, push back to list
name|tokens
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|taskToken
argument_list|)
expr_stmt|;
return|return
name|TASK_NONE
return|;
block|}
block|}
specifier|public
name|void
name|parseOptions
parameter_list|(
name|List
name|tokens
parameter_list|)
block|{
name|String
name|token
decl_stmt|;
while|while
condition|(
operator|!
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|token
operator|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// If token is an option
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
comment|// If token is a help option
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|token
operator|.
name|equals
argument_list|(
literal|"-?"
argument_list|)
operator|||
name|token
operator|.
name|equals
argument_list|(
literal|"--help"
argument_list|)
condition|)
block|{
name|printHelp
operator|=
literal|true
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
comment|// If token is a version option
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--version"
argument_list|)
condition|)
block|{
name|printVer
operator|=
literal|true
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
comment|// If token is an extension dir option
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--extdir"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|canUseExtdir
argument_list|()
condition|)
block|{
name|printError
argument_list|(
literal|"Extension directory feature not available due to the system classpath being able to load: "
operator|+
name|BROKER_FACTORY_CLASS
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// If no extension directory is specified, or next token is another option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"Extension directory not specified."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Process extension dir token
name|File
name|extDir
init|=
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|extDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|printError
argument_list|(
literal|"Extension directory specified is not valid directory: "
operator|+
name|extDir
argument_list|)
expr_stmt|;
return|return;
block|}
name|addExtensionDirectory
argument_list|(
name|extDir
argument_list|)
expr_stmt|;
block|}
comment|// If token is a system property define option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"-D"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|value
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// If token is a additive predefined query define option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"-Q"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|value
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// If additive query
name|String
name|predefQuery
init|=
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|predefQuery
operator|==
literal|null
condition|)
block|{
name|printError
argument_list|(
literal|"Unknown query object type: "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryStr
init|=
name|createQueryString
argument_list|(
name|predefQuery
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|queryAddObjects
operator|.
name|add
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
block|}
comment|// If token is a substractive predefined query define option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"-xQ"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|token
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|value
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// If subtractive query
name|String
name|predefQuery
init|=
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|predefQuery
operator|==
literal|null
condition|)
block|{
name|printError
argument_list|(
literal|"Unknown query object type: "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryStr
init|=
name|createQueryString
argument_list|(
name|predefQuery
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|querySubObjects
operator|.
name|add
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
block|}
comment|// If token is an additive object name query option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"--objname"
argument_list|)
condition|)
block|{
comment|// If no object name query is specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"Object name query not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryString
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|queryAddObjects
operator|.
name|add
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
comment|// If token is a substractive object name query option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"--xobjname"
argument_list|)
condition|)
block|{
comment|// If no object name query is specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"Object name query not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryString
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|querySubObjects
operator|.
name|add
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
comment|// If token is a view option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"--view"
argument_list|)
condition|)
block|{
comment|// If no view specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"Attributes to view not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Add the attributes to view
name|Enumeration
name|viewTokens
init|=
operator|new
name|StringTokenizer
argument_list|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|viewTokens
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|queryViews
operator|.
name|add
argument_list|(
name|viewTokens
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If token is a JMX URL option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"--jmxurl"
argument_list|)
condition|)
block|{
comment|// If no jmx url specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"JMX URL not specified."
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// If jmx url already specified
if|if
condition|(
name|getJmxUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|printError
argument_list|(
literal|"Multiple JMX URL cannot be specified."
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|strJmxUrl
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|setJmxUrl
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|strJmxUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Invalid JMX URL format: "
operator|+
name|strJmxUrl
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// If token is stop all broker option
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--all"
argument_list|)
condition|)
block|{
name|stopAll
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ignoring unrecognized option: "
operator|+
name|token
argument_list|)
expr_stmt|;
block|}
comment|// Finish parsing options
block|}
else|else
block|{
comment|// If not valid option, push back to list
name|tokens
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|token
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|protected
name|void
name|taskStart
parameter_list|(
name|List
name|brokerURIs
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Flag an error if there are multiple configuration uris
comment|//        if (brokerURIs.size()> 1) {
comment|//            printError("Multiple configuration uris or broker names cannot be specified.");
comment|//            brokerURIs.clear();
comment|//            return;
comment|//        }
comment|// Add the default directories.
if|if
condition|(
name|canUseExtdir
argument_list|()
condition|)
block|{
name|addExtensionDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|getActiveMQHome
argument_list|()
argument_list|,
literal|"conf"
argument_list|)
argument_list|)
expr_stmt|;
name|addExtensionDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|getActiveMQHome
argument_list|()
argument_list|,
literal|"lib"
argument_list|)
argument_list|)
expr_stmt|;
name|addExtensionDirectory
argument_list|(
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|getActiveMQHome
argument_list|()
argument_list|,
literal|"lib"
argument_list|)
argument_list|,
literal|"optional"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If no config uri, use default setting
if|if
condition|(
name|brokerURIs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setConfigUri
argument_list|(
name|getDefaultUri
argument_list|()
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|getConfigUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set configuration data, if available, which in this case would be the config URI
block|}
else|else
block|{
name|String
name|strConfigURI
decl_stmt|;
while|while
condition|(
operator|!
name|brokerURIs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|strConfigURI
operator|=
operator|(
name|String
operator|)
name|brokerURIs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|setConfigUri
argument_list|(
operator|new
name|URI
argument_list|(
name|strConfigURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|printError
argument_list|(
literal|"Invalid broker configuration URI: "
operator|+
name|strConfigURI
operator|+
literal|", reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|startBroker
argument_list|(
name|getConfigUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Prevent the main thread from exiting unless it is terminated elsewhere
name|waitForShutdown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|taskStop
parameter_list|(
name|List
name|brokerNames
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Check if there is a user-specified JMX URL
if|if
condition|(
name|getJmxUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setJmxUrl
argument_list|(
name|getDefaultJmxUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Stop all brokers
if|if
condition|(
name|isStopAllBrokers
argument_list|()
condition|)
block|{
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|getJmxUrl
argument_list|()
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|brokerObjName
init|=
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":Type=Broker,*"
argument_list|)
decl_stmt|;
name|stopBroker
argument_list|(
name|server
argument_list|,
name|brokerObjName
argument_list|)
expr_stmt|;
name|brokerNames
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Maybe no need to close, since context is already closed by broker
comment|//jmxConnector.close();
return|return;
block|}
comment|// Stop the default broker
if|if
condition|(
name|brokerNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
name|brokerList
init|=
name|getBrokerList
argument_list|(
name|getJmxUrl
argument_list|()
argument_list|)
decl_stmt|;
comment|// If there is no broker to stop
if|if
condition|(
name|brokerList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"There are no brokers to stop."
argument_list|)
expr_stmt|;
return|return;
comment|// There should only be one broker to stop
block|}
elseif|else
if|if
condition|(
name|brokerList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"There are multiple brokers to stop. Please select the broker(s) to stop or use --all to stop all brokers."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|printBrokerList
argument_list|(
name|brokerList
argument_list|)
expr_stmt|;
return|return;
comment|// Stop the only running broker
block|}
else|else
block|{
name|Iterator
name|brokerIter
init|=
name|brokerList
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|getJmxUrl
argument_list|()
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|this
operator|.
name|stopBroker
argument_list|(
name|server
argument_list|,
operator|(
operator|(
name|ObjectInstance
operator|)
name|brokerIter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Maybe no need to close, since context is already closed by broker
comment|//jmxConnector.close();
return|return;
block|}
block|}
comment|// Stop each specified broker
name|String
name|brokerName
decl_stmt|;
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|getJmxUrl
argument_list|()
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|brokerNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|brokerName
operator|=
operator|(
name|String
operator|)
name|brokerNames
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|stopBroker
argument_list|(
name|server
argument_list|,
name|brokerName
argument_list|)
expr_stmt|;
block|}
comment|// Maybe be no need to close, since context is already closed by broker
comment|//jmxConnector.close();
block|}
specifier|protected
name|void
name|taskList
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Check if there is a user-specified JMX URL
if|if
condition|(
name|getJmxUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setJmxUrl
argument_list|(
name|getDefaultJmxUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|printBrokerList
argument_list|(
name|getBrokerList
argument_list|(
name|getJmxUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|taskQuery
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Check if there is a user-specified JMX URL
if|if
condition|(
name|getJmxUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setJmxUrl
argument_list|(
name|getDefaultJmxUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Connect to jmx server
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|getJmxUrl
argument_list|()
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
comment|// Query for the mbeans to add
name|Set
name|addMBeans
init|=
name|queryMBeans
argument_list|(
name|server
argument_list|,
name|getAddQueryObjects
argument_list|()
argument_list|)
decl_stmt|;
comment|// Query for the mbeans to sub
if|if
condition|(
name|getSubQueryObjects
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Set
name|subMBeans
init|=
name|queryMBeans
argument_list|(
name|server
argument_list|,
name|getSubQueryObjects
argument_list|()
argument_list|)
decl_stmt|;
name|addMBeans
operator|.
name|removeAll
argument_list|(
name|subMBeans
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|addMBeans
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectInstance
name|mbean
init|=
operator|(
name|ObjectInstance
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|printMBeanProp
argument_list|(
name|mbean
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|printMBeanAttr
argument_list|(
name|server
argument_list|,
name|mbean
argument_list|,
name|getQueryViews
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|jmxConnector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startBroker
parameter_list|(
name|URI
name|configURI
parameter_list|)
throws|throws
name|Throwable
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Loading Message Broker from: "
operator|+
name|configURI
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ACTIVEMQ_HOME: "
operator|+
name|getActiveMQHome
argument_list|()
argument_list|)
expr_stmt|;
name|ClassLoader
name|cl
init|=
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// Use reflection to start the broker up.
name|Object
name|broker
decl_stmt|;
try|try
block|{
name|Class
name|brokerFactory
init|=
name|cl
operator|.
name|loadClass
argument_list|(
name|BROKER_FACTORY_CLASS
argument_list|)
decl_stmt|;
name|Method
name|createBroker
init|=
name|brokerFactory
operator|.
name|getMethod
argument_list|(
literal|"createBroker"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|URI
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|broker
operator|=
name|createBroker
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|configURI
block|}
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|add
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|Method
name|start
init|=
name|broker
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"start"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|start
operator|.
name|invoke
argument_list|(
name|broker
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|addExtensionDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|extensions
operator|.
name|add
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForShutdown
parameter_list|()
throws|throws
name|Throwable
block|{
comment|// Prevent the main thread from exiting, in case this is the last user thread
specifier|final
name|boolean
index|[]
name|shutdown
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|shutdown
init|)
block|{
name|shutdown
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|shutdown
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|shutdown
init|)
block|{
while|while
condition|(
operator|!
name|shutdown
index|[
literal|0
index|]
condition|)
block|{
name|shutdown
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Use reflection to stop the broker in case, the vm was exited via unconventional means
try|try
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|brokers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|broker
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Method
name|stop
init|=
name|broker
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"stop"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|stop
operator|.
name|invoke
argument_list|(
name|broker
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|stopBroker
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|String
name|brokerName
parameter_list|)
block|{
name|ObjectName
name|brokerObjName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|brokerObjName
operator|=
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":Type=Broker,"
operator|+
name|DEFAULT_KEY_BROKER_NAME
operator|+
literal|"="
operator|+
name|brokerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Invalid broker name: "
operator|+
name|brokerName
argument_list|)
expr_stmt|;
return|return;
block|}
name|stopBroker
argument_list|(
name|server
argument_list|,
name|brokerObjName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stopBroker
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|ObjectName
name|brokerObjName
parameter_list|)
block|{
try|try
block|{
name|Set
name|brokerList
init|=
name|server
operator|.
name|queryMBeans
argument_list|(
name|brokerObjName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Stop each broker that matches the object name
for|for
control|(
name|Iterator
name|i
init|=
name|brokerList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|broker
init|=
operator|(
operator|(
name|ObjectInstance
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getObjectName
argument_list|()
decl_stmt|;
name|String
name|brokerName
init|=
name|broker
operator|.
name|getKeyProperty
argument_list|(
name|DEFAULT_KEY_BROKER_NAME
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Stopping broker: "
operator|+
name|brokerName
argument_list|)
expr_stmt|;
try|try
block|{
name|server
operator|.
name|invoke
argument_list|(
name|broker
argument_list|,
literal|"terminateJVM"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"int"
block|}
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Succesfully stopped broker: "
operator|+
name|brokerName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// TODO: Check exceptions throwned
comment|//System.out.println("Failed to stop broker: [ " + brokerName + " ]. Reason: " + e.getMessage());
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to execute stop task. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|public
name|Set
name|queryMBeans
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|List
name|queryList
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|mbeans
decl_stmt|;
comment|// If there is no query defined get all mbeans
if|if
condition|(
name|queryList
operator|==
literal|null
operator|||
name|queryList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ObjectName
name|queryName
init|=
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":*"
argument_list|)
decl_stmt|;
name|mbeans
operator|=
name|server
operator|.
name|queryMBeans
argument_list|(
name|queryName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Construct the object name based on the query
block|}
else|else
block|{
name|mbeans
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|queryList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|queryStr
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Transform string to support regex filtering
name|List
name|regexProp
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|queryStr
operator|=
name|createSimpleRegExQuery
argument_list|(
name|queryStr
argument_list|,
name|regexProp
argument_list|)
expr_stmt|;
name|ObjectName
name|queryName
init|=
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":"
operator|+
name|queryStr
argument_list|)
decl_stmt|;
name|mbeans
operator|.
name|addAll
argument_list|(
name|filterUsingRegEx
argument_list|(
name|server
operator|.
name|queryMBeans
argument_list|(
name|queryName
argument_list|,
literal|null
argument_list|)
argument_list|,
name|regexProp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mbeans
return|;
block|}
specifier|public
name|Map
name|queryMBeanAttrs
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|ObjectName
name|mbeanObjName
parameter_list|,
name|List
name|attrView
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|attr
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|MBeanAttributeInfo
index|[]
name|attrs
init|=
name|server
operator|.
name|getMBeanInfo
argument_list|(
name|mbeanObjName
argument_list|)
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
comment|// If the mbean has no attribute, print a no attribute message
if|if
condition|(
name|attrs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// If there is no view specified, get all attributes
if|if
condition|(
name|attrView
operator|==
literal|null
operator|||
name|attrView
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|attrVal
init|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbeanObjName
argument_list|,
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|put
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|attrVal
argument_list|)
expr_stmt|;
block|}
return|return
name|attr
return|;
block|}
comment|// Get attributes specified by view
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attrView
operator|.
name|contains
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|attrVal
init|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbeanObjName
argument_list|,
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|put
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|attrVal
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attr
return|;
block|}
specifier|protected
name|String
name|createQueryString
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|param
parameter_list|)
block|{
return|return
name|query
operator|.
name|replaceAll
argument_list|(
literal|"%1"
argument_list|,
name|param
argument_list|)
return|;
block|}
specifier|protected
name|String
name|createQueryString
parameter_list|(
name|String
name|query
parameter_list|,
name|List
name|params
parameter_list|)
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|params
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|query
operator|.
name|replaceAll
argument_list|(
literal|"%"
operator|+
name|count
operator|++
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|protected
name|String
name|createSimpleRegExQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|List
name|regExMap
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|regExMap
operator|==
literal|null
condition|)
block|{
name|regExMap
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|StringBuffer
name|newQueryStr
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|","
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// Get key value pair
name|String
name|key
init|=
name|token
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|value
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// Check if value is a wildcard query
if|if
condition|(
operator|(
name|value
operator|.
name|indexOf
argument_list|(
literal|"*"
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
name|value
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
comment|// If value is a wildcard query, convert to regex
comment|// and remove the object name query to ensure it selects all
name|regExMap
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)("
operator|+
name|key
operator|+
literal|"=)("
operator|+
name|transformWildcardQueryToRegEx
argument_list|(
name|value
argument_list|)
operator|+
literal|")(,)(.*)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-add valid key value pair. Remove all * property and just add one at the end.
block|}
elseif|else
if|if
condition|(
operator|(
name|key
operator|!=
literal|""
operator|)
operator|&&
operator|(
name|value
operator|!=
literal|""
operator|)
condition|)
block|{
name|newQueryStr
operator|.
name|append
argument_list|(
name|key
operator|+
literal|"="
operator|+
name|value
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|newQueryStr
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
return|return
name|newQueryStr
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|transformWildcardQueryToRegEx
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"[.]"
argument_list|,
literal|"\\\\."
argument_list|)
expr_stmt|;
comment|// Escape all dot characters. From (.) to (\.)
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"[?]"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"[*]"
argument_list|,
literal|".*?"
argument_list|)
expr_stmt|;
comment|// Use reluctant quantifier
return|return
name|query
return|;
block|}
specifier|protected
name|Set
name|filterUsingRegEx
parameter_list|(
name|Set
name|mbeans
parameter_list|,
name|List
name|regexProp
parameter_list|)
block|{
comment|// No regular expressions filtering needed
if|if
condition|(
name|regexProp
operator|==
literal|null
operator|||
name|regexProp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mbeans
return|;
block|}
name|Set
name|filteredMbeans
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// Get each bean to filter
for|for
control|(
name|Iterator
name|i
init|=
name|mbeans
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectInstance
name|mbeanInstance
init|=
operator|(
name|ObjectInstance
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|mbeanName
init|=
name|mbeanInstance
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyPropertyListString
argument_list|()
decl_stmt|;
comment|// Ensure name ends with ,* to guarantee correct parsing behavior
if|if
condition|(
operator|!
name|mbeanName
operator|.
name|endsWith
argument_list|(
literal|",*"
argument_list|)
condition|)
block|{
name|mbeanName
operator|=
name|mbeanName
operator|+
literal|",*"
expr_stmt|;
block|}
name|boolean
name|match
init|=
literal|true
decl_stmt|;
comment|// Match the object name to each regex
for|for
control|(
name|Iterator
name|j
init|=
name|regexProp
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Pattern
name|p
init|=
operator|(
name|Pattern
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|matcher
argument_list|(
name|mbeanName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// If name of mbean matches all regex pattern, add it
if|if
condition|(
name|match
condition|)
block|{
name|filteredMbeans
operator|.
name|add
argument_list|(
name|mbeanInstance
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredMbeans
return|;
block|}
comment|/**      * The extension directory feature will not work if the broker factory is already in the classpath      * since we have to load him from a child ClassLoader we build for it to work correctly.      *      * @return      */
specifier|public
name|boolean
name|canUseExtdir
parameter_list|()
block|{
try|try
block|{
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|BROKER_FACTORY_CLASS
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|void
name|printHelp
parameter_list|(
name|int
name|helpIndex
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taskHelp
index|[
name|helpIndex
index|]
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|taskHelp
index|[
name|helpIndex
index|]
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printAllHelp
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taskHelp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|printHelp
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|setTaskType
argument_list|(
name|TASK_NONE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|printVersion
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ActiveMQ "
operator|+
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ActiveMQ<unknown version>"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"For help or more information please see: http://www.logicblaze.com"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printBrokerList
parameter_list|(
name|Set
name|brokerList
parameter_list|)
block|{
name|Object
index|[]
name|brokerArray
init|=
name|brokerList
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"List of available brokers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|brokerArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|brokerName
init|=
operator|(
operator|(
name|ObjectInstance
operator|)
name|brokerArray
index|[
name|i
index|]
operator|)
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyProperty
argument_list|(
literal|"BrokerName"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".) "
operator|+
name|brokerName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printMBeanProp
parameter_list|(
name|ObjectInstance
name|mbean
parameter_list|,
name|List
name|propView
parameter_list|)
block|{
comment|// Filter properties to print
if|if
condition|(
name|propView
operator|!=
literal|null
operator|&&
operator|!
name|propView
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
name|mbeanProps
init|=
name|mbean
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|propView
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|mbeanProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MBean "
operator|+
name|key
operator|+
literal|": "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Print all properties
block|}
else|else
block|{
name|Map
name|mbeanProps
init|=
name|mbean
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mbeanProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|mbeanProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MBean "
operator|+
name|key
operator|+
literal|": "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|printMBeanAttr
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|ObjectInstance
name|mbean
parameter_list|,
name|List
name|attrView
parameter_list|)
block|{
try|try
block|{
name|Map
name|attrList
init|=
name|queryMBeanAttrs
argument_list|(
name|server
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|attrView
argument_list|)
decl_stmt|;
comment|// If the mbean has no attribute, print a no attribute message
if|if
condition|(
name|attrList
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    MBean has no attributes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// If the mbean's attributes did not match any of the view, display a message
if|if
condition|(
name|attrList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    View did not match any of the mbean's attributes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Display mbean attributes
comment|// If attrView is available, use it. This allows control over the display order
if|if
condition|(
name|attrView
operator|!=
literal|null
operator|&&
operator|!
name|attrView
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|attrView
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|attrList
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|key
operator|+
literal|" = "
operator|+
name|attrList
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If attrView is not available, print all attributes
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|attrList
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|key
operator|+
literal|" = "
operator|+
name|attrList
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to print mbean attributes. Reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Property setters and getters
specifier|public
name|void
name|setTaskType
parameter_list|(
name|int
name|taskType
parameter_list|)
block|{
name|this
operator|.
name|taskType
operator|=
name|taskType
expr_stmt|;
block|}
specifier|public
name|int
name|getTaskType
parameter_list|()
block|{
return|return
name|taskType
return|;
block|}
specifier|public
name|void
name|setJmxUrl
parameter_list|(
name|JMXServiceURL
name|url
parameter_list|)
block|{
name|jmxUrl
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|JMXServiceURL
name|getJmxUrl
parameter_list|()
block|{
return|return
name|jmxUrl
return|;
block|}
specifier|public
name|JMXServiceURL
name|getDefaultJmxUrl
parameter_list|()
throws|throws
name|MalformedURLException
block|{
return|return
operator|new
name|JMXServiceURL
argument_list|(
name|DEFAULT_JMX_URL
argument_list|)
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|Throwable
block|{
name|ClassLoader
name|cl
init|=
name|getClassLoader
argument_list|()
decl_stmt|;
comment|// Use reflection to get the version
try|try
block|{
name|Class
name|activeMQConnectionMetaData
init|=
name|cl
operator|.
name|loadClass
argument_list|(
literal|"org.apache.activemq.ActiveMQConnectionMetaData"
argument_list|)
decl_stmt|;
name|Field
name|field
init|=
name|activeMQConnectionMetaData
operator|.
name|getField
argument_list|(
literal|"PROVIDER_VERSION"
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|URI
name|getDefaultUri
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|URI
argument_list|(
name|DEFAULT_CONFIG_URI
argument_list|)
return|;
block|}
specifier|public
name|void
name|setConfigUri
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|configURI
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|URI
name|getConfigUri
parameter_list|()
block|{
return|return
name|configURI
return|;
block|}
specifier|public
name|boolean
name|isStopAllBrokers
parameter_list|()
block|{
return|return
name|stopAll
return|;
block|}
specifier|public
name|boolean
name|isPrintVersion
parameter_list|()
block|{
return|return
name|printVer
return|;
block|}
specifier|public
name|boolean
name|isPrintHelp
parameter_list|()
block|{
return|return
name|printHelp
return|;
block|}
specifier|public
name|List
name|getAddQueryObjects
parameter_list|()
block|{
return|return
name|queryAddObjects
return|;
block|}
specifier|public
name|List
name|getSubQueryObjects
parameter_list|()
block|{
return|return
name|querySubObjects
return|;
block|}
specifier|public
name|List
name|getQueryViews
parameter_list|()
block|{
return|return
name|queryViews
return|;
block|}
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
comment|//
comment|// Setup the ClassLoader
comment|//
name|classLoader
operator|=
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|extensions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArrayList
name|urls
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|extensions
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|dir
init|=
operator|(
name|File
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|urls
operator|.
name|add
argument_list|(
name|dir
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|files
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|files
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|||
name|files
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|files
index|[
name|j
index|]
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|URL
name|u
index|[]
init|=
operator|new
name|URL
index|[
name|urls
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|urls
operator|.
name|toArray
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|classLoader
operator|=
operator|new
name|URLClassLoader
argument_list|(
name|u
argument_list|,
name|classLoader
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
return|return
name|classLoader
return|;
block|}
specifier|public
name|void
name|setActiveMQHome
parameter_list|(
name|File
name|activeMQHome
parameter_list|)
block|{
name|this
operator|.
name|activeMQHome
operator|=
name|activeMQHome
expr_stmt|;
block|}
specifier|public
name|File
name|getActiveMQHome
parameter_list|()
block|{
if|if
condition|(
name|activeMQHome
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"activemq.home"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|activeMQHome
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"activemq.home"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|activeMQHome
operator|==
literal|null
condition|)
block|{
comment|// guess from the location of the jar
name|URL
name|url
init|=
name|Main
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"org/apache/activemq/broker/Main.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JarURLConnection
name|jarConnection
init|=
operator|(
name|JarURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|url
operator|=
name|jarConnection
operator|.
name|getJarFileURL
argument_list|()
expr_stmt|;
name|URI
name|baseURI
init|=
operator|new
name|URI
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|resolve
argument_list|(
literal|".."
argument_list|)
decl_stmt|;
name|activeMQHome
operator|=
operator|new
name|File
argument_list|(
name|baseURI
argument_list|)
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                     }
block|}
block|}
if|if
condition|(
name|activeMQHome
operator|==
literal|null
condition|)
block|{
name|activeMQHome
operator|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|activeMQHome
return|;
block|}
specifier|public
name|Set
name|getBrokerList
parameter_list|(
name|JMXServiceURL
name|jmxUrl
parameter_list|)
throws|throws
name|Throwable
block|{
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|jmxUrl
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|ObjectName
name|brokerObjName
init|=
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":Type=Broker,*"
argument_list|)
decl_stmt|;
name|Set
name|brokerMBeans
init|=
name|server
operator|.
name|queryMBeans
argument_list|(
name|brokerObjName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|jmxConnector
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|brokerMBeans
return|;
block|}
comment|// This section contains an array of the help notes of the different tasks
specifier|private
specifier|static
specifier|final
name|String
index|[]
index|[]
name|taskHelp
init|=
block|{
comment|// Main task help
block|{
literal|"Usage: Main [task] [task-options] [task data]"
block|,
literal|""
block|,
literal|"Tasks (default task is start):"
block|,
literal|"    start        - Creates and starts a broker using a configuration file, or a broker URI."
block|,
literal|"    stop         - Stops a running broker specified by the broker name."
block|,
literal|"    list         - Lists all available broker in the specified JMX context."
block|,
literal|"    query        - Display selected broker component's attributes and statistics."
block|,
literal|"    --version    - Display the version information."
block|,
literal|"    -h,-?,--help - Display this help information. To display task specific help, use Main [task] -h,-?,--help"
block|,
literal|""
block|,
literal|"Task Options:"
block|,
literal|"    - Properties specific to each task."
block|,
literal|""
block|,
literal|"Task Data:"
block|,
literal|"    - Information needed by each specific task."
block|,
literal|""
block|}
block|,
comment|// Start broker task help
block|{
literal|"Task Usage: Main start [start-options] [uri]"
block|,
literal|"Description: Creates and starts a broker using a configuration file, or a broker URI."
block|,
literal|""
block|,
literal|"Start Options:"
block|,
literal|"    --extdir<dir>        Add the jar files in the directory to the classpath."
block|,
literal|"    -D<name>=<value>      Define a system property."
block|,
literal|"    --version             Display the version information."
block|,
literal|"    -h,-?,--help          Display the start broker help information."
block|,
literal|""
block|,
literal|"URI:"
block|,
literal|""
block|,
literal|"    XBean based broker configuration:"
block|,
literal|""
block|,
literal|"        Example: Main xbean:file:activemq.xml"
block|,
literal|"            Loads the xbean configuration file from the current working directory"
block|,
literal|"        Example: Main xbean:activemq.xml"
block|,
literal|"            Loads the xbean configuration file from the classpath"
block|,
literal|""
block|,
literal|"    URI Parameter based broker configuration:"
block|,
literal|""
block|,
literal|"        Example: Main broker:(tcp://localhost:61616, tcp://localhost:5000)?useJmx=true"
block|,
literal|"            Configures the broker with 2 transport connectors and jmx enabled"
block|,
literal|"        Example: Main broker:(tcp://localhost:61616, network:tcp://localhost:5000)?persistent=false"
block|,
literal|"            Configures the broker with 1 transport connector, and 1 network connector and persistence disabled"
block|,
literal|""
block|}
block|,
comment|// Stop broker task help
block|{
literal|"Task Usage: Main stop [stop-options] [broker-name1] [broker-name2] ..."
block|,
literal|"Description: Stops a running broker."
block|,
literal|""
block|,
literal|"Stop Options:"
block|,
literal|"    --jmxurl<url>      Set the JMX URL to connect to."
block|,
literal|"    --all               Stop all brokers."
block|,
literal|"    --version           Display the version information."
block|,
literal|"    -h,-?,--help        Display the stop broker help information."
block|,
literal|""
block|,
literal|"Broker Names:"
block|,
literal|"    Name of the brokers that will be stopped."
block|,
literal|"    If omitted, it is assumed that there is only one broker running, and it will be stopped."
block|,
literal|"    Use -all to stop all running brokers."
block|,
literal|""
block|}
block|,
comment|// List brokers task help
block|{
literal|"Task Usage: Main list [list-options]"
block|,
literal|"Description:  Lists all available broker in the specified JMX context."
block|,
literal|""
block|,
literal|"List Options:"
block|,
literal|"    --jmxurl<url>      Set the JMX URL to connect to."
block|,
literal|"    --version           Display the version information."
block|,
literal|"    -h,-?,--help        Display the stop broker help information."
block|,
literal|""
block|,         }
block|,
comment|// Query brokers task help
block|{
literal|"Task Usage: Main query [query-options]"
block|,
literal|"Description: Display selected broker component's attributes and statistics."
block|,
literal|""
block|,
literal|"Query Options:"
block|,
literal|"    -Q<type>=<name>               Add to the search list the specific object type matched by the defined object identifier."
block|,
literal|"    -xQ<type>=<name>              Remove from the search list the specific object type matched by the object identifier."
block|,
literal|"    --objname<query>             Add to the search list objects matched by the query similar to the JMX object name format."
block|,
literal|"    --xobjname<query>            Remove from the search list objects matched by the query similar to the JMX object name format."
block|,
literal|"    --view<attr1>,<attr2>,...    Select the specific attribute of the object to view. By default all attributes will be displayed."
block|,
literal|"    --jmxurl<url>                Set the JMX URL to connect to."
block|,
literal|"    --version                     Display the version information."
block|,
literal|"    -h,-?,--help                  Display the query broker help information."
block|,
literal|""
block|,
literal|"Examples:"
block|,
literal|"    Main query"
block|,
literal|"        - Print all the attributes of all registered objects (queues, topics, connections, etc)."
block|,
literal|""
block|,
literal|"    Main query -QQueue=TEST.FOO"
block|,
literal|"        - Print all the attributes of the queue with destination name TEST.FOO."
block|,
literal|""
block|,
literal|"    Main query -QTopic=*"
block|,
literal|"        - Print all the attributes of all registered topics."
block|,
literal|""
block|,
literal|"    Main query --view EnqueueCount,DequeueCount"
block|,
literal|"        - Print the attributes EnqueueCount and DequeueCount of all registered objects."
block|,
literal|""
block|,
literal|"    Main -QTopic=* --view EnqueueCount,DequeueCount"
block|,
literal|"        - Print the attributes EnqueueCount and DequeueCount of all registered topics."
block|,
literal|""
block|,
literal|"    Main -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount"
block|,
literal|"        - Print the attributes EnqueueCount and DequeueCount of all registered topics and queues."
block|,
literal|""
block|,
literal|"    Main -QTopic=* -xQTopic=ActiveMQ.Advisory.*"
block|,
literal|"        - Print all attributes of all topics except those that has a name that begins with \"ActiveMQ.Advisory\"."
block|,
literal|""
block|,
literal|"    Main --objname Type=*Connect*,BrokerName=local* -xQNetworkConnector=*"
block|,
literal|"        - Print all attributes of all connectors, connections excluding network connectors that belongs to the broker that begins with local."
block|,
literal|""
block|,
literal|"    Main -QQueue=* -xQQueue=????"
block|,
literal|"        - Print all attributes of all queues except those that are 4 letters long."
block|,
literal|""
block|,         }
block|}
decl_stmt|;
block|}
end_class

end_unit

