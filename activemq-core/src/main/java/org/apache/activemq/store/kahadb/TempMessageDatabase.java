begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAddMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveDestinationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaSubscriptionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
operator|.
name|BTreeIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|LongMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|StringMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_class
specifier|public
class|class
name|TempMessageDatabase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TempMessageDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CLOSED_STATE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OPEN_STATE
init|=
literal|2
decl_stmt|;
specifier|protected
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|destinations
decl_stmt|;
specifier|protected
name|PageFile
name|pageFile
decl_stmt|;
specifier|protected
name|File
name|directory
decl_stmt|;
name|boolean
name|enableIndexWriteAsync
init|=
literal|true
decl_stmt|;
name|int
name|setIndexWriteBatchSize
init|=
name|PageFile
operator|.
name|DEFAULT_WRITE_BATCH_SIZE
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|opened
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|public
name|TempMessageDatabase
parameter_list|()
block|{     }
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|load
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|unload
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadPageFile
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
specifier|final
name|PageFile
name|pageFile
init|=
name|getPageFile
argument_list|()
decl_stmt|;
name|pageFile
operator|.
name|load
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|destinations
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|StoredDestinationMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pageFile
operator|.
name|flush
argument_list|()
expr_stmt|;
name|storedDestinations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * @throws IOException 	 */
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|opened
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|loadPageFile
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|open
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|unload
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|loadPageFile
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|opened
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|unload
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|unload
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
if|if
condition|(
name|pageFile
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processAdd
parameter_list|(
specifier|final
name|KahaAddMessageCommand
name|command
parameter_list|,
name|TransactionId
name|txid
parameter_list|,
specifier|final
name|ByteSequence
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|txid
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|getInflightTx
argument_list|(
name|txid
argument_list|)
decl_stmt|;
name|inflightTx
operator|.
name|add
argument_list|(
operator|new
name|AddOpperation
argument_list|(
name|command
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|upadateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processRemove
parameter_list|(
specifier|final
name|KahaRemoveMessageCommand
name|command
parameter_list|,
name|TransactionId
name|txid
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|txid
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|getInflightTx
argument_list|(
name|txid
argument_list|)
decl_stmt|;
name|inflightTx
operator|.
name|add
argument_list|(
operator|new
name|RemoveOpperation
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|KahaRemoveDestinationCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|process
parameter_list|(
specifier|final
name|KahaSubscriptionCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processCommit
parameter_list|(
name|TransactionId
name|key
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|inflightTx
operator|==
literal|null
condition|)
block|{
name|inflightTx
operator|=
name|preparedTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inflightTx
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|messagingTx
init|=
name|inflightTx
decl_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Operation
name|op
range|:
name|messagingTx
control|)
block|{
name|op
operator|.
name|execute
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|processPrepare
parameter_list|(
name|TransactionId
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
block|{
name|preparedTransactions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|processRollback
parameter_list|(
name|TransactionId
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
name|preparedTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// These methods do the actual index updates.
comment|// /////////////////////////////////////////////////////////////////
specifier|protected
specifier|final
name|Object
name|indexMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|journalFilesBeingReplicated
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|void
name|upadateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaAddMessageCommand
name|command
parameter_list|,
name|ByteSequence
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
comment|// Skip adding the message to the index if this is a topic and there are
comment|// no subscriptions.
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
operator|&&
name|sd
operator|.
name|ackPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Add the message.
name|long
name|id
init|=
name|sd
operator|.
name|nextMessageId
operator|++
decl_stmt|;
name|Long
name|previous
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|sd
operator|.
name|orderIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
operator|new
name|MessageRecord
argument_list|(
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// restore the previous value.. Looks like this was a redo of a previously
comment|// added message.  We don't want to assing it a new id as the other indexes would
comment|// be wrong..
name|sd
operator|.
name|messageIdIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaRemoveMessageCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|command
operator|.
name|hasSubscriptionKey
argument_list|()
condition|)
block|{
comment|// In the queue case we just remove the message from the index..
name|Long
name|sequenceId
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequenceId
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// In the topic case we need remove the message once it's been acked
comment|// by all the subs
name|Long
name|sequence
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make sure it's a valid message id...
if|if
condition|(
name|sequence
operator|!=
literal|null
condition|)
block|{
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
name|Long
name|prev
init|=
name|sd
operator|.
name|subscriptionAcks
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|sequence
argument_list|)
decl_stmt|;
comment|// The following method handles deleting un-referenced messages.
name|removeAckByteSequence
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Add it to the new location set.
name|addAckByteSequence
argument_list|(
name|sd
argument_list|,
name|sequence
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaRemoveDestinationCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|orderIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|messageIdIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|subscriptions
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptions
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|subscriptions
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|subscriptionAcks
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|key
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|storedDestinations
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaSubscriptionCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
comment|// If set then we are creating it.. otherwise we are destroying the sub
if|if
condition|(
name|command
operator|.
name|hasSubscriptionInfo
argument_list|()
condition|)
block|{
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
name|sd
operator|.
name|subscriptions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|long
name|ackByteSequence
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|command
operator|.
name|getRetroactive
argument_list|()
condition|)
block|{
name|ackByteSequence
operator|=
name|sd
operator|.
name|nextMessageId
operator|-
literal|1
expr_stmt|;
block|}
name|sd
operator|.
name|subscriptionAcks
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|ackByteSequence
argument_list|)
expr_stmt|;
name|addAckByteSequence
argument_list|(
name|sd
argument_list|,
name|ackByteSequence
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delete the sub...
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
name|sd
operator|.
name|subscriptions
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
name|Long
name|prev
init|=
name|sd
operator|.
name|subscriptionAcks
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|removeAckByteSequence
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|getJournalFilesBeingReplicated
parameter_list|()
block|{
return|return
name|journalFilesBeingReplicated
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// StoredDestination related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|storedDestinations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|()
decl_stmt|;
class|class
name|StoredSubscription
block|{
name|SubscriptionInfo
name|subscriptionInfo
decl_stmt|;
name|String
name|lastAckId
decl_stmt|;
name|ByteSequence
name|lastAckByteSequence
decl_stmt|;
name|ByteSequence
name|cursor
decl_stmt|;
block|}
specifier|static
class|class
name|MessageRecord
block|{
specifier|final
name|String
name|messageId
decl_stmt|;
specifier|final
name|ByteSequence
name|data
decl_stmt|;
specifier|public
name|MessageRecord
parameter_list|(
name|String
name|messageId
parameter_list|,
name|ByteSequence
name|location
parameter_list|)
block|{
name|this
operator|.
name|messageId
operator|=
name|messageId
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|messageId
operator|+
literal|","
operator|+
name|data
operator|+
literal|"]"
return|;
block|}
block|}
specifier|static
specifier|protected
class|class
name|MessageKeysMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|MessageRecord
argument_list|>
block|{
specifier|static
specifier|final
name|MessageKeysMarshaller
name|INSTANCE
init|=
operator|new
name|MessageKeysMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|MessageRecord
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MessageRecord
argument_list|(
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|,
name|ByteSequenceMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|dataIn
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|MessageRecord
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|object
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|ByteSequenceMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|object
operator|.
name|data
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|StoredDestination
block|{
name|long
name|nextMessageId
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
name|orderIndex
decl_stmt|;
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|messageIdIndex
decl_stmt|;
comment|// These bits are only set for Topics
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
name|subscriptions
decl_stmt|;
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|subscriptionAcks
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|subscriptionCursors
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|ackPositions
decl_stmt|;
block|}
specifier|protected
class|class
name|StoredDestinationMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|StoredDestination
argument_list|>
block|{
specifier|public
name|Class
argument_list|<
name|StoredDestination
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|StoredDestination
operator|.
name|class
return|;
block|}
specifier|public
name|StoredDestination
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|value
init|=
operator|new
name|StoredDestination
argument_list|()
decl_stmt|;
name|value
operator|.
name|orderIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|messageIdIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataIn
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|value
operator|.
name|subscriptions
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|subscriptionAcks
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|StoredDestination
name|value
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|orderIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|messageIdIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|subscriptions
operator|!=
literal|null
condition|)
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|subscriptions
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|subscriptionAcks
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|ByteSequenceMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|ByteSequence
argument_list|>
block|{
specifier|final
specifier|static
name|ByteSequenceMarshaller
name|INSTANCE
init|=
operator|new
name|ByteSequenceMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|ByteSequence
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|dataIn
operator|.
name|readInt
argument_list|()
index|]
decl_stmt|;
name|dataIn
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteSequence
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|ByteSequence
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|object
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|write
argument_list|(
name|object
operator|.
name|getData
argument_list|()
argument_list|,
name|object
operator|.
name|getOffset
argument_list|()
argument_list|,
name|object
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|KahaSubscriptionCommandMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|KahaSubscriptionCommand
argument_list|>
block|{
specifier|final
specifier|static
name|KahaSubscriptionCommandMarshaller
name|INSTANCE
init|=
operator|new
name|KahaSubscriptionCommandMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|KahaSubscriptionCommand
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaSubscriptionCommand
name|rc
init|=
operator|new
name|KahaSubscriptionCommand
argument_list|()
decl_stmt|;
name|rc
operator|.
name|mergeFramed
argument_list|(
operator|(
name|InputStream
operator|)
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|KahaSubscriptionCommand
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeFramed
argument_list|(
operator|(
name|OutputStream
operator|)
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|StoredDestination
name|getStoredDestination
parameter_list|(
name|KahaDestination
name|destination
parameter_list|,
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|key
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|StoredDestination
name|rc
init|=
name|storedDestinations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|boolean
name|topic
init|=
name|destination
operator|.
name|getType
argument_list|()
operator|==
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|TOPIC
operator|||
name|destination
operator|.
name|getType
argument_list|()
operator|==
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|TEMP_TOPIC
decl_stmt|;
name|rc
operator|=
name|loadStoredDestination
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// Cache it. We may want to remove/unload destinations from the
comment|// cache that are not used for a while
comment|// to reduce memory usage.
name|storedDestinations
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * @param tx      * @param key      * @param topic      * @return      * @throws IOException      */
specifier|private
name|StoredDestination
name|loadStoredDestination
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|topic
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Try to load the existing indexes..
name|StoredDestination
name|rc
init|=
name|destinations
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// Brand new destination.. allocate indexes for it.
name|rc
operator|=
operator|new
name|StoredDestination
argument_list|()
expr_stmt|;
name|rc
operator|.
name|orderIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|rc
operator|.
name|subscriptions
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|destinations
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
comment|// Configure the marshalers and load.
name|rc
operator|.
name|orderIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|orderIndex
operator|.
name|setValueMarshaller
argument_list|(
name|MessageKeysMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|orderIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|// Figure out the next key using the last entry in the destination.
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
name|lastEntry
init|=
name|rc
operator|.
name|orderIndex
operator|.
name|getLast
argument_list|(
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastEntry
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|nextMessageId
operator|=
name|lastEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
name|rc
operator|.
name|messageIdIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|// If it was a topic...
if|if
condition|(
name|topic
condition|)
block|{
name|rc
operator|.
name|subscriptions
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptions
operator|.
name|setValueMarshaller
argument_list|(
name|KahaSubscriptionCommandMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptions
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|ackPositions
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|rc
operator|.
name|subscriptionCursors
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|rc
operator|.
name|subscriptionAcks
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|addAckByteSequence
argument_list|(
name|rc
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * @param sd      * @param messageSequence      * @param subscriptionKey      */
specifier|private
name|void
name|addAckByteSequence
parameter_list|(
name|StoredDestination
name|sd
parameter_list|,
name|Long
name|messageSequence
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|hs
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|messageSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|hs
operator|==
literal|null
condition|)
block|{
name|hs
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|put
argument_list|(
name|messageSequence
argument_list|,
name|hs
argument_list|)
expr_stmt|;
block|}
name|hs
operator|.
name|add
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param tx      * @param sd      * @param subscriptionKey      * @param sequenceId      * @throws IOException      */
specifier|private
name|void
name|removeAckByteSequence
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|,
name|Long
name|sequenceId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Remove the sub from the previous location set..
if|if
condition|(
name|sequenceId
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|hs
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|sequenceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|hs
operator|!=
literal|null
condition|)
block|{
name|hs
operator|.
name|remove
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|hs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|firstSet
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|remove
argument_list|(
name|sequenceId
argument_list|)
expr_stmt|;
comment|// Did we just empty out the first set in the
comment|// ordered list of ack locations? Then it's time to
comment|// delete some messages.
if|if
condition|(
name|hs
operator|==
name|firstSet
condition|)
block|{
comment|// Find all the entries that need to get deleted.
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|sequenceId
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// We don't do the actually delete while we are
comment|// iterating the BTree since
comment|// iterating would fail.
name|deletes
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Do the actual deletes.
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageRecord
argument_list|>
name|entry
range|:
name|deletes
control|)
block|{
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|key
parameter_list|(
name|KahaDestination
name|destination
parameter_list|)
block|{
return|return
name|destination
operator|.
name|getType
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|+
literal|":"
operator|+
name|destination
operator|.
name|getName
argument_list|()
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Transaction related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|protected
specifier|final
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|inflightTransactions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|preparedTransactions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|getInflightTx
parameter_list|(
name|TransactionId
name|key
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
name|tx
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
expr_stmt|;
name|inflightTransactions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
return|return
name|tx
return|;
block|}
specifier|abstract
class|class
name|Operation
block|{
specifier|abstract
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
class|class
name|AddOpperation
extends|extends
name|Operation
block|{
specifier|final
name|KahaAddMessageCommand
name|command
decl_stmt|;
specifier|private
specifier|final
name|ByteSequence
name|data
decl_stmt|;
specifier|public
name|AddOpperation
parameter_list|(
name|KahaAddMessageCommand
name|command
parameter_list|,
name|ByteSequence
name|location
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|upadateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KahaAddMessageCommand
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
block|}
class|class
name|RemoveOpperation
extends|extends
name|Operation
block|{
specifier|final
name|KahaRemoveMessageCommand
name|command
decl_stmt|;
specifier|public
name|RemoveOpperation
parameter_list|(
name|KahaRemoveMessageCommand
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KahaRemoveMessageCommand
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Initialization related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|private
name|PageFile
name|createPageFile
parameter_list|()
block|{
name|PageFile
name|index
init|=
operator|new
name|PageFile
argument_list|(
name|directory
argument_list|,
literal|"temp-db"
argument_list|)
decl_stmt|;
name|index
operator|.
name|setEnableWriteThread
argument_list|(
name|isEnableIndexWriteAsync
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setWriteBatchSize
argument_list|(
name|getIndexWriteBatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setEnableDiskSyncs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|index
operator|.
name|setEnableRecoveryFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|void
name|setIndexWriteBatchSize
parameter_list|(
name|int
name|setIndexWriteBatchSize
parameter_list|)
block|{
name|this
operator|.
name|setIndexWriteBatchSize
operator|=
name|setIndexWriteBatchSize
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexWriteBatchSize
parameter_list|()
block|{
return|return
name|setIndexWriteBatchSize
return|;
block|}
specifier|public
name|void
name|setEnableIndexWriteAsync
parameter_list|(
name|boolean
name|enableIndexWriteAsync
parameter_list|)
block|{
name|this
operator|.
name|enableIndexWriteAsync
operator|=
name|enableIndexWriteAsync
expr_stmt|;
block|}
name|boolean
name|isEnableIndexWriteAsync
parameter_list|()
block|{
return|return
name|enableIndexWriteAsync
return|;
block|}
specifier|public
name|PageFile
name|getPageFile
parameter_list|()
block|{
if|if
condition|(
name|pageFile
operator|==
literal|null
condition|)
block|{
name|pageFile
operator|=
name|createPageFile
argument_list|()
expr_stmt|;
block|}
return|return
name|pageFile
return|;
block|}
block|}
end_class

end_unit

