begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|scala
operator|.
name|annotation
operator|.
name|bridge
import|;
end_import

begin_comment
comment|/**  * This test is to show that if a durable subscription over a network bridge is deleted and  * re-created, messages will flow properly again for dynamic subscriptions.  *  * AMQ-6050  */
end_comment

begin_class
specifier|public
class|class
name|NetworkDurableRecreationTest
extends|extends
name|DynamicNetworkTestSupport
block|{
comment|/**      * Test publisher on localBroker and durable on remoteBroker      * after durable deletion, recreate durable      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDurableConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|testReceive
argument_list|(
name|remoteBroker
argument_list|,
name|remoteSession
argument_list|,
name|localBroker
argument_list|,
name|localSession
argument_list|,
operator|new
name|ConsumerCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|remoteSession
operator|.
name|createDurableSubscriber
argument_list|(
name|included
argument_list|,
name|subName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reverse and test publisher on remoteBroker and durable on localBroker      * after durable deletion, recreate durable      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDurableConsumerReverse
parameter_list|()
throws|throws
name|Exception
block|{
name|testReceive
argument_list|(
name|localBroker
argument_list|,
name|localSession
argument_list|,
name|remoteBroker
argument_list|,
name|remoteSession
argument_list|,
operator|new
name|ConsumerCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|localSession
operator|.
name|createDurableSubscriber
argument_list|(
name|included
argument_list|,
name|subName
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test publisher on localBroker and durable on remoteBroker      * after durable deletion, recreate with a non-durable consumer      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDurableAndTopicConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|testReceive
argument_list|(
name|remoteBroker
argument_list|,
name|remoteSession
argument_list|,
name|localBroker
argument_list|,
name|localSession
argument_list|,
operator|new
name|ConsumerCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|remoteSession
operator|.
name|createConsumer
argument_list|(
name|included
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reverse and test publisher on remoteBroker and durable on localBroker      * after durable deletion, recreate with a non-durable consumer      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDurableAndTopicConsumerReverse
parameter_list|()
throws|throws
name|Exception
block|{
name|testReceive
argument_list|(
name|localBroker
argument_list|,
name|localSession
argument_list|,
name|remoteBroker
argument_list|,
name|remoteSession
argument_list|,
operator|new
name|ConsumerCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|localSession
operator|.
name|createConsumer
argument_list|(
name|included
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testReceive
parameter_list|(
name|BrokerService
name|receiveBroker
parameter_list|,
name|Session
name|receiveSession
parameter_list|,
name|BrokerService
name|publishBroker
parameter_list|,
name|Session
name|publishSession
parameter_list|,
name|ConsumerCreator
name|secondConsumerCreator
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|publishBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|publishSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|receiveSession
operator|.
name|createDurableSubscriber
argument_list|(
name|included
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|NetworkBridge
name|bridge
decl_stmt|;
if|if
condition|(
name|publishBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
parameter_list|()
lambda|->
name|publishBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|,
literal|10000
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|bridge
operator|=
name|publishBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bridge
operator|=
name|findDuplexBridge
argument_list|(
name|publishBroker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//Should be 2 - one for the durable destination and one for the advisory destinations
name|assertSubscriptionMapCounts
argument_list|(
name|bridge
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//remove the durable
specifier|final
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|RemoveSubscriptionInfo
name|info
init|=
name|getRemoveSubscriptionInfo
argument_list|(
name|context
argument_list|,
name|receiveBroker
argument_list|)
decl_stmt|;
name|bridgeConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|receiveBroker
operator|.
name|getBroker
argument_list|()
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Should be 1 - 0 for the durable destination and one for the advisory destinations
name|assertSubscriptionMapCounts
argument_list|(
name|bridge
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//re-create consumer
name|MessageConsumer
name|bridgeConsumer2
init|=
name|secondConsumerCreator
operator|.
name|createConsumer
argument_list|()
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//make sure message received
name|includedProducer
operator|.
name|send
argument_list|(
name|publishSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer2
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|doTearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|localConnection
operator|!=
literal|null
condition|)
block|{
name|localConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remoteConnection
operator|!=
literal|null
condition|)
block|{
name|remoteConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|localBroker
operator|!=
literal|null
condition|)
block|{
name|localBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remoteBroker
operator|!=
literal|null
condition|)
block|{
name|remoteBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doSetUp
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|remoteBroker
operator|=
name|createRemoteBroker
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|localBroker
operator|=
name|createLocalBroker
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|URI
name|localURI
init|=
name|localBroker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|fac
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|localURI
argument_list|)
decl_stmt|;
name|fac
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fac
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|localConnection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|localConnection
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|localConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|URI
name|remoteURI
init|=
name|remoteBroker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|fac
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|remoteURI
argument_list|)
expr_stmt|;
name|remoteConnection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|remoteConnection
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|remoteConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|included
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
expr_stmt|;
name|localSession
operator|=
name|localConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|remoteSession
operator|=
name|remoteConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|NetworkConnector
name|connector
decl_stmt|;
specifier|protected
name|BrokerService
name|createLocalBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setMonitorConnectionSplits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDataDirectoryFile
argument_list|(
name|tempFolder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"localBroker"
argument_list|)
expr_stmt|;
name|connector
operator|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
literal|"static:(tcp://localhost:61617)"
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"networkConnector"
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setConduitSubscriptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setExcludedDestinations
argument_list|(
name|Lists
operator|.
expr|<
name|ActiveMQDestination
operator|>
name|newArrayList
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|excludeTopicName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
specifier|protected
name|BrokerService
name|createRemoteBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"remoteBroker"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDataDirectoryFile
argument_list|(
name|tempFolder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61617"
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
block|}
end_class

end_unit

