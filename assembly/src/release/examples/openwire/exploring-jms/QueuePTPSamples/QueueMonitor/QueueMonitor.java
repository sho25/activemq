begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * © 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.   Sample Application  Writing a Basic JMS Application using:     - QueueBrowser     - JMS with a Graphical Interface     - behavior based on message type  When you run this program, it will read all the parameters out of the QueueMonitor.properties file. In this file you can specify which queues you want to monitor. Then a Java window will open and every time you click the Browse button, The current contents of the queues will be displayed in the text window.  Usage:   java QueueMonitor  Suggested demonstration:   - Start one instance of this application:         java QueueMonitor   - Run on or more Talk applications (without the receiving queue).   - Enter messages on various Talk windows.   - Watch the QueueMonitor display the messages.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JFrame
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JButton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|Highlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|DefaultHighlighter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|text
operator|.
name|BadLocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|CompoundBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|EmptyBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|BevelBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|SoftBevelBorder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Toolkit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|BorderLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowAdapter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|WindowEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
specifier|public
class|class
name|QueueMonitor
extends|extends
name|JFrame
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PROPERTIES_FILE
init|=
literal|"QueueMonitor.properties"
decl_stmt|;
name|String
name|propertiesFile
init|=
name|DEFAULT_PROPERTIES_FILE
decl_stmt|;
name|String
name|broker
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
name|String
name|connectID
init|=
literal|"QueueMonitor"
decl_stmt|;
name|String
name|username
init|=
literal|"QueueMonitor"
decl_stmt|;
name|String
name|password
init|=
literal|"QueueMonitor"
decl_stmt|;
name|String
name|browseQueues
init|=
literal|"Q1,Q2,Q3"
decl_stmt|;
name|String
name|textFontName
init|=
literal|"Dialog"
decl_stmt|;
name|String
name|textFontStyle
init|=
literal|"PLAIN"
decl_stmt|;
name|String
name|textFontSize
init|=
literal|"12"
decl_stmt|;
name|String
name|title
init|=
literal|"QueueMonitor"
decl_stmt|;
name|JTextArea
name|textArea
init|=
operator|new
name|JTextArea
argument_list|()
decl_stmt|;
name|JScrollPane
name|scrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|textArea
argument_list|)
decl_stmt|;
name|JButton
name|browseButton
init|=
operator|new
name|JButton
argument_list|(
literal|"Browse Queues"
argument_list|)
decl_stmt|;
name|Vector
name|theQueues
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connect
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Session
name|session
init|=
literal|null
decl_stmt|;
comment|/** Constructor for MessageMonitor window. */
specifier|public
name|QueueMonitor
parameter_list|()
block|{
name|loadProperties
argument_list|()
expr_stmt|;
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
comment|// Connect to Message Broker
try|try
block|{
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
name|factory
decl_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|connect
operator|=
name|factory
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|session
operator|=
name|connect
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot connect to Broker"
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Set up Queues:
name|StringTokenizer
name|queues
init|=
operator|new
name|StringTokenizer
argument_list|(
name|browseQueues
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|queues
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
try|try
block|{
name|String
name|queueName
init|=
name|queues
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Monitoring  "
operator|+
name|queueName
argument_list|)
expr_stmt|;
name|theQueues
operator|.
name|addElement
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// After init it is time to start the connection
try|try
block|{
name|connect
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Cannot start connection"
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//Elements visible on the screen
name|textArea
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scrollPane
operator|.
name|setBorder
argument_list|(
operator|new
name|CompoundBorder
argument_list|(
operator|new
name|EmptyBorder
argument_list|(
literal|6
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|,
literal|6
argument_list|)
argument_list|,
operator|new
name|SoftBevelBorder
argument_list|(
name|BevelBorder
operator|.
name|LOWERED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|scrollPane
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|getContentPane
argument_list|()
operator|.
name|add
argument_list|(
name|browseButton
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|browseButton
operator|.
name|addActionListener
argument_list|(
operator|new
name|OnBrowse
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Main program entry point. */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
comment|// There should be no arguments to this program.
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|QueueMonitor
name|queueMonitor
init|=
operator|new
name|QueueMonitor
argument_list|()
decl_stmt|;
name|queueMonitor
operator|.
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
specifier|public
name|void
name|windowClosing
parameter_list|(
name|WindowEvent
name|e
parameter_list|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Dimension
name|screenSize
init|=
name|Toolkit
operator|.
name|getDefaultToolkit
argument_list|()
operator|.
name|getScreenSize
argument_list|()
decl_stmt|;
name|screenSize
operator|.
name|height
operator|=
name|screenSize
operator|.
name|height
operator|/
literal|2
expr_stmt|;
name|screenSize
operator|.
name|width
operator|=
name|screenSize
operator|.
name|width
operator|/
literal|2
expr_stmt|;
name|queueMonitor
operator|.
name|setSize
argument_list|(
name|screenSize
argument_list|)
expr_stmt|;
name|queueMonitor
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** Prints the usage. */
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|StringBuffer
name|use
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"\nusage: QueueMonitor\n\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"Properties for this sample can be set in a properties file.\n"
argument_list|)
expr_stmt|;
name|String
name|dfltFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"propertiesFile"
argument_list|,
name|DEFAULT_PROPERTIES_FILE
argument_list|)
decl_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"[Default file: "
operator|+
name|dfltFile
operator|+
literal|"]\n\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|use
argument_list|)
expr_stmt|;
block|}
comment|/** Load the window and JMS properties from a file. */
specifier|private
name|void
name|loadProperties
parameter_list|()
block|{
try|try
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|propertiesFile
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"propertiesFile"
argument_list|,
name|propertiesFile
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|propertiesFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connection Properties
name|broker
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"broker"
argument_list|,
name|broker
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|connectID
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"connectID"
argument_list|,
name|connectID
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|username
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|password
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Queue Properties
name|browseQueues
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"browseQueues"
argument_list|,
name|browseQueues
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Text Properties
name|textFontName
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"textFontName"
argument_list|,
name|textFontName
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|textFontStyle
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"textFontStyle"
argument_list|,
name|textFontStyle
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|textFontSize
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"textFontSize"
argument_list|,
name|textFontSize
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
comment|// Window Properties
name|title
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|propertiesFile
operator|+
literal|" not found: using defaults"
argument_list|)
expr_stmt|;
comment|// Use Defaults
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Class to handle the "Browse" button action. */
specifier|public
class|class
name|OnBrowse
implements|implements
name|ActionListener
block|{
specifier|public
name|void
name|actionPerformed
parameter_list|(
name|ActionEvent
name|evt
parameter_list|)
block|{
comment|// Clear the textArea.
name|textArea
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|textArea
operator|.
name|paintImmediately
argument_list|(
name|textArea
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|theQueues
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|textArea
operator|.
name|setText
argument_list|(
literal|"No Queues to be monitored"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|theQueues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// Create a browser on the queue and show the messages waiting in it.
name|javax
operator|.
name|jms
operator|.
name|Queue
name|q
init|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|Queue
operator|)
name|theQueues
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|textArea
operator|.
name|append
argument_list|(
literal|"--------------------------------------------------\n"
argument_list|)
expr_stmt|;
name|textArea
operator|.
name|append
argument_list|(
literal|"Messages on queue "
operator|+
name|q
operator|.
name|getQueueName
argument_list|()
operator|+
literal|":\n"
argument_list|)
expr_stmt|;
comment|// Create a queue browser
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Browsing messages in queue "
operator|+
name|q
operator|.
name|getQueueName
argument_list|()
operator|+
literal|"\"..."
argument_list|)
expr_stmt|;
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"[done]"
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
name|Enumeration
name|e
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|textArea
operator|.
name|append
argument_list|(
literal|"(This queue is empty.)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|" --> getting message "
operator|+
name|String
operator|.
name|valueOf
argument_list|(
operator|++
name|cnt
argument_list|)
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|Message
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"["
operator|+
name|message
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|String
name|msgText
init|=
name|getContents
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|textArea
operator|.
name|append
argument_list|(
name|msgText
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Scroll the text area to show the message
name|Rectangle
name|area
init|=
name|textArea
operator|.
name|modelToView
argument_list|(
name|textArea
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|textArea
operator|.
name|scrollRectToVisible
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|textArea
operator|.
name|paintImmediately
argument_list|(
name|textArea
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|jle
parameter_list|)
block|{
name|jle
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Free any resources in the browser.
name|browser
operator|.
name|close
argument_list|()
expr_stmt|;
name|textArea
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
comment|// Scroll the text area to show the message
name|Rectangle
name|area
init|=
name|textArea
operator|.
name|modelToView
argument_list|(
name|textArea
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|textArea
operator|.
name|scrollRectToVisible
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|textArea
operator|.
name|paintImmediately
argument_list|(
name|textArea
operator|.
name|getBounds
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|jle
parameter_list|)
block|{
name|jle
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getContents
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
parameter_list|)
block|{
name|String
name|msgBody
init|=
literal|null
decl_stmt|;
name|String
name|msgClass
init|=
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|javax
operator|.
name|jms
operator|.
name|TextMessage
condition|)
block|{
name|msgClass
operator|=
literal|"javax.jms.TextMessage"
expr_stmt|;
try|try
block|{
name|msgBody
operator|=
operator|(
operator|(
name|javax
operator|.
name|jms
operator|.
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|msgBody
operator|=
literal|""
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"(Name value pairs in the MapMessage are not displayed.)"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warning: A bytes message was discarded because it could not be processed as a javax.jms.TextMessage."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warning: An object message was discarded because it could not be processed as a javax.jms.TextMessage."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|javax
operator|.
name|jms
operator|.
name|StreamMessage
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Warning: A stream message was discarded because it could not be processed as a javax.jms.TextMessage."
argument_list|)
expr_stmt|;
block|}
return|return
literal|"- "
operator|+
name|msgClass
operator|+
literal|" from "
operator|+
name|msgBody
return|;
block|}
block|}
end_class

end_unit

