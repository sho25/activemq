begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_comment
comment|/**  * Used to implement common PersistenceAdapter methods.  */
end_comment

begin_class
specifier|public
class|class
name|PersistenceAdapterSupport
block|{
specifier|private
specifier|static
specifier|final
name|DestinationMatcher
name|MATCH_ALL
init|=
operator|new
name|AlwaysMatches
argument_list|()
decl_stmt|;
comment|/**      * Provides an interface for a Destination matching object that can be used to      * search for specific destinations from a persistence adapter.      */
specifier|public
interface|interface
name|DestinationMatcher
block|{
comment|/**          * Given a Destination object, return true if the destination matches some defined          * search criteria, false otherwise.          *          * @param destination          *        the destination to inspect.          *          * @return true if the destination matches the target criteria, false otherwise.          */
name|boolean
name|matches
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
function_decl|;
block|}
comment|/**      * Searches the set of subscriptions from the given persistence adapter and returns all those      * that belong to the given ClientId value.      *      * @param adapter      *        the persistence adapter instance to search within.      * @param clientId      *        the client ID value used to filter the subscription set.      *      * @return a list of all subscriptions belonging to the given client.      *      * @throws IOException if an error occurs while listing the stored subscriptions.      */
specifier|static
specifier|public
name|List
argument_list|<
name|SubscriptionInfo
argument_list|>
name|listSubscriptions
parameter_list|(
name|PersistenceAdapter
name|adapter
parameter_list|,
name|String
name|clientId
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|SubscriptionInfo
argument_list|>
name|rc
init|=
operator|new
name|ArrayList
argument_list|<
name|SubscriptionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|adapter
operator|.
name|getDestinations
argument_list|()
control|)
block|{
if|if
condition|(
name|destination
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|TopicMessageStore
name|store
init|=
name|adapter
operator|.
name|createTopicMessageStore
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|SubscriptionInfo
name|sub
range|:
name|store
operator|.
name|getAllSubscriptions
argument_list|()
control|)
block|{
if|if
condition|(
name|clientId
operator|==
name|sub
operator|.
name|getClientId
argument_list|()
operator|||
name|clientId
operator|.
name|equals
argument_list|(
name|sub
operator|.
name|getClientId
argument_list|()
argument_list|)
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Provides a means of querying the persistence adapter for a list of ActiveMQQueue instances.      *      * @param adapter      *        the persistence adapter instance to query.      *      * @return a List<ActiveMQQeue> with all the queue destinations.      *      * @throws IOException if an error occurs while reading the destinations.      */
specifier|static
specifier|public
name|List
argument_list|<
name|ActiveMQQueue
argument_list|>
name|listQueues
parameter_list|(
name|PersistenceAdapter
name|adapter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listQueues
argument_list|(
name|adapter
argument_list|,
name|MATCH_ALL
argument_list|)
return|;
block|}
comment|/**      * Provides a means of querying the persistence adapter for a list of ActiveMQQueue instances      * that match some given search criteria.      *      * @param adapter      *        the persistence adapter instance to query.      * @param matcher      *        the DestinationMatcher instance used to find the target destinations.      *      * @return a List<ActiveMQQeue> with all the matching destinations.      *      * @throws IOException if an error occurs while reading the destinations.      */
specifier|static
specifier|public
name|List
argument_list|<
name|ActiveMQQueue
argument_list|>
name|listQueues
parameter_list|(
name|PersistenceAdapter
name|adapter
parameter_list|,
name|DestinationMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|ActiveMQQueue
argument_list|>
name|rc
init|=
operator|new
name|ArrayList
argument_list|<
name|ActiveMQQueue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|adapter
operator|.
name|getDestinations
argument_list|()
control|)
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
operator|&&
name|matcher
operator|.
name|matches
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
operator|(
name|ActiveMQQueue
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Provides a means of querying the persistence adapter for a list of ActiveMQTopic instances.      *      * @param adapter      *        the persistence adapter instance to query.      *      * @return a List<ActiveMQTopic> with all the topic destinations.      *      * @throws IOException if an error occurs while reading the destinations.      */
specifier|static
specifier|public
name|List
argument_list|<
name|ActiveMQTopic
argument_list|>
name|listTopics
parameter_list|(
name|PersistenceAdapter
name|adapter
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|listTopics
argument_list|(
name|adapter
argument_list|,
name|MATCH_ALL
argument_list|)
return|;
block|}
comment|/**      * Provides a means of querying the persistence adapter for a list of ActiveMQTopic instances      * that match some given search criteria.      *      * @param adapter      *        the persistence adapter instance to query.      * @param matcher      *        the DestinationMatcher instance used to find the target destinations.      *      * @return a List<ActiveMQTopic> with all the matching destinations.      *      * @throws IOException if an error occurs while reading the destinations.      */
specifier|static
specifier|public
name|List
argument_list|<
name|ActiveMQTopic
argument_list|>
name|listTopics
parameter_list|(
name|PersistenceAdapter
name|adapter
parameter_list|,
name|DestinationMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|ActiveMQTopic
argument_list|>
name|rc
init|=
operator|new
name|ArrayList
argument_list|<
name|ActiveMQTopic
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|adapter
operator|.
name|getDestinations
argument_list|()
control|)
block|{
if|if
condition|(
name|destination
operator|.
name|isTopic
argument_list|()
operator|&&
name|matcher
operator|.
name|matches
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|rc
operator|.
name|add
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
specifier|private
specifier|static
class|class
name|AlwaysMatches
implements|implements
name|DestinationMatcher
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

