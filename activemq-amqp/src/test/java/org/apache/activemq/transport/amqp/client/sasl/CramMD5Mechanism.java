begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|sasl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|InvalidKeyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|Mac
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|sasl
operator|.
name|SaslException
import|;
end_import

begin_comment
comment|/**  * Implements the SASL PLAIN authentication Mechanism.  *  * User name and Password values are sent without being encrypted.  */
end_comment

begin_class
specifier|public
class|class
name|CramMD5Mechanism
extends|extends
name|AbstractMechanism
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ASCII
init|=
literal|"ASCII"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HMACMD5
init|=
literal|"HMACMD5"
decl_stmt|;
specifier|private
name|boolean
name|sentResponse
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|PRIORITY
operator|.
name|HIGH
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"CRAM-MD5"
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getInitialResponse
parameter_list|()
block|{
return|return
name|EMPTY
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getChallengeResponse
parameter_list|(
name|byte
index|[]
name|challenge
parameter_list|)
throws|throws
name|SaslException
block|{
if|if
condition|(
operator|!
name|sentResponse
operator|&&
name|challenge
operator|!=
literal|null
operator|&&
name|challenge
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
try|try
block|{
name|SecretKeySpec
name|key
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|getPassword
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ASCII
argument_list|)
argument_list|,
name|HMACMD5
argument_list|)
decl_stmt|;
name|Mac
name|mac
init|=
name|Mac
operator|.
name|getInstance
argument_list|(
name|HMACMD5
argument_list|)
decl_stmt|;
name|mac
operator|.
name|init
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|mac
operator|.
name|doFinal
argument_list|(
name|challenge
argument_list|)
decl_stmt|;
name|StringBuffer
name|hash
init|=
operator|new
name|StringBuffer
argument_list|(
name|getUsername
argument_list|()
argument_list|)
decl_stmt|;
name|hash
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|hex
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
literal|0xFF
operator|&
name|bytes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|hex
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|hash
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|hash
operator|.
name|append
argument_list|(
name|hex
argument_list|)
expr_stmt|;
block|}
name|sentResponse
operator|=
literal|true
expr_stmt|;
return|return
name|hash
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ASCII
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Unable to utilise required encoding"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Unable to utilise key"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SaslException
argument_list|(
literal|"Unable to utilise required algorithm"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|EMPTY
return|;
block|}
block|}
block|}
end_class

end_unit

