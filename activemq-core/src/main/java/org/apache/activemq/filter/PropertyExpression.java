begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_comment
comment|/**  * Represents a property expression  *   * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
class|class
name|PropertyExpression
implements|implements
name|Expression
block|{
interface|interface
name|SubExpression
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
function_decl|;
block|}
specifier|static
specifier|final
specifier|private
name|HashMap
name|JMS_PROPERTY_EXPRESSIONS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSDestination"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|ActiveMQDestination
name|dest
init|=
name|message
operator|.
name|getOriginalDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
name|dest
operator|=
name|message
operator|.
name|getDestination
argument_list|()
expr_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|dest
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSReplyTo"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|getReplyTo
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|message
operator|.
name|getReplyTo
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSType"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getType
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSDeliveryMode"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|isPersistent
argument_list|()
condition|?
name|DeliveryMode
operator|.
name|PERSISTENT
else|:
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSPriority"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSMessageID"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSTimestamp"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|getTimestamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getCorrelationId
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSExpiration"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|getExpiration
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSRedelivered"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|isRedelivered
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|getRedeliveryCounter
argument_list|()
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSXGroupID"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|getGroupID
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSXGroupSeq"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|message
operator|.
name|getGroupSequence
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSXProducerTXID"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TransactionId
name|txId
init|=
name|message
operator|.
name|getOriginalTransactionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|txId
operator|==
literal|null
condition|)
name|txId
operator|=
name|message
operator|.
name|getTransactionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|txId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Integer
argument_list|(
name|txId
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSActiveMQBrokerInTime"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|getBrokerInTime
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|put
argument_list|(
literal|"JMSActiveMQBrokerOutTime"
argument_list|,
operator|new
name|SubExpression
argument_list|()
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|message
operator|.
name|getBrokerOutTime
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|SubExpression
name|jmsPropertyExpression
decl_stmt|;
specifier|public
name|PropertyExpression
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|jmsPropertyExpression
operator|=
operator|(
name|SubExpression
operator|)
name|JMS_PROPERTY_EXPRESSIONS
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|evaluate
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|message
operator|.
name|isDropped
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|jmsPropertyExpression
operator|!=
literal|null
condition|)
return|return
name|jmsPropertyExpression
operator|.
name|evaluate
argument_list|(
name|message
operator|.
name|getMessage
argument_list|()
argument_list|)
return|;
try|try
block|{
return|return
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
literal|"Could not get property: "
operator|+
name|name
operator|+
literal|" reason: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|jmsPropertyExpression
operator|!=
literal|null
condition|)
return|return
name|jmsPropertyExpression
operator|.
name|evaluate
argument_list|(
name|message
argument_list|)
return|;
try|try
block|{
return|return
name|message
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @see java.lang.Object#toString()      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @see java.lang.Object#hashCode()      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * @see java.lang.Object#equals(java.lang.Object)      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|name
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PropertyExpression
operator|)
name|o
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

