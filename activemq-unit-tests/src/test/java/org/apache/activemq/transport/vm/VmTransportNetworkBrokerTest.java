begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
operator|.
name|embedded
operator|.
name|ThreadExplorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|VmTransportNetworkBrokerTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VmTransportNetworkBrokerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VM_BROKER_URI
init|=
literal|"vm://localhost?create=false"
decl_stmt|;
specifier|public
name|void
name|testNoThreadLeak
parameter_list|()
throws|throws
name|Exception
block|{
comment|// with VMConnection and simple discovery network connector
name|Thread
index|[]
name|threads
init|=
name|filterDaemonThreads
argument_list|(
name|ThreadExplorer
operator|.
name|listThreads
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|originalThreadCount
init|=
name|threads
operator|.
name|length
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|ThreadExplorer
operator|.
name|show
argument_list|(
literal|"threads at beginning"
argument_list|)
argument_list|)
expr_stmt|;
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setDedicatedTaskRunner
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|NetworkConnector
name|networkConnector
init|=
name|broker
operator|.
name|addNetworkConnector
argument_list|(
literal|"static:(tcp://wrongHostname1:61617,tcp://wrongHostname2:61618)?useExponentialBackOff=false"
argument_list|)
decl_stmt|;
name|networkConnector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
operator|new
name|URI
argument_list|(
name|VM_BROKER_URI
argument_list|)
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// let it settle
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|int
name|threadCountAfterStart
init|=
name|Thread
operator|.
name|activeCount
argument_list|()
decl_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|int
name|threadCountAfterSleep
init|=
name|Thread
operator|.
name|activeCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Threads are leaking: "
operator|+
name|ThreadExplorer
operator|.
name|show
argument_list|(
literal|"active sleep"
argument_list|)
operator|+
literal|", threadCount="
operator|+
name|threadCountAfterStart
operator|+
literal|" threadCountAfterSleep="
operator|+
name|threadCountAfterSleep
argument_list|,
name|threadCountAfterSleep
operator|<
literal|2
operator|*
name|threadCountAfterStart
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
comment|// testNoDanglingThreadsAfterStop with tcp transport
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setSchedulerSupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDedicatedTaskRunner
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|cf
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"tcp://localhost:61616?wireFormat.maxInactivityDuration=1000&wireFormat.maxInactivityDurationInitalDelay=1000"
argument_list|)
expr_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
specifier|final
name|AtomicInteger
name|threadCountAfterStop
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|boolean
name|ok
init|=
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|ThreadExplorer
operator|.
name|show
argument_list|(
literal|"active after stop"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get final threads but filter out any daemon threads that the JVM may have created.
name|Thread
index|[]
name|threads
init|=
name|filterDaemonThreads
argument_list|(
name|ThreadExplorer
operator|.
name|listThreads
argument_list|()
argument_list|)
decl_stmt|;
name|threadCountAfterStop
operator|.
name|set
argument_list|(
name|threads
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|threadCountAfterStop
operator|.
name|get
argument_list|()
operator|<=
name|originalThreadCount
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"originalThreadCount="
operator|+
name|originalThreadCount
operator|+
literal|" threadCountAfterStop="
operator|+
name|threadCountAfterStop
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Threads are leaking: "
operator|+
name|ThreadExplorer
operator|.
name|show
argument_list|(
literal|"active after stop"
argument_list|)
operator|+
literal|". originalThreadCount="
operator|+
name|originalThreadCount
operator|+
literal|" threadCountAfterStop="
operator|+
name|threadCountAfterStop
operator|.
name|get
argument_list|()
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
comment|/**      * Filters any daemon threads from the thread list.      *       * Thread counts before and after the test should ideally be equal.       * However there is no guarantee that the JVM does not create any       * additional threads itself.      * E.g. on Mac OSX there is a JVM internal thread called      * "Poller SunPKCS11-Darwin" created after the test go started and       * under the main thread group.      * When debugging tests in Eclipse another so called "Reader" thread       * is created by Eclipse.      * So we cannot assume that the JVM does not create additional threads      * during the test. However for the time being we assume that any such       * additionally created threads are daemon threads.      *         * @param threads - the array of threads to parse      * @return a new array with any daemon threads removed      */
specifier|public
name|Thread
index|[]
name|filterDaemonThreads
parameter_list|(
name|Thread
index|[]
name|threads
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Thread
argument_list|>
name|threadList
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|threads
argument_list|)
argument_list|)
decl_stmt|;
comment|// Can't use an Iterator as it would raise a
comment|// ConcurrentModificationException when trying to remove an element
comment|// from the list, so using standard walk through
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
name|threadList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Inspecting thread "
operator|+
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|thread
operator|.
name|isDaemon
argument_list|()
operator|&&
operator|!
name|thread
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ActiveMQ"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing deamon thread."
argument_list|)
expr_stmt|;
name|threadList
operator|.
name|remove
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting list back to Array"
argument_list|)
expr_stmt|;
return|return
name|threadList
operator|.
name|toArray
argument_list|(
operator|new
name|Thread
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
end_class

end_unit

