begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005 LogicBlaze, Inc. http://www.logicblaze.com  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|systest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ScenarioSupport
implements|implements
name|Scenario
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ScenarioSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LinkedList
name|agents
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
comment|// Helper methods
comment|// -------------------------------------------------------------------------
comment|/**      * Starts the given agent and adds it to the list of agents to stop when      * the test is complete      */
specifier|public
name|void
name|start
parameter_list|(
name|Agent
name|agent
parameter_list|)
throws|throws
name|Exception
block|{
name|agent
operator|.
name|start
argument_list|()
expr_stmt|;
name|agents
operator|.
name|addFirst
argument_list|(
name|agent
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stops all the added agents      */
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|AgentStopper
name|stopper
init|=
operator|new
name|AgentStopper
argument_list|()
decl_stmt|;
name|stop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|throwFirstException
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|AgentStopper
name|stopper
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|agents
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Agent
name|agent
init|=
operator|(
name|Agent
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Stopping agent: "
operator|+
name|agent
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|agent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

