begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|junit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|RepeatStatement
extends|extends
name|Statement
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepeatStatement
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|repetitions
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|untilFailure
decl_stmt|;
specifier|private
specifier|final
name|Statement
name|statement
decl_stmt|;
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
specifier|public
name|RepeatStatement
parameter_list|(
name|int
name|times
parameter_list|,
name|boolean
name|untilFailure
parameter_list|,
name|Statement
name|statement
parameter_list|)
block|{
name|this
operator|.
name|repetitions
operator|=
name|times
expr_stmt|;
name|this
operator|.
name|untilFailure
operator|=
name|untilFailure
expr_stmt|;
name|this
operator|.
name|statement
operator|=
name|statement
expr_stmt|;
block|}
specifier|protected
name|RepeatStatement
parameter_list|(
name|Builder
name|builder
parameter_list|,
name|Statement
name|next
parameter_list|)
block|{
name|this
operator|.
name|repetitions
operator|=
name|builder
operator|.
name|getRepetitions
argument_list|()
expr_stmt|;
name|this
operator|.
name|untilFailure
operator|=
name|builder
operator|.
name|isUntilFailure
argument_list|()
expr_stmt|;
name|this
operator|.
name|statement
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|evaluate
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repetitions
operator|&&
operator|!
name|untilFailure
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|untilFailure
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test iteration: {}."
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test iteration: {} of configured repetitions: {}"
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|repetitions
argument_list|)
expr_stmt|;
block|}
name|statement
operator|.
name|evaluate
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Builder for {@link Repeat}.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|int
name|repetitions
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|untilFailure
init|=
literal|false
decl_stmt|;
specifier|protected
name|Builder
parameter_list|()
block|{}
comment|/**          * Specifies the number of times to run the test.          *          * @param repetitions          *      The number of times to run the test.          *          * @return {@code this} for method chaining.          */
specifier|public
name|Builder
name|withRepetitions
parameter_list|(
name|int
name|repetitions
parameter_list|)
block|{
if|if
condition|(
name|repetitions
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"repetitions must be greater than zero"
argument_list|)
throw|;
block|}
name|this
operator|.
name|repetitions
operator|=
name|repetitions
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**          * Specifies the number of times to run the test.          *          * @param untilFailure          *      true if the test should run until a failure occurs.          *          * @return {@code this} for method chaining.          */
specifier|public
name|Builder
name|withRunUntilFailure
parameter_list|(
name|boolean
name|untilFailure
parameter_list|)
block|{
name|this
operator|.
name|untilFailure
operator|=
name|untilFailure
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|protected
name|int
name|getRepetitions
parameter_list|()
block|{
return|return
name|repetitions
return|;
block|}
specifier|protected
name|boolean
name|isUntilFailure
parameter_list|()
block|{
return|return
name|untilFailure
return|;
block|}
comment|/**          * Builds a {@link RepeatStatement} instance using the values in this builder.          *          * @param next          *      The statement instance to wrap with the newly create repeat statement.          *          * @return a new {@link RepeatStatement} that wraps the given {@link Statement}.          */
specifier|public
name|RepeatStatement
name|build
parameter_list|(
name|Statement
name|next
parameter_list|)
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"statement cannot be null"
argument_list|)
throw|;
block|}
return|return
operator|new
name|RepeatStatement
argument_list|(
name|this
argument_list|,
name|next
argument_list|)
return|;
block|}
comment|/**          * Builds a {@link RepeatStatement} instance using the values in this builder.          *          * @param annotation          *      The {@link Repeat} annotation that triggered this statement being created.          * @param next          *      The statement instance to wrap with the newly create repeat statement.          *          * @return a new {@link RepeatStatement} that wraps the given {@link Statement}.          */
specifier|public
name|RepeatStatement
name|build
parameter_list|(
name|Repeat
name|annotation
parameter_list|,
name|Statement
name|next
parameter_list|)
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"statement cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"annotation cannot be null"
argument_list|)
throw|;
block|}
name|withRepetitions
argument_list|(
name|annotation
operator|.
name|repetitions
argument_list|()
argument_list|)
expr_stmt|;
name|withRunUntilFailure
argument_list|(
name|annotation
operator|.
name|untilFailure
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|RepeatStatement
argument_list|(
name|this
argument_list|,
name|next
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

