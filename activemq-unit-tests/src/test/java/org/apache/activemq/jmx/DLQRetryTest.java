begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerInvocationHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|IndividualDeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|DLQRetryTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DLQRetryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|MBeanServer
name|mbeanServer
decl_stmt|;
specifier|protected
name|String
name|domain
init|=
literal|"org.apache.activemq"
decl_stmt|;
specifier|protected
name|String
name|bindAddress
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|public
name|void
name|testDefaultDLQ
parameter_list|()
throws|throws
name|Exception
block|{
comment|// broker uses DLQ defined for this destination
name|String
name|destinationName
init|=
literal|"retry.test.default"
decl_stmt|;
name|String
name|objectNameStr
init|=
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|objectNameStr
operator|+=
literal|",destinationType=Queue,destinationName=ActiveMQ.DLQ"
expr_stmt|;
name|invokeRetryDLQ
argument_list|(
name|destinationName
argument_list|,
name|objectNameStr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIndividualDLQ
parameter_list|()
throws|throws
name|Exception
block|{
comment|// broker has an individual DLQ defined for this destination
name|String
name|destinationName
init|=
literal|"retry.test.individual"
decl_stmt|;
name|String
name|objectNameStr
init|=
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|objectNameStr
operator|+=
literal|",destinationType=Queue,destinationName=DLQ."
operator|+
name|destinationName
expr_stmt|;
name|invokeRetryDLQ
argument_list|(
name|destinationName
argument_list|,
name|objectNameStr
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|invokeRetryDLQ
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|String
name|mbeanName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Send some messages
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
try|try
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|destinationName
argument_list|)
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Message testing default DLQ"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//create a consumer to rollback
name|String
name|mesageID
init|=
name|consumeRollbackMessage
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|mbeanName
argument_list|)
decl_stmt|;
specifier|final
name|QueueViewMBean
name|DLQProxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Check message is on DLQ"
argument_list|,
literal|1
argument_list|,
name|DLQProxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|moveSuccess
init|=
name|DLQProxy
operator|.
name|retryMessage
argument_list|(
name|mesageID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"moveSuccess"
argument_list|,
literal|true
argument_list|,
name|moveSuccess
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Check message is off DLQ (after retry invoked)"
argument_list|,
literal|0
argument_list|,
name|DLQProxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// do rollbacks again, so it gets placed in the DLQ again
name|String
name|mesageID_secondAttempt
init|=
name|consumeRollbackMessage
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Ensure messageID is the same for first and second attempt"
argument_list|,
name|mesageID
argument_list|,
name|mesageID_secondAttempt
argument_list|)
expr_stmt|;
comment|// check the DLQ as the message
name|assertEquals
argument_list|(
literal|"Check message is on DLQ for second time"
argument_list|,
literal|1
argument_list|,
name|DLQProxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|consumeRollbackMessage
parameter_list|(
name|String
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|Session
name|consumerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|messageConsumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|destination
argument_list|)
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
name|String
name|messageID
init|=
literal|null
decl_stmt|;
do|do
block|{
name|message
operator|=
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"rolling back "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|messageID
operator|=
name|message
operator|.
name|getJMSMessageID
argument_list|()
expr_stmt|;
name|consumerSession
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|message
operator|!=
literal|null
condition|)
do|;
name|messageConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|messageID
return|;
block|}
specifier|protected
name|ObjectName
name|assertRegisteredObjectName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|NullPointerException
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Bean Registered: "
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Could not find MBean!: "
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
return|return
name|objectName
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.activemq.audit"
argument_list|,
literal|"all"
argument_list|)
expr_stmt|;
name|bindAddress
operator|=
literal|"tcp://localhost:0"
expr_stmt|;
name|useTopic
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|mbeanServer
operator|=
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setEnableStatistics
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
name|PolicyEntry
name|pe
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|IndividualDeadLetterStrategy
name|individualDeadLetterStrategy
init|=
operator|new
name|IndividualDeadLetterStrategy
argument_list|()
decl_stmt|;
name|individualDeadLetterStrategy
operator|.
name|setQueuePrefix
argument_list|(
literal|"DLQ."
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setDeadLetterStrategy
argument_list|(
name|individualDeadLetterStrategy
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setQueue
argument_list|(
literal|"retry.test.individual"
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|answer
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|setConcurrentStoreAndDispatchQueues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|activeMQConnectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
decl_stmt|;
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|redeliveryPolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|activeMQConnectionFactory
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|)
expr_stmt|;
return|return
name|activeMQConnectionFactory
return|;
block|}
block|}
end_class

end_unit

