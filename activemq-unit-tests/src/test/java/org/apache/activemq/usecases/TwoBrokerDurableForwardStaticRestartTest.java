begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TwoBrokerDurableForwardStaticRestartTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TwoBrokerDurableForwardStaticRestartTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQTopic
name|dest
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testNonDurableReceiveThrougRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|bridgeBrokerPair
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokerPair
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
name|registerDurableForwardSub
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|registerDurableForwardSub
argument_list|(
literal|"BrokerB"
argument_list|,
name|dest
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
name|MessageConsumer
name|clientC
init|=
name|createConsumer
argument_list|(
literal|"BrokerC"
argument_list|,
name|dest
argument_list|)
decl_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Get message count
specifier|final
name|MessageIdList
name|messagesFromC
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerC"
argument_list|,
name|clientC
argument_list|)
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|messagesFromC
operator|.
name|getMessageCount
argument_list|()
operator|==
literal|100
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"B got: "
operator|+
name|messagesFromC
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|messagesFromC
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|destroyBroker
argument_list|(
literal|"BrokerB"
argument_list|)
expr_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|BrokerService
name|broker
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://0.0.0.0:61616)/BrokerB"
argument_list|)
argument_list|)
decl_stmt|;
name|bridgeBrokerPair
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|messagesFromC
operator|.
name|getMessageCount
argument_list|()
operator|==
literal|200
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"B got: "
operator|+
name|messagesFromC
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|messagesFromC
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerDurableForwardSub
parameter_list|(
name|String
name|brokerName
parameter_list|,
name|ActiveMQTopic
name|dest
parameter_list|,
name|String
name|remoteBrokerName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// need to match the durable sub that would be created by the bridge in response to a remote durable sub advisory
name|String
name|clientId
init|=
literal|"NC_"
operator|+
name|remoteBrokerName
operator|+
literal|"_inbound_"
operator|+
name|brokerName
decl_stmt|;
name|String
name|subName
init|=
literal|"NC-DS_"
operator|+
name|brokerName
operator|+
literal|"_"
operator|+
name|dest
operator|.
name|getPhysicalName
argument_list|()
decl_stmt|;
name|BrokerItem
name|brokerItem
init|=
name|brokers
operator|.
name|get
argument_list|(
name|brokerName
argument_list|)
decl_stmt|;
comment|//brokerItem.broker.getAdminView().createDurableSubscriber(clientId, subName, dest.getPhysicalName(), null);
name|Connection
name|c
init|=
name|brokerItem
operator|.
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|topicSubscriber
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|topicSubscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|NetworkConnector
name|bridgeBrokerPair
parameter_list|(
name|String
name|localBrokerName
parameter_list|,
name|String
name|remoteBrokerName
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|localBroker
init|=
name|brokers
operator|.
name|get
argument_list|(
name|localBrokerName
argument_list|)
operator|.
name|broker
decl_stmt|;
name|BrokerService
name|remoteBroker
init|=
name|brokers
operator|.
name|get
argument_list|(
name|remoteBrokerName
argument_list|)
operator|.
name|broker
decl_stmt|;
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
name|remoteBroker
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
name|URI
name|remoteURI
decl_stmt|;
if|if
condition|(
operator|!
name|transportConnectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|remoteURI
operator|=
name|transportConnectors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
expr_stmt|;
name|String
name|uri
init|=
literal|"static:("
operator|+
name|remoteURI
operator|+
literal|")"
decl_stmt|;
name|NetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setDynamicOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// so matching durable subs are loaded on start
name|connector
operator|.
name|setMessageTTL
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setStaticBridge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Remote broker has no registered connectors."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Delete dataDir.."
operator|+
name|dataDir
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
operator|.
name|recursiveDelete
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://0.0.0.0:0)/BrokerA"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://0.0.0.0:61616)/BrokerB"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://0.0.0.0:0)/BrokerC"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

