begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Hiram Chirino  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|FilterAsyncChannel
import|;
end_import

begin_comment
comment|/**  * A CounterAsyncChannel is a simple {@see org.apache.activeio.AsyncChannelFilter}   * that counts the number bytes that been sent down and up through the channel.  *   * The {@see org.apache.activeio.counter.CounterAttribueEnum.COUNTER_INBOUND_COUNT}  * and {@see org.apache.activeio.counter.CounterAttribueEnum.COUNTER_OUTBOUND_COUNT}  * attributes can be used to find query the channel to get the current inbound and outbound  * byte counts.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|CounterAsyncChannel
extends|extends
name|FilterAsyncChannel
block|{
name|long
name|inBoundCounter
init|=
literal|0
decl_stmt|;
name|long
name|outBoundCounter
init|=
literal|0
decl_stmt|;
comment|/**      * @param next      */
specifier|public
name|CounterAsyncChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.activeio.packet.async.FilterAsyncChannel#onPacket(org.apache.activeio.packet.Packet)      */
specifier|public
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
name|inBoundCounter
operator|+=
name|packet
operator|.
name|remaining
argument_list|()
expr_stmt|;
name|super
operator|.
name|onPacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.apache.activeio.packet.async.FilterAsyncChannel#write(org.apache.activeio.packet.Packet)      */
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|outBoundCounter
operator|+=
name|packet
operator|.
name|position
argument_list|()
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getInBoundCounter
parameter_list|()
block|{
return|return
name|inBoundCounter
return|;
block|}
specifier|public
name|long
name|getOutBoundCounter
parameter_list|()
block|{
return|return
name|outBoundCounter
return|;
block|}
block|}
end_class

end_unit

