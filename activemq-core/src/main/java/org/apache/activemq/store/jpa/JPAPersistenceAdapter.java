begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Persistence
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormatFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryTransactionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link PersistenceAdapter} that uses JPA to  * store it's messages.  *   * @org.apache.xbean.XBean  *   * @version $Revision: 1.17 $  */
end_comment

begin_class
specifier|public
class|class
name|JPAPersistenceAdapter
implements|implements
name|PersistenceAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JPAPersistenceAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|entityManagerName
init|=
literal|"activemq"
decl_stmt|;
name|Properties
name|entityManagerProperties
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|EntityManagerFactory
name|entityManagerFactory
decl_stmt|;
specifier|private
name|WireFormat
name|wireFormat
decl_stmt|;
specifier|private
name|MemoryTransactionStore
name|transactionStore
decl_stmt|;
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Transation already started."
argument_list|)
throw|;
name|EntityManager
name|manager
init|=
name|getEntityManagerFactory
argument_list|()
operator|.
name|createEntityManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|getTransaction
argument_list|()
operator|.
name|begin
argument_list|()
expr_stmt|;
name|context
operator|.
name|setLongTermStoreContext
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|EntityManager
name|manager
init|=
operator|(
name|EntityManager
operator|)
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Transation not started."
argument_list|)
throw|;
name|context
operator|.
name|setLongTermStoreContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|EntityManager
name|manager
init|=
operator|(
name|EntityManager
operator|)
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Transation not started."
argument_list|)
throw|;
name|context
operator|.
name|setLongTermStoreContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getTransaction
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|EntityManager
name|beginEntityManager
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
operator|==
literal|null
condition|)
block|{
name|EntityManager
name|manager
init|=
name|getEntityManagerFactory
argument_list|()
operator|.
name|createEntityManager
argument_list|()
decl_stmt|;
name|manager
operator|.
name|getTransaction
argument_list|()
operator|.
name|begin
argument_list|()
expr_stmt|;
return|return
name|manager
return|;
block|}
else|else
block|{
return|return
operator|(
name|EntityManager
operator|)
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|commitEntityManager
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|EntityManager
name|manager
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
operator|==
literal|null
condition|)
block|{
name|manager
operator|.
name|getTransaction
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|rollbackEntityManager
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|EntityManager
name|manager
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
operator|||
name|context
operator|.
name|getLongTermStoreContext
argument_list|()
operator|==
literal|null
condition|)
block|{
name|manager
operator|.
name|getTransaction
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|manager
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageStore
name|rc
init|=
operator|new
name|JPAMessageStore
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionStore
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|transactionStore
operator|.
name|proxy
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|TopicMessageStore
name|rc
init|=
operator|new
name|JPATopicMessageStore
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionStore
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|transactionStore
operator|.
name|proxy
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|TransactionStore
name|createTransactionStore
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|transactionStore
operator|==
literal|null
condition|)
block|{
name|transactionStore
operator|=
operator|new
name|MemoryTransactionStore
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|transactionStore
return|;
block|}
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|EntityManager
name|manager
init|=
name|beginEntityManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"delete from StoredMessage m"
argument_list|)
decl_stmt|;
name|query
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|query
operator|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"delete from StoredSubscription ss"
argument_list|)
expr_stmt|;
name|query
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|rollbackEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|commitEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
name|getDestinations
parameter_list|()
block|{
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
name|rc
init|=
operator|new
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
name|EntityManager
name|manager
init|=
name|beginEntityManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"select distinct m.destination from StoredMessage m"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dest
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|getResultList
argument_list|()
control|)
block|{
name|rc
operator|.
name|add
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|dest
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rollbackEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|commitEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|rc
init|=
literal|0
decl_stmt|;
name|EntityManager
name|manager
init|=
name|beginEntityManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"select max(m.id) from StoredMessage m"
argument_list|)
decl_stmt|;
name|Long
name|t
init|=
operator|(
name|Long
operator|)
name|query
operator|.
name|getSingleResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|t
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|rollbackEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|commitEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|boolean
name|isUseExternalMessageReferences
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setUsageManager
parameter_list|(
name|UsageManager
name|usageManager
parameter_list|)
block|{ 	}
specifier|public
name|void
name|setUseExternalMessageReferences
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"This persistence adapter does not support externa message references"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{ 	}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|entityManagerFactory
operator|!=
literal|null
condition|)
block|{
name|entityManagerFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|EntityManagerFactory
name|getEntityManagerFactory
parameter_list|()
block|{
if|if
condition|(
name|entityManagerFactory
operator|==
literal|null
condition|)
block|{
name|entityManagerFactory
operator|=
name|createEntityManagerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|entityManagerFactory
return|;
block|}
specifier|protected
name|EntityManagerFactory
name|createEntityManagerFactory
parameter_list|()
block|{
return|return
name|Persistence
operator|.
name|createEntityManagerFactory
argument_list|(
name|getEntityManagerName
argument_list|()
argument_list|,
name|getEntityManagerProperties
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setEntityManagerFactory
parameter_list|(
name|EntityManagerFactory
name|entityManagerFactory
parameter_list|)
block|{
name|this
operator|.
name|entityManagerFactory
operator|=
name|entityManagerFactory
expr_stmt|;
block|}
specifier|public
name|Properties
name|getEntityManagerProperties
parameter_list|()
block|{
return|return
name|entityManagerProperties
return|;
block|}
specifier|public
name|void
name|setEntityManagerProperties
parameter_list|(
name|Properties
name|entityManagerProperties
parameter_list|)
block|{
name|this
operator|.
name|entityManagerProperties
operator|=
name|entityManagerProperties
expr_stmt|;
block|}
specifier|public
name|String
name|getEntityManagerName
parameter_list|()
block|{
return|return
name|entityManagerName
return|;
block|}
specifier|public
name|void
name|setEntityManagerName
parameter_list|(
name|String
name|entityManager
parameter_list|)
block|{
name|this
operator|.
name|entityManagerName
operator|=
name|entityManager
expr_stmt|;
block|}
specifier|public
name|WireFormat
name|getWireFormat
parameter_list|()
block|{
if|if
condition|(
name|wireFormat
operator|==
literal|null
condition|)
block|{
name|wireFormat
operator|=
name|createWireFormat
argument_list|()
expr_stmt|;
block|}
return|return
name|wireFormat
return|;
block|}
specifier|private
name|WireFormat
name|createWireFormat
parameter_list|()
block|{
name|OpenWireFormatFactory
name|wff
init|=
operator|new
name|OpenWireFormatFactory
argument_list|()
decl_stmt|;
return|return
name|wff
operator|.
name|createWireFormat
argument_list|()
return|;
block|}
specifier|public
name|void
name|setWireFormat
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
block|}
end_class

end_unit

