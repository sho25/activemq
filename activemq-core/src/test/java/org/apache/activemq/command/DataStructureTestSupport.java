begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_class
specifier|public
class|class
name|DataStructureTestSupport
extends|extends
name|CombinationTestSupport
block|{
specifier|public
name|boolean
name|cacheEnabled
decl_stmt|;
specifier|public
name|WireFormat
name|wireFormat
decl_stmt|;
specifier|public
name|void
name|assertBeanMarshalls
parameter_list|(
name|Object
name|original
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|o
init|=
name|marshalAndUnmarshall
argument_list|(
name|original
argument_list|,
name|wireFormat
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|original
argument_list|,
name|o
argument_list|)
expr_stmt|;
comment|// assertEquals(original.getClass(), o.getClass());
comment|//
comment|// Method[] methods = original.getClass().getMethods();
comment|// for (int i = 0; i< methods.length; i++) {
comment|// Method method = methods[i];
comment|// if( ( method.getName().startsWith("get")
comment|// || method.getName().startsWith("is")
comment|// )
comment|//&& method.getParameterTypes().length==0
comment|//&& method.getReturnType()!=null
comment|// ) {
comment|// try {
comment|// Object expect = method.invoke(original, null);
comment|// Object was = method.invoke(o, null);
comment|// assertEquals(expect, was);
comment|// } catch (IllegalArgumentException e) {
comment|// } catch (IllegalAccessException e) {
comment|// } catch (InvocationTargetException e) {
comment|// }
comment|// }
comment|// }
block|}
specifier|static
specifier|public
name|void
name|assertEquals
parameter_list|(
name|Object
name|expect
parameter_list|,
name|Object
name|was
parameter_list|)
block|{
if|if
condition|(
name|expect
operator|==
literal|null
operator|^
name|was
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Not equals, expected: "
operator|+
name|expect
operator|+
literal|", was: "
operator|+
name|was
argument_list|)
throw|;
if|if
condition|(
name|expect
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|expect
operator|.
name|getClass
argument_list|()
operator|!=
name|was
operator|.
name|getClass
argument_list|()
condition|)
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Not equals, classes don't match. expected: "
operator|+
name|expect
operator|.
name|getClass
argument_list|()
operator|+
literal|", was: "
operator|+
name|was
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|expect
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Class
name|componentType
init|=
name|expect
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|componentType
operator|==
name|byte
operator|.
name|class
condition|)
block|{
name|ok
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|expect
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|was
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|componentType
operator|==
name|char
operator|.
name|class
condition|)
block|{
name|ok
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|char
index|[]
operator|)
name|expect
argument_list|,
operator|(
name|char
index|[]
operator|)
name|was
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|componentType
operator|==
name|short
operator|.
name|class
condition|)
block|{
name|ok
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|short
index|[]
operator|)
name|expect
argument_list|,
operator|(
name|short
index|[]
operator|)
name|was
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|componentType
operator|==
name|int
operator|.
name|class
condition|)
block|{
name|ok
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|int
index|[]
operator|)
name|expect
argument_list|,
operator|(
name|int
index|[]
operator|)
name|was
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|componentType
operator|==
name|long
operator|.
name|class
condition|)
block|{
name|ok
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|long
index|[]
operator|)
name|expect
argument_list|,
operator|(
name|long
index|[]
operator|)
name|was
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|componentType
operator|==
name|double
operator|.
name|class
condition|)
block|{
name|ok
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|double
index|[]
operator|)
name|expect
argument_list|,
operator|(
name|double
index|[]
operator|)
name|was
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|componentType
operator|==
name|float
operator|.
name|class
condition|)
block|{
name|ok
operator|=
name|Arrays
operator|.
name|equals
argument_list|(
operator|(
name|float
index|[]
operator|)
name|expect
argument_list|,
operator|(
name|float
index|[]
operator|)
name|was
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Arrays not equal"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|Object
name|expectArray
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|expect
decl_stmt|;
name|Object
name|wasArray
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|was
decl_stmt|;
if|if
condition|(
name|expectArray
operator|.
name|length
operator|!=
name|wasArray
operator|.
name|length
condition|)
throw|throw
operator|new
name|AssertionFailedError
argument_list|(
literal|"Not equals, array lengths don't match. expected: "
operator|+
name|expectArray
operator|.
name|length
operator|+
literal|", was: "
operator|+
name|wasArray
operator|.
name|length
argument_list|)
throw|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|wasArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectArray
index|[
name|i
index|]
argument_list|,
name|wasArray
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|expect
operator|instanceof
name|Command
condition|)
block|{
name|assertEquals
argument_list|(
name|expect
operator|.
name|getClass
argument_list|()
argument_list|,
name|was
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Method
index|[]
name|methods
init|=
name|expect
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Method
name|method
init|=
name|methods
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|||
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"is"
argument_list|)
operator|)
operator|&&
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|0
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Check to see if there is a setter for the method.
try|try
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|expect
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"get"
argument_list|,
literal|"set"
argument_list|)
argument_list|,
operator|new
name|Class
index|[]
block|{
name|method
operator|.
name|getReturnType
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expect
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"is"
argument_list|,
literal|"set"
argument_list|)
argument_list|,
operator|new
name|Class
index|[]
block|{
name|method
operator|.
name|getReturnType
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{
continue|continue;
block|}
try|try
block|{
name|assertEquals
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
name|expect
argument_list|,
literal|null
argument_list|)
argument_list|,
name|method
operator|.
name|invoke
argument_list|(
name|was
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{                     }
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{                     }
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{                     }
block|}
block|}
block|}
else|else
block|{
name|TestCase
operator|.
name|assertEquals
argument_list|(
name|expect
argument_list|,
name|was
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|wireFormat
operator|=
name|createWireFormat
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|WireFormat
name|createWireFormat
parameter_list|()
block|{
name|OpenWireFormat
name|answer
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setCacheEnabled
argument_list|(
name|cacheEnabled
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|Object
name|marshalAndUnmarshall
parameter_list|(
name|Object
name|original
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|Packet
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|original
argument_list|)
decl_stmt|;
return|return
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|packet
argument_list|)
return|;
block|}
block|}
end_class

end_unit

