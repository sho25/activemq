begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|xmpp
package|;
end_package

begin_import
import|import
name|ietf
operator|.
name|params
operator|.
name|xml
operator|.
name|ns
operator|.
name|xmpp_sasl
operator|.
name|Mechanisms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpBufferedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpBufferedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabber
operator|.
name|etherx
operator|.
name|streams
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLReporter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|StartElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|XMLEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|XmppTransport
extends|extends
name|TcpTransport
block|{
specifier|protected
specifier|static
specifier|final
name|QName
name|ATTRIBUTE_TO
init|=
operator|new
name|QName
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|XmppTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|JAXBContext
name|context
decl_stmt|;
specifier|private
name|XMLEventReader
name|xmlReader
decl_stmt|;
specifier|private
name|Unmarshaller
name|unmarshaller
decl_stmt|;
specifier|private
name|Marshaller
name|marshaller
decl_stmt|;
specifier|private
name|XMLStreamWriter
name|xmlWriter
decl_stmt|;
specifier|private
name|String
name|to
init|=
literal|"client"
decl_stmt|;
specifier|protected
name|OutputStream
name|outputStream
decl_stmt|;
specifier|protected
name|InputStream
name|inputStream
decl_stmt|;
specifier|private
name|ProtocolConverter
name|converter
decl_stmt|;
specifier|private
name|String
name|from
decl_stmt|;
specifier|public
name|XmppTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socket
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XmppTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|,
name|URI
name|uri
parameter_list|,
name|URI
name|uri1
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socketFactory
argument_list|,
name|uri
argument_list|,
name|uri1
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|converter
operator|=
operator|new
name|ProtocolConverter
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|oneway
parameter_list|(
name|Object
name|object
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|object
operator|instanceof
name|Command
condition|)
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|object
decl_stmt|;
if|if
condition|(
name|command
operator|instanceof
name|BrokerInfo
condition|)
block|{
name|BrokerInfo
name|brokerInfo
init|=
operator|(
name|BrokerInfo
operator|)
name|command
decl_stmt|;
name|String
name|id
init|=
name|brokerInfo
operator|.
name|getBrokerId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|from
operator|=
name|brokerInfo
operator|.
name|getBrokerName
argument_list|()
expr_stmt|;
try|try
block|{
name|writeOpenStream
argument_list|(
name|id
argument_list|,
name|from
argument_list|)
expr_stmt|;
comment|// now lets write the features
name|Features
name|features
init|=
operator|new
name|Features
argument_list|()
decl_stmt|;
comment|// TODO support TLS
comment|//features.getAny().add(new Starttls());
name|Mechanisms
name|mechanisms
init|=
operator|new
name|Mechanisms
argument_list|()
decl_stmt|;
comment|// TODO support SASL
comment|//mechanisms.getMechanism().add("DIGEST-MD5");
comment|//mechanisms.getMechanism().add("PLAIN");
name|features
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|mechanisms
argument_list|)
expr_stmt|;
name|marshall
argument_list|(
name|features
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
name|converter
operator|.
name|onActiveMQCommad
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unkown command: "
operator|+
name|object
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Marshalls the given POJO to the client      */
specifier|public
name|void
name|marshall
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|marshaller
operator|.
name|marshal
argument_list|(
name|command
argument_list|,
name|xmlWriter
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"XMPP consumer thread starting"
argument_list|)
expr_stmt|;
try|try
block|{
name|XMLInputFactory
name|xif
init|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|xif
operator|.
name|setXMLReporter
argument_list|(
operator|new
name|XMLReporter
argument_list|()
block|{
specifier|public
name|void
name|report
parameter_list|(
name|String
name|message
parameter_list|,
name|String
name|errorType
parameter_list|,
name|Object
name|relatedInformation
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|log
operator|.
name|warn
argument_list|(
name|message
operator|+
literal|" errorType: "
operator|+
name|errorType
operator|+
literal|" relatedInfo: "
operator|+
name|relatedInformation
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|xmlReader
operator|=
name|xif
operator|.
name|createXMLEventReader
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|XMLEvent
name|docStart
init|=
name|xmlReader
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
name|XMLEvent
name|rootElement
init|=
name|xmlReader
operator|.
name|nextTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootElement
operator|instanceof
name|StartElement
condition|)
block|{
name|StartElement
name|startElement
init|=
operator|(
name|StartElement
operator|)
name|rootElement
decl_stmt|;
name|Attribute
name|toAttribute
init|=
name|startElement
operator|.
name|getAttributeByName
argument_list|(
name|ATTRIBUTE_TO
argument_list|)
decl_stmt|;
if|if
condition|(
name|toAttribute
operator|!=
literal|null
condition|)
block|{
name|to
operator|=
name|toAttribute
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|isStopped
argument_list|()
condition|)
block|{
break|break;
block|}
name|XMLEvent
name|event
init|=
name|xmlReader
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
comment|// unmarshal a new object
name|Object
name|object
init|=
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
name|xmlReader
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
condition|)
block|{
name|converter
operator|.
name|onXmppCommand
argument_list|(
name|object
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLEvent
operator|.
name|END_ELEMENT
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|event
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLEvent
operator|.
name|END_ELEMENT
operator|||
name|event
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLEvent
operator|.
name|END_DOCUMENT
condition|)
block|{
break|break;
block|}
else|else
block|{
name|xmlReader
operator|.
name|nextEvent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"XMPP Reader thread caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"XMPP Reader thread caught: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to stop XMPP transport: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|xmlWriter
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|xmlWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|// the client may have closed first so ignore this
name|log
operator|.
name|info
argument_list|(
literal|"Caught trying to close transport: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|xmlReader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|xmlReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
comment|// the client may have closed first so ignore this
name|log
operator|.
name|info
argument_list|(
literal|"Caught trying to close transport: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|doStop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeStreams
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO it would be preferable to use class discovery here!
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
literal|"jabber.client"
operator|+
literal|":jabber.server"
operator|+
literal|":jabber.iq._private"
operator|+
literal|":jabber.iq.auth"
operator|+
literal|":jabber.iq.gateway"
operator|+
literal|":jabber.iq.last"
operator|+
literal|":jabber.iq.oob"
operator|+
literal|":jabber.iq.pass"
operator|+
literal|":jabber.iq.roster"
operator|+
literal|":jabber.iq.time"
operator|+
literal|":jabber.iq.version"
operator|+
literal|":org.jabber.etherx.streams"
operator|+
literal|":org.jabber.protocol.activity"
operator|+
literal|":org.jabber.protocol.address"
operator|+
literal|":org.jabber.protocol.amp"
operator|+
literal|":org.jabber.protocol.amp_errors"
operator|+
literal|":org.jabber.protocol.disco_info"
operator|+
literal|":org.jabber.protocol.disco_items"
operator|+
literal|":org.jabber.protocol.muc"
operator|+
literal|":org.jabber.protocol.muc_admin"
operator|+
literal|":org.jabber.protocol.muc_unique"
operator|+
literal|":org.jabber.protocol.muc_user"
operator|+
literal|":ietf.params.xml.ns.xmpp_sasl"
operator|+
literal|":ietf.params.xml.ns.xmpp_stanzas"
operator|+
literal|":ietf.params.xml.ns.xmpp_streams"
operator|+
literal|":ietf.params.xml.ns.xmpp_tls"
argument_list|)
expr_stmt|;
name|inputStream
operator|=
operator|new
name|TcpBufferedInputStream
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|8
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|outputStream
operator|=
operator|new
name|TcpBufferedOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|unmarshaller
operator|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
name|marshaller
operator|=
name|context
operator|.
name|createMarshaller
argument_list|()
expr_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FRAGMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeOpenStream
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|from
parameter_list|)
throws|throws
name|IOException
throws|,
name|XMLStreamException
block|{
name|XMLOutputFactory
name|factory
init|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|//factory.setProperty(XMLOutputFactory.IS_REPAIRING_NAMESPACES, true);
name|xmlWriter
operator|=
name|factory
operator|.
name|createXMLStreamWriter
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
comment|// write the dummy start tag
name|xmlWriter
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"stream"
argument_list|,
literal|"stream"
argument_list|,
literal|"http://etherx.jabber.org/streams"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeDefaultNamespace
argument_list|(
literal|"jabber:client"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeNamespace
argument_list|(
literal|"stream"
argument_list|,
literal|"http://etherx.jabber.org/streams"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"version"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|to
operator|==
literal|null
condition|)
block|{
name|to
operator|=
literal|"client"
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"to"
argument_list|,
name|to
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"from"
argument_list|,
name|from
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeCharacters
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

