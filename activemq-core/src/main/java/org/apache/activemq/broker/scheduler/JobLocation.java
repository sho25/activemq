begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_class
class|class
name|JobLocation
block|{
specifier|private
name|String
name|jobId
decl_stmt|;
specifier|private
name|int
name|repeat
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|long
name|delay
decl_stmt|;
specifier|private
name|long
name|nextTime
decl_stmt|;
specifier|private
name|long
name|period
decl_stmt|;
specifier|private
name|String
name|cronEntry
decl_stmt|;
specifier|private
specifier|final
name|Location
name|location
decl_stmt|;
specifier|public
name|JobLocation
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|JobLocation
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Location
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readExternal
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|jobId
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|this
operator|.
name|repeat
operator|=
name|in
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|startTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|nextTime
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|period
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|cronEntry
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|this
operator|.
name|location
operator|.
name|readExternal
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeExternal
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|jobId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|this
operator|.
name|repeat
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|startTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|delay
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|nextTime
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|period
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cronEntry
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|cronEntry
operator|=
literal|""
expr_stmt|;
block|}
name|out
operator|.
name|writeUTF
argument_list|(
name|this
operator|.
name|cronEntry
argument_list|)
expr_stmt|;
name|this
operator|.
name|location
operator|.
name|writeExternal
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the jobId      */
specifier|public
name|String
name|getJobId
parameter_list|()
block|{
return|return
name|this
operator|.
name|jobId
return|;
block|}
comment|/**      * @param jobId      *            the jobId to set      */
specifier|public
name|void
name|setJobId
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
name|this
operator|.
name|jobId
operator|=
name|jobId
expr_stmt|;
block|}
comment|/**      * @return the repeat      */
specifier|public
name|int
name|getRepeat
parameter_list|()
block|{
return|return
name|this
operator|.
name|repeat
return|;
block|}
comment|/**      * @param repeat      *            the repeat to set      */
specifier|public
name|void
name|setRepeat
parameter_list|(
name|int
name|repeat
parameter_list|)
block|{
name|this
operator|.
name|repeat
operator|=
name|repeat
expr_stmt|;
block|}
comment|/**      * @return the start      */
specifier|public
name|long
name|getStartTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|startTime
return|;
block|}
comment|/**      * @param start      *            the start to set      */
specifier|public
name|void
name|setStartTime
parameter_list|(
name|long
name|start
parameter_list|)
block|{
name|this
operator|.
name|startTime
operator|=
name|start
expr_stmt|;
block|}
comment|/**      * @return the nextTime      */
specifier|public
specifier|synchronized
name|long
name|getNextTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|nextTime
return|;
block|}
comment|/**      * @param nextTime the nextTime to set      */
specifier|public
specifier|synchronized
name|void
name|setNextTime
parameter_list|(
name|long
name|nextTime
parameter_list|)
block|{
name|this
operator|.
name|nextTime
operator|=
name|nextTime
expr_stmt|;
block|}
comment|/**      * @return the period      */
specifier|public
name|long
name|getPeriod
parameter_list|()
block|{
return|return
name|this
operator|.
name|period
return|;
block|}
comment|/**      * @param period      *            the period to set      */
specifier|public
name|void
name|setPeriod
parameter_list|(
name|long
name|period
parameter_list|)
block|{
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
block|}
comment|/**      * @return the cronEntry      */
specifier|public
specifier|synchronized
name|String
name|getCronEntry
parameter_list|()
block|{
return|return
name|this
operator|.
name|cronEntry
return|;
block|}
comment|/**      * @param cronEntry the cronEntry to set      */
specifier|public
specifier|synchronized
name|void
name|setCronEntry
parameter_list|(
name|String
name|cronEntry
parameter_list|)
block|{
name|this
operator|.
name|cronEntry
operator|=
name|cronEntry
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCron
parameter_list|()
block|{
return|return
name|getCronEntry
argument_list|()
operator|!=
literal|null
operator|&&
name|getCronEntry
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * @return the delay      */
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
return|return
name|this
operator|.
name|delay
return|;
block|}
comment|/**      * @param delay the delay to set      */
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
comment|/**      * @return the location      */
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Job [id="
operator|+
name|jobId
operator|+
literal|", startTime="
operator|+
operator|new
name|Date
argument_list|(
name|startTime
argument_list|)
operator|+
literal|", delay="
operator|+
name|delay
operator|+
literal|", period="
operator|+
name|period
operator|+
literal|", repeat="
operator|+
name|repeat
operator|+
literal|", nextTime="
operator|+
operator|new
name|Date
argument_list|(
name|nextTime
argument_list|)
operator|+
literal|"]"
return|;
block|}
specifier|static
class|class
name|JobLocationMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|List
argument_list|<
name|JobLocation
argument_list|>
argument_list|>
block|{
specifier|static
specifier|final
name|JobLocationMarshaller
name|INSTANCE
init|=
operator|new
name|JobLocationMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|List
argument_list|<
name|JobLocation
argument_list|>
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|JobLocation
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|JobLocation
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|JobLocation
name|jobLocation
init|=
operator|new
name|JobLocation
argument_list|()
decl_stmt|;
name|jobLocation
operator|.
name|readExternal
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|jobLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|List
argument_list|<
name|JobLocation
argument_list|>
name|value
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|value
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JobLocation
name|jobLocation
range|:
name|value
control|)
block|{
name|jobLocation
operator|.
name|writeExternal
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

