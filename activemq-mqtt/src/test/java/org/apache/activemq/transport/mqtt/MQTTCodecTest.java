begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|CONNECT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests the functionality of the MQTTCodec class.  */
end_comment

begin_class
specifier|public
class|class
name|MQTTCodecTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTCodecTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MQTTWireFormat
name|wireFormat
init|=
operator|new
name|MQTTWireFormat
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MQTTFrame
argument_list|>
name|frames
decl_stmt|;
specifier|private
name|MQTTCodec
name|codec
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|frames
operator|=
operator|new
name|ArrayList
argument_list|<
name|MQTTFrame
argument_list|>
argument_list|()
expr_stmt|;
name|codec
operator|=
operator|new
name|MQTTCodec
argument_list|(
operator|new
name|MQTTCodec
operator|.
name|MQTTFrameSink
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFrame
parameter_list|(
name|MQTTFrame
name|mqttFrame
parameter_list|)
block|{
name|frames
operator|.
name|add
argument_list|(
name|mqttFrame
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyConnectBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|CONNECT
name|connect
init|=
operator|new
name|CONNECT
argument_list|()
decl_stmt|;
name|connect
operator|.
name|cleanSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
operator|.
name|clientId
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|DataByteArrayOutputStream
name|output
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|connect
operator|.
name|encode
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Buffer
name|marshalled
init|=
name|output
operator|.
name|toBuffer
argument_list|()
decl_stmt|;
name|DataByteArrayInputStream
name|input
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|marshalled
argument_list|)
decl_stmt|;
name|codec
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|marshalled
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|frames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|frames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connect
operator|=
operator|new
name|CONNECT
argument_list|()
operator|.
name|decode
argument_list|(
name|frames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Unmarshalled: {}"
argument_list|,
name|connect
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|connect
operator|.
name|cleanSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectWithCredentialsBackToBack
parameter_list|()
throws|throws
name|Exception
block|{
name|CONNECT
name|connect
init|=
operator|new
name|CONNECT
argument_list|()
decl_stmt|;
name|connect
operator|.
name|cleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
operator|.
name|clientId
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|userName
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|password
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|DataByteArrayOutputStream
name|output
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|connect
operator|.
name|encode
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|connect
operator|.
name|encode
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Buffer
name|marshalled
init|=
name|output
operator|.
name|toBuffer
argument_list|()
decl_stmt|;
name|DataByteArrayInputStream
name|input
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|marshalled
argument_list|)
decl_stmt|;
name|codec
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|marshalled
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|frames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|frames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MQTTFrame
name|frame
range|:
name|frames
control|)
block|{
name|connect
operator|=
operator|new
name|CONNECT
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Unmarshalled: {}"
argument_list|,
name|connect
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connect
operator|.
name|cleanSession
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|connect
operator|.
name|userName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pass"
argument_list|,
name|connect
operator|.
name|password
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|connect
operator|.
name|clientId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessInChunks
parameter_list|()
throws|throws
name|Exception
block|{
name|CONNECT
name|connect
init|=
operator|new
name|CONNECT
argument_list|()
decl_stmt|;
name|connect
operator|.
name|cleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
operator|.
name|clientId
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|userName
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|password
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|DataByteArrayOutputStream
name|output
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|connect
operator|.
name|encode
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Buffer
name|marshalled
init|=
name|output
operator|.
name|toBuffer
argument_list|()
decl_stmt|;
name|DataByteArrayInputStream
name|input
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|marshalled
argument_list|)
decl_stmt|;
name|int
name|first
init|=
name|marshalled
operator|.
name|length
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|second
init|=
name|marshalled
operator|.
name|length
argument_list|()
operator|-
name|first
decl_stmt|;
name|codec
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|codec
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|frames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|frames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connect
operator|=
operator|new
name|CONNECT
argument_list|()
operator|.
name|decode
argument_list|(
name|frames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Unmarshalled: {}"
argument_list|,
name|connect
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connect
operator|.
name|cleanSession
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|connect
operator|.
name|userName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pass"
argument_list|,
name|connect
operator|.
name|password
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|connect
operator|.
name|clientId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessInBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|CONNECT
name|connect
init|=
operator|new
name|CONNECT
argument_list|()
decl_stmt|;
name|connect
operator|.
name|cleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
operator|.
name|clientId
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|userName
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"user"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
operator|.
name|password
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
name|DataByteArrayOutputStream
name|output
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|connect
operator|.
name|encode
argument_list|()
argument_list|,
name|output
argument_list|)
expr_stmt|;
name|Buffer
name|marshalled
init|=
name|output
operator|.
name|toBuffer
argument_list|()
decl_stmt|;
name|DataByteArrayInputStream
name|input
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|marshalled
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|marshalled
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
block|{
name|codec
operator|.
name|parse
argument_list|(
name|input
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
operator|!
name|frames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|frames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connect
operator|=
operator|new
name|CONNECT
argument_list|()
operator|.
name|decode
argument_list|(
name|frames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Unmarshalled: {}"
argument_list|,
name|connect
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connect
operator|.
name|cleanSession
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user"
argument_list|,
name|connect
operator|.
name|userName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"pass"
argument_list|,
name|connect
operator|.
name|password
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|connect
operator|.
name|clientId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

