begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
block|{
literal|"virtual-topic-network-test.xml"
block|}
argument_list|)
specifier|public
class|class
name|MessageDestinationVirtualTopicTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MessageDestinationVirtualTopicTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleMessageListener
name|listener1
decl_stmt|;
specifier|private
name|SimpleMessageListener
name|listener2
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"broker1"
argument_list|)
specifier|private
name|BrokerService
name|broker1
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"broker2"
argument_list|)
specifier|private
name|BrokerService
name|broker2
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|Session
name|session1
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// Create connection on Broker B2
name|ConnectionFactory
name|broker2ConnectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"tcp://localhost:62616"
argument_list|)
decl_stmt|;
name|Connection
name|connection2
init|=
name|broker2ConnectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection2
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session2
init|=
name|connection2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|consumerDQueue
init|=
name|session2
operator|.
name|createQueue
argument_list|(
literal|"Consumer.D.VirtualTopic.T1"
argument_list|)
decl_stmt|;
comment|// Bind listener on queue for consumer D
name|MessageConsumer
name|consumer
init|=
name|session2
operator|.
name|createConsumer
argument_list|(
name|consumerDQueue
argument_list|)
decl_stmt|;
name|listener2
operator|=
operator|new
name|SimpleMessageListener
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener2
argument_list|)
expr_stmt|;
comment|// Create connection on Broker B1
name|ConnectionFactory
name|broker1ConnectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
decl_stmt|;
name|Connection
name|connection1
init|=
name|broker1ConnectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection1
operator|.
name|start
argument_list|()
expr_stmt|;
name|session1
operator|=
name|connection1
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Queue
name|consumerCQueue
init|=
name|session1
operator|.
name|createQueue
argument_list|(
literal|"Consumer.C.VirtualTopic.T1"
argument_list|)
decl_stmt|;
comment|// Bind listener on queue for consumer D
name|MessageConsumer
name|consumer1
init|=
name|session1
operator|.
name|createConsumer
argument_list|(
name|consumerCQueue
argument_list|)
decl_stmt|;
name|listener1
operator|=
operator|new
name|SimpleMessageListener
argument_list|()
expr_stmt|;
name|consumer1
operator|.
name|setMessageListener
argument_list|(
name|listener1
argument_list|)
expr_stmt|;
comment|// Create producer for topic, on B1
name|Topic
name|virtualTopicT1
init|=
name|session1
operator|.
name|createTopic
argument_list|(
literal|"VirtualTopic.T1"
argument_list|)
decl_stmt|;
name|producer
operator|=
name|session1
operator|.
name|createProducer
argument_list|(
name|virtualTopicT1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDestinationNames
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started waiting for broker 1 and 2"
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker 1 and 2 have started"
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
comment|// Create a monitor
name|CountDownLatch
name|monitor
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|listener1
operator|.
name|setCountDown
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
name|listener2
operator|.
name|setCountDown
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message"
argument_list|)
expr_stmt|;
comment|// Send a message on the topic
name|TextMessage
name|message
init|=
name|session1
operator|.
name|createTextMessage
argument_list|(
literal|"Hello World !"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for message reception"
argument_list|)
expr_stmt|;
comment|// Wait the two messages in the related queues
name|monitor
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Get the message destinations
name|String
name|lastJMSDestination2
init|=
name|listener2
operator|.
name|getLastJMSDestination
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|lastJMSDestination2
argument_list|)
expr_stmt|;
name|String
name|lastJMSDestination1
init|=
name|listener1
operator|.
name|getLastJMSDestination
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|lastJMSDestination1
argument_list|)
expr_stmt|;
comment|// The destination names
name|assertEquals
argument_list|(
literal|"queue://Consumer.D.VirtualTopic.T1"
argument_list|,
name|lastJMSDestination2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue://Consumer.C.VirtualTopic.T1"
argument_list|,
name|lastJMSDestination1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

