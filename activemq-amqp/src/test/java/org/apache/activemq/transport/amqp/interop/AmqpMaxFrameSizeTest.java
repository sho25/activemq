begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|interop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClientTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnectionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Test that the maxFrameSize setting prevents large frames from being processed.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AmqpMaxFrameSizeTest
extends|extends
name|AmqpClientTestSupport
block|{
specifier|private
specifier|final
name|String
name|testName
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFrameSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxAmqpFrameSize
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"amqp-> MFS> MAFS"
block|,
literal|"amqp"
block|,
literal|false
block|,
literal|1024
block|,
literal|2048
block|}
block|,
block|{
literal|"amqp-> MFS< MAFS"
block|,
literal|"amqp"
block|,
literal|false
block|,
literal|2048
block|,
literal|1024
block|}
block|,
block|{
literal|"amqp+nio-> MFS> MAFS"
block|,
literal|"amqp+nio"
block|,
literal|false
block|,
literal|1024
block|,
literal|2048
block|}
block|,
block|{
literal|"amqp+nio-> MFS< MAFS"
block|,
literal|"amqp+nio"
block|,
literal|false
block|,
literal|2048
block|,
literal|1024
block|}
block|,             }
argument_list|)
return|;
block|}
specifier|public
name|AmqpMaxFrameSizeTest
parameter_list|(
name|String
name|testName
parameter_list|,
name|String
name|connectorScheme
parameter_list|,
name|boolean
name|useSSL
parameter_list|,
name|int
name|maxFrameSize
parameter_list|,
name|int
name|maxAmqpFrameSize
parameter_list|)
block|{
name|super
argument_list|(
name|connectorScheme
argument_list|,
name|useSSL
argument_list|)
expr_stmt|;
name|this
operator|.
name|testName
operator|=
name|testName
expr_stmt|;
name|this
operator|.
name|maxFrameSize
operator|=
name|maxFrameSize
expr_stmt|;
name|this
operator|.
name|maxAmqpFrameSize
operator|=
name|maxAmqpFrameSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getAdditionalConfig
parameter_list|()
block|{
return|return
literal|"&transport.wireFormat.maxAmqpFrameSize="
operator|+
name|maxAmqpFrameSize
operator|+
literal|"&transport.maxFrameSize="
operator|+
name|maxFrameSize
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|600000
argument_list|)
specifier|public
name|void
name|testMaxFrameSizeApplied
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Test starting {} for transport {} with MFS:{} and MAFS:{}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|testName
block|,
name|getConnectorScheme
argument_list|()
block|,
name|maxFrameSize
block|,
name|maxAmqpFrameSize
block|}
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|failed
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|client
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setListener
argument_list|(
operator|new
name|AmqpConnectionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|failed
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
name|maxFrameSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|42
expr_stmt|;
block|}
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBytes
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connection should have failed"
argument_list|,
name|failed
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

