begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ScheduledMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TypeConversionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_class
specifier|public
class|class
name|SchedulerBroker
extends|extends
name|BrokerFilter
implements|implements
name|JobListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SchedulerBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|()
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
name|JobSchedulerStore
name|store
decl_stmt|;
specifier|private
name|JobScheduler
name|scheduler
decl_stmt|;
specifier|public
name|SchedulerBroker
parameter_list|(
name|Broker
name|next
parameter_list|,
name|File
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
name|this
operator|.
name|producerId
operator|.
name|setConnectionId
argument_list|(
name|ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|.
name|setSecurityContext
argument_list|(
name|SecurityContext
operator|.
name|BROKER_SECURITY_CONTEXT
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scheduler using directory: "
operator|+
name|directory
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|JobScheduler
name|getJobScheduler
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|JobSchedulerFacade
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * @return the directory      */
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|this
operator|.
name|directory
return|;
block|}
comment|/**      * @param directory      *            the directory to set      */
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|started
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|store
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|scheduler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|scheduler
operator|.
name|removeListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|delay
init|=
literal|0
decl_stmt|;
name|long
name|period
init|=
literal|0
decl_stmt|;
name|int
name|repeat
init|=
literal|0
decl_stmt|;
name|String
name|cronEntry
init|=
literal|""
decl_stmt|;
name|Object
name|cronValue
init|=
name|messageSend
operator|.
name|getProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_CRON
argument_list|)
decl_stmt|;
name|Object
name|periodValue
init|=
name|messageSend
operator|.
name|getProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_PERIOD
argument_list|)
decl_stmt|;
name|Object
name|delayValue
init|=
name|messageSend
operator|.
name|getProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_DELAY
argument_list|)
decl_stmt|;
if|if
condition|(
name|cronValue
operator|!=
literal|null
operator|||
name|periodValue
operator|!=
literal|null
operator|||
name|delayValue
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
name|wireFormat
operator|.
name|marshal
argument_list|(
name|messageSend
argument_list|)
decl_stmt|;
if|if
condition|(
name|cronValue
operator|!=
literal|null
condition|)
block|{
name|cronEntry
operator|=
name|cronValue
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|periodValue
operator|!=
literal|null
condition|)
block|{
name|period
operator|=
operator|(
name|Long
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|periodValue
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delayValue
operator|!=
literal|null
condition|)
block|{
name|delay
operator|=
operator|(
name|Long
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|delayValue
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|Object
name|repeatValue
init|=
name|messageSend
operator|.
name|getProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_REPEAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|repeatValue
operator|!=
literal|null
condition|)
block|{
name|repeat
operator|=
operator|(
name|Integer
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|repeatValue
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|getInternalScheduler
argument_list|()
operator|.
name|schedule
argument_list|(
name|messageSend
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|ByteSequence
argument_list|(
name|packet
operator|.
name|data
argument_list|,
name|packet
operator|.
name|offset
argument_list|,
name|packet
operator|.
name|length
argument_list|)
argument_list|,
name|cronEntry
argument_list|,
name|delay
argument_list|,
name|period
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|scheduledJob
parameter_list|(
name|String
name|id
parameter_list|,
name|ByteSequence
name|job
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
name|packet
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
argument_list|(
name|job
operator|.
name|getData
argument_list|()
argument_list|,
name|job
operator|.
name|getOffset
argument_list|()
argument_list|,
name|job
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Message
name|messageSend
init|=
operator|(
name|Message
operator|)
name|this
operator|.
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|messageSend
operator|.
name|setOriginalTransactionId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Object
name|repeatValue
init|=
name|messageSend
operator|.
name|getProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_REPEAT
argument_list|)
decl_stmt|;
name|Object
name|cronValue
init|=
name|messageSend
operator|.
name|getProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_REPEAT
argument_list|)
decl_stmt|;
name|String
name|cronStr
init|=
name|cronValue
operator|!=
literal|null
condition|?
name|cronValue
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
name|int
name|repeat
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|repeatValue
operator|!=
literal|null
condition|)
block|{
name|repeat
operator|=
operator|(
name|Integer
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|repeatValue
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repeat
operator|!=
literal|0
operator|||
name|cronStr
operator|!=
literal|null
operator|&&
name|cronStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// create a unique id - the original message could be sent
comment|// lots of times
name|messageSend
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|this
operator|.
name|producerId
argument_list|,
name|this
operator|.
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add the jobId as a property
name|messageSend
operator|.
name|setProperty
argument_list|(
literal|"scheduledJobId"
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// if this goes across a network - we don't want it rescheduled
name|messageSend
operator|.
name|removeProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_PERIOD
argument_list|)
expr_stmt|;
name|messageSend
operator|.
name|removeProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_DELAY
argument_list|)
expr_stmt|;
name|messageSend
operator|.
name|removeProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_REPEAT
argument_list|)
expr_stmt|;
name|messageSend
operator|.
name|removeProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_CRON
argument_list|)
expr_stmt|;
specifier|final
name|ProducerBrokerExchange
name|producerExchange
init|=
operator|new
name|ProducerBrokerExchange
argument_list|()
decl_stmt|;
name|producerExchange
operator|.
name|setConnectionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setMutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setProducerState
argument_list|(
operator|new
name|ProducerState
argument_list|(
operator|new
name|ProducerInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send scheduled message "
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|synchronized
name|JobScheduler
name|getInternalScheduler
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|scheduler
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|getStore
argument_list|()
operator|.
name|getJobScheduler
argument_list|(
literal|"JMS"
argument_list|)
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|addListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|scheduler
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|JobSchedulerStore
name|getStore
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|store
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|store
operator|=
operator|new
name|JobSchedulerStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|store
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

