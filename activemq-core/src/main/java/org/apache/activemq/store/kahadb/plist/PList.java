begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|plist
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|plist
operator|.
name|EntryLocation
operator|.
name|EntryLocationMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Page
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_class
specifier|public
class|class
name|PList
block|{
specifier|final
name|PListStore
name|store
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|long
name|rootId
init|=
name|EntryLocation
operator|.
name|NOT_SET
decl_stmt|;
specifier|private
name|long
name|lastId
init|=
name|EntryLocation
operator|.
name|NOT_SET
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|loaded
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|int
name|size
init|=
literal|0
decl_stmt|;
name|Object
name|indexLock
decl_stmt|;
name|PList
parameter_list|(
name|PListStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|indexLock
operator|=
name|store
operator|.
name|getIndexLock
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      * @see org.apache.activemq.beanstalk.JobScheduler#getName()      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|this
operator|.
name|size
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
comment|/**      * @return the rootId      */
specifier|public
name|long
name|getRootId
parameter_list|()
block|{
return|return
name|this
operator|.
name|rootId
return|;
block|}
comment|/**      * @param rootId      *            the rootId to set      */
specifier|public
name|void
name|setRootId
parameter_list|(
name|long
name|rootId
parameter_list|)
block|{
name|this
operator|.
name|rootId
operator|=
name|rootId
expr_stmt|;
block|}
comment|/**      * @return the lastId      */
specifier|public
name|long
name|getLastId
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastId
return|;
block|}
comment|/**      * @param lastId      *            the lastId to set      */
specifier|public
name|void
name|setLastId
parameter_list|(
name|long
name|lastId
parameter_list|)
block|{
name|this
operator|.
name|lastId
operator|=
name|lastId
expr_stmt|;
block|}
comment|/**      * @return the loaded      */
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|this
operator|.
name|loaded
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|read
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|rootId
operator|=
name|in
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|in
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|this
operator|.
name|rootId
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|destroy
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|destroy
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|destroy
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// start from the first
name|EntryLocation
name|entry
init|=
name|getFirst
argument_list|(
name|tx
argument_list|)
decl_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|EntryLocation
name|toRemove
init|=
name|entry
operator|.
name|copy
argument_list|()
decl_stmt|;
name|entry
operator|=
name|getNext
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
name|doRemove
argument_list|(
name|tx
argument_list|,
name|toRemove
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|load
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|loaded
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
specifier|final
name|Page
argument_list|<
name|EntryLocation
argument_list|>
name|p
init|=
name|tx
operator|.
name|load
argument_list|(
name|this
operator|.
name|rootId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getType
argument_list|()
operator|==
name|Page
operator|.
name|PAGE_FREE_TYPE
condition|)
block|{
comment|// Need to initialize it..
name|EntryLocation
name|root
init|=
name|createEntry
argument_list|(
name|p
argument_list|,
literal|"root"
argument_list|,
name|EntryLocation
operator|.
name|NOT_SET
argument_list|,
name|EntryLocation
operator|.
name|NOT_SET
argument_list|)
decl_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastId
operator|=
name|root
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// find last id
name|long
name|nextId
init|=
name|this
operator|.
name|rootId
decl_stmt|;
while|while
condition|(
name|nextId
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
name|EntryLocation
name|next
init|=
name|getNext
argument_list|(
name|tx
argument_list|,
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|lastId
operator|=
name|next
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
expr_stmt|;
name|nextId
operator|=
name|next
operator|.
name|getNext
argument_list|()
expr_stmt|;
name|this
operator|.
name|size
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|unload
parameter_list|()
block|{
if|if
condition|(
name|loaded
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|rootId
operator|=
name|EntryLocation
operator|.
name|NOT_SET
expr_stmt|;
name|this
operator|.
name|lastId
operator|=
name|EntryLocation
operator|.
name|NOT_SET
expr_stmt|;
name|this
operator|.
name|size
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|addLast
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|ByteSequence
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|store
operator|.
name|write
argument_list|(
name|bs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|addLast
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
name|bs
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addLast
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|id
parameter_list|,
name|ByteSequence
name|bs
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|EntryLocation
name|entry
init|=
name|createEntry
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
name|this
operator|.
name|lastId
argument_list|,
name|EntryLocation
operator|.
name|NOT_SET
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|incrementJournalCount
argument_list|(
name|tx
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|EntryLocation
name|last
init|=
name|loadEntry
argument_list|(
name|tx
argument_list|,
name|this
operator|.
name|lastId
argument_list|)
decl_stmt|;
name|last
operator|.
name|setNext
argument_list|(
name|entry
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastId
operator|=
name|entry
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
expr_stmt|;
name|this
operator|.
name|size
operator|++
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|addFirst
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|ByteSequence
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Location
name|location
init|=
name|this
operator|.
name|store
operator|.
name|write
argument_list|(
name|bs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|addFirst
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
name|bs
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addFirst
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|id
parameter_list|,
name|ByteSequence
name|bs
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|EntryLocation
name|entry
init|=
name|createEntry
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
name|EntryLocation
operator|.
name|NOT_SET
argument_list|,
name|EntryLocation
operator|.
name|NOT_SET
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|EntryLocation
name|oldFirst
init|=
name|getFirst
argument_list|(
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFirst
operator|!=
literal|null
condition|)
block|{
name|oldFirst
operator|.
name|setPrev
argument_list|(
name|entry
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|oldFirst
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setNext
argument_list|(
name|oldFirst
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|EntryLocation
name|root
init|=
name|getRoot
argument_list|(
name|tx
argument_list|)
decl_stmt|;
name|root
operator|.
name|setNext
argument_list|(
name|entry
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|incrementJournalCount
argument_list|(
name|tx
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|++
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|result
operator|.
name|set
argument_list|(
name|remove
argument_list|(
name|tx
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|int
name|position
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|result
operator|.
name|set
argument_list|(
name|remove
argument_list|(
name|tx
argument_list|,
name|position
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|remove
parameter_list|(
specifier|final
name|PListEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AtomicBoolean
name|result
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|result
operator|.
name|set
argument_list|(
name|doRemove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|get
argument_list|()
return|;
block|}
specifier|synchronized
specifier|public
name|PListEntry
name|get
parameter_list|(
specifier|final
name|int
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|set
argument_list|(
name|get
argument_list|(
name|tx
argument_list|,
name|position
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|synchronized
specifier|public
name|PListEntry
name|getFirst
parameter_list|()
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|set
argument_list|(
name|getFirst
argument_list|(
name|tx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|synchronized
specifier|public
name|PListEntry
name|getLast
parameter_list|()
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|set
argument_list|(
name|getLast
argument_list|(
name|tx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|synchronized
specifier|public
name|PListEntry
name|getNext
parameter_list|(
name|PListEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|long
name|nextId
init|=
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getEntry
argument_list|()
operator|.
name|getNext
argument_list|()
else|:
name|this
operator|.
name|rootId
decl_stmt|;
if|if
condition|(
name|nextId
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
specifier|final
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|set
argument_list|(
name|getNext
argument_list|(
name|tx
argument_list|,
name|nextId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|bs
init|=
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|synchronized
specifier|public
name|PListEntry
name|refresh
parameter_list|(
specifier|final
name|PListEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|PListEntry
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
name|ref
init|=
operator|new
name|AtomicReference
argument_list|<
name|EntryLocation
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|indexLock
init|)
block|{
name|this
operator|.
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|ref
operator|.
name|set
argument_list|(
name|loadEntry
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getEntry
argument_list|()
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|PListEntry
argument_list|(
name|ref
operator|.
name|get
argument_list|()
argument_list|,
name|entry
operator|.
name|getByteSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
name|boolean
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|long
name|nextId
init|=
name|this
operator|.
name|rootId
decl_stmt|;
while|while
condition|(
name|nextId
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
name|EntryLocation
name|entry
init|=
name|getNext
argument_list|(
name|tx
argument_list|,
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|result
operator|=
name|doRemove
argument_list|(
name|tx
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
block|}
name|nextId
operator|=
name|entry
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// not found
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
name|boolean
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|long
name|nextId
init|=
name|this
operator|.
name|rootId
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nextId
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
name|EntryLocation
name|entry
init|=
name|getNext
argument_list|(
name|tx
argument_list|,
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|count
operator|==
name|position
condition|)
block|{
name|result
operator|=
name|doRemove
argument_list|(
name|tx
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
block|}
name|nextId
operator|=
name|entry
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// not found
break|break;
block|}
name|count
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|EntryLocation
name|get
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|position
parameter_list|)
throws|throws
name|IOException
block|{
name|EntryLocation
name|result
init|=
literal|null
decl_stmt|;
name|long
name|nextId
init|=
name|this
operator|.
name|rootId
decl_stmt|;
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|nextId
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
name|EntryLocation
name|entry
init|=
name|getNext
argument_list|(
name|tx
argument_list|,
name|nextId
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|count
operator|==
name|position
condition|)
block|{
name|result
operator|=
name|entry
expr_stmt|;
break|break;
block|}
name|nextId
operator|=
name|entry
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
name|count
operator|++
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|EntryLocation
name|getFirst
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|offset
init|=
name|getRoot
argument_list|(
name|tx
argument_list|)
operator|.
name|getNext
argument_list|()
decl_stmt|;
if|if
condition|(
name|offset
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
return|return
name|loadEntry
argument_list|(
name|tx
argument_list|,
name|offset
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|EntryLocation
name|getLast
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|lastId
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
return|return
name|loadEntry
argument_list|(
name|tx
argument_list|,
name|this
operator|.
name|lastId
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|doRemove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|EntryLocation
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|EntryLocation
name|prev
init|=
name|getPrevious
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getPrev
argument_list|()
argument_list|)
decl_stmt|;
name|EntryLocation
name|next
init|=
name|getNext
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getNext
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|prevId
init|=
name|prev
operator|!=
literal|null
condition|?
name|prev
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
else|:
name|this
operator|.
name|rootId
decl_stmt|;
name|long
name|nextId
init|=
name|next
operator|!=
literal|null
condition|?
name|next
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
else|:
name|EntryLocation
operator|.
name|NOT_SET
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|next
operator|.
name|setPrev
argument_list|(
name|prevId
argument_list|)
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we are deleting the last one in the list
name|this
operator|.
name|lastId
operator|=
name|prevId
expr_stmt|;
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|prev
operator|.
name|setNext
argument_list|(
name|nextId
argument_list|)
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|.
name|decrementJournalCount
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|entry
operator|.
name|reset
argument_list|()
expr_stmt|;
name|storeEntry
argument_list|(
name|tx
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|entry
operator|.
name|getPage
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|size
operator|--
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|EntryLocation
name|createEntry
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|id
parameter_list|,
name|long
name|previous
parameter_list|,
name|long
name|next
parameter_list|)
throws|throws
name|IOException
block|{
name|Page
argument_list|<
name|EntryLocation
argument_list|>
name|p
init|=
name|tx
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|EntryLocation
name|result
init|=
operator|new
name|EntryLocation
argument_list|()
decl_stmt|;
name|result
operator|.
name|setPage
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPrev
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNext
argument_list|(
name|next
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|EntryLocation
name|createEntry
parameter_list|(
name|Page
argument_list|<
name|EntryLocation
argument_list|>
name|p
parameter_list|,
name|String
name|id
parameter_list|,
name|long
name|previous
parameter_list|,
name|long
name|next
parameter_list|)
throws|throws
name|IOException
block|{
name|EntryLocation
name|result
init|=
operator|new
name|EntryLocation
argument_list|()
decl_stmt|;
name|result
operator|.
name|setPage
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|set
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|result
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|result
operator|.
name|setPrev
argument_list|(
name|previous
argument_list|)
expr_stmt|;
name|result
operator|.
name|setNext
argument_list|(
name|next
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|EntryLocation
name|loadEntry
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|long
name|pageId
parameter_list|)
throws|throws
name|IOException
block|{
name|Page
argument_list|<
name|EntryLocation
argument_list|>
name|page
init|=
name|tx
operator|.
name|load
argument_list|(
name|pageId
argument_list|,
name|EntryLocationMarshaller
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|EntryLocation
name|entry
init|=
name|page
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
specifier|private
name|void
name|storeEntry
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|EntryLocation
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|tx
operator|.
name|store
argument_list|(
name|entry
operator|.
name|getPage
argument_list|()
argument_list|,
name|EntryLocationMarshaller
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|EntryLocation
name|getNext
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|long
name|next
parameter_list|)
throws|throws
name|IOException
block|{
name|EntryLocation
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|next
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
name|result
operator|=
name|loadEntry
argument_list|(
name|tx
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|EntryLocation
name|getPrevious
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|long
name|previous
parameter_list|)
throws|throws
name|IOException
block|{
name|EntryLocation
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|previous
operator|!=
name|EntryLocation
operator|.
name|NOT_SET
condition|)
block|{
name|result
operator|=
name|loadEntry
argument_list|(
name|tx
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|EntryLocation
name|getRoot
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|EntryLocation
name|result
init|=
name|loadEntry
argument_list|(
name|tx
argument_list|,
name|this
operator|.
name|rootId
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
name|ByteSequence
name|getPayload
parameter_list|(
name|EntryLocation
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|this
operator|.
name|store
operator|.
name|getPayload
argument_list|(
name|entry
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

