begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Sends X messages with a sequence number held in a JMS property "appId"  * Uses all priority 4 message (normal priority)  * closed the consumer connection multiple times so the already prefetched messages will be available  * for dispatch again.  */
end_comment

begin_class
specifier|public
class|class
name|PriorityRedeliveryOrderTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PriorityRedeliveryOrderTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESTINATION
init|=
literal|"testQ1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGES_TO_SEND
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGES_PER_CONSUMER
init|=
literal|200
decl_stmt|;
specifier|private
name|int
name|consumedAppId
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|totalConsumed
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
name|PolicyEntry
name|pe
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|pe
operator|.
name|setPrioritizedMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMessageDeliveryOrderAfterPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
comment|//send X messages with with a sequence number number in the message property.
name|sendMessages
argument_list|(
name|MESSAGES_TO_SEND
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|MESSAGES_TO_SEND
operator|/
name|MESSAGES_PER_CONSUMER
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|totalConsumed
operator|+=
name|consumeMessages
argument_list|(
name|MESSAGES_PER_CONSUMER
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"number of messages consumed should be equal to number of messages sent"
argument_list|,
name|MESSAGES_TO_SEND
argument_list|,
name|totalConsumed
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Long
name|sendMessages
parameter_list|(
name|int
name|messageCount
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|numberOfMessageSent
init|=
literal|0
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Session
name|producerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageProducer
name|jmsProducer
init|=
name|producerSession
operator|.
name|createProducer
argument_list|(
name|producerSession
operator|.
name|createQueue
argument_list|(
name|DESTINATION
argument_list|)
argument_list|)
decl_stmt|;
name|Message
name|sendMessage
init|=
name|producerSession
operator|.
name|createTextMessage
argument_list|(
literal|"test_message"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|sendMessage
operator|.
name|setIntProperty
argument_list|(
literal|"appID"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|jmsProducer
operator|.
name|send
argument_list|(
name|sendMessage
argument_list|)
expr_stmt|;
name|producerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|numberOfMessageSent
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|" Finished after producing : "
operator|+
name|numberOfMessageSent
argument_list|)
expr_stmt|;
return|return
name|numberOfMessageSent
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception received producing "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finishing after exception :"
operator|+
name|numberOfMessageSent
argument_list|)
expr_stmt|;
return|return
name|numberOfMessageSent
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/*      Ensure messages are consumed in the expected sequence      */
specifier|private
name|int
name|consumeMessages
parameter_list|(
name|int
name|numberOfMessage
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating new consumer for:"
operator|+
name|numberOfMessage
argument_list|)
expr_stmt|;
name|int
name|numberConsumedMessage
init|=
literal|0
decl_stmt|;
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageConsumer
name|jmsConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|DESTINATION
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|consume
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|consume
condition|)
block|{
name|Message
name|message
init|=
name|jmsConsumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Break on:"
operator|+
name|numberConsumedMessage
argument_list|)
expr_stmt|;
break|break;
block|}
name|int
name|newAppId
init|=
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"appID"
argument_list|)
decl_stmt|;
name|numberConsumedMessage
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Message newAppID"
operator|+
name|newAppId
argument_list|)
expr_stmt|;
comment|//check it is next appID in sequence
if|if
condition|(
name|newAppId
operator|!=
operator|(
name|consumedAppId
operator|+
literal|1
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|" newAppId is "
operator|+
name|newAppId
operator|+
literal|" expected "
operator|+
operator|(
name|consumedAppId
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|//increase next AppID
name|consumedAppId
operator|=
name|newAppId
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|numberConsumedMessage
operator|==
name|numberOfMessage
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"closing consumer after 200 message, consumedAppID is "
operator|+
name|consumedAppId
argument_list|)
expr_stmt|;
return|return
name|numberConsumedMessage
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{                  }
block|}
block|}
return|return
name|numberConsumedMessage
return|;
block|}
block|}
end_class

end_unit

