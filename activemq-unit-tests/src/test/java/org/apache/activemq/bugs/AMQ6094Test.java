begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p/>  * http://www.apache.org/licenses/LICENSE-2.0  *<p/>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ6094Test
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ6094Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|connectionUri
operator|=
name|connector
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueMemoryUsage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ArrayList
argument_list|<
name|ThreadSlot
argument_list|>
name|producerThreads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ThreadSlot
argument_list|>
name|consumerThreads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|producerThreads
operator|.
name|add
argument_list|(
name|runInThread
argument_list|(
operator|new
name|UnsafeRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
argument_list|(
name|connectionUri
argument_list|,
literal|"queueA"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|consumerThreads
operator|.
name|add
argument_list|(
name|runInThread
argument_list|(
operator|new
name|UnsafeRunnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|consumer
argument_list|(
name|connectionUri
argument_list|,
literal|"queueA"
argument_list|,
literal|2500
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// kill and restart random threads
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
literal|10
condition|;
name|count
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
specifier|final
name|int
name|i
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|consumerThreads
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ThreadSlot
name|slot
init|=
name|consumerThreads
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|slot
operator|.
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|consumerThreads
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|consumerThreads
operator|.
name|add
argument_list|(
name|runInThread
argument_list|(
name|slot
operator|.
name|runnable
argument_list|)
argument_list|)
expr_stmt|;
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|brokerService
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queueA"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cursorMemoryUsage: "
operator|+
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"messagesStat: "
operator|+
name|queue
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify usage
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|brokerService
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queueA"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cursorMemoryUsage: "
operator|+
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"messagesStat: "
operator|+
name|queue
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// drain the queue
for|for
control|(
name|ThreadSlot
name|threadSlot
range|:
name|producerThreads
control|)
block|{
name|threadSlot
operator|.
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|threadSlot
operator|.
name|thread
operator|.
name|join
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ThreadSlot
name|threadSlot
range|:
name|consumerThreads
control|)
block|{
name|threadSlot
operator|.
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|threadSlot
operator|.
name|thread
operator|.
name|join
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
name|consumer
argument_list|(
name|connectionUri
argument_list|,
literal|"queueA"
argument_list|,
literal|2500
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After drain, cursorMemoryUsage: "
operator|+
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"messagesStat: "
operator|+
name|queue
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue memory usage to 0"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|producer
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
operator|+
literal|"?jms.useCompression=true&jms.useAsyncSend=true&daemon=true"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|topic
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
name|msg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|random
argument_list|()
operator|>
literal|0.5
condition|)
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|consumer
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|prefetchSize
parameter_list|)
throws|throws
name|Exception
block|{
name|consumer
argument_list|(
name|uri
argument_list|,
name|queue
argument_list|,
name|prefetchSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|consumer
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|queue
parameter_list|,
name|int
name|prefetchSize
parameter_list|,
name|boolean
name|drain
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
operator|+
literal|"?jms.prefetchPolicy.queuePrefetch="
operator|+
name|prefetchSize
operator|+
literal|"&jms.useAsyncSend=true"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|queue
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|drain
condition|)
block|{
name|Message
name|message
init|=
literal|null
decl_stmt|;
do|do
block|{
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|message
operator|!=
literal|null
condition|)
do|;
block|}
else|else
block|{
comment|// block
while|while
condition|(
literal|true
condition|)
block|{
name|consumer
operator|.
name|receive
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|Thread
operator|.
name|interrupted
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|drain
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// delay closing of connection
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Now closing"
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|msg
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
name|builder
operator|.
name|append
argument_list|(
literal|"123457890"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
interface|interface
name|UnsafeRunnable
block|{
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|ThreadSlot
block|{
specifier|private
name|UnsafeRunnable
name|runnable
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
block|}
specifier|public
specifier|static
name|ThreadSlot
name|runInThread
parameter_list|(
specifier|final
name|UnsafeRunnable
name|runnable
parameter_list|)
block|{
specifier|final
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ThreadSlot
name|result
init|=
operator|new
name|ThreadSlot
argument_list|()
decl_stmt|;
name|result
operator|.
name|thread
operator|=
name|thread
expr_stmt|;
name|result
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

