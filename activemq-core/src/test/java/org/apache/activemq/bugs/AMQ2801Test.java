begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicPublisher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DurableSubscriptionViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|FilePendingQueueMessageStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2801Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ2801Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOPICNAME
init|=
literal|"InvalidPendingQueueTest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECTOR1
init|=
literal|"JMS_ID"
operator|+
literal|" = '"
operator|+
literal|"TEST"
operator|+
literal|"'"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SELECTOR2
init|=
literal|"JMS_ID"
operator|+
literal|" = '"
operator|+
literal|"TEST2"
operator|+
literal|"'"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIPTION1
init|=
literal|"InvalidPendingQueueTest_1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SUBSCRIPTION2
init|=
literal|"InvalidPendingQueueTest_2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MSG_COUNT
init|=
literal|2500
decl_stmt|;
specifier|private
name|Session
name|session1
decl_stmt|;
specifier|private
name|Connection
name|conn1
decl_stmt|;
specifier|private
name|Topic
name|topic1
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer1
decl_stmt|;
specifier|private
name|Session
name|session2
decl_stmt|;
specifier|private
name|Connection
name|conn2
decl_stmt|;
specifier|private
name|Topic
name|topic2
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer2
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDataDirectory
argument_list|(
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"activemq-data"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Default"
argument_list|)
expr_stmt|;
name|applyMemoryLimitPolicy
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|applyMemoryLimitPolicy
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
specifier|final
name|SystemUsage
name|memoryManager
init|=
operator|new
name|SystemUsage
argument_list|()
decl_stmt|;
name|memoryManager
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|5818230784L
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|6442450944L
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|getTempUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|3221225472L
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSystemUsage
argument_list|(
name|memoryManager
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|policyEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|PolicyEntry
name|entry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setMemoryLimit
argument_list|(
literal|504857608
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setPendingQueuePolicy
argument_list|(
operator|new
name|FilePendingQueueMessageStoragePolicy
argument_list|()
argument_list|)
expr_stmt|;
name|policyEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
specifier|final
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|policyEntries
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|conn1
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|produceMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|TopicConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|TopicSession
name|session
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|TOPICNAME
argument_list|)
decl_stmt|;
name|TopicPublisher
name|producer
init|=
name|session
operator|.
name|createPublisher
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|long
name|tStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|BytesMessage
name|message
init|=
name|session2
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"JMS_ID"
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"Type"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|publish
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|i
operator|+
literal|" @ "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|tStamp
operator|)
operator|/
literal|100
operator|)
operator|+
literal|"m/ms"
argument_list|)
expr_stmt|;
name|tStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|activeateSubscribers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First consumer
name|conn1
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|conn1
operator|.
name|setClientID
argument_list|(
name|SUBSCRIPTION1
argument_list|)
expr_stmt|;
name|session1
operator|=
name|conn1
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|topic1
operator|=
name|session1
operator|.
name|createTopic
argument_list|(
name|TOPICNAME
argument_list|)
expr_stmt|;
name|consumer1
operator|=
name|session1
operator|.
name|createDurableSubscriber
argument_list|(
name|topic1
argument_list|,
name|SUBSCRIPTION1
argument_list|,
name|SELECTOR1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Second consumer that just exists
name|conn2
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|setClientID
argument_list|(
name|SUBSCRIPTION2
argument_list|)
expr_stmt|;
name|session2
operator|=
name|conn2
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|topic2
operator|=
name|session2
operator|.
name|createTopic
argument_list|(
name|TOPICNAME
argument_list|)
expr_stmt|;
name|consumer2
operator|=
name|session2
operator|.
name|createDurableSubscriber
argument_list|(
name|topic2
argument_list|,
name|SUBSCRIPTION2
argument_list|,
name|SELECTOR2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conn2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidPendingQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|activeateSubscribers
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|consumer1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|consumer2
argument_list|)
expr_stmt|;
name|produceMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sent messages to a single subscriber"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing durable subscriber connections"
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn2
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed durable subscriber connections"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Re-starting durable subscriber connections"
argument_list|)
expr_stmt|;
name|activeateSubscribers
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started up durable subscriber connections - now view activemq console to see pending queue size on the other subscriber"
argument_list|)
expr_stmt|;
name|ObjectName
index|[]
name|subs
init|=
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ObjectName
name|subName
init|=
name|subs
index|[
name|i
index|]
decl_stmt|;
name|DurableSubscriptionViewMBean
name|sub
init|=
operator|(
name|DurableSubscriptionViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|subName
argument_list|,
name|DurableSubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|sub
operator|.
name|getSubscriptionName
argument_list|()
operator|+
literal|": pending = "
operator|+
name|sub
operator|.
name|getPendingQueueSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|getSubscriptionName
argument_list|()
operator|.
name|equals
argument_list|(
name|SUBSCRIPTION1
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Incorrect number of pending messages"
argument_list|,
name|MSG_COUNT
argument_list|,
name|sub
operator|.
name|getPendingQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Incorrect number of pending messages"
argument_list|,
literal|0
argument_list|,
name|sub
operator|.
name|getPendingQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|TopicConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|()
decl_stmt|;
name|connectionFactory
operator|.
name|setBrokerURL
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
name|TopicConnection
name|conn
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
return|return
name|conn
return|;
block|}
block|}
end_class

end_unit

