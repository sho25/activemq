begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_comment
comment|/**  * Optimized ByteArrayInputStream that can be used more than once  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|StoreByteArrayInputStream
extends|extends
name|ByteArrayInputStream
block|{
comment|/**      * Creates a<code>WireByteArrayInputStream</code>.      *       * @param buf the input buffer.      */
specifier|public
name|StoreByteArrayInputStream
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|)
block|{
name|super
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates<code>WireByteArrayInputStream</code> that uses<code>buf</code> as its buffer array.      *       * @param buf the input buffer.      * @param offset the offset in the buffer of the first byte to read.      * @param length the maximum number of bytes to read from the buffer.      */
specifier|public
name|StoreByteArrayInputStream
parameter_list|(
name|byte
name|buf
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates<code>WireByteArrayInputStream</code> with a minmalist byte array      */
specifier|public
name|StoreByteArrayInputStream
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the current position in the stream      */
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|pos
return|;
block|}
comment|/**      * @return the underlying data array      */
specifier|public
name|byte
index|[]
name|getRawData
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
comment|/**      * reset the<code>WireByteArrayInputStream</code> to use an new byte array      *       * @param newBuff buffer to use      * @param offset the offset in the buffer of the first byte to read.      * @param length the maximum number of bytes to read from the buffer.      */
specifier|public
name|void
name|restart
parameter_list|(
name|byte
index|[]
name|newBuff
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|buf
operator|=
name|newBuff
expr_stmt|;
name|pos
operator|=
name|offset
expr_stmt|;
name|count
operator|=
name|Math
operator|.
name|min
argument_list|(
name|offset
operator|+
name|length
argument_list|,
name|newBuff
operator|.
name|length
argument_list|)
expr_stmt|;
name|mark
operator|=
name|offset
expr_stmt|;
block|}
comment|/**      * reset the<code>WireByteArrayInputStream</code> to use an new byte array      *       * @param newBuff      */
specifier|public
name|void
name|restart
parameter_list|(
name|byte
index|[]
name|newBuff
parameter_list|)
block|{
name|restart
argument_list|(
name|newBuff
argument_list|,
literal|0
argument_list|,
name|newBuff
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * re-start the input stream - reusing the current buffer      * @param size      */
specifier|public
name|void
name|restart
parameter_list|(
name|int
name|size
parameter_list|)
block|{
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|length
operator|<
name|size
condition|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
block|}
name|restart
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads the next byte of data from this input stream. The value byte is returned as an<code>int</code> in the      * range<code>0</code> to<code>255</code>. If no byte is available because the end of the stream has been      * reached, the value<code>-1</code> is returned.      *<p>      * This<code>read</code> method cannot block.      *       * @return the next byte of data, or<code>-1</code> if the end of the stream has been reached.      */
specifier|public
name|int
name|read
parameter_list|()
block|{
return|return
operator|(
name|pos
operator|<
name|count
operator|)
condition|?
operator|(
name|buf
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
else|:
operator|-
literal|1
return|;
block|}
comment|/**      * Reads up to<code>len</code> bytes of data into an array of bytes from this input stream.      *       * @param b the buffer into which the data is read.      * @param off the start offset of the data.      * @param len the maximum number of bytes read.      * @return the total number of bytes read into the buffer, or<code>-1</code> if there is no more data because the      * end of the stream has been reached.      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
operator|(
name|off
operator|<
literal|0
operator|)
operator|||
operator|(
name|off
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
name|len
operator|<
literal|0
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|>
name|b
operator|.
name|length
operator|)
operator|||
operator|(
operator|(
name|off
operator|+
name|len
operator|)
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|if
condition|(
name|pos
operator|>=
name|count
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|pos
operator|+
name|len
operator|>
name|count
condition|)
block|{
name|len
operator|=
name|count
operator|-
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|buf
argument_list|,
name|pos
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
return|return
name|len
return|;
block|}
comment|/**      * @return the number of bytes that can be read from the input stream without blocking.      */
specifier|public
name|int
name|available
parameter_list|()
block|{
return|return
name|count
operator|-
name|pos
return|;
block|}
block|}
end_class

end_unit

