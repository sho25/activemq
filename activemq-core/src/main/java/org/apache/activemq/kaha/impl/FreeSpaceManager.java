begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Free space list in the Store  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|final
class|class
name|FreeSpaceManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FreeSpaceManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|ROOT_SIZE
init|=
literal|64
decl_stmt|;
specifier|static
specifier|final
name|int
name|RESIZE_INCREMENT
init|=
literal|4096
operator|*
literal|1024
decl_stmt|;
specifier|private
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|prevMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|FreeSpaceTree
name|tree
init|=
operator|new
name|FreeSpaceTree
argument_list|()
decl_stmt|;
specifier|private
name|StoreWriter
name|writer
decl_stmt|;
specifier|private
name|StoreReader
name|reader
decl_stmt|;
specifier|private
name|long
name|dataEnd
init|=
name|ROOT_SIZE
decl_stmt|;
specifier|private
name|long
name|fileLength
init|=
operator|-
literal|1
decl_stmt|;
name|FreeSpaceManager
parameter_list|(
name|StoreWriter
name|writer
parameter_list|,
name|StoreReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|fileLength
operator|=
name|reader
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Item
name|getFreeSpace
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|Item
name|result
init|=
name|tree
operator|.
name|getNextFreeSpace
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|dataEnd
operator|>=
name|fileLength
condition|)
block|{
name|writer
operator|.
name|allocateSpace
argument_list|(
name|fileLength
operator|+
name|RESIZE_INCREMENT
argument_list|)
expr_stmt|;
name|fileLength
operator|=
name|reader
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|Item
argument_list|()
expr_stmt|;
name|result
operator|.
name|setOffset
argument_list|(
name|dataEnd
argument_list|)
expr_stmt|;
name|int
name|newSize
init|=
operator|(
operator|(
name|item
operator|.
name|getSize
argument_list|()
operator|/
literal|8
operator|)
operator|+
literal|1
operator|)
operator|*
literal|8
decl_stmt|;
name|result
operator|.
name|setSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
name|dataEnd
operator|=
name|dataEnd
operator|+
name|result
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
expr_stmt|;
block|}
else|else
block|{
name|removeFreeSpace
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|// reset the item
name|item
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|result
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|item
operator|.
name|setSize
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
specifier|final
name|void
name|addFreeSpace
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|currentOffset
init|=
name|reader
operator|.
name|position
argument_list|()
decl_stmt|;
name|reader
operator|.
name|readHeader
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|item
operator|.
name|setActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// see if we can condense some space together
comment|// first look for free space adjacent up the disk
name|Long
name|nextKey
init|=
operator|new
name|Long
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
operator|+
name|item
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
argument_list|)
decl_stmt|;
name|Item
name|next
init|=
operator|(
name|Item
operator|)
name|map
operator|.
name|remove
argument_list|(
name|nextKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|tree
operator|.
name|removeItem
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|Long
name|prevKey
init|=
operator|new
name|Long
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
operator|+
name|next
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
argument_list|)
decl_stmt|;
name|prevMap
operator|.
name|remove
argument_list|(
name|prevKey
argument_list|)
expr_stmt|;
name|int
name|newSize
init|=
name|item
operator|.
name|getSize
argument_list|()
operator|+
name|next
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
decl_stmt|;
name|item
operator|.
name|setSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
block|}
comment|// now see if there was a previous item
comment|// in the next map
name|Long
name|key
init|=
operator|new
name|Long
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|Item
name|prev
init|=
operator|(
name|Item
operator|)
name|prevMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Long
name|prevKey
init|=
name|prev
operator|!=
literal|null
condition|?
operator|new
name|Long
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
name|prevKey
operator|!=
literal|null
condition|)
block|{
comment|// we can condense the free space
comment|// first we are about to change the item so remove it from the tree
name|tree
operator|.
name|removeItem
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|int
name|newSize
init|=
name|prev
operator|.
name|getSize
argument_list|()
operator|+
name|item
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
decl_stmt|;
name|prev
operator|.
name|setSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
comment|// update the header
name|writer
operator|.
name|updateHeader
argument_list|(
name|prev
argument_list|)
expr_stmt|;
comment|// put back in the tree
name|tree
operator|.
name|addItem
argument_list|(
name|prev
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// update the item header
name|writer
operator|.
name|updateHeader
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|prevKey
operator|=
operator|new
name|Long
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
operator|+
name|item
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
argument_list|)
expr_stmt|;
name|prevMap
operator|.
name|put
argument_list|(
name|prevKey
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|position
argument_list|(
name|currentOffset
argument_list|)
expr_stmt|;
block|}
comment|/**      * validates and builds free list      *       * @throws IOException      */
specifier|final
name|void
name|scanStoredItems
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reader
operator|.
name|length
argument_list|()
operator|>
name|ROOT_SIZE
condition|)
block|{
name|long
name|offset
init|=
name|ROOT_SIZE
decl_stmt|;
while|while
condition|(
operator|(
name|offset
operator|+
name|Item
operator|.
name|HEAD_SIZE
operator|)
operator|<
name|reader
operator|.
name|length
argument_list|()
condition|)
block|{
name|Item
name|item
init|=
operator|new
name|Item
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|position
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|reader
operator|.
name|readHeader
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadMagicException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Got bad magic reading stored items"
argument_list|,
name|e
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|item
operator|.
name|getSize
argument_list|()
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|addFreeSpace
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|item
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
expr_stmt|;
block|}
else|else
block|{
comment|// we've hit free space or end of file
break|break;
block|}
block|}
name|dataEnd
operator|=
name|offset
expr_stmt|;
block|}
else|else
block|{
name|dataEnd
operator|=
name|ROOT_SIZE
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeFreeSpace
parameter_list|(
name|Item
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|long
name|next
init|=
name|item
operator|.
name|getOffset
argument_list|()
operator|+
name|item
operator|.
name|getSize
argument_list|()
operator|+
name|Item
operator|.
name|HEAD_SIZE
decl_stmt|;
name|Long
name|nextKey
init|=
operator|new
name|Long
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|prevMap
operator|.
name|remove
argument_list|(
name|nextKey
argument_list|)
expr_stmt|;
name|Long
name|key
init|=
operator|new
name|Long
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|dump
parameter_list|(
name|PrintWriter
name|printer
parameter_list|)
block|{
name|printer
operator|.
name|println
argument_list|(
literal|"FreeSpace: map size = "
operator|+
name|map
operator|.
name|size
argument_list|()
operator|+
literal|", tree size = "
operator|+
name|tree
operator|.
name|size
argument_list|()
operator|+
literal|", prevMap size = "
operator|+
name|prevMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|printer
operator|.
name|println
argument_list|(
literal|"map = "
operator|+
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

