begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_comment
comment|/**  * An optimized buffered input stream for Tcp  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|TcpBufferedInputStream
extends|extends
name|FilterInputStream
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|8192
decl_stmt|;
specifier|protected
name|byte
name|internalBuffer
index|[]
decl_stmt|;
specifier|protected
name|int
name|count
decl_stmt|;
specifier|protected
name|int
name|position
decl_stmt|;
specifier|public
name|TcpBufferedInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
name|in
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TcpBufferedInputStream
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Buffer size<= 0"
argument_list|)
throw|;
block|}
name|internalBuffer
operator|=
operator|new
name|byte
index|[
name|size
index|]
expr_stmt|;
block|}
specifier|private
name|void
name|fill
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buffer
init|=
name|internalBuffer
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|position
operator|=
literal|0
expr_stmt|;
name|int
name|n
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|position
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|count
operator|=
name|n
operator|+
name|position
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|position
operator|>=
name|count
condition|)
block|{
name|fill
argument_list|()
expr_stmt|;
if|if
condition|(
name|position
operator|>=
name|count
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|internalBuffer
index|[
name|position
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
specifier|private
name|int
name|readStream
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|avail
init|=
name|count
operator|-
name|position
decl_stmt|;
if|if
condition|(
name|avail
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
name|len
operator|>=
name|internalBuffer
operator|.
name|length
condition|)
block|{
return|return
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
name|fill
argument_list|()
expr_stmt|;
name|avail
operator|=
name|count
operator|-
name|position
expr_stmt|;
if|if
condition|(
name|avail
operator|<=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
name|int
name|cnt
init|=
operator|(
name|avail
operator|<
name|len
operator|)
condition|?
name|avail
else|:
name|len
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|internalBuffer
argument_list|,
name|position
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
name|position
operator|+=
name|cnt
expr_stmt|;
return|return
name|cnt
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|(
name|off
operator||
name|len
operator||
operator|(
name|off
operator|+
name|len
operator|)
operator||
operator|(
name|b
operator|.
name|length
operator|-
operator|(
name|off
operator|+
name|len
operator|)
operator|)
operator|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|n
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|nread
init|=
name|readStream
argument_list|(
name|b
argument_list|,
name|off
operator|+
name|n
argument_list|,
name|len
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|nread
operator|<=
literal|0
condition|)
block|{
return|return
operator|(
name|n
operator|==
literal|0
operator|)
condition|?
name|nread
else|:
name|n
return|;
block|}
name|n
operator|+=
name|nread
expr_stmt|;
if|if
condition|(
name|n
operator|>=
name|len
condition|)
block|{
return|return
name|n
return|;
block|}
comment|// if not closed but no bytes available, return
name|InputStream
name|input
init|=
name|in
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
operator|&&
name|input
operator|.
name|available
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
name|n
return|;
block|}
block|}
block|}
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|n
operator|<=
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|avail
init|=
name|count
operator|-
name|position
decl_stmt|;
if|if
condition|(
name|avail
operator|<=
literal|0
condition|)
block|{
return|return
name|in
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
name|long
name|skipped
init|=
operator|(
name|avail
operator|<
name|n
operator|)
condition|?
name|avail
else|:
name|n
decl_stmt|;
name|position
operator|+=
name|skipped
expr_stmt|;
return|return
name|skipped
return|;
block|}
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|available
argument_list|()
operator|+
operator|(
name|count
operator|-
name|position
operator|)
return|;
block|}
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

