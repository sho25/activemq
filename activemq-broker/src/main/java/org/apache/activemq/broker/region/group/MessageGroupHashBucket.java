begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|LRUMap
import|;
end_import

begin_comment
comment|/**  * Uses hash-code buckets to associate consumers with sets of message group IDs.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|MessageGroupHashBucket
implements|implements
name|MessageGroupMap
block|{
specifier|private
specifier|final
name|int
name|bucketCount
decl_stmt|;
specifier|private
specifier|final
name|ConsumerId
index|[]
name|consumers
decl_stmt|;
specifier|private
name|LRUMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|cache
init|=
operator|new
name|LRUMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|64
argument_list|)
decl_stmt|;
specifier|public
name|MessageGroupHashBucket
parameter_list|(
name|int
name|bucketCount
parameter_list|)
block|{
name|this
operator|.
name|bucketCount
operator|=
name|bucketCount
expr_stmt|;
name|this
operator|.
name|consumers
operator|=
operator|new
name|ConsumerId
index|[
name|bucketCount
index|]
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|put
parameter_list|(
name|String
name|groupId
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|)
block|{
name|int
name|bucket
init|=
name|getBucketNumber
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|consumers
index|[
name|bucket
index|]
operator|=
name|consumerId
expr_stmt|;
if|if
condition|(
name|consumerId
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|groupId
argument_list|,
name|consumerId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|ConsumerId
name|get
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|int
name|bucket
init|=
name|getBucketNumber
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
comment|//excersise cache
name|cache
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
return|return
name|consumers
index|[
name|bucket
index|]
return|;
block|}
specifier|public
specifier|synchronized
name|ConsumerId
name|removeGroup
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|int
name|bucket
init|=
name|getBucketNumber
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|ConsumerId
name|answer
init|=
name|consumers
index|[
name|bucket
index|]
decl_stmt|;
name|consumers
index|[
name|bucket
index|]
operator|=
literal|null
expr_stmt|;
name|cache
operator|.
name|remove
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|public
specifier|synchronized
name|MessageGroupSet
name|removeConsumer
parameter_list|(
name|ConsumerId
name|consumerId
parameter_list|)
block|{
name|MessageGroupSet
name|answer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ConsumerId
name|owner
init|=
name|consumers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
operator|&&
name|owner
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
name|answer
operator|=
name|createMessageGroupSet
argument_list|(
name|i
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|consumers
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
comment|// make an empty set
name|answer
operator|=
name|EmptyMessageGroupSet
operator|.
name|INSTANCE
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeAll
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|consumers
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"bucket"
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|consumers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
literal|"active message group buckets: "
operator|+
name|count
return|;
block|}
specifier|protected
name|MessageGroupSet
name|createMessageGroupSet
parameter_list|(
name|int
name|bucketNumber
parameter_list|,
specifier|final
name|MessageGroupSet
name|parent
parameter_list|)
block|{
specifier|final
name|MessageGroupSet
name|answer
init|=
name|createMessageGroupSet
argument_list|(
name|bucketNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
else|else
block|{
comment|// union the two sets together
return|return
operator|new
name|MessageGroupSet
argument_list|()
block|{
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|groupID
parameter_list|)
block|{
return|return
name|parent
operator|.
name|contains
argument_list|(
name|groupID
argument_list|)
operator|||
name|answer
operator|.
name|contains
argument_list|(
name|groupID
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|protected
name|MessageGroupSet
name|createMessageGroupSet
parameter_list|(
specifier|final
name|int
name|bucketNumber
parameter_list|)
block|{
return|return
operator|new
name|MessageGroupSet
argument_list|()
block|{
specifier|public
name|boolean
name|contains
parameter_list|(
name|String
name|groupID
parameter_list|)
block|{
name|int
name|bucket
init|=
name|getBucketNumber
argument_list|(
name|groupID
argument_list|)
decl_stmt|;
return|return
name|bucket
operator|==
name|bucketNumber
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|int
name|getBucketNumber
parameter_list|(
name|String
name|groupId
parameter_list|)
block|{
name|int
name|bucket
init|=
name|groupId
operator|.
name|hashCode
argument_list|()
operator|%
name|bucketCount
decl_stmt|;
comment|// bucket could be negative
if|if
condition|(
name|bucket
operator|<
literal|0
condition|)
block|{
name|bucket
operator|*=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|bucket
return|;
block|}
block|}
end_class

end_unit

