begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test validates that the AMQ consumer blocks on redelivery of a message,  * through all redeliveries, until the message is either successfully consumed  * or sent to the DLQ.  */
end_comment

begin_class
specifier|public
class|class
name|AMQ1853Test
block|{
specifier|private
specifier|static
name|BrokerService
name|broker
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ1853Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|jmsConnectionURI
init|=
literal|"failover:(vm://localhost)"
decl_stmt|;
comment|// Virtual Topic that the test publishes 10 messages to
specifier|private
specifier|static
specifier|final
name|String
name|queueFail
init|=
literal|"Queue.BlockingConsumer.QueueFail"
decl_stmt|;
comment|// Number of messages
specifier|private
specifier|final
name|int
name|producerMessages
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
name|int
name|totalNumberMessages
init|=
name|producerMessages
operator|*
literal|2
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxRedeliveries
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|int
name|redeliveryDelay
init|=
literal|1000
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
name|messageList
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:()/localhost?persistent=false"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConsumerMessagesAreNotOrdered
parameter_list|()
throws|throws
name|Exception
block|{
name|TestConsumer
name|consumerAllFail
init|=
literal|null
decl_stmt|;
name|messageList
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AtomicInteger
argument_list|>
argument_list|()
expr_stmt|;
try|try
block|{
comment|// The first 2 consumers will rollback, ultimately causing messages to land on the DLQ
name|TestProducer
name|producerAllFail
init|=
operator|new
name|TestProducer
argument_list|(
name|queueFail
argument_list|)
decl_stmt|;
name|thread
argument_list|(
name|producerAllFail
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|consumerAllFail
operator|=
operator|new
name|TestConsumer
argument_list|(
name|queueFail
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|thread
argument_list|(
name|consumerAllFail
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Give the consumers a second to start
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|thread
argument_list|(
name|producerAllFail
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Give the consumers a second to start
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|producerAllFail
operator|.
name|getLatch
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"producer successful, count = "
operator|+
name|producerAllFail
operator|.
name|getLatch
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"final message list size =  "
operator|+
name|messageList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"message list size =  "
operator|+
name|messageList
operator|.
name|size
argument_list|()
operator|+
literal|" exptected:"
operator|+
name|totalNumberMessages
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|totalNumberMessages
operator|==
name|messageList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|consumerAllFail
operator|.
name|getLatch
argument_list|()
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumerAllFail successful, count = "
operator|+
name|consumerAllFail
operator|.
name|getLatch
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|messageList
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|AtomicInteger
name|counter
range|:
name|messageList
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|keys
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"final count for message "
operator|+
name|message
operator|+
literal|" counter =  "
operator|+
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"for message "
operator|+
name|message
operator|+
literal|" counter =  "
operator|+
name|counter
operator|.
name|get
argument_list|()
argument_list|,
name|counter
operator|.
name|get
argument_list|()
operator|==
name|maxRedeliveries
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|consumerAllFail
operator|.
name|messageReceiptIsOrdered
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|consumerAllFail
operator|!=
literal|null
condition|)
block|{
name|consumerAllFail
operator|.
name|setStop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Thread
name|thread
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|boolean
name|daemon
parameter_list|)
block|{
name|Thread
name|brokerThread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|)
decl_stmt|;
name|brokerThread
operator|.
name|setDaemon
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|brokerThread
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|brokerThread
return|;
block|}
specifier|private
class|class
name|TestProducer
implements|implements
name|Runnable
block|{
specifier|private
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|destinationName
init|=
literal|null
decl_stmt|;
specifier|public
name|TestProducer
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
comment|// We run the producer 2 times
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|totalNumberMessages
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CountDownLatch
name|getLatch
parameter_list|()
block|{
return|return
name|latch
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
literal|null
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
literal|null
decl_stmt|;
name|ActiveMQSession
name|session
init|=
literal|null
decl_stmt|;
name|Destination
name|destination
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started TestProducer for destination ("
operator|+
name|destinationName
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|jmsConnectionURI
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setCopyMessageOnSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
operator|(
name|ActiveMQSession
operator|)
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|this
operator|.
name|destinationName
argument_list|)
expr_stmt|;
comment|// Create a MessageProducer from the Session to the Topic or Queue
name|ActiveMQMessageProducer
name|producer
init|=
operator|(
name|ActiveMQMessageProducer
operator|)
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|producerMessages
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setLongProperty
argument_list|(
literal|"TestTime"
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|)
argument_list|)
expr_stmt|;
try|try
block|{
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Producer ("
operator|+
name|destinationName
operator|+
literal|")\n"
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" = sent messageId\n"
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" Latch count  "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Producer message list size = "
operator|+
name|messageList
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|messageList
operator|.
name|put
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Producer message list size = "
operator|+
name|messageList
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|deeperException
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Producer for destination ("
operator|+
name|destinationName
operator|+
literal|") Caught: "
operator|+
name|deeperException
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished TestProducer for destination ("
operator|+
name|destinationName
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Terminating TestProducer("
operator|+
name|destinationName
operator|+
literal|")Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing connection/session ("
operator|+
name|destinationName
operator|+
literal|")Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
class|class
name|TestConsumer
implements|implements
name|Runnable
implements|,
name|ExceptionListener
implements|,
name|MessageListener
block|{
specifier|private
name|CountDownLatch
name|latch
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|receivedMessageCounter
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|bFakeFail
init|=
literal|false
decl_stmt|;
name|String
name|destinationName
init|=
literal|null
decl_stmt|;
name|boolean
name|bMessageReceiptIsOrdered
init|=
literal|true
decl_stmt|;
name|boolean
name|bStop
init|=
literal|false
decl_stmt|;
name|String
name|previousMessageId
init|=
literal|null
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
literal|null
decl_stmt|;
specifier|private
name|ActiveMQConnection
name|connection
init|=
literal|null
decl_stmt|;
specifier|private
name|Session
name|session
init|=
literal|null
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
specifier|public
name|TestConsumer
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|boolean
name|bFakeFail
parameter_list|)
block|{
name|this
operator|.
name|bFakeFail
operator|=
name|bFakeFail
expr_stmt|;
name|latch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|totalNumberMessages
operator|*
operator|(
name|this
operator|.
name|bFakeFail
condition|?
operator|(
name|maxRedeliveries
operator|+
literal|1
operator|)
else|:
literal|1
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
block|}
specifier|public
name|CountDownLatch
name|getLatch
parameter_list|()
block|{
return|return
name|latch
return|;
block|}
specifier|public
name|boolean
name|messageReceiptIsOrdered
parameter_list|()
block|{
return|return
name|bMessageReceiptIsOrdered
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started TestConsumer for destination ("
operator|+
name|destinationName
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|jmsConnectionURI
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setNonBlockingRedelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|RedeliveryPolicy
name|policy
init|=
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
name|redeliveryDelay
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setBackOffMultiplier
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
name|redeliveryDelay
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveryDelay
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
name|maxRedeliveries
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|bStop
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished TestConsumer for destination name ("
operator|+
name|destinationName
operator|+
literal|") remaining "
operator|+
name|this
operator|.
name|latch
operator|.
name|getCount
argument_list|()
operator|+
literal|" messages "
operator|+
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Consumer ("
operator|+
name|destinationName
operator|+
literal|") Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Closing connection/session ("
operator|+
name|destinationName
operator|+
literal|")Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|onException
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Consumer for destination, ("
operator|+
name|destinationName
operator|+
literal|"), JMS Exception occured.  Shutting down client."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|setStop
parameter_list|(
name|boolean
name|bStop
parameter_list|)
block|{
name|this
operator|.
name|bStop
operator|=
name|bStop
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|receivedMessageCounter
operator|++
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer for destination ("
operator|+
name|destinationName
operator|+
literal|") latch countdown: "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
operator|+
literal|" :: Number messages received "
operator|+
name|this
operator|.
name|receivedMessageCounter
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|receivedMessageCounter
operator|%
operator|(
name|maxRedeliveries
operator|+
literal|1
operator|)
operator|==
literal|1
condition|)
block|{
name|previousMessageId
operator|=
name|message
operator|.
name|getJMSMessageID
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bMessageReceiptIsOrdered
condition|)
block|{
name|bMessageReceiptIsOrdered
operator|=
name|previousMessageId
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AtomicInteger
name|counter
init|=
name|messageList
operator|.
name|get
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
decl_stmt|;
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer for destination ("
operator|+
name|destinationName
operator|+
literal|")\n"
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" = currentMessageId\n"
operator|+
name|previousMessageId
operator|+
literal|" = previousMessageId\n"
operator|+
name|bMessageReceiptIsOrdered
operator|+
literal|"= bMessageReceiptIsOrdered\n"
operator|+
literal|">>LATENCY "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|message
operator|.
name|getLongProperty
argument_list|(
literal|"TestTime"
argument_list|)
operator|)
operator|+
literal|"\n"
operator|+
literal|"message counter = "
operator|+
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bFakeFail
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer on destination "
operator|+
name|destinationName
operator|+
literal|" committing JMS Session for message: "
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer on destination "
operator|+
name|destinationName
operator|+
literal|" rolling back JMS Session for message: "
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// rolls back all the consumed messages on the session to
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Error reading JMS Message from destination "
operator|+
name|destinationName
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

