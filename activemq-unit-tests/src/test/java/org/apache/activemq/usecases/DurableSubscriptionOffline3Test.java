begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
operator|.
name|PersistenceAdapterChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DurableSubscriptionOffline3Test
extends|extends
name|DurableSubscriptionOfflineTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableSubscriptionOffline3Test
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|PersistenceAdapterChoice
index|[]
argument_list|>
name|getTestParameters
parameter_list|()
block|{
name|String
name|osName
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running on ["
operator|+
name|osName
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|PersistenceAdapterChoice
index|[]
name|kahaDb
init|=
block|{
name|PersistenceAdapterChoice
operator|.
name|KahaDB
block|}
decl_stmt|;
name|PersistenceAdapterChoice
index|[]
name|jdbc
init|=
block|{
name|PersistenceAdapterChoice
operator|.
name|JDBC
block|}
decl_stmt|;
name|List
argument_list|<
name|PersistenceAdapterChoice
index|[]
argument_list|>
name|choices
init|=
operator|new
name|ArrayList
argument_list|<
name|PersistenceAdapterChoice
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|choices
operator|.
name|add
argument_list|(
name|kahaDb
argument_list|)
expr_stmt|;
name|choices
operator|.
name|add
argument_list|(
name|jdbc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|osName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"AIX"
argument_list|)
operator|&&
operator|!
name|osName
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"SunOS"
argument_list|)
condition|)
block|{
name|PersistenceAdapterChoice
index|[]
name|levelDb
init|=
block|{
name|PersistenceAdapterChoice
operator|.
name|LevelDB
block|}
decl_stmt|;
name|choices
operator|.
name|add
argument_list|(
name|levelDb
argument_list|)
expr_stmt|;
block|}
return|return
name|choices
return|;
block|}
specifier|public
name|DurableSubscriptionOffline3Test
parameter_list|(
name|PersistenceAdapterChoice
name|persistenceAdapterChoice
parameter_list|)
block|{
name|this
operator|.
name|defaultPersistenceAdapter
operator|=
name|persistenceAdapterChoice
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|">>>> running {} with persistenceAdapterChoice: {}"
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|this
operator|.
name|defaultPersistenceAdapter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testInterleavedOfflineSubscriptionCanConsume
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create durable subscription 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// create durable subscription 2
name|Connection
name|con2
init|=
name|createConnection
argument_list|(
literal|"cliId2"
argument_list|)
decl_stmt|;
name|Session
name|session2
init|=
name|con2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer2
init|=
name|session2
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener2
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer2
operator|.
name|setMessageListener
argument_list|(
name|listener2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listener2
operator|.
name|count
argument_list|)
expr_stmt|;
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send some more
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|=
name|createConnection
argument_list|(
literal|"cliId2"
argument_list|)
expr_stmt|;
name|session2
operator|=
name|con2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer2
operator|=
name|session2
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|listener2
operator|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|(
literal|"cliId2"
argument_list|)
expr_stmt|;
name|consumer2
operator|.
name|setMessageListener
argument_list|(
name|listener2
argument_list|)
expr_stmt|;
comment|// test online subs
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|listener2
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// consume all messages
name|con
operator|=
name|createConnection
argument_list|(
literal|"cliId1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|(
literal|"cliId1"
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"offline consumer got all"
argument_list|,
name|sent
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|filter
init|=
literal|"$a='A1' AND (($b=true AND $c=true) OR ($d='D1' OR $d='D2'))"
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testMixOfOnLineAndOfflineSubsGetAllMatched
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create offline subs 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create offline subs 2
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create online subs
name|Connection
name|con2
init|=
name|createConnection
argument_list|(
literal|"onlineCli1"
argument_list|)
decl_stmt|;
name|Session
name|session2
init|=
name|con2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer2
init|=
name|session2
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener2
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer2
operator|.
name|setMessageListener
argument_list|(
name|listener2
argument_list|)
expr_stmt|;
comment|// create non-durable consumer
name|Connection
name|con4
init|=
name|createConnection
argument_list|(
literal|"nondurableCli"
argument_list|)
decl_stmt|;
name|Session
name|session4
init|=
name|con4
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer4
init|=
name|session4
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener4
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer4
operator|.
name|setMessageListener
argument_list|(
name|listener4
argument_list|)
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|hasRelevant
init|=
literal|false
decl_stmt|;
name|int
name|filtered
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|postf
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|9
argument_list|)
operator|+
literal|1
decl_stmt|;
name|String
name|d
init|=
literal|"D"
operator|+
name|postf
decl_stmt|;
if|if
condition|(
literal|"D1"
operator|.
name|equals
argument_list|(
name|d
argument_list|)
operator|||
literal|"D2"
operator|.
name|equals
argument_list|(
name|d
argument_list|)
condition|)
block|{
name|hasRelevant
operator|=
literal|true
expr_stmt|;
name|filtered
operator|++
expr_stmt|;
block|}
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"$a"
argument_list|,
literal|"A1"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"$d"
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"$a"
argument_list|,
literal|"A1"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"$b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"$c"
argument_list|,
name|hasRelevant
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasRelevant
condition|)
name|filtered
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// test non-durable consumer
name|session4
operator|.
name|close
argument_list|()
expr_stmt|;
name|con4
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|filtered
argument_list|,
name|listener4
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// succeeded!
comment|// test online subs
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|filtered
argument_list|,
name|listener2
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// succeeded!
comment|// test offline 1
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|FilterCheckListener
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|filtered
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// test offline 2
name|Connection
name|con3
init|=
name|createConnection
argument_list|(
literal|"offCli2"
argument_list|)
decl_stmt|;
name|Session
name|session3
init|=
name|con3
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer3
init|=
name|session3
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
name|filter
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener3
init|=
operator|new
name|FilterCheckListener
argument_list|()
decl_stmt|;
name|consumer3
operator|.
name|setMessageListener
argument_list|(
name|listener3
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session3
operator|.
name|close
argument_list|()
expr_stmt|;
name|con3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|filtered
argument_list|,
name|listener3
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no unexpected exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testOfflineSubscriptionWithSelectorAfterRestart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|PersistenceAdapterChoice
operator|.
name|LevelDB
operator|==
name|defaultPersistenceAdapter
condition|)
block|{
comment|// https://issues.apache.org/jira/browse/AMQ-4296
return|return;
block|}
comment|// create offline subs 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// create offline subs 2
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli2"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// send messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|filtered
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|filter
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|2
argument_list|)
operator|>=
literal|1
decl_stmt|;
if|if
condition|(
name|filter
condition|)
name|filtered
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
name|filter
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|filtered
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// restart broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|false
comment|/*deleteAllMessages*/
argument_list|)
expr_stmt|;
comment|// send more messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|filter
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|2
argument_list|)
operator|>=
literal|1
decl_stmt|;
if|if
condition|(
name|filter
condition|)
name|filtered
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
name|filter
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"after restart, total sent with filter='true': "
operator|+
name|filtered
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test offline subs
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|(
literal|"1>"
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Connection
name|con3
init|=
name|createConnection
argument_list|(
literal|"offCli2"
argument_list|)
decl_stmt|;
name|Session
name|session3
init|=
name|con3
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer3
init|=
name|session3
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|"filter = 'true'"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener3
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer3
operator|.
name|setMessageListener
argument_list|(
name|listener3
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|session3
operator|.
name|close
argument_list|()
expr_stmt|;
name|con3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|filtered
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|filtered
argument_list|,
name|listener3
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testOfflineSubscriptionAfterRestart
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create offline subs 1
name|Connection
name|con
init|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DurableSubscriptionOfflineTestListener
name|listener
init|=
operator|new
name|DurableSubscriptionOfflineTestListener
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// send messages
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|int
name|sent
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sent
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
comment|// restart broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|false
comment|/*deleteAllMessages*/
argument_list|)
expr_stmt|;
comment|// send more messages
name|con
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|sent
operator|++
expr_stmt|;
name|Message
name|message
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"filter"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"after restart, sent: "
operator|+
name|sent
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test offline subs
name|con
operator|=
name|createConnection
argument_list|(
literal|"offCli1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"SubsId"
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|sent
argument_list|,
name|listener
operator|.
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|FilterCheckListener
extends|extends
name|DurableSubscriptionOfflineTestListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
try|try
block|{
name|Object
name|b
init|=
name|message
operator|.
name|getObjectProperty
argument_list|(
literal|"$b"
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|boolean
name|c
init|=
name|message
operator|.
name|getBooleanProperty
argument_list|(
literal|"$c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|d
init|=
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"$d"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|""
argument_list|,
literal|"D1"
operator|.
name|equals
argument_list|(
name|d
argument_list|)
operator|||
literal|"D2"
operator|.
name|equals
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

