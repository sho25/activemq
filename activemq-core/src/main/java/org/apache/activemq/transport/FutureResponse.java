begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FutureResponse
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FutureResponse
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ResponseCallback
name|responseCallback
decl_stmt|;
specifier|private
specifier|final
name|ArrayBlockingQueue
argument_list|<
name|Response
argument_list|>
name|responseSlot
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Response
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|FutureResponse
parameter_list|(
name|ResponseCallback
name|responseCallback
parameter_list|)
block|{
name|this
operator|.
name|responseCallback
operator|=
name|responseCallback
expr_stmt|;
block|}
specifier|public
name|Response
name|getResult
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|responseSlot
operator|.
name|take
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Operation interupted: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Response
name|getResult
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Response
name|result
init|=
name|responseSlot
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|timeout
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|RequestTimedOutIOException
argument_list|()
throw|;
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted."
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|set
parameter_list|(
name|Response
name|result
parameter_list|)
block|{
if|if
condition|(
name|responseSlot
operator|.
name|offer
argument_list|(
name|result
argument_list|)
condition|)
block|{
if|if
condition|(
name|responseCallback
operator|!=
literal|null
condition|)
block|{
name|responseCallback
operator|.
name|onCompletion
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

