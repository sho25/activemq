begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_comment
comment|/**  * Test a HashIndex  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|IndexTestSupport
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|10000
decl_stmt|;
specifier|protected
name|Index
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|index
decl_stmt|;
specifier|protected
name|File
name|directory
decl_stmt|;
specifier|protected
name|PageFile
name|pf
decl_stmt|;
specifier|protected
name|Transaction
name|tx
decl_stmt|;
comment|/**      * @throws java.lang.Exception      * @see junit.framework.TestCase#setUp()      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|directory
operator|=
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|delete
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|pf
operator|!=
literal|null
condition|)
block|{
name|pf
operator|.
name|unload
argument_list|()
expr_stmt|;
name|pf
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|delete
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createPageFileAndIndex
parameter_list|(
name|int
name|pageSize
parameter_list|)
throws|throws
name|Exception
block|{
name|pf
operator|=
operator|new
name|PageFile
argument_list|(
name|directory
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pf
operator|.
name|setPageSize
argument_list|(
name|pageSize
argument_list|)
expr_stmt|;
name|pf
operator|.
name|load
argument_list|()
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|createIndex
argument_list|()
expr_stmt|;
block|}
specifier|abstract
specifier|protected
name|Index
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|createIndex
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|public
name|void
name|testIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|createPageFileAndIndex
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doInsert
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkRetrieve
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
name|doRemove
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|doInsert
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
name|doRemoveHalf
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
name|doInsertHalf
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|checkRetrieve
argument_list|(
name|COUNT
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|void
name|doInsert
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|key
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
literal|"key:"
operator|+
name|i
return|;
block|}
name|void
name|checkRetrieve
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Long
name|item
init|=
name|index
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Key missing: "
operator|+
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|doRemoveHalf
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"Expected remove to return value for index "
operator|+
name|i
argument_list|,
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|doInsertHalf
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|index
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|doRemove
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"Expected remove to return value for index "
operator|+
name|i
argument_list|,
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Long
name|item
init|=
name|index
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|doRemoveBackwards
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
name|count
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|index
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Long
name|item
init|=
name|index
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

