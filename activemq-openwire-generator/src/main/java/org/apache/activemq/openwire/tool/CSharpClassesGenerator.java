begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|JProperty
import|;
end_import

begin_comment
comment|/**  *  * @version $Revision: 383749 $  */
end_comment

begin_class
specifier|public
class|class
name|CSharpClassesGenerator
extends|extends
name|MultiSourceGenerator
block|{
specifier|protected
name|String
name|targetDir
init|=
literal|"./src/main/csharp"
decl_stmt|;
specifier|public
name|Object
name|run
parameter_list|()
block|{
name|filePostFix
operator|=
literal|".cs"
expr_stmt|;
if|if
condition|(
name|destDir
operator|==
literal|null
condition|)
block|{
name|destDir
operator|=
operator|new
name|File
argument_list|(
name|targetDir
operator|+
literal|"/ActiveMQ/Commands"
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|run
argument_list|()
return|;
block|}
specifier|public
name|String
name|makeHashCodeBody
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|simpleName
operator|.
name|endsWith
argument_list|(
literal|"Id"
argument_list|)
condition|)
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            int answer = 0;"
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            answer = (answer * 37) + HashCode("
operator|+
name|property
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"            return answer;"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|makeEqualsBody
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|simpleName
operator|.
name|endsWith
argument_list|(
literal|"Id"
argument_list|)
condition|)
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|Iterator
name|iter
init|=
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|property
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            if (! Equals(this."
operator|+
name|name
operator|+
literal|", that."
operator|+
name|name
operator|+
literal|")) return false;"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"            return true;"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|makeToStringBody
parameter_list|()
throws|throws
name|Exception
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|out
init|=
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            return GetType().Name + \"[\""
argument_list|)
expr_stmt|;
name|Iterator
name|iter
init|=
name|getProperties
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|property
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                + \" "
operator|+
name|name
operator|+
literal|"=\" + "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|"                + \" ]\";"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|generateLicence
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Licensed to the Apache Software Foundation (ASF) under one or more"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * contributor license agreements.  See the NOTICE file distributed with"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * this work for additional information regarding copyright ownership."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * The ASF licenses this file to You under the Apache License, Version 2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * (the \"License\"); you may not use this file except in compliance with"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * the License.  You may obtain a copy of the License at"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * http://www.apache.org/licenses/LICENSE-2.0"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" *"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * Unless required by applicable law or agreed to in writing, software"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * distributed under the License is distributed on an \"AS IS\" BASIS,"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * See the License for the specific language governing permissions and"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" * limitations under the License."
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|" */"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|generateFile
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|generateLicence
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"//"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"//  NOTE!: This file is autogenerated - do not modify!"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"//         if you need to make a change, please see the Groovy scripts in the"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"//         activemq-core module"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"//"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"using System;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"using System.Collections;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"using ActiveMQ.OpenWire;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"using ActiveMQ.Commands;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"namespace ActiveMQ.Commands"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    ///<summary>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    ///  The ActiveMQ "
operator|+
name|jclass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" Command"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    ///</summary>"
argument_list|)
expr_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|"    public class "
operator|+
name|jclass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" : "
operator|+
name|baseClass
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jclass
operator|.
name|getInterfaces
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JClass
name|intf
init|=
name|jclass
operator|.
name|getInterfaces
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
literal|", "
operator|+
name|intf
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        public const byte ID_"
operator|+
name|jclass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" = "
operator|+
name|getOpenWireOpCode
argument_list|(
name|jclass
argument_list|)
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    			"
argument_list|)
expr_stmt|;
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|String
name|type
decl_stmt|;
name|Object
name|name
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|type
operator|=
name|toCSharpType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|decapitalize
argument_list|(
name|property
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        "
operator|+
name|type
operator|+
literal|" "
operator|+
name|name
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
name|String
name|text
init|=
name|makeHashCodeBody
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		public override int GetHashCode() {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|text
operator|+
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		}"
argument_list|)
expr_stmt|;
block|}
name|text
operator|=
name|makeEqualsBody
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		public override bool Equals(object that) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	    	if (that is "
operator|+
name|className
operator|+
literal|") {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"	    	    return Equals(("
operator|+
name|className
operator|+
literal|") that);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"			}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"			return false;"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    	}"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		public virtual bool Equals("
operator|+
name|className
operator|+
literal|" that) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|text
operator|+
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		}"
argument_list|)
expr_stmt|;
block|}
name|text
operator|=
name|makeToStringBody
argument_list|()
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		public override string ToString() {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|text
operator|+
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"		}"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        public override byte GetDataStructureType() {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            return ID_"
operator|+
name|jclass
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        // Properties"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|type
operator|=
name|toCSharpType
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|decapitalize
argument_list|(
name|property
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|propertyName
init|=
name|property
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|getter
init|=
name|capitalize
argument_list|(
name|property
operator|.
name|getGetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|setter
init|=
name|capitalize
argument_list|(
name|property
operator|.
name|getSetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        public "
operator|+
name|type
operator|+
literal|" "
operator|+
name|propertyName
operator|+
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            get { return "
operator|+
name|name
operator|+
literal|"; }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            set { this."
operator|+
name|name
operator|+
literal|" = value; }            "
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"    }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getTargetDir
parameter_list|()
block|{
return|return
name|targetDir
return|;
block|}
specifier|public
name|void
name|setTargetDir
parameter_list|(
name|String
name|targetDir
parameter_list|)
block|{
name|this
operator|.
name|targetDir
operator|=
name|targetDir
expr_stmt|;
block|}
block|}
end_class

end_unit

