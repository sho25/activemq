begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidDestinationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TransactionRolledBackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|blob
operator|.
name|BlobDownloader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessagePull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
operator|.
name|JMSConsumerStatsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
operator|.
name|StatsCapable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
operator|.
name|StatsImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|selector
operator|.
name|SelectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A client uses a<CODE>MessageConsumer</CODE> object to receive messages  * from a destination. A<CODE> MessageConsumer</CODE> object is created by  * passing a<CODE>Destination</CODE> object to a message-consumer creation  * method supplied by a session.  *<P>  *<CODE>MessageConsumer</CODE> is the parent interface for all message  * consumers.  *<P>  * A message consumer can be created with a message selector. A message selector  * allows the client to restrict the messages delivered to the message consumer  * to those that match the selector.  *<P>  * A client may either synchronously receive a message consumer's messages or  * have the consumer asynchronously deliver them as they arrive.  *<P>  * For synchronous receipt, a client can request the next message from a message  * consumer using one of its<CODE> receive</CODE> methods. There are several  * variations of<CODE>receive</CODE> that allow a client to poll or wait for  * the next message.  *<P>  * For asynchronous delivery, a client can register a  *<CODE>MessageListener</CODE> object with a message consumer. As messages  * arrive at the message consumer, it delivers them by calling the  *<CODE>MessageListener</CODE>'s<CODE>  * onMessage</CODE> method.  *<P>  * It is a client programming error for a<CODE>MessageListener</CODE> to  * throw an exception.  *   *   * @see javax.jms.MessageConsumer  * @see javax.jms.QueueReceiver  * @see javax.jms.TopicSubscriber  * @see javax.jms.Session  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQMessageConsumer
implements|implements
name|MessageAvailableConsumer
implements|,
name|StatsCapable
implements|,
name|ActiveMQDispatcher
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
class|class
name|PreviouslyDeliveredMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
extends|extends
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|final
name|TransactionId
name|transactionId
decl_stmt|;
specifier|public
name|PreviouslyDeliveredMap
parameter_list|(
name|TransactionId
name|transactionId
parameter_list|)
block|{
name|this
operator|.
name|transactionId
operator|=
name|transactionId
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMQMessageConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Scheduler
name|scheduler
decl_stmt|;
specifier|protected
specifier|final
name|ActiveMQSession
name|session
decl_stmt|;
specifier|protected
specifier|final
name|ConsumerInfo
name|info
decl_stmt|;
comment|// These are the messages waiting to be delivered to the client
specifier|protected
specifier|final
name|MessageDispatchChannel
name|unconsumedMessages
decl_stmt|;
comment|// The are the messages that were delivered to the consumer but that have
comment|// not been acknowledged. It's kept in reverse order since we
comment|// Always walk list in reverse order.
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
name|deliveredMessages
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|()
decl_stmt|;
comment|// track duplicate deliveries in a transaction such that the tx integrity can be validated
specifier|private
name|PreviouslyDeliveredMap
argument_list|<
name|MessageId
argument_list|,
name|Boolean
argument_list|>
name|previouslyDeliveredMessages
decl_stmt|;
specifier|private
name|int
name|deliveredCounter
decl_stmt|;
specifier|private
name|int
name|additionalWindowSize
decl_stmt|;
specifier|private
name|long
name|redeliveryDelay
decl_stmt|;
specifier|private
name|int
name|ackCounter
decl_stmt|;
specifier|private
name|int
name|dispatchedCount
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|MessageListener
argument_list|>
name|messageListener
init|=
operator|new
name|AtomicReference
argument_list|<
name|MessageListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|JMSConsumerStatsImpl
name|stats
decl_stmt|;
specifier|private
specifier|final
name|String
name|selector
decl_stmt|;
specifier|private
name|boolean
name|synchronizationRegistered
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|MessageAvailableListener
name|availableListener
decl_stmt|;
specifier|private
name|RedeliveryPolicy
name|redeliveryPolicy
decl_stmt|;
specifier|private
name|boolean
name|optimizeAcknowledge
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|deliveryingAcknowledgements
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
name|MessageTransformer
name|transformer
decl_stmt|;
specifier|private
name|boolean
name|clearDispatchList
decl_stmt|;
name|boolean
name|inProgressClearRequiredFlag
decl_stmt|;
specifier|private
name|MessageAck
name|pendingAck
decl_stmt|;
specifier|private
name|long
name|lastDeliveredSequenceId
decl_stmt|;
specifier|private
name|IOException
name|failureError
decl_stmt|;
specifier|private
name|long
name|optimizeAckTimestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|optimizeAckTimeout
init|=
literal|300
decl_stmt|;
specifier|private
name|long
name|failoverRedeliveryWaitPeriod
init|=
literal|0
decl_stmt|;
comment|/**      * Create a MessageConsumer      *       * @param session      * @param dest      * @param name      * @param selector      * @param prefetch      * @param maximumPendingMessageCount      * @param noLocal      * @param browser      * @param dispatchAsync      * @param messageListener      * @throws JMSException      */
specifier|public
name|ActiveMQMessageConsumer
parameter_list|(
name|ActiveMQSession
name|session
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|selector
parameter_list|,
name|int
name|prefetch
parameter_list|,
name|int
name|maximumPendingMessageCount
parameter_list|,
name|boolean
name|noLocal
parameter_list|,
name|boolean
name|browser
parameter_list|,
name|boolean
name|dispatchAsync
parameter_list|,
name|MessageListener
name|messageListener
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidDestinationException
argument_list|(
literal|"Don't understand null destinations"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidDestinationException
argument_list|(
literal|"The destination object was not given a physical name."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|String
name|physicalName
init|=
name|dest
operator|.
name|getPhysicalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|physicalName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Physical name of Destination should be valid: "
operator|+
name|dest
argument_list|)
throw|;
block|}
name|String
name|connectionID
init|=
name|session
operator|.
name|connection
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|physicalName
operator|.
name|indexOf
argument_list|(
name|connectionID
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidDestinationException
argument_list|(
literal|"Cannot use a Temporary destination from another Connection"
argument_list|)
throw|;
block|}
if|if
condition|(
name|session
operator|.
name|connection
operator|.
name|isDeleted
argument_list|(
name|dest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidDestinationException
argument_list|(
literal|"Cannot use a Temporary destination that has been deleted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|prefetch
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Cannot have a prefetch size less than zero"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|session
operator|.
name|connection
operator|.
name|isMessagePrioritySupported
argument_list|()
condition|)
block|{
name|this
operator|.
name|unconsumedMessages
operator|=
operator|new
name|SimplePriorityMessageDispatchChannel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|unconsumedMessages
operator|=
operator|new
name|FifoMessageDispatchChannel
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|session
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
name|this
operator|.
name|redeliveryPolicy
operator|=
name|session
operator|.
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
expr_stmt|;
name|setTransformer
argument_list|(
name|session
operator|.
name|getTransformer
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|=
operator|new
name|ConsumerInfo
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setExclusive
argument_list|(
name|this
operator|.
name|session
operator|.
name|connection
operator|.
name|isExclusiveConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setSubscriptionName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setPrefetchSize
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setCurrentPrefetchSize
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setMaximumPendingMessageLimit
argument_list|(
name|maximumPendingMessageCount
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setNoLocal
argument_list|(
name|noLocal
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setDispatchAsync
argument_list|(
name|dispatchAsync
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setRetroactive
argument_list|(
name|this
operator|.
name|session
operator|.
name|connection
operator|.
name|isUseRetroactiveConsumer
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setSelector
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Allows the options on the destination to configure the consumerInfo
if|if
condition|(
name|dest
operator|.
name|getOptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|dest
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|this
operator|.
name|info
argument_list|,
name|options
argument_list|,
literal|"consumer."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|info
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setBrowser
argument_list|(
name|browser
argument_list|)
expr_stmt|;
if|if
condition|(
name|selector
operator|!=
literal|null
operator|&&
name|selector
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// Validate the selector
name|SelectorParser
operator|.
name|parse
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|getSelector
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Validate the selector
name|SelectorParser
operator|.
name|parse
argument_list|(
name|this
operator|.
name|info
operator|.
name|getSelector
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|selector
operator|=
name|this
operator|.
name|info
operator|.
name|getSelector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|selector
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|stats
operator|=
operator|new
name|JMSConsumerStatsImpl
argument_list|(
name|session
operator|.
name|getSessionStats
argument_list|()
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|this
operator|.
name|optimizeAcknowledge
operator|=
name|session
operator|.
name|connection
operator|.
name|isOptimizeAcknowledge
argument_list|()
operator|&&
name|session
operator|.
name|isAutoAcknowledge
argument_list|()
operator|&&
operator|!
name|info
operator|.
name|isBrowser
argument_list|()
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setOptimizedAcknowledge
argument_list|(
name|this
operator|.
name|optimizeAcknowledge
argument_list|)
expr_stmt|;
name|this
operator|.
name|failoverRedeliveryWaitPeriod
operator|=
name|session
operator|.
name|connection
operator|.
name|getConsumerFailoverRedeliveryWaitPeriod
argument_list|()
expr_stmt|;
if|if
condition|(
name|messageListener
operator|!=
literal|null
condition|)
block|{
name|setMessageListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|session
operator|.
name|addConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|session
operator|.
name|syncSendPacket
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|this
operator|.
name|session
operator|.
name|removeConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|session
operator|.
name|connection
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isAutoAcknowledgeEach
parameter_list|()
block|{
return|return
name|session
operator|.
name|isAutoAcknowledge
argument_list|()
operator|||
operator|(
name|session
operator|.
name|isDupsOkAcknowledge
argument_list|()
operator|&&
name|getDestination
argument_list|()
operator|.
name|isQueue
argument_list|()
operator|)
return|;
block|}
specifier|private
name|boolean
name|isAutoAcknowledgeBatch
parameter_list|()
block|{
return|return
name|session
operator|.
name|isDupsOkAcknowledge
argument_list|()
operator|&&
operator|!
name|getDestination
argument_list|()
operator|.
name|isQueue
argument_list|()
return|;
block|}
specifier|public
name|StatsImpl
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
specifier|public
name|JMSConsumerStatsImpl
name|getConsumerStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
specifier|public
name|RedeliveryPolicy
name|getRedeliveryPolicy
parameter_list|()
block|{
return|return
name|redeliveryPolicy
return|;
block|}
comment|/**      * Sets the redelivery policy used when messages are redelivered      */
specifier|public
name|void
name|setRedeliveryPolicy
parameter_list|(
name|RedeliveryPolicy
name|redeliveryPolicy
parameter_list|)
block|{
name|this
operator|.
name|redeliveryPolicy
operator|=
name|redeliveryPolicy
expr_stmt|;
block|}
specifier|public
name|MessageTransformer
name|getTransformer
parameter_list|()
block|{
return|return
name|transformer
return|;
block|}
comment|/**      * Sets the transformer used to transform messages before they are sent on      * to the JMS bus      */
specifier|public
name|void
name|setTransformer
parameter_list|(
name|MessageTransformer
name|transformer
parameter_list|)
block|{
name|this
operator|.
name|transformer
operator|=
name|transformer
expr_stmt|;
block|}
comment|/**      * @return Returns the value.      */
specifier|public
name|ConsumerId
name|getConsumerId
parameter_list|()
block|{
return|return
name|info
operator|.
name|getConsumerId
argument_list|()
return|;
block|}
comment|/**      * @return the consumer name - used for durable consumers      */
specifier|public
name|String
name|getConsumerName
parameter_list|()
block|{
return|return
name|this
operator|.
name|info
operator|.
name|getSubscriptionName
argument_list|()
return|;
block|}
comment|/**      * @return true if this consumer does not accept locally produced messages      */
specifier|protected
name|boolean
name|isNoLocal
parameter_list|()
block|{
return|return
name|info
operator|.
name|isNoLocal
argument_list|()
return|;
block|}
comment|/**      * Retrieve is a browser      *       * @return true if a browser      */
specifier|protected
name|boolean
name|isBrowser
parameter_list|()
block|{
return|return
name|info
operator|.
name|isBrowser
argument_list|()
return|;
block|}
comment|/**      * @return ActiveMQDestination      */
specifier|protected
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|info
operator|.
name|getDestination
argument_list|()
return|;
block|}
comment|/**      * @return Returns the prefetchNumber.      */
specifier|public
name|int
name|getPrefetchNumber
parameter_list|()
block|{
return|return
name|info
operator|.
name|getPrefetchSize
argument_list|()
return|;
block|}
comment|/**      * @return true if this is a durable topic subscriber      */
specifier|public
name|boolean
name|isDurableSubscriber
parameter_list|()
block|{
return|return
name|info
operator|.
name|getSubscriptionName
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTopic
argument_list|()
return|;
block|}
comment|/**      * Gets this message consumer's message selector expression.      *       * @return this message consumer's message selector, or null if no message      *         selector exists for the message consumer (that is, if the message      *         selector was not set or was set to null or the empty string)      * @throws JMSException if the JMS provider fails to receive the next      *                 message due to some internal error.      */
specifier|public
name|String
name|getMessageSelector
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|selector
return|;
block|}
comment|/**      * Gets the message consumer's<CODE>MessageListener</CODE>.      *       * @return the listener for the message consumer, or null if no listener is      *         set      * @throws JMSException if the JMS provider fails to get the message      *                 listener due to some internal error.      * @see javax.jms.MessageConsumer#setMessageListener(javax.jms.MessageListener)      */
specifier|public
name|MessageListener
name|getMessageListener
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|messageListener
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Sets the message consumer's<CODE>MessageListener</CODE>.      *<P>      * Setting the message listener to null is the equivalent of unsetting the      * message listener for the message consumer.      *<P>      * The effect of calling<CODE>MessageConsumer.setMessageListener</CODE>      * while messages are being consumed by an existing listener or the consumer      * is being used to consume messages synchronously is undefined.      *       * @param listener the listener to which the messages are to be delivered      * @throws JMSException if the JMS provider fails to receive the next      *                 message due to some internal error.      * @see javax.jms.MessageConsumer#getMessageListener      */
specifier|public
name|void
name|setMessageListener
parameter_list|(
name|MessageListener
name|listener
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Illegal prefetch size of zero. This setting is not supported for asynchronous consumers please set a value of at least 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|boolean
name|wasRunning
init|=
name|session
operator|.
name|isRunning
argument_list|()
decl_stmt|;
if|if
condition|(
name|wasRunning
condition|)
block|{
name|session
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|messageListener
operator|.
name|set
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|session
operator|.
name|redispatch
argument_list|(
name|this
argument_list|,
name|unconsumedMessages
argument_list|)
expr_stmt|;
if|if
condition|(
name|wasRunning
condition|)
block|{
name|session
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|messageListener
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|MessageAvailableListener
name|getAvailableListener
parameter_list|()
block|{
return|return
name|availableListener
return|;
block|}
comment|/**      * Sets the listener used to notify synchronous consumers that there is a      * message available so that the {@link MessageConsumer#receiveNoWait()} can      * be called.      */
specifier|public
name|void
name|setAvailableListener
parameter_list|(
name|MessageAvailableListener
name|availableListener
parameter_list|)
block|{
name|this
operator|.
name|availableListener
operator|=
name|availableListener
expr_stmt|;
block|}
comment|/**      * Used to get an enqueued message from the unconsumedMessages list. The      * amount of time this method blocks is based on the timeout value. - if      * timeout==-1 then it blocks until a message is received. - if timeout==0      * then it it tries to not block at all, it returns a message if it is      * available - if timeout>0 then it blocks up to timeout amount of time.      * Expired messages will consumed by this method.      *       * @throws JMSException      * @return null if we timeout or if the consumer is closed.      */
specifier|private
name|MessageDispatch
name|dequeue
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
name|long
name|deadline
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|deadline
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|MessageDispatch
name|md
init|=
name|unconsumedMessages
operator|.
name|dequeue
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|timeout
operator|>
literal|0
operator|&&
operator|!
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|timeout
operator|=
name|Math
operator|.
name|max
argument_list|(
name|deadline
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|failureError
operator|!=
literal|null
condition|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|failureError
argument_list|)
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|md
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|isExpired
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" received expired message: "
operator|+
name|md
argument_list|)
expr_stmt|;
block|}
name|beforeMessageIsConsumed
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|afterMessageIsConsumed
argument_list|(
name|md
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|timeout
operator|=
name|Math
operator|.
name|max
argument_list|(
name|deadline
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" received message: "
operator|+
name|md
argument_list|)
expr_stmt|;
block|}
return|return
name|md
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Receives the next message produced for this message consumer.      *<P>      * This call blocks indefinitely until a message is produced or until this      * message consumer is closed.      *<P>      * If this<CODE>receive</CODE> is done within a transaction, the consumer      * retains the message until the transaction commits.      *       * @return the next message produced for this message consumer, or null if      *         this message consumer is concurrently closed      */
specifier|public
name|Message
name|receive
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkMessageListener
argument_list|()
expr_stmt|;
name|sendPullCommand
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|MessageDispatch
name|md
init|=
name|dequeue
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|beforeMessageIsConsumed
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|afterMessageIsConsumed
argument_list|(
name|md
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|createActiveMQMessage
argument_list|(
name|md
argument_list|)
return|;
block|}
comment|/**      * @param md      * @return      */
specifier|private
name|ActiveMQMessage
name|createActiveMQMessage
parameter_list|(
specifier|final
name|MessageDispatch
name|md
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQMessage
name|m
init|=
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_BLOB_MESSAGE
condition|)
block|{
operator|(
operator|(
name|ActiveMQBlobMessage
operator|)
name|m
operator|)
operator|.
name|setBlobDownloader
argument_list|(
operator|new
name|BlobDownloader
argument_list|(
name|session
operator|.
name|getBlobTransferPolicy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transformer
operator|!=
literal|null
condition|)
block|{
name|Message
name|transformedMessage
init|=
name|transformer
operator|.
name|consumerTransform
argument_list|(
name|session
argument_list|,
name|this
argument_list|,
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|transformedMessage
operator|!=
literal|null
condition|)
block|{
name|m
operator|=
name|ActiveMQMessageTransformation
operator|.
name|transformMessage
argument_list|(
name|transformedMessage
argument_list|,
name|session
operator|.
name|connection
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|session
operator|.
name|isClientAcknowledge
argument_list|()
condition|)
block|{
name|m
operator|.
name|setAcknowledgeCallback
argument_list|(
operator|new
name|Callback
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
name|session
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|session
operator|.
name|isIndividualAcknowledge
argument_list|()
condition|)
block|{
name|m
operator|.
name|setAcknowledgeCallback
argument_list|(
operator|new
name|Callback
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|checkClosed
argument_list|()
expr_stmt|;
name|acknowledge
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
comment|/**      * Receives the next message that arrives within the specified timeout      * interval.      *<P>      * This call blocks until a message arrives, the timeout expires, or this      * message consumer is closed. A<CODE>timeout</CODE> of zero never      * expires, and the call blocks indefinitely.      *       * @param timeout the timeout value (in milliseconds), a time out of zero      *                never expires.      * @return the next message produced for this message consumer, or null if      *         the timeout expires or this message consumer is concurrently      *         closed      */
specifier|public
name|Message
name|receive
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkMessageListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|timeout
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|receive
argument_list|()
return|;
block|}
name|sendPullCommand
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
while|while
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|MessageDispatch
name|md
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|md
operator|=
name|dequeue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// We let the broker let us know when we timeout.
block|}
else|else
block|{
name|md
operator|=
name|dequeue
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|beforeMessageIsConsumed
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|afterMessageIsConsumed
argument_list|(
name|md
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|createActiveMQMessage
argument_list|(
name|md
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Receives the next message if one is immediately available.      *       * @return the next message produced for this message consumer, or null if      *         one is not available      * @throws JMSException if the JMS provider fails to receive the next      *                 message due to some internal error.      */
specifier|public
name|Message
name|receiveNoWait
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|checkMessageListener
argument_list|()
expr_stmt|;
name|sendPullCommand
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|MessageDispatch
name|md
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|md
operator|=
name|dequeue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// We let the broker let us know when we
comment|// timeout.
block|}
else|else
block|{
name|md
operator|=
name|dequeue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|md
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|beforeMessageIsConsumed
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|afterMessageIsConsumed
argument_list|(
name|md
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|createActiveMQMessage
argument_list|(
name|md
argument_list|)
return|;
block|}
comment|/**      * Closes the message consumer.      *<P>      * Since a provider may allocate some resources on behalf of a<CODE>      * MessageConsumer</CODE>      * outside the Java virtual machine, clients should close them when they are      * not needed. Relying on garbage collection to eventually reclaim these      * resources may not be timely enough.      *<P>      * This call blocks until a<CODE>receive</CODE> or message listener in      * progress has completed. A blocked message consumer<CODE>receive</CODE>      * call returns null when this message consumer is closed.      *       * @throws JMSException if the JMS provider fails to close the consumer due      *                 to some internal error.      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
operator|!
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|session
operator|.
name|getTransactionContext
argument_list|()
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|session
operator|.
name|getTransactionContext
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|doClose
parameter_list|()
throws|throws
name|JMSException
block|{
name|dispose
argument_list|()
expr_stmt|;
name|RemoveInfo
name|removeCommand
init|=
name|info
operator|.
name|createRemoveCommand
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"remove: "
operator|+
name|this
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|", lastDeliveredSequenceId:"
operator|+
name|lastDeliveredSequenceId
argument_list|)
expr_stmt|;
block|}
name|removeCommand
operator|.
name|setLastDeliveredSequenceId
argument_list|(
name|lastDeliveredSequenceId
argument_list|)
expr_stmt|;
name|this
operator|.
name|session
operator|.
name|asyncSendPacket
argument_list|(
name|removeCommand
argument_list|)
expr_stmt|;
block|}
name|void
name|inProgressClearRequired
parameter_list|()
block|{
name|inProgressClearRequiredFlag
operator|=
literal|true
expr_stmt|;
comment|// deal with delivered messages async to avoid lock contention with in progress acks
name|clearDispatchList
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|clearMessagesInProgress
parameter_list|()
block|{
if|if
condition|(
name|inProgressClearRequiredFlag
condition|)
block|{
synchronized|synchronized
init|(
name|unconsumedMessages
operator|.
name|getMutex
argument_list|()
init|)
block|{
if|if
condition|(
name|inProgressClearRequiredFlag
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" clearing dispatched list ("
operator|+
name|unconsumedMessages
operator|.
name|size
argument_list|()
operator|+
literal|") on transport interrupt"
argument_list|)
expr_stmt|;
block|}
comment|// ensure unconsumed are rolledback up front as they may get redelivered to another consumer
name|List
argument_list|<
name|MessageDispatch
argument_list|>
name|list
init|=
name|unconsumedMessages
operator|.
name|removeAll
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|info
operator|.
name|isBrowser
argument_list|()
condition|)
block|{
for|for
control|(
name|MessageDispatch
name|old
range|:
name|list
control|)
block|{
name|session
operator|.
name|connection
operator|.
name|rollbackDuplicate
argument_list|(
name|this
argument_list|,
name|old
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// allow dispatch on this connection to resume
name|session
operator|.
name|connection
operator|.
name|transportInterruptionProcessingComplete
argument_list|()
expr_stmt|;
name|inProgressClearRequiredFlag
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|deliverAcks
parameter_list|()
block|{
name|MessageAck
name|ack
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|deliveryingAcknowledgements
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|isAutoAcknowledgeEach
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|ack
operator|=
name|makeAckForAllDeliveredMessages
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ackCounter
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|ack
operator|=
name|pendingAck
expr_stmt|;
name|pendingAck
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|pendingAck
operator|!=
literal|null
operator|&&
name|pendingAck
operator|.
name|isStandardAck
argument_list|()
condition|)
block|{
name|ack
operator|=
name|pendingAck
expr_stmt|;
name|pendingAck
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
specifier|final
name|MessageAck
name|ackToSend
init|=
name|ack
decl_stmt|;
if|if
condition|(
name|executorService
operator|==
literal|null
condition|)
block|{
name|executorService
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
expr_stmt|;
block|}
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|session
operator|.
name|sendAck
argument_list|(
name|ackToSend
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" failed to delivered acknowledgements"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deliveryingAcknowledgements
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deliveryingAcknowledgements
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
operator|!
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// Do we have any acks we need to send out before closing?
comment|// Ack any delivered messages now.
if|if
condition|(
operator|!
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
name|deliverAcks
argument_list|()
expr_stmt|;
if|if
condition|(
name|isAutoAcknowledgeBatch
argument_list|()
condition|)
block|{
name|acknowledge
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|session
operator|.
name|isClientAcknowledge
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|info
operator|.
name|isBrowser
argument_list|()
condition|)
block|{
comment|// rollback duplicates that aren't acknowledged
name|List
argument_list|<
name|MessageDispatch
argument_list|>
name|tmp
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|deliveredMessages
init|)
block|{
name|tmp
operator|=
operator|new
name|ArrayList
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|(
name|this
operator|.
name|deliveredMessages
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessageDispatch
name|old
range|:
name|tmp
control|)
block|{
name|this
operator|.
name|session
operator|.
name|connection
operator|.
name|rollbackDuplicate
argument_list|(
name|this
argument_list|,
name|old
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tmp
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|session
operator|.
name|isTransacted
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|unconsumedMessages
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|session
operator|.
name|removeConsumer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessageDispatch
argument_list|>
name|list
init|=
name|unconsumedMessages
operator|.
name|removeAll
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|this
operator|.
name|info
operator|.
name|isBrowser
argument_list|()
condition|)
block|{
for|for
control|(
name|MessageDispatch
name|old
range|:
name|list
control|)
block|{
comment|// ensure we don't filter this as a duplicate
name|session
operator|.
name|connection
operator|.
name|rollbackDuplicate
argument_list|(
name|this
argument_list|,
name|old
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * @throws IllegalStateException      */
specifier|protected
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The Consumer is closed"
argument_list|)
throw|;
block|}
block|}
comment|/**      * If we have a zero prefetch specified then send a pull command to the      * broker to pull a message we are about to receive      */
specifier|protected
name|void
name|sendPullCommand
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
block|{
name|clearDispatchList
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|==
literal|0
operator|&&
name|unconsumedMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MessagePull
name|messagePull
init|=
operator|new
name|MessagePull
argument_list|()
decl_stmt|;
name|messagePull
operator|.
name|configure
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|messagePull
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|session
operator|.
name|asyncSendPacket
argument_list|(
name|messagePull
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|checkMessageListener
parameter_list|()
throws|throws
name|JMSException
block|{
name|session
operator|.
name|checkMessageListener
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setOptimizeAcknowledge
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|optimizeAcknowledge
operator|&&
operator|!
name|value
condition|)
block|{
name|deliverAcks
argument_list|()
expr_stmt|;
block|}
name|optimizeAcknowledge
operator|=
name|value
expr_stmt|;
block|}
specifier|protected
name|void
name|setPrefetchSize
parameter_list|(
name|int
name|prefetch
parameter_list|)
block|{
name|deliverAcks
argument_list|()
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setCurrentPrefetchSize
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|beforeMessageIsConsumed
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
throws|throws
name|JMSException
block|{
name|md
operator|.
name|setDeliverySequenceId
argument_list|(
name|session
operator|.
name|getNextDeliveryId
argument_list|()
argument_list|)
expr_stmt|;
name|lastDeliveredSequenceId
operator|=
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
operator|.
name|getBrokerSequenceId
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isAutoAcknowledgeBatch
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|deliveredMessages
operator|.
name|addFirst
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
name|ackLater
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|afterMessageIsConsumed
parameter_list|(
name|MessageDispatch
name|md
parameter_list|,
name|boolean
name|messageExpired
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|messageExpired
condition|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|deliveredMessages
operator|.
name|remove
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|stats
operator|.
name|getExpiredMessageCount
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|ackLater
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stats
operator|.
name|onMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
comment|// Do nothing.
block|}
elseif|else
if|if
condition|(
name|isAutoAcknowledgeEach
argument_list|()
condition|)
block|{
if|if
condition|(
name|deliveryingAcknowledgements
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
if|if
condition|(
operator|!
name|deliveredMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|optimizeAcknowledge
condition|)
block|{
name|ackCounter
operator|++
expr_stmt|;
if|if
condition|(
name|ackCounter
operator|>=
operator|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|*
literal|.65
operator|)
operator|||
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
operator|(
name|optimizeAckTimestamp
operator|+
name|optimizeAckTimeout
operator|)
condition|)
block|{
name|MessageAck
name|ack
init|=
name|makeAckForAllDeliveredMessages
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ackCounter
operator|=
literal|0
expr_stmt|;
name|session
operator|.
name|sendAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|optimizeAckTimestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|MessageAck
name|ack
init|=
name|makeAckForAllDeliveredMessages
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ack
operator|!=
literal|null
condition|)
block|{
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|session
operator|.
name|sendAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|deliveryingAcknowledgements
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isAutoAcknowledgeBatch
argument_list|()
condition|)
block|{
name|ackLater
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|session
operator|.
name|isClientAcknowledge
argument_list|()
operator|||
name|session
operator|.
name|isIndividualAcknowledge
argument_list|()
condition|)
block|{
name|boolean
name|messageUnackedByConsumer
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|messageUnackedByConsumer
operator|=
name|deliveredMessages
operator|.
name|contains
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|messageUnackedByConsumer
condition|)
block|{
name|ackLater
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid session state."
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Creates a MessageAck for all messages contained in deliveredMessages.      * Caller should hold the lock for deliveredMessages.      *       * @param type Ack-Type (i.e. MessageAck.STANDARD_ACK_TYPE)       * @return<code>null</code> if nothing to ack.      */
specifier|private
name|MessageAck
name|makeAckForAllDeliveredMessages
parameter_list|(
name|byte
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
if|if
condition|(
name|deliveredMessages
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|MessageDispatch
name|md
init|=
name|deliveredMessages
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|type
argument_list|,
name|deliveredMessages
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setFirstMessageId
argument_list|(
name|deliveredMessages
operator|.
name|getLast
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ack
return|;
block|}
block|}
specifier|private
name|void
name|ackLater
parameter_list|(
name|MessageDispatch
name|md
parameter_list|,
name|byte
name|ackType
parameter_list|)
throws|throws
name|JMSException
block|{
comment|// Don't acknowledge now, but we may need to let the broker know the
comment|// consumer got the message to expand the pre-fetch window
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
name|session
operator|.
name|doStartTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|synchronizationRegistered
condition|)
block|{
name|synchronizationRegistered
operator|=
literal|true
expr_stmt|;
name|session
operator|.
name|getTransactionContext
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|beforeEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|acknowledge
argument_list|()
expr_stmt|;
name|synchronizationRegistered
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|commit
argument_list|()
expr_stmt|;
name|synchronizationRegistered
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|rollback
argument_list|()
expr_stmt|;
name|synchronizationRegistered
operator|=
literal|false
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|deliveredCounter
operator|++
expr_stmt|;
name|MessageAck
name|oldPendingAck
init|=
name|pendingAck
decl_stmt|;
name|pendingAck
operator|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|ackType
argument_list|,
name|deliveredCounter
argument_list|)
expr_stmt|;
name|pendingAck
operator|.
name|setTransactionId
argument_list|(
name|session
operator|.
name|getTransactionContext
argument_list|()
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldPendingAck
operator|==
literal|null
condition|)
block|{
name|pendingAck
operator|.
name|setFirstMessageId
argument_list|(
name|pendingAck
operator|.
name|getLastMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldPendingAck
operator|.
name|getAckType
argument_list|()
operator|==
name|pendingAck
operator|.
name|getAckType
argument_list|()
condition|)
block|{
name|pendingAck
operator|.
name|setFirstMessageId
argument_list|(
name|oldPendingAck
operator|.
name|getFirstMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// old pending ack being superseded by ack of another type, if is is not a delivered
comment|// ack and hence important, send it now so it is not lost.
if|if
condition|(
operator|!
name|oldPendingAck
operator|.
name|isDeliveredAck
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending old pending ack "
operator|+
name|oldPendingAck
operator|+
literal|", new pending: "
operator|+
name|pendingAck
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|sendAck
argument_list|(
name|oldPendingAck
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"dropping old pending ack "
operator|+
name|oldPendingAck
operator|+
literal|", new pending: "
operator|+
name|pendingAck
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|(
literal|0.5
operator|*
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|)
operator|<=
operator|(
name|deliveredCounter
operator|-
name|additionalWindowSize
operator|)
condition|)
block|{
name|session
operator|.
name|sendAck
argument_list|(
name|pendingAck
argument_list|)
expr_stmt|;
name|pendingAck
operator|=
literal|null
expr_stmt|;
name|deliveredCounter
operator|=
literal|0
expr_stmt|;
name|additionalWindowSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|/**      * Acknowledge all the messages that have been delivered to the client up to      * this point.      *       * @throws JMSException      */
specifier|public
name|void
name|acknowledge
parameter_list|()
throws|throws
name|JMSException
block|{
name|clearDispatchList
argument_list|()
expr_stmt|;
name|waitForRedeliveries
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
comment|// Acknowledge all messages so far.
name|MessageAck
name|ack
init|=
name|makeAckForAllDeliveredMessages
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|ack
operator|==
literal|null
condition|)
return|return;
comment|// no msgs
if|if
condition|(
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
name|rollbackOnFailedRecoveryRedelivery
argument_list|()
expr_stmt|;
name|session
operator|.
name|doStartTransaction
argument_list|()
expr_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|session
operator|.
name|getTransactionContext
argument_list|()
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|sendAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|pendingAck
operator|=
literal|null
expr_stmt|;
comment|// Adjust the counters
name|deliveredCounter
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|deliveredCounter
operator|-
name|deliveredMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|additionalWindowSize
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|additionalWindowSize
operator|-
name|deliveredMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|getTransacted
argument_list|()
condition|)
block|{
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|waitForRedeliveries
parameter_list|()
block|{
if|if
condition|(
name|failoverRedeliveryWaitPeriod
operator|>
literal|0
operator|&&
name|previouslyDeliveredMessages
operator|!=
literal|null
condition|)
block|{
name|long
name|expiry
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|failoverRedeliveryWaitPeriod
decl_stmt|;
name|int
name|numberNotReplayed
decl_stmt|;
do|do
block|{
name|numberNotReplayed
operator|=
literal|0
expr_stmt|;
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
if|if
condition|(
name|previouslyDeliveredMessages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Boolean
argument_list|>
name|entry
range|:
name|previouslyDeliveredMessages
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|numberNotReplayed
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|numberNotReplayed
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"waiting for redelivery of "
operator|+
name|numberNotReplayed
operator|+
literal|" in transaction: "
operator|+
name|previouslyDeliveredMessages
operator|.
name|transactionId
operator|+
literal|", to consumer :"
operator|+
name|this
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|500
argument_list|,
name|failoverRedeliveryWaitPeriod
operator|/
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|outOfhere
parameter_list|)
block|{
break|break;
block|}
block|}
block|}
do|while
condition|(
name|numberNotReplayed
operator|>
literal|0
operator|&&
name|expiry
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
do|;
block|}
block|}
comment|/*      * called with deliveredMessages locked      */
specifier|private
name|void
name|rollbackOnFailedRecoveryRedelivery
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|previouslyDeliveredMessages
operator|!=
literal|null
condition|)
block|{
comment|// if any previously delivered messages was not re-delivered, transaction is invalid and must rollback
comment|// as messages have been dispatched else where.
name|int
name|numberNotReplayed
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Boolean
argument_list|>
name|entry
range|:
name|previouslyDeliveredMessages
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|numberNotReplayed
operator|++
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"previously delivered message has not been replayed in transaction: "
operator|+
name|previouslyDeliveredMessages
operator|.
name|transactionId
operator|+
literal|" , messageId: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|numberNotReplayed
operator|>
literal|0
condition|)
block|{
name|String
name|message
init|=
literal|"rolling back transaction ("
operator|+
name|previouslyDeliveredMessages
operator|.
name|transactionId
operator|+
literal|") post failover recovery. "
operator|+
name|numberNotReplayed
operator|+
literal|" previously delivered message(s) not replayed to consumer: "
operator|+
name|this
operator|.
name|getConsumerId
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TransactionRolledBackException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
name|void
name|acknowledge
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|INDIVIDUAL_ACK_TYPE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|session
operator|.
name|sendAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|deliveredMessages
operator|.
name|remove
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|commit
parameter_list|()
throws|throws
name|JMSException
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearPreviouslyDelivered
argument_list|()
expr_stmt|;
block|}
name|redeliveryDelay
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|rollback
parameter_list|()
throws|throws
name|JMSException
block|{
synchronized|synchronized
init|(
name|unconsumedMessages
operator|.
name|getMutex
argument_list|()
init|)
block|{
if|if
condition|(
name|optimizeAcknowledge
condition|)
block|{
comment|// remove messages read but not acked at the broker yet through
comment|// optimizeAcknowledge
if|if
condition|(
operator|!
name|this
operator|.
name|info
operator|.
name|isBrowser
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|(
name|i
operator|<
name|deliveredMessages
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
name|i
operator|<
name|ackCounter
operator|)
condition|;
name|i
operator|++
control|)
block|{
comment|// ensure we don't filter this as a duplicate
name|MessageDispatch
name|md
init|=
name|deliveredMessages
operator|.
name|removeLast
argument_list|()
decl_stmt|;
name|session
operator|.
name|connection
operator|.
name|rollbackDuplicate
argument_list|(
name|this
argument_list|,
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
name|rollbackPreviouslyDeliveredAndNotRedelivered
argument_list|()
expr_stmt|;
if|if
condition|(
name|deliveredMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// use initial delay for first redelivery
name|MessageDispatch
name|lastMd
init|=
name|deliveredMessages
operator|.
name|getFirst
argument_list|()
decl_stmt|;
specifier|final
name|int
name|currentRedeliveryCount
init|=
name|lastMd
operator|.
name|getMessage
argument_list|()
operator|.
name|getRedeliveryCounter
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentRedeliveryCount
operator|>
literal|0
condition|)
block|{
name|redeliveryDelay
operator|=
name|redeliveryPolicy
operator|.
name|getNextRedeliveryDelay
argument_list|(
name|redeliveryDelay
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|redeliveryDelay
operator|=
name|redeliveryPolicy
operator|.
name|getInitialRedeliveryDelay
argument_list|()
expr_stmt|;
block|}
name|MessageId
name|firstMsgId
init|=
name|deliveredMessages
operator|.
name|getLast
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MessageDispatch
argument_list|>
name|iter
init|=
name|deliveredMessages
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageDispatch
name|md
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|onMessageRolledBack
argument_list|()
expr_stmt|;
comment|// ensure we don't filter this as a duplicate
name|session
operator|.
name|connection
operator|.
name|rollbackDuplicate
argument_list|(
name|this
argument_list|,
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redeliveryPolicy
operator|.
name|getMaximumRedeliveries
argument_list|()
operator|!=
name|RedeliveryPolicy
operator|.
name|NO_MAXIMUM_REDELIVERIES
operator|&&
name|lastMd
operator|.
name|getMessage
argument_list|()
operator|.
name|getRedeliveryCounter
argument_list|()
operator|>
name|redeliveryPolicy
operator|.
name|getMaximumRedeliveries
argument_list|()
condition|)
block|{
comment|// We need to NACK the messages so that they get sent to the
comment|// DLQ.
comment|// Acknowledge the last message.
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|lastMd
argument_list|,
name|MessageAck
operator|.
name|POSION_ACK_TYPE
argument_list|,
name|deliveredMessages
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setPoisonCause
argument_list|(
name|lastMd
operator|.
name|getRollbackCause
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setFirstMessageId
argument_list|(
name|firstMsgId
argument_list|)
expr_stmt|;
name|session
operator|.
name|sendAck
argument_list|(
name|ack
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Adjust the window size.
name|additionalWindowSize
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|additionalWindowSize
operator|-
name|deliveredMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|redeliveryDelay
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// only redelivery_ack after first delivery
if|if
condition|(
name|currentRedeliveryCount
operator|>
literal|0
condition|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|lastMd
argument_list|,
name|MessageAck
operator|.
name|REDELIVERED_ACK_TYPE
argument_list|,
name|deliveredMessages
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setFirstMessageId
argument_list|(
name|firstMsgId
argument_list|)
expr_stmt|;
name|session
operator|.
name|sendAck
argument_list|(
name|ack
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// stop the delivery of messages.
name|unconsumedMessages
operator|.
name|stop
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MessageDispatch
argument_list|>
name|iter
init|=
name|deliveredMessages
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageDispatch
name|md
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|unconsumedMessages
operator|.
name|enqueueFirst
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|redeliveryDelay
operator|>
literal|0
operator|&&
operator|!
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// Start up the delivery again a little later.
name|scheduler
operator|.
name|executeAfterDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|session
operator|.
name|connection
operator|.
name|onAsyncException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|redeliveryDelay
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|deliveredCounter
operator|-=
name|deliveredMessages
operator|.
name|size
argument_list|()
expr_stmt|;
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|messageListener
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|redispatch
argument_list|(
name|this
argument_list|,
name|unconsumedMessages
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * called with unconsumedMessages&& deliveredMessages locked      * remove any message not re-delivered as they can't be replayed to this       * consumer on rollback      */
specifier|private
name|void
name|rollbackPreviouslyDeliveredAndNotRedelivered
parameter_list|()
block|{
if|if
condition|(
name|previouslyDeliveredMessages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Boolean
argument_list|>
name|entry
range|:
name|previouslyDeliveredMessages
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|removeFromDeliveredMessages
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|clearPreviouslyDelivered
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * called with deliveredMessages locked      */
specifier|private
name|void
name|removeFromDeliveredMessages
parameter_list|(
name|MessageId
name|key
parameter_list|)
block|{
name|Iterator
argument_list|<
name|MessageDispatch
argument_list|>
name|iterator
init|=
name|deliveredMessages
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageDispatch
name|candidate
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|equals
argument_list|(
name|candidate
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
name|session
operator|.
name|connection
operator|.
name|rollbackDuplicate
argument_list|(
name|this
argument_list|,
name|candidate
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/*      * called with deliveredMessages locked      */
specifier|private
name|void
name|clearPreviouslyDelivered
parameter_list|()
block|{
if|if
condition|(
name|previouslyDeliveredMessages
operator|!=
literal|null
condition|)
block|{
name|previouslyDeliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|previouslyDeliveredMessages
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
name|MessageListener
name|listener
init|=
name|this
operator|.
name|messageListener
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|clearMessagesInProgress
argument_list|()
expr_stmt|;
name|clearDispatchList
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|unconsumedMessages
operator|.
name|getMutex
argument_list|()
init|)
block|{
if|if
condition|(
operator|!
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|info
operator|.
name|isBrowser
argument_list|()
operator|||
operator|!
name|session
operator|.
name|connection
operator|.
name|isDuplicate
argument_list|(
name|this
argument_list|,
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
operator|&&
name|unconsumedMessages
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|ActiveMQMessage
name|message
init|=
name|createActiveMQMessage
argument_list|(
name|md
argument_list|)
decl_stmt|;
name|beforeMessageIsConsumed
argument_list|(
name|md
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|expired
init|=
name|message
operator|.
name|isExpired
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|expired
condition|)
block|{
name|listener
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|afterMessageIsConsumed
argument_list|(
name|md
argument_list|,
name|expired
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" Exception while processing message: "
operator|+
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAutoAcknowledgeBatch
argument_list|()
operator|||
name|isAutoAcknowledgeEach
argument_list|()
operator|||
name|session
operator|.
name|isIndividualAcknowledge
argument_list|()
condition|)
block|{
comment|// schedual redelivery and possible dlq processing
name|md
operator|.
name|setRollbackCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|rollback
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Transacted or Client ack: Deliver the
comment|// next message.
name|afterMessageIsConsumed
argument_list|(
name|md
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|unconsumedMessages
operator|.
name|isRunning
argument_list|()
condition|)
block|{
comment|// delayed redelivery, ensure it can be re delivered
name|session
operator|.
name|connection
operator|.
name|rollbackDuplicate
argument_list|(
name|this
argument_list|,
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|unconsumedMessages
operator|.
name|enqueue
argument_list|(
name|md
argument_list|)
expr_stmt|;
if|if
condition|(
name|availableListener
operator|!=
literal|null
condition|)
block|{
name|availableListener
operator|.
name|onMessageAvailable
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|isTransacted
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" ignoring (auto acking) duplicate: "
operator|+
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|session
operator|.
name|sendAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" tracking transacted redelivery of duplicate: "
operator|+
name|md
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|needsPoisonAck
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
if|if
condition|(
name|previouslyDeliveredMessages
operator|!=
literal|null
condition|)
block|{
name|previouslyDeliveredMessages
operator|.
name|put
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delivery while pending redelivery to another consumer on the same connection
comment|// not waiting for redelivery will help here
name|needsPoisonAck
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needsPoisonAck
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"acking duplicate delivery as poison, redelivery must be pending to another"
operator|+
literal|" consumer on this connection, failoverRedeliveryWaitPeriod="
operator|+
name|failoverRedeliveryWaitPeriod
operator|+
literal|". Message: "
operator|+
name|md
argument_list|)
expr_stmt|;
name|MessageAck
name|poisonAck
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|POSION_ACK_TYPE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|poisonAck
operator|.
name|setFirstMessageId
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|sendAck
argument_list|(
name|poisonAck
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ackLater
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|++
name|dispatchedCount
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|dispatchedCount
operator|=
literal|0
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|session
operator|.
name|connection
operator|.
name|onClientInternalException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// async (on next call) clear or track delivered as they may be flagged as duplicates if they arrive again
specifier|private
name|void
name|clearDispatchList
parameter_list|()
block|{
if|if
condition|(
name|clearDispatchList
condition|)
block|{
synchronized|synchronized
init|(
name|deliveredMessages
init|)
block|{
if|if
condition|(
name|clearDispatchList
condition|)
block|{
if|if
condition|(
operator|!
name|deliveredMessages
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|session
operator|.
name|isTransacted
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" tracking existing transacted delivered list ("
operator|+
name|deliveredMessages
operator|.
name|size
argument_list|()
operator|+
literal|") on transport interrupt"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previouslyDeliveredMessages
operator|==
literal|null
condition|)
block|{
name|previouslyDeliveredMessages
operator|=
operator|new
name|PreviouslyDeliveredMap
argument_list|<
name|MessageId
argument_list|,
name|Boolean
argument_list|>
argument_list|(
name|session
operator|.
name|getTransactionContext
argument_list|()
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessageDispatch
name|delivered
range|:
name|deliveredMessages
control|)
block|{
name|previouslyDeliveredMessages
operator|.
name|put
argument_list|(
name|delivered
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getConsumerId
argument_list|()
operator|+
literal|" clearing delivered list ("
operator|+
name|deliveredMessages
operator|.
name|size
argument_list|()
operator|+
literal|") on transport interrupt"
argument_list|)
expr_stmt|;
block|}
name|deliveredMessages
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingAck
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|clearDispatchList
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|int
name|getMessageSize
parameter_list|()
block|{
return|return
name|unconsumedMessages
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
return|return;
block|}
name|started
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|unconsumedMessages
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|.
name|executor
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|started
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|unconsumedMessages
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ActiveMQMessageConsumer { value="
operator|+
name|info
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|", started="
operator|+
name|started
operator|.
name|get
argument_list|()
operator|+
literal|" }"
return|;
block|}
comment|/**      * Delivers a message to the message listener.      *       * @return      * @throws JMSException      */
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
name|MessageListener
name|listener
init|=
name|this
operator|.
name|messageListener
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|MessageDispatch
name|md
init|=
name|unconsumedMessages
operator|.
name|dequeueNoWait
argument_list|()
decl_stmt|;
if|if
condition|(
name|md
operator|!=
literal|null
condition|)
block|{
name|dispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isInUse
parameter_list|(
name|ActiveMQTempDestination
name|destination
parameter_list|)
block|{
return|return
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|equals
argument_list|(
name|destination
argument_list|)
return|;
block|}
specifier|public
name|long
name|getLastDeliveredSequenceId
parameter_list|()
block|{
return|return
name|lastDeliveredSequenceId
return|;
block|}
specifier|public
name|IOException
name|getFailureError
parameter_list|()
block|{
return|return
name|failureError
return|;
block|}
specifier|public
name|void
name|setFailureError
parameter_list|(
name|IOException
name|failureError
parameter_list|)
block|{
name|this
operator|.
name|failureError
operator|=
name|failureError
expr_stmt|;
block|}
block|}
end_class

end_unit

