begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyEditorSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|MemoryPropertyEditor
extends|extends
name|PropertyEditorSupport
block|{
specifier|public
name|void
name|setAsText
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*k(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
name|m
operator|=
name|p
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*m(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
name|m
operator|=
name|p
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|p
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*g(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
expr_stmt|;
name|m
operator|=
name|p
operator|.
name|matcher
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|setValue
argument_list|(
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could convert not to a memory size: "
operator|+
name|text
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getAsText
parameter_list|()
block|{
name|Long
name|value
init|=
operator|(
name|Long
operator|)
name|getValue
argument_list|()
decl_stmt|;
return|return
operator|(
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
end_class

end_unit

