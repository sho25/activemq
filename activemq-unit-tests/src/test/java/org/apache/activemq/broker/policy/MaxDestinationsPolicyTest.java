begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|policy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * This unit test is to test that setting the property "maxDestinations" on  * PolicyEntry works correctly. If this property is set, it will limit the  * number of destinations that can be created. Advisory topics will be ignored  * during calculations.  *  */
end_comment

begin_class
specifier|public
class|class
name|MaxDestinationsPolicyTest
block|{
name|BrokerService
name|broker
decl_stmt|;
name|ConnectionFactory
name|factory
decl_stmt|;
name|Connection
name|connection
decl_stmt|;
name|Session
name|session
decl_stmt|;
name|MessageProducer
name|producer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|File
name|testDataDir
init|=
operator|new
name|File
argument_list|(
literal|"target/activemq-data/AMQ-5751"
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setDataDirectoryFile
argument_list|(
name|testDataDir
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|1024l
operator|*
literal|1024
operator|*
literal|64
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|persistenceAdapter
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testDataDir
argument_list|,
literal|"kahadb"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test that 10 queues can be created when default policy allows it.      */
annotation|@
name|Test
specifier|public
name|void
name|testMaxDestinationDefaultPolicySuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|applyDefaultMaximumDestinationPolicy
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|createQueue
argument_list|(
literal|"queue."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that default policy prevents going beyond max      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMaxDestinationDefaultPolicyFail
parameter_list|()
throws|throws
name|Exception
block|{
name|applyDefaultMaximumDestinationPolicy
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
name|createQueue
argument_list|(
literal|"queue."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that a queue policy overrides the default policy      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMaxDestinationOnQueuePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PolicyMap
name|policyMap
init|=
name|applyDefaultMaximumDestinationPolicy
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|applyMaximumDestinationPolicy
argument_list|(
name|policyMap
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue.>"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// This should fail even though the default policy is set to a limit of
comment|// 10 because the
comment|// queue policy overrides it
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|createQueue
argument_list|(
literal|"queue."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that 10 topics can be created when default policy allows it.      */
annotation|@
name|Test
specifier|public
name|void
name|testTopicMaxDestinationDefaultPolicySuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|applyDefaultMaximumDestinationPolicy
argument_list|(
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|createTopic
argument_list|(
literal|"topic."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that topic creation will faill when exceeding the limit      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTopicMaxDestinationDefaultPolicyFail
parameter_list|()
throws|throws
name|Exception
block|{
name|applyDefaultMaximumDestinationPolicy
argument_list|(
literal|20
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|21
condition|;
name|i
operator|++
control|)
block|{
name|createTopic
argument_list|(
literal|"topic."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that no limit is enforced      */
annotation|@
name|Test
specifier|public
name|void
name|testTopicDefaultPolicyNoMaxDestinations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// -1 is the default and signals no max destinations
name|applyDefaultMaximumDestinationPolicy
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|createTopic
argument_list|(
literal|"topic."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test a mixture of queue and topic policies      */
annotation|@
name|Test
specifier|public
name|void
name|testComplexMaxDestinationPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PolicyMap
name|policyMap
init|=
name|applyMaximumDestinationPolicy
argument_list|(
operator|new
name|PolicyMap
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue.>"
argument_list|)
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|applyMaximumDestinationPolicy
argument_list|(
name|policyMap
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"topic.>"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|createQueue
argument_list|(
literal|"queue."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|createTopic
argument_list|(
literal|"topic."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that adding one more of either a topic or a queue fails
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|createTopic
argument_list|(
literal|"topic.test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fail
argument_list|)
expr_stmt|;
name|fail
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|createQueue
argument_list|(
literal|"queue.test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test child destinations of a policy      */
annotation|@
name|Test
specifier|public
name|void
name|testMaxDestinationPolicyOnChildDests
parameter_list|()
throws|throws
name|Exception
block|{
name|applyMaximumDestinationPolicy
argument_list|(
operator|new
name|PolicyMap
argument_list|()
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"topic.>"
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|createTopic
argument_list|(
literal|"topic.test"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that adding one more fails
name|boolean
name|fail
init|=
literal|false
decl_stmt|;
try|try
block|{
name|createTopic
argument_list|(
literal|"topic.abc.test"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
name|e
parameter_list|)
block|{
name|fail
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test a topic policy overrides the default      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMaxDestinationOnTopicPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|PolicyMap
name|policyMap
init|=
name|applyDefaultMaximumDestinationPolicy
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|applyMaximumDestinationPolicy
argument_list|(
name|policyMap
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"topic.>"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// This should fail even though the default policy is set to a limit of
comment|// 10 because the
comment|// queue policy overrides it
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|createTopic
argument_list|(
literal|"topic."
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PolicyMap
name|applyMaximumDestinationPolicy
parameter_list|(
name|PolicyMap
name|policyMap
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|int
name|maxDestinations
parameter_list|)
block|{
name|PolicyEntry
name|entry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setMaxDestinations
argument_list|(
name|maxDestinations
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|entry
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
return|return
name|policyMap
return|;
block|}
specifier|private
name|PolicyMap
name|applyDefaultMaximumDestinationPolicy
parameter_list|(
name|int
name|maxDestinations
parameter_list|)
block|{
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxDestinations
operator|>=
literal|0
condition|)
block|{
name|defaultEntry
operator|.
name|setMaxDestinations
argument_list|(
name|maxDestinations
argument_list|)
expr_stmt|;
block|}
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
return|return
name|policyMap
return|;
block|}
specifier|private
name|void
name|createQueue
parameter_list|(
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|Queue
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTopic
parameter_list|(
name|String
name|topicName
parameter_list|)
throws|throws
name|Exception
block|{
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

