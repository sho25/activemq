begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ThreadPoolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Helper class for working with services that requires locking  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LockableServiceSupport
extends|extends
name|ServiceSupport
implements|implements
name|Lockable
implements|,
name|BrokerServiceAware
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LockableServiceSupport
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|useLock
init|=
literal|true
decl_stmt|;
name|Locker
name|locker
decl_stmt|;
name|long
name|lockKeepAlivePeriod
init|=
literal|0
decl_stmt|;
specifier|private
name|ScheduledFuture
argument_list|<
name|?
argument_list|>
name|keepAliveTicket
decl_stmt|;
specifier|protected
name|ScheduledThreadPoolExecutor
name|clockDaemon
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
comment|/**      * Initialize resources before locking      *      * @throws Exception      */
specifier|abstract
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|setUseLock
parameter_list|(
name|boolean
name|useLock
parameter_list|)
block|{
name|this
operator|.
name|useLock
operator|=
name|useLock
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|useLock
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLocker
parameter_list|(
name|Locker
name|locker
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|locker
operator|=
name|locker
expr_stmt|;
name|locker
operator|.
name|setLockable
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|instanceof
name|PersistenceAdapter
condition|)
block|{
name|this
operator|.
name|locker
operator|.
name|configure
argument_list|(
operator|(
name|PersistenceAdapter
operator|)
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Locker
name|getLocker
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|locker
operator|==
literal|null
condition|)
block|{
name|setLocker
argument_list|(
name|createDefaultLocker
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|this
operator|.
name|locker
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLockKeepAlivePeriod
parameter_list|(
name|long
name|lockKeepAlivePeriod
parameter_list|)
block|{
name|this
operator|.
name|lockKeepAlivePeriod
operator|=
name|lockKeepAlivePeriod
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLockKeepAlivePeriod
parameter_list|()
block|{
return|return
name|lockKeepAlivePeriod
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStart
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|useLock
condition|)
block|{
if|if
condition|(
name|getLocker
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No locker configured"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLocker
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|lockKeepAlivePeriod
operator|>
literal|0
condition|)
block|{
name|keepAliveTicket
operator|=
name|getScheduledThreadPoolExecutor
argument_list|()
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|keepLockAlive
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|lockKeepAlivePeriod
argument_list|,
name|lockKeepAlivePeriod
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|useLock
condition|)
block|{
if|if
condition|(
name|keepAliveTicket
operator|!=
literal|null
condition|)
block|{
name|keepAliveTicket
operator|.
name|cancel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|keepAliveTicket
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|locker
operator|!=
literal|null
condition|)
block|{
name|getLocker
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
name|ThreadPoolUtils
operator|.
name|shutdown
argument_list|(
name|clockDaemon
argument_list|)
expr_stmt|;
name|clockDaemon
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|keepLockAlive
parameter_list|()
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Locker
name|locker
init|=
name|getLocker
argument_list|()
decl_stmt|;
if|if
condition|(
name|locker
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|locker
operator|.
name|keepAlive
argument_list|()
condition|)
block|{
name|stop
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SuppressReplyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"locker keepAlive resulted in"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"locker keepAlive resulted in"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stop
condition|)
block|{
name|stopBroker
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|stopBroker
parameter_list|()
block|{
comment|// we can no longer keep the lock so lets fail
name|LOG
operator|.
name|error
argument_list|(
literal|"{}, no longer able to keep the exclusive lock so giving up being a master"
argument_list|,
name|brokerService
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|brokerService
operator|.
name|isRestartAllowed
argument_list|()
condition|)
block|{
name|brokerService
operator|.
name|requestRestart
argument_list|()
expr_stmt|;
block|}
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failure occurred while stopping broker"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ScheduledThreadPoolExecutor
name|getScheduledThreadPoolExecutor
parameter_list|()
block|{
if|if
condition|(
name|clockDaemon
operator|==
literal|null
condition|)
block|{
name|clockDaemon
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|5
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"ActiveMQ Lock KeepAlive Timer"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|clockDaemon
return|;
block|}
specifier|public
name|void
name|setScheduledThreadPoolExecutor
parameter_list|(
name|ScheduledThreadPoolExecutor
name|clockDaemon
parameter_list|)
block|{
name|this
operator|.
name|clockDaemon
operator|=
name|clockDaemon
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
block|}
specifier|public
name|BrokerService
name|getBrokerService
parameter_list|()
block|{
return|return
name|this
operator|.
name|brokerService
return|;
block|}
block|}
end_class

end_unit

