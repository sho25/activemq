begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|ra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionEventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionRequestInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ManagedConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A simple implementation of a ConnectionManager that can be extended so that it can  * see how the RA connections are interacting with it.  *    * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ConnectionManagerAdapter
implements|implements
name|ConnectionManager
implements|,
name|ConnectionEventListener
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5205646563916645831L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConnectionManagerAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
name|ArrayList
name|listners
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|ArrayList
name|connections
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * Adds a listner to all connections created by this connection manager.      * This listner will be added to all previously created connections.       *       * @param l      */
specifier|public
name|void
name|addConnectionEventListener
parameter_list|(
name|ConnectionEventListener
name|l
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|connections
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ManagedConnection
name|c
init|=
operator|(
name|ManagedConnection
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|c
operator|.
name|addConnectionEventListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|listners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see javax.resource.spi.ConnectionManager#allocateConnection(javax.resource.spi.ManagedConnectionFactory, javax.resource.spi.ConnectionRequestInfo)      */
specifier|public
name|Object
name|allocateConnection
parameter_list|(
name|ManagedConnectionFactory
name|connectionFactory
parameter_list|,
name|ConnectionRequestInfo
name|info
parameter_list|)
throws|throws
name|ResourceException
block|{
name|Subject
name|subject
init|=
literal|null
decl_stmt|;
name|ManagedConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createManagedConnection
argument_list|(
name|subject
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|connection
operator|.
name|addConnectionEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|listners
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConnectionEventListener
name|l
init|=
operator|(
name|ConnectionEventListener
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connection
operator|.
name|addConnectionEventListener
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
return|return
name|connection
operator|.
name|getConnection
argument_list|(
name|subject
argument_list|,
name|info
argument_list|)
return|;
block|}
comment|/**      * @see javax.resource.spi.ConnectionEventListener#connectionClosed(javax.resource.spi.ConnectionEvent)      */
specifier|public
name|void
name|connectionClosed
parameter_list|(
name|ConnectionEvent
name|event
parameter_list|)
block|{
name|connections
operator|.
name|remove
argument_list|(
name|event
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|ManagedConnection
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occured during the cleanup of a managed connection: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|(
operator|(
name|ManagedConnection
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occured during the destruction of a managed connection: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see javax.resource.spi.ConnectionEventListener#localTransactionStarted(javax.resource.spi.ConnectionEvent)      */
specifier|public
name|void
name|localTransactionStarted
parameter_list|(
name|ConnectionEvent
name|event
parameter_list|)
block|{     }
comment|/**      * @see javax.resource.spi.ConnectionEventListener#localTransactionCommitted(javax.resource.spi.ConnectionEvent)      */
specifier|public
name|void
name|localTransactionCommitted
parameter_list|(
name|ConnectionEvent
name|event
parameter_list|)
block|{     }
comment|/**      * @see javax.resource.spi.ConnectionEventListener#localTransactionRolledback(javax.resource.spi.ConnectionEvent)      */
specifier|public
name|void
name|localTransactionRolledback
parameter_list|(
name|ConnectionEvent
name|event
parameter_list|)
block|{     }
comment|/**      * @see javax.resource.spi.ConnectionEventListener#connectionErrorOccurred(javax.resource.spi.ConnectionEvent)      */
specifier|public
name|void
name|connectionErrorOccurred
parameter_list|(
name|ConnectionEvent
name|event
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Managed connection experiened an error: "
argument_list|,
name|event
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|ManagedConnection
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occured during the cleanup of a managed connection: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|(
operator|(
name|ManagedConnection
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResourceException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occured during the destruction of a managed connection: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

