begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|Stomp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompConnection
import|;
end_import

begin_class
specifier|public
class|class
name|BrokerDurableRejectedTest
extends|extends
name|TestSupport
block|{
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Session
name|consumeSession
decl_stmt|;
specifier|protected
name|Destination
name|consumerDestination
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm:(broker:(stomp://localhost:0)?persistent=false&rejectDurableConsumers=true)"
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
name|createConnectionFactory
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|consumeSession
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumerDestination
operator|=
name|consumeSession
operator|.
name|createTopic
argument_list|(
literal|"TestDurableRejected"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurableTopicConsumerJms
parameter_list|()
throws|throws
name|Exception
block|{
name|consumeSession
operator|.
name|createConsumer
argument_list|(
name|consumerDestination
argument_list|)
expr_stmt|;
try|try
block|{
name|consumeSession
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|consumerDestination
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expect not allowed jms exception on durable creation"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"expected exception"
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"not allowed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDurableTopicConsumerStomp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify stomp ok in this case
name|StompConnection
name|stompConnection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|stompConnection
operator|.
name|open
argument_list|(
literal|"localhost"
argument_list|,
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"stomp"
argument_list|)
operator|.
name|getPublishableConnectURI
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// connect
name|String
name|frame
init|=
literal|"CONNECT\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
comment|// subscribe
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/topic/"
operator|+
operator|(
operator|(
name|Topic
operator|)
name|consumerDestination
operator|)
operator|.
name|getTopicName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\nactivemq.subscriptionName:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains expected message -"
operator|+
name|frame
argument_list|,
name|frame
operator|.
name|contains
argument_list|(
literal|"not allowed"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurableTopicConsumerStompWithReceipt
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify stomp ok in this case
name|StompConnection
name|stompConnection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|stompConnection
operator|.
name|open
argument_list|(
literal|"localhost"
argument_list|,
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"stomp"
argument_list|)
operator|.
name|getPublishableConnectURI
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// connect
name|String
name|frame
init|=
literal|"CONNECT\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
comment|// subscribe
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/topic/"
operator|+
operator|(
operator|(
name|Topic
operator|)
name|consumerDestination
operator|)
operator|.
name|getTopicName
argument_list|()
operator|+
literal|"\nreceipt:1\n"
operator|+
literal|"ack:auto\nactivemq.subscriptionName:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains expected message -"
operator|+
name|frame
argument_list|,
name|frame
operator|.
name|contains
argument_list|(
literal|"not allowed"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

