begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * * Copyright 2004 Hiram Chirino * *  Licensed under the Apache License, Version 2.0 (the "License"); *  you may not use this file except in compliance with the License. *  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * *  Unless required by applicable law or agreed to in writing, software *  distributed under the License is distributed on an "AS IS" BASIS, *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *  See the License for the specific language governing permissions and *  limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|InputStreamChannel
import|;
end_import

begin_comment
comment|/**  * Provides an InputStream for a given InputStreamChannel.  *    * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|InputStreamChannelToInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
name|InputStreamChannel
name|channel
decl_stmt|;
comment|/**      * @param channel      */
specifier|public
name|InputStreamChannelToInputStream
parameter_list|(
specifier|final
name|InputStreamChannel
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|channel
operator|.
name|available
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|mark
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
name|channel
operator|.
name|mark
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|markSupported
parameter_list|()
block|{
return|return
name|channel
operator|.
name|markSupported
argument_list|()
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|channel
operator|.
name|read
argument_list|(
name|arg0
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|channel
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|channel
operator|.
name|skip
argument_list|(
name|arg0
argument_list|)
return|;
block|}
comment|/**      * @see java.io.InputStream#read()      */
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|channel
operator|.
name|read
argument_list|()
return|;
block|}
comment|/**      * @see java.io.InputStream#read(byte[], int, int)      */
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|channel
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
comment|/**      * @see java.io.InputStream#close()      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|channel
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

