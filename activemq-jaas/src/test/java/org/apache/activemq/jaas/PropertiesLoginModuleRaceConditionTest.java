begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ErrorCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
specifier|public
class|class
name|PropertiesLoginModuleRaceConditionTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|GROUPS_FILE
init|=
literal|"groups.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USERS_FILE
init|=
literal|"users.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USERNAME
init|=
literal|"first"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"secret"
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|ErrorCollector
name|e
init|=
operator|new
name|ErrorCollector
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temp
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
specifier|private
name|BlockingQueue
argument_list|<
name|Exception
argument_list|>
name|errors
decl_stmt|;
specifier|private
name|ExecutorService
name|pool
decl_stmt|;
specifier|private
name|CallbackHandler
name|callback
decl_stmt|;
specifier|private
specifier|static
class|class
name|LoginTester
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|CountDownLatch
name|finished
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Exception
argument_list|>
name|errors
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|start
decl_stmt|;
specifier|private
specifier|final
name|CallbackHandler
name|callback
decl_stmt|;
name|LoginTester
parameter_list|(
name|CountDownLatch
name|start
parameter_list|,
name|CountDownLatch
name|finished
parameter_list|,
name|BlockingQueue
argument_list|<
name|Exception
argument_list|>
name|errors
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|)
block|{
name|this
operator|.
name|finished
operator|=
name|finished
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|callback
operator|=
name|callbackHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|Subject
name|subject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|PropertiesLoginModule
name|module
init|=
operator|new
name|PropertiesLoginModule
argument_list|()
decl_stmt|;
name|module
operator|.
name|initialize
argument_list|(
name|subject
argument_list|,
name|callback
argument_list|,
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|module
operator|.
name|login
argument_list|()
expr_stmt|;
name|module
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|offer
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|finished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|createUsers
argument_list|()
expr_stmt|;
name|createGroups
argument_list|()
expr_stmt|;
name|options
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"reload"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Used to simplify reproduction of the
comment|// race condition
name|options
operator|.
name|put
argument_list|(
literal|"org.apache.activemq.jaas.properties.user"
argument_list|,
name|USERS_FILE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"org.apache.activemq.jaas.properties.group"
argument_list|,
name|GROUPS_FILE
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"baseDir"
argument_list|,
name|temp
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|errors
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|Exception
argument_list|>
argument_list|(
name|processorCount
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|processorCount
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|=
operator|new
name|JassCredentialCallbackHandler
argument_list|(
name|USERNAME
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|PropertiesLoginModule
operator|.
name|resetUsersAndGroupsCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|raceConditionInUsersAndGroupsLoading
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|FileNotFoundException
throws|,
name|IOException
block|{
comment|// Brute force approach to increase the likelihood of the race condition occurring
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25000
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|CountDownLatch
name|start
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|finished
init|=
operator|new
name|CountDownLatch
argument_list|(
name|processorCount
argument_list|()
argument_list|)
decl_stmt|;
name|prepareLoginThreads
argument_list|(
name|start
argument_list|,
name|finished
argument_list|)
expr_stmt|;
comment|// Releases every login thread simultaneously to increase our chances of
comment|// encountering the race condition
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|finished
operator|.
name|await
argument_list|()
expr_stmt|;
if|if
condition|(
name|isRaceConditionDetected
argument_list|()
condition|)
block|{
name|e
operator|.
name|addError
argument_list|(
operator|new
name|AssertionError
argument_list|(
literal|"At least one race condition in PropertiesLoginModule "
operator|+
literal|"has been encountered. Please examine the "
operator|+
literal|"following stack traces for more details:"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Exception
name|exception
range|:
name|errors
control|)
block|{
name|e
operator|.
name|addError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
specifier|private
name|boolean
name|isRaceConditionDetected
parameter_list|()
block|{
return|return
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|private
name|void
name|prepareLoginThreads
parameter_list|(
specifier|final
name|CountDownLatch
name|start
parameter_list|,
specifier|final
name|CountDownLatch
name|finished
parameter_list|)
block|{
for|for
control|(
name|int
name|processor
init|=
literal|1
init|;
name|processor
operator|<=
name|processorCount
argument_list|()
operator|*
literal|2
condition|;
name|processor
operator|++
control|)
block|{
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|LoginTester
argument_list|(
name|start
argument_list|,
name|finished
argument_list|,
name|errors
argument_list|,
name|options
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|processorCount
parameter_list|()
block|{
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
return|;
block|}
specifier|private
name|void
name|store
parameter_list|(
name|Properties
name|from
parameter_list|,
name|File
name|to
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|FileOutputStream
name|output
init|=
operator|new
name|FileOutputStream
argument_list|(
name|to
argument_list|)
decl_stmt|;
try|try
block|{
name|from
operator|.
name|store
argument_list|(
name|output
argument_list|,
literal|"Generated by "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createGroups
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Properties
name|groups
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|groups
operator|.
name|put
argument_list|(
literal|"group"
operator|+
name|i
argument_list|,
literal|"first,second,third"
argument_list|)
expr_stmt|;
block|}
name|store
argument_list|(
name|groups
argument_list|,
name|temp
operator|.
name|newFile
argument_list|(
name|GROUPS_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createUsers
parameter_list|()
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|Properties
name|users
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|users
operator|.
name|put
argument_list|(
name|USERNAME
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|users
operator|.
name|put
argument_list|(
literal|"second"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|users
operator|.
name|put
argument_list|(
literal|"third"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|users
argument_list|,
name|temp
operator|.
name|newFile
argument_list|(
name|USERS_FILE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

