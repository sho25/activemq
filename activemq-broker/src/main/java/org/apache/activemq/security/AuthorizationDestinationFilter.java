begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_comment
comment|/**  * Authorizes addSubscription calls.  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationDestinationFilter
extends|extends
name|DestinationFilter
block|{
specifier|private
specifier|final
name|AuthorizationBroker
name|broker
decl_stmt|;
specifier|public
name|AuthorizationDestinationFilter
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|AuthorizationBroker
name|broker
parameter_list|)
block|{
name|super
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|)
throws|throws
name|Exception
block|{
comment|// authorize subscription
specifier|final
name|SecurityContext
name|securityContext
init|=
name|broker
operator|.
name|checkSecurityContext
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|AuthorizationMap
name|authorizationMap
init|=
name|broker
operator|.
name|getAuthorizationMap
argument_list|()
decl_stmt|;
comment|// use the destination being filtered, instead of the destination from the consumerinfo in the subscription
comment|// since that could be a wildcard destination
specifier|final
name|ActiveMQDestination
name|destination
init|=
name|next
operator|.
name|getActiveMQDestination
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|allowedACLs
decl_stmt|;
if|if
condition|(
operator|!
name|destination
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|allowedACLs
operator|=
name|authorizationMap
operator|.
name|getReadACLs
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allowedACLs
operator|=
name|authorizationMap
operator|.
name|getTempDestinationReadACLs
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|securityContext
operator|.
name|isBrokerContext
argument_list|()
operator|&&
name|allowedACLs
operator|!=
literal|null
operator|&&
operator|!
name|securityContext
operator|.
name|isInOneOf
argument_list|(
name|allowedACLs
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User "
operator|+
name|securityContext
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to read from: "
operator|+
name|destination
argument_list|)
throw|;
block|}
name|super
operator|.
name|addSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

