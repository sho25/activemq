begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|PrefetchSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopicInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|MQTTProtocolConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|MQTTProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|MQTTSubscription
import|;
end_import

begin_comment
comment|/**  * Abstract implementation of the {@link MQTTSubscriptionStrategy} interface providing  * the base functionality that is common to most implementations.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMQTTSubscriptionStrategy
implements|implements
name|MQTTSubscriptionStrategy
implements|,
name|BrokerServiceAware
block|{
specifier|protected
name|MQTTProtocolConverter
name|protocol
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|MQTTProtocolConverter
name|protocol
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|setProtocolConverter
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProtocolConverter
parameter_list|(
name|MQTTProtocolConverter
name|parent
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|MQTTProtocolConverter
name|getProtocolConverter
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onReSubscribe
parameter_list|(
name|MQTTSubscription
name|mqttSubscription
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|String
name|topicName
init|=
name|mqttSubscription
operator|.
name|getTopicName
argument_list|()
decl_stmt|;
comment|// get TopicRegion
name|RegionBroker
name|regionBroker
decl_stmt|;
try|try
block|{
name|regionBroker
operator|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Error subscribing to "
operator|+
name|topicName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|TopicRegion
name|topicRegion
init|=
operator|(
name|TopicRegion
operator|)
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
decl_stmt|;
specifier|final
name|ConsumerInfo
name|consumerInfo
init|=
name|mqttSubscription
operator|.
name|getConsumerInfo
argument_list|()
decl_stmt|;
specifier|final
name|ConsumerId
name|consumerId
init|=
name|consumerInfo
operator|.
name|getConsumerId
argument_list|()
decl_stmt|;
comment|// use actual client id used to create connection to lookup connection
comment|// context
specifier|final
name|String
name|connectionInfoClientId
init|=
name|protocol
operator|.
name|getClientId
argument_list|()
decl_stmt|;
specifier|final
name|ConnectionContext
name|connectionContext
init|=
name|regionBroker
operator|.
name|getConnectionContext
argument_list|(
name|connectionInfoClientId
argument_list|)
decl_stmt|;
comment|// get all matching Topics
specifier|final
name|Set
argument_list|<
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
argument_list|>
name|matchingDestinations
init|=
name|topicRegion
operator|.
name|getDestinations
argument_list|(
name|mqttSubscription
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
name|dest
range|:
name|matchingDestinations
control|)
block|{
comment|// recover retroactive messages for matching subscription
for|for
control|(
name|Subscription
name|subscription
range|:
name|dest
operator|.
name|getConsumers
argument_list|()
control|)
block|{
if|if
condition|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|equals
argument_list|(
name|consumerId
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|dest
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
condition|)
block|{
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
operator|)
name|dest
operator|)
operator|.
name|recoverRetroactiveMessages
argument_list|(
name|connectionContext
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|instanceof
name|VirtualTopicInterceptor
condition|)
block|{
operator|(
operator|(
name|VirtualTopicInterceptor
operator|)
name|dest
operator|)
operator|.
name|getTopic
argument_list|()
operator|.
name|recoverRetroactiveMessages
argument_list|(
name|connectionContext
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subscription
operator|instanceof
name|PrefetchSubscription
condition|)
block|{
comment|// request dispatch for prefetch subs
name|PrefetchSubscription
name|prefetchSubscription
init|=
operator|(
name|PrefetchSubscription
operator|)
name|subscription
decl_stmt|;
name|prefetchSubscription
operator|.
name|dispatchPending
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Error recovering retained messages for "
operator|+
name|dest
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|e
argument_list|)
throw|;
block|}
break|break;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ActiveMQDestination
name|onSend
parameter_list|(
name|String
name|topicName
parameter_list|)
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|topicName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|onSend
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
name|destination
operator|.
name|getPhysicalName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isControlTopic
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
name|destination
operator|.
name|getPhysicalName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

