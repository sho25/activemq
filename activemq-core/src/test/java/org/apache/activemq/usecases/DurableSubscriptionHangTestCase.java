begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|DurableSubscriptionHangTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableSubscriptionHangTestCase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|String
name|brokerName
init|=
literal|"DurableSubscriptionHangTestCase"
decl_stmt|;
specifier|final
specifier|static
name|String
name|clientID
init|=
literal|"myId"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|topicName
init|=
literal|"myTopic"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|durableSubName
init|=
literal|"mySub"
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|brokerStop
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHanging
parameter_list|()
throws|throws
name|Exception
block|{
name|registerDurableSubscription
argument_list|()
expr_stmt|;
name|produceExpiredAndOneNonExpiredMessages
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// make sure messages are expired
name|Message
name|message
init|=
name|collectMessagesFromDurableSubscriptionForOneMinute
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got message:"
operator|+
name|message
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to read unexpired message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|produceExpiredAndOneNonExpiredMessages
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://"
operator|+
name|brokerName
argument_list|)
decl_stmt|;
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|TopicSession
name|session
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40000
condition|;
name|i
operator|++
control|)
block|{
name|sendRandomMessage
argument_list|(
name|session
argument_list|,
name|producer
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sendRandomMessage
argument_list|(
name|session
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"produceExpiredAndOneNonExpiredMessages done"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerDurableSubscription
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://"
operator|+
name|brokerName
argument_list|)
decl_stmt|;
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
name|TopicSession
name|topicSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|topicSession
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|durableSubscriber
init|=
name|topicSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|durableSubName
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|durableSubscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Durable Sub Registered"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|collectMessagesFromDurableSubscriptionForOneMinute
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://"
operator|+
name|brokerName
argument_list|)
decl_stmt|;
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
name|TopicSession
name|topicSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|topicSession
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|TopicSubscriber
name|subscriber
init|=
name|topicSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|durableSubName
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"About to receive messages"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|subscriber
operator|.
name|receive
argument_list|(
literal|120000
argument_list|)
decl_stmt|;
name|subscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"collectMessagesFromDurableSubscriptionForOneMinute done"
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|private
name|void
name|sendRandomMessage
parameter_list|(
name|TopicSession
name|session
parameter_list|,
name|MessageProducer
name|producer
parameter_list|)
throws|throws
name|JMSException
block|{
name|TextMessage
name|textMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|textMessage
operator|.
name|setText
argument_list|(
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|500
argument_list|,
literal|"abcdefghijklmnopqrstuvwxyz"
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|textMessage
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

