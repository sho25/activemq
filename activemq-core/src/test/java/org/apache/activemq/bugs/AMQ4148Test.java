begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DemandForwardingBridgeSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * This test demonstrates a bug in {@link DemandForwardingBridgeSupport} whereby  * a static subscription from broker1 to broker2 is forwarded to broker3 even  * though the network TTL is 1. This results in duplicate subscriptions on  * broker3.  */
end_comment

begin_class
specifier|public
class|class
name|AMQ4148Test
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a hub-and-spoke network where each hub-spoke pair share
comment|// messages on a test queue.
name|BrokerService
name|hub
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(vm://hub)/hub?persistent=false"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BrokerService
index|[]
name|spokes
init|=
operator|new
name|BrokerService
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spokes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|spokes
index|[
name|i
index|]
operator|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(vm://spoke"
operator|+
name|i
operator|+
literal|")/spoke"
operator|+
name|i
operator|+
literal|"?persistent=false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startAllBrokers
argument_list|()
expr_stmt|;
name|ActiveMQDestination
name|testQueue
init|=
name|createDestination
argument_list|(
name|AMQ4148Test
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".queue"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|NetworkConnector
index|[]
name|ncs
init|=
operator|new
name|NetworkConnector
index|[
name|spokes
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spokes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|NetworkConnector
name|nc
init|=
name|bridgeBrokers
argument_list|(
literal|"hub"
argument_list|,
literal|"spoke"
operator|+
name|i
argument_list|)
decl_stmt|;
name|nc
operator|.
name|setNetworkTTL
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setConduitSubscriptions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setStaticallyIncludedDestinations
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testQueue
argument_list|)
argument_list|)
expr_stmt|;
name|nc
operator|.
name|start
argument_list|()
expr_stmt|;
name|ncs
index|[
name|i
index|]
operator|=
name|nc
expr_stmt|;
block|}
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
comment|// Pause to allow subscriptions to be created.
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// Verify that the hub has a subscription from each spoke, but that each
comment|// spoke has a single subscription from the hub (since the network TTL is 1).
specifier|final
name|Destination
name|hubTestQueue
init|=
name|hub
operator|.
name|getDestination
argument_list|(
name|testQueue
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expecting {"
operator|+
name|spokes
operator|.
name|length
operator|+
literal|"} consumer but was {"
operator|+
name|hubTestQueue
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"}"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|spokes
operator|.
name|length
operator|==
name|hubTestQueue
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now check each spoke has exactly one consumer on the Queue.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Destination
name|spokeTestQueue
init|=
name|spokes
index|[
name|i
index|]
operator|.
name|getDestination
argument_list|(
name|testQueue
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|spokeTestQueue
operator|.
name|getConsumers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NetworkConnector
name|nc
range|:
name|ncs
control|)
block|{
name|nc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

