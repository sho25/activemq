begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Hiram Chirino  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Channel
import|;
end_import

begin_comment
comment|/**  * A SynchChannelFilter can be used as a filter another {@see org.activeio.SynchChannel}  * Most {@see org.activeio.SynchChannel} that are not directly accessing the network will   * extends the SynchChannelFilter since they act as a filter between the client and the network.  *      * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|FilterSyncChannelServer
implements|implements
name|SyncChannelServer
block|{
specifier|private
specifier|final
name|SyncChannelServer
name|next
decl_stmt|;
specifier|public
name|FilterSyncChannelServer
parameter_list|(
name|SyncChannelServer
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Disposable#dispose()      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|next
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Service#start()      */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|next
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Service#stop()      */
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|next
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the next.      */
specifier|public
name|SyncChannelServer
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
comment|/**      * @see org.activeio.packet.sync.SyncChannelServer#accept(long)      */
specifier|public
name|Channel
name|accept
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|next
operator|.
name|accept
argument_list|(
name|timeout
argument_list|)
return|;
block|}
comment|/**      * @see org.activeio.ChannelServer#getBindURI()      */
specifier|public
name|URI
name|getBindURI
parameter_list|()
block|{
return|return
name|next
operator|.
name|getBindURI
argument_list|()
return|;
block|}
comment|/**      * @see org.activeio.ChannelServer#getConnectURI()      */
specifier|public
name|URI
name|getConnectURI
parameter_list|()
block|{
return|return
name|next
operator|.
name|getConnectURI
argument_list|()
return|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|next
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|next
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

