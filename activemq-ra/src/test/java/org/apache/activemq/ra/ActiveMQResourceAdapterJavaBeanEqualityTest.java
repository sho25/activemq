begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQResourceAdapterJavaBeanEqualityTest
block|{
specifier|private
name|ActiveMQResourceAdapter
name|raOne
decl_stmt|;
specifier|private
name|ActiveMQResourceAdapter
name|raTwo
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|raOne
operator|=
operator|new
name|ActiveMQResourceAdapter
argument_list|()
expr_stmt|;
name|raTwo
operator|=
operator|new
name|ActiveMQResourceAdapter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSelfEquality
parameter_list|()
block|{
name|assertEquality
argument_list|(
name|raOne
argument_list|,
name|raOne
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testEmptyEquality
parameter_list|()
block|{
name|assertEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNullEqualityFailure
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|raOne
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testServerUrlEquality
parameter_list|()
block|{
name|raOne
operator|.
name|setServerUrl
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setServerUrl
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|assertEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testServerUrlInequality
parameter_list|()
block|{
name|raOne
operator|.
name|setServerUrl
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setServerUrl
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|assertNonEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testServerUrlInequalityDifferentCase
parameter_list|()
block|{
name|raOne
operator|.
name|setServerUrl
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setServerUrl
argument_list|(
literal|"ONE"
argument_list|)
expr_stmt|;
name|assertNonEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNullServerUrlInequality
parameter_list|()
block|{
name|raOne
operator|.
name|setServerUrl
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setServerUrl
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNonEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBrokerXMLConfigEquality
parameter_list|()
block|{
name|raOne
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|assertEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBrokerXMLConfigInequality
parameter_list|()
block|{
name|raOne
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|assertNonEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBrokerXMLConfigInequalityDifferentCase
parameter_list|()
block|{
name|raOne
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|"ONE"
argument_list|)
expr_stmt|;
name|assertNonEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNullBrokerXMLConfigInequality
parameter_list|()
block|{
name|raOne
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setBrokerXmlConfig
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNonEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testPasswordNotPartOfEquality
parameter_list|()
block|{
name|raOne
operator|.
name|setClientid
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setClientid
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|raOne
operator|.
name|setPassword
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|raTwo
operator|.
name|setPassword
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquality
argument_list|(
name|raOne
argument_list|,
name|raTwo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEquality
parameter_list|(
name|ActiveMQResourceAdapter
name|leftRa
parameter_list|,
name|ActiveMQResourceAdapter
name|rightRa
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"ActiveMQResourceAdapters are not equal"
argument_list|,
name|leftRa
operator|.
name|equals
argument_list|(
name|rightRa
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ActiveMQResourceAdapters are not equal"
argument_list|,
name|rightRa
operator|.
name|equals
argument_list|(
name|leftRa
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"HashCodes are not equal"
argument_list|,
name|leftRa
operator|.
name|hashCode
argument_list|()
operator|==
name|rightRa
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNonEquality
parameter_list|(
name|ActiveMQResourceAdapter
name|leftRa
parameter_list|,
name|ActiveMQResourceAdapter
name|rightRa
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"ActiveMQResourceAdapters are equal"
argument_list|,
name|leftRa
operator|.
name|equals
argument_list|(
name|rightRa
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ActiveMQResourceAdapters are equal"
argument_list|,
name|rightRa
operator|.
name|equals
argument_list|(
name|leftRa
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HashCodes are equal"
argument_list|,
name|leftRa
operator|.
name|hashCode
argument_list|()
operator|==
name|rightRa
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

