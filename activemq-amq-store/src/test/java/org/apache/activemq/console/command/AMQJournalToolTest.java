begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQJournalTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Testcase for AMQ-3665. Tests the AMQJournalTool, which uses Velocity to   * render the output.  *   * This test checks that auditing a journal file with 2000 msgs stored  * does not increase the introspectionCache of the VelocityContext beyond 20  * entries. This is the case when template caching is turned on in Velocity.   * If Velocity template caching is not turned on in @see CustomResourceLoader.java,   * then auditing a large journal fills up the Velocity's context internal   * introspectionCache HashMap, until the JVM eventually runs out of memory.   * See<a href="https://issues.apache.org/jira/browse/AMQ-3665">AMQ-3665</a>   * for more details.  *   * This test does the following  * 1) start embedded broker using AMQ store  * 2) start producer to send 2000 msgs   * 3) start consumer to receive all 2000 msgs  * 4) run journal-audit on the store  * 5) verify the VelocityContext introspectionCache size has not grown> 20   *    entries, as only 3 template instances need to be cached.  *   * @author tmielke  */
end_comment

begin_class
specifier|public
class|class
name|AMQJournalToolTest
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQJournalToolTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NUM_MSGS
init|=
literal|2000
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DATA_DIR
init|=
literal|"target/activemq-data/"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DESTNAME
init|=
literal|"AMQ-3665"
decl_stmt|;
comment|// allow other threads to mark this test as failed.
specifier|protected
specifier|static
name|String
name|failMsg
init|=
literal|null
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAMQJournalTool
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 1. start broker
name|this
operator|.
name|startBroker
argument_list|()
expr_stmt|;
comment|// 2. send a few persistent msgs to broker
comment|// create producer and consumer threads, pass in a context object
name|Consumer
name|consumerWorker
init|=
operator|new
name|Consumer
argument_list|()
decl_stmt|;
name|Thread
name|consumer
init|=
operator|new
name|Thread
argument_list|(
name|consumerWorker
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait on worker to establish subscriptions so counts aren't off
synchronized|synchronized
init|(
name|consumerWorker
operator|.
name|init
init|)
block|{
name|consumerWorker
operator|.
name|init
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting producer"
argument_list|)
expr_stmt|;
name|Thread
name|producer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Producer
argument_list|()
argument_list|)
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//wait for threads to finish
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for producer and consumer to join."
argument_list|)
expr_stmt|;
name|producer
operator|.
name|join
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|join
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Producer and Consumer finished."
argument_list|)
expr_stmt|;
comment|// check no other thread indicated a problem
name|assertNull
argument_list|(
name|failMsg
argument_list|)
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
comment|// 3. start AMQJournalReaderTool and read the journal
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting journal audit."
argument_list|)
expr_stmt|;
name|AMQJournalTool
name|consumerTool
init|=
operator|new
name|AMQJournalTool
argument_list|()
decl_stmt|;
name|consumerTool
operator|.
name|getDirs
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|DATA_DIR
operator|+
literal|"Broker1/journal/"
argument_list|)
argument_list|)
expr_stmt|;
name|consumerTool
operator|.
name|execute
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"journal audit finished."
argument_list|)
expr_stmt|;
comment|// 4. verify cacheSize of VelocityContext internal introspectionCache
name|int
name|cacheSize
init|=
name|getVelocityIntrospectionCacheSize
argument_list|(
name|consumerTool
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"VelocityContext introspectionCacheSize is of size "
operator|+
name|cacheSize
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"VelocityContext introspectionCache too high: "
operator|+
name|cacheSize
operator|+
literal|"It may not have template caching turned on in Velocity (AMQ-3665)."
argument_list|,
name|cacheSize
operator|<
literal|20
argument_list|)
expr_stmt|;
name|consumerTool
operator|=
literal|null
expr_stmt|;
block|}
comment|/**       * Creates a broker instance but does not start it.      *       * @param brokerUri - transport uri of broker      * @param brokerName - name for the broker      * @return a BrokerService instance with transport uri and broker name set      * @throws Exception      */
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|URI
name|brokerUri
parameter_list|,
name|String
name|brokerName
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|brokerUri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectory
argument_list|(
name|DATA_DIR
argument_list|)
expr_stmt|;
name|PersistenceAdapter
name|store
init|=
operator|new
name|AMQPersistenceAdapter
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|store
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
comment|/**      * Starts all broker instances.      *           * @throws Exception      */
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker started."
argument_list|)
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|options
init|=
literal|"?persistent=true&useJmx=false&deleteAllMessagesOnStartup=true"
decl_stmt|;
name|broker
operator|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)"
operator|+
name|options
argument_list|)
argument_list|,
literal|"Broker1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
operator|&&
name|broker
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker stopped."
argument_list|)
expr_stmt|;
block|}
else|else
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker already stopped."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|milliSecondTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliSecondTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|ignored
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the size of the VelocityContext internal introspectionCache      * (HashMap) that is used by the AMQ journal reader.       * As the VelocityContext as well as its internal introspectionCache      * has only private access, we use reflection APIs to get the cache Size.      *       * @param reader - the journal reader instance that was used to read the       * 	journal      * @return - size of the introspectionCache      */
specifier|public
name|int
name|getVelocityIntrospectionCacheSize
parameter_list|(
name|AMQJournalTool
name|reader
parameter_list|)
block|{
comment|// First get the VelocityContext from the journal reader
name|Object
name|context
init|=
literal|null
decl_stmt|;
name|Field
name|fields
index|[]
init|=
name|reader
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking field "
operator|+
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"context"
operator|.
name|equals
argument_list|(
name|fields
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|fields
index|[
name|i
index|]
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|context
operator|=
name|fields
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|reader
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"IllegalAccessException accessing 'context'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Next get the introspectionCache member of VelocityContext
name|Object
name|cache
init|=
literal|null
decl_stmt|;
name|Class
name|parent
init|=
name|context
operator|.
name|getClass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"org.apache.velocity.context.InternalContextBase"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unable to retrieve introspectionCache via reflection APIs"
argument_list|)
expr_stmt|;
block|}
name|Field
name|fields2
index|[]
init|=
name|parent
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields2
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checking field "
operator|+
name|fields2
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"introspectionCache"
operator|.
name|equals
argument_list|(
name|fields2
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|fields2
index|[
name|i
index|]
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cache
operator|=
name|fields2
index|[
name|i
index|]
operator|.
name|get
argument_list|(
name|context
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"IllegalAccessException accessing 'introspectionCache'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
operator|(
name|HashMap
operator|)
name|cache
operator|)
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**  * Message producer running as a separate thread.  *  */
class|class
name|Producer
implements|implements
name|Runnable
block|{
specifier|private
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Producer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|Producer
parameter_list|()
block|{             }
comment|/**      * Connect to broker and send messages.      */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|MessageProducer
name|producer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:(tcp://localhost:61616)"
argument_list|)
decl_stmt|;
name|connection
operator|=
name|amq
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
argument_list|()
block|{
specifier|public
name|void
name|onException
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create a Session
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|// Create the destination (Topic or Queue)
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|AMQJournalToolTest
operator|.
name|DESTNAME
argument_list|)
decl_stmt|;
comment|// Create a MessageProducer from the Session to the Topic or Queue
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|long
name|counter
init|=
literal|0
decl_stmt|;
comment|// Create message
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"Hello world! From: "
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
literal|" : "
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|this
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|counter
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|stringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// send messages
name|log
operator|.
name|info
argument_list|(
literal|"Sending "
operator|+
name|AMQJournalToolTest
operator|.
name|NUM_MSGS
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AMQJournalToolTest
operator|.
name|NUM_MSGS
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sent message: "
operator|+
name|message
operator|.
name|hashCode
argument_list|()
operator|+
literal|" : "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"sent "
operator|+
name|counter
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|AMQJournalToolTest
operator|.
name|failMsg
operator|=
name|ex
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|producer
operator|!=
literal|null
condition|)
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Problem closing down JMS objects: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|AMQJournalToolTest
operator|.
name|failMsg
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**     *  * Message consumer running as a separate thread.  *   *  */
class|class
name|Consumer
implements|implements
name|Runnable
block|{
specifier|public
name|Object
name|init
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|Consumer
parameter_list|()
block|{             }
comment|/**      * Connect to broker and receive messages.      */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
comment|// ?randomize=false
name|String
name|url
init|=
literal|"failover:(tcp://localhost:61616)"
decl_stmt|;
try|try
block|{
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|connection
operator|=
name|amq
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
argument_list|()
block|{
specifier|public
name|void
name|onException
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create a Session
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|// Create the destination (Topic or Queue)
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|AMQJournalToolTest
operator|.
name|DESTNAME
argument_list|)
decl_stmt|;
comment|//Create a MessageConsumer from the Session to the Topic or Queue
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|long
name|counter
init|=
literal|0
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Consumer connected to "
operator|+
name|url
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|init
init|)
block|{
name|init
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// Wait for a message
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AMQJournalToolTest
operator|.
name|NUM_MSGS
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message2
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
if|if
condition|(
name|message2
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message2
decl_stmt|;
name|String
name|text
init|=
name|textMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Received: "
operator|+
name|text
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Received message of unsupported type. Expecting TextMessage. "
operator|+
name|message2
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"received "
operator|+
name|counter
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Received all "
operator|+
name|AMQJournalToolTest
operator|.
name|NUM_MSGS
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in Consumer: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|AMQJournalToolTest
operator|.
name|failMsg
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error closing down JMS objects: "
operator|+
name|ex
argument_list|)
expr_stmt|;
name|AMQJournalToolTest
operator|.
name|failMsg
operator|=
name|ex
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

