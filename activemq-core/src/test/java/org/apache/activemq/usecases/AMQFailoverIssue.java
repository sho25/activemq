begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_class
specifier|public
class|class
name|AMQFailoverIssue
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|URL1
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE1_NAME
init|=
literal|"test.queue.1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CONSUMERS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PRODUCERS
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MESSAGE_TO_SEND
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TOTAL_MESSAGES
init|=
name|MAX_PRODUCERS
operator|*
name|NUM_MESSAGE_TO_SEND
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|USE_FAILOVER
init|=
literal|true
decl_stmt|;
specifier|private
name|AtomicInteger
name|messageCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
name|CountDownLatch
name|doneLatch
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|// This should fail with incubator-activemq-fuse-4.1.0.5
specifier|public
name|void
name|testFailoverIssue
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService1
decl_stmt|;
name|ActiveMQConnectionFactory
name|acf
decl_stmt|;
name|PooledConnectionFactory
name|pcf
decl_stmt|;
name|DefaultMessageListenerContainer
name|container1
init|=
literal|null
decl_stmt|;
try|try
block|{
name|brokerService1
operator|=
name|createBrokerService
argument_list|(
literal|"broker1"
argument_list|,
name|URL1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|start
argument_list|()
expr_stmt|;
name|acf
operator|=
name|createConnectionFactory
argument_list|(
name|URL1
argument_list|,
name|USE_FAILOVER
argument_list|)
expr_stmt|;
name|pcf
operator|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|acf
argument_list|)
expr_stmt|;
comment|// Only listen on the first queue.. let the 2nd queue fill up.
name|doneLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|TOTAL_MESSAGES
argument_list|)
expr_stmt|;
name|container1
operator|=
name|createDefaultMessageListenerContainer
argument_list|(
name|acf
argument_list|,
operator|new
name|TestMessageListener1
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QUEUE1_NAME
argument_list|)
expr_stmt|;
name|container1
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
specifier|final
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_PRODUCERS
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|PooledProducerTask
argument_list|(
name|pcf
argument_list|,
name|QUEUE1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Wait for all message to arrive.
name|assertTrue
argument_list|(
name|doneLatch
operator|.
name|await
argument_list|(
literal|45
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Thread.sleep(30000);
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TOTAL_MESSAGES
argument_list|,
name|messageCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|container1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|container1
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|container1
operator|=
literal|null
expr_stmt|;
name|brokerService1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|BrokerService
name|createBrokerService
parameter_list|(
specifier|final
name|String
name|brokerName
parameter_list|,
specifier|final
name|String
name|uri1
parameter_list|,
specifier|final
name|String
name|uri2
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|UsageManager
name|memoryManager
init|=
operator|new
name|UsageManager
argument_list|()
decl_stmt|;
name|memoryManager
operator|.
name|setLimit
argument_list|(
literal|5000000
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setMemoryManager
argument_list|(
name|memoryManager
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
name|policyEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|PolicyEntry
name|entry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
comment|// entry.setQueue(QUEUE1_NAME);
name|entry
operator|.
name|setMemoryLimit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|policyEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
specifier|final
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|policyEntries
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
specifier|final
name|TransportConnector
name|tConnector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|tConnector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
name|uri1
argument_list|)
argument_list|)
expr_stmt|;
name|tConnector
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|tConnector
operator|.
name|setName
argument_list|(
name|brokerName
operator|+
literal|".transportConnector"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
name|tConnector
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri2
operator|!=
literal|null
condition|)
block|{
specifier|final
name|NetworkConnector
name|nc
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
literal|"static:"
operator|+
name|uri2
argument_list|)
argument_list|)
decl_stmt|;
name|nc
operator|.
name|setBridgeTempDestinations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addNetworkConnector
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
return|return
name|brokerService
return|;
block|}
specifier|public
name|DefaultMessageListenerContainer
name|createDefaultMessageListenerContainer
parameter_list|(
specifier|final
name|ConnectionFactory
name|acf
parameter_list|,
specifier|final
name|MessageListener
name|listener
parameter_list|,
specifier|final
name|String
name|queue
parameter_list|)
block|{
specifier|final
name|DefaultMessageListenerContainer
name|container
init|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
decl_stmt|;
name|container
operator|.
name|setConnectionFactory
argument_list|(
name|acf
argument_list|)
expr_stmt|;
name|container
operator|.
name|setDestinationName
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|container
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|container
operator|.
name|setSessionTransacted
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|container
operator|.
name|setSessionAcknowledgeMode
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|container
operator|.
name|setConcurrentConsumers
argument_list|(
name|MAX_CONSUMERS
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
specifier|public
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|(
specifier|final
name|String
name|url
parameter_list|,
specifier|final
name|boolean
name|useFailover
parameter_list|)
block|{
specifier|final
name|String
name|failoverUrl
init|=
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
decl_stmt|;
specifier|final
name|ActiveMQConnectionFactory
name|acf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|useFailover
condition|?
name|failoverUrl
else|:
name|url
argument_list|)
decl_stmt|;
name|acf
operator|.
name|setCopyMessageOnSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|acf
operator|.
name|setUseAsyncSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|acf
operator|.
name|setDispatchAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acf
operator|.
name|setUseCompression
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|acf
operator|.
name|setOptimizeAcknowledge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|acf
operator|.
name|setOptimizedMessageDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|acf
operator|.
name|setUseAsyncSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|acf
return|;
block|}
specifier|private
class|class
name|TestMessageListener1
implements|implements
name|MessageListener
block|{
specifier|private
specifier|final
name|long
name|waitTime
decl_stmt|;
specifier|public
name|TestMessageListener1
parameter_list|(
name|long
name|waitTime
parameter_list|)
block|{
name|this
operator|.
name|waitTime
operator|=
name|waitTime
expr_stmt|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
try|try
block|{
name|messageCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|doneLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|waitTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|PooledProducerTask
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|String
name|queueName
decl_stmt|;
specifier|private
specifier|final
name|PooledConnectionFactory
name|pcf
decl_stmt|;
specifier|public
name|PooledProducerTask
parameter_list|(
specifier|final
name|PooledConnectionFactory
name|pcf
parameter_list|,
specifier|final
name|String
name|queueName
parameter_list|)
block|{
name|this
operator|.
name|pcf
operator|=
name|pcf
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|JmsTemplate
name|jmsTemplate
init|=
operator|new
name|JmsTemplate
argument_list|(
name|pcf
argument_list|)
decl_stmt|;
name|jmsTemplate
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setExplicitQosEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setMessageIdEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setMessageTimestampEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
literal|2048
index|]
decl_stmt|;
specifier|final
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGE_TO_SEND
condition|;
name|i
operator|++
control|)
block|{
name|jmsTemplate
operator|.
name|send
argument_list|(
name|queueName
argument_list|,
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|BytesMessage
name|message
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"count"
argument_list|,
name|count
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"producer"
argument_list|,
literal|"pooled"
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

