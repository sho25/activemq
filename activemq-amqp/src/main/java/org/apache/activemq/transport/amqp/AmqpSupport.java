begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|DescribedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|UnsignedLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Coordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_comment
comment|/**  * Set of useful methods and definitions used in the AMQP protocol handling  */
end_comment

begin_class
specifier|public
class|class
name|AmqpSupport
block|{
comment|// Identification values used to locating JMS selector types.
specifier|public
specifier|static
specifier|final
name|UnsignedLong
name|JMS_SELECTOR_CODE
init|=
name|UnsignedLong
operator|.
name|valueOf
argument_list|(
literal|0x0000468C00000004L
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|JMS_SELECTOR_NAME
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"apache.org:selector-filter:string"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Object
index|[]
name|JMS_SELECTOR_FILTER_IDS
init|=
operator|new
name|Object
index|[]
block|{
name|JMS_SELECTOR_CODE
block|,
name|JMS_SELECTOR_NAME
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|UnsignedLong
name|NO_LOCAL_CODE
init|=
name|UnsignedLong
operator|.
name|valueOf
argument_list|(
literal|0x0000468C00000003L
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|NO_LOCAL_NAME
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"apache.org:no-local-filter:list"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Object
index|[]
name|NO_LOCAL_FILTER_IDS
init|=
operator|new
name|Object
index|[]
block|{
name|NO_LOCAL_CODE
block|,
name|NO_LOCAL_NAME
block|}
decl_stmt|;
comment|// Capabilities used to identify destination type in some requests.
specifier|public
specifier|static
specifier|final
name|Symbol
name|TEMP_QUEUE_CAPABILITY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"temporary-queue"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|TEMP_TOPIC_CAPABILITY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"temporary-topic"
argument_list|)
decl_stmt|;
comment|// Symbols used to announce connection information to remote peer.
specifier|public
specifier|static
specifier|final
name|Symbol
name|INVALID_FIELD
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"invalid-field"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|CONTAINER_ID
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"container-id"
argument_list|)
decl_stmt|;
comment|// Symbols used to announce connection information to remote peer.
specifier|public
specifier|static
specifier|final
name|Symbol
name|ANONYMOUS_RELAY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"ANONYMOUS-RELAY"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|QUEUE_PREFIX
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"queue-prefix"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|TOPIC_PREFIX
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"topic-prefix"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|CONNECTION_OPEN_FAILED
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"amqp:connection-establishment-failed"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|PRODUCT
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"product"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|VERSION
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|PLATFORM
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"platform"
argument_list|)
decl_stmt|;
comment|// Symbols used in configuration of newly opened links.
specifier|public
specifier|static
specifier|final
name|Symbol
name|COPY
init|=
name|Symbol
operator|.
name|getSymbol
argument_list|(
literal|"copy"
argument_list|)
decl_stmt|;
comment|// Lifetime policy symbols
specifier|public
specifier|static
specifier|final
name|Symbol
name|LIFETIME_POLICY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"lifetime-policy"
argument_list|)
decl_stmt|;
comment|/**      * Search for a given Symbol in a given array of Symbol object.      *      * @param symbols      *        the set of Symbols to search.      * @param key      *        the value to try and find in the Symbol array.      *      * @return true if the key is found in the given Symbol array.      */
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|Symbol
index|[]
name|symbols
parameter_list|,
name|Symbol
name|key
parameter_list|)
block|{
if|if
condition|(
name|symbols
operator|==
literal|null
operator|||
name|symbols
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|Symbol
name|symbol
range|:
name|symbols
control|)
block|{
if|if
condition|(
name|symbol
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Search for a particular filter using a set of known indentification values      * in the Map of filters.      *      * @param filters      *        The filters map that should be searched.      * @param filterIds      *        The aliases for the target filter to be located.      *      * @return the filter if found in the mapping or null if not found.      */
specifier|public
specifier|static
name|Map
operator|.
name|Entry
argument_list|<
name|Symbol
argument_list|,
name|DescribedType
argument_list|>
name|findFilter
parameter_list|(
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|filters
parameter_list|,
name|Object
index|[]
name|filterIds
parameter_list|)
block|{
if|if
condition|(
name|filterIds
operator|==
literal|null
operator|||
name|filterIds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid empty Filter Ids array passed: "
argument_list|)
throw|;
block|}
if|if
condition|(
name|filters
operator|==
literal|null
operator|||
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|filter
range|:
name|filters
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|getValue
argument_list|()
operator|instanceof
name|DescribedType
condition|)
block|{
name|DescribedType
name|describedType
init|=
operator|(
operator|(
name|DescribedType
operator|)
name|filter
operator|.
name|getValue
argument_list|()
operator|)
decl_stmt|;
name|Object
name|descriptor
init|=
name|describedType
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|filterId
range|:
name|filterIds
control|)
block|{
if|if
condition|(
name|descriptor
operator|.
name|equals
argument_list|(
name|filterId
argument_list|)
condition|)
block|{
return|return
operator|new
name|AbstractMap
operator|.
name|SimpleImmutableEntry
argument_list|<
name|Symbol
argument_list|,
name|DescribedType
argument_list|>
argument_list|(
name|filter
operator|.
name|getKey
argument_list|()
argument_list|,
name|describedType
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Conversion from Java ByteBuffer to a HawtBuf buffer.      *      * @param data      *        the ByteBuffer instance to convert.      *      * @return a new HawtBuf buffer converted from the given ByteBuffer.      */
specifier|public
specifier|static
name|Buffer
name|toBuffer
parameter_list|(
name|ByteBuffer
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Buffer
name|rc
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|isDirect
argument_list|()
condition|)
block|{
name|rc
operator|=
operator|new
name|Buffer
argument_list|(
name|data
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|get
argument_list|(
name|rc
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|=
operator|new
name|Buffer
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|data
operator|.
name|position
argument_list|(
name|data
operator|.
name|position
argument_list|()
operator|+
name|data
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * Given a long value, convert it to a byte array for marshalling.      *      * @param value      *        the value to convert.      *      * @return a new byte array that holds the big endian value of the long.      */
specifier|public
specifier|static
name|byte
index|[]
name|toBytes
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|data
return|;
block|}
comment|/**      * Converts a Binary value to a long assuming that the contained value is      * stored in Big Endian encoding.      *      * @param value      *        the Binary object whose payload is converted to a long.      *      * @return a long value constructed from the bytes of the Binary instance.      */
specifier|public
specifier|static
name|long
name|toLong
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
name|value
operator|.
name|getArray
argument_list|()
argument_list|,
name|value
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buffer
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|readLong
argument_list|()
return|;
block|}
comment|/**      * Given an AMQP endpoint, deduce the appropriate ActiveMQDestination type and create      * a new instance.  By default if the endpoint address does not carry the standard prefix      * value then we default to a Queue type destination.  If the endpoint is null or is an      * AMQP Coordinator type endpoint this method returns null to indicate no destination      * can be mapped.      *      * @param endpoint      *        the AMQP endpoint to construct an ActiveMQDestination from.      *      * @return a new ActiveMQDestination that best matches the address of the given endpoint      *      * @throws AmqpProtocolException if an error occurs while deducing the destination type.      */
specifier|public
specifier|static
name|ActiveMQDestination
name|createDestination
parameter_list|(
name|Object
name|endpoint
parameter_list|)
throws|throws
name|AmqpProtocolException
block|{
if|if
condition|(
name|endpoint
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|instanceof
name|Coordinator
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|endpoint
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Terminus
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Terminus
name|terminus
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Terminus
operator|)
name|endpoint
decl_stmt|;
if|if
condition|(
name|terminus
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
operator|||
name|terminus
operator|.
name|getAddress
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|terminus
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
condition|)
block|{
throw|throw
operator|new
name|AmqpProtocolException
argument_list|(
literal|"amqp:invalid-field"
argument_list|,
literal|"source address not set"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AmqpProtocolException
argument_list|(
literal|"amqp:invalid-field"
argument_list|,
literal|"target address not set"
argument_list|)
throw|;
block|}
block|}
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|terminus
operator|.
name|getAddress
argument_list|()
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected terminus type: "
operator|+
name|endpoint
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

