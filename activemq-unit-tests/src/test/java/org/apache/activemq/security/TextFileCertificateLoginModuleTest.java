begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXPrincipal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|CertificateLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|JaasCertificateCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|PropertiesLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|TextFileCertificateLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|StubX509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TextFileCertificateLoginModuleTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CERT_USERS_FILE_SMALL
init|=
literal|"cert-users-SMALL.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CERT_USERS_FILE_LARGE
init|=
literal|"cert-users-LARGE.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CERT_USERS_FILE_REGEXP
init|=
literal|"cert-users-REGEXP.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CERT_GROUPS_FILE
init|=
literal|"cert-groups.properties"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextFileCertificateLoginModuleTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_SUBJECTS
init|=
literal|10
decl_stmt|;
static|static
block|{
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.security.auth.login.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|URL
name|resource
init|=
name|TextFileCertificateLoginModuleTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"login.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|resource
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.auth.login.config"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|CertificateLoginModule
name|loginModule
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|loginModule
operator|=
operator|new
name|TextFileCertificateLoginModule
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|PropertiesLoader
operator|.
name|resetUsersAndGroupsCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithSMALLUsersFile
parameter_list|()
throws|throws
name|Exception
block|{
name|loginTest
argument_list|(
name|CERT_USERS_FILE_SMALL
argument_list|,
name|CERT_GROUPS_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithLARGEUsersFile
parameter_list|()
throws|throws
name|Exception
block|{
name|loginTest
argument_list|(
name|CERT_USERS_FILE_LARGE
argument_list|,
name|CERT_GROUPS_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithREGEXPUsersFile
parameter_list|()
throws|throws
name|Exception
block|{
name|loginTest
argument_list|(
name|CERT_USERS_FILE_REGEXP
argument_list|,
name|CERT_GROUPS_FILE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loginTest
parameter_list|(
name|String
name|usersFiles
parameter_list|,
name|String
name|groupsFile
parameter_list|)
throws|throws
name|LoginException
block|{
name|HashMap
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"org.apache.activemq.jaas.textfiledn.user"
argument_list|,
name|usersFiles
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"org.apache.activemq.jaas.textfiledn.group"
argument_list|,
name|groupsFile
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"reload"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|JaasCertificateCallbackHandler
index|[]
name|callbackHandlers
init|=
operator|new
name|JaasCertificateCallbackHandler
index|[
name|NUMBER_SUBJECTS
index|]
decl_stmt|;
name|Subject
index|[]
name|subjects
init|=
operator|new
name|Subject
index|[
name|NUMBER_SUBJECTS
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|callbackHandlers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|callbackHandlers
index|[
name|i
index|]
operator|=
name|getJaasCertificateCallbackHandler
argument_list|(
literal|"DN=TEST_USER_"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|outer
init|=
literal|0
init|;
name|outer
operator|<
literal|500
condition|;
name|outer
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_SUBJECTS
condition|;
name|i
operator|++
control|)
block|{
name|Subject
name|subject
init|=
name|doAuthenticate
argument_list|(
name|options
argument_list|,
name|callbackHandlers
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|subjects
index|[
name|i
index|]
operator|=
name|subject
expr_stmt|;
block|}
block|}
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|timeTaken
init|=
name|endTime
operator|-
name|startTime
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_SUBJECTS
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"subject is: "
operator|+
name|subjects
index|[
name|i
index|]
operator|.
name|getPrincipals
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|usersFiles
operator|+
literal|": Time taken is "
operator|+
name|timeTaken
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JaasCertificateCallbackHandler
name|getJaasCertificateCallbackHandler
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|JMXPrincipal
name|principal
init|=
operator|new
name|JMXPrincipal
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|new
name|StubX509Certificate
argument_list|(
name|principal
argument_list|)
decl_stmt|;
return|return
operator|new
name|JaasCertificateCallbackHandler
argument_list|(
operator|new
name|X509Certificate
index|[]
block|{
name|cert
block|}
argument_list|)
return|;
block|}
specifier|private
name|Subject
name|doAuthenticate
parameter_list|(
name|HashMap
name|options
parameter_list|,
name|JaasCertificateCallbackHandler
name|callbackHandler
parameter_list|)
throws|throws
name|LoginException
block|{
name|Subject
name|mySubject
init|=
operator|new
name|Subject
argument_list|()
decl_stmt|;
name|loginModule
operator|.
name|initialize
argument_list|(
name|mySubject
argument_list|,
name|callbackHandler
argument_list|,
literal|null
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|loginModule
operator|.
name|login
argument_list|()
expr_stmt|;
name|loginModule
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|mySubject
return|;
block|}
block|}
end_class

end_unit

