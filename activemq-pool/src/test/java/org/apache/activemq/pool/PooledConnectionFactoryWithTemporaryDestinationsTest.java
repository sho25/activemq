begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|PooledConnectionFactoryWithTemporaryDestinationsTest
extends|extends
name|TestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PooledConnectionFactoryWithTemporaryDestinationsTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|factory
decl_stmt|;
specifier|private
name|PooledConnectionFactory
name|pooledFactory
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"mock:"
operator|+
name|connector
operator|.
name|getConnectUri
argument_list|()
operator|+
literal|"?closeAsync=false"
argument_list|)
expr_stmt|;
name|pooledFactory
operator|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTemporaryQueueWithMultipleConnectionUsers
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|pooledConnection
init|=
literal|null
decl_stmt|;
name|Connection
name|pooledConnection2
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|Session
name|session2
init|=
literal|null
decl_stmt|;
name|Queue
name|tempQueue
init|=
literal|null
decl_stmt|;
name|Queue
name|normalQueue
init|=
literal|null
decl_stmt|;
name|pooledConnection
operator|=
name|pooledFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|pooledConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|tempQueue
operator|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created queue named: "
operator|+
name|tempQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countBrokerTemporaryQueues
argument_list|()
argument_list|)
expr_stmt|;
name|pooledConnection2
operator|=
name|pooledFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session2
operator|=
name|pooledConnection2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|normalQueue
operator|=
name|session2
operator|.
name|createQueue
argument_list|(
literal|"queue:FOO.TEST"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created queue named: "
operator|+
name|normalQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
comment|// didn't create a temp queue on pooledConnection2 so we should still have a temp queue
name|pooledConnection2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countBrokerTemporaryQueues
argument_list|()
argument_list|)
expr_stmt|;
comment|// after closing pooledConnection, where we created the temp queue, there should
comment|// be no temp queues left
name|pooledConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countBrokerTemporaryQueues
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTemporaryQueueLeakAfterConnectionClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|pooledConnection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|Queue
name|tempQueue
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|pooledConnection
operator|=
name|pooledFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|pooledConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|tempQueue
operator|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created queue named: "
operator|+
name|tempQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|pooledConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countBrokerTemporaryQueues
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTemporaryTopicLeakAfterConnectionClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|pooledConnection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|Topic
name|tempTopic
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|pooledConnection
operator|=
name|pooledFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|pooledConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|tempTopic
operator|=
name|session
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created topic named: "
operator|+
name|tempTopic
operator|.
name|getTopicName
argument_list|()
argument_list|)
expr_stmt|;
name|pooledConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countBrokerTemporaryTopics
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|countBrokerTemporaryQueues
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
operator|)
operator|.
name|getTempQueueRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|int
name|countBrokerTemporaryTopics
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
operator|)
operator|.
name|getTempTopicRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

