begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|auto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormatFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|InactivityIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|protocol
operator|.
name|AmqpProtocolVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|protocol
operator|.
name|MqttProtocolVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|protocol
operator|.
name|OpenWireProtocolVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|protocol
operator|.
name|ProtocolVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|protocol
operator|.
name|StompProtocolVerifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
operator|.
name|InitBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormatFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A TCP based implementation of {@link TransportServer}  */
end_comment

begin_class
specifier|public
class|class
name|AutoTcpTransportServer
extends|extends
name|TcpTransportServer
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AutoTcpTransportServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|wireFormatOptions
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|autoTransportOptions
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|enabledProtocols
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ProtocolVerifier
argument_list|>
name|protocolVerifiers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ProtocolVerifier
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
specifier|protected
name|int
name|maxConnectionThreadPoolSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|protected
name|int
name|protocolDetectionTimeOut
init|=
literal|30000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FactoryFinder
name|TRANSPORT_FACTORY_FINDER
init|=
operator|new
name|FactoryFinder
argument_list|(
literal|"META-INF/services/org/apache/activemq/transport/"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|TransportFactory
argument_list|>
name|transportFactories
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|TransportFactory
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FactoryFinder
name|WIREFORMAT_FACTORY_FINDER
init|=
operator|new
name|FactoryFinder
argument_list|(
literal|"META-INF/services/org/apache/activemq/wireformat/"
argument_list|)
decl_stmt|;
specifier|public
name|WireFormatFactory
name|findWireFormatFactory
parameter_list|(
name|String
name|scheme
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|WireFormatFactory
name|wff
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wff
operator|=
operator|(
name|WireFormatFactory
operator|)
name|WIREFORMAT_FACTORY_FINDER
operator|.
name|newInstance
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|wff
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|AutoTransportUtils
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|wff
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|scheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wff
operator|instanceof
name|OpenWireFormatFactory
condition|)
block|{
name|protocolVerifiers
operator|.
name|put
argument_list|(
name|AutoTransportUtils
operator|.
name|OPENWIRE
argument_list|,
operator|new
name|OpenWireProtocolVerifier
argument_list|(
operator|(
name|OpenWireFormatFactory
operator|)
name|wff
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|wff
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Could not create wire format factory for: "
operator|+
name|scheme
operator|+
literal|", reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|TransportFactory
name|findTransportFactory
parameter_list|(
name|String
name|scheme
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
throws|throws
name|IOException
block|{
name|scheme
operator|=
name|append
argument_list|(
name|scheme
argument_list|,
literal|"nio"
argument_list|)
expr_stmt|;
name|scheme
operator|=
name|append
argument_list|(
name|scheme
argument_list|,
literal|"ssl"
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheme
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scheme
operator|=
literal|"tcp"
expr_stmt|;
block|}
name|TransportFactory
name|tf
init|=
name|transportFactories
operator|.
name|get
argument_list|(
name|scheme
argument_list|)
decl_stmt|;
if|if
condition|(
name|tf
operator|==
literal|null
condition|)
block|{
comment|// Try to load if from a META-INF property.
try|try
block|{
name|tf
operator|=
operator|(
name|TransportFactory
operator|)
name|TRANSPORT_FACTORY_FINDER
operator|.
name|newInstance
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|tf
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
name|transportFactories
operator|.
name|put
argument_list|(
name|scheme
argument_list|,
name|tf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Transport scheme NOT recognized: ["
operator|+
name|scheme
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|tf
return|;
block|}
specifier|protected
name|String
name|append
parameter_list|(
name|String
name|currentScheme
parameter_list|,
name|String
name|scheme
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|getBindLocation
argument_list|()
operator|.
name|getScheme
argument_list|()
operator|.
name|contains
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|currentScheme
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentScheme
operator|+=
literal|"+"
expr_stmt|;
block|}
name|currentScheme
operator|+=
name|scheme
expr_stmt|;
block|}
return|return
name|currentScheme
return|;
block|}
comment|/**      * @param transportFactory      * @param location      * @param serverSocketFactory      * @throws IOException      * @throws URISyntaxException      */
specifier|public
name|AutoTcpTransportServer
parameter_list|(
name|TcpTransportFactory
name|transportFactory
parameter_list|,
name|URI
name|location
parameter_list|,
name|ServerSocketFactory
name|serverSocketFactory
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|enabledProtocols
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|super
argument_list|(
name|transportFactory
argument_list|,
name|location
argument_list|,
name|serverSocketFactory
argument_list|)
expr_stmt|;
comment|//Use an executor service here to handle new connections.  Setting the max number
comment|//of threads to the maximum number of connections the thread count isn't unbounded
name|service
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
name|maxConnectionThreadPoolSize
argument_list|,
name|maxConnectionThreadPoolSize
argument_list|,
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|//allow the thread pool to shrink if the max number of threads isn't needed
name|service
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
name|this
operator|.
name|enabledProtocols
operator|=
name|enabledProtocols
expr_stmt|;
name|initProtocolVerifiers
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxConnectionThreadPoolSize
parameter_list|()
block|{
return|return
name|maxConnectionThreadPoolSize
return|;
block|}
specifier|public
name|void
name|setMaxConnectionThreadPoolSize
parameter_list|(
name|int
name|maxConnectionThreadPoolSize
parameter_list|)
block|{
name|this
operator|.
name|maxConnectionThreadPoolSize
operator|=
name|maxConnectionThreadPoolSize
expr_stmt|;
name|service
operator|.
name|setCorePoolSize
argument_list|(
name|maxConnectionThreadPoolSize
argument_list|)
expr_stmt|;
name|service
operator|.
name|setMaximumPoolSize
argument_list|(
name|maxConnectionThreadPoolSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProtocolDetectionTimeOut
parameter_list|(
name|int
name|protocolDetectionTimeOut
parameter_list|)
block|{
name|this
operator|.
name|protocolDetectionTimeOut
operator|=
name|protocolDetectionTimeOut
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWireFormatFactory
parameter_list|(
name|WireFormatFactory
name|factory
parameter_list|)
block|{
name|super
operator|.
name|setWireFormatFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|initOpenWireProtocolVerifier
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initProtocolVerifiers
parameter_list|()
block|{
name|initOpenWireProtocolVerifier
argument_list|()
expr_stmt|;
if|if
condition|(
name|isAllProtocols
argument_list|()
operator|||
name|enabledProtocols
operator|.
name|contains
argument_list|(
name|AutoTransportUtils
operator|.
name|AMQP
argument_list|)
condition|)
block|{
name|protocolVerifiers
operator|.
name|put
argument_list|(
name|AutoTransportUtils
operator|.
name|AMQP
argument_list|,
operator|new
name|AmqpProtocolVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAllProtocols
argument_list|()
operator|||
name|enabledProtocols
operator|.
name|contains
argument_list|(
name|AutoTransportUtils
operator|.
name|STOMP
argument_list|)
condition|)
block|{
name|protocolVerifiers
operator|.
name|put
argument_list|(
name|AutoTransportUtils
operator|.
name|STOMP
argument_list|,
operator|new
name|StompProtocolVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAllProtocols
argument_list|()
operator|||
name|enabledProtocols
operator|.
name|contains
argument_list|(
name|AutoTransportUtils
operator|.
name|MQTT
argument_list|)
condition|)
block|{
name|protocolVerifiers
operator|.
name|put
argument_list|(
name|AutoTransportUtils
operator|.
name|MQTT
argument_list|,
operator|new
name|MqttProtocolVerifier
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initOpenWireProtocolVerifier
parameter_list|()
block|{
if|if
condition|(
name|isAllProtocols
argument_list|()
operator|||
name|enabledProtocols
operator|.
name|contains
argument_list|(
name|AutoTransportUtils
operator|.
name|OPENWIRE
argument_list|)
condition|)
block|{
name|OpenWireProtocolVerifier
name|owpv
decl_stmt|;
if|if
condition|(
name|wireFormatFactory
operator|instanceof
name|OpenWireFormatFactory
condition|)
block|{
name|owpv
operator|=
operator|new
name|OpenWireProtocolVerifier
argument_list|(
operator|(
name|OpenWireFormatFactory
operator|)
name|wireFormatFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|owpv
operator|=
operator|new
name|OpenWireProtocolVerifier
argument_list|(
operator|new
name|OpenWireFormatFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|protocolVerifiers
operator|.
name|put
argument_list|(
name|AutoTransportUtils
operator|.
name|OPENWIRE
argument_list|,
name|owpv
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isAllProtocols
parameter_list|()
block|{
return|return
name|enabledProtocols
operator|==
literal|null
operator|||
name|enabledProtocols
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|protected
specifier|final
name|ThreadPoolExecutor
name|service
decl_stmt|;
comment|/**      * This holds the initial buffer that has been read to detect the protocol.      */
specifier|public
name|InitBuffer
name|initBuffer
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|handleSocket
parameter_list|(
specifier|final
name|Socket
name|socket
parameter_list|)
block|{
specifier|final
name|AutoTcpTransportServer
name|server
init|=
name|this
decl_stmt|;
comment|//This needs to be done in a new thread because
comment|//the socket might be waiting on the client to send bytes
comment|//doHandleSocket can't complete until the protocol can be detected
name|service
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|server
operator|.
name|doHandleSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TransportInfo
name|configureTransport
parameter_list|(
specifier|final
name|TcpTransportServer
name|server
parameter_list|,
specifier|final
name|Socket
name|socket
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|InputStream
name|is
init|=
name|socket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|readBytes
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ByteBuffer
name|data
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
decl_stmt|;
comment|// We need to peak at the first 8 bytes of the buffer to detect the protocol
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
do|do
block|{
name|int
name|read
init|=
name|is
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|read
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Connection faild, stream is closed."
argument_list|)
throw|;
block|}
name|data
operator|.
name|put
argument_list|(
operator|(
name|byte
operator|)
name|read
argument_list|)
expr_stmt|;
name|readBytes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|readBytes
operator|.
name|get
argument_list|()
operator|<
literal|8
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Wait for protocolDetectionTimeOut if defined
if|if
condition|(
name|protocolDetectionTimeOut
operator|>
literal|0
condition|)
block|{
name|future
operator|.
name|get
argument_list|(
name|protocolDetectionTimeOut
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|data
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InactivityIOException
argument_list|(
literal|"Client timed out before wire format could be detected. "
operator|+
literal|" 8 bytes are required to detect the protocol but only: "
operator|+
name|readBytes
operator|+
literal|" were sent."
argument_list|)
throw|;
block|}
name|ProtocolInfo
name|protocolInfo
init|=
name|detectProtocol
argument_list|(
name|data
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|initBuffer
operator|=
operator|new
name|InitBuffer
argument_list|(
name|readBytes
operator|.
name|get
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|readBytes
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|initBuffer
operator|.
name|buffer
operator|.
name|put
argument_list|(
name|data
operator|.
name|array
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protocolInfo
operator|.
name|detectedTransportFactory
operator|instanceof
name|BrokerServiceAware
condition|)
block|{
operator|(
operator|(
name|BrokerServiceAware
operator|)
name|protocolInfo
operator|.
name|detectedTransportFactory
operator|)
operator|.
name|setBrokerService
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
block|}
name|WireFormat
name|format
init|=
name|protocolInfo
operator|.
name|detectedWireFormatFactory
operator|.
name|createWireFormat
argument_list|()
decl_stmt|;
name|Transport
name|transport
init|=
name|createTransport
argument_list|(
name|socket
argument_list|,
name|format
argument_list|,
name|protocolInfo
operator|.
name|detectedTransportFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportInfo
argument_list|(
name|format
argument_list|,
name|transport
argument_list|,
name|protocolInfo
operator|.
name|detectedTransportFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TcpTransport
name|createTransport
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|WireFormat
name|format
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TcpTransport
argument_list|(
name|format
argument_list|,
name|socket
argument_list|,
name|this
operator|.
name|initBuffer
argument_list|)
return|;
block|}
comment|/**      * @param socket      * @param format      * @param detectedTransportFactory      * @return      */
specifier|protected
name|TcpTransport
name|createTransport
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|TcpTransportFactory
name|detectedTransportFactory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createTransport
argument_list|(
name|socket
argument_list|,
name|format
argument_list|)
return|;
block|}
specifier|public
name|void
name|setWireFormatOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|wireFormatOptions
parameter_list|)
block|{
name|this
operator|.
name|wireFormatOptions
operator|=
name|wireFormatOptions
expr_stmt|;
block|}
specifier|public
name|void
name|setEnabledProtocols
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|enabledProtocols
parameter_list|)
block|{
name|this
operator|.
name|enabledProtocols
operator|=
name|enabledProtocols
expr_stmt|;
block|}
specifier|public
name|void
name|setAutoTransportOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|autoTransportOptions
parameter_list|)
block|{
name|this
operator|.
name|autoTransportOptions
operator|=
name|autoTransportOptions
expr_stmt|;
if|if
condition|(
name|autoTransportOptions
operator|.
name|get
argument_list|(
literal|"protocols"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|enabledProtocols
operator|=
name|AutoTransportUtils
operator|.
name|parseProtocols
argument_list|(
operator|(
name|String
operator|)
name|autoTransportOptions
operator|.
name|get
argument_list|(
literal|"protocols"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|doStop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ProtocolInfo
name|detectProtocol
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
name|TcpTransportFactory
name|detectedTransportFactory
init|=
name|transportFactory
decl_stmt|;
name|WireFormatFactory
name|detectedWireFormatFactory
init|=
name|wireFormatFactory
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|scheme
range|:
name|protocolVerifiers
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|protocolVerifiers
operator|.
name|get
argument_list|(
name|scheme
argument_list|)
operator|.
name|isProtocol
argument_list|(
name|buffer
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Detected "
operator|+
name|scheme
argument_list|)
expr_stmt|;
name|detectedWireFormatFactory
operator|=
name|findWireFormatFactory
argument_list|(
name|scheme
argument_list|,
name|wireFormatOptions
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheme
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
condition|)
block|{
name|scheme
operator|=
literal|""
expr_stmt|;
block|}
name|detectedTransportFactory
operator|=
operator|(
name|TcpTransportFactory
operator|)
name|findTransportFactory
argument_list|(
name|scheme
argument_list|,
name|transportOptions
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not detect wire format"
argument_list|)
throw|;
block|}
return|return
operator|new
name|ProtocolInfo
argument_list|(
name|detectedTransportFactory
argument_list|,
name|detectedWireFormatFactory
argument_list|)
return|;
block|}
specifier|protected
class|class
name|ProtocolInfo
block|{
specifier|public
specifier|final
name|TcpTransportFactory
name|detectedTransportFactory
decl_stmt|;
specifier|public
specifier|final
name|WireFormatFactory
name|detectedWireFormatFactory
decl_stmt|;
specifier|public
name|ProtocolInfo
parameter_list|(
name|TcpTransportFactory
name|detectedTransportFactory
parameter_list|,
name|WireFormatFactory
name|detectedWireFormatFactory
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|detectedTransportFactory
operator|=
name|detectedTransportFactory
expr_stmt|;
name|this
operator|.
name|detectedWireFormatFactory
operator|=
name|detectedWireFormatFactory
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

