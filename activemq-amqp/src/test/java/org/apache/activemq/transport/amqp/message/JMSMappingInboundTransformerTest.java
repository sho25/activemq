begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryTopic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|Proton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Data
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|MessageAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
specifier|public
class|class
name|JMSMappingInboundTransformerTest
block|{
comment|//----- Null Body Section ------------------------------------------------//
comment|/**      * Test that a message with no body section, but with the content type set to      * {@value AmqpMessageSupport#OCTET_STREAM_CONTENT_TYPE} results in a BytesMessage      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateBytesMessageFromNoBodySectionAndContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
name|AmqpMessageSupport
operator|.
name|OCTET_STREAM_CONTENT_TYPE
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a message with no body section, and no content-type results in a BytesMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateBytesMessageFromNoBodySectionAndNoContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a message with no body section, but with the content type set to      * {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.     */
annotation|@
name|Test
specifier|public
name|void
name|testCreateObjectMessageFromNoBodySectionAndContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
name|AmqpMessageSupport
operator|.
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQObjectMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromNoBodySectionAndContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQTextMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a message with no body section, and with the content type set to      * an unknown value results in a plain Message when not otherwise annotated to      * indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
specifier|public
name|void
name|testCreateGenericMessageFromNoBodySectionAndUnknownContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
literal|"unknown-content-type"
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//----- Data Body Section ------------------------------------------------//
comment|/**      * Test that a data body containing nothing, but with the content type set to      * {@value AmqpMessageSupport#OCTET_STREAM_CONTENT_TYPE} results in a BytesMessage when not      * otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateBytesMessageFromDataWithEmptyBinaryAndContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|Data
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
name|AmqpMessageSupport
operator|.
name|OCTET_STREAM_CONTENT_TYPE
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a message with an empty data body section, and with the content type      * set to an unknown value results in a BytesMessage when not otherwise annotated      * to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
specifier|public
name|void
name|testCreateBytesMessageFromDataWithUnknownContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|Data
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
literal|"unknown-content-type"
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a receiving a data body containing nothing and no content type being set      * results in a BytesMessage when not otherwise annotated to indicate the type of      * JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateBytesMessageFromDataWithEmptyBinaryAndNoContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|Data
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that receiving a data body containing nothing, but with the content type set to      * {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateObjectMessageFromDataWithContentTypeAndEmptyBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|Data
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
name|AmqpMessageSupport
operator|.
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQObjectMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeTextPlain
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/plain"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeTextJson
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/json;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/json;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/json;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/json"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeTextHtml
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/html;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/html;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/html;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/html"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeTextFoo
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/foo;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/foo;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/foo;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"text/foo"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeApplicationJson
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/json;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/json;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/json;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/json"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeApplicationJsonVariant
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+json;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+json;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+json;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+json"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeApplicationJavascript
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/javascript;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/javascript;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/javascript;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/javascript"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeApplicationEcmascript
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/ecmascript;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/ecmascript;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/ecmascript;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/ecmascript"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeApplicationXml
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeApplicationXmlVariant
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+xml;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+xml;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+xml;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/something+xml"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromDataWithContentTypeApplicationXmlDtd
parameter_list|()
throws|throws
name|Exception
block|{
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doCreateTextMessageFromDataWithContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doCreateTextMessageFromDataWithContentTypeTestImpl
parameter_list|(
name|String
name|contentType
parameter_list|,
name|Charset
name|expectedCharset
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|Data
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|equals
argument_list|(
name|expectedCharset
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQTextMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//----- AmqpValue transformations ----------------------------------------//
comment|/**      * Test that an amqp-value body containing a string results in a TextMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromAmqpValueWithString
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
literal|"content"
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQTextMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that an amqp-value body containing a null results in an TextMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateTextMessageFromAmqpValueWithNull
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQTextMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a message with an AmqpValue section containing a Binary, but with the content type      * set to {@value AmqpMessageSupport#SERIALIZED_JAVA_OBJECT_CONTENT_TYPE} results in an ObjectMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.     */
annotation|@
name|Test
specifier|public
name|void
name|testCreateObjectMessageFromAmqpValueWithBinaryAndContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
name|AmqpMessageSupport
operator|.
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQObjectMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that an amqp-value body containing a map results in an MapMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateAmqpMapMessageFromAmqpValueWithMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQMapMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that an amqp-value body containing a list results in an StreamMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateAmqpStreamMessageFromAmqpValueWithList
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQStreamMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that an amqp-sequence body containing a list results in an StreamMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateAmqpStreamMessageFromAmqpSequence
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpSequence
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQStreamMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that an amqp-value body containing a binary value results in BytesMessage      * when not otherwise annotated to indicate the type of JMS message it is.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateAmqpBytesMessageFromAmqpValueWithBinary
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|Binary
name|binary
init|=
operator|new
name|Binary
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that an amqp-value body containing a value which can't be categorized results in      * an exception from the transformer and then try the transformer's own fallback transformer      * to result in an BytesMessage.      *      * @throws Exception if an error occurs during the test.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateBytesMessageFromAmqpValueWithUncategorisedContent
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message should not be null"
argument_list|,
name|jmsMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformMessageWithAmqpValueStringCreatesTextMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|contentString
init|=
literal|"myTextMessageContent"
decl_stmt|;
name|Message
name|message
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
name|contentString
argument_list|)
argument_list|)
expr_stmt|;
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQJMSVendor
name|vendor
init|=
name|createVendor
argument_list|()
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|vendor
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected TextMessage"
argument_list|,
name|jmsMessage
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected message class type"
argument_list|,
name|ActiveMQTextMessage
operator|.
name|class
argument_list|,
name|jmsMessage
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|jmsMessage
decl_stmt|;
name|assertNotNull
argument_list|(
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|contentString
argument_list|,
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//----- Destination Conversions ------------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithNoToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|null
argument_list|,
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithQueueStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue"
argument_list|,
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryQueueStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue,temporary"
argument_list|,
name|TemporaryQueue
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTopicStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic"
argument_list|,
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryTopicStringToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic,temporary"
argument_list|,
name|TemporaryTopic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTransformWithToTypeDestinationTypeAnnotationTestImpl
parameter_list|(
name|Object
name|toTypeAnnotationValue
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|expectedClass
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|mockTextMessage
init|=
name|createMockTextMessage
argument_list|()
decl_stmt|;
name|ActiveMQJMSVendor
name|mockVendor
init|=
name|createMockVendor
argument_list|(
name|mockTextMessage
argument_list|)
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|mockVendor
argument_list|)
decl_stmt|;
name|String
name|toAddress
init|=
literal|"toAddress"
decl_stmt|;
name|Message
name|amqp
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|amqp
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
literal|"myTextMessageContent"
argument_list|)
argument_list|)
expr_stmt|;
name|amqp
operator|.
name|setAddress
argument_list|(
name|toAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|toTypeAnnotationValue
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-to-type"
argument_list|)
argument_list|,
name|toTypeAnnotationValue
argument_list|)
expr_stmt|;
name|MessageAnnotations
name|ma
init|=
operator|new
name|MessageAnnotations
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|amqp
operator|.
name|setMessageAnnotations
argument_list|(
name|ma
argument_list|)
expr_stmt|;
block|}
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|amqp
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected TextMessage"
argument_list|,
name|jmsMessage
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
comment|// Verify that createDestination was called with the provided 'to'
comment|// address and 'Destination' class
comment|// TODO - No need to really test this bit ?
comment|// Mockito.verify(mockVendor).createDestination(toAddress, expectedClass);
block|}
comment|//----- ReplyTo Conversions ----------------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithNoReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|null
argument_list|,
name|Destination
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithQueueStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue"
argument_list|,
name|Queue
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryQueueStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"queue,temporary"
argument_list|,
name|TemporaryQueue
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTopicStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic"
argument_list|,
name|Topic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransformWithTemporaryTopicStringReplyToTypeDestinationTypeAnnotation
parameter_list|()
throws|throws
name|Exception
block|{
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
argument_list|(
literal|"topic,temporary"
argument_list|,
name|TemporaryTopic
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTransformWithReplyToTypeDestinationTypeAnnotationTestImpl
parameter_list|(
name|Object
name|replyToTypeAnnotationValue
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|Destination
argument_list|>
name|expectedClass
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTextMessage
name|mockTextMessage
init|=
name|createMockTextMessage
argument_list|()
decl_stmt|;
name|ActiveMQJMSVendor
name|mockVendor
init|=
name|createMockVendor
argument_list|(
name|mockTextMessage
argument_list|)
decl_stmt|;
name|JMSMappingInboundTransformer
name|transformer
init|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|mockVendor
argument_list|)
decl_stmt|;
name|String
name|replyToAddress
init|=
literal|"replyToAddress"
decl_stmt|;
name|Message
name|amqp
init|=
name|Message
operator|.
name|Factory
operator|.
name|create
argument_list|()
decl_stmt|;
name|amqp
operator|.
name|setBody
argument_list|(
operator|new
name|AmqpValue
argument_list|(
literal|"myTextMessageContent"
argument_list|)
argument_list|)
expr_stmt|;
name|amqp
operator|.
name|setReplyTo
argument_list|(
name|replyToAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|replyToTypeAnnotationValue
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-reply-type"
argument_list|)
argument_list|,
name|replyToTypeAnnotationValue
argument_list|)
expr_stmt|;
name|MessageAnnotations
name|ma
init|=
operator|new
name|MessageAnnotations
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|amqp
operator|.
name|setMessageAnnotations
argument_list|(
name|ma
argument_list|)
expr_stmt|;
block|}
name|EncodedMessage
name|em
init|=
name|encodeMessage
argument_list|(
name|amqp
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|jmsMessage
init|=
name|transformer
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected TextMessage"
argument_list|,
name|jmsMessage
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
comment|// Verify that createDestination was called with the provided 'replyTo'
comment|// address and 'Destination' class
comment|// TODO - No need to really test this bit ?
comment|// Mockito.verify(mockVendor).createDestination(replyToAddress, expectedClass);
block|}
comment|//----- Utility Methods --------------------------------------------------//
specifier|private
name|ActiveMQTextMessage
name|createMockTextMessage
parameter_list|()
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQTextMessage
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|ActiveMQJMSVendor
name|createMockVendor
parameter_list|(
name|ActiveMQTextMessage
name|mockTextMessage
parameter_list|)
block|{
name|ActiveMQJMSVendor
name|mockVendor
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockVendor
operator|.
name|createTextMessage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTextMessage
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mockVendor
operator|.
name|createTextMessage
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockTextMessage
argument_list|)
expr_stmt|;
return|return
name|mockVendor
return|;
block|}
specifier|private
name|ActiveMQJMSVendor
name|createVendor
parameter_list|()
block|{
return|return
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
return|;
block|}
specifier|private
name|EncodedMessage
name|encodeMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|byte
index|[]
name|encodeBuffer
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|8
index|]
decl_stmt|;
name|int
name|encodedSize
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|encodedSize
operator|=
name|message
operator|.
name|encode
argument_list|(
name|encodeBuffer
argument_list|,
literal|0
argument_list|,
name|encodeBuffer
operator|.
name|length
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|nio
operator|.
name|BufferOverflowException
name|e
parameter_list|)
block|{
name|encodeBuffer
operator|=
operator|new
name|byte
index|[
name|encodeBuffer
operator|.
name|length
operator|*
literal|2
index|]
expr_stmt|;
block|}
block|}
name|long
name|messageFormat
init|=
literal|0
decl_stmt|;
return|return
operator|new
name|EncodedMessage
argument_list|(
name|messageFormat
argument_list|,
name|encodeBuffer
argument_list|,
literal|0
argument_list|,
name|encodedSize
argument_list|)
return|;
block|}
block|}
end_class

end_unit

