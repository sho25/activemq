begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 Red Hat, Inc.  *  Red Hat licenses this file to you under the Apache License, version  *  2.0 (the "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  *  implied.  See the License for the specific language governing  *  permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|hornetq
operator|.
name|javaee
operator|.
name|example
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|ejb3
operator|.
name|annotation
operator|.
name|ResourceAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|ActivationConfigProperty
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|MessageDriven
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:andy.taylor@jboss.org">Andy Taylor</a>  *         Created May 24, 2010  */
end_comment

begin_comment
comment|/**  * MDB that is connected to the remote queue.  * @author<a href="mailto:clebert.suconic@jboss.org">Clebert Suconic</a>  */
end_comment

begin_comment
comment|//Step 10. The message is received on the MDB, using a remote queue.
end_comment

begin_class
annotation|@
name|MessageDriven
argument_list|(
name|name
operator|=
literal|"MDB_Queue"
argument_list|,
name|activationConfig
operator|=
block|{
annotation|@
name|ActivationConfigProperty
argument_list|(
name|propertyName
operator|=
literal|"destinationType"
argument_list|,
name|propertyValue
operator|=
literal|"javax.jms.Queue"
argument_list|)
block|,
annotation|@
name|ActivationConfigProperty
argument_list|(
name|propertyName
operator|=
literal|"destination"
argument_list|,
name|propertyValue
operator|=
literal|"queues/mdbQueue"
argument_list|)
block|,
annotation|@
name|ActivationConfigProperty
argument_list|(
name|propertyName
operator|=
literal|"acknowledgeMode"
argument_list|,
name|propertyValue
operator|=
literal|"Auto-acknowledge"
argument_list|)
block|,
comment|// amq defaults to not look in jndi
annotation|@
name|ActivationConfigProperty
argument_list|(
name|propertyName
operator|=
literal|"useJndi"
argument_list|,
name|propertyValue
operator|=
literal|"true"
argument_list|)
block|}
argument_list|)
annotation|@
name|ResourceAdapter
argument_list|(
literal|"activemq-remote.rar"
argument_list|)
specifier|public
class|class
name|MDBQueue
implements|implements
name|MessageListener
block|{
comment|/**     *  Resource to be deployed by jms-remote-ds.xml     *  */
annotation|@
name|Resource
argument_list|(
name|mappedName
operator|=
literal|"java:/RemoteJmsXA"
argument_list|)
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
comment|// Step 8. Receive the text message
name|TextMessage
name|tm
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|String
name|text
init|=
name|tm
operator|.
name|getText
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Step 11: (MDBQueue.java) Message received using the remote adapter. Message = \""
operator|+
name|text
operator|+
literal|"\""
argument_list|)
expr_stmt|;
comment|// Step 9. look up the reply queue
comment|//Queue destQueue = HornetQJMSClient.createQueue("mdbReplyQueue");
comment|// Step 10. Create a connection
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
comment|// Step 11. Create a session
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|destQueue
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"mdbReplyQueue"
argument_list|)
decl_stmt|;
comment|// Step 12. Create a message producer to send the message
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destQueue
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sending a reply message"
argument_list|)
expr_stmt|;
comment|// Step 13. Create and send a reply text message
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"A reply message"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Step 14. Return the connection back to the pool
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

