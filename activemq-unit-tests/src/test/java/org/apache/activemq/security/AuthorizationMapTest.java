begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|GroupPrincipal
import|;
end_import

begin_comment
comment|/**  *  *  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationMapTest
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|GroupPrincipal
name|USERS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|ADMINS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"admins"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|TEMP_DESTINATION_ADMINS
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"tempDestAdmins"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testAuthorizationMap
parameter_list|()
block|{
name|AuthorizationMap
name|map
init|=
name|createAuthorizationMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|readACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.BAR"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testComposite
parameter_list|()
block|{
name|DefaultAuthorizationMap
name|map
init|=
operator|(
name|DefaultAuthorizationMap
operator|)
name|createAuthorizationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"QUEUEA"
argument_list|)
argument_list|,
name|createEntry
argument_list|(
literal|"QUEUEA"
argument_list|,
literal|"users"
argument_list|,
literal|"users"
argument_list|,
literal|"users"
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"QUEUEB"
argument_list|)
argument_list|,
name|createEntry
argument_list|(
literal|"QUEUEB"
argument_list|,
literal|"users"
argument_list|,
literal|"users"
argument_list|,
literal|"users"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|readACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.BAR,DENIED"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.BAR,USERS.BAR.FOO"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"QUEUEA,QUEUEB"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAuthorizationMapWithTempDest
parameter_list|()
block|{
name|AuthorizationMap
name|map
init|=
name|createAuthorizationMapWithTempDest
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|readACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.BAR"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|tempAdminACLs
init|=
name|map
operator|.
name|getTempDestinationAdminACLs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|tempAdminACLs
argument_list|,
literal|1
argument_list|,
name|tempAdminACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|tempAdminACLs
operator|.
name|contains
argument_list|(
name|TEMP_DESTINATION_ADMINS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWildcards
parameter_list|()
block|{
name|AuthorizationMap
name|map
init|=
name|createWildcardAuthorizationMap
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|readACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.BAR"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|writeAcls
init|=
name|map
operator|.
name|getWriteACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.BAR"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|writeAcls
argument_list|,
literal|1
argument_list|,
name|writeAcls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|writeAcls
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|writeAcls
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|adminAcls
init|=
name|map
operator|.
name|getAdminACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.BAR"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|adminAcls
argument_list|,
literal|1
argument_list|,
name|adminAcls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|adminAcls
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Contains users group"
argument_list|,
name|adminAcls
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|tempAdminACLs
init|=
name|map
operator|.
name|getTempDestinationAdminACLs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|tempAdminACLs
argument_list|,
literal|1
argument_list|,
name|tempAdminACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|tempAdminACLs
operator|.
name|contains
argument_list|(
name|TEMP_DESTINATION_ADMINS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWildcardSubscriptions
parameter_list|()
block|{
specifier|final
name|GroupPrincipal
name|USERSA
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"usersA"
argument_list|)
decl_stmt|;
name|DefaultAuthorizationMap
name|map
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DestinationMapEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
literal|"A"
argument_list|,
literal|"usersA"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|?
argument_list|>
name|readACLs
init|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|0
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERSA
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
literal|"USERS.>"
argument_list|,
literal|"users"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|0
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERSA
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
literal|"USERS.A.>"
argument_list|,
literal|"usersA"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|0
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERSA
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.A.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERSA
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
literal|">"
argument_list|,
literal|"admins"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|1
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admins group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"A"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERSA
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admins group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admins group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admins group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|2
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admins group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
name|readACLs
operator|=
name|map
operator|.
name|getReadACLs
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.A.>"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"set size: "
operator|+
name|readACLs
argument_list|,
literal|3
argument_list|,
name|readACLs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains users group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|USERSA
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Contains admins group"
argument_list|,
name|readACLs
operator|.
name|contains
argument_list|(
name|ADMINS
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AuthorizationMap
name|createWildcardAuthorizationMap
parameter_list|()
block|{
name|DefaultAuthorizationMap
name|answer
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DestinationMapEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationMapEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AuthorizationEntry
name|entry
init|=
operator|new
name|AuthorizationEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setRead
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|TempDestinationAuthorizationEntry
name|tEntry
init|=
operator|new
name|TempDestinationAuthorizationEntry
argument_list|()
decl_stmt|;
try|try
block|{
name|tEntry
operator|.
name|setAdmin
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setTempDestinationAuthorizationEntry
argument_list|(
name|tEntry
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|AuthorizationMap
name|createAuthorizationMap
parameter_list|()
block|{
name|DefaultAuthorizationMap
name|answer
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DestinationMapEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationMapEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AuthorizationEntry
name|entry
init|=
operator|new
name|AuthorizationEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setGroupClass
argument_list|(
literal|"org.apache.activemq.jaas.GroupPrincipal"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setRead
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// entry using default org.apache.activemq.jaas.GroupPrincipal class
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|"USERS.>"
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setRead
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|protected
name|AuthorizationMap
name|createAuthorizationMapWithTempDest
parameter_list|()
block|{
name|DefaultAuthorizationMap
name|answer
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DestinationMapEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationMapEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AuthorizationEntry
name|entry
init|=
operator|new
name|AuthorizationEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setRead
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|"USERS.>"
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|.
name|setRead
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
comment|// create entry for temporary queue
name|TempDestinationAuthorizationEntry
name|tEntry
init|=
operator|new
name|TempDestinationAuthorizationEntry
argument_list|()
decl_stmt|;
try|try
block|{
name|tEntry
operator|.
name|setAdmin
argument_list|(
literal|"tempDestAdmins"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|answer
operator|.
name|setTempDestinationAuthorizationEntry
argument_list|(
name|tEntry
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|AuthorizationEntry
name|createEntry
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|read
parameter_list|,
name|String
name|write
parameter_list|,
name|String
name|admin
parameter_list|)
block|{
name|AuthorizationEntry
name|entry
init|=
operator|new
name|AuthorizationEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|queue
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setQueue
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|read
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setRead
argument_list|(
name|read
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|write
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setWrite
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setAdmin
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
block|}
end_class

end_unit

