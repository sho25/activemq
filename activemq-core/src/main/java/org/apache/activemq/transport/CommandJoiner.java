begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LastPartialCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|PartialCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Joins together of partial commands which were split into individual chunks of  * data.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|CommandJoiner
extends|extends
name|TransportFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommandJoiner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|private
name|OpenWireFormat
name|wireFormat
decl_stmt|;
specifier|public
name|CommandJoiner
parameter_list|(
name|Transport
name|next
parameter_list|,
name|OpenWireFormat
name|wireFormat
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
name|byte
name|type
init|=
name|command
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PartialCommand
operator|.
name|DATA_STRUCTURE_TYPE
operator|||
name|type
operator|==
name|LastPartialCommand
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
name|PartialCommand
name|header
init|=
operator|(
name|PartialCommand
operator|)
name|command
decl_stmt|;
name|byte
index|[]
name|partialData
init|=
name|header
operator|.
name|getData
argument_list|()
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|partialData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|getTransportListener
argument_list|()
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
name|LastPartialCommand
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
try|try
block|{
name|byte
index|[]
name|fullData
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DataInputStream
name|dataIn
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|fullData
argument_list|)
argument_list|)
decl_stmt|;
name|Command
name|completeCommand
init|=
operator|(
name|Command
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|dataIn
argument_list|)
decl_stmt|;
name|LastPartialCommand
name|lastCommand
init|=
operator|(
name|LastPartialCommand
operator|)
name|command
decl_stmt|;
name|lastCommand
operator|.
name|configure
argument_list|(
name|completeCommand
argument_list|)
expr_stmt|;
name|getTransportListener
argument_list|()
operator|.
name|onCommand
argument_list|(
name|completeCommand
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to unmarshal partial command: "
operator|+
name|command
argument_list|)
expr_stmt|;
name|getTransportListener
argument_list|()
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|getTransportListener
argument_list|()
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
name|out
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|next
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

