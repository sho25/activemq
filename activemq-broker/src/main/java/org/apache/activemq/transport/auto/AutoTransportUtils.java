begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|auto
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_comment
comment|/**  *  *  */
end_comment

begin_class
specifier|public
class|class
name|AutoTransportUtils
block|{
comment|//wireformats
specifier|public
specifier|static
name|String
name|ALL
init|=
literal|"all"
decl_stmt|;
specifier|public
specifier|static
name|String
name|OPENWIRE
init|=
literal|"default"
decl_stmt|;
specifier|public
specifier|static
name|String
name|STOMP
init|=
literal|"stomp"
decl_stmt|;
specifier|public
specifier|static
name|String
name|AMQP
init|=
literal|"amqp"
decl_stmt|;
specifier|public
specifier|static
name|String
name|MQTT
init|=
literal|"mqtt"
decl_stmt|;
comment|//transports
specifier|public
specifier|static
name|String
name|AUTO
init|=
literal|"auto"
decl_stmt|;
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|extractWireFormatOptions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|wireFormatOptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|wireFormatOptions
operator|.
name|put
argument_list|(
name|OPENWIRE
argument_list|,
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"wireFormat.default."
argument_list|)
argument_list|)
expr_stmt|;
name|wireFormatOptions
operator|.
name|put
argument_list|(
name|STOMP
argument_list|,
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"wireFormat.stomp."
argument_list|)
argument_list|)
expr_stmt|;
name|wireFormatOptions
operator|.
name|put
argument_list|(
name|AMQP
argument_list|,
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"wireFormat.amqp."
argument_list|)
argument_list|)
expr_stmt|;
name|wireFormatOptions
operator|.
name|put
argument_list|(
name|MQTT
argument_list|,
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"wireFormat.mqtt."
argument_list|)
argument_list|)
expr_stmt|;
name|wireFormatOptions
operator|.
name|put
argument_list|(
name|ALL
argument_list|,
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"wireFormat."
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|wireFormatOptions
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|parseProtocols
parameter_list|(
name|String
name|protocolString
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|protocolSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|protocolString
operator|!=
literal|null
operator|&&
operator|!
name|protocolString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|protocolSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|protocolString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|protocolSet
return|;
block|}
block|}
end_class

end_unit

