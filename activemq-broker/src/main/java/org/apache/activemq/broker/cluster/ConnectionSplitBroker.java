begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|cluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Monitors for client connections that may fail to another broker - but this  * broker isn't aware they've gone. Can occur with network glitches or client  * error  *   *   */
end_comment

begin_class
specifier|public
class|class
name|ConnectionSplitBroker
extends|extends
name|BrokerFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConnectionSplitBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ConsumerInfo
argument_list|>
name|networkConsumerList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ConnectionSplitBroker
parameter_list|(
name|Broker
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|dest
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|networkConsumerList
init|)
block|{
if|if
condition|(
name|info
operator|.
name|isNetworkSubscription
argument_list|()
condition|)
block|{
name|networkConsumerList
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|networkConsumerList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|ConsumerInfo
argument_list|>
name|gcList
init|=
operator|new
name|ArrayList
argument_list|<
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ConsumerInfo
name|nc
range|:
name|networkConsumerList
control|)
block|{
if|if
condition|(
operator|!
name|nc
operator|.
name|isNetworkConsumersEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ConsumerId
name|id
range|:
name|nc
operator|.
name|getNetworkConsumerIds
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
condition|)
block|{
name|nc
operator|.
name|removeNetworkConsumerId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|nc
operator|.
name|isNetworkConsumersEmpty
argument_list|()
condition|)
block|{
name|gcList
operator|.
name|add
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|ConsumerInfo
name|nc
range|:
name|gcList
control|)
block|{
name|networkConsumerList
operator|.
name|remove
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|nc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Removed stale network consumer "
operator|+
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|info
operator|.
name|isNetworkSubscription
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|networkConsumerList
init|)
block|{
name|networkConsumerList
operator|.
name|remove
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

