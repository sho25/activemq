begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageAudit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|FilePendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|PendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|VMPendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|MessageEvictionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|OldestMessageEvictionStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatchNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessagePull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransmitCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TopicSubscription
extends|extends
name|AbstractSubscription
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopicSubscription
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|CURSOR_NAME_COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|protected
name|PendingMessageCursor
name|matched
decl_stmt|;
specifier|protected
specifier|final
name|SystemUsage
name|usageManager
decl_stmt|;
name|boolean
name|singleDestination
init|=
literal|true
decl_stmt|;
name|Destination
name|destination
decl_stmt|;
specifier|private
specifier|final
name|Scheduler
name|scheduler
decl_stmt|;
specifier|private
name|int
name|maximumPendingMessages
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|MessageEvictionStrategy
name|messageEvictionStrategy
init|=
operator|new
name|OldestMessageEvictionStrategy
argument_list|()
decl_stmt|;
specifier|private
name|int
name|discarded
decl_stmt|;
specifier|private
specifier|final
name|Object
name|matchedListMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|prefetchExtension
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|int
name|memoryUsageHighWaterMark
init|=
literal|95
decl_stmt|;
comment|// allow duplicate suppression in a ring network of brokers
specifier|protected
name|int
name|maxProducersToAudit
init|=
literal|1024
decl_stmt|;
specifier|protected
name|int
name|maxAuditDepth
init|=
literal|1000
decl_stmt|;
specifier|protected
name|boolean
name|enableAudit
init|=
literal|false
decl_stmt|;
specifier|protected
name|ActiveMQMessageAudit
name|audit
decl_stmt|;
specifier|protected
name|boolean
name|active
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|discarding
init|=
literal|false
decl_stmt|;
comment|//Used for inflight message size calculations
specifier|protected
specifier|final
name|Object
name|dispatchLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|MessageReference
argument_list|>
name|dispatched
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TopicSubscription
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|,
name|SystemUsage
name|usageManager
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|usageManager
operator|=
name|usageManager
expr_stmt|;
name|String
name|matchedName
init|=
literal|"TopicSubscription:"
operator|+
name|CURSOR_NAME_COUNTER
operator|.
name|getAndIncrement
argument_list|()
operator|+
literal|"["
operator|+
name|info
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
operator|||
name|broker
operator|.
name|getTempDataStore
argument_list|()
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|matched
operator|=
operator|new
name|VMPendingMessageCursor
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|matched
operator|=
operator|new
name|FilePendingMessageCursor
argument_list|(
name|broker
argument_list|,
name|matchedName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|scheduler
operator|=
name|broker
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|matched
operator|.
name|setSystemUsage
argument_list|(
name|usageManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|matched
operator|.
name|setMemoryUsageHighWaterMark
argument_list|(
name|getCursorMemoryHighWaterMark
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|matched
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|enableAudit
condition|)
block|{
name|audit
operator|=
operator|new
name|ActiveMQMessageAudit
argument_list|(
name|maxAuditDepth
argument_list|,
name|maxProducersToAudit
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|active
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|MessageReference
name|node
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isDuplicate
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Lets use an indirect reference so that we can associate a unique
comment|// locator /w the message.
name|node
operator|=
operator|new
name|IndirectMessageReference
argument_list|(
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
comment|// if this subscriber is already discarding a message, we don't want to add
comment|// any more messages to it as those messages can only be advisories generated in the process,
comment|// which can trigger the recursive call loop
if|if
condition|(
name|discarding
condition|)
return|return;
if|if
condition|(
operator|!
name|isFull
argument_list|()
operator|&&
name|matched
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if maximumPendingMessages is set we will only discard messages which
comment|// have not been dispatched (i.e. we allow the prefetch buffer to be filled)
name|dispatch
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|setSlowConsumer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|>
literal|1
operator|&&
name|matched
operator|.
name|size
argument_list|()
operator|>
name|info
operator|.
name|getPrefetchSize
argument_list|()
condition|)
block|{
comment|// Slow consumers should log and set their state as such.
if|if
condition|(
operator|!
name|isSlowConsumer
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{}: has twice its prefetch limit pending, without an ack; it appears to be slow"
argument_list|,
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setSlowConsumer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Destination
name|dest
range|:
name|destinations
control|)
block|{
name|dest
operator|.
name|slowConsumer
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|maximumPendingMessages
operator|!=
literal|0
condition|)
block|{
name|boolean
name|warnedAboutWait
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|active
condition|)
block|{
while|while
condition|(
name|matched
operator|.
name|isFull
argument_list|()
condition|)
block|{
if|if
condition|(
name|getContext
argument_list|()
operator|.
name|getStopping
argument_list|()
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"{}: stopped waiting for space in pendingMessage cursor for: {}"
argument_list|,
name|toString
argument_list|()
argument_list|,
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|warnedAboutWait
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{}: Pending message cursor [{}] is full, temp usag ({}%) or memory usage ({}%) limit reached, blocking message add() pending the release of resources."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|toString
argument_list|()
block|,
name|matched
block|,
name|matched
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
block|,
name|matched
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|warnedAboutWait
operator|=
literal|true
expr_stmt|;
block|}
name|matchedListMutex
operator|.
name|wait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
comment|// Temporary storage could be full - so just try to add the message
comment|// see https://issues.apache.org/activemq/browse/AMQ-2475
if|if
condition|(
name|matched
operator|.
name|tryAddMessageLast
argument_list|(
name|node
argument_list|,
literal|10
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|maximumPendingMessages
operator|>
literal|0
condition|)
block|{
comment|// calculate the high water mark from which point we
comment|// will eagerly evict expired messages
name|int
name|max
init|=
name|messageEvictionStrategy
operator|.
name|getEvictExpiredMessagesHighWatermark
argument_list|()
decl_stmt|;
if|if
condition|(
name|maximumPendingMessages
operator|>
literal|0
operator|&&
name|maximumPendingMessages
operator|<
name|max
condition|)
block|{
name|max
operator|=
name|maximumPendingMessages
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|matched
operator|.
name|isEmpty
argument_list|()
operator|&&
name|matched
operator|.
name|size
argument_list|()
operator|>
name|max
condition|)
block|{
name|removeExpiredMessages
argument_list|()
expr_stmt|;
block|}
comment|// lets discard old messages as we are a slow consumer
while|while
condition|(
operator|!
name|matched
operator|.
name|isEmpty
argument_list|()
operator|&&
name|matched
operator|.
name|size
argument_list|()
operator|>
name|maximumPendingMessages
condition|)
block|{
name|int
name|pageInSize
init|=
name|matched
operator|.
name|size
argument_list|()
operator|-
name|maximumPendingMessages
decl_stmt|;
comment|// only page in a 1000 at a time - else we could blow the memory
name|pageInSize
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|1000
argument_list|,
name|pageInSize
argument_list|)
expr_stmt|;
name|LinkedList
argument_list|<
name|MessageReference
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
name|MessageReference
index|[]
name|oldMessages
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|matched
init|)
block|{
name|list
operator|=
name|matched
operator|.
name|pageInList
argument_list|(
name|pageInSize
argument_list|)
expr_stmt|;
name|oldMessages
operator|=
name|messageEvictionStrategy
operator|.
name|evictMessages
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|MessageReference
name|ref
range|:
name|list
control|)
block|{
name|ref
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|messagesToEvict
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|oldMessages
operator|!=
literal|null
condition|)
block|{
name|messagesToEvict
operator|=
name|oldMessages
operator|.
name|length
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesToEvict
condition|;
name|i
operator|++
control|)
block|{
name|MessageReference
name|oldMessage
init|=
name|oldMessages
index|[
name|i
index|]
decl_stmt|;
name|discard
argument_list|(
name|oldMessage
argument_list|)
expr_stmt|;
block|}
block|}
comment|// lets avoid an infinite loop if we are given a bad eviction strategy
comment|// for a bad strategy lets just not evict
if|if
condition|(
name|messagesToEvict
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No messages to evict returned for {} from eviction strategy: {} out of {} candidates"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|destination
block|,
name|messageEvictionStrategy
block|,
name|list
operator|.
name|size
argument_list|()
block|}
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|dispatchMatched
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isDuplicate
parameter_list|(
name|MessageReference
name|node
parameter_list|)
block|{
name|boolean
name|duplicate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|enableAudit
operator|&&
name|audit
operator|!=
literal|null
condition|)
block|{
name|duplicate
operator|=
name|audit
operator|.
name|isDuplicate
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|duplicate
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}, ignoring duplicate add: {}"
argument_list|,
name|this
argument_list|,
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|duplicate
return|;
block|}
comment|/**      * Discard any expired messages from the matched list. Called from a      * synchronized block.      *      * @throws IOException      */
specifier|protected
name|void
name|removeExpiredMessages
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|matched
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|matched
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageReference
name|node
init|=
name|matched
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|matched
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
operator|(
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|broker
operator|.
name|messageExpired
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|node
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|matched
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processMessageDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|mdn
parameter_list|)
block|{
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
try|try
block|{
name|matched
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|matched
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageReference
name|node
init|=
name|matched
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|mdn
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|matched
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|dispatched
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getInflightMessageSize
argument_list|()
operator|.
name|addSize
argument_list|(
name|node
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|matched
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|acknowledge
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
comment|// Handle the standard acknowledgment case.
if|if
condition|(
name|ack
operator|.
name|isStandardAck
argument_list|()
operator|||
name|ack
operator|.
name|isPoisonAck
argument_list|()
operator|||
name|ack
operator|.
name|isIndividualAck
argument_list|()
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|updateStatsOnAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|dispatchMatched
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateStatsOnAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|updatePrefetch
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|dispatchMatched
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|ack
operator|.
name|isDeliveredAck
argument_list|()
condition|)
block|{
comment|// Message was delivered but not acknowledged: update pre-fetch counters.
name|prefetchExtension
operator|.
name|addAndGet
argument_list|(
name|ack
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|dispatchMatched
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|ack
operator|.
name|isExpiredAck
argument_list|()
condition|)
block|{
name|updateStatsOnAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|updatePrefetch
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|dispatchMatched
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|ack
operator|.
name|isRedeliveredAck
argument_list|()
condition|)
block|{
comment|// nothing to do atm
return|return;
block|}
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Invalid acknowledgment: "
operator|+
name|ack
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|pullMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|MessagePull
name|pull
parameter_list|)
throws|throws
name|Exception
block|{
comment|// The slave should not deliver pull messages.
if|if
condition|(
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|)
block|{
specifier|final
name|long
name|currentDispatchedCount
init|=
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|prefetchExtension
operator|.
name|set
argument_list|(
name|pull
operator|.
name|getQuantity
argument_list|()
argument_list|)
expr_stmt|;
name|dispatchMatched
argument_list|()
expr_stmt|;
comment|// If there was nothing dispatched.. we may need to setup a timeout.
if|if
condition|(
name|currentDispatchedCount
operator|==
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|||
name|pull
operator|.
name|isAlwaysSignalDone
argument_list|()
condition|)
block|{
comment|// immediate timeout used by receiveNoWait()
if|if
condition|(
name|pull
operator|.
name|getTimeout
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Send a NULL message to signal nothing pending.
name|dispatch
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|prefetchExtension
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pull
operator|.
name|getTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scheduler
operator|.
name|executeAfterDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|pullTimeout
argument_list|(
name|currentDispatchedCount
argument_list|,
name|pull
operator|.
name|isAlwaysSignalDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|pull
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Occurs when a pull times out. If nothing has been dispatched since the      * timeout was setup, then send the NULL message.      */
specifier|private
specifier|final
name|void
name|pullTimeout
parameter_list|(
name|long
name|currentDispatchedCount
parameter_list|,
name|boolean
name|alwaysSendDone
parameter_list|)
block|{
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
if|if
condition|(
name|currentDispatchedCount
operator|==
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|||
name|alwaysSendDone
condition|)
block|{
try|try
block|{
name|dispatch
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|serviceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|prefetchExtension
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Update the statistics on message ack.      * @param ack      */
specifier|private
name|void
name|updateStatsOnAck
parameter_list|(
specifier|final
name|MessageAck
name|ack
parameter_list|)
block|{
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|boolean
name|inAckRange
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MessageReference
argument_list|>
name|removeList
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|dispatched
control|)
block|{
name|MessageId
name|messageId
init|=
name|node
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|==
literal|null
operator|||
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
name|inAckRange
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|inAckRange
condition|)
block|{
name|removeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|removeList
control|)
block|{
name|dispatched
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getInflightMessageSize
argument_list|()
operator|.
name|addSize
argument_list|(
operator|-
name|node
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
operator|(
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
operator|(
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|isNetworkSubscription
argument_list|()
condition|)
block|{
operator|(
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getForwards
argument_list|()
operator|.
name|add
argument_list|(
name|ack
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ack
operator|.
name|isExpiredAck
argument_list|()
condition|)
block|{
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getExpired
argument_list|()
operator|.
name|add
argument_list|(
name|ack
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|updatePrefetch
parameter_list|(
name|MessageAck
name|ack
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currentExtension
init|=
name|prefetchExtension
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|newExtension
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|currentExtension
operator|-
name|ack
operator|.
name|getMessageCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetchExtension
operator|.
name|compareAndSet
argument_list|(
name|currentExtension
argument_list|,
name|newExtension
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|countBeforeFull
parameter_list|()
block|{
return|return
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|?
name|prefetchExtension
operator|.
name|get
argument_list|()
else|:
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|+
name|prefetchExtension
operator|.
name|get
argument_list|()
operator|-
name|getDispatchedQueueSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPendingQueueSize
parameter_list|()
block|{
return|return
name|matched
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPendingMessageSize
parameter_list|()
block|{
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
return|return
name|matched
operator|.
name|messageSize
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDispatchedQueueSize
parameter_list|()
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|-
name|prefetchExtension
operator|.
name|get
argument_list|()
operator|-
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMaximumPendingMessages
parameter_list|()
block|{
return|return
name|maximumPendingMessages
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDispatchedCounter
parameter_list|()
block|{
return|return
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEnqueueCounter
parameter_list|()
block|{
return|return
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDequeueCounter
parameter_list|()
block|{
return|return
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
comment|/**      * @return the number of messages discarded due to being a slow consumer      */
specifier|public
name|int
name|discarded
parameter_list|()
block|{
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
return|return
name|discarded
return|;
block|}
block|}
comment|/**      * @return the number of matched messages (messages targeted for the      *         subscription but not yet able to be dispatched due to the      *         prefetch buffer being full).      */
specifier|public
name|int
name|matched
parameter_list|()
block|{
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
return|return
name|matched
operator|.
name|size
argument_list|()
return|;
block|}
block|}
comment|/**      * Sets the maximum number of pending messages that can be matched against      * this consumer before old messages are discarded.      */
specifier|public
name|void
name|setMaximumPendingMessages
parameter_list|(
name|int
name|maximumPendingMessages
parameter_list|)
block|{
name|this
operator|.
name|maximumPendingMessages
operator|=
name|maximumPendingMessages
expr_stmt|;
block|}
specifier|public
name|MessageEvictionStrategy
name|getMessageEvictionStrategy
parameter_list|()
block|{
return|return
name|messageEvictionStrategy
return|;
block|}
comment|/**      * Sets the eviction strategy used to decide which message to evict when the      * slow consumer needs to discard messages      */
specifier|public
name|void
name|setMessageEvictionStrategy
parameter_list|(
name|MessageEvictionStrategy
name|messageEvictionStrategy
parameter_list|)
block|{
name|this
operator|.
name|messageEvictionStrategy
operator|=
name|messageEvictionStrategy
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxProducersToAudit
parameter_list|()
block|{
return|return
name|maxProducersToAudit
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setMaxProducersToAudit
parameter_list|(
name|int
name|maxProducersToAudit
parameter_list|)
block|{
name|this
operator|.
name|maxProducersToAudit
operator|=
name|maxProducersToAudit
expr_stmt|;
if|if
condition|(
name|audit
operator|!=
literal|null
condition|)
block|{
name|audit
operator|.
name|setMaximumNumberOfProducersToTrack
argument_list|(
name|maxProducersToAudit
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getMaxAuditDepth
parameter_list|()
block|{
return|return
name|maxAuditDepth
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setMaxAuditDepth
parameter_list|(
name|int
name|maxAuditDepth
parameter_list|)
block|{
name|this
operator|.
name|maxAuditDepth
operator|=
name|maxAuditDepth
expr_stmt|;
if|if
condition|(
name|audit
operator|!=
literal|null
condition|)
block|{
name|audit
operator|.
name|setAuditDepth
argument_list|(
name|maxAuditDepth
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEnableAudit
parameter_list|()
block|{
return|return
name|enableAudit
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|setEnableAudit
parameter_list|(
name|boolean
name|enableAudit
parameter_list|)
block|{
name|this
operator|.
name|enableAudit
operator|=
name|enableAudit
expr_stmt|;
if|if
condition|(
name|enableAudit
operator|&&
name|audit
operator|==
literal|null
condition|)
block|{
name|audit
operator|=
operator|new
name|ActiveMQMessageAudit
argument_list|(
name|maxAuditDepth
argument_list|,
name|maxProducersToAudit
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|getDispatchedQueueSize
argument_list|()
operator|>=
name|info
operator|.
name|getPrefetchSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInFlightSize
parameter_list|()
block|{
return|return
name|getDispatchedQueueSize
argument_list|()
return|;
block|}
comment|/**      * @return true when 60% or more room is left for dispatching messages      */
annotation|@
name|Override
specifier|public
name|boolean
name|isLowWaterMark
parameter_list|()
block|{
return|return
name|getDispatchedQueueSize
argument_list|()
operator|<=
operator|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|*
literal|.4
operator|)
return|;
block|}
comment|/**      * @return true when 10% or less room is left for dispatching messages      */
annotation|@
name|Override
specifier|public
name|boolean
name|isHighWaterMark
parameter_list|()
block|{
return|return
name|getDispatchedQueueSize
argument_list|()
operator|>=
operator|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|*
literal|.9
operator|)
return|;
block|}
comment|/**      * @param memoryUsageHighWaterMark the memoryUsageHighWaterMark to set      */
specifier|public
name|void
name|setMemoryUsageHighWaterMark
parameter_list|(
name|int
name|memoryUsageHighWaterMark
parameter_list|)
block|{
name|this
operator|.
name|memoryUsageHighWaterMark
operator|=
name|memoryUsageHighWaterMark
expr_stmt|;
block|}
comment|/**      * @return the memoryUsageHighWaterMark      */
specifier|public
name|int
name|getMemoryUsageHighWaterMark
parameter_list|()
block|{
return|return
name|this
operator|.
name|memoryUsageHighWaterMark
return|;
block|}
comment|/**      * @return the usageManager      */
specifier|public
name|SystemUsage
name|getUsageManager
parameter_list|()
block|{
return|return
name|this
operator|.
name|usageManager
return|;
block|}
comment|/**      * @return the matched      */
specifier|public
name|PendingMessageCursor
name|getMatched
parameter_list|()
block|{
return|return
name|this
operator|.
name|matched
return|;
block|}
comment|/**      * @param matched the matched to set      */
specifier|public
name|void
name|setMatched
parameter_list|(
name|PendingMessageCursor
name|matched
parameter_list|)
block|{
name|this
operator|.
name|matched
operator|=
name|matched
expr_stmt|;
block|}
comment|/**      * inform the MessageConsumer on the client to change it's prefetch      *      * @param newPrefetch      */
annotation|@
name|Override
specifier|public
name|void
name|updateConsumerPrefetch
parameter_list|(
name|int
name|newPrefetch
parameter_list|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getConnection
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|isManageable
argument_list|()
condition|)
block|{
name|ConsumerControl
name|cc
init|=
operator|new
name|ConsumerControl
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setConsumerId
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setPrefetch
argument_list|(
name|newPrefetch
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dispatchMatched
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
if|if
condition|(
operator|!
name|matched
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isFull
argument_list|()
condition|)
block|{
try|try
block|{
name|matched
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|matched
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|isFull
argument_list|()
condition|)
block|{
name|MessageReference
name|message
init|=
name|matched
operator|.
name|next
argument_list|()
decl_stmt|;
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
name|matched
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// Message may have been sitting in the matched list a while
comment|// waiting for the consumer to ak the message.
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|discard
argument_list|(
name|message
argument_list|)
expr_stmt|;
continue|continue;
comment|// just drop it.
block|}
name|dispatch
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|matched
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|dispatch
parameter_list|(
specifier|final
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
name|message
init|=
name|node
operator|!=
literal|null
condition|?
name|node
operator|.
name|getMessage
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
block|}
comment|// Make sure we can dispatch a message.
name|MessageDispatch
name|md
init|=
operator|new
name|MessageDispatch
argument_list|()
decl_stmt|;
name|md
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|md
operator|.
name|setConsumerId
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|setDestination
argument_list|(
operator|(
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|dispatched
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|getSubscriptionStatistics
argument_list|()
operator|.
name|getInflightMessageSize
argument_list|()
operator|.
name|addSize
argument_list|(
name|node
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Keep track if this subscription is receiving messages from a single destination.
if|if
condition|(
name|singleDestination
condition|)
block|{
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
name|destination
operator|=
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|destination
operator|!=
name|node
operator|.
name|getRegionDestination
argument_list|()
condition|)
block|{
name|singleDestination
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|info
operator|.
name|isDispatchAsync
argument_list|()
condition|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|setTransmitCallback
argument_list|(
operator|new
name|TransmitCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Destination
name|regionDestination
init|=
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|regionDestination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|regionDestination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|()
block|{
name|Destination
name|regionDestination
init|=
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|regionDestination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|regionDestination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchSync
argument_list|(
name|md
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|Destination
name|regionDestination
init|=
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|regionDestination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|regionDestination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|discard
parameter_list|(
name|MessageReference
name|message
parameter_list|)
block|{
name|discarding
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
name|matched
operator|.
name|remove
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|discarded
operator|++
expr_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"{}, discarding message {}"
argument_list|,
name|this
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|Destination
name|dest
init|=
operator|(
name|Destination
operator|)
name|message
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
name|dest
operator|.
name|messageDiscarded
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|this
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|getRoot
argument_list|()
operator|.
name|sendToDeadLetterQueue
argument_list|(
name|getContext
argument_list|()
argument_list|,
name|message
argument_list|,
name|this
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"TopicSubDiscard. ID:"
operator|+
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|discarding
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TopicSubscription:"
operator|+
literal|" consumer="
operator|+
name|info
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|", destinations="
operator|+
name|destinations
operator|.
name|size
argument_list|()
operator|+
literal|", dispatched="
operator|+
name|getDispatchedQueueSize
argument_list|()
operator|+
literal|", delivered="
operator|+
name|getDequeueCounter
argument_list|()
operator|+
literal|", matched="
operator|+
name|matched
argument_list|()
operator|+
literal|", discarded="
operator|+
name|discarded
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|this
operator|.
name|active
operator|=
literal|false
expr_stmt|;
synchronized|synchronized
init|(
name|matchedListMutex
init|)
block|{
try|try
block|{
name|matched
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to destroy cursor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|setSlowConsumer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|dispatched
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPrefetchSize
parameter_list|()
block|{
return|return
name|info
operator|.
name|getPrefetchSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrefetchSize
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
name|info
operator|.
name|setPrefetchSize
argument_list|(
name|newSize
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatchMatched
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Caught exception on dispatch after prefetch size change."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

