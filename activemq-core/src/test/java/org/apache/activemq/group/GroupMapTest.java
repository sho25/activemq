begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|group
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_class
specifier|public
class|class
name|GroupMapTest
extends|extends
name|TestCase
block|{
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|Connection
name|connection1
decl_stmt|;
specifier|protected
name|Connection
name|connection2
decl_stmt|;
specifier|protected
name|String
name|bindAddress
init|=
name|ActiveMQConnectionFactory
operator|.
name|DEFAULT_BROKER_BIND_URL
decl_stmt|;
comment|/**      * Test method for      * {@link org.apache.activemq.group.GroupMap#addMemberChangedListener(org.apache.activemq.group.MemberChangedListener)}.      * @throws Exception       */
specifier|public
name|void
name|testAddMemberChangedListener
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
name|map1
operator|.
name|addMemberChangedListener
argument_list|(
operator|new
name|MemberChangedListener
argument_list|()
block|{
specifier|public
name|void
name|memberStarted
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
synchronized|synchronized
init|(
name|counter
init|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|counter
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|memberStopped
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
synchronized|synchronized
init|(
name|counter
init|)
block|{
name|counter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|counter
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|counter
init|)
block|{
if|if
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|<
literal|1
condition|)
block|{
name|counter
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|counter
init|)
block|{
if|if
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|<
literal|2
condition|)
block|{
name|counter
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|counter
init|)
block|{
if|if
condition|(
name|counter
operator|.
name|get
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|counter
operator|.
name|wait
argument_list|(
name|GroupMap
operator|.
name|DEFAULT_HEART_BEAT_INTERVAL
operator|*
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.activemq.group.GroupMap#addMapChangedListener(org.apache.activemq.group.MapChangedListener)}.      * @throws Exception       */
specifier|public
name|void
name|testAddMapChangedListener
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|called1
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called2
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
name|map1
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called1
init|)
block|{
name|called1
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called1
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called2
init|)
block|{
name|called2
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called2
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map1
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"blob"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called1
init|)
block|{
if|if
condition|(
operator|!
name|called1
operator|.
name|get
argument_list|()
condition|)
block|{
name|called1
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|called2
init|)
block|{
if|if
condition|(
operator|!
name|called2
operator|.
name|get
argument_list|()
condition|)
block|{
name|called2
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testGetWriteLock
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|setMinimumGroupSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
try|try
block|{
name|map1
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"bah"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|GroupMapUpdateException
name|e
parameter_list|)
block|{         }
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for {@link org.apache.activemq.group.GroupMap#clear()}.      *       * @throws Exception      */
specifier|public
name|void
name|testClear
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|map1
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mapRemove
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|expired
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|map2
operator|.
name|clear
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test a new map is populated for existing values      */
specifier|public
name|void
name|testMapUpdatedOnStart
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|map1
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map2
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map2
operator|.
name|containsValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testContainsKey
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|map1
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map1
operator|.
name|containsKey
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.activemq.group.GroupMap#containsValue(java.lang.Object)}.      * @throws Exception       */
specifier|public
name|void
name|testContainsValue
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|map1
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map1
operator|.
name|containsValue
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for {@link org.apache.activemq.group.GroupMap#entrySet()}.      * @throws Exception       */
comment|/**      * Test method for      * {@link org.apache.activemq.group.GroupMap#get(java.lang.Object)}.      * @throws Exception       */
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|map1
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map1
operator|.
name|get
argument_list|(
literal|"test"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test method for      * {@link org.apache.activemq.group.GroupMap#remove(java.lang.Object)}.      */
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|map1
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapInsert
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|Key
parameter_list|,
name|Object
name|Value
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|mapRemove
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|expired
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called
init|)
block|{
name|called
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|called
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map2
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|called
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|map2
operator|.
name|remove
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called
init|)
block|{
if|if
condition|(
operator|!
name|called
operator|.
name|get
argument_list|()
condition|)
block|{
name|called
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|map1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testExpire
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|called1
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|AtomicBoolean
name|called2
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|GroupMap
name|map1
init|=
operator|new
name|GroupMap
argument_list|(
name|connection1
argument_list|,
literal|"map1"
argument_list|)
decl_stmt|;
name|map1
operator|.
name|setTimeToLive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|map1
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapRemove
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|expired
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called1
init|)
block|{
name|called1
operator|.
name|set
argument_list|(
name|expired
argument_list|)
expr_stmt|;
name|called1
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map1
operator|.
name|start
argument_list|()
expr_stmt|;
name|GroupMap
name|map2
init|=
operator|new
name|GroupMap
argument_list|(
name|connection2
argument_list|,
literal|"map2"
argument_list|)
decl_stmt|;
name|map2
operator|.
name|addMapChangedListener
argument_list|(
operator|new
name|DefaultMapChangedListener
argument_list|()
block|{
specifier|public
name|void
name|mapRemove
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|value
parameter_list|,
name|boolean
name|expired
parameter_list|)
block|{
synchronized|synchronized
init|(
name|called2
init|)
block|{
name|called2
operator|.
name|set
argument_list|(
name|expired
argument_list|)
expr_stmt|;
name|called2
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|map2
operator|.
name|start
argument_list|()
expr_stmt|;
name|map1
operator|.
name|put
argument_list|(
literal|"test"
argument_list|,
literal|"blob"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|called1
init|)
block|{
if|if
condition|(
operator|!
name|called1
operator|.
name|get
argument_list|()
condition|)
block|{
name|called1
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|called2
init|)
block|{
if|if
condition|(
operator|!
name|called2
operator|.
name|get
argument_list|()
condition|)
block|{
name|called2
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|called1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|called2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|map1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|map2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|connection1
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection1
operator|.
name|start
argument_list|()
expr_stmt|;
name|connection2
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|connection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|ActiveMQConnection
operator|.
name|DEFAULT_BROKER_URL
argument_list|)
decl_stmt|;
return|return
name|cf
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|configureBroker
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|answer
parameter_list|)
throws|throws
name|Exception
block|{
name|answer
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

