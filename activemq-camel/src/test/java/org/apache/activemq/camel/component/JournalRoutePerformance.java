begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|test
operator|.
name|junit4
operator|.
name|CamelTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Used to get an idea of what kind of performance can be expected from   * the journal.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|JournalRoutePerformance
extends|extends
name|CamelTestSupport
block|{
name|AtomicLong
name|produceCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|AtomicLong
name|consumeCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|payLoadSize
init|=
literal|1024
decl_stmt|;
name|int
name|concurrentProducers
init|=
literal|50
decl_stmt|;
name|long
name|delayBetweenSample
init|=
literal|1000
decl_stmt|;
name|long
name|perfTestDuration
init|=
literal|1000
operator|*
literal|60
decl_stmt|;
comment|// 1 min
name|StringBuffer
name|t
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payLoadSize
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|.
name|append
argument_list|(
literal|'a'
operator|+
operator|(
name|i
operator|%
literal|26
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|byte
index|[]
name|payload
init|=
name|t
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|concurrentProducers
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producer: "
operator|+
name|i
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|running
operator|.
name|get
argument_list|()
condition|)
block|{
name|template
operator|.
name|sendBody
argument_list|(
literal|"direct:in"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|produceCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|long
name|produceTotal
init|=
literal|0
decl_stmt|;
name|long
name|consumeTotal
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|end
init|=
name|start
operator|+
name|perfTestDuration
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|end
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|delayBetweenSample
argument_list|)
expr_stmt|;
name|long
name|totalTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|long
name|p
init|=
name|produceCounter
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|c
init|=
name|consumeCounter
operator|.
name|getAndSet
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|produceTotal
operator|+=
name|p
expr_stmt|;
name|consumeTotal
operator|+=
name|c
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Interval Produced "
operator|+
name|stat
argument_list|(
name|p
argument_list|,
name|delayBetweenSample
argument_list|)
operator|+
literal|" m/s, Consumed "
operator|+
name|stat
argument_list|(
name|c
argument_list|,
name|delayBetweenSample
argument_list|)
operator|+
literal|" m/s"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total Produced "
operator|+
name|stat
argument_list|(
name|produceTotal
argument_list|,
name|totalTime
argument_list|)
operator|+
literal|" m/s, Consumed "
operator|+
name|stat
argument_list|(
name|consumeTotal
argument_list|,
name|totalTime
argument_list|)
operator|+
literal|" m/s"
argument_list|)
expr_stmt|;
block|}
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|stat
parameter_list|(
name|long
name|pd
parameter_list|,
name|long
name|delayBetweenSample
parameter_list|)
block|{
return|return
literal|""
operator|+
operator|(
literal|1.0
operator|*
name|pd
operator|/
name|delayBetweenSample
operator|)
operator|*
literal|1000.0
return|;
block|}
specifier|protected
name|RouteBuilder
name|createRouteBuilder
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|RouteBuilder
argument_list|()
block|{
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
literal|"direct:in"
argument_list|)
operator|.
name|to
argument_list|(
literal|"activemq.journal:target/perf-test"
argument_list|)
expr_stmt|;
name|from
argument_list|(
literal|"activemq.journal:target/perf-test"
argument_list|)
operator|.
name|process
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|consumeCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

