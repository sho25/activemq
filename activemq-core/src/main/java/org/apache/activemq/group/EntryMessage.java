begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|group
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Externalizable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_comment
comment|/**  * Used to pass information around  *  */
end_comment

begin_class
specifier|public
class|class
name|EntryMessage
implements|implements
name|Externalizable
block|{
specifier|static
enum|enum
name|MessageType
block|{
name|INSERT
block|,
name|DELETE
block|}
empty_stmt|;
specifier|private
name|EntryKey
name|key
decl_stmt|;
specifier|private
name|Object
name|value
decl_stmt|;
specifier|private
name|MessageType
name|type
decl_stmt|;
comment|/**      * @return the owner      */
specifier|public
name|EntryKey
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
comment|/**      * @param owner the owner to set      */
specifier|public
name|void
name|setKey
parameter_list|(
name|EntryKey
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/**      * @return the value      */
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
comment|/**      * @param value the value to set      */
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
comment|/**      * @return the type      */
specifier|public
name|MessageType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * @param type the type to set      */
specifier|public
name|void
name|setType
parameter_list|(
name|MessageType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|this
operator|.
name|key
operator|=
operator|(
name|EntryKey
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
operator|(
name|MessageType
operator|)
name|in
operator|.
name|readObject
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeObject
argument_list|(
name|this
operator|.
name|key
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

