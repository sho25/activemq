begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_comment
comment|/**  * A holder for a durable subscriber  *  *  */
end_comment

begin_class
class|class
name|MemoryTopicSub
block|{
specifier|private
name|Map
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MessageId
name|lastBatch
decl_stmt|;
name|void
name|addMessage
parameter_list|(
name|MessageId
name|id
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|map
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
block|}
name|void
name|removeMessage
parameter_list|(
name|MessageId
name|id
parameter_list|)
block|{
name|Message
name|removed
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|removed
operator|=
name|map
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|lastBatch
operator|!=
literal|null
operator|&&
name|lastBatch
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|)
operator|||
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resetBatching
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|removed
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|synchronized
name|long
name|messageSize
parameter_list|()
block|{
name|long
name|messageSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|messageSize
operator|+=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
return|return
name|messageSize
return|;
block|}
specifier|synchronized
name|void
name|recoverSubscription
parameter_list|(
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
name|msg
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|recoverNextMessages
parameter_list|(
name|int
name|maxReturned
parameter_list|,
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|pastLackBatch
init|=
name|lastBatch
operator|==
literal|null
decl_stmt|;
name|MessageId
name|lastId
init|=
literal|null
decl_stmt|;
comment|// the message table is a synchronizedMap - so just have to synchronize
comment|// here
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
name|count
operator|<
name|maxReturned
condition|;
control|)
block|{
name|Entry
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pastLackBatch
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|Message
name|msg
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|lastId
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pastLackBatch
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|lastBatch
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastId
operator|!=
literal|null
condition|)
block|{
name|lastBatch
operator|=
name|lastId
expr_stmt|;
block|}
block|}
specifier|synchronized
name|void
name|resetBatching
parameter_list|()
block|{
name|lastBatch
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

