begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JavaCC: Do not edit this line. SelectorParserTokenManager.java */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|selector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|filter
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|SelectorParserTokenManager
implements|implements
name|SelectorParserConstants
block|{
specifier|public
name|java
operator|.
name|io
operator|.
name|PrintStream
name|debugStream
init|=
name|System
operator|.
name|out
decl_stmt|;
specifier|public
name|void
name|setDebugStream
parameter_list|(
name|java
operator|.
name|io
operator|.
name|PrintStream
name|ds
parameter_list|)
block|{
name|debugStream
operator|=
name|ds
expr_stmt|;
block|}
specifier|private
specifier|final
name|int
name|jjStopAtPos
parameter_list|(
name|int
name|pos
parameter_list|,
name|int
name|kind
parameter_list|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|pos
expr_stmt|;
return|return
name|pos
operator|+
literal|1
return|;
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa0_0
parameter_list|()
block|{
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|9
case|:
name|jjmatchedKind
operator|=
literal|2
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|10
case|:
name|jjmatchedKind
operator|=
literal|3
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|12
case|:
name|jjmatchedKind
operator|=
literal|5
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|13
case|:
name|jjmatchedKind
operator|=
literal|4
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|32
case|:
name|jjmatchedKind
operator|=
literal|1
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|37
case|:
name|jjmatchedKind
operator|=
literal|41
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|40
case|:
name|jjmatchedKind
operator|=
literal|34
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|41
case|:
name|jjmatchedKind
operator|=
literal|36
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|42
case|:
name|jjmatchedKind
operator|=
literal|39
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|43
case|:
name|jjmatchedKind
operator|=
literal|37
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|44
case|:
name|jjmatchedKind
operator|=
literal|35
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|45
case|:
name|jjmatchedKind
operator|=
literal|38
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|47
case|:
name|jjmatchedKind
operator|=
literal|40
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|60
case|:
name|jjmatchedKind
operator|=
literal|32
expr_stmt|;
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x220000000L
argument_list|)
return|;
case|case
literal|61
case|:
name|jjmatchedKind
operator|=
literal|28
expr_stmt|;
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
case|case
literal|62
case|:
name|jjmatchedKind
operator|=
literal|30
expr_stmt|;
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x80000000L
argument_list|)
return|;
case|case
literal|65
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x200L
argument_list|)
return|;
case|case
literal|66
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x800L
argument_list|)
return|;
case|case
literal|69
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x2000L
argument_list|)
return|;
case|case
literal|70
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x20000L
argument_list|)
return|;
case|case
literal|73
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0xc000L
argument_list|)
return|;
case|case
literal|76
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x1000L
argument_list|)
return|;
case|case
literal|78
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x40100L
argument_list|)
return|;
case|case
literal|79
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x400L
argument_list|)
return|;
case|case
literal|84
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x10000L
argument_list|)
return|;
case|case
literal|88
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x180000L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x200L
argument_list|)
return|;
case|case
literal|98
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x800L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x2000L
argument_list|)
return|;
case|case
literal|102
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x20000L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0xc000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x1000L
argument_list|)
return|;
case|case
literal|110
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x40100L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x400L
argument_list|)
return|;
case|case
literal|116
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x10000L
argument_list|)
return|;
case|case
literal|120
case|:
return|return
name|jjMoveStringLiteralDfa1_0
argument_list|(
literal|0x180000L
argument_list|)
return|;
default|default :
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa1_0
parameter_list|(
name|long
name|active0
parameter_list|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|61
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|31
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200000000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|33
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
literal|62
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20000000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|29
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
break|break;
case|case
literal|65
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x20000L
argument_list|)
return|;
case|case
literal|69
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|73
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x1000L
argument_list|)
return|;
case|case
literal|78
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x4000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|14
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x200L
argument_list|)
return|;
case|case
literal|79
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x100L
argument_list|)
return|;
case|case
literal|80
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
case|case
literal|81
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|82
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x400L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|10
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x10000L
argument_list|)
return|;
case|case
literal|83
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|15
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|85
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x40000L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x20000L
argument_list|)
return|;
case|case
literal|101
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|105
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x1000L
argument_list|)
return|;
case|case
literal|110
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x4000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|14
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x200L
argument_list|)
return|;
case|case
literal|111
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x100L
argument_list|)
return|;
case|case
literal|112
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
case|case
literal|113
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|114
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x400L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|10
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x10000L
argument_list|)
return|;
case|case
literal|115
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x8000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|15
expr_stmt|;
name|jjmatchedPos
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa2_0
argument_list|(
name|active0
argument_list|,
literal|0x40000L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa2_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|1
argument_list|)
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|65
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
case|case
literal|67
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|68
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|9
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
literal|75
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x1000L
argument_list|)
return|;
case|case
literal|76
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x60000L
argument_list|)
return|;
case|case
literal|84
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|8
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|85
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x110000L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
case|case
literal|99
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|100
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x200L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|9
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
block|}
break|break;
case|case
literal|107
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x1000L
argument_list|)
return|;
case|case
literal|108
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x60000L
argument_list|)
return|;
case|case
literal|116
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|8
expr_stmt|;
name|jjmatchedPos
operator|=
literal|2
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|117
case|:
return|return
name|jjMoveStringLiteralDfa3_0
argument_list|(
name|active0
argument_list|,
literal|0x110000L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa3_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|2
argument_list|)
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|65
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|69
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x1000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|12
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x10000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|16
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|76
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|18
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
block|}
break|break;
case|case
literal|83
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x20000L
argument_list|)
return|;
case|case
literal|84
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
case|case
literal|87
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|97
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x1000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|12
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x10000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|16
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|108
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x40000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|18
expr_stmt|;
name|jjmatchedPos
operator|=
literal|3
expr_stmt|;
block|}
break|break;
case|case
literal|115
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x20000L
argument_list|)
return|;
case|case
literal|116
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x80000L
argument_list|)
return|;
case|case
literal|119
case|:
return|return
name|jjMoveStringLiteralDfa4_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa4_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|69
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|17
expr_stmt|;
name|jjmatchedPos
operator|=
literal|4
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|72
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|19
expr_stmt|;
name|jjmatchedPos
operator|=
literal|4
expr_stmt|;
block|}
break|break;
case|case
literal|80
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|82
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x20000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|17
expr_stmt|;
name|jjmatchedPos
operator|=
literal|4
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|104
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x80000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|19
expr_stmt|;
name|jjmatchedPos
operator|=
literal|4
expr_stmt|;
block|}
break|break;
case|case
literal|112
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x2000L
argument_list|)
return|;
case|case
literal|114
case|:
return|return
name|jjMoveStringLiteralDfa5_0
argument_list|(
name|active0
argument_list|,
literal|0x100000L
argument_list|)
return|;
default|default :
break|break;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa5_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|4
argument_list|)
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|69
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x2000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|13
expr_stmt|;
name|jjmatchedPos
operator|=
literal|5
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|89
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|20
expr_stmt|;
name|jjmatchedPos
operator|=
literal|5
expr_stmt|;
block|}
break|break;
case|case
literal|101
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x2000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|13
expr_stmt|;
name|jjmatchedPos
operator|=
literal|5
expr_stmt|;
block|}
return|return
name|jjMoveStringLiteralDfa6_0
argument_list|(
name|active0
argument_list|,
literal|0x800L
argument_list|)
return|;
case|case
literal|121
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x100000L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|20
expr_stmt|;
name|jjmatchedPos
operator|=
literal|5
expr_stmt|;
block|}
break|break;
default|default :
break|break;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|int
name|jjMoveStringLiteralDfa6_0
parameter_list|(
name|long
name|old0
parameter_list|,
name|long
name|active0
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|(
name|active0
operator|&=
name|old0
operator|)
operator|)
operator|==
literal|0L
condition|)
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
return|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
return|;
block|}
switch|switch
condition|(
name|curChar
condition|)
block|{
case|case
literal|78
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x800L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|11
expr_stmt|;
name|jjmatchedPos
operator|=
literal|6
expr_stmt|;
block|}
break|break;
case|case
literal|110
case|:
if|if
condition|(
operator|(
name|active0
operator|&
literal|0x800L
operator|)
operator|!=
literal|0L
condition|)
block|{
name|jjmatchedKind
operator|=
literal|11
expr_stmt|;
name|jjmatchedPos
operator|=
literal|6
expr_stmt|;
block|}
break|break;
default|default :
break|break;
block|}
return|return
name|jjMoveNfa_0
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAdd
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|jjrounds
index|[
name|state
index|]
operator|!=
name|jjround
condition|)
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|state
expr_stmt|;
name|jjrounds
index|[
name|state
index|]
operator|=
name|jjround
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|jjAddStates
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
do|do
block|{
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
name|jjnextStates
index|[
name|start
index|]
expr_stmt|;
block|}
do|while
condition|(
name|start
operator|++
operator|!=
name|end
condition|)
do|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAddTwoStates
parameter_list|(
name|int
name|state1
parameter_list|,
name|int
name|state2
parameter_list|)
block|{
name|jjCheckNAdd
argument_list|(
name|state1
argument_list|)
expr_stmt|;
name|jjCheckNAdd
argument_list|(
name|state2
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAddStates
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
do|do
block|{
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|start
operator|++
operator|!=
name|end
condition|)
do|;
block|}
specifier|private
specifier|final
name|void
name|jjCheckNAddStates
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
index|]
argument_list|)
expr_stmt|;
name|jjCheckNAdd
argument_list|(
name|jjnextStates
index|[
name|start
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec0
init|=
block|{
literal|0xfffffffffffffffeL
block|,
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|}
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjbitVec2
init|=
block|{
literal|0x0L
block|,
literal|0x0L
block|,
literal|0xffffffffffffffffL
block|,
literal|0xffffffffffffffffL
block|}
decl_stmt|;
specifier|private
specifier|final
name|int
name|jjMoveNfa_0
parameter_list|(
name|int
name|startState
parameter_list|,
name|int
name|curPos
parameter_list|)
block|{
name|int
name|strKind
init|=
name|jjmatchedKind
decl_stmt|;
name|int
name|strPos
init|=
name|jjmatchedPos
decl_stmt|;
name|int
name|seenUpto
decl_stmt|;
name|input_stream
operator|.
name|backup
argument_list|(
name|seenUpto
operator|=
name|curPos
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Internal Error"
argument_list|)
throw|;
block|}
name|curPos
operator|=
literal|0
expr_stmt|;
name|int
index|[]
name|nextStates
decl_stmt|;
name|int
name|startsAt
init|=
literal|0
decl_stmt|;
name|jjnewStateCnt
operator|=
literal|43
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|jjstateSet
index|[
literal|0
index|]
operator|=
name|startState
expr_stmt|;
name|int
name|j
decl_stmt|,
name|kind
init|=
literal|0x7fffffff
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
operator|++
name|jjround
operator|==
literal|0x7fffffff
condition|)
name|ReInitRounds
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|<
literal|64
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
name|curChar
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|5
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|36
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|27
condition|)
name|kind
operator|=
literal|27
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|27
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|39
condition|)
name|jjCheckNAddStates
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|46
condition|)
name|jjCheckNAdd
argument_list|(
literal|17
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|47
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|6
expr_stmt|;
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|45
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
literal|0x3fe000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|21
condition|)
name|kind
operator|=
literal|21
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|==
literal|48
condition|)
block|{
if|if
condition|(
name|kind
operator|>
literal|23
condition|)
name|kind
operator|=
literal|23
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|40
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|0
case|:
if|if
condition|(
name|curChar
operator|==
literal|45
condition|)
name|jjCheckNAddStates
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
if|if
condition|(
operator|(
literal|0xffffffffffffdbffL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
operator|(
literal|0x2400L
operator|&
name|l
operator|)
operator|!=
literal|0L
operator|&&
name|kind
operator|>
literal|6
condition|)
name|kind
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|curChar
operator|==
literal|10
operator|&&
name|kind
operator|>
literal|6
condition|)
name|kind
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|curChar
operator|==
literal|13
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|3
expr_stmt|;
break|break;
case|case
literal|6
case|:
if|if
condition|(
name|curChar
operator|==
literal|42
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
if|if
condition|(
operator|(
literal|0xfffffbffffffffffL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
if|if
condition|(
name|curChar
operator|==
literal|42
condition|)
name|jjCheckNAddStates
argument_list|(
literal|10
argument_list|,
literal|12
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
if|if
condition|(
operator|(
literal|0xffff7bffffffffffL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
if|if
condition|(
operator|(
literal|0xfffffbffffffffffL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
if|if
condition|(
name|curChar
operator|==
literal|47
operator|&&
name|kind
operator|>
literal|7
condition|)
name|kind
operator|=
literal|7
expr_stmt|;
break|break;
case|case
literal|12
case|:
if|if
condition|(
name|curChar
operator|==
literal|47
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|6
expr_stmt|;
break|break;
case|case
literal|13
case|:
if|if
condition|(
operator|(
literal|0x3fe000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|21
condition|)
name|kind
operator|=
literal|21
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|21
condition|)
name|kind
operator|=
literal|21
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|14
argument_list|,
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
if|if
condition|(
name|curChar
operator|==
literal|46
condition|)
name|jjCheckNAdd
argument_list|(
literal|17
argument_list|)
expr_stmt|;
break|break;
case|case
literal|17
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|24
condition|)
name|kind
operator|=
literal|24
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|17
argument_list|,
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
literal|19
case|:
if|if
condition|(
operator|(
literal|0x280000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|20
argument_list|)
expr_stmt|;
break|break;
case|case
literal|20
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|24
condition|)
name|kind
operator|=
literal|24
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|20
argument_list|)
expr_stmt|;
break|break;
case|case
literal|21
case|:
case|case
literal|22
case|:
if|if
condition|(
name|curChar
operator|==
literal|39
condition|)
name|jjCheckNAddStates
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|23
case|:
if|if
condition|(
name|curChar
operator|==
literal|39
condition|)
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|22
expr_stmt|;
break|break;
case|case
literal|24
case|:
if|if
condition|(
operator|(
literal|0xffffff7fffffffffL
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|25
case|:
if|if
condition|(
name|curChar
operator|==
literal|39
operator|&&
name|kind
operator|>
literal|26
condition|)
name|kind
operator|=
literal|26
expr_stmt|;
break|break;
case|case
literal|26
case|:
if|if
condition|(
name|curChar
operator|!=
literal|36
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|27
condition|)
name|kind
operator|=
literal|27
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|27
argument_list|)
expr_stmt|;
break|break;
case|case
literal|27
case|:
if|if
condition|(
operator|(
literal|0x3ff001000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|27
condition|)
name|kind
operator|=
literal|27
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|27
argument_list|)
expr_stmt|;
break|break;
case|case
literal|28
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddStates
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
literal|29
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|29
argument_list|,
literal|30
argument_list|)
expr_stmt|;
break|break;
case|case
literal|30
case|:
if|if
condition|(
name|curChar
operator|!=
literal|46
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|24
condition|)
name|kind
operator|=
literal|24
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|31
argument_list|,
literal|32
argument_list|)
expr_stmt|;
break|break;
case|case
literal|31
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|24
condition|)
name|kind
operator|=
literal|24
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|31
argument_list|,
literal|32
argument_list|)
expr_stmt|;
break|break;
case|case
literal|33
case|:
if|if
condition|(
operator|(
literal|0x280000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|34
argument_list|)
expr_stmt|;
break|break;
case|case
literal|34
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|24
condition|)
name|kind
operator|=
literal|24
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|34
argument_list|)
expr_stmt|;
break|break;
case|case
literal|35
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|35
argument_list|,
literal|36
argument_list|)
expr_stmt|;
break|break;
case|case
literal|37
case|:
if|if
condition|(
operator|(
literal|0x280000000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|38
argument_list|)
expr_stmt|;
break|break;
case|case
literal|38
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|24
condition|)
name|kind
operator|=
literal|24
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|38
argument_list|)
expr_stmt|;
break|break;
case|case
literal|39
case|:
if|if
condition|(
name|curChar
operator|!=
literal|48
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|23
condition|)
name|kind
operator|=
literal|23
expr_stmt|;
name|jjCheckNAddTwoStates
argument_list|(
literal|40
argument_list|,
literal|42
argument_list|)
expr_stmt|;
break|break;
case|case
literal|41
case|:
if|if
condition|(
operator|(
literal|0x3ff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|22
condition|)
name|kind
operator|=
literal|22
expr_stmt|;
name|jjstateSet
index|[
name|jjnewStateCnt
operator|++
index|]
operator|=
literal|41
expr_stmt|;
break|break;
case|case
literal|42
case|:
if|if
condition|(
operator|(
literal|0xff000000000000L
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|23
condition|)
name|kind
operator|=
literal|23
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|42
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
elseif|else
if|if
condition|(
name|curChar
operator|<
literal|128
condition|)
block|{
name|long
name|l
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|5
case|:
case|case
literal|27
case|:
if|if
condition|(
operator|(
literal|0x7fffffe87fffffeL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|27
condition|)
name|kind
operator|=
literal|27
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|27
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|jjAddStates
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|jjCheckNAddTwoStates
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
case|case
literal|10
case|:
name|jjCheckNAddTwoStates
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
if|if
condition|(
operator|(
literal|0x100000001000L
operator|&
name|l
operator|)
operator|!=
literal|0L
operator|&&
name|kind
operator|>
literal|21
condition|)
name|kind
operator|=
literal|21
expr_stmt|;
break|break;
case|case
literal|18
case|:
if|if
condition|(
operator|(
literal|0x2000000020L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|13
argument_list|,
literal|14
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|jjAddStates
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
literal|32
case|:
if|if
condition|(
operator|(
literal|0x2000000020L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|15
argument_list|,
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
literal|36
case|:
if|if
condition|(
operator|(
literal|0x2000000020L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjAddStates
argument_list|(
literal|17
argument_list|,
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
literal|40
case|:
if|if
condition|(
operator|(
literal|0x100000001000000L
operator|&
name|l
operator|)
operator|!=
literal|0L
condition|)
name|jjCheckNAdd
argument_list|(
literal|41
argument_list|)
expr_stmt|;
break|break;
case|case
literal|41
case|:
if|if
condition|(
operator|(
literal|0x7e0000007eL
operator|&
name|l
operator|)
operator|==
literal|0L
condition|)
break|break;
if|if
condition|(
name|kind
operator|>
literal|22
condition|)
name|kind
operator|=
literal|22
expr_stmt|;
name|jjCheckNAdd
argument_list|(
literal|41
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
else|else
block|{
name|int
name|hiByte
init|=
call|(
name|int
call|)
argument_list|(
name|curChar
operator|>>
literal|8
argument_list|)
decl_stmt|;
name|int
name|i1
init|=
name|hiByte
operator|>>
literal|6
decl_stmt|;
name|long
name|l1
init|=
literal|1L
operator|<<
operator|(
name|hiByte
operator|&
literal|077
operator|)
decl_stmt|;
name|int
name|i2
init|=
operator|(
name|curChar
operator|&
literal|0xff
operator|)
operator|>>
literal|6
decl_stmt|;
name|long
name|l2
init|=
literal|1L
operator|<<
operator|(
name|curChar
operator|&
literal|077
operator|)
decl_stmt|;
name|MatchLoop
label|:
do|do
block|{
switch|switch
condition|(
name|jjstateSet
index|[
operator|--
name|i
index|]
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
case|case
literal|10
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjCheckNAddTwoStates
argument_list|(
literal|10
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
if|if
condition|(
name|jjCanMove_0
argument_list|(
name|hiByte
argument_list|,
name|i1
argument_list|,
name|i2
argument_list|,
name|l1
argument_list|,
name|l2
argument_list|)
condition|)
name|jjAddStates
argument_list|(
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
break|break;
default|default :
break|break;
block|}
block|}
do|while
condition|(
name|i
operator|!=
name|startsAt
condition|)
do|;
block|}
if|if
condition|(
name|kind
operator|!=
literal|0x7fffffff
condition|)
block|{
name|jjmatchedKind
operator|=
name|kind
expr_stmt|;
name|jjmatchedPos
operator|=
name|curPos
expr_stmt|;
name|kind
operator|=
literal|0x7fffffff
expr_stmt|;
block|}
operator|++
name|curPos
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|=
name|jjnewStateCnt
operator|)
operator|==
operator|(
name|startsAt
operator|=
literal|43
operator|-
operator|(
name|jjnewStateCnt
operator|=
name|startsAt
operator|)
operator|)
condition|)
break|break;
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|jjmatchedPos
operator|>
name|strPos
condition|)
return|return
name|curPos
return|;
name|int
name|toRet
init|=
name|Math
operator|.
name|max
argument_list|(
name|curPos
argument_list|,
name|seenUpto
argument_list|)
decl_stmt|;
if|if
condition|(
name|curPos
operator|<
name|toRet
condition|)
for|for
control|(
name|i
operator|=
name|toRet
operator|-
name|Math
operator|.
name|min
argument_list|(
name|curPos
argument_list|,
name|seenUpto
argument_list|)
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Internal Error : Please send a bug report."
argument_list|)
throw|;
block|}
if|if
condition|(
name|jjmatchedPos
operator|<
name|strPos
condition|)
block|{
name|jjmatchedKind
operator|=
name|strKind
expr_stmt|;
name|jjmatchedPos
operator|=
name|strPos
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|jjmatchedPos
operator|==
name|strPos
operator|&&
name|jjmatchedKind
operator|>
name|strKind
condition|)
name|jjmatchedKind
operator|=
name|strKind
expr_stmt|;
return|return
name|toRet
return|;
block|}
specifier|static
specifier|final
name|int
index|[]
name|jjnextStates
init|=
block|{
literal|29
block|,
literal|30
block|,
literal|35
block|,
literal|36
block|,
literal|23
block|,
literal|24
block|,
literal|25
block|,
literal|1
block|,
literal|2
block|,
literal|4
block|,
literal|8
block|,
literal|9
block|,
literal|11
block|,
literal|19
block|,
literal|20
block|,
literal|33
block|,
literal|34
block|,
literal|37
block|,
literal|38
block|,  }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|jjCanMove_0
parameter_list|(
name|int
name|hiByte
parameter_list|,
name|int
name|i1
parameter_list|,
name|int
name|i2
parameter_list|,
name|long
name|l1
parameter_list|,
name|long
name|l2
parameter_list|)
block|{
switch|switch
condition|(
name|hiByte
condition|)
block|{
case|case
literal|0
case|:
return|return
operator|(
operator|(
name|jjbitVec2
index|[
name|i2
index|]
operator|&
name|l2
operator|)
operator|!=
literal|0L
operator|)
return|;
default|default :
if|if
condition|(
operator|(
name|jjbitVec0
index|[
name|i1
index|]
operator|&
name|l1
operator|)
operator|!=
literal|0L
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|jjstrLiteralImages
init|=
block|{
literal|""
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|null
block|,
literal|"\75"
block|,
literal|"\74\76"
block|,
literal|"\76"
block|,
literal|"\76\75"
block|,
literal|"\74"
block|,
literal|"\74\75"
block|,
literal|"\50"
block|,
literal|"\54"
block|,
literal|"\51"
block|,
literal|"\53"
block|,
literal|"\55"
block|,
literal|"\52"
block|,
literal|"\57"
block|,
literal|"\45"
block|, }
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|lexStateNames
init|=
block|{
literal|"DEFAULT"
block|,  }
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoToken
init|=
block|{
literal|0x3fffdffff01L
block|,  }
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoSkip
init|=
block|{
literal|0xfeL
block|,  }
decl_stmt|;
specifier|static
specifier|final
name|long
index|[]
name|jjtoSpecial
init|=
block|{
literal|0x3eL
block|,  }
decl_stmt|;
specifier|protected
name|SimpleCharStream
name|input_stream
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|jjrounds
init|=
operator|new
name|int
index|[
literal|43
index|]
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|jjstateSet
init|=
operator|new
name|int
index|[
literal|86
index|]
decl_stmt|;
specifier|protected
name|char
name|curChar
decl_stmt|;
specifier|public
name|SelectorParserTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
if|if
condition|(
name|SimpleCharStream
operator|.
name|staticFlag
condition|)
throw|throw
operator|new
name|Error
argument_list|(
literal|"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer."
argument_list|)
throw|;
name|input_stream
operator|=
name|stream
expr_stmt|;
block|}
specifier|public
name|SelectorParserTokenManager
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|)
block|{
name|jjmatchedPos
operator|=
name|jjnewStateCnt
operator|=
literal|0
expr_stmt|;
name|curLexState
operator|=
name|defaultLexState
expr_stmt|;
name|input_stream
operator|=
name|stream
expr_stmt|;
name|ReInitRounds
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
name|void
name|ReInitRounds
parameter_list|()
block|{
name|int
name|i
decl_stmt|;
name|jjround
operator|=
literal|0x80000001
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|43
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
name|jjrounds
index|[
name|i
index|]
operator|=
literal|0x80000000
expr_stmt|;
block|}
specifier|public
name|void
name|ReInit
parameter_list|(
name|SimpleCharStream
name|stream
parameter_list|,
name|int
name|lexState
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|SwitchTo
argument_list|(
name|lexState
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|SwitchTo
parameter_list|(
name|int
name|lexState
parameter_list|)
block|{
if|if
condition|(
name|lexState
operator|>=
literal|1
operator|||
name|lexState
operator|<
literal|0
condition|)
throw|throw
operator|new
name|TokenMgrError
argument_list|(
literal|"Error: Ignoring invalid lexical state : "
operator|+
name|lexState
operator|+
literal|". State unchanged."
argument_list|,
name|TokenMgrError
operator|.
name|INVALID_LEXICAL_STATE
argument_list|)
throw|;
else|else
name|curLexState
operator|=
name|lexState
expr_stmt|;
block|}
specifier|protected
name|Token
name|jjFillToken
parameter_list|()
block|{
name|Token
name|t
init|=
name|Token
operator|.
name|newToken
argument_list|(
name|jjmatchedKind
argument_list|)
decl_stmt|;
name|t
operator|.
name|kind
operator|=
name|jjmatchedKind
expr_stmt|;
name|String
name|im
init|=
name|jjstrLiteralImages
index|[
name|jjmatchedKind
index|]
decl_stmt|;
name|t
operator|.
name|image
operator|=
operator|(
name|im
operator|==
literal|null
operator|)
condition|?
name|input_stream
operator|.
name|GetImage
argument_list|()
else|:
name|im
expr_stmt|;
name|t
operator|.
name|beginLine
operator|=
name|input_stream
operator|.
name|getBeginLine
argument_list|()
expr_stmt|;
name|t
operator|.
name|beginColumn
operator|=
name|input_stream
operator|.
name|getBeginColumn
argument_list|()
expr_stmt|;
name|t
operator|.
name|endLine
operator|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
expr_stmt|;
name|t
operator|.
name|endColumn
operator|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
name|int
name|curLexState
init|=
literal|0
decl_stmt|;
name|int
name|defaultLexState
init|=
literal|0
decl_stmt|;
name|int
name|jjnewStateCnt
decl_stmt|;
name|int
name|jjround
decl_stmt|;
name|int
name|jjmatchedPos
decl_stmt|;
name|int
name|jjmatchedKind
decl_stmt|;
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
name|int
name|kind
decl_stmt|;
name|Token
name|specialToken
init|=
literal|null
decl_stmt|;
name|Token
name|matchedToken
decl_stmt|;
name|int
name|curPos
init|=
literal|0
decl_stmt|;
name|EOFLoop
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
name|curChar
operator|=
name|input_stream
operator|.
name|BeginToken
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e
parameter_list|)
block|{
name|jjmatchedKind
operator|=
literal|0
expr_stmt|;
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
name|matchedToken
operator|.
name|specialToken
operator|=
name|specialToken
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
name|jjmatchedKind
operator|=
literal|0x7fffffff
expr_stmt|;
name|jjmatchedPos
operator|=
literal|0
expr_stmt|;
name|curPos
operator|=
name|jjMoveStringLiteralDfa0_0
argument_list|()
expr_stmt|;
if|if
condition|(
name|jjmatchedKind
operator|!=
literal|0x7fffffff
condition|)
block|{
if|if
condition|(
name|jjmatchedPos
operator|+
literal|1
operator|<
name|curPos
condition|)
name|input_stream
operator|.
name|backup
argument_list|(
name|curPos
operator|-
name|jjmatchedPos
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|jjtoToken
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
name|matchedToken
operator|.
name|specialToken
operator|=
name|specialToken
expr_stmt|;
return|return
name|matchedToken
return|;
block|}
else|else
block|{
if|if
condition|(
operator|(
name|jjtoSpecial
index|[
name|jjmatchedKind
operator|>>
literal|6
index|]
operator|&
operator|(
literal|1L
operator|<<
operator|(
name|jjmatchedKind
operator|&
literal|077
operator|)
operator|)
operator|)
operator|!=
literal|0L
condition|)
block|{
name|matchedToken
operator|=
name|jjFillToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|specialToken
operator|==
literal|null
condition|)
name|specialToken
operator|=
name|matchedToken
expr_stmt|;
else|else
block|{
name|matchedToken
operator|.
name|specialToken
operator|=
name|specialToken
expr_stmt|;
name|specialToken
operator|=
operator|(
name|specialToken
operator|.
name|next
operator|=
name|matchedToken
operator|)
expr_stmt|;
block|}
block|}
continue|continue
name|EOFLoop
continue|;
block|}
block|}
name|int
name|error_line
init|=
name|input_stream
operator|.
name|getEndLine
argument_list|()
decl_stmt|;
name|int
name|error_column
init|=
name|input_stream
operator|.
name|getEndColumn
argument_list|()
decl_stmt|;
name|String
name|error_after
init|=
literal|null
decl_stmt|;
name|boolean
name|EOFSeen
init|=
literal|false
decl_stmt|;
try|try
block|{
name|input_stream
operator|.
name|readChar
argument_list|()
expr_stmt|;
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|e1
parameter_list|)
block|{
name|EOFSeen
operator|=
literal|true
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
if|if
condition|(
name|curChar
operator|==
literal|'\n'
operator|||
name|curChar
operator|==
literal|'\r'
condition|)
block|{
name|error_line
operator|++
expr_stmt|;
name|error_column
operator|=
literal|0
expr_stmt|;
block|}
else|else
name|error_column
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|EOFSeen
condition|)
block|{
name|input_stream
operator|.
name|backup
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|error_after
operator|=
name|curPos
operator|<=
literal|1
condition|?
literal|""
else|:
name|input_stream
operator|.
name|GetImage
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|TokenMgrError
argument_list|(
name|EOFSeen
argument_list|,
name|curLexState
argument_list|,
name|error_line
argument_list|,
name|error_column
argument_list|,
name|error_after
argument_list|,
name|curChar
argument_list|,
name|TokenMgrError
operator|.
name|LEXICAL_ERROR
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

