begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|auto
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|auto
operator|.
name|AutoTcpTransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
operator|.
name|AutoInitNioSSLTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
operator|.
name|NIOSSLTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
operator|.
name|InitBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_class
specifier|public
class|class
name|AutoNIOSSLTransportServer
extends|extends
name|AutoTcpTransportServer
block|{
specifier|private
name|SSLContext
name|context
decl_stmt|;
specifier|public
name|AutoNIOSSLTransportServer
parameter_list|(
name|SSLContext
name|context
parameter_list|,
name|TcpTransportFactory
name|transportFactory
parameter_list|,
name|URI
name|location
parameter_list|,
name|ServerSocketFactory
name|serverSocketFactory
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|enabledProtocols
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|super
argument_list|(
name|transportFactory
argument_list|,
name|location
argument_list|,
name|serverSocketFactory
argument_list|,
name|brokerService
argument_list|,
name|enabledProtocols
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|private
name|boolean
name|needClientAuth
decl_stmt|;
specifier|private
name|boolean
name|wantClientAuth
decl_stmt|;
specifier|protected
name|Transport
name|createTransport
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|SSLEngine
name|engine
parameter_list|,
name|InitBuffer
name|initBuffer
parameter_list|,
name|ByteBuffer
name|inputBuffer
parameter_list|,
name|TcpTransportFactory
name|detectedFactory
parameter_list|)
throws|throws
name|IOException
block|{
name|NIOSSLTransport
name|transport
init|=
operator|new
name|NIOSSLTransport
argument_list|(
name|format
argument_list|,
name|socket
argument_list|,
name|engine
argument_list|,
name|initBuffer
argument_list|,
name|inputBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|setSslContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|setNeedClientAuth
argument_list|(
name|needClientAuth
argument_list|)
expr_stmt|;
name|transport
operator|.
name|setWantClientAuth
argument_list|(
name|wantClientAuth
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TcpTransport
name|createTransport
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|WireFormat
name|format
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"method not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSslServer
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isNeedClientAuth
parameter_list|()
block|{
return|return
name|this
operator|.
name|needClientAuth
return|;
block|}
specifier|public
name|void
name|setNeedClientAuth
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|needClientAuth
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWantClientAuth
parameter_list|()
block|{
return|return
name|this
operator|.
name|wantClientAuth
return|;
block|}
specifier|public
name|void
name|setWantClientAuth
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|wantClientAuth
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|TransportInfo
name|configureTransport
parameter_list|(
specifier|final
name|TcpTransportServer
name|server
parameter_list|,
specifier|final
name|Socket
name|socket
parameter_list|)
throws|throws
name|Exception
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
comment|//The SSLEngine needs to be initialized and handshake done to get the first command and detect the format
comment|//The wireformat doesn't need properties set here because we aren't using this format during the SSL handshake
specifier|final
name|AutoInitNioSSLTransport
name|in
init|=
operator|new
name|AutoInitNioSSLTransport
argument_list|(
name|wireFormatFactory
operator|.
name|createWireFormat
argument_list|()
argument_list|,
name|socket
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|setSslContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|//We need to set the transport options on the init transport so that the SSL options are set
if|if
condition|(
name|transportOptions
operator|!=
literal|null
condition|)
block|{
comment|//Clone the map because we will need to set the options later on the actual transport
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|in
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|transportOptions
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|start
argument_list|()
expr_stmt|;
name|SSLEngine
name|engine
init|=
name|in
operator|.
name|getSslSession
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|//Wait for handshake to finish initializing
do|do
block|{
name|in
operator|.
name|serviceRead
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|in
operator|.
name|getReadSize
argument_list|()
operator|.
name|get
argument_list|()
operator|<
literal|8
condition|)
do|;
block|}
block|}
argument_list|)
decl_stmt|;
name|waitForProtocolDetectionFinish
argument_list|(
name|future
argument_list|,
name|in
operator|.
name|getReadSize
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|.
name|stop
argument_list|()
expr_stmt|;
name|initBuffer
operator|=
operator|new
name|InitBuffer
argument_list|(
name|in
operator|.
name|getReadSize
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|in
operator|.
name|getReadData
argument_list|()
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|initBuffer
operator|.
name|buffer
operator|.
name|put
argument_list|(
name|in
operator|.
name|getReadData
argument_list|()
argument_list|)
expr_stmt|;
name|ProtocolInfo
name|protocolInfo
init|=
name|detectProtocol
argument_list|(
name|in
operator|.
name|getReadData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|protocolInfo
operator|.
name|detectedTransportFactory
operator|instanceof
name|BrokerServiceAware
condition|)
block|{
operator|(
operator|(
name|BrokerServiceAware
operator|)
name|protocolInfo
operator|.
name|detectedTransportFactory
operator|)
operator|.
name|setBrokerService
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
block|}
name|WireFormat
name|format
init|=
name|protocolInfo
operator|.
name|detectedWireFormatFactory
operator|.
name|createWireFormat
argument_list|()
decl_stmt|;
name|Transport
name|transport
init|=
name|createTransport
argument_list|(
name|socket
argument_list|,
name|format
argument_list|,
name|engine
argument_list|,
name|initBuffer
argument_list|,
name|in
operator|.
name|getInputBuffer
argument_list|()
argument_list|,
name|protocolInfo
operator|.
name|detectedTransportFactory
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportInfo
argument_list|(
name|format
argument_list|,
name|transport
argument_list|,
name|protocolInfo
operator|.
name|detectedTransportFactory
argument_list|)
return|;
block|}
block|}
end_class

end_unit

