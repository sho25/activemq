begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PfcTimeoutTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PfcTimeoutTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRANSPORT_URL
init|=
literal|"tcp://0.0.0.0:0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESTINATION
init|=
literal|"testQ1"
decl_stmt|;
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
name|PolicyEntry
name|pe
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|pe
operator|.
name|setProducerFlowControl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setMemoryLimit
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// needs to be> 100% such that any pending send that is less that 100% and pushed usage over 100% can
comment|// still get cached by the cursor and retain the message in memory
name|pe
operator|.
name|setCursorMemoryHighWaterMark
argument_list|(
literal|140
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pe
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|pe
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|TRANSPORT_URL
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|broker
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactedSendWithTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBroker
argument_list|()
decl_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|CountDownLatch
name|gotTimeoutException
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|sendTimeout
init|=
literal|5000
decl_stmt|;
comment|//send 3 messages that will trigger producer flow and the 3rd send
comment|// times out after 10 seconds and rollback transaction
name|sendMessages
argument_list|(
name|broker
argument_list|,
name|gotTimeoutException
argument_list|,
name|sendTimeout
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|gotTimeoutException
operator|.
name|await
argument_list|(
name|sendTimeout
operator|*
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTransactedSendWithTimeoutRollbackUsage
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBroker
argument_list|()
decl_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|CountDownLatch
name|gotTimeoutException
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|sendTimeout
init|=
literal|5000
decl_stmt|;
comment|//send 3 messages that will trigger producer flow and the 3rd send
comment|// times out after 10 seconds and rollback transaction
name|int
name|numberOfMessageSent
init|=
name|sendMessages
argument_list|(
name|broker
argument_list|,
name|gotTimeoutException
argument_list|,
name|sendTimeout
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|gotTimeoutException
operator|.
name|await
argument_list|(
name|sendTimeout
operator|*
literal|2
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|//empty queue by consuming contents
name|consumeMessages
argument_list|(
name|broker
argument_list|,
name|numberOfMessageSent
argument_list|)
expr_stmt|;
name|QueueView
name|queueView
init|=
name|getQueueView
argument_list|(
name|broker
argument_list|,
name|DESTINATION
argument_list|)
decl_stmt|;
name|long
name|queueSize
init|=
name|queueView
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|long
name|memoryUsage
init|=
name|queueView
operator|.
name|getCursorMemoryUsage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"queueSize after test = "
operator|+
name|queueSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"memoryUsage after test = "
operator|+
name|memoryUsage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue size after test "
argument_list|,
literal|0
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"memory size after test "
argument_list|,
literal|0
argument_list|,
name|memoryUsage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|sendMessages
parameter_list|(
specifier|final
name|BrokerService
name|broker
parameter_list|,
specifier|final
name|CountDownLatch
name|gotTimeoutException
parameter_list|,
name|int
name|sendTimeeOut
parameter_list|,
name|int
name|messageCount
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numberOfMessageSent
init|=
literal|0
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
name|newConnectionFactory
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setSendTimeout
argument_list|(
name|sendTimeeOut
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|producerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
try|try
block|{
name|MessageProducer
name|jmsProducer
init|=
name|producerSession
operator|.
name|createProducer
argument_list|(
name|producerSession
operator|.
name|createQueue
argument_list|(
name|DESTINATION
argument_list|)
argument_list|)
decl_stmt|;
name|Message
name|sendMessage
init|=
name|producerSession
operator|.
name|createTextMessage
argument_list|(
name|createTextMessage
argument_list|(
literal|5000
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|jmsProducer
operator|.
name|send
argument_list|(
name|sendMessage
argument_list|)
expr_stmt|;
name|producerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|numberOfMessageSent
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|" Finished after producing : "
operator|+
name|numberOfMessageSent
argument_list|)
expr_stmt|;
return|return
name|numberOfMessageSent
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception received producing "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finishing after exception :"
operator|+
name|numberOfMessageSent
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"rolling back current transaction "
argument_list|)
expr_stmt|;
name|gotTimeoutException
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|producerSession
operator|.
name|rollback
argument_list|()
expr_stmt|;
return|return
name|numberOfMessageSent
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|createTextMessage
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"9"
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|ActiveMQConnectionFactory
name|newConnectionFactory
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|result
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
argument_list|,
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|int
name|consumeMessages
parameter_list|(
name|BrokerService
name|broker
parameter_list|,
name|int
name|messageCount
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numberOfMessageConsumed
init|=
literal|0
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
name|newConnectionFactory
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consumerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
try|try
block|{
name|MessageConsumer
name|jmsConsumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|consumerSession
operator|.
name|createQueue
argument_list|(
name|DESTINATION
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|jmsConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|numberOfMessageConsumed
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|" Finished after consuming  : "
operator|+
name|numberOfMessageConsumed
argument_list|)
expr_stmt|;
return|return
name|numberOfMessageConsumed
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception received producing "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"finishing after exception :"
operator|+
name|numberOfMessageConsumed
argument_list|)
expr_stmt|;
return|return
name|numberOfMessageConsumed
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|QueueView
name|getQueueView
parameter_list|(
name|BrokerService
name|broker
parameter_list|,
name|String
name|queueName
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|queueViews
init|=
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getBroker
argument_list|()
operator|.
name|getQueueViews
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectName
name|key
range|:
name|queueViews
operator|.
name|keySet
argument_list|()
control|)
block|{
name|DestinationView
name|destinationView
init|=
name|queueViews
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|destinationView
operator|instanceof
name|QueueView
condition|)
block|{
name|QueueView
name|queueView
init|=
operator|(
name|QueueView
operator|)
name|destinationView
decl_stmt|;
if|if
condition|(
name|queueView
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|queueName
argument_list|)
condition|)
block|{
return|return
name|queueView
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

