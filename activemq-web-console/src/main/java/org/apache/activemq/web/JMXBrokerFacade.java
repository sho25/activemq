begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A {@link BrokerFacade} which uses JMX to communicate with a remote broker  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|JMXBrokerFacade
extends|extends
name|BrokerFacadeSupport
block|{
specifier|private
name|ManagementContext
name|managementContext
decl_stmt|;
specifier|public
name|BrokerViewMBean
name|getBrokerAdmin
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
comment|/** TODO */
block|}
specifier|public
name|void
name|purgeQueue
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
comment|/** TODO */
block|}
specifier|public
name|ManagementContext
name|getManagementContext
parameter_list|()
block|{
if|if
condition|(
name|managementContext
operator|==
literal|null
condition|)
block|{
name|managementContext
operator|=
operator|new
name|ManagementContext
argument_list|()
expr_stmt|;
block|}
return|return
name|managementContext
return|;
block|}
specifier|public
name|void
name|setManagementContext
parameter_list|(
name|ManagementContext
name|managementContext
parameter_list|)
block|{
name|this
operator|.
name|managementContext
operator|=
name|managementContext
expr_stmt|;
block|}
block|}
end_class

end_unit

