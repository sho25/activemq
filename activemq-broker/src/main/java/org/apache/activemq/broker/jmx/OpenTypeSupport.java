begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SlowConsumerEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQStreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|ArrayType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|OpenTypeSupport
block|{
specifier|public
interface|interface
name|OpenTypeFactory
block|{
name|CompositeType
name|getCompositeType
parameter_list|()
throws|throws
name|OpenDataException
function_decl|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|,
name|AbstractOpenTypeFactory
argument_list|>
name|OPEN_TYPE_FACTORIES
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|,
name|AbstractOpenTypeFactory
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|abstract
specifier|static
class|class
name|AbstractOpenTypeFactory
implements|implements
name|OpenTypeFactory
block|{
specifier|private
name|CompositeType
name|compositeType
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|itemNamesList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|itemDescriptionsList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|OpenType
argument_list|>
name|itemTypesList
init|=
operator|new
name|ArrayList
argument_list|<
name|OpenType
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|synchronized
name|CompositeType
name|getCompositeType
parameter_list|()
throws|throws
name|OpenDataException
block|{
if|if
condition|(
name|compositeType
operator|==
literal|null
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
name|compositeType
operator|=
name|createCompositeType
argument_list|()
expr_stmt|;
block|}
return|return
name|compositeType
return|;
block|}
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{         }
specifier|protected
name|CompositeType
name|createCompositeType
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|String
index|[]
name|itemNames
init|=
name|itemNamesList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|itemNamesList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|itemDescriptions
init|=
name|itemDescriptionsList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|itemDescriptionsList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|OpenType
index|[]
name|itemTypes
init|=
name|itemTypesList
operator|.
name|toArray
argument_list|(
operator|new
name|OpenType
index|[
name|itemTypesList
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeType
argument_list|(
name|getTypeName
argument_list|()
argument_list|,
name|getDescription
argument_list|()
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|String
name|getTypeName
parameter_list|()
function_decl|;
specifier|protected
name|void
name|addItem
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|OpenType
name|type
parameter_list|)
block|{
name|itemNamesList
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|itemDescriptionsList
operator|.
name|add
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|itemTypesList
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|getTypeName
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|MessageOpenTypeFactory
extends|extends
name|AbstractOpenTypeFactory
block|{
specifier|protected
name|TabularType
name|stringPropertyTabularType
decl_stmt|;
specifier|protected
name|TabularType
name|booleanPropertyTabularType
decl_stmt|;
specifier|protected
name|TabularType
name|bytePropertyTabularType
decl_stmt|;
specifier|protected
name|TabularType
name|shortPropertyTabularType
decl_stmt|;
specifier|protected
name|TabularType
name|intPropertyTabularType
decl_stmt|;
specifier|protected
name|TabularType
name|longPropertyTabularType
decl_stmt|;
specifier|protected
name|TabularType
name|floatPropertyTabularType
decl_stmt|;
specifier|protected
name|TabularType
name|doublePropertyTabularType
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ActiveMQMessage
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
literal|"JMSCorrelationID"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSDestination"
argument_list|,
literal|"JMSDestination"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSMessageID"
argument_list|,
literal|"JMSMessageID"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSReplyTo"
argument_list|,
literal|"JMSReplyTo"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSType"
argument_list|,
literal|"JMSType"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSDeliveryMode"
argument_list|,
literal|"JMSDeliveryMode"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSExpiration"
argument_list|,
literal|"JMSExpiration"
argument_list|,
name|SimpleType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSPriority"
argument_list|,
literal|"JMSPriority"
argument_list|,
name|SimpleType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSRedelivered"
argument_list|,
literal|"JMSRedelivered"
argument_list|,
name|SimpleType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"JMSTimestamp"
argument_list|,
literal|"JMSTimestamp"
argument_list|,
name|SimpleType
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|JMSXGROUP_ID
argument_list|,
literal|"Message Group ID"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|JMSXGROUP_SEQ
argument_list|,
literal|"Message Group Sequence Number"
argument_list|,
name|SimpleType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|JMSXUSER_ID
argument_list|,
literal|"The user that sent the message"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|BROKER_PATH
argument_list|,
literal|"Brokers traversed"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|ORIGINAL_DESTINATION
argument_list|,
literal|"Original Destination Before Senting To DLQ"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|PROPERTIES
argument_list|,
literal|"User Properties Text"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
comment|// now lets expose the type safe properties
name|stringPropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|booleanPropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|bytePropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|BYTE
argument_list|)
expr_stmt|;
name|shortPropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|SHORT
argument_list|)
expr_stmt|;
name|intPropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|longPropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|floatPropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|doublePropertyTabularType
operator|=
name|createTabularType
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|SimpleType
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|STRING_PROPERTIES
argument_list|,
literal|"User String Properties"
argument_list|,
name|stringPropertyTabularType
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|BOOLEAN_PROPERTIES
argument_list|,
literal|"User Boolean Properties"
argument_list|,
name|booleanPropertyTabularType
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|BYTE_PROPERTIES
argument_list|,
literal|"User Byte Properties"
argument_list|,
name|bytePropertyTabularType
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|SHORT_PROPERTIES
argument_list|,
literal|"User Short Properties"
argument_list|,
name|shortPropertyTabularType
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|INT_PROPERTIES
argument_list|,
literal|"User Integer Properties"
argument_list|,
name|intPropertyTabularType
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|LONG_PROPERTIES
argument_list|,
literal|"User Long Properties"
argument_list|,
name|longPropertyTabularType
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|FLOAT_PROPERTIES
argument_list|,
literal|"User Float Properties"
argument_list|,
name|floatPropertyTabularType
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|DOUBLE_PROPERTIES
argument_list|,
literal|"User Double Properties"
argument_list|,
name|doublePropertyTabularType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|ActiveMQMessage
name|m
init|=
operator|(
name|ActiveMQMessage
operator|)
name|o
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
name|m
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSDestination"
argument_list|,
literal|""
operator|+
name|m
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSMessageID"
argument_list|,
name|m
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSReplyTo"
argument_list|,
name|toString
argument_list|(
name|m
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSType"
argument_list|,
name|m
operator|.
name|getJMSType
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSDeliveryMode"
argument_list|,
name|m
operator|.
name|getJMSDeliveryMode
argument_list|()
operator|==
name|DeliveryMode
operator|.
name|PERSISTENT
condition|?
literal|"PERSISTENT"
else|:
literal|"NON-PERSISTENT"
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSExpiration"
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|getJMSExpiration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSPriority"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSRedelivered"
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"JMSTimestamp"
argument_list|,
operator|new
name|Date
argument_list|(
name|m
operator|.
name|getJMSTimestamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|JMSXGROUP_ID
argument_list|,
name|m
operator|.
name|getGroupID
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|JMSXGROUP_SEQ
argument_list|,
name|m
operator|.
name|getGroupSequence
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|JMSXUSER_ID
argument_list|,
name|m
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BROKER_PATH
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|m
operator|.
name|getBrokerPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|ORIGINAL_DESTINATION
argument_list|,
name|toString
argument_list|(
name|m
operator|.
name|getOriginalDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|PROPERTIES
argument_list|,
literal|""
operator|+
name|m
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|PROPERTIES
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|STRING_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|stringPropertyTabularType
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|STRING_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|stringPropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BOOLEAN_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|booleanPropertyTabularType
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BOOLEAN_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|booleanPropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BYTE_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|bytePropertyTabularType
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BYTE_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|bytePropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|SHORT_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|shortPropertyTabularType
argument_list|,
name|Short
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|SHORT_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|shortPropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|INT_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|intPropertyTabularType
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|INT_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|intPropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|LONG_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|longPropertyTabularType
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|LONG_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|longPropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|FLOAT_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|floatPropertyTabularType
argument_list|,
name|Float
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|FLOAT_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|floatPropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|DOUBLE_PROPERTIES
argument_list|,
name|createTabularData
argument_list|(
name|m
argument_list|,
name|doublePropertyTabularType
argument_list|,
name|Double
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|DOUBLE_PROPERTIES
argument_list|,
operator|new
name|TabularDataSupport
argument_list|(
name|doublePropertyTabularType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|protected
name|String
name|toString
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
parameter_list|<
name|T
parameter_list|>
name|TabularType
name|createTabularType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|OpenType
name|openType
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|String
name|typeName
init|=
literal|"java.util.Map<java.lang.String, "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|">"
decl_stmt|;
name|String
index|[]
name|keyValue
init|=
operator|new
name|String
index|[]
block|{
literal|"key"
block|,
literal|"value"
block|}
decl_stmt|;
name|OpenType
index|[]
name|openTypes
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|openType
block|}
decl_stmt|;
name|CompositeType
name|rowType
init|=
operator|new
name|CompositeType
argument_list|(
name|typeName
argument_list|,
name|typeName
argument_list|,
name|keyValue
argument_list|,
name|keyValue
argument_list|,
name|openTypes
argument_list|)
decl_stmt|;
return|return
operator|new
name|TabularType
argument_list|(
name|typeName
argument_list|,
name|typeName
argument_list|,
name|rowType
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"key"
block|}
argument_list|)
return|;
block|}
specifier|protected
name|TabularDataSupport
name|createTabularData
parameter_list|(
name|ActiveMQMessage
name|m
parameter_list|,
name|TabularType
name|type
parameter_list|,
name|Class
name|valueType
parameter_list|)
throws|throws
name|IOException
throws|,
name|OpenDataException
block|{
name|TabularDataSupport
name|answer
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entries
init|=
name|m
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|UTF8Buffer
operator|&&
name|valueType
operator|.
name|equals
argument_list|(
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
name|String
name|actual
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
name|CompositeDataSupport
name|compositeData
init|=
name|createTabularRowValue
argument_list|(
name|type
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|actual
argument_list|)
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|compositeData
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|valueType
operator|.
name|isInstance
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|CompositeDataSupport
name|compositeData
init|=
name|createTabularRowValue
argument_list|(
name|type
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|answer
operator|.
name|put
argument_list|(
name|compositeData
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|CompositeDataSupport
name|createTabularRowValue
parameter_list|(
name|TabularType
name|type
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|type
operator|.
name|getRowType
argument_list|()
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|ByteMessageOpenTypeFactory
extends|extends
name|MessageOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ActiveMQBytesMessage
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_LENGTH
argument_list|,
literal|"Body length"
argument_list|,
name|SimpleType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_PREVIEW
argument_list|,
literal|"Body preview"
argument_list|,
operator|new
name|ArrayType
argument_list|(
literal|1
argument_list|,
name|SimpleType
operator|.
name|BYTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|ActiveMQBytesMessage
name|m
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|o
decl_stmt|;
name|m
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|long
name|length
init|=
literal|0
decl_stmt|;
try|try
block|{
name|length
operator|=
name|m
operator|.
name|getBodyLength
argument_list|()
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_LENGTH
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_LENGTH
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|byte
name|preview
index|[]
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
literal|255
argument_list|)
index|]
decl_stmt|;
name|m
operator|.
name|readBytes
argument_list|(
name|preview
argument_list|)
expr_stmt|;
name|m
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// This is whack! Java 1.5 JMX spec does not support primitive
comment|// arrays!
comment|// In 1.6 it seems it is supported.. but until then...
name|Byte
name|data
index|[]
init|=
operator|new
name|Byte
index|[
name|preview
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|new
name|Byte
argument_list|(
name|preview
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_PREVIEW
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_PREVIEW
argument_list|,
operator|new
name|Byte
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|MapMessageOpenTypeFactory
extends|extends
name|MessageOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ActiveMQMapMessage
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|CONTENT_MAP
argument_list|,
literal|"Content map"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|ActiveMQMapMessage
name|m
init|=
operator|(
name|ActiveMQMapMessage
operator|)
name|o
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|CONTENT_MAP
argument_list|,
literal|""
operator|+
name|m
operator|.
name|getContentMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|CONTENT_MAP
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|ObjectMessageOpenTypeFactory
extends|extends
name|MessageOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ActiveMQObjectMessage
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|StreamMessageOpenTypeFactory
extends|extends
name|MessageOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ActiveMQStreamMessage
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|TextMessageOpenTypeFactory
extends|extends
name|MessageOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ActiveMQTextMessage
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|MESSAGE_TEXT
argument_list|,
name|CompositeDataConstants
operator|.
name|MESSAGE_TEXT
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|ActiveMQTextMessage
name|m
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|o
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|MESSAGE_TEXT
argument_list|,
literal|""
operator|+
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|MESSAGE_TEXT
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|JobOpenTypeFactory
extends|extends
name|AbstractOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|Job
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
literal|"jobId"
argument_list|,
literal|"jobId"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"cronEntry"
argument_list|,
literal|"Cron entry"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"start"
argument_list|,
literal|"start time"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"delay"
argument_list|,
literal|"initial delay"
argument_list|,
name|SimpleType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"next"
argument_list|,
literal|"next time"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"period"
argument_list|,
literal|"period between jobs"
argument_list|,
name|SimpleType
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"repeat"
argument_list|,
literal|"number of times to repeat"
argument_list|,
name|SimpleType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|Job
name|job
init|=
operator|(
name|Job
operator|)
name|o
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"jobId"
argument_list|,
name|job
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"cronEntry"
argument_list|,
literal|""
operator|+
name|job
operator|.
name|getCronEntry
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"start"
argument_list|,
name|job
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"delay"
argument_list|,
name|job
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"next"
argument_list|,
name|job
operator|.
name|getNextExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"period"
argument_list|,
name|job
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"repeat"
argument_list|,
name|job
operator|.
name|getRepeat
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|ActiveMQBlobMessageOpenTypeFactory
extends|extends
name|MessageOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ActiveMQBlobMessage
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
name|CompositeDataConstants
operator|.
name|MESSAGE_URL
argument_list|,
literal|"Body Url"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|ActiveMQBlobMessage
name|m
init|=
operator|(
name|ActiveMQBlobMessage
operator|)
name|o
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
try|try
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|MESSAGE_URL
argument_list|,
literal|""
operator|+
name|m
operator|.
name|getURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|rc
operator|.
name|put
argument_list|(
name|CompositeDataConstants
operator|.
name|MESSAGE_URL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|SlowConsumerEntryOpenTypeFactory
extends|extends
name|AbstractOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|SlowConsumerEntry
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
literal|"subscription"
argument_list|,
literal|"the subscription view"
argument_list|,
name|SimpleType
operator|.
name|OBJECTNAME
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"slowCount"
argument_list|,
literal|"number of times deemed slow"
argument_list|,
name|SimpleType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"markCount"
argument_list|,
literal|"number of periods remaining slow"
argument_list|,
name|SimpleType
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|SlowConsumerEntry
name|entry
init|=
operator|(
name|SlowConsumerEntry
operator|)
name|o
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"subscription"
argument_list|,
name|entry
operator|.
name|getSubscription
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"slowCount"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getSlowCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"markCount"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|entry
operator|.
name|getMarkCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
specifier|static
class|class
name|HealthStatusOpenTypeFactory
extends|extends
name|AbstractOpenTypeFactory
block|{
annotation|@
name|Override
specifier|protected
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|HealthStatus
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|init
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|super
operator|.
name|init
argument_list|()
expr_stmt|;
name|addItem
argument_list|(
literal|"healthId"
argument_list|,
literal|"health check id"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"level"
argument_list|,
literal|"severity"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"message"
argument_list|,
literal|"severity"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
literal|"resource"
argument_list|,
literal|"event resource"
argument_list|,
name|SimpleType
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFields
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|HealthStatus
name|event
init|=
operator|(
name|HealthStatus
operator|)
name|o
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|rc
init|=
name|super
operator|.
name|getFields
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"healthId"
argument_list|,
name|event
operator|.
name|getHealthId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"level"
argument_list|,
name|event
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"message"
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
literal|"resource"
argument_list|,
name|event
operator|.
name|getResource
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
static|static
block|{
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|ActiveMQMessage
operator|.
name|class
argument_list|,
operator|new
name|MessageOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|ActiveMQBytesMessage
operator|.
name|class
argument_list|,
operator|new
name|ByteMessageOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|ActiveMQMapMessage
operator|.
name|class
argument_list|,
operator|new
name|MapMessageOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|ActiveMQObjectMessage
operator|.
name|class
argument_list|,
operator|new
name|ObjectMessageOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|ActiveMQStreamMessage
operator|.
name|class
argument_list|,
operator|new
name|StreamMessageOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|ActiveMQTextMessage
operator|.
name|class
argument_list|,
operator|new
name|TextMessageOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|Job
operator|.
name|class
argument_list|,
operator|new
name|JobOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|SlowConsumerEntry
operator|.
name|class
argument_list|,
operator|new
name|SlowConsumerEntryOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|ActiveMQBlobMessage
operator|.
name|class
argument_list|,
operator|new
name|ActiveMQBlobMessageOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|OPEN_TYPE_FACTORIES
operator|.
name|put
argument_list|(
name|HealthStatus
operator|.
name|class
argument_list|,
operator|new
name|HealthStatusOpenTypeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|OpenTypeSupport
parameter_list|()
block|{     }
specifier|public
specifier|static
name|OpenTypeFactory
name|getFactory
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|OpenDataException
block|{
return|return
name|OPEN_TYPE_FACTORIES
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|CompositeData
name|convert
parameter_list|(
name|Object
name|message
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|OpenTypeFactory
name|f
init|=
name|getFactory
argument_list|(
name|message
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|OpenDataException
argument_list|(
literal|"Cannot create a CompositeData for type: "
operator|+
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|CompositeType
name|ct
init|=
name|f
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fields
init|=
name|f
operator|.
name|getFields
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
end_class

end_unit

