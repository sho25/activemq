begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoTopic
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|DestinationsProcessor
extends|extends
name|DefaultConfigurationProcessor
block|{
specifier|public
name|DestinationsProcessor
parameter_list|(
name|RuntimeConfigurationBroker
name|plugin
parameter_list|,
name|Class
name|configurationClass
parameter_list|)
block|{
name|super
argument_list|(
name|plugin
argument_list|,
name|configurationClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processChanges
parameter_list|(
name|List
name|current
parameter_list|,
name|List
name|modified
parameter_list|)
block|{
for|for
control|(
name|Object
name|destinations
range|:
name|modified
control|)
block|{
for|for
control|(
name|Object
name|dto
range|:
name|getContents
argument_list|(
name|destinations
argument_list|)
control|)
block|{
try|try
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|(
name|dto
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containsDestination
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|plugin
operator|.
name|addDestination
argument_list|(
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|destination
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|info
argument_list|(
literal|"Added destination "
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"Failed to add a new destination for DTO: "
operator|+
name|dto
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|boolean
name|containsDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getRegionBroker
argument_list|()
operator|.
name|getDestinations
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|destination
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNew
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|addDestination
argument_list|(
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|destination
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|info
argument_list|(
literal|"Added destination "
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"Failed to add a new destination for DTO: "
operator|+
name|o
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ActiveMQDestination
name|createDestination
parameter_list|(
name|Object
name|dto
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dto
operator|instanceof
name|DtoQueue
condition|)
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
operator|(
operator|(
name|DtoQueue
operator|)
name|dto
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|dto
operator|instanceof
name|DtoTopic
condition|)
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
operator|(
operator|(
name|DtoTopic
operator|)
name|dto
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unknown destination type for DTO "
operator|+
name|dto
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

