begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
operator|.
name|BTreeIndex
operator|.
name|Prefixer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Page
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_comment
comment|/**  * The BTreeNode class represents a node in the BTree object graph.  It is stored in   * one Page of a PageFile.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BTreeNode
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
block|{
comment|// The index that this node is part of.
specifier|private
specifier|final
name|BTreeIndex
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|index
decl_stmt|;
comment|// The parent node or null if this is the root node of the BTree
specifier|private
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|parent
decl_stmt|;
comment|// The page associated with this node
specifier|private
name|Page
argument_list|<
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|page
decl_stmt|;
comment|// Order list of keys in the node
specifier|private
name|Key
index|[]
name|keys
decl_stmt|;
comment|// Values associated with the Keys. Null if this is a branch node.
specifier|private
name|Value
index|[]
name|values
decl_stmt|;
comment|// nodeId pointers to children BTreeNodes. Null if this is a leaf node.
specifier|private
name|long
index|[]
name|children
decl_stmt|;
comment|// The next leaf node after this one.  Used for fast iteration of the entries.
specifier|private
name|long
name|next
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
class|class
name|KeyValueEntry
implements|implements
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|private
specifier|final
name|Key
name|key
decl_stmt|;
specifier|private
specifier|final
name|Value
name|value
decl_stmt|;
specifier|public
name|KeyValueEntry
parameter_list|(
name|Key
name|key
parameter_list|,
name|Value
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|Value
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|Value
name|setValue
parameter_list|(
name|Value
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|private
specifier|final
class|class
name|BTreeIterator
implements|implements
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|Transaction
name|tx
decl_stmt|;
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|current
decl_stmt|;
name|int
name|nextIndex
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|nextEntry
decl_stmt|;
specifier|private
name|BTreeIterator
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|current
parameter_list|,
name|int
name|nextIndex
parameter_list|)
block|{
name|this
operator|.
name|tx
operator|=
name|tx
expr_stmt|;
name|this
operator|.
name|current
operator|=
name|current
expr_stmt|;
name|this
operator|.
name|nextIndex
operator|=
name|nextIndex
expr_stmt|;
block|}
specifier|synchronized
specifier|private
name|void
name|findNextPage
parameter_list|()
block|{
if|if
condition|(
name|nextEntry
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
while|while
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nextIndex
operator|>=
name|current
operator|.
name|keys
operator|.
name|length
condition|)
block|{
comment|// we need to roll to the next leaf..
if|if
condition|(
name|current
operator|.
name|next
operator|>=
literal|0
condition|)
block|{
name|current
operator|=
name|index
operator|.
name|loadNode
argument_list|(
name|tx
argument_list|,
name|current
operator|.
name|next
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|nextIndex
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
name|nextEntry
operator|=
operator|new
name|KeyValueEntry
argument_list|(
name|current
operator|.
name|keys
index|[
name|nextIndex
index|]
argument_list|,
name|current
operator|.
name|values
index|[
name|nextIndex
index|]
argument_list|)
expr_stmt|;
name|nextIndex
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{             }
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|findNextPage
argument_list|()
expr_stmt|;
return|return
name|nextEntry
operator|!=
literal|null
return|;
block|}
specifier|public
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|next
parameter_list|()
block|{
name|findNextPage
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextEntry
operator|!=
literal|null
condition|)
block|{
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|lastEntry
init|=
name|nextEntry
decl_stmt|;
name|nextEntry
operator|=
literal|null
expr_stmt|;
return|return
name|lastEntry
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * The Marshaller is used to store and load the data in the BTreeNode into a Page.      *        * @param<Key>      * @param<Value>      */
specifier|static
specifier|public
class|class
name|Marshaller
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
implements|implements
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|Marshaller
argument_list|<
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
block|{
specifier|private
specifier|final
name|BTreeIndex
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|index
decl_stmt|;
specifier|public
name|Marshaller
parameter_list|(
name|BTreeIndex
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|getType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|node
parameter_list|,
name|DataOutput
name|os
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write the keys
name|short
name|count
init|=
operator|(
name|short
operator|)
name|node
operator|.
name|keys
operator|.
name|length
decl_stmt|;
comment|// cast may truncate value...
if|if
condition|(
name|count
operator|!=
name|node
operator|.
name|keys
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Too many keys"
argument_list|)
throw|;
block|}
name|os
operator|.
name|writeShort
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|.
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|getKeyMarshaller
argument_list|()
operator|.
name|writePayload
argument_list|(
name|node
operator|.
name|keys
index|[
name|i
index|]
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|isBranch
argument_list|()
condition|)
block|{
comment|// If this is a branch...
name|os
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|os
operator|.
name|writeLong
argument_list|(
name|node
operator|.
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If this is a leaf
name|os
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|index
operator|.
name|getValueMarshaller
argument_list|()
operator|.
name|writePayload
argument_list|(
name|node
operator|.
name|values
index|[
name|i
index|]
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|writeLong
argument_list|(
name|node
operator|.
name|next
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|readPayload
parameter_list|(
name|DataInput
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|node
init|=
operator|new
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|is
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|node
operator|.
name|keys
operator|=
operator|(
name|Key
index|[]
operator|)
operator|new
name|Object
index|[
name|count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|.
name|keys
index|[
name|i
index|]
operator|=
name|index
operator|.
name|getKeyMarshaller
argument_list|()
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|node
operator|.
name|children
operator|=
operator|new
name|long
index|[
name|count
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|.
name|children
index|[
name|i
index|]
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|node
operator|.
name|values
operator|=
operator|(
name|Value
index|[]
operator|)
operator|new
name|Object
index|[
name|count
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|node
operator|.
name|values
index|[
name|i
index|]
operator|=
name|index
operator|.
name|getValueMarshaller
argument_list|()
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|node
operator|.
name|next
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
block|}
specifier|public
name|BTreeNode
parameter_list|(
name|BTreeIndex
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|void
name|setEmpty
parameter_list|()
block|{
name|setLeafData
argument_list|(
name|createKeyArray
argument_list|(
literal|0
argument_list|)
argument_list|,
name|createValueArray
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internal (to the BTreeNode) method. Because this method is called only by      * BTreeNode itself, no synchronization done inside of this method.      * @throws IOException       */
specifier|private
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getChild
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isBranch
argument_list|()
operator|&&
name|idx
operator|>=
literal|0
operator|&&
name|idx
operator|<
name|children
operator|.
name|length
condition|)
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|result
init|=
name|this
operator|.
name|index
operator|.
name|loadNode
argument_list|(
name|tx
argument_list|,
name|children
index|[
name|idx
index|]
argument_list|,
name|this
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Value
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|child
init|=
name|getChild
argument_list|(
name|tx
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getPageId
argument_list|()
operator|==
name|index
operator|.
name|getPageId
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BTree corrupted: Cylce detected."
argument_list|)
throw|;
block|}
name|Value
name|rc
init|=
name|child
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
comment|// child node is now empty.. remove it from the branch node.
if|if
condition|(
name|child
operator|.
name|keys
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// If the child node is a branch, promote
if|if
condition|(
name|child
operator|.
name|isBranch
argument_list|()
condition|)
block|{
comment|// This is cause branches are never really empty.. they just go down to 1 child..
name|children
index|[
name|idx
index|]
operator|=
name|child
operator|.
name|children
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
comment|// The child was a leaf. Then we need to actually remove it from this branch node..
comment|// We need to update the previous child's next pointer to skip over the child being removed....
if|if
condition|(
name|idx
operator|>
literal|0
operator|&&
name|children
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|previousChild
init|=
name|getChild
argument_list|(
name|tx
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
decl_stmt|;
name|previousChild
operator|.
name|next
operator|=
name|child
operator|.
name|next
expr_stmt|;
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|previousChild
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|<
name|children
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// Delete it and key to the right.
name|setBranchData
argument_list|(
name|arrayDelete
argument_list|(
name|keys
argument_list|,
name|idx
argument_list|)
argument_list|,
name|arrayDelete
argument_list|(
name|children
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// It was the last child.. Then delete it and key to the left
name|setBranchData
argument_list|(
name|arrayDelete
argument_list|(
name|keys
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
argument_list|,
name|arrayDelete
argument_list|(
name|children
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If we are the root node, and only have 1 child left.  Then
comment|// make the root be the leaf node.
if|if
condition|(
name|children
operator|.
name|length
operator|==
literal|1
operator|&&
name|parent
operator|==
literal|null
condition|)
block|{
name|child
operator|=
name|getChild
argument_list|(
name|tx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|keys
operator|=
name|child
operator|.
name|keys
expr_stmt|;
name|children
operator|=
name|child
operator|.
name|children
expr_stmt|;
name|values
operator|=
name|child
operator|.
name|values
expr_stmt|;
comment|// free up the page..
name|tx
operator|.
name|free
argument_list|(
name|child
operator|.
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|Value
name|oldValue
init|=
name|values
index|[
name|idx
index|]
decl_stmt|;
name|setLeafData
argument_list|(
name|arrayDelete
argument_list|(
name|keys
argument_list|,
name|idx
argument_list|)
argument_list|,
name|arrayDelete
argument_list|(
name|values
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keys
operator|.
name|length
operator|==
literal|0
operator|&&
name|parent
operator|!=
literal|null
condition|)
block|{
name|tx
operator|.
name|free
argument_list|(
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
block|}
block|}
specifier|public
name|Value
name|put
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
return|return
name|getLeafNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
name|key
argument_list|)
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|Value
name|oldValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
comment|// Key was found... Overwrite
name|oldValue
operator|=
name|values
index|[
name|idx
index|]
expr_stmt|;
name|values
index|[
name|idx
index|]
operator|=
name|value
expr_stmt|;
name|setLeafData
argument_list|(
name|keys
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Key was not found, Insert it
name|idx
operator|=
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
expr_stmt|;
name|setLeafData
argument_list|(
name|arrayInsert
argument_list|(
name|keys
argument_list|,
name|key
argument_list|,
name|idx
argument_list|)
argument_list|,
name|arrayInsert
argument_list|(
name|values
argument_list|,
name|value
argument_list|,
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
name|allowOverflow
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Transaction
operator|.
name|PageOverflowIOException
name|e
parameter_list|)
block|{
comment|// If we get an overflow
name|split
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
return|return
name|oldValue
return|;
block|}
block|}
specifier|private
name|void
name|promoteValue
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|,
name|long
name|nodeId
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
name|setBranchData
argument_list|(
name|arrayInsert
argument_list|(
name|keys
argument_list|,
name|key
argument_list|,
name|idx
argument_list|)
argument_list|,
name|arrayInsert
argument_list|(
name|children
argument_list|,
name|nodeId
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
name|allowOverflow
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Transaction
operator|.
name|PageOverflowIOException
name|e
parameter_list|)
block|{
name|split
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Internal to the BTreeNode method      */
specifier|private
name|void
name|split
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|Key
index|[]
name|leftKeys
decl_stmt|;
name|Key
index|[]
name|rightKeys
decl_stmt|;
name|Value
index|[]
name|leftValues
init|=
literal|null
decl_stmt|;
name|Value
index|[]
name|rightValues
init|=
literal|null
decl_stmt|;
name|long
index|[]
name|leftChildren
init|=
literal|null
decl_stmt|;
name|long
index|[]
name|rightChildren
init|=
literal|null
decl_stmt|;
name|Key
name|separator
decl_stmt|;
name|int
name|vc
init|=
name|keys
operator|.
name|length
decl_stmt|;
name|int
name|pivot
init|=
name|vc
operator|/
literal|2
decl_stmt|;
comment|// Split the node into two nodes
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
name|leftKeys
operator|=
name|createKeyArray
argument_list|(
name|pivot
argument_list|)
expr_stmt|;
name|leftChildren
operator|=
operator|new
name|long
index|[
name|leftKeys
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|rightKeys
operator|=
name|createKeyArray
argument_list|(
name|vc
operator|-
operator|(
name|pivot
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|rightChildren
operator|=
operator|new
name|long
index|[
name|rightKeys
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|leftKeys
argument_list|,
literal|0
argument_list|,
name|leftKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|children
argument_list|,
literal|0
argument_list|,
name|leftChildren
argument_list|,
literal|0
argument_list|,
name|leftChildren
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
name|leftKeys
operator|.
name|length
operator|+
literal|1
argument_list|,
name|rightKeys
argument_list|,
literal|0
argument_list|,
name|rightKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|children
argument_list|,
name|leftChildren
operator|.
name|length
argument_list|,
name|rightChildren
argument_list|,
literal|0
argument_list|,
name|rightChildren
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Is it a Simple Prefix BTree??
name|Prefixer
argument_list|<
name|Key
argument_list|>
name|prefixer
init|=
name|index
operator|.
name|getPrefixer
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefixer
operator|!=
literal|null
condition|)
block|{
name|separator
operator|=
name|prefixer
operator|.
name|getSimplePrefix
argument_list|(
name|leftKeys
index|[
name|leftKeys
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|rightKeys
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|separator
operator|=
name|keys
index|[
name|leftKeys
operator|.
name|length
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|leftKeys
operator|=
name|createKeyArray
argument_list|(
name|pivot
argument_list|)
expr_stmt|;
name|leftValues
operator|=
name|createValueArray
argument_list|(
name|leftKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|rightKeys
operator|=
name|createKeyArray
argument_list|(
name|vc
operator|-
name|pivot
argument_list|)
expr_stmt|;
name|rightValues
operator|=
name|createValueArray
argument_list|(
name|rightKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
literal|0
argument_list|,
name|leftKeys
argument_list|,
literal|0
argument_list|,
name|leftKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|leftValues
argument_list|,
literal|0
argument_list|,
name|leftValues
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|keys
argument_list|,
name|leftKeys
operator|.
name|length
argument_list|,
name|rightKeys
argument_list|,
literal|0
argument_list|,
name|rightKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
name|leftValues
operator|.
name|length
argument_list|,
name|rightValues
argument_list|,
literal|0
argument_list|,
name|rightValues
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// separator = getSeparator(leftVals[leftVals.length - 1],
comment|// rightVals[0]);
name|separator
operator|=
name|rightKeys
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|// Promote the pivot to the parent branch
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
comment|// This can only happen if this is the root
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|rNode
init|=
name|this
operator|.
name|index
operator|.
name|createNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|lNode
init|=
name|this
operator|.
name|index
operator|.
name|createNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
name|rNode
operator|.
name|setBranchData
argument_list|(
name|rightKeys
argument_list|,
name|rightChildren
argument_list|)
expr_stmt|;
name|lNode
operator|.
name|setBranchData
argument_list|(
name|leftKeys
argument_list|,
name|leftChildren
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rNode
operator|.
name|setLeafData
argument_list|(
name|rightKeys
argument_list|,
name|rightValues
argument_list|)
expr_stmt|;
name|lNode
operator|.
name|setLeafData
argument_list|(
name|leftKeys
argument_list|,
name|leftValues
argument_list|)
expr_stmt|;
name|lNode
operator|.
name|setNext
argument_list|(
name|rNode
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Key
index|[]
name|v
init|=
name|createKeyArray
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|v
index|[
literal|0
index|]
operator|=
name|separator
expr_stmt|;
name|setBranchData
argument_list|(
name|v
argument_list|,
operator|new
name|long
index|[]
block|{
name|lNode
operator|.
name|getPageId
argument_list|()
block|,
name|rNode
operator|.
name|getPageId
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|rNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|lNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|rNode
init|=
name|this
operator|.
name|index
operator|.
name|createNode
argument_list|(
name|tx
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
name|setBranchData
argument_list|(
name|leftKeys
argument_list|,
name|leftChildren
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setBranchData
argument_list|(
name|rightKeys
argument_list|,
name|rightChildren
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rNode
operator|.
name|setNext
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|rNode
operator|.
name|getPageId
argument_list|()
expr_stmt|;
name|setLeafData
argument_list|(
name|leftKeys
argument_list|,
name|leftValues
argument_list|)
expr_stmt|;
name|rNode
operator|.
name|setLeafData
argument_list|(
name|rightKeys
argument_list|,
name|rightValues
argument_list|)
expr_stmt|;
block|}
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|rNode
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|parent
operator|.
name|promoteValue
argument_list|(
name|tx
argument_list|,
name|separator
argument_list|,
name|rNode
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|printStructure
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|PrintWriter
name|out
parameter_list|,
name|String
name|prefix
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|parent
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cycle back to root node detected."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|child
init|=
name|getChild
argument_list|(
name|tx
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|children
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"\\- "
operator|+
name|child
operator|.
name|getPageId
argument_list|()
operator|+
operator|(
name|child
operator|.
name|isBranch
argument_list|()
condition|?
literal|" ("
operator|+
name|child
operator|.
name|children
operator|.
name|length
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|printStructure
argument_list|(
name|tx
argument_list|,
name|out
argument_list|,
name|prefix
operator|+
literal|"   "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|prefix
operator|+
literal|"|- "
operator|+
name|child
operator|.
name|getPageId
argument_list|()
operator|+
operator|(
name|child
operator|.
name|isBranch
argument_list|()
condition|?
literal|" ("
operator|+
name|child
operator|.
name|children
operator|.
name|length
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|" : "
operator|+
name|keys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|child
operator|.
name|printStructure
argument_list|(
name|tx
argument_list|,
name|out
argument_list|,
name|prefix
operator|+
literal|"   "
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|int
name|getMinLeafDepth
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
name|depth
operator|++
expr_stmt|;
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
name|int
name|min
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|getChild
argument_list|(
name|tx
argument_list|,
name|i
argument_list|)
operator|.
name|getMinLeafDepth
argument_list|(
name|tx
argument_list|,
name|depth
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|min
return|;
block|}
else|else
block|{
comment|//            print(depth*2, "- "+page.getPageId());
return|return
name|depth
return|;
block|}
block|}
specifier|public
name|int
name|getMaxLeafDepth
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
name|depth
operator|++
expr_stmt|;
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
name|int
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
name|Math
operator|.
name|max
argument_list|(
name|v
argument_list|,
name|getChild
argument_list|(
name|tx
argument_list|,
name|i
argument_list|)
operator|.
name|getMaxLeafDepth
argument_list|(
name|tx
argument_list|,
name|depth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|depth
operator|=
name|v
expr_stmt|;
block|}
return|return
name|depth
return|;
block|}
specifier|public
name|Value
name|get
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
return|return
name|getLeafNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
name|key
argument_list|)
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|values
index|[
name|idx
index|]
return|;
block|}
block|}
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|BTreeVisitor
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|visitor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Visitor cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Key
name|key1
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|key1
operator|=
name|keys
index|[
name|i
operator|-
literal|1
index|]
expr_stmt|;
block|}
name|Key
name|key2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|this
operator|.
name|children
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|key2
operator|=
name|keys
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|visitor
operator|.
name|isInterestedInKeysBetween
argument_list|(
name|key1
argument_list|,
name|key2
argument_list|)
condition|)
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|child
init|=
name|getChild
argument_list|(
name|tx
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|keys
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getFirst
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|node
init|=
name|this
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|isBranch
argument_list|()
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getChild
argument_list|(
name|tx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|KeyValueEntry
argument_list|(
name|node
operator|.
name|keys
index|[
literal|0
index|]
argument_list|,
name|node
operator|.
name|values
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getLast
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|node
init|=
name|this
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|isBranch
argument_list|()
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getChild
argument_list|(
name|tx
argument_list|,
name|node
operator|.
name|children
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|idx
init|=
name|node
operator|.
name|values
operator|.
name|length
operator|-
literal|1
decl_stmt|;
return|return
operator|new
name|KeyValueEntry
argument_list|(
name|node
operator|.
name|keys
index|[
name|idx
index|]
argument_list|,
name|node
operator|.
name|values
index|[
name|idx
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getFirstLeafNode
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|node
init|=
name|this
decl_stmt|;
while|while
condition|(
name|node
operator|.
name|isBranch
argument_list|()
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getChild
argument_list|(
name|tx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|node
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iterator
parameter_list|(
specifier|final
name|Transaction
name|tx
parameter_list|,
name|Key
name|startKey
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|startKey
operator|==
literal|null
condition|)
block|{
return|return
name|iterator
argument_list|(
name|tx
argument_list|)
return|;
block|}
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
return|return
name|getLeafNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
name|startKey
argument_list|)
operator|.
name|iterator
argument_list|(
name|tx
argument_list|,
name|startKey
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|startKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
name|idx
operator|=
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
expr_stmt|;
block|}
return|return
operator|new
name|BTreeIterator
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
name|idx
argument_list|)
return|;
block|}
block|}
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iterator
parameter_list|(
specifier|final
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|BTreeIterator
argument_list|(
name|tx
argument_list|,
name|getFirstLeafNode
argument_list|(
name|tx
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|node
init|=
name|index
operator|.
name|loadNode
argument_list|(
name|tx
argument_list|,
name|children
index|[
name|i
index|]
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|node
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|node
operator|.
name|getPage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Reset the root node to be a leaf.
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
name|setLeafData
argument_list|(
name|createKeyArray
argument_list|(
literal|0
argument_list|)
argument_list|,
name|createValueArray
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|next
operator|=
operator|-
literal|1
expr_stmt|;
name|index
operator|.
name|storeNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getLeafNode
parameter_list|(
name|Transaction
name|tx
parameter_list|,
specifier|final
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|node
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|current
init|=
name|node
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|isBranch
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|current
operator|.
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|idx
operator|=
name|idx
operator|<
literal|0
condition|?
operator|-
operator|(
name|idx
operator|+
literal|1
operator|)
else|:
name|idx
operator|+
literal|1
expr_stmt|;
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|child
init|=
name|current
operator|.
name|getChild
argument_list|(
name|tx
argument_list|,
name|idx
argument_list|)
decl_stmt|;
comment|// A little cycle detection for sanity's sake
if|if
condition|(
name|child
operator|==
name|node
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"BTree corrupted: Cylce detected."
argument_list|)
throw|;
block|}
name|current
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Key cannot be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|isBranch
argument_list|()
condition|)
block|{
return|return
name|getLeafNode
argument_list|(
name|tx
argument_list|,
name|this
argument_list|,
name|key
argument_list|)
operator|.
name|contains
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
return|;
block|}
else|else
block|{
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|keys
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
comment|///////////////////////////////////////////////////////////////////
comment|// Implementation methods
comment|///////////////////////////////////////////////////////////////////
specifier|private
name|boolean
name|allowOverflow
parameter_list|()
block|{
comment|// Only allow page overflow if there are<= 3 keys in the node.  Otherwise a split will occur on overflow
return|return
name|this
operator|.
name|keys
operator|.
name|length
operator|<=
literal|3
return|;
block|}
specifier|private
name|void
name|setLeafData
parameter_list|(
name|Key
index|[]
name|keys
parameter_list|,
name|Value
index|[]
name|values
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|children
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|setBranchData
parameter_list|(
name|Key
index|[]
name|keys
parameter_list|,
name|long
index|[]
name|nodeIds
parameter_list|)
block|{
name|this
operator|.
name|keys
operator|=
name|keys
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|nodeIds
expr_stmt|;
name|this
operator|.
name|values
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Key
index|[]
name|createKeyArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|(
name|Key
index|[]
operator|)
operator|new
name|Object
index|[
name|size
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Value
index|[]
name|createValueArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|(
name|Value
index|[]
operator|)
operator|new
name|Object
index|[
name|size
index|]
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|arrayDelete
parameter_list|(
name|T
index|[]
name|vals
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|T
index|[]
name|newVals
init|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|vals
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|<
name|newVals
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|newVals
argument_list|,
name|idx
argument_list|,
name|newVals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|newVals
return|;
block|}
specifier|static
specifier|private
name|long
index|[]
name|arrayDelete
parameter_list|(
name|long
index|[]
name|vals
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|long
index|[]
name|newVals
init|=
operator|new
name|long
index|[
name|vals
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idx
operator|<
name|newVals
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|newVals
argument_list|,
name|idx
argument_list|,
name|newVals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|newVals
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|static
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|arrayInsert
parameter_list|(
name|T
index|[]
name|vals
parameter_list|,
name|T
name|val
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|T
index|[]
name|newVals
init|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|vals
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|newVals
index|[
name|idx
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|vals
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
argument_list|,
name|newVals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|vals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|newVals
return|;
block|}
specifier|static
specifier|private
name|long
index|[]
name|arrayInsert
parameter_list|(
name|long
index|[]
name|vals
parameter_list|,
name|long
name|val
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|long
index|[]
name|newVals
init|=
operator|new
name|long
index|[
name|vals
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|newVals
index|[
name|idx
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|vals
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
argument_list|,
name|newVals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|vals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
block|}
return|return
name|newVals
return|;
block|}
comment|///////////////////////////////////////////////////////////////////
comment|// Property Accessors
comment|///////////////////////////////////////////////////////////////////
specifier|private
name|boolean
name|isBranch
parameter_list|()
block|{
return|return
name|children
operator|!=
literal|null
return|;
block|}
specifier|public
name|long
name|getPageId
parameter_list|()
block|{
return|return
name|page
operator|.
name|getPageId
argument_list|()
return|;
block|}
specifier|public
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|Page
argument_list|<
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|getPage
parameter_list|()
block|{
return|return
name|page
return|;
block|}
specifier|public
name|void
name|setPage
parameter_list|(
name|Page
argument_list|<
name|BTreeNode
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|page
parameter_list|)
block|{
name|this
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
specifier|public
name|long
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|void
name|setNext
parameter_list|(
name|long
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[BTreeNode "
operator|+
operator|(
name|isBranch
argument_list|()
condition|?
literal|"branch"
else|:
literal|"leaf"
operator|)
operator|+
literal|": "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|keys
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

