begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PriorityNetworkDispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|PriorityNetworkDispatchPolicyTest
block|{
name|PriorityNetworkDispatchPolicy
name|underTest
init|=
operator|new
name|PriorityNetworkDispatchPolicy
argument_list|()
decl_stmt|;
name|SystemUsage
name|usageManager
init|=
operator|new
name|SystemUsage
argument_list|()
decl_stmt|;
name|ConsumerInfo
name|info
init|=
operator|new
name|ConsumerInfo
argument_list|()
decl_stmt|;
name|ActiveMQMessage
name|node
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|ConsumerId
name|id
init|=
operator|new
name|ConsumerId
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|info
operator|.
name|setDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"test"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setConsumerId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNetworkSubscription
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNetworkConsumerPath
argument_list|(
operator|new
name|ConsumerId
index|[]
block|{
name|id
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveLowerPriorityDup
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Subscription
argument_list|>
name|consumers
init|=
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|ConsumerInfo
name|instance
init|=
name|info
operator|.
name|copy
argument_list|()
decl_stmt|;
name|instance
operator|.
name|setPriority
argument_list|(
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
name|consumers
operator|.
name|add
argument_list|(
operator|new
name|TopicSubscription
argument_list|(
literal|null
argument_list|,
name|context
argument_list|,
name|instance
argument_list|,
name|usageManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|underTest
operator|.
name|dispatch
argument_list|(
name|node
argument_list|,
literal|null
argument_list|,
name|consumers
argument_list|)
expr_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Subscription
name|consumer
range|:
name|consumers
control|)
block|{
name|count
operator|+=
name|consumer
operator|.
name|getEnqueueCounter
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"only one sub got message"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

