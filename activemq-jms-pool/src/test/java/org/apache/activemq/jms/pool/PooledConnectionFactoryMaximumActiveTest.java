begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Checks the behavior of the PooledConnectionFactory when the maximum amount of sessions is being reached  * (maximumActive). When using setBlockIfSessionPoolIsFull(true) on the ConnectionFactory, further requests for sessions  * should block. If it does not block, its a bug.  */
end_comment

begin_class
specifier|public
class|class
name|PooledConnectionFactoryMaximumActiveTest
extends|extends
name|JmsPoolTestSupport
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PooledConnectionFactoryMaximumActiveTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|int
name|sleepTimeout
init|=
literal|5000
decl_stmt|;
specifier|private
specifier|static
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|Session
argument_list|>
name|sessions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|Session
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|addSession
parameter_list|(
name|Session
name|s
parameter_list|)
block|{
name|sessions
operator|.
name|put
argument_list|(
name|s
operator|.
name|hashCode
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests the behavior of the sessionPool of the PooledConnectionFactory when maximum number of sessions are reached.      * This test uses maximumActive=1. When creating two threads that both try to create a JMS session from the same JMS      * connection, the thread that is second to call createSession() should block (as only 1 session is allowed) until      * the session is returned to pool. If it does not block, its a bug.      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testApp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Initialize JMS connection
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://broker1?marshal=false&broker.useJmx=false&broker.persistent=false"
argument_list|)
decl_stmt|;
name|PooledConnectionFactory
name|cf
init|=
operator|new
name|PooledConnectionFactory
argument_list|()
decl_stmt|;
name|cf
operator|.
name|setConnectionFactory
argument_list|(
name|amq
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setMaxConnections
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setMaximumActiveSessionPerConnection
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setBlockIfSessionPoolIsFull
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|conn
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
comment|// start test runner threads. It is expected that the second thread
comment|// blocks on the call to createSession()
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|TestRunner2
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|result2
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|TestRunner2
argument_list|()
argument_list|)
decl_stmt|;
comment|// sleep to allow threads to run
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTimeout
argument_list|)
expr_stmt|;
comment|// second task should not have finished, instead wait on getting a
comment|// JMS Session
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|result2
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only 1 session should have been created
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sessions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Take all threads down
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|TestRunner2
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|TASK_LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestRunner2
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**          * @return true if test succeeded, false otherwise          */
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
name|Session
name|one
init|=
literal|null
decl_stmt|;
comment|// wait at most 5 seconds for the call to createSession
try|try
block|{
if|if
condition|(
name|PooledConnectionFactoryMaximumActiveTest
operator|.
name|conn
operator|==
literal|null
condition|)
block|{
name|TASK_LOG
operator|.
name|error
argument_list|(
literal|"Connection not yet initialized. Aborting test."
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
return|;
block|}
name|one
operator|=
name|PooledConnectionFactoryMaximumActiveTest
operator|.
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|TASK_LOG
operator|.
name|info
argument_list|(
literal|"Created new Session with id"
operator|+
name|one
argument_list|)
expr_stmt|;
name|PooledConnectionFactoryMaximumActiveTest
operator|.
name|addSession
argument_list|(
name|one
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
name|PooledConnectionFactoryMaximumActiveTest
operator|.
name|sleepTimeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|TASK_LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|one
operator|!=
literal|null
condition|)
try|try
block|{
name|one
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|TASK_LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// all good, test succeeded
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

