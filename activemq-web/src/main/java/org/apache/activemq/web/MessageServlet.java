begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|MessageAvailableConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|MessageAvailableListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|Continuation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|ajax
operator|.
name|ContinuationSupport
import|;
end_import

begin_comment
comment|/**  * A servlet for sending and receiving messages to/from JMS destinations using  * HTTP POST for sending and HTTP GET for receiving.<p/> You can specify the  * destination and whether it is a topic or queue via configuration details on  * the servlet or as request parameters.<p/> For reading messages you can  * specify a readTimeout parameter to determine how long the servlet should  * block for.  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|MessageServlet
extends|extends
name|MessageServletSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MessageServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|readTimeoutParameter
init|=
literal|"readTimeout"
decl_stmt|;
specifier|private
name|long
name|defaultReadTimeout
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|maximumReadTimeout
init|=
literal|20000
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|ServletConfig
name|servletConfig
init|=
name|getServletConfig
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
literal|"defaultReadTimeout"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|defaultReadTimeout
operator|=
name|asLong
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|servletConfig
operator|.
name|getInitParameter
argument_list|(
literal|"maximumReadTimeout"
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|maximumReadTimeout
operator|=
name|asLong
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sends a message to a destination      *       * @param request      * @param response      * @throws ServletException      * @throws IOException      */
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
comment|// lets turn the HTTP post into a JMS Message
try|try
block|{
name|WebClient
name|client
init|=
name|getWebClient
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|getPostedMessageBody
argument_list|(
name|request
argument_list|)
decl_stmt|;
comment|// lets create the destination from the URI?
name|Destination
name|destination
init|=
name|getDestination
argument_list|(
name|client
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NoDestinationSuppliedException
argument_list|()
throw|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending message to: "
operator|+
name|destination
operator|+
literal|" with text: "
operator|+
name|text
argument_list|)
expr_stmt|;
block|}
name|TextMessage
name|message
init|=
name|client
operator|.
name|getSession
argument_list|()
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|appendParametersToMessage
argument_list|(
name|request
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|boolean
name|persistent
init|=
name|isSendPersistent
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
name|getSendPriority
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|long
name|timeToLive
init|=
name|getSendTimeToLive
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|client
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// lets return a unique URI for reliable messaging
name|response
operator|.
name|setHeader
argument_list|(
literal|"messageID"
argument_list|,
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Could not post JMS message: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Supports a HTTP DELETE to be equivlanent of consuming a singe message      * from a queue      */
specifier|protected
name|void
name|doDelete
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|doMessages
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Supports a HTTP DELETE to be equivlanent of consuming a singe message      * from a queue      */
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|doMessages
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Reads a message from a destination up to some specific timeout period      *       * @param request      * @param response      * @throws ServletException      * @throws IOException      */
specifier|protected
name|void
name|doMessages
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|int
name|maxMessages
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|int
name|messages
init|=
literal|0
decl_stmt|;
try|try
block|{
name|WebClient
name|client
init|=
name|getWebClient
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|getDestination
argument_list|(
name|client
argument_list|,
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NoDestinationSuppliedException
argument_list|()
throw|;
name|long
name|timeout
init|=
name|getReadTimeout
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|ajax
init|=
name|isRicoAjax
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ajax
condition|)
name|maxMessages
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Receiving message(s) from: "
operator|+
name|destination
operator|+
literal|" with timeout: "
operator|+
name|timeout
argument_list|)
expr_stmt|;
block|}
name|MessageAvailableConsumer
name|consumer
init|=
operator|(
name|MessageAvailableConsumer
operator|)
name|client
operator|.
name|getConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Continuation
name|continuation
init|=
literal|null
decl_stmt|;
name|Listener
name|listener
init|=
literal|null
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|consumer
init|)
block|{
comment|// Fetch the listeners
name|listener
operator|=
operator|(
name|Listener
operator|)
name|consumer
operator|.
name|getAvailableListener
argument_list|()
expr_stmt|;
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
operator|new
name|Listener
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setAvailableListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|// Look for any available messages
name|message
operator|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
expr_stmt|;
comment|// Get an existing Continuation or create a new one if there are
comment|// no events.
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|continuation
operator|=
name|ContinuationSupport
operator|.
name|getContinuation
argument_list|(
name|request
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
comment|// register this continuation with our listener.
name|listener
operator|.
name|setContinuation
argument_list|(
name|continuation
argument_list|)
expr_stmt|;
comment|// Get the continuation object (may wait and/or retry
comment|// request here).
name|continuation
operator|.
name|suspend
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
comment|// Try again now
if|if
condition|(
name|message
operator|==
literal|null
condition|)
name|message
operator|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
expr_stmt|;
comment|// write a responds
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|PrintWriter
name|writer
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|ajax
condition|)
name|writer
operator|.
name|println
argument_list|(
literal|"<ajax-response>"
argument_list|)
expr_stmt|;
comment|// handle any message(s)
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
comment|// No messages so OK response of for ajax else no content.
name|response
operator|.
name|setStatus
argument_list|(
name|ajax
condition|?
name|HttpServletResponse
operator|.
name|SC_OK
else|:
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have at least one message so set up the response
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|getContentType
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|response
operator|.
name|setContentType
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// send a response for each available message (up to max
comment|// messages)
while|while
condition|(
operator|(
name|maxMessages
operator|<
literal|0
operator|||
name|messages
operator|<
name|maxMessages
operator|)
operator|&&
name|message
operator|!=
literal|null
condition|)
block|{
comment|// System.err.println("message["+messages+"]="+message);
if|if
condition|(
name|ajax
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"<response type='object' id='"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
block|}
else|else
comment|// only ever 1 message for non ajax!
name|setResponseHeaders
argument_list|(
name|response
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeMessageResponse
argument_list|(
name|writer
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|ajax
condition|)
name|writer
operator|.
name|println
argument_list|(
literal|"</response>"
argument_list|)
expr_stmt|;
comment|// look for next message
name|message
operator|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
expr_stmt|;
name|messages
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ajax
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<response type='object' id='poll'><ok/></response>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</ajax-response>"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Could not post JMS message: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Received "
operator|+
name|messages
operator|+
literal|" message(s)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Reads a message from a destination up to some specific timeout period      *       * @param request      * @param response      * @throws ServletException      * @throws IOException      */
specifier|protected
name|void
name|doMessagesWithoutContinuation
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|int
name|maxMessages
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|int
name|messages
init|=
literal|0
decl_stmt|;
try|try
block|{
name|WebClient
name|client
init|=
name|getWebClient
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|getDestination
argument_list|(
name|client
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|getReadTimeout
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|boolean
name|ajax
init|=
name|isRicoAjax
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ajax
condition|)
name|maxMessages
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Receiving message(s) from: "
operator|+
name|destination
operator|+
literal|" with timeout: "
operator|+
name|timeout
argument_list|)
expr_stmt|;
block|}
name|MessageAvailableConsumer
name|consumer
init|=
operator|(
name|MessageAvailableConsumer
operator|)
name|client
operator|.
name|getConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Continuation
name|continuation
init|=
literal|null
decl_stmt|;
name|Listener
name|listener
init|=
literal|null
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
comment|// write a responds
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|PrintWriter
name|writer
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|ajax
condition|)
name|writer
operator|.
name|println
argument_list|(
literal|"<ajax-response>"
argument_list|)
expr_stmt|;
comment|// Only one client thread at a time should poll for messages.
if|if
condition|(
name|client
operator|.
name|getSemaphore
argument_list|()
operator|.
name|tryAcquire
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Look for any available messages
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
comment|// handle any message(s)
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
comment|// No messages so OK response of for ajax else no
comment|// content.
name|response
operator|.
name|setStatus
argument_list|(
name|ajax
condition|?
name|HttpServletResponse
operator|.
name|SC_OK
else|:
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We have at least one message so set up the
comment|// response
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|getContentType
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
name|response
operator|.
name|setContentType
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// send a response for each available message (up to
comment|// max
comment|// messages)
while|while
condition|(
operator|(
name|maxMessages
operator|<
literal|0
operator|||
name|messages
operator|<
name|maxMessages
operator|)
operator|&&
name|message
operator|!=
literal|null
condition|)
block|{
comment|// System.err.println("message["+messages+"]="+message);
if|if
condition|(
name|ajax
condition|)
block|{
name|writer
operator|.
name|print
argument_list|(
literal|"<response type='object' id='"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
block|}
else|else
comment|// only ever 1 message for non ajax!
name|setResponseHeaders
argument_list|(
name|response
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|writeMessageResponse
argument_list|(
name|writer
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|ajax
condition|)
name|writer
operator|.
name|println
argument_list|(
literal|"</response>"
argument_list|)
expr_stmt|;
comment|// look for next message
name|message
operator|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
expr_stmt|;
name|messages
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|client
operator|.
name|getSemaphore
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Client is using us in another thread.
name|response
operator|.
name|setStatus
argument_list|(
name|ajax
condition|?
name|HttpServletResponse
operator|.
name|SC_OK
else|:
name|HttpServletResponse
operator|.
name|SC_NO_CONTENT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ajax
condition|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"<response type='object' id='poll'><ok/></response>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|println
argument_list|(
literal|"</ajax-response>"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Could not post JMS message: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Received "
operator|+
name|messages
operator|+
literal|" message(s)"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|writeMessageResponse
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|String
name|txt
init|=
name|textMsg
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|txt
operator|.
name|startsWith
argument_list|(
literal|"<?"
argument_list|)
condition|)
block|{
name|txt
operator|=
name|txt
operator|.
name|substring
argument_list|(
name|txt
operator|.
name|indexOf
argument_list|(
literal|"?>"
argument_list|)
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|print
argument_list|(
name|txt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
name|ObjectMessage
name|objectMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|Object
name|object
init|=
name|objectMsg
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|writer
operator|.
name|print
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isRicoAjax
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|rico
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"rico"
argument_list|)
decl_stmt|;
return|return
name|rico
operator|!=
literal|null
operator|&&
name|rico
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getContentType
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
comment|/*          * log("Params: " + request.getParameterMap()); Enumeration iter =          * request.getHeaderNames(); while (iter.hasMoreElements()) { String          * name = (String) iter.nextElement(); log("Header: " + name + " = " +          * request.getHeader(name)); }          */
name|String
name|value
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"xml"
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|"text/xml"
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|setResponseHeaders
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"destination"
argument_list|,
name|message
operator|.
name|getJMSDestination
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"id"
argument_list|,
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the timeout value for read requests which is always>= 0 and<=      *         maximumReadTimeout to avoid DoS attacks      */
specifier|protected
name|long
name|getReadTimeout
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|long
name|answer
init|=
name|defaultReadTimeout
decl_stmt|;
name|String
name|name
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|readTimeoutParameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|answer
operator|=
name|asLong
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|answer
argument_list|<
literal|0
operator|||
name|answer
argument_list|>
name|maximumReadTimeout
condition|)
block|{
name|answer
operator|=
name|maximumReadTimeout
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
comment|/*      * Listen for available messages and wakeup any continuations.      */
specifier|private
class|class
name|Listener
implements|implements
name|MessageAvailableListener
block|{
name|MessageConsumer
name|consumer
decl_stmt|;
name|Continuation
name|continuation
decl_stmt|;
name|List
name|queue
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|Listener
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
specifier|public
name|void
name|setContinuation
parameter_list|(
name|Continuation
name|continuation
parameter_list|)
block|{
synchronized|synchronized
init|(
name|consumer
init|)
block|{
name|this
operator|.
name|continuation
operator|=
name|continuation
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onMessageAvailable
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|)
block|{
assert|assert
name|this
operator|.
name|consumer
operator|==
name|consumer
assert|;
synchronized|synchronized
init|(
name|this
operator|.
name|consumer
init|)
block|{
if|if
condition|(
name|continuation
operator|!=
literal|null
condition|)
name|continuation
operator|.
name|resume
argument_list|()
expr_stmt|;
name|continuation
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

