begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|AsyncDataFileWriter
operator|.
name|WriteCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|data
operator|.
name|AsyncDataFileWriter
operator|.
name|WriteKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_comment
comment|/**  * Optimized Store reader  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|final
class|class
name|AsyncDataFileReader
implements|implements
name|DataFileReader
block|{
comment|// static final Log log = LogFactory.getLog(AsyncDataFileReader.class);
specifier|private
name|DataManager
name|dataManager
decl_stmt|;
specifier|private
name|DataByteArrayInputStream
name|dataIn
decl_stmt|;
specifier|private
specifier|final
name|Map
name|inflightWrites
decl_stmt|;
comment|/**      * Construct a Store reader      *       * @param file      */
name|AsyncDataFileReader
parameter_list|(
name|DataManager
name|fileManager
parameter_list|,
name|AsyncDataFileWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|dataManager
operator|=
name|fileManager
expr_stmt|;
name|this
operator|.
name|inflightWrites
operator|=
name|writer
operator|.
name|getInflightWrites
argument_list|()
expr_stmt|;
name|this
operator|.
name|dataIn
operator|=
operator|new
name|DataByteArrayInputStream
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.activemq.kaha.impl.data.DataFileReader#readDataItemSize(org.apache.activemq.kaha.impl.data.DataItem) 	 */
specifier|public
name|byte
name|readDataItemSize
parameter_list|(
name|DataItem
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|WriteCommand
name|asyncWrite
init|=
operator|(
name|WriteCommand
operator|)
name|inflightWrites
operator|.
name|get
argument_list|(
operator|new
name|WriteKey
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncWrite
operator|!=
literal|null
condition|)
block|{
name|item
operator|.
name|setSize
argument_list|(
name|asyncWrite
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|asyncWrite
operator|.
name|data
index|[
literal|0
index|]
return|;
block|}
name|RandomAccessFile
name|file
init|=
name|dataManager
operator|.
name|getDataFile
argument_list|(
name|item
argument_list|)
operator|.
name|getRandomAccessFile
argument_list|()
decl_stmt|;
name|byte
name|rc
decl_stmt|;
synchronized|synchronized
init|(
name|file
init|)
block|{
name|file
operator|.
name|seek
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
comment|// jump to the size field
name|rc
operator|=
name|file
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|item
operator|.
name|setSize
argument_list|(
name|file
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.activemq.kaha.impl.data.DataFileReader#readItem(org.apache.activemq.kaha.Marshaller, org.apache.activemq.kaha.StoreLocation) 	 */
specifier|public
name|Object
name|readItem
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|StoreLocation
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|WriteCommand
name|asyncWrite
init|=
operator|(
name|WriteCommand
operator|)
name|inflightWrites
operator|.
name|get
argument_list|(
operator|new
name|WriteKey
argument_list|(
name|item
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncWrite
operator|!=
literal|null
condition|)
block|{
name|ByteArrayInputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|asyncWrite
operator|.
name|data
argument_list|,
name|DataManager
operator|.
name|ITEM_HEAD_SIZE
argument_list|,
name|item
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|marshaller
operator|.
name|readPayload
argument_list|(
operator|new
name|DataInputStream
argument_list|(
name|stream
argument_list|)
argument_list|)
return|;
block|}
name|RandomAccessFile
name|file
init|=
name|dataManager
operator|.
name|getDataFile
argument_list|(
name|item
argument_list|)
operator|.
name|getRandomAccessFile
argument_list|()
decl_stmt|;
comment|// TODO: we could reuse the buffer in dataIn if it's big enough to avoid
comment|// allocating byte[] arrays on every readItem.
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|item
operator|.
name|getSize
argument_list|()
index|]
decl_stmt|;
synchronized|synchronized
init|(
name|file
init|)
block|{
name|file
operator|.
name|seek
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
operator|+
name|DataManager
operator|.
name|ITEM_HEAD_SIZE
argument_list|)
expr_stmt|;
name|file
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|dataIn
operator|.
name|restart
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|marshaller
operator|.
name|readPayload
argument_list|(
name|dataIn
argument_list|)
return|;
block|}
block|}
end_class

end_unit

