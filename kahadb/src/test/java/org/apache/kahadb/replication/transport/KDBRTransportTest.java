begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportAcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|ReplicationFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBJournalLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBSlaveInit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBType
import|;
end_import

begin_class
specifier|public
class|class
name|KDBRTransportTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KDBR_URI
init|=
literal|"kdbr://localhost:61618"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|serverQueue
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|clientQueue
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Transport
argument_list|>
name|serverTransports
decl_stmt|;
specifier|private
name|TransportServer
name|server
decl_stmt|;
specifier|private
name|Transport
name|client
decl_stmt|;
specifier|private
name|Object
name|commandLatchMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|CountDownLatch
name|commandLatch
decl_stmt|;
specifier|protected
name|void
name|releaseCommandLatch
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commandLatchMutex
init|)
block|{
if|if
condition|(
name|commandLatch
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|commandLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|commandLatch
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|CountDownLatch
name|getCommandLatch
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commandLatchMutex
init|)
block|{
if|if
condition|(
name|commandLatch
operator|==
literal|null
condition|)
block|{
name|commandLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|commandLatch
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|serverQueue
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|clientQueue
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|serverTransports
operator|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Transport
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setup a server
name|server
operator|=
name|TransportFactory
operator|.
name|bind
argument_list|(
operator|new
name|URI
argument_list|(
name|KDBR_URI
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAcceptListener
argument_list|(
operator|new
name|TransportAcceptListener
argument_list|()
block|{
specifier|public
name|void
name|onAccept
parameter_list|(
name|Transport
name|transport
parameter_list|)
block|{
try|try
block|{
name|transport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
try|try
block|{
name|serverQueue
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|process
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|releaseCommandLatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|serverQueue
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|serverTransports
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|releaseCommandLatch
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{ 						}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{ 						}
block|}
argument_list|)
expr_stmt|;
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
name|serverTransports
operator|.
name|add
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|onAcceptError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onAcceptError
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Connect a client.
name|client
operator|=
name|TransportFactory
operator|.
name|connect
argument_list|(
operator|new
name|URI
argument_list|(
name|KDBR_URI
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|clientQueue
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|releaseCommandLatch
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|clientQueue
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|releaseCommandLatch
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{ 			}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{ 			}
block|}
argument_list|)
expr_stmt|;
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|client
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|process
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|ReplicationFrame
name|frame
init|=
operator|(
name|ReplicationFrame
operator|)
name|command
decl_stmt|;
comment|// Since we are processing the commands async in this test case we need to full read the stream before
comment|// returning since will be be used to read the next command once we return.
if|if
condition|(
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|PBType
operator|.
name|FILE_TRANSFER_RESPONSE
condition|)
block|{
name|InputStream
name|ais
init|=
operator|(
name|InputStream
operator|)
name|frame
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|byte
name|actualPayload
index|[]
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getPayloadSize
argument_list|()
index|]
decl_stmt|;
name|readFully
argument_list|(
name|ais
argument_list|,
name|actualPayload
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|actualPayload
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Test a frame that has a streaming payload. 	 *  	 * @throws Exception 	 */
specifier|public
name|void
name|testFileTransferResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
name|expectedPayload
index|[]
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|}
decl_stmt|;
name|ReplicationFrame
name|expected
init|=
operator|new
name|ReplicationFrame
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setHeader
argument_list|(
operator|new
name|PBHeader
argument_list|()
operator|.
name|setType
argument_list|(
name|PBType
operator|.
name|FILE_TRANSFER_RESPONSE
argument_list|)
operator|.
name|setPayloadSize
argument_list|(
name|expectedPayload
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|expectedPayload
argument_list|)
decl_stmt|;
name|expected
operator|.
name|setPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
name|getCommandLatch
argument_list|()
decl_stmt|;
name|client
operator|.
name|oneway
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serverQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationFrame
name|actual
init|=
operator|(
name|ReplicationFrame
operator|)
name|serverQueue
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getHeader
argument_list|()
argument_list|,
name|actual
operator|.
name|getHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedPayload
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|actual
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Test out sending a frame that has a PB payload. 	 *  	 * @throws Exception 	 */
specifier|public
name|void
name|testPBSlaveInitFrame
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationFrame
name|expected
init|=
operator|new
name|ReplicationFrame
argument_list|()
decl_stmt|;
name|expected
operator|.
name|setHeader
argument_list|(
operator|new
name|PBHeader
argument_list|()
operator|.
name|setType
argument_list|(
name|PBType
operator|.
name|SLAVE_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|setPayload
argument_list|(
operator|new
name|PBSlaveInit
argument_list|()
operator|.
name|setNodeId
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|CountDownLatch
name|latch
init|=
name|getCommandLatch
argument_list|()
decl_stmt|;
name|client
operator|.
name|oneway
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serverQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationFrame
name|actual
init|=
operator|(
name|ReplicationFrame
operator|)
name|serverQueue
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getHeader
argument_list|()
argument_list|,
name|actual
operator|.
name|getHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getPayload
argument_list|()
argument_list|,
name|actual
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|readFully
parameter_list|(
name|InputStream
name|ais
parameter_list|,
name|byte
index|[]
name|actualPayload
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|actualPayload
operator|.
name|length
operator|&&
operator|(
name|c
operator|=
name|ais
operator|.
name|read
argument_list|(
name|actualPayload
argument_list|,
name|pos
argument_list|,
name|actualPayload
operator|.
name|length
operator|-
name|pos
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
name|pos
operator|+=
name|c
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|<
name|actualPayload
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

