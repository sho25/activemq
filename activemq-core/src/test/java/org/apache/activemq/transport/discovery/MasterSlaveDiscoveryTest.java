begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MasterSlaveDiscoveryTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MasterSlaveDiscoveryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A_DIRECTORY
init|=
literal|"target/activemq-data/kahadbA"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A1_NAME
init|=
literal|"BROKERA1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A1_BIND_ADDRESS
init|=
literal|"tcp://127.0.0.1:61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A2_NAME
init|=
literal|"BROKERA2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A2_BIND_ADDRESS
init|=
literal|"tcp://127.0.0.1:61617"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B_DIRECTORY
init|=
literal|"target/activemq-data/kahadbB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B1_NAME
init|=
literal|"BROKERB1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B1_BIND_ADDRESS
init|=
literal|"tcp://127.0.0.1:61626"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B2_NAME
init|=
literal|"BROKERB2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B2_BIND_ADDRESS
init|=
literal|"tcp://127.0.0.1:61627"
decl_stmt|;
specifier|private
name|BrokerService
name|brokerA1
decl_stmt|;
specifier|private
name|BrokerService
name|brokerA2
decl_stmt|;
specifier|private
name|BrokerService
name|brokerB1
decl_stmt|;
specifier|private
name|BrokerService
name|brokerB2
decl_stmt|;
specifier|private
name|String
name|clientUrlA
decl_stmt|;
specifier|private
name|String
name|clientUrlB
decl_stmt|;
specifier|public
name|void
name|testNetworkFailback
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|timeout
init|=
literal|5000
decl_stmt|;
comment|// 5 seconds
specifier|final
name|String
name|queueName
init|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|factoryA
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|clientUrlA
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|connectionA
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factoryA
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connectionA
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sessionA
init|=
name|connectionA
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queueA
init|=
name|sessionA
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|MessageProducer
name|producerA
init|=
name|sessionA
operator|.
name|createProducer
argument_list|(
name|queueA
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|factoryB
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|clientUrlB
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|connectionB
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factoryB
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connectionB
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sessionB
init|=
name|connectionB
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queueB
init|=
name|sessionB
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumerB
init|=
name|sessionA
operator|.
name|createConsumer
argument_list|(
name|queueB
argument_list|)
decl_stmt|;
comment|// Test initial configuration is working
name|String
name|msgStr
init|=
name|queueName
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Message
name|msgSent
init|=
name|sessionA
operator|.
name|createTextMessage
argument_list|(
name|msgStr
argument_list|)
decl_stmt|;
name|producerA
operator|.
name|send
argument_list|(
name|msgSent
argument_list|)
expr_stmt|;
name|Message
name|msgReceived
init|=
literal|null
decl_stmt|;
try|try
block|{
name|msgReceived
operator|=
name|consumerB
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Message Timeout"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|msgReceived
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|TextMessage
operator|)
name|msgReceived
operator|)
operator|.
name|getText
argument_list|()
argument_list|,
name|msgStr
argument_list|)
expr_stmt|;
comment|// Test Failover
name|assertTrue
argument_list|(
name|brokerB2
operator|.
name|isSlave
argument_list|()
argument_list|)
expr_stmt|;
name|brokerB1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerB2
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|brokerB2
operator|.
name|isSlave
argument_list|()
argument_list|)
expr_stmt|;
name|msgStr
operator|=
name|queueName
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|msgSent
operator|=
name|sessionA
operator|.
name|createTextMessage
argument_list|(
name|msgStr
argument_list|)
expr_stmt|;
name|producerA
operator|.
name|send
argument_list|(
name|msgSent
argument_list|)
expr_stmt|;
try|try
block|{
name|msgReceived
operator|=
name|consumerB
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Message Timeout"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|msgReceived
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|TextMessage
operator|)
name|msgReceived
operator|)
operator|.
name|getText
argument_list|()
argument_list|,
name|msgStr
argument_list|)
expr_stmt|;
comment|// Test Failback
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|brokerB1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to start broker"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"BrokerB1 Restarting"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|brokerB1
operator|.
name|isSlave
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|brokerB2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to stop broker"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"BrokerB2 Stopping"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerB2
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|brokerB1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|msgStr
operator|=
name|queueName
operator|+
literal|"-"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|msgSent
operator|=
name|sessionA
operator|.
name|createTextMessage
argument_list|(
name|msgStr
argument_list|)
expr_stmt|;
name|producerA
operator|.
name|send
argument_list|(
name|msgSent
argument_list|)
expr_stmt|;
try|try
block|{
name|msgReceived
operator|=
name|consumerB
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Message Timeout"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|msgReceived
operator|instanceof
name|TextMessage
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|TextMessage
operator|)
name|msgReceived
operator|)
operator|.
name|getText
argument_list|()
argument_list|,
name|msgStr
argument_list|)
expr_stmt|;
name|connectionA
operator|.
name|close
argument_list|()
expr_stmt|;
name|connectionB
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA1
operator|=
name|createBrokerA1
argument_list|()
expr_stmt|;
name|brokerA1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// wait to ensure A1 is master
name|brokerA2
operator|=
name|createBrokerA2
argument_list|()
expr_stmt|;
name|String
name|connectStringA1
init|=
name|brokerA1
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|String
name|connectStringA2
init|=
name|brokerA2
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|clientUrlA
operator|=
literal|"failover:("
operator|+
name|connectStringA1
operator|+
literal|","
operator|+
name|connectStringA2
operator|+
literal|")?randomize=false&updateURIsSupported=false"
expr_stmt|;
name|brokerB1
operator|=
name|createBrokerB1
argument_list|()
expr_stmt|;
name|brokerB1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// wait to ensure B1 is master
name|brokerB2
operator|=
name|createBrokerB2
argument_list|()
expr_stmt|;
name|String
name|connectStringB1
init|=
name|brokerB1
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|String
name|connectStringB2
init|=
name|brokerB2
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|clientUrlB
operator|=
literal|"failover:("
operator|+
name|connectStringB1
operator|+
literal|","
operator|+
name|connectStringB2
operator|+
literal|")?randomize=false&updateURIsSupported=false"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerB2
operator|!=
literal|null
condition|)
block|{
name|brokerB2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerB2
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|brokerB1
operator|!=
literal|null
condition|)
block|{
name|brokerB1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerB1
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|brokerA1
operator|!=
literal|null
condition|)
block|{
name|brokerA1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA1
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|brokerA2
operator|!=
literal|null
condition|)
block|{
name|brokerA2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerA2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerService
name|createBrokerA1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setBrokerName
argument_list|(
name|BROKER_A1_NAME
argument_list|)
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|BROKER_A_DIRECTORY
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
name|NetworkConnector
name|network
init|=
name|answer
operator|.
name|addNetworkConnector
argument_list|(
literal|"masterslave:("
operator|+
name|BROKER_B1_BIND_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B2_BIND_ADDRESS
operator|+
literal|")?useExponentialBackOff=false&discovered.randomize=true&discovered.maxReconnectAttempts=0"
argument_list|)
decl_stmt|;
name|network
operator|.
name|setDuplex
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// lazy create
name|TransportConnector
name|transportConnector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|transportConnector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
name|BROKER_A1_BIND_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|transportConnector
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|BrokerService
name|createBrokerA2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setBrokerName
argument_list|(
name|BROKER_A2_NAME
argument_list|)
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|BROKER_A_DIRECTORY
argument_list|)
decl_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
comment|// it is possible to *replace* the default implied failover options  via..
name|NetworkConnector
name|network
init|=
name|answer
operator|.
name|addNetworkConnector
argument_list|(
literal|"masterslave:("
operator|+
name|BROKER_B1_BIND_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B2_BIND_ADDRESS
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|network
operator|.
name|setDuplex
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// lazy create
name|TransportConnector
name|transportConnector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|transportConnector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
name|BROKER_A2_BIND_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|transportConnector
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to start broker"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"BrokerA2 Starting"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|BrokerService
name|createBrokerB1
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setBrokerName
argument_list|(
name|BROKER_B1_NAME
argument_list|)
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|BROKER_B_DIRECTORY
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
name|NetworkConnector
name|network
init|=
name|answer
operator|.
name|addNetworkConnector
argument_list|(
literal|"masterslave:("
operator|+
name|BROKER_A1_BIND_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_A2_BIND_ADDRESS
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|network
operator|.
name|setDuplex
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// lazy create
name|TransportConnector
name|transportConnector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|transportConnector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
name|BROKER_B1_BIND_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|transportConnector
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|BrokerService
name|createBrokerB2
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setBrokerName
argument_list|(
name|BROKER_B2_NAME
argument_list|)
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|BROKER_B_DIRECTORY
argument_list|)
decl_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
name|NetworkConnector
name|network
init|=
name|answer
operator|.
name|addNetworkConnector
argument_list|(
literal|"masterslave:("
operator|+
name|BROKER_A1_BIND_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_A2_BIND_ADDRESS
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|network
operator|.
name|setDuplex
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// lazy create
name|TransportConnector
name|transportConnector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|transportConnector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
name|BROKER_B2_BIND_ADDRESS
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|transportConnector
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Failed to start broker"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
literal|"BrokerB2 Starting"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

