begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|blah
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQQueueReceiver
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Queue
name|queue
init|=
literal|null
decl_stmt|;
name|QueueConnectionFactory
name|queueConnectionFactory
init|=
literal|null
decl_stmt|;
name|QueueConnection
name|queueConnection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|//props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "com.evermind.server.rmi.RMIInitialContextFactory");
comment|//props.setProperty(Context.PROVIDER_URL, "ormi://10.1.0.99:3202/default");
comment|//props.setProperty(Context.SECURITY_PRINCIPAL, "dan");
comment|//props.setProperty(Context.SECURITY_CREDENTIALS, "abc123");
name|props
operator|.
name|setProperty
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
literal|"org.activemq.jndi.ActiveMQInitialContextFactory"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
literal|"tcp://hostname:61616"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"queue.BlahQueue"
argument_list|,
literal|"example.BlahQueue"
argument_list|)
expr_stmt|;
comment|// use the following if you with to make the receiver a broker
comment|//props.setProperty("useEmbeddedBroker", "true");
name|Context
name|jndiContext
init|=
operator|new
name|InitialContext
argument_list|(
name|props
argument_list|)
decl_stmt|;
comment|//queueConnectionFactory = (QueueConnectionFactory) jndiContext.lookup("jms/QueueConnectionFactory");
comment|//queue = (Queue) jndiContext.lookup("jms/demoQueue");
name|queueConnectionFactory
operator|=
operator|(
name|QueueConnectionFactory
operator|)
name|jndiContext
operator|.
name|lookup
argument_list|(
literal|"QueueConnectionFactory"
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|(
name|Queue
operator|)
name|jndiContext
operator|.
name|lookup
argument_list|(
literal|"BlahQueue"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"---------------------------ERROR-----------------------------"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|queueConnection
operator|=
name|queueConnectionFactory
operator|.
name|createQueueConnection
argument_list|()
expr_stmt|;
name|QueueSession
name|queueSession
init|=
name|queueConnection
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|QueueReceiver
name|queueReceiver
init|=
name|queueSession
operator|.
name|createReceiver
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|queueConnection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//while (true)
comment|//{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting to receive"
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|queueReceiver
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|Date
name|timestamp
init|=
operator|new
name|Date
argument_list|(
name|message
operator|.
name|getJMSTimestamp
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Blah:       "
operator|+
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"Blah"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Timestamp:  "
operator|+
name|timestamp
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Payload:    "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"NO MESSAGES"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
comment|//Thread.sleep(10000);
comment|//}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SOMETHING WENT WRONG WHILE CONSUMING"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|queueConnection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|queueConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
block|}
block|}
block|}
block|}
end_class

end_unit

