begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
package|;
end_package

begin_class
specifier|public
class|class
name|JmsConsumerProperties
extends|extends
name|JmsClientProperties
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TIME_BASED_RECEIVING
init|=
literal|"time"
decl_stmt|;
comment|// Receive messages on a time-based interval
specifier|public
specifier|static
specifier|final
name|String
name|COUNT_BASED_RECEIVING
init|=
literal|"count"
decl_stmt|;
comment|// Receive a specific count of messages
specifier|protected
name|boolean
name|durable
init|=
literal|false
decl_stmt|;
comment|// Consumer is a durable subscriber
specifier|protected
name|boolean
name|unsubscribe
init|=
literal|true
decl_stmt|;
comment|// If true, unsubscribe a durable subscriber after it finishes running
specifier|protected
name|boolean
name|asyncRecv
init|=
literal|true
decl_stmt|;
comment|// If true, use onMessage() to receive messages, else use receive()
specifier|protected
name|long
name|recvCount
init|=
literal|1000000
decl_stmt|;
comment|// Receive a million messages by default
specifier|protected
name|long
name|recvDuration
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// Receive for 5 mins by default
specifier|protected
name|String
name|recvType
init|=
name|TIME_BASED_RECEIVING
decl_stmt|;
specifier|public
name|boolean
name|isDurable
parameter_list|()
block|{
return|return
name|durable
return|;
block|}
specifier|public
name|void
name|setDurable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|this
operator|.
name|durable
operator|=
name|durable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUnsubscribe
parameter_list|()
block|{
return|return
name|unsubscribe
return|;
block|}
specifier|public
name|void
name|setUnsubscribe
parameter_list|(
name|boolean
name|unsubscribe
parameter_list|)
block|{
name|this
operator|.
name|unsubscribe
operator|=
name|unsubscribe
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAsyncRecv
parameter_list|()
block|{
return|return
name|asyncRecv
return|;
block|}
specifier|public
name|void
name|setAsyncRecv
parameter_list|(
name|boolean
name|asyncRecv
parameter_list|)
block|{
name|this
operator|.
name|asyncRecv
operator|=
name|asyncRecv
expr_stmt|;
block|}
specifier|public
name|long
name|getRecvCount
parameter_list|()
block|{
return|return
name|recvCount
return|;
block|}
specifier|public
name|void
name|setRecvCount
parameter_list|(
name|long
name|recvCount
parameter_list|)
block|{
name|this
operator|.
name|recvCount
operator|=
name|recvCount
expr_stmt|;
block|}
specifier|public
name|long
name|getRecvDuration
parameter_list|()
block|{
return|return
name|recvDuration
return|;
block|}
specifier|public
name|void
name|setRecvDuration
parameter_list|(
name|long
name|recvDuration
parameter_list|)
block|{
name|this
operator|.
name|recvDuration
operator|=
name|recvDuration
expr_stmt|;
block|}
specifier|public
name|String
name|getRecvType
parameter_list|()
block|{
return|return
name|recvType
return|;
block|}
specifier|public
name|void
name|setRecvType
parameter_list|(
name|String
name|recvType
parameter_list|)
block|{
name|this
operator|.
name|recvType
operator|=
name|recvType
expr_stmt|;
block|}
block|}
end_class

end_unit

