begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * Like a BrokerFilter but it allows you to switch the getNext().broker. This  * has more overhead than a BrokerFilter since access to the getNext().broker  * has to synchronized since it is mutable  *  *  */
end_comment

begin_class
specifier|public
class|class
name|MutableBrokerFilter
extends|extends
name|BrokerFilter
block|{
specifier|protected
name|AtomicReference
argument_list|<
name|Broker
argument_list|>
name|next
init|=
operator|new
name|AtomicReference
argument_list|<
name|Broker
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MutableBrokerFilter
parameter_list|(
name|Broker
name|next
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// prevent future code from using the inherited 'next'
name|this
operator|.
name|next
operator|.
name|set
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Broker
name|getAdaptor
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|next
operator|.
name|get
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|Broker
name|getNext
parameter_list|()
block|{
return|return
name|next
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setNext
parameter_list|(
name|Broker
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|.
name|set
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

