begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MessageGroupDelayedTest
extends|extends
name|JmsTestSupport
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MessageGroupDelayedTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|protected
name|MessageProducer
name|producer
decl_stmt|;
specifier|protected
name|Destination
name|destination
decl_stmt|;
specifier|public
name|int
name|consumersBeforeDispatchStarts
decl_stmt|;
specifier|public
name|int
name|timeBeforeDispatchStarts
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|TransportConnector
name|connector
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|messageCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|messageGroups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|MessageGroupDelayedTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|connFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connector
operator|.
name|getConnectUri
argument_list|()
operator|+
literal|"?jms.prefetchPolicy.all=1"
argument_list|)
decl_stmt|;
name|connection
operator|=
name|connFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|destination
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test-queue2"
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|service
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|service
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Setup a destination policy where it takes only 1 message at a time.
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"testing with consumersBeforeDispatchStarts="
operator|+
name|consumersBeforeDispatchStarts
operator|+
literal|" and timeBeforeDispatchStarts="
operator|+
name|timeBeforeDispatchStarts
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setConsumersBeforeDispatchStarts
argument_list|(
name|consumersBeforeDispatchStarts
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setTimeBeforeDispatchStarts
argument_list|(
name|timeBeforeDispatchStarts
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|service
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|connector
operator|=
name|service
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestDelayedDirectConnectionListener
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"consumersBeforeDispatchStarts"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"timeBeforeDispatchStarts"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|0
block|,
literal|100
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDelayedDirectConnectionListener
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msga
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"hello a"
argument_list|)
decl_stmt|;
name|msga
operator|.
name|setStringProperty
argument_list|(
literal|"JMSXGroupID"
argument_list|,
literal|"A"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msga
argument_list|)
expr_stmt|;
name|Message
name|msgb
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"hello b"
argument_list|)
decl_stmt|;
name|msgb
operator|.
name|setStringProperty
argument_list|(
literal|"JMSXGroupID"
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msgb
argument_list|)
expr_stmt|;
name|Message
name|msgc
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"hello c"
argument_list|)
decl_stmt|;
name|msgc
operator|.
name|setStringProperty
argument_list|(
literal|"JMSXGroupID"
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msgc
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"30 messages sent to group A/B/C"
argument_list|)
expr_stmt|;
name|int
index|[]
name|counters
init|=
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|}
decl_stmt|;
name|CountDownLatch
name|startSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|CountDownLatch
name|doneSignal
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|messageCount
operator|.
name|put
argument_list|(
literal|"worker1"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|messageGroups
operator|.
name|put
argument_list|(
literal|"worker1"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Worker
name|worker1
init|=
operator|new
name|Worker
argument_list|(
name|connection
argument_list|,
name|destination
argument_list|,
literal|"worker1"
argument_list|,
name|startSignal
argument_list|,
name|doneSignal
argument_list|,
name|counters
argument_list|,
name|messageCount
argument_list|,
name|messageGroups
argument_list|)
decl_stmt|;
name|messageCount
operator|.
name|put
argument_list|(
literal|"worker2"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|messageGroups
operator|.
name|put
argument_list|(
literal|"worker2"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Worker
name|worker2
init|=
operator|new
name|Worker
argument_list|(
name|connection
argument_list|,
name|destination
argument_list|,
literal|"worker2"
argument_list|,
name|startSignal
argument_list|,
name|doneSignal
argument_list|,
name|counters
argument_list|,
name|messageCount
argument_list|,
name|messageGroups
argument_list|)
decl_stmt|;
name|messageCount
operator|.
name|put
argument_list|(
literal|"worker3"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|messageGroups
operator|.
name|put
argument_list|(
literal|"worker3"
argument_list|,
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Worker
name|worker3
init|=
operator|new
name|Worker
argument_list|(
name|connection
argument_list|,
name|destination
argument_list|,
literal|"worker3"
argument_list|,
name|startSignal
argument_list|,
name|doneSignal
argument_list|,
name|counters
argument_list|,
name|messageCount
argument_list|,
name|messageGroups
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|(
name|worker1
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|worker2
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|(
name|worker3
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|startSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|doneSignal
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// check results
if|if
condition|(
name|consumersBeforeDispatchStarts
operator|==
literal|0
operator|&&
name|timeBeforeDispatchStarts
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Ignoring results because both parameters are 0"
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|String
name|worker
range|:
name|messageCount
operator|.
name|keySet
argument_list|()
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"worker "
operator|+
name|worker
operator|+
literal|" received "
operator|+
name|messageCount
operator|.
name|get
argument_list|(
name|worker
argument_list|)
operator|+
literal|" messages from groups "
operator|+
name|messageGroups
operator|.
name|get
argument_list|(
name|worker
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"worker "
operator|+
name|worker
operator|+
literal|" received "
operator|+
name|messageCount
operator|.
name|get
argument_list|(
name|worker
argument_list|)
operator|+
literal|" messages from groups "
operator|+
name|messageGroups
operator|.
name|get
argument_list|(
name|worker
argument_list|)
argument_list|,
literal|10
argument_list|,
name|messageCount
operator|.
name|get
argument_list|(
name|worker
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"worker "
operator|+
name|worker
operator|+
literal|" received "
operator|+
name|messageCount
operator|.
name|get
argument_list|(
name|worker
argument_list|)
operator|+
literal|" messages from groups "
operator|+
name|messageGroups
operator|.
name|get
argument_list|(
name|worker
argument_list|)
argument_list|,
literal|1
argument_list|,
name|messageGroups
operator|.
name|get
argument_list|(
name|worker
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|Worker
implements|implements
name|Runnable
block|{
specifier|private
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
specifier|private
name|Destination
name|queueName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|workerName
init|=
literal|null
decl_stmt|;
specifier|private
name|CountDownLatch
name|startSignal
init|=
literal|null
decl_stmt|;
specifier|private
name|CountDownLatch
name|doneSignal
init|=
literal|null
decl_stmt|;
specifier|private
name|int
index|[]
name|counters
init|=
literal|null
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|messageCount
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|messageGroups
decl_stmt|;
specifier|private
name|Worker
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Destination
name|queueName
parameter_list|,
name|String
name|workerName
parameter_list|,
name|CountDownLatch
name|startSignal
parameter_list|,
name|CountDownLatch
name|doneSignal
parameter_list|,
name|int
index|[]
name|counters
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|messageCount
parameter_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|messageGroups
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|queueName
expr_stmt|;
name|this
operator|.
name|workerName
operator|=
name|workerName
expr_stmt|;
name|this
operator|.
name|startSignal
operator|=
name|startSignal
expr_stmt|;
name|this
operator|.
name|doneSignal
operator|=
name|doneSignal
expr_stmt|;
name|this
operator|.
name|counters
operator|=
name|counters
expr_stmt|;
name|this
operator|.
name|messageCount
operator|=
name|messageCount
expr_stmt|;
name|this
operator|.
name|messageGroups
operator|=
name|messageGroups
expr_stmt|;
block|}
specifier|private
name|void
name|update
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|int
name|msgCount
init|=
name|messageCount
operator|.
name|get
argument_list|(
name|workerName
argument_list|)
decl_stmt|;
name|messageCount
operator|.
name|put
argument_list|(
name|workerName
argument_list|,
name|msgCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|groups
init|=
name|messageGroups
operator|.
name|get
argument_list|(
name|workerName
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|messageGroups
operator|.
name|put
argument_list|(
name|workerName
argument_list|,
name|groups
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
name|workerName
argument_list|)
expr_stmt|;
name|startSignal
operator|.
name|await
argument_list|()
expr_stmt|;
name|Session
name|sess
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|counters
index|[
literal|0
index|]
operator|==
literal|0
operator|&&
name|counters
index|[
literal|1
index|]
operator|==
literal|0
operator|&&
name|counters
index|[
literal|2
index|]
operator|==
literal|0
condition|)
block|{
name|doneSignal
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|workerName
operator|+
literal|" done..."
argument_list|)
expr_stmt|;
break|break;
block|}
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|500
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
continue|continue;
name|String
name|group
init|=
name|msg
operator|.
name|getStringProperty
argument_list|(
literal|"JMSXGroupID"
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
name|msg
operator|.
name|getBooleanProperty
argument_list|(
literal|"JMSXGroupFirstForConsumer"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"A"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
operator|--
name|counters
index|[
literal|0
index|]
expr_stmt|;
name|update
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"B"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
operator|--
name|counters
index|[
literal|1
index|]
expr_stmt|;
name|update
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"C"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
operator|--
name|counters
index|[
literal|2
index|]
expr_stmt|;
name|update
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"unknown group"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counters
index|[
literal|0
index|]
operator|!=
literal|0
operator|||
name|counters
index|[
literal|1
index|]
operator|!=
literal|0
operator|||
name|counters
index|[
literal|2
index|]
operator|!=
literal|0
condition|)
block|{
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

