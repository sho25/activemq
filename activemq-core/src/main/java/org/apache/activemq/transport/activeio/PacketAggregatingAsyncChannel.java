begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|activeio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|FilterAsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|PacketData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|AppendedPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_comment
comment|/**  * This PacketAggregatingAsyncChannel can be used when the client is sending a  * 'record' style packet down the channel stack and needs receiving end to  * receive the same 'record' packets.  *   * This is very useful since in general, a channel does not grantee that a  * Packet that is sent down will not be fragmented or combined with other Packet  * objects.  *   * This {@see org.activeio.AsyncChannel} adds a 4 byte header  * to each packet that is sent down.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|PacketAggregatingAsyncChannel
extends|extends
name|FilterAsyncChannel
block|{
specifier|private
specifier|static
specifier|final
name|int
name|HEADER_LENGTH
init|=
literal|4
decl_stmt|;
name|Packet
name|incompleteUpPacket
decl_stmt|;
name|boolean
name|headerLoaded
decl_stmt|;
specifier|private
name|int
name|upPacketLength
decl_stmt|;
specifier|public
name|PacketAggregatingAsyncChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
try|try
block|{
comment|// Pass through the EOS packet.
if|if
condition|(
name|packet
operator|==
name|EOSPacket
operator|.
name|EOS_PACKET
condition|)
block|{
name|channelListener
operator|.
name|onPacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|incompleteUpPacket
operator|!=
literal|null
condition|)
block|{
name|packet
operator|=
name|AppendedPacket
operator|.
name|join
argument_list|(
name|incompleteUpPacket
argument_list|,
name|packet
argument_list|)
expr_stmt|;
name|incompleteUpPacket
operator|=
literal|null
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|headerLoaded
condition|)
block|{
name|headerLoaded
operator|=
name|packet
operator|.
name|remaining
argument_list|()
operator|>=
name|HEADER_LENGTH
expr_stmt|;
if|if
condition|(
name|headerLoaded
condition|)
block|{
name|int
name|pos
init|=
name|packet
operator|.
name|position
argument_list|()
decl_stmt|;
name|upPacketLength
operator|=
name|PacketData
operator|.
name|readIntBig
argument_list|(
name|packet
argument_list|)
expr_stmt|;
name|packet
operator|.
name|position
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|upPacketLength
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Up packet length was invalid: "
operator|+
name|upPacketLength
argument_list|)
throw|;
block|}
name|upPacketLength
operator|+=
literal|4
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|headerLoaded
condition|)
break|break;
block|}
if|if
condition|(
name|packet
operator|.
name|remaining
argument_list|()
operator|<
name|upPacketLength
condition|)
break|break;
comment|// Get ready to create a slice to send up.
name|int
name|origLimit
init|=
name|packet
operator|.
name|limit
argument_list|()
decl_stmt|;
name|packet
operator|.
name|limit
argument_list|(
name|upPacketLength
argument_list|)
expr_stmt|;
name|channelListener
operator|.
name|onPacket
argument_list|(
name|packet
operator|.
name|slice
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get a slice of the remaining since that will dump
comment|// the first packets of an AppendedPacket
name|packet
operator|.
name|position
argument_list|(
name|upPacketLength
argument_list|)
expr_stmt|;
name|packet
operator|.
name|limit
argument_list|(
name|origLimit
argument_list|)
expr_stmt|;
name|packet
operator|=
name|packet
operator|.
name|slice
argument_list|()
expr_stmt|;
comment|// Need to load a header again now.
name|headerLoaded
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|packet
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|incompleteUpPacket
operator|=
name|packet
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|channelListener
operator|.
name|onPacketError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

