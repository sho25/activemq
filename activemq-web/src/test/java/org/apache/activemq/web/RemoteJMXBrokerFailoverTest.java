begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|LocateRegistry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|registry
operator|.
name|Registry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorServerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|web
operator|.
name|config
operator|.
name|SystemPropertiesConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|RemoteJMXBrokerFailoverTest
block|{
specifier|private
name|BrokerService
name|master
decl_stmt|;
specifier|private
name|BrokerService
name|slave
decl_stmt|;
specifier|private
name|LinkedList
argument_list|<
name|JMXConnectorServer
argument_list|>
name|serverList
init|=
operator|new
name|LinkedList
argument_list|<
name|JMXConnectorServer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startUp
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
literal|"broker:()/master?useJmx=true"
argument_list|)
expr_stmt|;
name|configureMBeanServer
argument_list|(
name|master
argument_list|,
literal|1050
argument_list|)
expr_stmt|;
name|slave
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
literal|"broker:()/slave?useJmx=true"
argument_list|)
expr_stmt|;
name|configureMBeanServer
argument_list|(
name|slave
argument_list|,
literal|1060
argument_list|)
expr_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
name|master
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
specifier|final
name|BrokerService
name|slaveToStart
init|=
name|slave
decl_stmt|;
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|slaveToStart
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|configureMBeanServer
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
block|{
comment|// shared fs master/slave
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|brokerService
operator|.
name|getDataDirectoryFile
argument_list|()
argument_list|,
literal|"shared"
argument_list|)
argument_list|)
expr_stmt|;
name|ManagementContext
name|managementContext
init|=
name|brokerService
operator|.
name|getManagementContext
argument_list|()
decl_stmt|;
comment|// have mbean servers remain alive - like in karaf container
name|MBeanServer
name|mbeanServer
init|=
name|MBeanServerFactory
operator|.
name|createMBeanServer
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
argument_list|)
decl_stmt|;
name|Registry
name|registry
init|=
name|LocateRegistry
operator|.
name|createRegistry
argument_list|(
name|port
operator|+
literal|1
argument_list|)
decl_stmt|;
name|JMXConnectorServer
name|connectorServer
init|=
name|JMXConnectorServerFactory
operator|.
name|newJMXConnectorServer
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
literal|"service:jmx:rmi://localhost:"
operator|+
name|port
operator|+
literal|"/jndi/rmi://localhost:"
operator|+
operator|(
name|port
operator|+
literal|1
operator|)
operator|+
literal|"/jmxrmi"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|mbeanServer
argument_list|)
decl_stmt|;
name|connectorServer
operator|.
name|start
argument_list|()
expr_stmt|;
name|serverList
operator|.
name|addFirst
argument_list|(
name|connectorServer
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|setMBeanServer
argument_list|(
name|mbeanServer
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectToMasterFailover
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|jmxUri
init|=
literal|""
decl_stmt|;
for|for
control|(
name|JMXConnectorServer
name|jmxConnectorServer
range|:
name|serverList
control|)
block|{
if|if
condition|(
operator|!
name|jmxUri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|jmxUri
operator|+=
literal|','
expr_stmt|;
block|}
name|jmxUri
operator|+=
name|jmxConnectorServer
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"jmx url: "
operator|+
name|jmxUri
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"webconsole.jmx.url"
argument_list|,
name|jmxUri
argument_list|)
expr_stmt|;
name|RemoteJMXBrokerFacade
name|brokerFacade
init|=
operator|new
name|RemoteJMXBrokerFacade
argument_list|()
decl_stmt|;
name|SystemPropertiesConfiguration
name|configuration
init|=
operator|new
name|SystemPropertiesConfiguration
argument_list|()
decl_stmt|;
name|brokerFacade
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"connected to master"
argument_list|,
name|master
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|brokerFacade
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|stopAndRestartMaster
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"connected to slave"
argument_list|,
name|slave
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|brokerFacade
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stopAndRestartMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|master
operator|.
name|stop
argument_list|()
expr_stmt|;
name|master
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|slave
operator|.
name|isSlave
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
name|master
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

