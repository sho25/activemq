begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|// https://issues.apache.org/jira/browse/AMQ-7353
end_comment

begin_class
specifier|public
class|class
name|VisibilityTest
block|{
comment|// seems to reproduce easily with a direct referene to bytesSequence
comment|// a simpler message LocalMessage with less logic, reproduces ok.
comment|// however adding more logic to org.apache.activemq.command.VisibilityTest.LocalMessage.beforeMarshall will throw it off.
comment|// It could be down to cache lines, it is a brittle test - but it does demonstrate the problem in theory
comment|// an allocation in one thread may not be fully visible in another even after the init has complete!
comment|// I wanted to prove the need for the volatile to avoid the npe, doing the extra work when it is not visible is fine
comment|// but the NPE is a real problem when it happens.
specifier|static
name|ActiveMQBytesMessage
name|bytesMessage
decl_stmt|;
specifier|static
name|ByteSequence
name|byteSequence
decl_stmt|;
specifier|static
name|LocalMessage
name|localMessage
decl_stmt|;
specifier|static
class|class
name|LocalMessage
block|{
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
comment|/* the fix */
specifier|volatile
name|ByteSequence
name|marshalledProperties
decl_stmt|;
specifier|public
name|int
name|total
decl_stmt|;
specifier|public
name|void
name|setBooleanProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|v
parameter_list|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|beforeMarshall
parameter_list|(
name|WireFormat
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
comment|// putting the following (real work) in and it won't reproduce
comment|//DataOutputStream os = new DataOutputStream(baos);
comment|//MarshallingSupport.marshalPrimitiveMap(properties, os);
comment|//os.close();
name|total
operator|+=
name|properties
operator|.
name|size
argument_list|()
expr_stmt|;
name|marshalledProperties
operator|=
name|baos
operator|.
name|toByteSequence
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ByteSequence
name|getMarshalledProperties
parameter_list|()
block|{
return|return
name|marshalledProperties
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|checkNull
parameter_list|()
block|{
name|ByteSequence
name|local
init|=
name|byteSequence
decl_stmt|;
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
block|{
comment|// if local is non null, the internal buffer may not be visible!
return|return
name|local
operator|.
name|getData
argument_list|()
operator|.
name|length
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|int
name|checkNullReference
parameter_list|()
block|{
name|ActiveMQBytesMessage
name|message
init|=
name|bytesMessage
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|local
init|=
name|message
operator|.
name|getMarshalledProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
block|{
comment|// if local is non null, the internal buffer may not be visible!
return|return
name|local
operator|.
name|getData
argument_list|()
operator|.
name|length
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|int
name|checkNullReferenceOnLocalMessage
parameter_list|()
block|{
name|LocalMessage
name|message
init|=
name|localMessage
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|local
init|=
name|message
operator|.
name|getMarshalledProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
block|{
comment|// if local is non null, the internal buffer may not be visible!
return|return
name|local
operator|.
name|getData
argument_list|()
operator|.
name|length
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Ignore
specifier|public
name|void
name|doTestNested
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|gotError
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|tryingToMarshall
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|total
operator|+=
name|checkNullReference
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|gotError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"from other thread "
operator|+
name|total
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|long
name|len
init|=
literal|0
decl_stmt|;
name|tryingToMarshall
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|10
condition|;
name|t
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000_000
condition|;
name|i
operator|++
control|)
block|{
comment|// real world
name|ActiveMQBytesMessage
name|message
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
comment|// needs non null properties to init marshalledProperties
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"B"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|beforeMarshall
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|bytesMessage
operator|=
name|message
expr_stmt|;
comment|// local access after publish
name|len
operator|+=
name|message
operator|.
name|getMarshalledProperties
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
name|tryingToMarshall
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|tryingToMarshall
operator|.
name|join
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no errors, no npe!"
argument_list|,
name|gotError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doTestNestedLocalMessage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|gotError
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|tryingToMarshall
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|total
operator|+=
name|checkNullReferenceOnLocalMessage
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|gotError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"from other thread "
operator|+
name|total
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|long
name|len
init|=
literal|0
decl_stmt|;
name|tryingToMarshall
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|10
condition|;
name|t
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000_000
condition|;
name|i
operator|++
control|)
block|{
comment|// real world
name|LocalMessage
name|message
init|=
operator|new
name|LocalMessage
argument_list|()
decl_stmt|;
comment|// needs non null properties to init marshalledProperties
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"B"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|beforeMarshall
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|localMessage
operator|=
name|message
expr_stmt|;
comment|// local access after publish
name|len
operator|+=
name|message
operator|.
name|getMarshalledProperties
argument_list|()
operator|.
name|getData
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
name|tryingToMarshall
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|tryingToMarshall
operator|.
name|join
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no errors, no npe!"
argument_list|,
name|gotError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
specifier|public
name|void
name|doTestDirect
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|gotError
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|tryingToMarshall
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|total
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|total
operator|+=
name|checkNull
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|gotError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"from other thread "
operator|+
name|total
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|long
name|len
init|=
literal|0
decl_stmt|;
name|tryingToMarshall
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|10
condition|;
name|t
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000_000
condition|;
name|i
operator|++
control|)
block|{
name|ByteArrayOutputStream
name|byteArrayOutputStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byteSequence
operator|=
name|byteArrayOutputStream
operator|.
name|toByteSequence
argument_list|()
expr_stmt|;
comment|// local access after publish
name|len
operator|+=
name|byteSequence
operator|.
name|getData
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
name|tryingToMarshall
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|tryingToMarshall
operator|.
name|join
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|len
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"no errors, no npe!"
argument_list|,
name|gotError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

