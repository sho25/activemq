begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|CountDownFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|LevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|replicated
operator|.
name|MasterLevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|replicated
operator|.
name|SlaveLevelDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|util
operator|.
name|FileSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|ReplicatedLevelDBStoreTest
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReplicatedLevelDBStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testMinReplicaEnforced
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|masterDir
init|=
operator|new
name|File
argument_list|(
literal|"target/activemq-data/leveldb-node1"
argument_list|)
decl_stmt|;
name|File
name|slaveDir
init|=
operator|new
name|File
argument_list|(
literal|"target/activemq-data/leveldb-node2"
argument_list|)
decl_stmt|;
name|FileSupport
operator|.
name|toRichFile
argument_list|(
name|masterDir
argument_list|)
operator|.
name|recursiveDelete
argument_list|()
expr_stmt|;
name|FileSupport
operator|.
name|toRichFile
argument_list|(
name|slaveDir
argument_list|)
operator|.
name|recursiveDelete
argument_list|()
expr_stmt|;
name|MasterLevelDBStore
name|master
init|=
name|createMaster
argument_list|(
name|masterDir
argument_list|)
decl_stmt|;
name|master
operator|.
name|setMinReplica
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
name|MessageStore
name|ms
init|=
name|master
operator|.
name|createQueueMessageStore
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Updating the store should not complete since we don't have enough
comment|// replicas.
name|CountDownFuture
name|f
init|=
name|asyncAddMessage
argument_list|(
name|ms
argument_list|,
literal|"m1"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|f
operator|.
name|completed
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Adding a slave should allow that update to complete.
name|SlaveLevelDBStore
name|slave
init|=
name|createSlave
argument_list|(
name|master
argument_list|,
name|slaveDir
argument_list|)
decl_stmt|;
name|slave
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|completed
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// New updates should complete quickly now..
name|f
operator|=
name|asyncAddMessage
argument_list|(
name|ms
argument_list|,
literal|"m2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|completed
argument_list|()
operator|.
name|await
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// If the slave goes offline, then updates should once again
comment|// not complete.
name|slave
operator|.
name|stop
argument_list|()
expr_stmt|;
name|f
operator|=
name|asyncAddMessage
argument_list|(
name|ms
argument_list|,
literal|"m3"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|f
operator|.
name|completed
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart and the op should complete.
name|slave
operator|=
name|createSlave
argument_list|(
name|master
argument_list|,
name|slaveDir
argument_list|)
expr_stmt|;
name|slave
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|completed
argument_list|()
operator|.
name|await
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slave
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|CountDownFuture
name|asyncAddMessage
parameter_list|(
specifier|final
name|MessageStore
name|ms
parameter_list|,
specifier|final
name|String
name|body
parameter_list|)
block|{
specifier|final
name|CountDownFuture
name|f
init|=
operator|new
name|CountDownFuture
argument_list|(
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|LevelDBStore
operator|.
name|BLOCKING_EXECUTOR
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|addMessage
argument_list|(
name|ms
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|f
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
specifier|public
name|void
name|testReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedList
argument_list|<
name|File
argument_list|>
name|directories
init|=
operator|new
name|LinkedList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|directories
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/activemq-data/leveldb-node1"
argument_list|)
argument_list|)
expr_stmt|;
name|directories
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/activemq-data/leveldb-node2"
argument_list|)
argument_list|)
expr_stmt|;
name|directories
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/activemq-data/leveldb-node3"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|f
range|:
name|directories
control|)
block|{
name|FileSupport
operator|.
name|toRichFile
argument_list|(
name|f
argument_list|)
operator|.
name|recursiveDelete
argument_list|()
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|expected_list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// We will rotate between 3 nodes the task of being the master.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|MasterLevelDBStore
name|master
init|=
name|createMaster
argument_list|(
name|directories
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
name|SlaveLevelDBStore
name|slave1
init|=
name|createSlave
argument_list|(
name|master
argument_list|,
name|directories
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|SlaveLevelDBStore
name|slave2
init|=
name|createSlave
argument_list|(
name|master
argument_list|,
name|directories
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|slave2
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding messages..."
argument_list|)
expr_stmt|;
name|MessageStore
name|ms
init|=
name|master
operator|.
name|createQueueMessageStore
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|TOTAL
init|=
literal|500
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOTAL
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
operator|(
call|(
name|int
call|)
argument_list|(
name|TOTAL
operator|*
literal|0.10
argument_list|)
operator|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
operator|(
literal|100
operator|*
name|i
operator|/
name|TOTAL
operator|)
operator|+
literal|"% done"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
literal|250
condition|)
block|{
name|slave1
operator|.
name|start
argument_list|()
expr_stmt|;
name|slave2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|String
name|msgid
init|=
literal|"m:"
operator|+
name|j
operator|+
literal|":"
operator|+
name|i
decl_stmt|;
name|addMessage
argument_list|(
name|ms
argument_list|,
name|msgid
argument_list|)
expr_stmt|;
name|expected_list
operator|.
name|add
argument_list|(
name|msgid
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking master state"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected_list
argument_list|,
name|getMessages
argument_list|(
name|ms
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping master: "
operator|+
name|master
operator|.
name|replicaId
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping slave: "
operator|+
name|slave1
operator|.
name|replicaId
argument_list|()
argument_list|)
expr_stmt|;
name|slave1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Rotate the dir order so that slave1 becomes the master next.
name|directories
operator|.
name|addLast
argument_list|(
name|directories
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SlaveLevelDBStore
name|createSlave
parameter_list|(
name|MasterLevelDBStore
name|master
parameter_list|,
name|File
name|directory
parameter_list|)
block|{
name|SlaveLevelDBStore
name|slave1
init|=
operator|new
name|SlaveLevelDBStore
argument_list|()
decl_stmt|;
name|slave1
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|slave1
operator|.
name|setConnect
argument_list|(
literal|"tcp://127.0.0.1:"
operator|+
name|master
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|slave1
operator|.
name|setSecurityToken
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|slave1
operator|.
name|setLogSize
argument_list|(
literal|1023
operator|*
literal|200
argument_list|)
expr_stmt|;
return|return
name|slave1
return|;
block|}
specifier|private
name|MasterLevelDBStore
name|createMaster
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|MasterLevelDBStore
name|master
init|=
operator|new
name|MasterLevelDBStore
argument_list|()
decl_stmt|;
name|master
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|master
operator|.
name|setBind
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
name|master
operator|.
name|setSecurityToken
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|master
operator|.
name|setMinReplica
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|master
operator|.
name|setLogSize
argument_list|(
literal|1023
operator|*
literal|200
argument_list|)
expr_stmt|;
return|return
name|master
return|;
block|}
name|long
name|id_counter
init|=
literal|0L
decl_stmt|;
name|String
name|payload
init|=
literal|""
decl_stmt|;
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|payload
operator|+=
literal|"x"
expr_stmt|;
block|}
block|}
specifier|public
name|ActiveMQTextMessage
name|addMessage
parameter_list|(
name|MessageStore
name|ms
parameter_list|,
name|String
name|body
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"id"
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|id_counter
operator|+=
literal|1
expr_stmt|;
name|MessageId
name|messageId
init|=
operator|new
name|MessageId
argument_list|(
literal|"ID:localhost-56913-1254499826208-0:0:1:1:"
operator|+
name|id_counter
argument_list|)
decl_stmt|;
name|messageId
operator|.
name|setBrokerSequenceId
argument_list|(
name|id_counter
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
name|ms
operator|.
name|addMessage
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getMessages
parameter_list|(
name|MessageStore
name|ms
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|rc
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ms
operator|.
name|recover
argument_list|(
operator|new
name|MessageRecoveryListener
argument_list|()
block|{
specifier|public
name|boolean
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|rc
operator|.
name|add
argument_list|(
operator|(
operator|(
name|ActiveMQTextMessage
operator|)
name|message
operator|)
operator|.
name|getStringProperty
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|hasSpace
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|recoverMessageReference
parameter_list|(
name|MessageId
name|ref
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isDuplicate
parameter_list|(
name|MessageId
name|ref
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
end_class

end_unit

