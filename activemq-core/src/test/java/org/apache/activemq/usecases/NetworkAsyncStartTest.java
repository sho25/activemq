begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SocketProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkAsyncStartTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NetworkAsyncStartTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|brokerBUri
init|=
literal|"tcp://localhost:61617"
decl_stmt|;
specifier|private
name|String
name|brokerCUri
init|=
literal|"tcp://localhost:61618"
decl_stmt|;
name|int
name|bridgeCount
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|testAsyncNetworkStartup
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
decl_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|brokerBUri
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|brokerCUri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting A, no blocking on failed network connectors"
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting C transport connector"
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerC
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
decl_stmt|;
name|brokerC
operator|.
name|addConnector
argument_list|(
name|brokerCUri
argument_list|)
expr_stmt|;
name|brokerC
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got bridge to C"
argument_list|,
name|waitForBridgeFormation
argument_list|(
name|brokerA
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got bridge A->C"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting B transport connector"
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerB
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
decl_stmt|;
name|brokerB
operator|.
name|addConnector
argument_list|(
name|brokerBUri
argument_list|)
expr_stmt|;
name|brokerC
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got bridge to B"
argument_list|,
name|waitForBridgeFormation
argument_list|(
name|brokerA
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got bridge to B&C"
argument_list|,
name|waitForBridgeFormation
argument_list|(
name|brokerA
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAsyncNetworkStartupWithSlowConnectionCreation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|BrokerService
name|brokerA
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
decl_stmt|;
name|SocketProxy
name|proxyToB
init|=
operator|new
name|SocketProxy
argument_list|()
decl_stmt|;
comment|// don't accept any connections so limited to one connection with backlog
name|proxyToB
operator|.
name|setPauseAtStart
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|proxyToB
operator|.
name|setAcceptBacklog
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|proxyToB
operator|.
name|setTarget
argument_list|(
operator|new
name|URI
argument_list|(
name|brokerBUri
argument_list|)
argument_list|)
expr_stmt|;
name|proxyToB
operator|.
name|open
argument_list|()
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|proxyToB
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|proxyToB
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|proxyToB
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|proxyToB
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|proxyToB
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|proxyToB
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|proxyToB
operator|.
name|getUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|bridgeBroker
argument_list|(
name|brokerA
argument_list|,
name|brokerCUri
argument_list|)
expr_stmt|;
name|Executor
name|e
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
name|e
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"starting A"
argument_list|)
expr_stmt|;
try|try
block|{
name|brokerA
operator|.
name|setNetworkConnectorStartAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"start failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"starting transport connector on C"
argument_list|)
expr_stmt|;
name|BrokerService
name|brokerC
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
operator|.
name|broker
decl_stmt|;
name|brokerC
operator|.
name|addConnector
argument_list|(
name|brokerCUri
argument_list|)
expr_stmt|;
name|brokerC
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|long
name|maxWaitMillis
init|=
literal|20
operator|*
literal|1000
decl_stmt|;
name|assertTrue
argument_list|(
literal|"got bridge to C in 10 seconds"
argument_list|,
name|waitForBridgeFormation
argument_list|(
name|brokerA
argument_list|,
literal|1
argument_list|,
literal|7
argument_list|,
name|maxWaitMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|bridgeBroker
parameter_list|(
name|BrokerService
name|localBroker
parameter_list|,
name|String
name|remoteURI
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"static:("
operator|+
name|remoteURI
operator|+
literal|")"
decl_stmt|;
name|NetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"bridge-"
operator|+
name|bridgeCount
operator|++
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// initially with no tcp transport connector
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:()BrokerA?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:()BrokerB?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:()BrokerC?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

