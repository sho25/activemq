begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verifyNoMoreInteractions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_comment
comment|/**  * Basic test which verify if custom bridge factory receives any interactions when configured.  */
end_comment

begin_class
specifier|public
class|class
name|CustomBridgeFactoryTest
extends|extends
name|BaseNetworkTest
block|{
specifier|private
name|ActiveMQQueue
name|outgoing
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"outgoing"
argument_list|)
decl_stmt|;
comment|/**      * Verification of outgoing communication - from local broker (with customized bridge configured) to remote one.      */
annotation|@
name|Test
specifier|public
name|void
name|verifyOutgoingCommunication
parameter_list|()
throws|throws
name|JMSException
block|{
name|CustomNetworkBridgeFactory
name|bridgeFactory
init|=
name|getCustomNetworkBridgeFactory
argument_list|()
decl_stmt|;
name|NetworkBridgeListener
name|listener
init|=
name|bridgeFactory
operator|.
name|getListener
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onStart
argument_list|(
name|any
argument_list|(
name|NetworkBridge
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|send
argument_list|(
name|localSession
argument_list|,
name|outgoing
argument_list|,
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test message"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Message didn't arrive"
argument_list|,
name|receive
argument_list|(
name|remoteSession
argument_list|,
name|outgoing
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onOutboundMessage
argument_list|(
name|any
argument_list|(
name|NetworkBridge
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Additional test which makes sure that custom bridge receives notification about broker shutdown.      */
annotation|@
name|Test
specifier|public
name|void
name|verifyBrokerShutdown
parameter_list|()
block|{
name|shutdownTest
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|localBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verification of network connector shutdown.      */
annotation|@
name|Test
specifier|public
name|void
name|verifyConnectorShutdown
parameter_list|()
block|{
name|shutdownTest
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|getLocalConnector
argument_list|(
literal|0
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|shutdownTest
parameter_list|(
name|Supplier
argument_list|<
name|Throwable
argument_list|>
name|callback
parameter_list|)
block|{
name|CustomNetworkBridgeFactory
name|bridgeFactory
init|=
name|getCustomNetworkBridgeFactory
argument_list|()
decl_stmt|;
name|NetworkBridgeListener
name|listener
init|=
name|bridgeFactory
operator|.
name|getListener
argument_list|()
decl_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onStart
argument_list|(
name|any
argument_list|(
name|NetworkBridge
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|Throwable
name|throwable
init|=
name|callback
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected error"
argument_list|,
name|throwable
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|onStop
argument_list|(
name|any
argument_list|(
name|NetworkBridge
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|// helper methods
specifier|private
name|void
name|send
parameter_list|(
name|Session
name|session
parameter_list|,
name|ActiveMQQueue
name|destination
parameter_list|,
name|TextMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
try|try
block|{
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Message
name|receive
parameter_list|(
name|Session
name|session
parameter_list|,
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|consumer
operator|.
name|receive
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// infrastructure operations digging for connectors in running broker
specifier|private
name|CustomNetworkBridgeFactory
name|getCustomNetworkBridgeFactory
parameter_list|()
block|{
name|NetworkConnector
name|connector
init|=
name|getLocalConnector
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|connector
operator|.
name|getBridgeFactory
argument_list|()
operator|instanceof
name|CustomNetworkBridgeFactory
argument_list|)
expr_stmt|;
return|return
operator|(
name|CustomNetworkBridgeFactory
operator|)
name|connector
operator|.
name|getBridgeFactory
argument_list|()
return|;
block|}
specifier|private
name|NetworkConnector
name|getLocalConnector
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|localBroker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|// customizations
specifier|protected
name|String
name|getLocalBrokerURI
parameter_list|()
block|{
return|return
literal|"org/apache/activemq/network/localBroker-custom-factory.xml"
return|;
block|}
comment|// test classes
specifier|static
class|class
name|CustomNetworkBridgeFactory
implements|implements
name|BridgeFactory
block|{
specifier|private
specifier|final
name|NetworkBridgeListener
name|listener
decl_stmt|;
name|CustomNetworkBridgeFactory
parameter_list|()
block|{
name|this
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|NetworkBridgeListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CustomNetworkBridgeFactory
parameter_list|(
name|NetworkBridgeListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|NetworkBridgeListener
name|getListener
parameter_list|()
block|{
return|return
name|listener
return|;
block|}
annotation|@
name|Override
specifier|public
name|DemandForwardingBridge
name|createNetworkBridge
parameter_list|(
name|NetworkBridgeConfiguration
name|configuration
parameter_list|,
name|Transport
name|localTransport
parameter_list|,
name|Transport
name|remoteTransport
parameter_list|,
name|NetworkBridgeListener
name|listener
parameter_list|)
block|{
name|DemandForwardingBridge
name|bridge
init|=
operator|new
name|DemandForwardingBridge
argument_list|(
name|configuration
argument_list|,
name|localTransport
argument_list|,
name|remoteTransport
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|setNetworkBridgeListener
argument_list|(
operator|new
name|CompositeNetworkBridgeListener
argument_list|(
name|this
operator|.
name|listener
argument_list|,
name|listener
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bridge
return|;
block|}
block|}
specifier|static
class|class
name|CompositeNetworkBridgeListener
implements|implements
name|NetworkBridgeListener
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|NetworkBridgeListener
argument_list|>
name|listeners
decl_stmt|;
specifier|public
name|CompositeNetworkBridgeListener
parameter_list|(
name|NetworkBridgeListener
modifier|...
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|listeners
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|wrapped
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|bridgeFailed
parameter_list|()
block|{
for|for
control|(
name|NetworkBridgeListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|bridgeFailed
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onStart
parameter_list|(
name|NetworkBridge
name|bridge
parameter_list|)
block|{
for|for
control|(
name|NetworkBridgeListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onStart
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onStop
parameter_list|(
name|NetworkBridge
name|bridge
parameter_list|)
block|{
for|for
control|(
name|NetworkBridgeListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onStop
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onOutboundMessage
parameter_list|(
name|NetworkBridge
name|bridge
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
for|for
control|(
name|NetworkBridgeListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onOutboundMessage
argument_list|(
name|bridge
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onInboundMessage
parameter_list|(
name|NetworkBridge
name|bridge
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
for|for
control|(
name|NetworkBridgeListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onInboundMessage
argument_list|(
name|bridge
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

