begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|paho
operator|.
name|client
operator|.
name|mqttv3
operator|.
name|MqttCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|paho
operator|.
name|client
operator|.
name|mqttv3
operator|.
name|MqttClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|paho
operator|.
name|client
operator|.
name|mqttv3
operator|.
name|MqttConnectOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|paho
operator|.
name|client
operator|.
name|mqttv3
operator|.
name|persist
operator|.
name|MemoryPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test that all previous QoS 2 subscriptions are recovered on Broker restart.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MQTTSubscriptionRecoveryTest
extends|extends
name|MQTTTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTSubscriptionRecoveryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|defaultStrategy
init|=
literal|false
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"mqtt-virtual-topic-subscriptions"
block|,
literal|false
block|}
block|,
block|{
literal|"mqtt-default-subscriptions"
block|,
literal|true
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|MQTTSubscriptionRecoveryTest
parameter_list|(
name|String
name|subscriptionStrategy
parameter_list|,
name|boolean
name|defaultStrategy
parameter_list|)
block|{
name|this
operator|.
name|defaultStrategy
operator|=
name|defaultStrategy
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProtocolConfig
parameter_list|()
block|{
if|if
condition|(
name|defaultStrategy
condition|)
block|{
return|return
literal|"transport.subscriptionStrategy=mqtt-default-subscriptions"
return|;
block|}
else|else
block|{
return|return
literal|"transport.subscriptionStrategy=mqtt-virtual-topic-subscriptions"
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurableSubscriptionsAreRecovered
parameter_list|()
throws|throws
name|Exception
block|{
name|MqttClient
name|connection
init|=
name|createClient
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|topics
init|=
block|{
literal|"TopicA/"
block|,
literal|"TopicB/"
block|,
literal|"TopicC/"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topics
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Subscribing to Topic:{}"
argument_list|,
name|topics
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|topics
index|[
name|i
index|]
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
block|}
name|assertStatsForConnectedClient
argument_list|(
name|topics
operator|.
name|length
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertStatsForDisconnectedClient
argument_list|(
name|topics
operator|.
name|length
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|()
expr_stmt|;
name|assertStatsForDisconnectedClient
argument_list|(
name|topics
operator|.
name|length
argument_list|)
expr_stmt|;
name|connection
operator|=
name|createClient
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertStatsForConnectedClient
argument_list|(
name|topics
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertStatsForConnectedClient
parameter_list|(
specifier|final
name|int
name|numDestinations
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|defaultStrategy
condition|)
block|{
name|assertTopicStatsForConnectedClient
argument_list|(
name|numDestinations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertQueueStatsForConnectedClient
argument_list|(
name|numDestinations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertStatsForDisconnectedClient
parameter_list|(
specifier|final
name|int
name|numDestinations
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|defaultStrategy
condition|)
block|{
name|assertTopicStatsForDisconnectedClient
argument_list|(
name|numDestinations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertQueueStatsForDisconnectedClient
argument_list|(
name|numDestinations
argument_list|)
expr_stmt|;
block|}
block|}
comment|//----- Assert implementations based on subscription strategy ------------//
specifier|private
name|void
name|assertQueueStatsForConnectedClient
parameter_list|(
specifier|final
name|int
name|numDestinations
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
operator|==
name|numDestinations
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertQueueStatsForDisconnectedClient
parameter_list|(
specifier|final
name|int
name|numDestinations
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTopicStatsForConnectedClient
parameter_list|(
specifier|final
name|int
name|numDestinations
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
operator|==
name|numDestinations
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTopicStatsForDisconnectedClient
parameter_list|(
specifier|final
name|int
name|numDestinations
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
operator|==
name|numDestinations
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//----- Client Connect and Disconnect using Paho MQTT --------------------//
specifier|protected
name|MqttClient
name|createClient
parameter_list|(
name|String
name|clientId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createClient
argument_list|(
literal|false
argument_list|,
name|clientId
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|MqttClient
name|createClient
parameter_list|(
name|boolean
name|cleanSession
parameter_list|,
name|String
name|clientId
parameter_list|,
name|MqttCallback
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
name|MqttConnectOptions
name|options
init|=
operator|new
name|MqttConnectOptions
argument_list|()
decl_stmt|;
name|options
operator|.
name|setCleanSession
argument_list|(
name|cleanSession
argument_list|)
expr_stmt|;
name|options
operator|.
name|setKeepAliveInterval
argument_list|(
literal|30
argument_list|)
expr_stmt|;
specifier|final
name|MqttClient
name|client
init|=
operator|new
name|MqttClient
argument_list|(
literal|"tcp://localhost:"
operator|+
name|getPort
argument_list|()
argument_list|,
name|clientId
argument_list|,
operator|new
name|MemoryPersistence
argument_list|()
argument_list|)
decl_stmt|;
name|client
operator|.
name|setCallback
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|client
operator|.
name|connect
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|client
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
specifier|protected
name|void
name|disconnect
parameter_list|(
specifier|final
name|MqttClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|client
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|15
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

