begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|ClientFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|UnmodifiableSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * Session class that manages a Proton session endpoint.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpSession
extends|extends
name|AmqpAbstractResource
argument_list|<
name|Session
argument_list|>
block|{
specifier|private
specifier|final
name|AtomicLong
name|receiverIdGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|senderIdGenerator
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AmqpConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|String
name|sessionId
decl_stmt|;
comment|/**      * Create a new session instance.      *      * @param connection      * 		  The parent connection that created the session.      * @param sessionId      *        The unique ID value assigned to this session.      */
specifier|public
name|AmqpSession
parameter_list|(
name|AmqpConnection
name|connection
parameter_list|,
name|String
name|sessionId
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|sessionId
operator|=
name|sessionId
expr_stmt|;
block|}
comment|/**      * Create a sender instance using the given address      *      * @param address      * 	      the address to which the sender will produce its messages.      *      * @return a newly created sender that is ready for use.      *      * @throws Exception if an error occurs while creating the sender.      */
specifier|public
name|AmqpSender
name|createSender
parameter_list|(
specifier|final
name|String
name|address
parameter_list|)
throws|throws
name|Exception
block|{
name|checkClosed
argument_list|()
expr_stmt|;
specifier|final
name|AmqpSender
name|sender
init|=
operator|new
name|AmqpSender
argument_list|(
name|AmqpSession
operator|.
name|this
argument_list|,
name|address
argument_list|,
name|getNextSenderId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
name|connection
operator|.
name|getScheduler
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|sender
operator|.
name|setStateInspector
argument_list|(
name|getStateInspector
argument_list|()
argument_list|)
expr_stmt|;
name|sender
operator|.
name|open
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|pumpToProtonTransport
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
return|return
name|sender
return|;
block|}
comment|/**      * Create a receiver instance using the given address      *      * @param address      *        the address to which the receiver will subscribe for its messages.      *      * @return a newly created receiver that is ready for use.      *      * @throws Exception if an error occurs while creating the receiver.      */
specifier|public
name|AmqpReceiver
name|createReceiver
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createReceiver
argument_list|(
name|address
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a receiver instance using the given address      *      * @param address      *        the address to which the receiver will subscribe for its messages.      * @param selector      *        the JMS selector to use for the subscription      *      * @return a newly created receiver that is ready for use.      *      * @throws Exception if an error occurs while creating the receiver.      */
specifier|public
name|AmqpReceiver
name|createReceiver
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|selector
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createReceiver
argument_list|(
name|address
argument_list|,
name|selector
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a receiver instance using the given address      *      * @param address      * 	      the address to which the receiver will subscribe for its messages.      * @param selector      *        the JMS selector to use for the subscription      * @param noLocal      *        should the subscription have messages from its connection filtered.      *      * @return a newly created receiver that is ready for use.      *      * @throws Exception if an error occurs while creating the receiver.      */
specifier|public
name|AmqpReceiver
name|createReceiver
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|selector
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|Exception
block|{
name|checkClosed
argument_list|()
expr_stmt|;
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
specifier|final
name|AmqpReceiver
name|receiver
init|=
operator|new
name|AmqpReceiver
argument_list|(
name|AmqpSession
operator|.
name|this
argument_list|,
name|address
argument_list|,
name|getNextReceiverId
argument_list|()
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|setNoLocal
argument_list|(
name|noLocal
argument_list|)
expr_stmt|;
if|if
condition|(
name|selector
operator|!=
literal|null
operator|&&
operator|!
name|selector
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|receiver
operator|.
name|setSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|getScheduler
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|setStateInspector
argument_list|(
name|getStateInspector
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|open
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|pumpToProtonTransport
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
return|return
name|receiver
return|;
block|}
comment|/**      * Create a receiver instance using the given address      *      * @param address      *        the address to which the receiver will subscribe for its messages.      * @param source      *        the caller created and configured Source used to create the receiver link.      *      * @return a newly created receiver that is ready for use.      *      * @throws Exception if an error occurs while creating the receiver.      */
specifier|public
name|AmqpReceiver
name|createReceiver
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|Exception
block|{
name|checkClosed
argument_list|()
expr_stmt|;
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
specifier|final
name|AmqpReceiver
name|receiver
init|=
operator|new
name|AmqpReceiver
argument_list|(
name|AmqpSession
operator|.
name|this
argument_list|,
name|source
argument_list|,
name|getNextReceiverId
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|getScheduler
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|setStateInspector
argument_list|(
name|getStateInspector
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|open
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|pumpToProtonTransport
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
return|return
name|receiver
return|;
block|}
comment|/**      * Create a receiver instance using the given address that creates a durable subscription.      *      * @param address      *        the address to which the receiver will subscribe for its messages.      * @param subscriptionName      *        the name of the subscription that is being created.      *      * @return a newly created receiver that is ready for use.      *      * @throws Exception if an error occurs while creating the receiver.      */
specifier|public
name|AmqpReceiver
name|createDurableReceiver
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createDurableReceiver
argument_list|(
name|address
argument_list|,
name|subscriptionName
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a receiver instance using the given address that creates a durable subscription.      *      * @param address      *        the address to which the receiver will subscribe for its messages.      * @param subscriptionName      *        the name of the subscription that is being created.      * @param selector      *        the JMS selector to use for the subscription      *      * @return a newly created receiver that is ready for use.      *      * @throws Exception if an error occurs while creating the receiver.      */
specifier|public
name|AmqpReceiver
name|createDurableReceiver
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|String
name|selector
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createDurableReceiver
argument_list|(
name|address
argument_list|,
name|subscriptionName
argument_list|,
name|selector
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Create a receiver instance using the given address that creates a durable subscription.      *      * @param address      *        the address to which the receiver will subscribe for its messages.      * @param subscriptionName      *        the name of the subscription that is being created.      * @param selector      *        the JMS selector to use for the subscription      * @param noLocal      *        should the subscription have messages from its connection filtered.      *      * @return a newly created receiver that is ready for use.      *      * @throws Exception if an error occurs while creating the receiver.      */
specifier|public
name|AmqpReceiver
name|createDurableReceiver
parameter_list|(
name|String
name|address
parameter_list|,
name|String
name|subscriptionName
parameter_list|,
name|String
name|selector
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
throws|throws
name|Exception
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|subscriptionName
operator|==
literal|null
operator|||
name|subscriptionName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"subscription name must not be null or empty."
argument_list|)
throw|;
block|}
specifier|final
name|ClientFuture
name|request
init|=
operator|new
name|ClientFuture
argument_list|()
decl_stmt|;
specifier|final
name|AmqpReceiver
name|receiver
init|=
operator|new
name|AmqpReceiver
argument_list|(
name|AmqpSession
operator|.
name|this
argument_list|,
name|address
argument_list|,
name|getNextReceiverId
argument_list|()
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|setSubscriptionName
argument_list|(
name|subscriptionName
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|setNoLocal
argument_list|(
name|noLocal
argument_list|)
expr_stmt|;
if|if
condition|(
name|selector
operator|!=
literal|null
operator|&&
operator|!
name|selector
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|receiver
operator|.
name|setSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|getScheduler
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|setStateInspector
argument_list|(
name|getStateInspector
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|open
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|pumpToProtonTransport
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|sync
argument_list|()
expr_stmt|;
return|return
name|receiver
return|;
block|}
comment|/**      * @return this session's parent AmqpConnection.      */
specifier|public
name|AmqpConnection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
operator|new
name|UnmodifiableSession
argument_list|(
name|getEndpoint
argument_list|()
argument_list|)
return|;
block|}
comment|//----- Internal getters used from the child AmqpResource classes --------//
name|ScheduledExecutorService
name|getScheduler
parameter_list|()
block|{
return|return
name|connection
operator|.
name|getScheduler
argument_list|()
return|;
block|}
name|Connection
name|getProtonConnection
parameter_list|()
block|{
return|return
name|connection
operator|.
name|getProtonConnection
argument_list|()
return|;
block|}
name|void
name|pumpToProtonTransport
parameter_list|()
block|{
name|connection
operator|.
name|pumpToProtonTransport
argument_list|()
expr_stmt|;
block|}
comment|//----- Private implementation details -----------------------------------//
annotation|@
name|Override
specifier|protected
name|void
name|doOpenInspection
parameter_list|()
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectOpenedResource
argument_list|(
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doClosedInspection
parameter_list|()
block|{
name|getStateInspector
argument_list|()
operator|.
name|inspectClosedResource
argument_list|(
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getNextSenderId
parameter_list|()
block|{
return|return
name|sessionId
operator|+
literal|":"
operator|+
name|senderIdGenerator
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
specifier|private
name|String
name|getNextReceiverId
parameter_list|()
block|{
return|return
name|sessionId
operator|+
literal|":"
operator|+
name|receiverIdGenerator
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Session is already closed"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AmqpSession { "
operator|+
name|sessionId
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

