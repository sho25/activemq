begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test that the maxFrameSize configuration value is applied across the transports.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MQTTMaxFrameSizeTest
extends|extends
name|MQTTTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTMaxFrameSizeTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFrameSize
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"mqtt"
block|,
literal|false
block|,
literal|1024
block|}
block|,
block|{
literal|"mqtt+ssl"
block|,
literal|true
block|,
literal|1024
block|}
block|,
block|{
literal|"mqtt+nio"
block|,
literal|false
block|,
literal|1024
block|}
block|,
block|{
literal|"mqtt+nio+ssl"
block|,
literal|true
block|,
literal|1024
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|MQTTMaxFrameSizeTest
parameter_list|(
name|String
name|connectorScheme
parameter_list|,
name|boolean
name|useSSL
parameter_list|,
name|int
name|maxFrameSize
parameter_list|)
block|{
name|super
argument_list|(
name|connectorScheme
argument_list|,
name|useSSL
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFrameSize
operator|=
name|maxFrameSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProtocolConfig
parameter_list|()
block|{
return|return
literal|"?wireFormat.maxFrameSize="
operator|+
name|maxFrameSize
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testFrameSizeToLargeClosesConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting test on connector {} for frame size: {}"
argument_list|,
name|getProtocolScheme
argument_list|()
argument_list|,
name|maxFrameSize
argument_list|)
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setVersion
argument_list|(
literal|"3.1.1"
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|int
name|payloadSize
init|=
name|maxFrameSize
operator|+
literal|100
decl_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
name|payloadSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payloadSize
condition|;
operator|++
name|i
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|42
expr_stmt|;
block|}
try|try
block|{
name|connection
operator|.
name|publish
argument_list|(
name|getTopicName
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{         }
finally|finally
block|{
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testFrameSizeNotExceededWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting test on connector {} for frame size: {}"
argument_list|,
name|getProtocolScheme
argument_list|()
argument_list|,
name|maxFrameSize
argument_list|)
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setVersion
argument_list|(
literal|"3.1.1"
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|int
name|payloadSize
init|=
name|maxFrameSize
operator|/
literal|2
decl_stmt|;
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
name|payloadSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payloadSize
condition|;
operator|++
name|i
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|42
expr_stmt|;
block|}
try|try
block|{
name|connection
operator|.
name|publish
argument_list|(
name|getTopicName
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should not have thrown an exception"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

