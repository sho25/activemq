begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|ThreeBrokerTempQueueNetworkTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|100
decl_stmt|;
name|boolean
name|enableTempDestinationBridging
init|=
literal|true
decl_stmt|;
comment|/**      * BrokerA -> BrokerB -> BrokerC      */
specifier|public
name|void
name|testTempQueueCleanup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|,
literal|false
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|BrokerItem
name|brokerItem
init|=
operator|(
name|BrokerItem
operator|)
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|brokerItem
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TemporaryQueue
name|tempQ
init|=
name|sess
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|brokers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BrokerItem
name|bi
init|=
operator|(
name|BrokerItem
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No queues on broker "
operator|+
name|bi
operator|.
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
literal|1
argument_list|,
name|bi
operator|.
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTemporaryQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|tempQ
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|brokers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BrokerItem
name|bi
init|=
operator|(
name|BrokerItem
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Temp queue left behind on broker "
operator|+
name|bi
operator|.
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bi
operator|.
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTemporaryQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|// this actually uses 4 brokers ...
specifier|public
name|void
name|testTempQueueRecovery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Setup broker networks
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerC"
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|BrokerItem
name|brokerItem
init|=
operator|(
name|BrokerItem
operator|)
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerC"
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|brokerItem
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TemporaryQueue
name|tempQ
init|=
name|sess
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|brokers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BrokerItem
name|bi
init|=
operator|(
name|BrokerItem
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"No queues on broker "
operator|+
name|bi
operator|.
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
literal|1
argument_list|,
name|bi
operator|.
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTemporaryQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61619)/BrokerD?persistent=false&useJmx=true"
argument_list|)
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerD"
argument_list|,
literal|"BrokerA"
argument_list|,
literal|false
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|BrokerItem
name|newBroker
init|=
operator|(
name|BrokerItem
operator|)
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerD"
argument_list|)
decl_stmt|;
name|newBroker
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"No queues on broker D"
argument_list|,
literal|1
argument_list|,
name|newBroker
operator|.
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTemporaryQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|tempQ
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|brokers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BrokerItem
name|bi
init|=
operator|(
name|BrokerItem
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Temp queue left behind on broker "
operator|+
name|bi
operator|.
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bi
operator|.
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTemporaryQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTempDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|enableTempDestinationBridging
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|testTempQueueCleanup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// Expecting an error
return|return;
block|}
name|fail
argument_list|(
literal|"Test should have failed since temp queues are disabled."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA?persistent=false&useJmx=true"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/BrokerB?persistent=false&useJmx=true"
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61618)/BrokerC?persistent=false&useJmx=true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|NetworkConnector
name|bridgeBrokers
parameter_list|(
name|String
name|localBrokerName
parameter_list|,
name|String
name|remoteBrokerName
parameter_list|,
name|boolean
name|dynamicOnly
parameter_list|,
name|int
name|networkTTL
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|connector
init|=
name|super
operator|.
name|bridgeBrokers
argument_list|(
name|localBrokerName
argument_list|,
name|remoteBrokerName
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setBridgeTempDestinations
argument_list|(
name|enableTempDestinationBridging
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
block|}
end_class

end_unit

