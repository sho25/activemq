begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBlobMessage
import|;
end_import

begin_comment
comment|/**  * A default implementation of {@link BlobUploadStrategy} which uses the URL  * class to upload files or streams to a remote URL  */
end_comment

begin_class
specifier|public
class|class
name|DefaultBlobUploadStrategy
extends|extends
name|DefaultStrategy
implements|implements
name|BlobUploadStrategy
block|{
specifier|public
name|DefaultBlobUploadStrategy
parameter_list|(
name|BlobTransferPolicy
name|transferPolicy
parameter_list|)
block|{
name|super
argument_list|(
name|transferPolicy
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URL
name|uploadFile
parameter_list|(
name|ActiveMQBlobMessage
name|message
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
return|return
name|uploadStream
argument_list|(
name|message
argument_list|,
name|fis
argument_list|)
return|;
block|}
block|}
specifier|public
name|URL
name|uploadStream
parameter_list|(
name|ActiveMQBlobMessage
name|message
parameter_list|,
name|InputStream
name|fis
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
name|URL
name|url
init|=
name|createMessageURL
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setRequestMethod
argument_list|(
literal|"PUT"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setDoOutput
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// use chunked mode or otherwise URLConnection loads everything into
comment|// memory
comment|// (chunked mode not supported before JRE 1.5)
name|connection
operator|.
name|setChunkedStreamingMode
argument_list|(
name|transferPolicy
operator|.
name|getBufferSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|connection
operator|.
name|getOutputStream
argument_list|()
init|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|transferPolicy
operator|.
name|getBufferSize
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
name|fis
operator|.
name|read
argument_list|(
name|buf
argument_list|)
init|;
name|c
operator|!=
operator|-
literal|1
condition|;
name|c
operator|=
name|fis
operator|.
name|read
argument_list|(
name|buf
argument_list|)
control|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"PUT failed to: "
operator|+
name|url
argument_list|,
name|error
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSuccessfulCode
argument_list|(
name|connection
operator|.
name|getResponseCode
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"PUT to "
operator|+
name|url
operator|+
literal|" was not successful: "
operator|+
name|connection
operator|.
name|getResponseCode
argument_list|()
operator|+
literal|" "
operator|+
name|connection
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|url
return|;
block|}
block|}
end_class

end_unit

