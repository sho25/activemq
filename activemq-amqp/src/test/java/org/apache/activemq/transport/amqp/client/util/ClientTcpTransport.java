begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|WritableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpBufferedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpBufferedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|InetAddressUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Simple TCP based transport used by the client.  */
end_comment

begin_class
specifier|public
class|class
name|ClientTcpTransport
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ClientTcpTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
interface|interface
name|TransportListener
block|{
comment|/**          * Called when new incoming data has become available.          *          * @param incoming          *        the next incoming packet of data.          */
name|void
name|onData
parameter_list|(
name|Buffer
name|incoming
parameter_list|)
function_decl|;
comment|/**          * Called if the connection state becomes closed.          */
name|void
name|onTransportClosed
parameter_list|()
function_decl|;
comment|/**          * Called when an error occurs during normal Transport operations.          *          * @param cause          *        the error that triggered this event.          */
name|void
name|onTransportError
parameter_list|(
name|Throwable
name|cause
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
name|URI
name|remoteLocation
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|connected
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|connectionError
init|=
operator|new
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Socket
name|socket
decl_stmt|;
specifier|private
name|DataOutputStream
name|dataOut
decl_stmt|;
specifier|private
name|DataInputStream
name|dataIn
decl_stmt|;
specifier|private
name|Thread
name|runner
decl_stmt|;
specifier|private
name|TransportListener
name|listener
decl_stmt|;
specifier|private
name|int
name|socketBufferSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|private
name|int
name|soTimeout
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|soLinger
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
specifier|private
name|Boolean
name|keepAlive
decl_stmt|;
specifier|private
name|Boolean
name|tcpNoDelay
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useLocalHost
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|ioBufferSize
init|=
literal|8
operator|*
literal|1024
decl_stmt|;
comment|/**      * Create a new instance of the transport.      *      * @param listener      *        The TransportListener that will receive data from this Transport instance.      * @param remoteLocation      *        The remote location where this transport should connection to.      */
specifier|public
name|ClientTcpTransport
parameter_list|(
name|URI
name|remoteLocation
parameter_list|)
block|{
name|this
operator|.
name|remoteLocation
operator|=
name|remoteLocation
expr_stmt|;
name|Socket
name|temp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|temp
operator|=
name|createSocketFactory
argument_list|()
operator|.
name|createSocket
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|connectionError
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|socket
operator|=
name|temp
expr_stmt|;
block|}
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|connectionError
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|connectionError
operator|.
name|get
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot connect until a listener has been set."
argument_list|)
throw|;
block|}
if|if
condition|(
name|socket
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot connect if the socket or socketFactory have not been set"
argument_list|)
throw|;
block|}
name|InetSocketAddress
name|remoteAddress
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|remoteLocation
operator|!=
literal|null
condition|)
block|{
name|String
name|host
init|=
name|resolveHostName
argument_list|(
name|remoteLocation
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|remoteAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|remoteLocation
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|connect
argument_list|(
name|remoteAddress
argument_list|)
expr_stmt|;
name|connected
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initialiseSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|initializeStreams
argument_list|()
expr_stmt|;
name|runner
operator|=
operator|new
name|Thread
argument_list|(
literal|null
argument_list|,
name|this
argument_list|,
literal|"ClientTcpTransport: "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runner
operator|.
name|setDaemon
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
name|socket
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Closing the streams flush the sockets before closing.. if the socket
comment|// is hung.. then this hangs the close so we perform an asynchronous close
comment|// by default which will timeout if the close doesn't happen after a delay.
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|closer
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|closer
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Closing socket {}"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closed socket {}"
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception closing socket "
operator|+
name|socket
operator|+
literal|". This exception will be ignored."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|closer
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|send
parameter_list|(
name|ByteBuffer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Client Transport sending packet of size: {}"
argument_list|,
name|output
operator|.
name|remaining
argument_list|()
argument_list|)
expr_stmt|;
name|WritableByteChannel
name|channel
init|=
name|Channels
operator|.
name|newChannel
argument_list|(
name|dataOut
argument_list|)
decl_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|Buffer
name|output
parameter_list|)
throws|throws
name|IOException
block|{
name|checkConnected
argument_list|()
expr_stmt|;
name|send
argument_list|(
name|output
operator|.
name|toByteBuffer
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URI
name|getRemoteURI
parameter_list|()
block|{
return|return
name|this
operator|.
name|remoteLocation
return|;
block|}
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|this
operator|.
name|connected
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|TransportListener
name|getTransportListener
parameter_list|()
block|{
return|return
name|this
operator|.
name|listener
return|;
block|}
specifier|public
name|void
name|setTransportListener
parameter_list|(
name|TransportListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Listener cannot be set to null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|int
name|getSocketBufferSize
parameter_list|()
block|{
return|return
name|socketBufferSize
return|;
block|}
specifier|public
name|void
name|setSocketBufferSize
parameter_list|(
name|int
name|socketBufferSize
parameter_list|)
block|{
name|this
operator|.
name|socketBufferSize
operator|=
name|socketBufferSize
expr_stmt|;
block|}
specifier|public
name|int
name|getSoTimeout
parameter_list|()
block|{
return|return
name|soTimeout
return|;
block|}
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|soTimeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|soTimeout
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTcpNoDelay
parameter_list|()
block|{
return|return
name|tcpNoDelay
return|;
block|}
specifier|public
name|void
name|setTcpNoDelay
parameter_list|(
name|Boolean
name|tcpNoDelay
parameter_list|)
block|{
name|this
operator|.
name|tcpNoDelay
operator|=
name|tcpNoDelay
expr_stmt|;
block|}
specifier|public
name|int
name|getSoLinger
parameter_list|()
block|{
return|return
name|soLinger
return|;
block|}
specifier|public
name|void
name|setSoLinger
parameter_list|(
name|int
name|soLinger
parameter_list|)
block|{
name|this
operator|.
name|soLinger
operator|=
name|soLinger
expr_stmt|;
block|}
specifier|public
name|boolean
name|isKeepAlive
parameter_list|()
block|{
return|return
name|keepAlive
return|;
block|}
specifier|public
name|void
name|setKeepAlive
parameter_list|(
name|Boolean
name|keepAlive
parameter_list|)
block|{
name|this
operator|.
name|keepAlive
operator|=
name|keepAlive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseLocalHost
parameter_list|()
block|{
return|return
name|useLocalHost
return|;
block|}
specifier|public
name|void
name|setUseLocalHost
parameter_list|(
name|boolean
name|useLocalHost
parameter_list|)
block|{
name|this
operator|.
name|useLocalHost
operator|=
name|useLocalHost
expr_stmt|;
block|}
specifier|public
name|int
name|getIoBufferSize
parameter_list|()
block|{
return|return
name|ioBufferSize
return|;
block|}
specifier|public
name|void
name|setIoBufferSize
parameter_list|(
name|int
name|ioBufferSize
parameter_list|)
block|{
name|this
operator|.
name|ioBufferSize
operator|=
name|ioBufferSize
expr_stmt|;
block|}
comment|//---------- Transport internal implementation ---------------------------//
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"TCP consumer thread for {} starting"
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
block|{
while|while
condition|(
name|isConnected
argument_list|()
condition|)
block|{
name|doRun
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|connectionError
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
literal|"Unexpected error occured: "
operator|+
name|e
argument_list|)
decl_stmt|;
name|connectionError
operator|.
name|set
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|onException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doRun
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size
init|=
name|dataIn
operator|.
name|available
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
try|try
block|{
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
return|return;
block|}
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|dataIn
operator|.
name|readFully
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|Buffer
name|incoming
init|=
operator|new
name|Buffer
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onData
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
block|}
comment|/**      * Passes any IO exceptions into the transport listener      */
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|listener
operator|.
name|onTransportError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e2
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected runtime exception: {}"
argument_list|,
name|e2
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|SocketFactory
name|createSocketFactory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|remoteLocation
operator|.
name|getScheme
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ssl"
argument_list|)
condition|)
block|{
return|return
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|SocketFactory
operator|.
name|getDefault
argument_list|()
return|;
block|}
block|}
specifier|protected
name|void
name|initialiseSocket
parameter_list|(
name|Socket
name|sock
parameter_list|)
throws|throws
name|SocketException
throws|,
name|IllegalArgumentException
block|{
try|try
block|{
name|sock
operator|.
name|setReceiveBufferSize
argument_list|(
name|socketBufferSize
argument_list|)
expr_stmt|;
name|sock
operator|.
name|setSendBufferSize
argument_list|(
name|socketBufferSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot set socket buffer size = {}"
argument_list|,
name|socketBufferSize
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot set socket buffer size. Reason: {}. This exception is ignored."
argument_list|,
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
name|sock
operator|.
name|setSoTimeout
argument_list|(
name|soTimeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|keepAlive
operator|!=
literal|null
condition|)
block|{
name|sock
operator|.
name|setKeepAlive
argument_list|(
name|keepAlive
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|soLinger
operator|>
operator|-
literal|1
condition|)
block|{
name|sock
operator|.
name|setSoLinger
argument_list|(
literal|true
argument_list|,
name|soLinger
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|soLinger
operator|==
operator|-
literal|1
condition|)
block|{
name|sock
operator|.
name|setSoLinger
argument_list|(
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tcpNoDelay
operator|!=
literal|null
condition|)
block|{
name|sock
operator|.
name|setTcpNoDelay
argument_list|(
name|tcpNoDelay
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeStreams
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|TcpBufferedInputStream
name|buffIn
init|=
operator|new
name|TcpBufferedInputStream
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|ioBufferSize
argument_list|)
decl_stmt|;
name|this
operator|.
name|dataIn
operator|=
operator|new
name|DataInputStream
argument_list|(
name|buffIn
argument_list|)
expr_stmt|;
name|TcpBufferedOutputStream
name|outputStream
init|=
operator|new
name|TcpBufferedOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|,
name|ioBufferSize
argument_list|)
decl_stmt|;
name|this
operator|.
name|dataOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|outputStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|resolveHostName
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|UnknownHostException
block|{
if|if
condition|(
name|isUseLocalHost
argument_list|()
condition|)
block|{
name|String
name|localName
init|=
name|InetAddressUtil
operator|.
name|getLocalHostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|!=
literal|null
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|host
argument_list|)
condition|)
block|{
return|return
literal|"localhost"
return|;
block|}
block|}
return|return
name|host
return|;
block|}
specifier|private
name|void
name|checkConnected
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot send to a non-connected transport."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

