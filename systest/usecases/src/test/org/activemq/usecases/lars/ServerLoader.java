begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|usecases
operator|.
name|lars
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|ServerLoader
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
name|ClassLoader
name|cl1
init|=
operator|new
name|ClassLoader
argument_list|()
block|{             }
decl_stmt|;
name|ClassLoader
name|cl2
init|=
operator|new
name|ClassLoader
argument_list|()
block|{             }
decl_stmt|;
name|Class
name|c1
init|=
name|cl1
operator|.
name|loadClass
argument_list|(
literal|"org.activemq.usecases.lars.Server"
argument_list|)
decl_stmt|;
name|Class
name|c2
init|=
name|cl2
operator|.
name|loadClass
argument_list|(
literal|"org.activemq.usecases.lars.Server"
argument_list|)
decl_stmt|;
specifier|final
name|Constructor
name|i1
init|=
name|c1
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
specifier|final
name|Constructor
name|i2
init|=
name|c2
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Server
name|s1
init|=
operator|(
name|Server
operator|)
name|i1
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"A"
block|}
argument_list|)
decl_stmt|;
name|s1
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Server
name|s2
init|=
operator|(
name|Server
operator|)
name|i2
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"B"
block|}
argument_list|)
decl_stmt|;
name|s2
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

