begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|CompositeDataConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|OpenTypeSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|OpenTypeSupportTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OpenTypeSupportTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|static
name|String
name|TESTQUEUE
init|=
literal|"testQueue"
decl_stmt|;
specifier|private
specifier|static
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
specifier|static
name|String
name|BYTESMESSAGE_TEXT
init|=
literal|"This is a short text"
decl_stmt|;
specifier|private
specifier|static
name|String
name|BROKER_ADDRESS
init|=
literal|"tcp://localhost:0"
decl_stmt|;
specifier|private
specifier|static
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|TESTQUEUE
argument_list|)
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionUri
operator|=
name|brokerService
operator|.
name|addConnector
argument_list|(
name|BROKER_ADDRESS
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|sendMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|Connection
name|conn
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|TESTQUEUE
argument_list|)
decl_stmt|;
name|BytesMessage
name|toSend
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|toSend
operator|.
name|writeBytes
argument_list|(
name|BYTESMESSAGE_TEXT
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|queue
argument_list|,
name|toSend
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|bytesMessagePreview
parameter_list|()
throws|throws
name|Exception
block|{
name|QueueViewMBean
name|queue
init|=
name|getProxyToQueueViewMBean
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|extractText
argument_list|(
name|queue
operator|.
name|browse
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|extractText
argument_list|(
name|queue
operator|.
name|browse
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBrowseByteMessageFails
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQBytesMessage
name|bm
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
name|bm
operator|.
name|writeBytes
argument_list|(
literal|"123456"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|OpenTypeSupport
operator|.
name|convert
argument_list|(
name|bm
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"result : "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|extractText
parameter_list|(
name|CompositeData
name|message
parameter_list|)
block|{
name|Byte
name|content
index|[]
init|=
operator|(
name|Byte
index|[]
operator|)
name|message
operator|.
name|get
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_PREVIEW
argument_list|)
decl_stmt|;
name|byte
name|out
index|[]
init|=
operator|new
name|byte
index|[
name|content
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|content
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|out
index|[
name|i
index|]
operator|=
name|content
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|out
argument_list|)
return|;
block|}
specifier|private
name|QueueViewMBean
name|getProxyToQueueViewMBean
parameter_list|()
throws|throws
name|MalformedObjectNameException
throws|,
name|JMSException
block|{
specifier|final
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|brokerService
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
block|}
end_class

end_unit

