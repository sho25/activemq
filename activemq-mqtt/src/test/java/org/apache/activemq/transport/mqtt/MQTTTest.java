begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTTest
extends|extends
name|AbstractMQTTTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveMQTT
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|subscriptionProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriptionProvider
argument_list|)
expr_stmt|;
name|subscriptionProvider
operator|.
name|subscribe
argument_list|(
literal|"foo/bah"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfMessages
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|byte
index|[]
name|payload
init|=
name|subscriptionProvider
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|publishProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publishProvider
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Message "
operator|+
name|i
decl_stmt|;
name|publishProvider
operator|.
name|publish
argument_list|(
literal|"foo/bah"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publishProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testUnsubscribeMQTT
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|subscriptionProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriptionProvider
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
literal|"foo/bah"
decl_stmt|;
name|subscriptionProvider
operator|.
name|subscribe
argument_list|(
name|topic
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfMessages
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|byte
index|[]
name|payload
init|=
name|subscriptionProvider
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|publishProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publishProvider
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Message "
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|numberOfMessages
operator|/
literal|2
condition|)
block|{
name|subscriptionProvider
operator|.
name|unsubscribe
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
name|publishProvider
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publishProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAtMostOnceReceiveExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**          * Although subscribing with EXACTLY ONCE, the message gets published          * with AT_MOST_ONCE - in MQTT the QoS is always determined by the message          * as published - not the wish of the subscriber          */
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAtLeastOnceReceiveExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAtLeastOnceReceiveAtMostOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveAtMostOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveAtLeastOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|publisher
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|subscriber
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|publisher
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|subscriber
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message + ["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subscriber
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveLargeMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|publisher
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|subscriber
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|publisher
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|subscriber
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|payload
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|subscriber
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendMQTTReceiveJMS
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|TransportConnector
name|openwireTransport
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
specifier|final
name|String
name|DESTINATION_NAME
init|=
literal|"foo.*"
decl_stmt|;
name|ActiveMQConnection
name|activeMQConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|openwireTransport
operator|.
name|getConnectUri
argument_list|()
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|activeMQConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|activeMQConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|jmsTopic
init|=
name|s
operator|.
name|createTopic
argument_list|(
name|DESTINATION_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|jmsTopic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo/bah"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ByteSequence
name|bs
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|bs
operator|.
name|data
argument_list|,
name|bs
operator|.
name|offset
argument_list|,
name|bs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|activeMQConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendJMSReceiveMQTT
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|TransportConnector
name|openwireTransport
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|ActiveMQConnection
name|activeMQConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|openwireTransport
operator|.
name|getConnectUri
argument_list|()
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|activeMQConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|activeMQConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|jmsTopic
init|=
name|s
operator|.
name|createTopic
argument_list|(
literal|"foo.far"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|jmsTopic
argument_list|)
decl_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo/+"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfMessages
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"This is Test Message: "
operator|+
name|i
decl_stmt|;
name|TextMessage
name|sendMessage
init|=
name|s
operator|.
name|createTextMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|sendMessage
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|activeMQConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testPingKeepsInactivityMonitorAlive
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testTurnOffInactivityMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|(
literal|"transport.useInactivityMonitor=false"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo3"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testJmsMapping
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|addOpenwireConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start up jms consumer
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"tcp://localhost:"
operator|+
name|openwireConnector
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|Connection
name|jmsConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|jmsConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"test.foo"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|jmsConn
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// set up mqtt producer
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo3"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|messagesToSend
init|=
literal|5
decl_stmt|;
comment|// publish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesToSend
condition|;
operator|++
name|i
control|)
block|{
name|connection
operator|.
name|publish
argument_list|(
literal|"test/foo"
argument_list|,
literal|"hello world"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesToSend
condition|;
name|i
operator|++
control|)
block|{
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|instanceof
name|BytesMessage
argument_list|)
expr_stmt|;
name|BytesMessage
name|bytesMessage
init|=
operator|(
name|BytesMessage
operator|)
name|message
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|bytesMessage
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jmsConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSubscribeMultipleTopics
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"MQTT-Client"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setCleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
literal|"Topic/A"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|,
operator|new
name|Topic
argument_list|(
literal|"Topic/B"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
decl_stmt|;
name|Topic
index|[]
name|wildcardTopic
init|=
block|{
operator|new
name|Topic
argument_list|(
literal|"Topic/#"
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|wildcardTopic
argument_list|)
expr_stmt|;
for|for
control|(
name|Topic
name|topic
range|:
name|topics
control|)
block|{
name|connection
operator|.
name|publish
argument_list|(
name|topic
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topics
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|++
expr_stmt|;
name|payload
operator|=
name|message
operator|.
name|getPayload
argument_list|()
expr_stmt|;
name|String
name|messageContent
init|=
operator|new
name|String
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received message from topic: "
operator|+
name|message
operator|.
name|getTopic
argument_list|()
operator|+
literal|" Message content: "
operator|+
name|messageContent
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have received "
operator|+
name|topics
operator|.
name|length
operator|+
literal|" messages"
argument_list|,
name|topics
operator|.
name|length
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testReceiveMessageSentWhileOffline
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
name|int
name|numberOfRuns
init|=
literal|100
decl_stmt|;
name|int
name|messagesPerRun
init|=
literal|2
decl_stmt|;
name|addMQTTConnector
argument_list|(
literal|"trace=true"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqttPub
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqttPub
operator|.
name|setClientId
argument_list|(
literal|"MQTT-Pub-Client"
argument_list|)
expr_stmt|;
name|MQTT
name|mqttSub
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqttSub
operator|.
name|setClientId
argument_list|(
literal|"MQTT-Sub-Client"
argument_list|)
expr_stmt|;
name|mqttSub
operator|.
name|setCleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connectionPub
init|=
name|mqttPub
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connectionPub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|BlockingConnection
name|connectionSub
init|=
name|mqttSub
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connectionSub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
literal|"TopicA"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
decl_stmt|;
name|connectionSub
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|connectionPub
operator|.
name|publish
argument_list|(
name|topics
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|connectionSub
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|++
expr_stmt|;
name|payload
operator|=
name|message
operator|.
name|getPayload
argument_list|()
expr_stmt|;
name|String
name|messageContent
init|=
operator|new
name|String
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received message from topic: "
operator|+
name|message
operator|.
name|getTopic
argument_list|()
operator|+
literal|" Message content: "
operator|+
name|messageContent
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|connectionSub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfRuns
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|connectionPub
operator|.
name|publish
argument_list|(
name|topics
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|mqttSub
operator|=
name|createMQTTConnection
argument_list|()
expr_stmt|;
name|mqttSub
operator|.
name|setClientId
argument_list|(
literal|"MQTT-Sub-Client"
argument_list|)
expr_stmt|;
name|mqttSub
operator|.
name|setCleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionSub
operator|=
name|mqttSub
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connectionSub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connectionSub
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|connectionSub
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|++
expr_stmt|;
name|payload
operator|=
name|message
operator|.
name|getPayload
argument_list|()
expr_stmt|;
name|String
name|messageContent
init|=
operator|new
name|String
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received message from topic: "
operator|+
name|message
operator|.
name|getTopic
argument_list|()
operator|+
literal|" Message content: "
operator|+
name|messageContent
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|connectionSub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have received "
operator|+
operator|(
name|messagesPerRun
operator|*
operator|(
name|numberOfRuns
operator|+
literal|1
operator|)
operator|)
operator|+
literal|" messages"
argument_list|,
operator|(
name|messagesPerRun
operator|*
operator|(
name|numberOfRuns
operator|+
literal|1
operator|)
operator|)
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testDefaultKeepAliveWhenClientSpecifiesZero
parameter_list|()
throws|throws
name|Exception
block|{
comment|// default keep alive in milliseconds
name|addMQTTConnector
argument_list|(
literal|"transport.defaultKeepAlive=2000"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testReuseConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|addMQTTConnector
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"Test-Client"
argument_list|)
expr_stmt|;
block|{
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|{
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getProtocolScheme
parameter_list|()
block|{
return|return
literal|"mqtt"
return|;
block|}
specifier|protected
name|MQTTClientProvider
name|getMQTTClientProvider
parameter_list|()
block|{
return|return
operator|new
name|FuseMQQTTClientProvider
argument_list|()
return|;
block|}
specifier|protected
name|MQTT
name|createMQTTConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createMQTTConnection
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|MQTT
name|createMQTTConnection
parameter_list|(
name|String
name|clientId
parameter_list|,
name|boolean
name|clean
parameter_list|)
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
operator|new
name|MQTT
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setConnectAttemptsMax
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setReconnectAttemptsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setTracer
argument_list|(
name|createTracer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
condition|)
block|{
name|mqtt
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
name|mqtt
operator|.
name|setCleanSession
argument_list|(
name|clean
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|,
name|mqttConnector
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// shut off connect retry
return|return
name|mqtt
return|;
block|}
specifier|protected
name|Tracer
name|createTracer
parameter_list|()
block|{
return|return
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client Received:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSend
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client Sent:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

