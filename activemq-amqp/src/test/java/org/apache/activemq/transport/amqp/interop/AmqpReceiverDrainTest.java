begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|interop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|TopicViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClientTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests various behaviors of broker side drain support.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpReceiverDrainTest
extends|extends
name|AmqpClientTestSupport
block|{
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testReceiverCanDrainMessagesQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReceiverCanDrainMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testReceiverCanDrainMessagesTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReceiverCanDrainMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestReceiverCanDrainMessages
parameter_list|(
name|boolean
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|destinationName
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destinationName
operator|=
literal|"topic://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|destinationName
operator|=
literal|"queue://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
name|int
name|MSG_COUNT
init|=
literal|20
decl_stmt|;
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|AmqpReceiver
name|receiver
init|=
name|session
operator|.
name|createReceiver
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|sendMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|MSG_COUNT
argument_list|,
name|topic
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|destinationView
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destinationView
operator|=
name|getProxyToTopic
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destinationView
operator|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MSG_COUNT
argument_list|,
name|destinationView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|destinationView
operator|.
name|getDispatchCount
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|drain
argument_list|(
name|MSG_COUNT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|AmqpMessage
name|message
init|=
name|receiver
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Failed to read message: "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read message: {}"
argument_list|,
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|receiver
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|MSG_COUNT
argument_list|,
name|destinationView
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testPullWithNoMessageGetDrainedQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPullWithNoMessageGetDrained
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testPullWithNoMessageGetDrainedTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPullWithNoMessageGetDrained
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestPullWithNoMessageGetDrained
parameter_list|(
name|boolean
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|destinationName
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destinationName
operator|=
literal|"topic://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|destinationName
operator|=
literal|"queue://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|AmqpReceiver
name|receiver
init|=
name|session
operator|.
name|createReceiver
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|destinationView
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destinationView
operator|=
name|getProxyToTopic
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destinationView
operator|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|destinationView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|destinationView
operator|.
name|getDispatchCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|receiver
operator|.
name|getReceiver
argument_list|()
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|receiver
operator|.
name|pull
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|receiver
operator|.
name|getReceiver
argument_list|()
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testPullOneFromRemoteQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPullOneFromRemote
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testPullOneFromRemoteTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPullOneFromRemote
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestPullOneFromRemote
parameter_list|(
name|boolean
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
specifier|final
name|String
name|destinationName
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destinationName
operator|=
literal|"topic://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|destinationName
operator|=
literal|"queue://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
name|AmqpReceiver
name|receiver
init|=
name|session
operator|.
name|createReceiver
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|int
name|MSG_COUNT
init|=
literal|20
decl_stmt|;
name|sendMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|MSG_COUNT
argument_list|,
name|topic
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|destinationView
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destinationView
operator|=
name|getProxyToTopic
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destinationView
operator|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|MSG_COUNT
argument_list|,
name|destinationView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|destinationView
operator|.
name|getDispatchCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|receiver
operator|.
name|getReceiver
argument_list|()
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|AmqpMessage
name|message
init|=
name|receiver
operator|.
name|pull
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|accept
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|receiver
operator|.
name|getReceiver
argument_list|()
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|MSG_COUNT
operator|-
literal|1
argument_list|,
name|destinationView
operator|.
name|getEnqueueCount
argument_list|()
operator|-
name|destinationView
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|destinationView
operator|.
name|getDispatchCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMultipleZeroResultPullsQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMultipleZeroResultPulls
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMultipleZeroResultPullsTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMultipleZeroResultPulls
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestMultipleZeroResultPulls
parameter_list|(
name|boolean
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
specifier|final
name|String
name|destinationName
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destinationName
operator|=
literal|"topic://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|destinationName
operator|=
literal|"queue://"
operator|+
name|getTestName
argument_list|()
expr_stmt|;
block|}
name|AmqpReceiver
name|receiver
init|=
name|session
operator|.
name|createReceiver
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|TopicViewMBean
name|topicView
init|=
name|getProxyToTopic
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topicView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|topicView
operator|.
name|getDispatchCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueView
operator|.
name|getDispatchCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|receiver
operator|.
name|getReceiver
argument_list|()
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|receiver
operator|.
name|pull
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|receiver
operator|.
name|getReceiver
argument_list|()
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|receiver
operator|.
name|pull
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|receiver
operator|.
name|pull
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|receiver
operator|.
name|getReceiver
argument_list|()
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseOpenWireConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

