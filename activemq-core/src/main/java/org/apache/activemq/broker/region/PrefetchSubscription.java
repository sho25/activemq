begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|PendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|VMPendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatchNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessagePull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A subscription that honors the pre-fetch option of the ConsumerInfo.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PrefetchSubscription
extends|extends
name|AbstractSubscription
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrefetchSubscription
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Scheduler
name|scheduler
decl_stmt|;
specifier|protected
name|PendingMessageCursor
name|pending
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|MessageReference
argument_list|>
name|dispatched
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|AtomicInteger
name|prefetchExtension
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|usePrefetchExtension
init|=
literal|true
decl_stmt|;
specifier|protected
name|long
name|enqueueCounter
decl_stmt|;
specifier|protected
name|long
name|dispatchCounter
decl_stmt|;
specifier|protected
name|long
name|dequeueCounter
decl_stmt|;
specifier|private
name|int
name|maxProducersToAudit
init|=
literal|32
decl_stmt|;
specifier|private
name|int
name|maxAuditDepth
init|=
literal|2048
decl_stmt|;
specifier|protected
specifier|final
name|SystemUsage
name|usageManager
decl_stmt|;
specifier|protected
specifier|final
name|Object
name|pendingLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|dispatchLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|okForAckAsDispatchDone
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|PrefetchSubscription
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|SystemUsage
name|usageManager
parameter_list|,
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|,
name|PendingMessageCursor
name|cursor
parameter_list|)
throws|throws
name|InvalidSelectorException
block|{
name|super
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|usageManager
operator|=
name|usageManager
expr_stmt|;
name|pending
operator|=
name|cursor
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|broker
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PrefetchSubscription
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|SystemUsage
name|usageManager
parameter_list|,
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|InvalidSelectorException
block|{
name|this
argument_list|(
name|broker
argument_list|,
name|usageManager
argument_list|,
name|context
argument_list|,
name|info
argument_list|,
operator|new
name|VMPendingMessageCursor
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allows a message to be pulled on demand by a client      */
specifier|public
name|Response
name|pullMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessagePull
name|pull
parameter_list|)
throws|throws
name|Exception
block|{
comment|// The slave should not deliver pull messages.
comment|// TODO: when the slave becomes a master, He should send a NULL message to all the
comment|// consumers to 'wake them up' in case they were waiting for a message.
if|if
condition|(
name|getPrefetchSize
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|isSlave
argument_list|()
condition|)
block|{
name|prefetchExtension
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
specifier|final
name|long
name|dispatchCounterBeforePull
init|=
name|dispatchCounter
decl_stmt|;
comment|// Have the destination push us some messages.
for|for
control|(
name|Destination
name|dest
range|:
name|destinations
control|)
block|{
name|dest
operator|.
name|iterate
argument_list|()
expr_stmt|;
block|}
name|dispatchPending
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// If there was nothing dispatched.. we may need to setup a timeout.
if|if
condition|(
name|dispatchCounterBeforePull
operator|==
name|dispatchCounter
condition|)
block|{
comment|// immediate timeout used by receiveNoWait()
if|if
condition|(
name|pull
operator|.
name|getTimeout
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Send a NULL message.
name|add
argument_list|(
name|QueueMessageReference
operator|.
name|NULL_MESSAGE
argument_list|)
expr_stmt|;
name|dispatchPending
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pull
operator|.
name|getTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scheduler
operator|.
name|executeAfterDelay
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|pullTimeout
argument_list|(
name|dispatchCounterBeforePull
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|pull
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Occurs when a pull times out. If nothing has been dispatched since the      * timeout was setup, then send the NULL message.      */
specifier|final
name|void
name|pullTimeout
parameter_list|(
name|long
name|dispatchCounterBeforePull
parameter_list|)
block|{
synchronized|synchronized
init|(
name|pendingLock
init|)
block|{
if|if
condition|(
name|dispatchCounterBeforePull
operator|==
name|dispatchCounter
condition|)
block|{
try|try
block|{
name|add
argument_list|(
name|QueueMessageReference
operator|.
name|NULL_MESSAGE
argument_list|)
expr_stmt|;
name|dispatchPending
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|serviceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|MessageReference
name|node
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|pendingLock
init|)
block|{
comment|// The destination may have just been removed...
if|if
condition|(
operator|!
name|destinations
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getRegionDestination
argument_list|()
argument_list|)
operator|&&
name|node
operator|!=
name|QueueMessageReference
operator|.
name|NULL_MESSAGE
condition|)
block|{
comment|// perhaps we should inform the caller that we are no longer valid to dispatch to?
return|return;
block|}
name|enqueueCounter
operator|++
expr_stmt|;
name|pending
operator|.
name|addMessageLast
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|dispatchPending
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|processMessageDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|mdn
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|pendingLock
init|)
block|{
try|try
block|{
name|pending
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|pending
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageReference
name|node
init|=
name|pending
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|mdn
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Synchronize between dispatched list and removal of messages from pending list
comment|// related to remove subscription action
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|pending
operator|.
name|remove
argument_list|()
expr_stmt|;
name|createMessageDispatch
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|dispatched
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|onDispatch
argument_list|(
name|node
argument_list|,
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
finally|finally
block|{
name|pending
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Slave broker out of sync with master: Dispatched message ("
operator|+
name|mdn
operator|.
name|getMessageId
argument_list|()
operator|+
literal|") was not in the pending list for "
operator|+
name|mdn
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|" on "
operator|+
name|mdn
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
specifier|final
name|void
name|acknowledge
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Handle the standard acknowledgment case.
name|boolean
name|callDispatchMatched
init|=
literal|false
decl_stmt|;
name|Destination
name|destination
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isSlave
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|okForAckAsDispatchDone
operator|.
name|await
argument_list|(
literal|0l
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
comment|// suppress unexpected ack exception in this expected case
name|LOG
operator|.
name|warn
argument_list|(
literal|"Ignoring ack received before dispatch; result of failover with an outstanding ack. Acked messages will be replayed if present on this broker. Ignored ack: "
operator|+
name|ack
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"ack:"
operator|+
name|ack
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
if|if
condition|(
name|ack
operator|.
name|isStandardAck
argument_list|()
condition|)
block|{
comment|// First check if the ack matches the dispatched. When using failover this might
comment|// not be the case. We don't ever want to ack the wrong messages.
name|assertAckMatchesDispatched
argument_list|(
name|ack
argument_list|)
expr_stmt|;
comment|// Acknowledge all dispatched messages up till the message id of
comment|// the acknowledgment.
name|int
name|index
init|=
literal|0
decl_stmt|;
name|boolean
name|inAckRange
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MessageReference
argument_list|>
name|removeList
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|dispatched
control|)
block|{
name|MessageId
name|messageId
init|=
name|node
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|==
literal|null
operator|||
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
name|inAckRange
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|inAckRange
condition|)
block|{
comment|// Don't remove the nodes until we are committed.
if|if
condition|(
operator|!
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|dequeueCounter
operator|++
expr_stmt|;
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|removeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registerRemoveSync
argument_list|(
name|context
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
comment|// contract prefetch if dispatch required a pull
if|if
condition|(
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Protect extension update against parallel updates.
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currentExtension
init|=
name|prefetchExtension
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|newExtension
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|currentExtension
operator|-
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetchExtension
operator|.
name|compareAndSet
argument_list|(
name|currentExtension
argument_list|,
name|newExtension
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|usePrefetchExtension
operator|&&
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
comment|// extend prefetch window only if not a pulling consumer
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currentExtension
init|=
name|prefetchExtension
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|newExtension
init|=
name|Math
operator|.
name|max
argument_list|(
name|currentExtension
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetchExtension
operator|.
name|compareAndSet
argument_list|(
name|currentExtension
argument_list|,
name|newExtension
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
name|destination
operator|=
name|node
operator|.
name|getRegionDestination
argument_list|()
expr_stmt|;
name|callDispatchMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|removeList
control|)
block|{
name|dispatched
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|// this only happens after a reconnect - get an ack which is not
comment|// valid
if|if
condition|(
operator|!
name|callDispatchMatched
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not correlate acknowledgment with dispatched message: "
operator|+
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|ack
operator|.
name|isIndividualAck
argument_list|()
condition|)
block|{
comment|// Message was delivered and acknowledge - but only delete the
comment|// individual message
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|dispatched
control|)
block|{
name|MessageId
name|messageId
init|=
name|node
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
comment|// Don't remove the nodes until we are committed - immediateAck option
if|if
condition|(
operator|!
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|dequeueCounter
operator|++
expr_stmt|;
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|dispatched
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registerRemoveSync
argument_list|(
name|context
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|// Protect extension update against parallel updates.
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currentExtension
init|=
name|prefetchExtension
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|newExtension
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|currentExtension
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetchExtension
operator|.
name|compareAndSet
argument_list|(
name|currentExtension
argument_list|,
name|newExtension
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|destination
operator|=
name|node
operator|.
name|getRegionDestination
argument_list|()
expr_stmt|;
name|callDispatchMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|ack
operator|.
name|isDeliveredAck
argument_list|()
condition|)
block|{
comment|// Message was delivered but not acknowledged: update pre-fetch
comment|// counters.
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|iter
init|=
name|dispatched
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
specifier|final
name|MessageReference
name|node
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isExpired
argument_list|()
condition|)
block|{
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|dispatched
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|usePrefetchExtension
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currentExtension
init|=
name|prefetchExtension
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|newExtension
init|=
name|Math
operator|.
name|max
argument_list|(
name|currentExtension
argument_list|,
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetchExtension
operator|.
name|compareAndSet
argument_list|(
name|currentExtension
argument_list|,
name|newExtension
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
name|destination
operator|=
name|node
operator|.
name|getRegionDestination
argument_list|()
expr_stmt|;
name|callDispatchMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|callDispatchMatched
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Could not correlate acknowledgment with dispatched message: "
operator|+
name|ack
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ack
operator|.
name|isRedeliveredAck
argument_list|()
condition|)
block|{
comment|// Message was re-delivered but it was not yet considered to be
comment|// a DLQ message.
name|boolean
name|inAckRange
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|dispatched
control|)
block|{
name|MessageId
name|messageId
init|=
name|node
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|==
literal|null
operator|||
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
name|inAckRange
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|inAckRange
condition|)
block|{
if|if
condition|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
name|destination
operator|=
name|node
operator|.
name|getRegionDestination
argument_list|()
expr_stmt|;
name|callDispatchMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|callDispatchMatched
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Could not correlate acknowledgment with dispatched message: "
operator|+
name|ack
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ack
operator|.
name|isPoisonAck
argument_list|()
condition|)
block|{
comment|// TODO: what if the message is already in a DLQ???
comment|// Handle the poison ACK case: we need to send the message to a
comment|// DLQ
if|if
condition|(
name|ack
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Poison ack cannot be transacted: "
operator|+
name|ack
argument_list|)
throw|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
name|boolean
name|inAckRange
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|MessageReference
argument_list|>
name|removeList
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|dispatched
control|)
block|{
name|MessageId
name|messageId
init|=
name|node
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|==
literal|null
operator|||
name|ack
operator|.
name|getFirstMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
name|inAckRange
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|inAckRange
condition|)
block|{
if|if
condition|(
name|ack
operator|.
name|getPoisonCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|node
operator|.
name|getMessage
argument_list|()
operator|.
name|setProperty
argument_list|(
name|ActiveMQMessage
operator|.
name|DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY
argument_list|,
name|ack
operator|.
name|getPoisonCause
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sendToDLQ
argument_list|(
name|context
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|removeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|dequeueCounter
operator|++
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|.
name|equals
argument_list|(
name|messageId
argument_list|)
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currentExtension
init|=
name|prefetchExtension
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|newExtension
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|currentExtension
operator|-
operator|(
name|index
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetchExtension
operator|.
name|compareAndSet
argument_list|(
name|currentExtension
argument_list|,
name|newExtension
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|destination
operator|=
name|node
operator|.
name|getRegionDestination
argument_list|()
expr_stmt|;
name|callDispatchMatched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|MessageReference
name|node
range|:
name|removeList
control|)
block|{
name|dispatched
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|callDispatchMatched
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Could not correlate acknowledgment with dispatched message: "
operator|+
name|ack
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|callDispatchMatched
operator|&&
name|destination
operator|!=
literal|null
condition|)
block|{
name|destination
operator|.
name|wakeup
argument_list|()
expr_stmt|;
name|dispatchPending
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isSlave
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Slave broker out of sync with master: Acknowledgment ("
operator|+
name|ack
operator|+
literal|") was not in the dispatch list: "
operator|+
name|dispatched
argument_list|)
throw|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Acknowledgment out of sync (Normally occurs when failover connection reconnects): "
operator|+
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|registerRemoveSync
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|MessageReference
name|node
parameter_list|)
block|{
comment|// setup a Synchronization to remove nodes from the
comment|// dispatched list.
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|dequeueCounter
operator|++
expr_stmt|;
name|dispatched
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
if|if
condition|(
name|isSlave
argument_list|()
condition|)
block|{
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// poisionAck will decrement - otherwise still inflight on client
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks an ack versus the contents of the dispatched list.      *      * @param ack      * @throws JMSException if it does not match      */
specifier|protected
name|void
name|assertAckMatchesDispatched
parameter_list|(
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageId
name|firstAckedMsg
init|=
name|ack
operator|.
name|getFirstMessageId
argument_list|()
decl_stmt|;
name|MessageId
name|lastAckedMsg
init|=
name|ack
operator|.
name|getLastMessageId
argument_list|()
decl_stmt|;
name|int
name|checkCount
init|=
literal|0
decl_stmt|;
name|boolean
name|checkFoundStart
init|=
literal|false
decl_stmt|;
name|boolean
name|checkFoundEnd
init|=
literal|false
decl_stmt|;
for|for
control|(
name|MessageReference
name|node
range|:
name|dispatched
control|)
block|{
if|if
condition|(
name|firstAckedMsg
operator|==
literal|null
condition|)
block|{
name|checkFoundStart
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkFoundStart
operator|&&
name|firstAckedMsg
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
name|checkFoundStart
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|checkFoundStart
condition|)
block|{
name|checkCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|lastAckedMsg
operator|!=
literal|null
operator|&&
name|lastAckedMsg
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
name|checkFoundEnd
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|checkFoundStart
operator|&&
name|firstAckedMsg
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unmatched acknowledge: "
operator|+
name|ack
operator|+
literal|"; Could not find Message-ID "
operator|+
name|firstAckedMsg
operator|+
literal|" in dispatched-list (start of ack)"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|checkFoundEnd
operator|&&
name|lastAckedMsg
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unmatched acknowledge: "
operator|+
name|ack
operator|+
literal|"; Could not find Message-ID "
operator|+
name|lastAckedMsg
operator|+
literal|" in dispatched-list (end of ack)"
argument_list|)
throw|;
if|if
condition|(
name|ack
operator|.
name|getMessageCount
argument_list|()
operator|!=
name|checkCount
operator|&&
operator|!
name|ack
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unmatched acknowledge: "
operator|+
name|ack
operator|+
literal|"; Expected message count ("
operator|+
name|ack
operator|.
name|getMessageCount
argument_list|()
operator|+
literal|") differs from count in dispatched-list ("
operator|+
name|checkCount
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param context      * @param node      * @throws IOException      * @throws Exception      */
specifier|protected
name|void
name|sendToDLQ
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|broker
operator|.
name|getRoot
argument_list|()
operator|.
name|sendToDeadLetterQueue
argument_list|(
name|context
argument_list|,
name|node
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getInFlightSize
parameter_list|()
block|{
return|return
name|dispatched
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Used to determine if the broker can dispatch to the consumer.      *      * @return      */
specifier|public
name|boolean
name|isFull
parameter_list|()
block|{
return|return
name|dispatched
operator|.
name|size
argument_list|()
operator|-
name|prefetchExtension
operator|.
name|get
argument_list|()
operator|>=
name|info
operator|.
name|getPrefetchSize
argument_list|()
return|;
block|}
comment|/**      * @return true when 60% or more room is left for dispatching messages      */
specifier|public
name|boolean
name|isLowWaterMark
parameter_list|()
block|{
return|return
operator|(
name|dispatched
operator|.
name|size
argument_list|()
operator|-
name|prefetchExtension
operator|.
name|get
argument_list|()
operator|)
operator|<=
operator|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|*
literal|.4
operator|)
return|;
block|}
comment|/**      * @return true when 10% or less room is left for dispatching messages      */
specifier|public
name|boolean
name|isHighWaterMark
parameter_list|()
block|{
return|return
operator|(
name|dispatched
operator|.
name|size
argument_list|()
operator|-
name|prefetchExtension
operator|.
name|get
argument_list|()
operator|)
operator|>=
operator|(
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|*
literal|.9
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|countBeforeFull
parameter_list|()
block|{
return|return
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|+
name|prefetchExtension
operator|.
name|get
argument_list|()
operator|-
name|dispatched
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPendingQueueSize
parameter_list|()
block|{
return|return
name|pending
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDispatchedQueueSize
parameter_list|()
block|{
return|return
name|dispatched
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|long
name|getDequeueCounter
parameter_list|()
block|{
return|return
name|dequeueCounter
return|;
block|}
specifier|public
name|long
name|getDispatchedCounter
parameter_list|()
block|{
return|return
name|dispatchCounter
return|;
block|}
specifier|public
name|long
name|getEnqueueCounter
parameter_list|()
block|{
return|return
name|enqueueCounter
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRecoveryRequired
parameter_list|()
block|{
return|return
name|pending
operator|.
name|isRecoveryRequired
argument_list|()
return|;
block|}
specifier|public
name|PendingMessageCursor
name|getPending
parameter_list|()
block|{
return|return
name|this
operator|.
name|pending
return|;
block|}
specifier|public
name|void
name|setPending
parameter_list|(
name|PendingMessageCursor
name|pending
parameter_list|)
block|{
name|this
operator|.
name|pending
operator|=
name|pending
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|pending
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|pending
operator|.
name|setSystemUsage
argument_list|(
name|usageManager
argument_list|)
expr_stmt|;
name|this
operator|.
name|pending
operator|.
name|setMemoryUsageHighWaterMark
argument_list|(
name|getCursorMemoryHighWaterMark
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|pendingLock
init|)
block|{
name|super
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|pending
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|MessageReference
argument_list|>
name|remove
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|MessageReference
argument_list|>
name|rc
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|pendingLock
init|)
block|{
name|super
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
comment|// Here is a potential problem concerning Inflight stat:
comment|// Messages not already committed or rolled back may not be removed from dispatched list at the moment
comment|// Except if each commit or rollback callback action comes before remove of subscriber.
name|rc
operator|.
name|addAll
argument_list|(
name|pending
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
argument_list|)
expr_stmt|;
comment|// Synchronized to DispatchLock
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
name|references
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MessageReference
name|r
range|:
name|dispatched
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRegionDestination
argument_list|()
operator|==
name|destination
condition|)
block|{
name|references
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|rc
operator|.
name|addAll
argument_list|(
name|references
argument_list|)
expr_stmt|;
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|subtract
argument_list|(
name|references
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|subtract
argument_list|(
name|references
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|dispatched
operator|.
name|removeAll
argument_list|(
name|references
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
specifier|protected
name|void
name|dispatchPending
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isSlave
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|pendingLock
init|)
block|{
try|try
block|{
name|int
name|numberToDispatch
init|=
name|countBeforeFull
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberToDispatch
operator|>
literal|0
condition|)
block|{
name|setSlowConsumer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setPendingBatchSize
argument_list|(
name|pending
argument_list|,
name|numberToDispatch
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|pending
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|pending
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|isFull
argument_list|()
operator|&&
name|count
operator|<
name|numberToDispatch
condition|)
block|{
name|MessageReference
name|node
init|=
name|pending
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
break|break;
block|}
comment|// Synchronize between dispatched list and remove of message from pending list
comment|// related to remove subscription action
synchronized|synchronized
init|(
name|dispatchLock
init|)
block|{
name|pending
operator|.
name|remove
argument_list|()
expr_stmt|;
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isDropped
argument_list|(
name|node
argument_list|)
operator|&&
name|canDispatch
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// Message may have been sitting in the pending
comment|// list a while waiting for the consumer to ak the message.
if|if
condition|(
name|node
operator|!=
name|QueueMessageReference
operator|.
name|NULL_MESSAGE
operator|&&
name|node
operator|.
name|isExpired
argument_list|()
condition|)
block|{
comment|//increment number to dispatch
name|numberToDispatch
operator|++
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|this
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|dispatch
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isSlowConsumer
argument_list|()
condition|)
block|{
name|setSlowConsumer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Destination
name|dest
range|:
name|destinations
control|)
block|{
name|dest
operator|.
name|slowConsumer
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pending
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|setPendingBatchSize
parameter_list|(
name|PendingMessageCursor
name|pending
parameter_list|,
name|int
name|numberToDispatch
parameter_list|)
block|{
name|pending
operator|.
name|setMaxBatchSize
argument_list|(
name|numberToDispatch
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|dispatch
parameter_list|(
specifier|final
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Message
name|message
init|=
name|node
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|okForAckAsDispatchDone
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// No reentrant lock - Patch needed to IndirectMessageReference on method lock
if|if
condition|(
operator|!
name|isSlave
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
name|createMessageDispatch
argument_list|(
name|node
argument_list|,
name|message
argument_list|)
decl_stmt|;
comment|// NULL messages don't count... they don't get Acked.
if|if
condition|(
name|node
operator|!=
name|QueueMessageReference
operator|.
name|NULL_MESSAGE
condition|)
block|{
name|dispatchCounter
operator|++
expr_stmt|;
name|dispatched
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|currentExtension
init|=
name|prefetchExtension
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|newExtension
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|currentExtension
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefetchExtension
operator|.
name|compareAndSet
argument_list|(
name|currentExtension
argument_list|,
name|newExtension
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|info
operator|.
name|isDispatchAsync
argument_list|()
condition|)
block|{
name|md
operator|.
name|setTransmitCallback
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Since the message gets queued up in async dispatch,
comment|// we don't want to
comment|// decrease the reference count until it gets put on the
comment|// wire.
name|onDispatch
argument_list|(
name|node
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchSync
argument_list|(
name|md
argument_list|)
expr_stmt|;
name|onDispatch
argument_list|(
name|node
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|void
name|onDispatch
parameter_list|(
specifier|final
name|MessageReference
name|node
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|!=
name|QueueMessageReference
operator|.
name|NULL_MESSAGE
condition|)
block|{
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|" dispatched: "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" - "
operator|+
name|message
operator|.
name|getDestination
argument_list|()
operator|+
literal|", dispatched: "
operator|+
name|dispatchCounter
operator|+
literal|", inflight: "
operator|+
name|dispatched
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|info
operator|.
name|isDispatchAsync
argument_list|()
condition|)
block|{
try|try
block|{
name|dispatchPending
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|serviceExceptionAsync
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * inform the MessageConsumer on the client to change it's prefetch      *      * @param newPrefetch      */
specifier|public
name|void
name|updateConsumerPrefetch
parameter_list|(
name|int
name|newPrefetch
parameter_list|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getConnection
argument_list|()
operator|!=
literal|null
operator|&&
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|isManageable
argument_list|()
condition|)
block|{
name|ConsumerControl
name|cc
init|=
operator|new
name|ConsumerControl
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setConsumerId
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setPrefetch
argument_list|(
name|newPrefetch
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param node      * @param message      * @return MessageDispatch      */
specifier|protected
name|MessageDispatch
name|createMessageDispatch
parameter_list|(
name|MessageReference
name|node
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|MessageDispatch
name|md
init|=
operator|new
name|MessageDispatch
argument_list|()
decl_stmt|;
name|md
operator|.
name|setConsumerId
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
name|QueueMessageReference
operator|.
name|NULL_MESSAGE
condition|)
block|{
name|md
operator|.
name|setMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|md
operator|.
name|setDestination
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|md
operator|.
name|setDestination
argument_list|(
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
name|md
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|md
operator|.
name|setRedeliveryCounter
argument_list|(
name|node
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|md
return|;
block|}
comment|/**      * Use when a matched message is about to be dispatched to the client.      *      * @param node      * @return false if the message should not be dispatched to the client      *         (another sub may have already dispatched it for example).      * @throws IOException      */
specifier|protected
specifier|abstract
name|boolean
name|canDispatch
parameter_list|(
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isDropped
parameter_list|(
name|MessageReference
name|node
parameter_list|)
function_decl|;
comment|/**      * Used during acknowledgment to remove the message.      *      * @throws IOException      */
specifier|protected
specifier|abstract
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|MessageAck
name|ack
parameter_list|,
specifier|final
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
name|int
name|getMaxProducersToAudit
parameter_list|()
block|{
return|return
name|maxProducersToAudit
return|;
block|}
specifier|public
name|void
name|setMaxProducersToAudit
parameter_list|(
name|int
name|maxProducersToAudit
parameter_list|)
block|{
name|this
operator|.
name|maxProducersToAudit
operator|=
name|maxProducersToAudit
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxAuditDepth
parameter_list|()
block|{
return|return
name|maxAuditDepth
return|;
block|}
specifier|public
name|void
name|setMaxAuditDepth
parameter_list|(
name|int
name|maxAuditDepth
parameter_list|)
block|{
name|this
operator|.
name|maxAuditDepth
operator|=
name|maxAuditDepth
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUsePrefetchExtension
parameter_list|()
block|{
return|return
name|usePrefetchExtension
return|;
block|}
specifier|public
name|void
name|setUsePrefetchExtension
parameter_list|(
name|boolean
name|usePrefetchExtension
parameter_list|)
block|{
name|this
operator|.
name|usePrefetchExtension
operator|=
name|usePrefetchExtension
expr_stmt|;
block|}
specifier|protected
name|int
name|getPrefetchExtension
parameter_list|()
block|{
return|return
name|this
operator|.
name|prefetchExtension
operator|.
name|get
argument_list|()
return|;
block|}
block|}
end_class

end_unit

