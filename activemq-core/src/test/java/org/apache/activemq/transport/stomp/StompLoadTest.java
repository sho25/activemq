begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *   * Simulates load on the Stomp connector. All producers/consumers open/close a  * connection on every command Configurable number of producers/consumers, their  * speed and duration of test  *   * Start a broker with the desired configuration to test and then run this test  *   */
end_comment

begin_class
specifier|public
class|class
name|StompLoadTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StompLoadTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|producerSleep
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|consumerSleep
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|msgCount
init|=
literal|10000
decl_stmt|;
specifier|final
name|int
name|producerCount
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|consumerCount
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|testTime
init|=
literal|30
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|final
name|String
name|bindAddress
init|=
literal|"stomp://0.0.0.0:61612"
decl_stmt|;
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|producerCount
condition|;
name|i
operator|++
control|)
block|{
name|ProducerThread
name|producerThread
init|=
operator|new
name|ProducerThread
argument_list|(
literal|"producer"
operator|+
name|i
argument_list|)
decl_stmt|;
name|producerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumerCount
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|consumerThread
init|=
operator|new
name|ConsumerThread
argument_list|(
literal|"consumer"
operator|+
name|i
argument_list|)
decl_stmt|;
name|consumerThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|testTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StompConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|StompConnection
name|conn
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|URI
name|connectUri
init|=
operator|new
name|URI
argument_list|(
name|bindAddress
argument_list|)
decl_stmt|;
name|conn
operator|.
name|open
argument_list|(
operator|new
name|Socket
argument_list|(
name|connectUri
operator|.
name|getHost
argument_list|()
argument_list|,
name|connectUri
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
class|class
name|ProducerThread
extends|extends
name|Thread
block|{
name|String
name|name
decl_stmt|;
specifier|public
name|ProducerThread
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|msgCount
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|StompConnection
name|conn
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|String
name|msg
init|=
literal|"test message "
operator|+
name|i
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|+
literal|" sending "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|conn
operator|.
name|send
argument_list|(
literal|"/queue/test"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|producerSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
class|class
name|ConsumerThread
extends|extends
name|Thread
block|{
name|String
name|name
decl_stmt|;
specifier|public
name|ConsumerThread
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|msgCount
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|StompConnection
name|conn
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"activemq.prefetchSize"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|subscribe
argument_list|(
literal|"/queue/test"
argument_list|,
literal|"client"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|StompFrame
name|frame
init|=
name|conn
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|conn
operator|.
name|ack
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|+
literal|" received "
operator|+
name|frame
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|consumerSleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

