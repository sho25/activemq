begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|load
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|LoadTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LoadTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|String
name|bindAddress
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|protected
name|LoadController
name|controller
decl_stmt|;
specifier|protected
name|LoadClient
index|[]
name|clients
decl_stmt|;
specifier|protected
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|protected
name|Destination
name|destination
decl_stmt|;
specifier|protected
name|int
name|numberOfClients
init|=
literal|50
decl_stmt|;
specifier|protected
name|int
name|deliveryMode
init|=
name|DeliveryMode
operator|.
name|PERSISTENT
decl_stmt|;
specifier|protected
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
specifier|protected
name|int
name|numberOfBatches
init|=
literal|10
decl_stmt|;
specifier|protected
name|int
name|timeout
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|protected
name|boolean
name|connectionPerMessage
init|=
literal|false
decl_stmt|;
specifier|protected
name|Connection
name|managementConnection
decl_stmt|;
specifier|protected
name|Session
name|managementSession
decl_stmt|;
comment|/**      * Sets up a test where the producer and consumer have their own connection.      *       * @see junit.framework.TestCase#setUp()      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|broker
operator|=
name|createBroker
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
block|}
name|factory
operator|=
name|createConnectionFactory
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|managementConnection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|managementSession
operator|=
name|managementConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Destination
name|startDestination
init|=
name|createDestination
argument_list|(
name|managementSession
argument_list|,
name|getClass
argument_list|()
operator|+
literal|".start"
argument_list|)
decl_stmt|;
name|Destination
name|endDestination
init|=
name|createDestination
argument_list|(
name|managementSession
argument_list|,
name|getClass
argument_list|()
operator|+
literal|".end"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running with "
operator|+
name|numberOfClients
operator|+
literal|" clients - sending "
operator|+
name|numberOfBatches
operator|+
literal|" batches of "
operator|+
name|batchSize
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
name|controller
operator|=
operator|new
name|LoadController
argument_list|(
literal|"Controller"
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setBatchSize
argument_list|(
name|batchSize
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setNumberOfBatches
argument_list|(
name|numberOfBatches
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setConnectionPerMessage
argument_list|(
name|connectionPerMessage
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setStartDestination
argument_list|(
name|startDestination
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setNextDestination
argument_list|(
name|endDestination
argument_list|)
expr_stmt|;
name|controller
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|clients
operator|=
operator|new
name|LoadClient
index|[
name|numberOfClients
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfClients
condition|;
name|i
operator|++
control|)
block|{
name|Destination
name|inDestination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|inDestination
operator|=
name|startDestination
expr_stmt|;
block|}
else|else
block|{
name|inDestination
operator|=
name|createDestination
argument_list|(
name|managementSession
argument_list|,
name|getClass
argument_list|()
operator|+
literal|".client."
operator|+
operator|(
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|Destination
name|outDestination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|i
operator|==
operator|(
name|numberOfClients
operator|-
literal|1
operator|)
condition|)
block|{
name|outDestination
operator|=
name|endDestination
expr_stmt|;
block|}
else|else
block|{
name|outDestination
operator|=
name|createDestination
argument_list|(
name|managementSession
argument_list|,
name|getClass
argument_list|()
operator|+
literal|".client."
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|LoadClient
name|client
init|=
operator|new
name|LoadClient
argument_list|(
literal|"client("
operator|+
name|i
operator|+
literal|")"
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|client
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|client
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
name|client
operator|.
name|setConnectionPerMessage
argument_list|(
name|connectionPerMessage
argument_list|)
expr_stmt|;
name|client
operator|.
name|setStartDestination
argument_list|(
name|inDestination
argument_list|)
expr_stmt|;
name|client
operator|.
name|setNextDestination
argument_list|(
name|outDestination
argument_list|)
expr_stmt|;
name|clients
index|[
name|i
index|]
operator|=
name|client
expr_stmt|;
block|}
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|managementConnection
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfClients
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|controller
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|Destination
name|createDestination
parameter_list|(
name|Session
name|s
parameter_list|,
name|String
name|destinationName
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|s
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
return|;
block|}
comment|/**      * Factory method to create a new broker      *       * @throws Exception      */
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|configureBroker
argument_list|(
name|answer
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|answer
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|answer
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfClients
condition|;
name|i
operator|++
control|)
block|{
name|clients
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|controller
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|batchSize
operator|*
name|numberOfBatches
operator|)
argument_list|,
name|controller
operator|.
name|awaitTestComplete
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

