begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|stream
operator|.
name|sync
operator|.
name|socket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stream
operator|.
name|sync
operator|.
name|StreamChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stream
operator|.
name|sync
operator|.
name|StreamChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stream
operator|.
name|sync
operator|.
name|StreamChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_comment
comment|/**  * A TcpStreamChannelFactory creates {@see org.activeio.net.TcpStreamChannel}  * and {@see org.activeio.net.TcpStreamChannelServer} objects.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|SocketStreamChannelFactory
implements|implements
name|StreamChannelFactory
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_BACKLOG
init|=
literal|500
decl_stmt|;
specifier|private
specifier|final
name|SocketFactory
name|socketFactory
decl_stmt|;
specifier|private
specifier|final
name|ServerSocketFactory
name|serverSocketFactory
decl_stmt|;
specifier|private
name|int
name|backlog
init|=
name|DEFAULT_BACKLOG
decl_stmt|;
specifier|public
name|SocketStreamChannelFactory
parameter_list|()
block|{
name|this
argument_list|(
name|SocketFactory
operator|.
name|getDefault
argument_list|()
argument_list|,
name|ServerSocketFactory
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SocketStreamChannelFactory
parameter_list|(
name|SocketFactory
name|socketFactory
parameter_list|,
name|ServerSocketFactory
name|serverSocketFactory
parameter_list|)
block|{
name|this
operator|.
name|socketFactory
operator|=
name|socketFactory
expr_stmt|;
name|this
operator|.
name|serverSocketFactory
operator|=
name|serverSocketFactory
expr_stmt|;
block|}
comment|/**      * Uses the {@param location}'s host and port to create a tcp connection to a remote host.      *       * @see org.activeio.StreamChannelFactory#openStreamChannel(java.net.URI)      */
specifier|public
name|StreamChannel
name|openStreamChannel
parameter_list|(
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
name|socket
operator|=
name|socketFactory
operator|.
name|createSocket
argument_list|(
name|location
operator|.
name|getHost
argument_list|()
argument_list|,
name|location
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|createStreamChannel
argument_list|(
name|socket
argument_list|)
return|;
block|}
comment|/**      * @param socket      * @return      * @throws IOException      */
specifier|protected
name|StreamChannel
name|createStreamChannel
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SocketStreamChannel
argument_list|(
name|socket
argument_list|)
return|;
block|}
comment|/**      * Binds a server socket a the {@param bindURI}'s port.      *       * @see org.activeio.StreamChannelFactory#bindStreamChannel(java.net.URI)      */
specifier|public
name|StreamChannelServer
name|bindStreamChannel
parameter_list|(
name|URI
name|bindURI
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|host
init|=
name|bindURI
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|InetAddress
name|addr
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
operator|||
name|host
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|host
operator|.
name|equals
argument_list|(
literal|"localhost"
argument_list|)
operator|||
name|host
operator|.
name|equals
argument_list|(
literal|"0.0.0.0"
argument_list|)
operator|||
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|.
name|equals
argument_list|(
name|host
argument_list|)
condition|)
block|{
name|addr
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|addr
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|ServerSocket
name|serverSocket
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|equals
argument_list|(
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
argument_list|)
condition|)
block|{
name|serverSocket
operator|=
name|serverSocketFactory
operator|.
name|createServerSocket
argument_list|(
name|bindURI
operator|.
name|getPort
argument_list|()
argument_list|,
name|backlog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serverSocket
operator|=
name|serverSocketFactory
operator|.
name|createServerSocket
argument_list|(
name|bindURI
operator|.
name|getPort
argument_list|()
argument_list|,
name|backlog
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
name|URI
name|connectURI
init|=
name|bindURI
decl_stmt|;
try|try
block|{
comment|// connectURI = URISupport.changeHost(connectURI, addr.getHostName());
name|connectURI
operator|=
name|URISupport
operator|.
name|changePort
argument_list|(
name|connectURI
argument_list|,
name|serverSocket
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Could build connect URI: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|SocketStreamChannelServer
argument_list|(
name|serverSocket
argument_list|,
name|bindURI
argument_list|,
name|connectURI
argument_list|)
return|;
block|}
comment|/**      * @return Returns the backlog.      */
specifier|public
name|int
name|getBacklog
parameter_list|()
block|{
return|return
name|backlog
return|;
block|}
comment|/**      * @param backlog      *            The backlog to set.      */
specifier|public
name|void
name|setBacklog
parameter_list|(
name|int
name|backlog
parameter_list|)
block|{
name|this
operator|.
name|backlog
operator|=
name|backlog
expr_stmt|;
block|}
block|}
end_class

end_unit

