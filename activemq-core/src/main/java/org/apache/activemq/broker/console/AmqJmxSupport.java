begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|AmqJmxSupport
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_JMX_DOMAIN
init|=
literal|"org.apache.activemq"
decl_stmt|;
specifier|public
specifier|static
name|Set
name|getAllBrokers
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|queryMBeans
argument_list|(
name|server
argument_list|,
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":Type=Broker,*"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Set
name|getBrokers
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|String
name|brokerName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|queryMBeans
argument_list|(
name|server
argument_list|,
literal|"Type=Broker,BrokerName="
operator|+
name|brokerName
operator|+
literal|",*"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Set
name|queryMBeans
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|List
name|queryList
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
name|mbeans
decl_stmt|;
comment|// If there is no query defined get all mbeans
if|if
condition|(
name|queryList
operator|==
literal|null
operator|||
name|queryList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ObjectName
name|queryName
init|=
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":*"
argument_list|)
decl_stmt|;
name|mbeans
operator|=
name|queryMBeans
argument_list|(
name|server
argument_list|,
name|queryName
argument_list|)
expr_stmt|;
comment|// Parse through all the query strings
block|}
else|else
block|{
name|mbeans
operator|=
operator|new
name|HashSet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|queryList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|queryStr
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|mbeans
operator|.
name|addAll
argument_list|(
name|queryMBeans
argument_list|(
name|server
argument_list|,
name|queryStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mbeans
return|;
block|}
specifier|public
specifier|static
name|Set
name|queryMBeans
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|String
name|queryString
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Transform string to support regex filtering
name|List
name|regexProp
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|queryString
operator|=
name|transformWildcardQueryToObjectName
argument_list|(
name|queryString
argument_list|,
name|regexProp
argument_list|)
expr_stmt|;
name|ObjectName
name|queryName
init|=
operator|new
name|ObjectName
argument_list|(
name|DEFAULT_JMX_DOMAIN
operator|+
literal|":"
operator|+
name|queryString
argument_list|)
decl_stmt|;
return|return
name|filterUsingRegEx
argument_list|(
name|queryMBeans
argument_list|(
name|server
argument_list|,
name|queryName
argument_list|)
argument_list|,
name|regexProp
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Set
name|queryMBeans
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|ObjectName
name|objName
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|server
operator|.
name|queryMBeans
argument_list|(
name|objName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|queryMBeanAttrs
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|ObjectName
name|mbeanObjName
parameter_list|,
name|List
name|attrView
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|attr
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|MBeanAttributeInfo
index|[]
name|attrs
init|=
name|server
operator|.
name|getMBeanInfo
argument_list|(
name|mbeanObjName
argument_list|)
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
comment|// If the mbean has no attribute, print a no attribute message
if|if
condition|(
name|attrs
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// If there is no view specified, get all attributes
if|if
condition|(
name|attrView
operator|==
literal|null
operator|||
name|attrView
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|attrVal
init|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbeanObjName
argument_list|,
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|put
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|attrVal
argument_list|)
expr_stmt|;
block|}
return|return
name|attr
return|;
block|}
comment|// Get attributes specified by view
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|attrView
operator|.
name|contains
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Object
name|attrVal
init|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbeanObjName
argument_list|,
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|put
argument_list|(
name|attrs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|attrVal
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attr
return|;
block|}
specifier|public
specifier|static
name|String
name|createQueryString
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|param
parameter_list|)
block|{
return|return
name|query
operator|.
name|replaceAll
argument_list|(
literal|"%1"
argument_list|,
name|param
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|createQueryString
parameter_list|(
name|String
name|query
parameter_list|,
name|List
name|params
parameter_list|)
block|{
name|int
name|count
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|params
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|query
operator|.
name|replaceAll
argument_list|(
literal|"%"
operator|+
name|count
operator|++
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
specifier|public
specifier|static
name|void
name|printBrokerList
parameter_list|(
name|Set
name|brokerList
parameter_list|)
block|{
name|Object
index|[]
name|brokerArray
init|=
name|brokerList
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"List of available brokers:"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|brokerArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|brokerName
init|=
operator|(
operator|(
name|ObjectInstance
operator|)
name|brokerArray
index|[
name|i
index|]
operator|)
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyProperty
argument_list|(
literal|"BrokerName"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|".) "
operator|+
name|brokerName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|printMBeanProp
parameter_list|(
name|ObjectInstance
name|mbean
parameter_list|,
name|List
name|propView
parameter_list|)
block|{
comment|// Filter properties to print
if|if
condition|(
name|propView
operator|!=
literal|null
operator|&&
operator|!
name|propView
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
name|mbeanProps
init|=
name|mbean
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|propView
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|mbeanProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MBean "
operator|+
name|key
operator|+
literal|": "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Print all properties
block|}
else|else
block|{
name|Map
name|mbeanProps
init|=
name|mbean
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mbeanProps
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|mbeanProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MBean "
operator|+
name|key
operator|+
literal|": "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|printMBeanAttr
parameter_list|(
name|MBeanServerConnection
name|server
parameter_list|,
name|ObjectInstance
name|mbean
parameter_list|,
name|List
name|attrView
parameter_list|)
block|{
try|try
block|{
name|Map
name|attrList
init|=
name|queryMBeanAttrs
argument_list|(
name|server
argument_list|,
name|mbean
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|attrView
argument_list|)
decl_stmt|;
comment|// If the mbean has no attribute, print a no attribute message
if|if
condition|(
name|attrList
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    MBean has no attributes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// If the mbean's attributes did not match any of the view, display a message
if|if
condition|(
name|attrList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    View did not match any of the mbean's attributes."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Display mbean attributes
comment|// If attrView is available, use it. This allows control over the display order
if|if
condition|(
name|attrView
operator|!=
literal|null
operator|&&
operator|!
name|attrView
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|attrView
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|attrList
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|key
operator|+
literal|" = "
operator|+
name|attrList
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If attrView is not available, print all attributes
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|attrList
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|key
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    "
operator|+
name|key
operator|+
literal|" = "
operator|+
name|attrList
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to print mbean attributes. Reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|transformWildcardQueryToObjectName
parameter_list|(
name|String
name|query
parameter_list|,
name|List
name|regExMap
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|regExMap
operator|==
literal|null
condition|)
block|{
name|regExMap
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
name|StringBuffer
name|newQueryStr
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|","
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|token
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|// Get key value pair
name|String
name|key
init|=
name|token
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|value
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// Check if value is a wildcard query
if|if
condition|(
operator|(
name|value
operator|.
name|indexOf
argument_list|(
literal|"*"
argument_list|)
operator|>=
literal|0
operator|)
operator|||
operator|(
name|value
operator|.
name|indexOf
argument_list|(
literal|"?"
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
comment|// If value is a wildcard query, convert to regex
comment|// and remove the object name query to ensure it selects all
name|regExMap
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"(.*)("
operator|+
name|key
operator|+
literal|"=)("
operator|+
name|transformWildcardQueryToRegEx
argument_list|(
name|value
argument_list|)
operator|+
literal|")(,)(.*)"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Re-add valid key value pair. Remove all * property and just add one at the end.
block|}
elseif|else
if|if
condition|(
operator|(
name|key
operator|!=
literal|""
operator|)
operator|&&
operator|(
name|value
operator|!=
literal|""
operator|)
condition|)
block|{
name|newQueryStr
operator|.
name|append
argument_list|(
name|key
operator|+
literal|"="
operator|+
name|value
operator|+
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|newQueryStr
operator|.
name|append
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
return|return
name|newQueryStr
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|transformWildcardQueryToRegEx
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"[.]"
argument_list|,
literal|"\\\\."
argument_list|)
expr_stmt|;
comment|// Escape all dot characters. From (.) to (\.)
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"[?]"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|query
operator|=
name|query
operator|.
name|replaceAll
argument_list|(
literal|"[*]"
argument_list|,
literal|".*?"
argument_list|)
expr_stmt|;
comment|// Use reluctant quantifier
return|return
name|query
return|;
block|}
specifier|private
specifier|static
name|Set
name|filterUsingRegEx
parameter_list|(
name|Set
name|mbeans
parameter_list|,
name|List
name|regexProp
parameter_list|)
block|{
comment|// No regular expressions filtering needed
if|if
condition|(
name|regexProp
operator|==
literal|null
operator|||
name|regexProp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mbeans
return|;
block|}
name|Set
name|filteredMbeans
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
comment|// Get each bean to filter
for|for
control|(
name|Iterator
name|i
init|=
name|mbeans
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectInstance
name|mbeanInstance
init|=
operator|(
name|ObjectInstance
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|mbeanName
init|=
name|mbeanInstance
operator|.
name|getObjectName
argument_list|()
operator|.
name|getKeyPropertyListString
argument_list|()
decl_stmt|;
comment|// Ensure name ends with ,* to guarantee correct parsing behavior
if|if
condition|(
operator|!
name|mbeanName
operator|.
name|endsWith
argument_list|(
literal|",*"
argument_list|)
condition|)
block|{
name|mbeanName
operator|=
name|mbeanName
operator|+
literal|",*"
expr_stmt|;
block|}
name|boolean
name|match
init|=
literal|true
decl_stmt|;
comment|// Match the object name to each regex
for|for
control|(
name|Iterator
name|j
init|=
name|regexProp
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Pattern
name|p
init|=
operator|(
name|Pattern
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|matcher
argument_list|(
name|mbeanName
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
comment|// If name of mbean matches all regex pattern, add it
if|if
condition|(
name|match
condition|)
block|{
name|filteredMbeans
operator|.
name|add
argument_list|(
name|mbeanInstance
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filteredMbeans
return|;
block|}
block|}
end_class

end_unit

