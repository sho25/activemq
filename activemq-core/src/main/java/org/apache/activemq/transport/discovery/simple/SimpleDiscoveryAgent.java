begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|simple
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DiscoveryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|DiscoveryAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|DiscoveryListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A simple DiscoveryAgent that allows static configuration of the discovered services.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|SimpleDiscoveryAgent
implements|implements
name|DiscoveryAgent
block|{
specifier|private
name|long
name|initialReconnectDelay
init|=
literal|1000
operator|*
literal|5
decl_stmt|;
specifier|private
name|long
name|maxReconnectDelay
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
specifier|private
name|long
name|backOffMultiplier
init|=
literal|2
decl_stmt|;
specifier|private
name|boolean
name|useExponentialBackOff
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|maxReconnectAttempts
decl_stmt|;
specifier|private
specifier|final
name|Object
name|sleepMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|long
name|minConnectTime
init|=
literal|500
decl_stmt|;
specifier|private
name|DiscoveryListener
name|listener
decl_stmt|;
name|String
name|services
index|[]
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
name|group
init|=
literal|"DEFAULT"
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|running
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
class|class
name|SimpleDiscoveryEvent
extends|extends
name|DiscoveryEvent
block|{
specifier|private
name|int
name|connectFailures
decl_stmt|;
specifier|private
name|long
name|reconnectDelay
init|=
name|initialReconnectDelay
decl_stmt|;
specifier|private
name|long
name|connectTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|SimpleDiscoveryEvent
parameter_list|(
name|String
name|service
parameter_list|)
block|{
name|super
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDiscoveryListener
parameter_list|(
name|DiscoveryListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
block|}
specifier|public
name|void
name|registerService
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{     }
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|running
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|services
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|listener
operator|.
name|onServiceAdd
argument_list|(
operator|new
name|SimpleDiscoveryEvent
argument_list|(
name|services
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|running
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|sleepMutex
init|)
block|{
name|sleepMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
index|[]
name|getServices
parameter_list|()
block|{
return|return
name|services
return|;
block|}
specifier|public
name|void
name|setServices
parameter_list|(
name|String
name|services
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|services
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setServices
parameter_list|(
name|String
name|services
index|[]
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
name|services
expr_stmt|;
block|}
specifier|public
name|void
name|setServices
parameter_list|(
name|URI
name|services
index|[]
parameter_list|)
block|{
name|this
operator|.
name|services
operator|=
operator|new
name|String
index|[
name|services
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|services
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|services
index|[
name|i
index|]
operator|=
name|services
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|group
return|;
block|}
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{     }
specifier|public
name|void
name|serviceFailed
parameter_list|(
name|DiscoveryEvent
name|devent
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SimpleDiscoveryEvent
name|event
init|=
operator|(
name|SimpleDiscoveryEvent
operator|)
name|devent
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|failed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|listener
operator|.
name|onServiceRemove
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We detect a failed connection attempt because the service fails right
comment|// away.
if|if
condition|(
name|event
operator|.
name|connectTime
operator|+
name|minConnectTime
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|event
operator|.
name|connectFailures
operator|++
expr_stmt|;
if|if
condition|(
name|maxReconnectAttempts
operator|>
literal|0
operator|&&
name|event
operator|.
name|connectFailures
operator|>=
name|maxReconnectAttempts
condition|)
block|{
comment|// Don' try to re-connect
return|return;
block|}
synchronized|synchronized
init|(
name|sleepMutex
init|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|running
operator|.
name|get
argument_list|()
condition|)
return|return;
name|sleepMutex
operator|.
name|wait
argument_list|(
name|event
operator|.
name|reconnectDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|useExponentialBackOff
condition|)
block|{
name|event
operator|.
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
else|else
block|{
comment|// Exponential increment of reconnect delay.
name|event
operator|.
name|reconnectDelay
operator|*=
name|backOffMultiplier
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|reconnectDelay
operator|>
name|maxReconnectDelay
condition|)
name|event
operator|.
name|reconnectDelay
operator|=
name|maxReconnectDelay
expr_stmt|;
block|}
block|}
else|else
block|{
name|event
operator|.
name|connectFailures
operator|=
literal|0
expr_stmt|;
name|event
operator|.
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|running
operator|.
name|get
argument_list|()
condition|)
return|return;
name|event
operator|.
name|connectTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|event
operator|.
name|failed
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onServiceAdd
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getBackOffMultiplier
parameter_list|()
block|{
return|return
name|backOffMultiplier
return|;
block|}
specifier|public
name|void
name|setBackOffMultiplier
parameter_list|(
name|long
name|backOffMultiplier
parameter_list|)
block|{
name|this
operator|.
name|backOffMultiplier
operator|=
name|backOffMultiplier
expr_stmt|;
block|}
specifier|public
name|long
name|getInitialReconnectDelay
parameter_list|()
block|{
return|return
name|initialReconnectDelay
return|;
block|}
specifier|public
name|void
name|setInitialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|initialReconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxReconnectAttempts
parameter_list|()
block|{
return|return
name|maxReconnectAttempts
return|;
block|}
specifier|public
name|void
name|setMaxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectAttempts
operator|=
name|maxReconnectAttempts
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxReconnectDelay
parameter_list|()
block|{
return|return
name|maxReconnectDelay
return|;
block|}
specifier|public
name|void
name|setMaxReconnectDelay
parameter_list|(
name|long
name|maxReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectDelay
operator|=
name|maxReconnectDelay
expr_stmt|;
block|}
specifier|public
name|long
name|getMinConnectTime
parameter_list|()
block|{
return|return
name|minConnectTime
return|;
block|}
specifier|public
name|void
name|setMinConnectTime
parameter_list|(
name|long
name|minConnectTime
parameter_list|)
block|{
name|this
operator|.
name|minConnectTime
operator|=
name|minConnectTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseExponentialBackOff
parameter_list|()
block|{
return|return
name|useExponentialBackOff
return|;
block|}
specifier|public
name|void
name|setUseExponentialBackOff
parameter_list|(
name|boolean
name|useExponentialBackOff
parameter_list|)
block|{
name|this
operator|.
name|useExponentialBackOff
operator|=
name|useExponentialBackOff
expr_stmt|;
block|}
block|}
end_class

end_unit

