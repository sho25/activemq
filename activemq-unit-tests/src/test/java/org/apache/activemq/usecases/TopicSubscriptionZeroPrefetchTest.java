begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TopicSubscriptionZeroPrefetchTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopicSubscriptionZeroPrefetchTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|ActiveMQTopic
name|destination
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|public
name|String
name|getTopicName
parameter_list|()
block|{
return|return
name|name
operator|.
name|getMethodName
argument_list|()
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|activeMQConnectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
decl_stmt|;
name|activeMQConnectionFactory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|=
name|activeMQConnectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"ClientID-1"
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|destination
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/*      * test non durable topic subscription with prefetch set to zero      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZero
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|consumerDestination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
operator|+
literal|"?consumer.retroactive=true&consumer.prefetchSize=0"
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|consumerDestination
argument_list|)
expr_stmt|;
comment|// publish messages
name|Message
name|txtMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"M"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|txtMessage
argument_list|)
expr_stmt|;
name|Message
name|consumedMessage
init|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"should have received a message the published message"
argument_list|,
name|consumedMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroClientAckLoopReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|consumerDestination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
operator|+
literal|"?consumer.retroactive=true&consumer.prefetchSize=0"
argument_list|)
decl_stmt|;
name|Session
name|consumerClientAckSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|consumerClientAckSession
operator|.
name|createConsumer
argument_list|(
name|consumerDestination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|txtMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"M:"
operator|+
name|i
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|txtMessage
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|consumedMessage
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"should have received message["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|consumedMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroClientAckLoopTimedReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|consumerDestination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
operator|+
literal|"?consumer.retroactive=true&consumer.prefetchSize=0"
argument_list|)
decl_stmt|;
name|Session
name|consumerClientAckSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|consumerClientAckSession
operator|.
name|createConsumer
argument_list|(
name|consumerDestination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|txtMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"M:"
operator|+
name|i
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|txtMessage
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|consumedMessage
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"should have received message["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|consumedMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroClientAckLoopReceiveNoWait
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|consumerDestination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
operator|+
literal|"?consumer.retroactive=true&consumer.prefetchSize=0"
argument_list|)
decl_stmt|;
name|Session
name|consumerClientAckSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|consumerClientAckSession
operator|.
name|createConsumer
argument_list|(
name|consumerDestination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|txtMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"M:"
operator|+
name|i
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|txtMessage
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|consumedMessage
init|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"should have received message["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|consumedMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroConcurrentProduceConsumeAutoAck
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
argument_list|(
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroConcurrentProduceConsumeClientAck
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
argument_list|(
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroConcurrentProduceConsumeDupsOk
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
argument_list|(
name|Session
operator|.
name|DUPS_OK_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroConcurrentProduceConsumeTransacted
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroConcurrentProduceConsumeTransactedComitInBatches
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
argument_list|(
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTopicConsumerPrefetchZeroConcurrentProduceConsumeIndividual
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
argument_list|(
name|ActiveMQSession
operator|.
name|INDIVIDUAL_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
parameter_list|(
name|int
name|ackMode
parameter_list|)
throws|throws
name|Exception
block|{
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
argument_list|(
name|ackMode
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestTopicConsumerPrefetchZeroConcurrentProduceConsume
parameter_list|(
name|int
name|ackMode
parameter_list|,
name|boolean
name|commitBatch
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|consumerDestination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
operator|+
literal|"?consumer.retroactive=true&consumer.prefetchSize=0"
argument_list|)
decl_stmt|;
name|Session
name|consumerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
name|ackMode
operator|==
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|,
name|ackMode
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|consumerDestination
argument_list|)
expr_stmt|;
specifier|final
name|int
name|MSG_COUNT
init|=
literal|2000
decl_stmt|;
specifier|final
name|AtomicBoolean
name|error
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|done
init|=
operator|new
name|CountDownLatch
argument_list|(
name|MSG_COUNT
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|consumedMessage
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
if|if
condition|(
name|consumedMessage
operator|!=
literal|null
condition|)
block|{
name|done
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|consumedMessage
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
if|if
condition|(
name|ackMode
operator|==
name|Session
operator|.
name|SESSION_TRANSACTED
operator|&&
name|commitBatch
operator|&&
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|50
operator|)
operator|==
literal|0
condition|)
block|{
name|consumerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception during receive: {}"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|error
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ackMode
operator|==
name|Session
operator|.
name|SESSION_TRANSACTED
condition|)
block|{
try|try
block|{
name|consumerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught exception on commit: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|txtMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"M:"
operator|+
name|i
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|txtMessage
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Should not have gotten any errors"
argument_list|,
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have read all messages"
argument_list|,
name|done
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * test durable topic subscription with prefetch zero      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDurableTopicConsumerPrefetchZero
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|consumerDestination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
operator|+
literal|"?consumer.prefetchSize=0"
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|consumerDestination
argument_list|,
literal|"mysub1"
argument_list|)
expr_stmt|;
comment|// publish messages
name|Message
name|txtMessage
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"M"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|txtMessage
argument_list|)
expr_stmt|;
name|Message
name|consumedMessage
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"should have received a message the published message"
argument_list|,
name|consumedMessage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|420000
argument_list|)
specifier|public
name|void
name|testReceiveTimeoutRespectedWithExpiryProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|consumerDestination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|getTopicName
argument_list|()
operator|+
literal|"?consumer.prefetchSize=0"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|consumerDestination
argument_list|,
literal|"mysub-"
operator|+
name|i
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"RTR"
argument_list|)
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
literal|0
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|consumerDestination
argument_list|,
literal|"mysub3"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|timeStamp
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Duration: "
operator|+
name|i
operator|+
literal|" : "
operator|+
name|duration
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Delay about 500: "
operator|+
name|i
argument_list|,
name|duration
operator|<
literal|1500
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// helper method to create a broker with slow consumer advisory turned on
specifier|private
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"vm://localhost"
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policyEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policyEntry
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setMaxExpirePageSize
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setUseCache
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|policyEntry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
end_class

end_unit

