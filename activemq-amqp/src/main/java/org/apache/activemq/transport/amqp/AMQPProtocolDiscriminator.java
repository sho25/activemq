begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_comment
comment|/**  * Used to assign the best implementation of a AmqpProtocolConverter to the  * AmqpTransport based on the AmqpHeader that the client sends us.  */
end_comment

begin_class
specifier|public
class|class
name|AMQPProtocolDiscriminator
implements|implements
name|IAmqpProtocolConverter
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_PREFETCH
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|AmqpTransport
name|transport
decl_stmt|;
specifier|private
specifier|final
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|int
name|producerCredit
init|=
name|DEFAULT_PREFETCH
decl_stmt|;
interface|interface
name|Discriminator
block|{
name|boolean
name|matches
parameter_list|(
name|AmqpHeader
name|header
parameter_list|)
function_decl|;
name|IAmqpProtocolConverter
name|create
parameter_list|(
name|AmqpTransport
name|transport
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
function_decl|;
block|}
specifier|static
specifier|final
specifier|private
name|ArrayList
argument_list|<
name|Discriminator
argument_list|>
name|DISCRIMINATORS
init|=
operator|new
name|ArrayList
argument_list|<
name|Discriminator
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|DISCRIMINATORS
operator|.
name|add
argument_list|(
operator|new
name|Discriminator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|IAmqpProtocolConverter
name|create
parameter_list|(
name|AmqpTransport
name|transport
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
block|{
return|return
operator|new
name|AmqpProtocolConverter
argument_list|(
name|transport
argument_list|,
name|brokerService
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|AmqpHeader
name|header
parameter_list|)
block|{
switch|switch
condition|(
name|header
operator|.
name|getProtocolId
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|3
case|:
if|if
condition|(
name|header
operator|.
name|getMajor
argument_list|()
operator|==
literal|1
operator|&&
name|header
operator|.
name|getMinor
argument_list|()
operator|==
literal|0
operator|&&
name|header
operator|.
name|getRevision
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
specifier|private
name|ArrayList
argument_list|<
name|Command
argument_list|>
name|pendingCommands
init|=
operator|new
name|ArrayList
argument_list|<
name|Command
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AMQPProtocolDiscriminator
parameter_list|(
name|AmqpTransport
name|transport
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAMQPData
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|==
name|AmqpHeader
operator|.
name|class
condition|)
block|{
name|AmqpHeader
name|header
init|=
operator|(
name|AmqpHeader
operator|)
name|command
decl_stmt|;
name|Discriminator
name|match
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Discriminator
name|discriminator
range|:
name|DISCRIMINATORS
control|)
block|{
if|if
condition|(
name|discriminator
operator|.
name|matches
argument_list|(
name|header
argument_list|)
condition|)
block|{
name|match
operator|=
name|discriminator
expr_stmt|;
block|}
block|}
comment|// Lets use first in the list if none are a good match.
if|if
condition|(
name|match
operator|==
literal|null
condition|)
block|{
name|match
operator|=
name|DISCRIMINATORS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|IAmqpProtocolConverter
name|next
init|=
name|match
operator|.
name|create
argument_list|(
name|transport
argument_list|,
name|brokerService
argument_list|)
decl_stmt|;
name|next
operator|.
name|setProducerCredit
argument_list|(
name|producerCredit
argument_list|)
expr_stmt|;
name|transport
operator|.
name|setProtocolConverter
argument_list|(
name|next
argument_list|)
expr_stmt|;
for|for
control|(
name|Command
name|send
range|:
name|pendingCommands
control|)
block|{
name|next
operator|.
name|onActiveMQCommand
argument_list|(
name|send
argument_list|)
expr_stmt|;
block|}
name|pendingCommands
operator|.
name|clear
argument_list|()
expr_stmt|;
name|next
operator|.
name|onAMQPData
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAMQPException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|onActiveMQCommand
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|pendingCommands
operator|.
name|add
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTracer
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|setProducerCredit
parameter_list|(
name|int
name|producerCredit
parameter_list|)
block|{
name|this
operator|.
name|producerCredit
operator|=
name|producerCredit
expr_stmt|;
block|}
block|}
end_class

end_unit

