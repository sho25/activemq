begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageAuditNoSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
operator|.
name|DEFAULT_MAX_WRITE_BATCH_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MessageDatabaseTest
block|{
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCheckPointCleanupErrorBubblesUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CountDownLatch
name|traceCommandComplete
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
block|{
specifier|public
name|Journal
name|createJournal
parameter_list|()
block|{
name|Journal
name|journal
init|=
operator|new
name|Journal
argument_list|()
block|{
specifier|public
name|boolean
name|isChecksum
parameter_list|()
block|{
comment|// allow trace command on start
if|if
condition|(
name|traceCommandComplete
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|traceCommandComplete
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// called from processQ, we can throw here to error out the async write
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fail with error on processQ"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
name|journal
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
return|return
name|journal
return|;
block|}
block|}
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"kaha"
argument_list|)
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|setCheckpointInterval
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
comment|// disable periodic checkpoint
name|kaha
operator|.
name|setBrokerService
argument_list|(
operator|new
name|BrokerService
argument_list|()
block|{
specifier|public
name|void
name|handleIOException
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|traceCommandComplete
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|kaha
operator|.
name|checkpoint
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect error on first store from checkpoint"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{         }
name|assertNull
argument_list|(
literal|"audit location should be null"
argument_list|,
name|kaha
operator|.
name|getMetadata
argument_list|()
operator|.
name|producerSequenceIdTrackerLocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecoverCheckOnBatchBoundary
parameter_list|()
throws|throws
name|Exception
block|{
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"kaha2"
argument_list|)
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|setCheckpointInterval
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
comment|// disable periodic checkpoint
name|kaha
operator|.
name|setCheckForCorruptJournalFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|setChecksumJournalFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|setMaxFailoverProducersToTrack
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|setBrokerService
argument_list|(
operator|new
name|BrokerService
argument_list|()
block|{
specifier|public
name|void
name|handleIOException
parameter_list|(
name|IOException
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// track original metadata reference to ensure it is read from the journal on recovery
name|ActiveMQMessageAuditNoSync
name|auditToVerify
init|=
name|kaha
operator|.
name|getMetadata
argument_list|()
operator|.
name|producerSequenceIdTracker
decl_stmt|;
specifier|final
name|String
name|messsageId
init|=
literal|"1:1:1:1"
decl_stmt|;
name|auditToVerify
operator|.
name|isDuplicate
argument_list|(
name|messsageId
argument_list|)
expr_stmt|;
name|ByteSequence
name|byteSequence
init|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[
name|DEFAULT_MAX_WRITE_BATCH_SIZE
operator|-
literal|110
index|]
argument_list|)
decl_stmt|;
name|kaha
operator|.
name|getJournal
argument_list|()
operator|.
name|write
argument_list|(
name|byteSequence
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|getJournal
argument_list|()
operator|.
name|write
argument_list|(
name|byteSequence
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|kaha
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Value from journal recovered ok"
argument_list|,
name|kaha
operator|.
name|getMetadata
argument_list|()
operator|.
name|producerSequenceIdTracker
operator|.
name|isDuplicate
argument_list|(
name|messsageId
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|kaha
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

