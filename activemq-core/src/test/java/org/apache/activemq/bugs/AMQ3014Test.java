begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|simple
operator|.
name|SimpleDiscoveryAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test involves the creation of a local and remote broker, both of which  * communicate over VM and TCP. The local broker establishes a bridge to the  * remote broker for the purposes of verifying that broker info is only  * transfered once the local broker's ID is known to the bridge support.  */
end_comment

begin_class
specifier|public
class|class
name|AMQ3014Test
block|{
comment|// Change this URL to be an unused port.
specifier|private
specifier|static
specifier|final
name|String
name|REMOTE_BROKER_URL
init|=
literal|"tcp://localhost:50000"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BrokerInfo
argument_list|>
name|remoteBrokerInfos
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|BrokerInfo
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|localBroker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
comment|// Override the "remote" broker so that it records all (remote) BrokerInfos
comment|// that it receives.
specifier|private
name|BrokerService
name|remoteBroker
init|=
operator|new
name|BrokerService
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TransportConnector
name|createTransportConnector
parameter_list|(
name|URI
name|brokerURI
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportServer
name|transport
init|=
name|TransportFactory
operator|.
name|bind
argument_list|(
name|this
argument_list|,
name|brokerURI
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportConnector
argument_list|(
name|transport
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|Transport
name|transport
parameter_list|)
throws|throws
name|IOException
block|{
name|Connection
name|connection
init|=
name|super
operator|.
name|createConnection
argument_list|(
name|transport
argument_list|)
decl_stmt|;
specifier|final
name|TransportListener
name|proxiedListener
init|=
name|transport
operator|.
name|getTransportListener
argument_list|()
decl_stmt|;
name|transport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|instanceof
name|BrokerInfo
condition|)
block|{
name|remoteBrokerInfos
operator|.
name|add
argument_list|(
operator|(
name|BrokerInfo
operator|)
name|command
argument_list|)
expr_stmt|;
block|}
name|proxiedListener
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|proxiedListener
operator|.
name|onException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{
name|proxiedListener
operator|.
name|transportInterupted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{
name|proxiedListener
operator|.
name|transportResumed
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{
name|localBroker
operator|.
name|setBrokerName
argument_list|(
literal|"localBroker"
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setSchedulerSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setBrokerName
argument_list|(
literal|"remoteBroker"
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|addConnector
argument_list|(
name|REMOTE_BROKER_URL
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setSchedulerSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|localBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|remoteBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This test verifies that the local broker's ID is typically known by the      * bridge support before the local broker's BrokerInfo is sent to the remote      * broker.      */
annotation|@
name|Test
specifier|public
name|void
name|NormalCaseTest
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|0
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test verifies that timing can arise under which the local broker's      * ID is not known by the bridge support before the local broker's      * BrokerInfo is sent to the remote broker.      */
annotation|@
name|Test
specifier|public
name|void
name|DelayedCaseTest
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
literal|500
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runTest
parameter_list|(
specifier|final
name|long
name|taskRunnerDelay
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Add a network connector to the local broker that will create a bridge
comment|// to the remote broker.
name|DiscoveryNetworkConnector
name|dnc
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|()
decl_stmt|;
name|SimpleDiscoveryAgent
name|da
init|=
operator|new
name|SimpleDiscoveryAgent
argument_list|()
decl_stmt|;
name|da
operator|.
name|setServices
argument_list|(
name|REMOTE_BROKER_URL
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|setDiscoveryAgent
argument_list|(
name|da
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|dnc
argument_list|)
expr_stmt|;
comment|// Before starting the local broker, intercept the task runner factory
comment|// so that the
comment|// local VMTransport dispatcher is artificially delayed.
specifier|final
name|TaskRunnerFactory
name|realTaskRunnerFactory
init|=
name|localBroker
operator|.
name|getTaskRunnerFactory
argument_list|()
decl_stmt|;
name|localBroker
operator|.
name|setTaskRunnerFactory
argument_list|(
operator|new
name|TaskRunnerFactory
argument_list|()
block|{
specifier|public
name|TaskRunner
name|createTaskRunner
parameter_list|(
name|Task
name|task
parameter_list|,
name|String
name|name
parameter_list|)
block|{
specifier|final
name|TaskRunner
name|realTaskRunner
init|=
name|realTaskRunnerFactory
operator|.
name|createTaskRunner
argument_list|(
name|task
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"ActiveMQ Connection Dispatcher: "
argument_list|)
condition|)
block|{
return|return
operator|new
name|TaskRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|realTaskRunner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|realTaskRunner
operator|.
name|shutdown
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|wakeup
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|taskRunnerDelay
argument_list|)
expr_stmt|;
name|realTaskRunner
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|realTaskRunnerFactory
operator|.
name|createTaskRunner
argument_list|(
name|task
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Start the brokers and wait for the bridge to be created; the remote
comment|// broker is started first to ensure it is available for the local
comment|// broker to connect to.
name|remoteBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for the remote broker to receive the local broker's BrokerInfo
comment|// and then verify the local broker's ID is known.
name|long
name|startTimeMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|remoteBrokerInfos
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTimeMillis
operator|)
operator|<
name|timeout
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Timed out waiting for bridge to form."
argument_list|,
name|remoteBrokerInfos
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Local broker ID is null."
argument_list|,
name|remoteBrokerInfos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBrokerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

