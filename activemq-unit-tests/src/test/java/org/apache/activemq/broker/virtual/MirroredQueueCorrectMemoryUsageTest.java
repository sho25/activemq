begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|MirroredQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|StoreUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|TempUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|util
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * This test will determine that the producer flow control does not kick in.  * The original MirroredQueue implementation was causing the queue to update  * the topic memory usage instead of the queue memory usage.  * The reason is that the message memory usage instance will not be updated  * unless it is null.  This was the case when the message was initially sent  * to the topic but then it was non-null when it was being sent to the queue.  * When the region destination was set, the associated memory usage was not  * updated to the passed queue destination and thus the memory usage of the  * topic was being updated instead.  *  * @author Claudio Corsi  */
end_comment

begin_class
specifier|public
class|class
name|MirroredQueueCorrectMemoryUsageTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MirroredQueueCorrectMemoryUsageTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|ONE_MB
init|=
literal|0x0100000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TEN_MB
init|=
name|ONE_MB
operator|*
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TWENTY_MB
init|=
name|TEN_MB
operator|*
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATED_STATIC_FOR_PERSISTENT
init|=
literal|"created.static.for.persistent"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the broker service instance....
name|BrokerService
name|broker
init|=
name|super
operator|.
name|createBroker
argument_list|()
decl_stmt|;
comment|// Create and add the mirrored queue destination interceptor ....
name|DestinationInterceptor
index|[]
name|destinationInterceptors
init|=
operator|new
name|DestinationInterceptor
index|[
literal|1
index|]
decl_stmt|;
name|MirroredQueue
name|mq
init|=
operator|new
name|MirroredQueue
argument_list|()
decl_stmt|;
name|mq
operator|.
name|setCopyMessage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mq
operator|.
name|setPrefix
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|mq
operator|.
name|setPostfix
argument_list|(
literal|".qmirror"
argument_list|)
expr_stmt|;
name|destinationInterceptors
index|[
literal|0
index|]
operator|=
name|mq
expr_stmt|;
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
comment|// Create the destination policy for the topics and queues
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PolicyEntry
argument_list|>
name|entries
init|=
operator|new
name|LinkedList
argument_list|<
name|PolicyEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|// Create Topic policy entry
name|PolicyEntry
name|policyEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|super
operator|.
name|useTopic
operator|=
literal|true
expr_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|super
operator|.
name|createDestination
argument_list|(
literal|">"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|destination
operator|.
name|isTopic
argument_list|()
argument_list|,
literal|"Created destination was not a topic"
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setProducerFlowControl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setMemoryLimit
argument_list|(
name|ONE_MB
argument_list|)
expr_stmt|;
comment|// x10
name|entries
operator|.
name|add
argument_list|(
name|policyEntry
argument_list|)
expr_stmt|;
comment|// Create Queue policy entry
name|policyEntry
operator|=
operator|new
name|PolicyEntry
argument_list|()
expr_stmt|;
name|super
operator|.
name|useTopic
operator|=
literal|false
expr_stmt|;
name|destination
operator|=
name|super
operator|.
name|createDestination
argument_list|(
name|CREATED_STATIC_FOR_PERSISTENT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|isTrue
argument_list|(
name|destination
operator|.
name|isQueue
argument_list|()
argument_list|,
literal|"Created destination was not a queue"
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setProducerFlowControl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setMemoryLimit
argument_list|(
name|TEN_MB
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|policyEntry
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setPolicyEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
comment|// Set destinations
name|broker
operator|.
name|setDestinations
argument_list|(
operator|new
name|ActiveMQDestination
index|[]
block|{
name|destination
block|}
argument_list|)
expr_stmt|;
comment|// Set system usage
name|SystemUsage
name|memoryManager
init|=
operator|new
name|SystemUsage
argument_list|()
decl_stmt|;
name|MemoryUsage
name|memoryUsage
init|=
operator|new
name|MemoryUsage
argument_list|()
decl_stmt|;
name|memoryUsage
operator|.
name|setLimit
argument_list|(
name|TEN_MB
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|setMemoryUsage
argument_list|(
name|memoryUsage
argument_list|)
expr_stmt|;
name|StoreUsage
name|storeUsage
init|=
operator|new
name|StoreUsage
argument_list|()
decl_stmt|;
name|storeUsage
operator|.
name|setLimit
argument_list|(
name|TWENTY_MB
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|setStoreUsage
argument_list|(
name|storeUsage
argument_list|)
expr_stmt|;
name|TempUsage
name|tempDiskUsage
init|=
operator|new
name|TempUsage
argument_list|()
decl_stmt|;
name|tempDiskUsage
operator|.
name|setLimit
argument_list|(
name|TEN_MB
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|setTempUsage
argument_list|(
name|tempDiskUsage
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSystemUsage
argument_list|(
name|memoryManager
argument_list|)
expr_stmt|;
comment|// Set the persistent adapter
name|KahaDBPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|persistenceAdapter
operator|.
name|setJournalMaxFileLength
argument_list|(
operator|(
name|int
operator|)
name|TEN_MB
argument_list|)
expr_stmt|;
comment|// Delete all current messages...
name|IOHelper
operator|.
name|deleteFile
argument_list|(
name|persistenceAdapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|40000
argument_list|)
specifier|public
name|void
name|testNoMemoryUsageIncreaseForTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|super
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|CREATED_STATIC_FOR_PERSISTENT
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|char
index|[]
name|m
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|m
argument_list|,
literal|'x'
argument_list|)
expr_stmt|;
comment|// create some messages that have 1k each
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|12000
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
operator|new
name|String
argument_list|(
name|m
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Sent message: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

