begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|MultiBrokersMultiClientsTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|public
specifier|static
specifier|final
name|int
name|BROKER_COUNT
init|=
literal|2
decl_stmt|;
comment|// number of brokers to network
specifier|public
specifier|static
specifier|final
name|int
name|CONSUMER_COUNT
init|=
literal|3
decl_stmt|;
comment|// consumers per broker
specifier|public
specifier|static
specifier|final
name|int
name|PRODUCER_COUNT
init|=
literal|3
decl_stmt|;
comment|// producers per broker
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10
decl_stmt|;
comment|// messages per producer
specifier|protected
name|Map
name|consumerMap
decl_stmt|;
specifier|public
name|void
name|testTopicAllConnected
parameter_list|()
throws|throws
name|Exception
block|{
name|bridgeAllBrokers
argument_list|()
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup topic destination
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|BROKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|CONSUMER_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|consumerMap
operator|.
name|put
argument_list|(
literal|"Consumer:"
operator|+
name|i
operator|+
literal|":"
operator|+
name|j
argument_list|,
name|createConsumer
argument_list|(
literal|"Broker"
operator|+
name|i
argument_list|,
name|dest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//wait for consumers to get propagated
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Send messages
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|BROKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|PRODUCER_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|sendMessages
argument_list|(
literal|"Broker"
operator|+
name|i
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Get message count
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|BROKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|CONSUMER_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|MessageIdList
name|msgs
init|=
name|getConsumerMessages
argument_list|(
literal|"Broker"
operator|+
name|i
argument_list|,
operator|(
name|MessageConsumer
operator|)
name|consumerMap
operator|.
name|get
argument_list|(
literal|"Consumer:"
operator|+
name|i
operator|+
literal|":"
operator|+
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|msgs
operator|.
name|waitForMessagesToArrive
argument_list|(
name|BROKER_COUNT
operator|*
name|PRODUCER_COUNT
operator|*
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BROKER_COUNT
operator|*
name|PRODUCER_COUNT
operator|*
name|MESSAGE_COUNT
argument_list|,
name|msgs
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testQueueAllConnected
parameter_list|()
throws|throws
name|Exception
block|{
name|bridgeAllBrokers
argument_list|()
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup topic destination
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"TEST.FOO"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Setup consumers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|BROKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|CONSUMER_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|consumerMap
operator|.
name|put
argument_list|(
literal|"Consumer:"
operator|+
name|i
operator|+
literal|":"
operator|+
name|j
argument_list|,
name|createConsumer
argument_list|(
literal|"Broker"
operator|+
name|i
argument_list|,
name|dest
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Send messages
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|BROKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|PRODUCER_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|sendMessages
argument_list|(
literal|"Broker"
operator|+
name|i
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Wait for messages to be delivered
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Get message count
name|int
name|totalMsg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|BROKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|CONSUMER_COUNT
condition|;
name|j
operator|++
control|)
block|{
name|MessageIdList
name|msgs
init|=
name|getConsumerMessages
argument_list|(
literal|"Broker"
operator|+
name|i
argument_list|,
operator|(
name|MessageConsumer
operator|)
name|consumerMap
operator|.
name|get
argument_list|(
literal|"Consumer:"
operator|+
name|i
operator|+
literal|":"
operator|+
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|totalMsg
operator|+=
name|msgs
operator|.
name|getMessageCount
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|BROKER_COUNT
operator|*
name|PRODUCER_COUNT
operator|*
name|MESSAGE_COUNT
argument_list|,
name|totalMsg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// Setup n brokers
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|BROKER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:()/Broker"
operator|+
name|i
operator|+
literal|"?persistent=false&useJmx=false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consumerMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

