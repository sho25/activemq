begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTOverlapedSubscriptionsTest
block|{
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|String
name|mqttClientUrl
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|initializeBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initializeBroker
parameter_list|(
name|boolean
name|deleteAllMessagesOnStart
parameter_list|)
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessagesOnStart
argument_list|)
expr_stmt|;
name|TransportConnector
name|connector
init|=
operator|new
name|TransportConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"mqtt://localhost:0"
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"mqtt"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|mqttClientUrl
operator|=
name|connector
operator|.
name|getPublishableConnectString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"mqtt"
argument_list|,
literal|"tcp"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMqttResubscribe
parameter_list|()
throws|throws
name|Exception
block|{
comment|// inactive durable consumer on test/1 will be left on the broker after restart
name|doTest
argument_list|(
literal|"test/1"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
name|initializeBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// new consumer on test/# will match all messages sent to the inactive sub
name|doTest
argument_list|(
literal|"test/#"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BlockingConnection
name|getConnection
parameter_list|(
name|String
name|host
parameter_list|,
name|String
name|clientId
parameter_list|)
throws|throws
name|URISyntaxException
throws|,
name|Exception
block|{
name|BlockingConnection
name|conn
decl_stmt|;
name|MQTT
name|mqttPub
init|=
operator|new
name|MQTT
argument_list|()
decl_stmt|;
name|mqttPub
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|mqttPub
operator|.
name|setConnectAttemptsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mqttPub
operator|.
name|setReconnectAttemptsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mqttPub
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|mqttPub
operator|.
name|setCleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|=
name|mqttPub
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
specifier|public
name|void
name|doTest
parameter_list|(
name|String
name|subscribe
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|payload
init|=
literal|"This is test payload"
decl_stmt|;
name|BlockingConnection
name|connectionPub
init|=
name|getConnection
argument_list|(
name|mqttClientUrl
argument_list|,
literal|"client1"
argument_list|)
decl_stmt|;
name|BlockingConnection
name|connectionSub
init|=
name|getConnection
argument_list|(
name|mqttClientUrl
argument_list|,
literal|"client2"
argument_list|)
decl_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|subscribe
argument_list|,
name|QoS
operator|.
name|values
argument_list|()
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
name|connectionSub
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
name|connectionPub
operator|.
name|publish
argument_list|(
literal|"test/1"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|receive
argument_list|(
name|connectionSub
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
comment|//Unsubscribe and resubscribe
name|connectionSub
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
name|subscribe
block|}
argument_list|)
expr_stmt|;
name|connectionSub
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
name|connectionPub
operator|.
name|publish
argument_list|(
name|subscribe
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|receive
argument_list|(
name|connectionSub
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|connectionPub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|connectionSub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|receive
parameter_list|(
name|BlockingConnection
name|connection
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|message
operator|.
name|getPayload
argument_list|()
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

