begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|protocol
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpWireFormat
operator|.
name|ResetListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpWireFormatTest
block|{
specifier|private
specifier|final
name|AmqpWireFormat
name|wireFormat
init|=
operator|new
name|AmqpWireFormat
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testWhenSaslNotAllowedNonSaslHeaderIsInvliad
parameter_list|()
block|{
name|wireFormat
operator|.
name|setAllowNonSaslConnections
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AmqpHeader
name|nonSaslHeader
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|wireFormat
operator|.
name|isHeaderValid
argument_list|(
name|nonSaslHeader
argument_list|)
argument_list|)
expr_stmt|;
name|AmqpHeader
name|saslHeader
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|saslHeader
operator|.
name|setProtocolId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wireFormat
operator|.
name|isHeaderValid
argument_list|(
name|saslHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenSaslAllowedNonSaslHeaderIsValid
parameter_list|()
block|{
name|wireFormat
operator|.
name|setAllowNonSaslConnections
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AmqpHeader
name|nonSaslHeader
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|wireFormat
operator|.
name|isHeaderValid
argument_list|(
name|nonSaslHeader
argument_list|)
argument_list|)
expr_stmt|;
name|AmqpHeader
name|saslHeader
init|=
operator|new
name|AmqpHeader
argument_list|()
decl_stmt|;
name|saslHeader
operator|.
name|setProtocolId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wireFormat
operator|.
name|isHeaderValid
argument_list|(
name|saslHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMagicResetListener
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|reset
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|wireFormat
operator|.
name|setProtocolResetListener
argument_list|(
operator|new
name|ResetListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onProtocolReset
parameter_list|()
block|{
name|reset
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|wireFormat
operator|.
name|resetMagicRead
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|reset
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

