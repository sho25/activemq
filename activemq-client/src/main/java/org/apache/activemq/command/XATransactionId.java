begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JenkinsHash
import|;
end_import

begin_comment
comment|/**  * @openwire:marshaller code="112"  *   */
end_comment

begin_class
specifier|public
class|class
name|XATransactionId
extends|extends
name|TransactionId
implements|implements
name|Xid
implements|,
name|Comparable
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|ACTIVEMQ_XA_TRANSACTION_ID
decl_stmt|;
specifier|private
name|int
name|formatId
decl_stmt|;
specifier|private
name|byte
index|[]
name|branchQualifier
decl_stmt|;
specifier|private
name|byte
index|[]
name|globalTransactionId
decl_stmt|;
specifier|private
specifier|transient
name|DataByteArrayOutputStream
name|outputStream
decl_stmt|;
specifier|private
specifier|transient
name|byte
index|[]
name|encodedXidBytes
decl_stmt|;
specifier|private
specifier|transient
name|int
name|hash
decl_stmt|;
specifier|private
specifier|transient
name|String
name|transactionKey
decl_stmt|;
specifier|private
specifier|transient
name|ArrayList
argument_list|<
name|MessageAck
argument_list|>
name|preparedAcks
decl_stmt|;
specifier|public
name|XATransactionId
parameter_list|()
block|{     }
specifier|public
name|XATransactionId
parameter_list|(
name|Xid
name|xid
parameter_list|)
block|{
name|this
operator|.
name|formatId
operator|=
name|xid
operator|.
name|getFormatId
argument_list|()
expr_stmt|;
name|this
operator|.
name|globalTransactionId
operator|=
name|xid
operator|.
name|getGlobalTransactionId
argument_list|()
expr_stmt|;
name|this
operator|.
name|branchQualifier
operator|=
name|xid
operator|.
name|getBranchQualifier
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XATransactionId
parameter_list|(
name|byte
index|[]
name|encodedBytes
parameter_list|)
throws|throws
name|IOException
block|{
name|encodedXidBytes
operator|=
name|encodedBytes
expr_stmt|;
name|initFromEncodedBytes
argument_list|()
expr_stmt|;
block|}
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
specifier|final
name|int
name|XID_PREFIX_SIZE
init|=
literal|16
decl_stmt|;
comment|//+|-,(long)lastAck,(byte)priority,(int)formatid,(short)globalLength....
specifier|private
name|void
name|initFromEncodedBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|DataByteArrayInputStream
name|inputStream
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|encodedXidBytes
argument_list|)
decl_stmt|;
name|inputStream
operator|.
name|skipBytes
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|formatId
operator|=
name|inputStream
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|int
name|globalLength
init|=
name|inputStream
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|globalTransactionId
operator|=
operator|new
name|byte
index|[
name|globalLength
index|]
expr_stmt|;
try|try
block|{
name|inputStream
operator|.
name|read
argument_list|(
name|globalTransactionId
argument_list|)
expr_stmt|;
name|branchQualifier
operator|=
operator|new
name|byte
index|[
name|inputStream
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|inputStream
operator|.
name|read
argument_list|(
name|branchQualifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|fatal
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|this
operator|+
literal|", failed to decode:"
argument_list|,
name|fatal
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|byte
index|[]
name|getEncodedXidBytes
parameter_list|()
block|{
if|if
condition|(
name|encodedXidBytes
operator|==
literal|null
condition|)
block|{
name|outputStream
operator|=
operator|new
name|DataByteArrayOutputStream
argument_list|(
name|XID_PREFIX_SIZE
operator|+
name|globalTransactionId
operator|.
name|length
operator|+
name|branchQualifier
operator|.
name|length
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|position
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|writeInt
argument_list|(
name|formatId
argument_list|)
expr_stmt|;
comment|// global length
name|outputStream
operator|.
name|writeShort
argument_list|(
name|globalTransactionId
operator|.
name|length
argument_list|)
expr_stmt|;
try|try
block|{
name|outputStream
operator|.
name|write
argument_list|(
name|globalTransactionId
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|branchQualifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|fatal
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|this
operator|+
literal|", failed to encode:"
argument_list|,
name|fatal
argument_list|)
throw|;
block|}
name|encodedXidBytes
operator|=
name|outputStream
operator|.
name|getData
argument_list|()
expr_stmt|;
block|}
return|return
name|encodedXidBytes
return|;
block|}
specifier|public
name|DataByteArrayOutputStream
name|internalOutputStream
parameter_list|()
block|{
return|return
name|outputStream
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|getTransactionKey
parameter_list|()
block|{
if|if
condition|(
name|transactionKey
operator|==
literal|null
condition|)
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"XID:["
operator|+
name|formatId
operator|+
literal|",globalId="
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|stringForm
argument_list|(
name|formatId
argument_list|,
name|globalTransactionId
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|",branchId="
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|stringForm
argument_list|(
name|formatId
argument_list|,
name|branchQualifier
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|transactionKey
operator|=
name|s
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|transactionKey
return|;
block|}
specifier|private
name|String
name|stringForm
parameter_list|(
name|int
name|format
parameter_list|,
name|byte
index|[]
name|uid
parameter_list|)
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|format
condition|)
block|{
case|case
literal|131077
case|:
comment|// arjuna
name|stringFormArj
argument_list|(
name|s
argument_list|,
name|uid
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// aries
name|stringFormDefault
argument_list|(
name|s
argument_list|,
name|uid
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|stringFormDefault
parameter_list|(
name|StringBuffer
name|s
parameter_list|,
name|byte
index|[]
name|uid
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uid
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|uid
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stringFormArj
parameter_list|(
name|StringBuffer
name|s
parameter_list|,
name|byte
index|[]
name|uid
parameter_list|)
block|{
try|try
block|{
name|DataByteArrayInputStream
name|byteArrayInputStream
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|uid
argument_list|)
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|byteArrayInputStream
operator|.
name|readLong
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|byteArrayInputStream
operator|.
name|readLong
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|byteArrayInputStream
operator|.
name|readInt
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|byteArrayInputStream
operator|.
name|readInt
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|byteArrayInputStream
operator|.
name|readInt
argument_list|()
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|stringFormDefault
argument_list|(
name|s
argument_list|,
name|uid
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getTransactionKey
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isXATransaction
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isLocalTransaction
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
name|formatId
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|globalTransactionId
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|branchQualifier
return|;
block|}
specifier|public
name|void
name|setBranchQualifier
parameter_list|(
name|byte
index|[]
name|branchQualifier
parameter_list|)
block|{
name|this
operator|.
name|branchQualifier
operator|=
name|branchQualifier
expr_stmt|;
name|this
operator|.
name|hash
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|setFormatId
parameter_list|(
name|int
name|formatId
parameter_list|)
block|{
name|this
operator|.
name|formatId
operator|=
name|formatId
expr_stmt|;
name|this
operator|.
name|hash
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|setGlobalTransactionId
parameter_list|(
name|byte
index|[]
name|globalTransactionId
parameter_list|)
block|{
name|this
operator|.
name|globalTransactionId
operator|=
name|globalTransactionId
expr_stmt|;
name|this
operator|.
name|hash
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
name|hash
operator|=
name|formatId
expr_stmt|;
name|JenkinsHash
name|jh
init|=
name|JenkinsHash
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|hash
operator|=
name|jh
operator|.
name|hash
argument_list|(
name|globalTransactionId
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|hash
operator|=
name|jh
operator|.
name|hash
argument_list|(
name|branchQualifier
argument_list|,
name|hash
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
name|hash
operator|=
literal|0xaceace
expr_stmt|;
block|}
block|}
return|return
name|hash
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|XATransactionId
operator|.
name|class
condition|)
block|{
return|return
literal|false
return|;
block|}
name|XATransactionId
name|xid
init|=
operator|(
name|XATransactionId
operator|)
name|o
decl_stmt|;
return|return
name|xid
operator|.
name|formatId
operator|==
name|formatId
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|xid
operator|.
name|globalTransactionId
argument_list|,
name|globalTransactionId
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|xid
operator|.
name|branchQualifier
argument_list|,
name|branchQualifier
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|XATransactionId
operator|.
name|class
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|XATransactionId
name|xid
init|=
operator|(
name|XATransactionId
operator|)
name|o
decl_stmt|;
return|return
name|getTransactionKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|xid
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setPreparedAcks
parameter_list|(
name|ArrayList
argument_list|<
name|MessageAck
argument_list|>
name|preparedAcks
parameter_list|)
block|{
name|this
operator|.
name|preparedAcks
operator|=
name|preparedAcks
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|MessageAck
argument_list|>
name|getPreparedAcks
parameter_list|()
block|{
return|return
name|preparedAcks
return|;
block|}
block|}
end_class

end_unit

