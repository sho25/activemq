begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_class
specifier|public
class|class
name|ByteSequence
block|{
specifier|public
name|byte
index|[]
name|data
decl_stmt|;
specifier|public
name|int
name|offset
decl_stmt|;
specifier|public
name|int
name|length
decl_stmt|;
specifier|public
name|ByteSequence
parameter_list|()
block|{     }
specifier|public
name|ByteSequence
parameter_list|(
name|byte
name|data
index|[]
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|data
operator|.
name|length
expr_stmt|;
block|}
specifier|public
name|ByteSequence
parameter_list|(
name|byte
name|data
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|int
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
specifier|public
name|int
name|remaining
parameter_list|()
block|{
return|return
name|length
operator|-
name|offset
return|;
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|void
name|setOffset
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
block|}
specifier|public
name|void
name|compact
parameter_list|()
block|{
if|if
condition|(
name|length
operator|!=
name|data
operator|.
name|length
condition|)
block|{
name|byte
name|t
index|[]
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|t
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|data
operator|=
name|t
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|length
operator|=
name|remaining
argument_list|()
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
literal|0
expr_stmt|;
block|}
name|offset
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|indexOf
parameter_list|(
name|ByteSequence
name|needle
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|int
name|max
init|=
name|length
operator|-
name|needle
operator|.
name|length
operator|-
name|offset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|pos
init|;
name|i
operator|<
name|max
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|matches
argument_list|(
name|needle
argument_list|,
name|i
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|ByteSequence
name|needle
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|needle
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|offset
operator|+
name|pos
operator|+
name|i
index|]
operator|!=
name|needle
operator|.
name|data
index|[
name|needle
operator|.
name|offset
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|byte
name|getByte
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|data
index|[
name|offset
operator|+
name|i
index|]
return|;
block|}
specifier|final
specifier|public
name|int
name|indexOf
parameter_list|(
name|byte
name|value
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|pos
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|offset
operator|+
name|i
index|]
operator|==
name|value
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|startsWith
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
if|if
condition|(
name|length
operator|-
name|offset
operator|<
name|bytes
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|offset
operator|+
name|i
index|]
operator|!=
name|bytes
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

