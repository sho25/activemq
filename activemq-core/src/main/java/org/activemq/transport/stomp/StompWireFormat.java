begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Your Corporation. All Rights Reserved.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|FlushCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Implements the<a href="http://stomp.codehaus.org/">Stomp</a> protocol.  */
end_comment

begin_class
specifier|public
class|class
name|StompWireFormat
implements|implements
name|WireFormat
block|{
specifier|static
specifier|final
name|IdGenerator
name|PACKET_IDS
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|IdGenerator
name|clientIds
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|transactionIdCounter
decl_stmt|;
specifier|private
name|int
name|version
init|=
literal|1
decl_stmt|;
specifier|private
name|CommandParser
name|commandParser
init|=
operator|new
name|CommandParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|HeaderParser
name|headerParser
init|=
operator|new
name|HeaderParser
argument_list|()
decl_stmt|;
specifier|private
name|DataInputStream
name|in
decl_stmt|;
specifier|private
name|String
name|clientId
decl_stmt|;
specifier|private
name|BlockingQueue
name|pendingReadCommands
init|=
operator|new
name|LinkedBlockingQueue
argument_list|()
decl_stmt|;
specifier|private
name|BlockingQueue
name|pendingWriteFrames
init|=
operator|new
name|LinkedBlockingQueue
argument_list|()
decl_stmt|;
specifier|private
name|List
name|receiptListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|SessionId
name|sessionId
decl_stmt|;
specifier|private
name|Map
name|subscriptions
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|List
name|ackListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|transactions
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|ConnectionId
name|connectionId
decl_stmt|;
name|void
name|addResponseListener
parameter_list|(
name|ResponseListener
name|listener
parameter_list|)
block|{
name|receiptListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Command
name|readCommand
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|Command
name|pending
init|=
operator|(
name|Command
operator|)
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|HelperWithReturn
argument_list|()
block|{
specifier|public
name|Object
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|pendingReadCommands
operator|.
name|poll
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|pending
operator|!=
literal|null
condition|)
block|{
return|return
name|pending
return|;
block|}
try|try
block|{
return|return
name|commandParser
operator|.
name|parse
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|FlushCommand
operator|.
name|COMMAND
return|;
block|}
block|}
specifier|public
name|Command
name|writeCommand
parameter_list|(
specifier|final
name|Command
name|packet
parameter_list|,
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|flushPendingFrames
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// It may have just been a flush request.
if|if
condition|(
name|packet
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|packet
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|CommandTypes
operator|.
name|RESPONSE
condition|)
block|{
assert|assert
operator|(
name|packet
operator|instanceof
name|Response
operator|)
assert|;
name|Response
name|receipt
init|=
operator|(
name|Response
operator|)
name|packet
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|receiptListeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResponseListener
name|listener
init|=
operator|(
name|ResponseListener
operator|)
name|receiptListeners
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|.
name|onResponse
argument_list|(
name|receipt
argument_list|,
name|out
argument_list|)
condition|)
block|{
name|receiptListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
if|if
condition|(
name|packet
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_TEXT_MESSAGE
condition|)
block|{
assert|assert
operator|(
name|packet
operator|instanceof
name|ActiveMQTextMessage
operator|)
assert|;
name|ActiveMQTextMessage
name|msg
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|packet
decl_stmt|;
name|Subscription
name|sub
init|=
operator|(
name|Subscription
operator|)
name|subscriptions
operator|.
name|get
argument_list|(
name|msg
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
decl_stmt|;
name|sub
operator|.
name|receive
argument_list|(
name|msg
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|packet
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_BYTES_MESSAGE
condition|)
block|{
assert|assert
operator|(
name|packet
operator|instanceof
name|ActiveMQBytesMessage
operator|)
assert|;
name|ActiveMQBytesMessage
name|msg
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|packet
decl_stmt|;
name|Subscription
name|sub
init|=
operator|(
name|Subscription
operator|)
name|subscriptions
operator|.
name|get
argument_list|(
name|msg
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
decl_stmt|;
name|sub
operator|.
name|receive
argument_list|(
name|msg
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|flushPendingFrames
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
name|byte
index|[]
name|frame
init|=
operator|(
name|byte
index|[]
operator|)
name|pendingWriteFrames
operator|.
name|poll
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
operator|==
literal|null
condition|)
return|return;
name|out
operator|.
name|write
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
name|interrupted
condition|)
do|;
block|}
specifier|private
name|void
name|sendError
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
comment|// System.err.println("sending error [" + message + "]");
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|Helper
argument_list|()
block|{
specifier|public
name|void
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pendingWriteFrames
operator|.
name|put
argument_list|(
operator|new
name|FrameBuilder
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|ERROR
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Error
operator|.
name|MESSAGE
argument_list|,
name|message
argument_list|)
operator|.
name|toFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * some transports may register their streams (e.g. Tcp)      *       * @param dataOut      * @param dataIn      */
specifier|public
name|void
name|registerTransportStreams
parameter_list|(
name|DataOutputStream
name|dataOut
parameter_list|,
name|DataInputStream
name|dataIn
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|dataIn
expr_stmt|;
block|}
comment|/**      * Some wire formats require a handshake at start-up      *       * @throws java.io.IOException      */
specifier|public
name|void
name|initiateServerSideProtocol
parameter_list|()
throws|throws
name|IOException
block|{
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|this
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|first_line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|first_line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|CONNECT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"First line does not begin with with "
operator|+
name|Stomp
operator|.
name|Commands
operator|.
name|CONNECT
argument_list|)
throw|;
block|}
name|Properties
name|headers
init|=
name|headerParser
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
comment|// if (!headers.containsKey(TTMP.Headers.Connect.LOGIN))
comment|// System.err.println("Required header [" + TTMP.Headers.Connect.LOGIN +
comment|// "] missing");
comment|// if (!headers.containsKey(TTMP.Headers.Connect.PASSCODE))
comment|// System.err.println("Required header [" +
comment|// TTMP.Headers.Connect.PASSCODE + "] missing");
comment|// allow anyone to login for now
name|String
name|login
init|=
name|headers
operator|.
name|getProperty
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connect
operator|.
name|LOGIN
argument_list|)
decl_stmt|;
name|String
name|passcode
init|=
name|headers
operator|.
name|getProperty
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connect
operator|.
name|PASSCODE
argument_list|)
decl_stmt|;
comment|// skip to end of the packet
while|while
condition|(
name|in
operator|.
name|read
argument_list|()
operator|!=
literal|0
condition|)
block|{         }
specifier|final
name|ConnectionInfo
name|info
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|clientId
operator|=
name|clientIds
operator|.
name|generateId
argument_list|()
expr_stmt|;
name|commandParser
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// info.setClientVersion(Integer.toString(getCurrentWireFormatVersion()));
specifier|final
name|short
name|commandId
init|=
name|generateCommandId
argument_list|()
decl_stmt|;
name|info
operator|.
name|setCommandId
argument_list|(
name|commandId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setUserName
argument_list|(
name|login
argument_list|)
expr_stmt|;
name|info
operator|.
name|setPassword
argument_list|(
name|passcode
argument_list|)
expr_stmt|;
comment|// info.setStartTime(System.currentTimeMillis());
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|Helper
argument_list|()
block|{
specifier|public
name|void
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pendingReadCommands
operator|.
name|put
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addResponseListener
argument_list|(
operator|new
name|ResponseListener
argument_list|()
block|{
specifier|public
name|boolean
name|onResponse
parameter_list|(
name|Response
name|receipt
parameter_list|,
name|DataOutput
name|out
parameter_list|)
block|{
if|if
condition|(
name|receipt
operator|.
name|getCorrelationId
argument_list|()
operator|!=
name|commandId
condition|)
return|return
literal|false
return|;
name|sessionId
operator|=
name|generateSessionId
argument_list|()
expr_stmt|;
specifier|final
name|SessionInfo
name|info
init|=
operator|new
name|SessionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setCommandId
argument_list|(
name|generateCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|Helper
argument_list|()
block|{
specifier|public
name|void
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pendingReadCommands
operator|.
name|put
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addResponseListener
argument_list|(
operator|new
name|ResponseListener
argument_list|()
block|{
specifier|public
name|boolean
name|onResponse
parameter_list|(
name|Response
name|receipt
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|receipt
operator|.
name|getCorrelationId
argument_list|()
operator|!=
name|commandId
condition|)
return|return
literal|false
return|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|CONNECTED
argument_list|)
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Connected
operator|.
name|SESSION
argument_list|)
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|SEPERATOR
argument_list|)
operator|.
name|append
argument_list|(
name|clientId
argument_list|)
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NEWLINE
argument_list|)
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NEWLINE
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Stomp
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new copy of this wire format so it can be used in another      * thread/context      */
specifier|public
name|WireFormat
name|copy
parameter_list|()
block|{
return|return
operator|new
name|StompWireFormat
argument_list|()
return|;
block|}
comment|/* Stuff below here is leaky stuff we don't actually need */
comment|/**      * Some wire formats require a handshake at start-up      *       * @throws java.io.IOException      */
specifier|public
name|void
name|initiateClientSideProtocol
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Not yet implemented!"
argument_list|)
throw|;
block|}
comment|/**      * Can this wireformat process packets of this version      *       * @param version      *            the version number to test      * @return true if can accept the version      */
specifier|public
name|boolean
name|canProcessWireFormatVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
return|return
name|version
operator|==
name|getCurrentWireFormatVersion
argument_list|()
return|;
block|}
comment|/**      * @return the current version of this wire format      */
specifier|public
name|int
name|getCurrentWireFormatVersion
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|/**      * @return Returns the enableCaching.      */
specifier|public
name|boolean
name|isCachingEnabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @param enableCaching      *            The enableCaching to set.      */
specifier|public
name|void
name|setCachingEnabled
parameter_list|(
name|boolean
name|enableCaching
parameter_list|)
block|{
comment|// never
block|}
comment|/**      * some wire formats will implement their own fragementation      *       * @return true unless a wire format supports it's own fragmentation      */
specifier|public
name|boolean
name|doesSupportMessageFragmentation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Some wire formats will not be able to understand compressed messages      *       * @return true unless a wire format cannot understand compression      */
specifier|public
name|boolean
name|doesSupportMessageCompression
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Writes the given package to a new datagram      *       * @param channelID      *            is the unique channel ID      * @param packet      *            is the packet to write      * @return      * @throws java.io.IOException      * @throws javax.jms.JMSException      */
specifier|public
name|DatagramPacket
name|writeCommand
parameter_list|(
name|String
name|channelID
parameter_list|,
name|Command
name|packet
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Will not be implemented"
argument_list|)
throw|;
block|}
comment|/**      * Reads the packet from the given byte[]      *       * @param bytes      * @param offset      * @param length      * @return      * @throws java.io.IOException      */
specifier|public
name|Command
name|fromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Will not be implemented"
argument_list|)
throw|;
block|}
comment|/**      * Reads the packet from the given byte[]      *       * @param bytes      * @return      * @throws java.io.IOException      */
specifier|public
name|Command
name|fromBytes
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Will not be implemented"
argument_list|)
throw|;
block|}
comment|/**      * A helper method which converts a packet into a byte array      *       * @param packet      * @return a byte array representing the packet using some wire protocol      * @throws java.io.IOException      * @throws javax.jms.JMSException      */
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|(
name|Command
name|packet
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Will not be implemented"
argument_list|)
throw|;
block|}
comment|/**      * A helper method for working with sockets where the first byte is read      * first, then the rest of the message is read.<p/> Its common when dealing      * with sockets to have different timeout semantics until the first non-zero      * byte is read of a message, after which time a zero timeout is used.      *       * @param firstByte      *            the first byte of the packet      * @param in      *            the rest of the packet      * @return      * @throws java.io.IOException      */
specifier|public
name|Command
name|readCommand
parameter_list|(
name|int
name|firstByte
parameter_list|,
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Will not be implemented"
argument_list|)
throw|;
block|}
comment|/**      * Read a packet from a Datagram packet from the given channelID. If the      * packet is from the same channel ID as it was sent then we have a      * loop-back so discard the packet      *       * @param channelID      *            is the unique channel ID      * @param dpacket      * @return the packet read from the datagram or null if it should be      *         discarded      * @throws java.io.IOException      */
specifier|public
name|Command
name|readCommand
parameter_list|(
name|String
name|channelID
parameter_list|,
name|DatagramPacket
name|dpacket
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Will not be implemented"
argument_list|)
throw|;
block|}
name|void
name|clearTransactionId
parameter_list|(
name|String
name|user_tx_id
parameter_list|)
block|{
name|this
operator|.
name|transactions
operator|.
name|remove
argument_list|(
name|user_tx_id
argument_list|)
expr_stmt|;
block|}
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|this
operator|.
name|clientId
return|;
block|}
specifier|public
name|SessionId
name|getSessionId
parameter_list|()
block|{
return|return
name|sessionId
return|;
block|}
specifier|public
name|void
name|addSubscription
parameter_list|(
name|Subscription
name|s
parameter_list|)
block|{
if|if
condition|(
name|subscriptions
operator|.
name|containsKey
argument_list|(
name|s
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|Subscription
name|old
init|=
operator|(
name|Subscription
operator|)
name|subscriptions
operator|.
name|get
argument_list|(
name|s
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|Command
name|p
init|=
name|old
operator|.
name|close
argument_list|()
decl_stmt|;
name|enqueueCommand
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|subscriptions
operator|.
name|put
argument_list|(
name|s
operator|.
name|getDestination
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subscriptions
operator|.
name|put
argument_list|(
name|s
operator|.
name|getDestination
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|enqueueCommand
parameter_list|(
specifier|final
name|Command
name|ack
parameter_list|)
block|{
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|Helper
argument_list|()
block|{
specifier|public
name|void
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pendingReadCommands
operator|.
name|put
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Subscription
name|getSubscriptionFor
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
operator|(
name|Subscription
operator|)
name|subscriptions
operator|.
name|get
argument_list|(
name|destination
argument_list|)
return|;
block|}
specifier|public
name|void
name|addAckListener
parameter_list|(
name|AckListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|ackListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
name|getAckListeners
parameter_list|()
block|{
return|return
name|ackListeners
return|;
block|}
specifier|public
name|TransactionId
name|getTransactionId
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|TransactionId
operator|)
name|transactions
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|TransactionId
name|registerTransactionId
parameter_list|(
name|String
name|user_tx_id
parameter_list|,
name|int
name|tx_id
parameter_list|)
block|{
name|LocalTransactionId
name|transactionId
init|=
operator|new
name|LocalTransactionId
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|tx_id
argument_list|)
decl_stmt|;
name|transactions
operator|.
name|put
argument_list|(
name|user_tx_id
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
return|return
name|transactionId
return|;
block|}
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|ConnectionId
name|getConnectionId
parameter_list|()
block|{
return|return
name|connectionId
return|;
block|}
specifier|public
name|void
name|setConnectionId
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|)
block|{
name|this
operator|.
name|connectionId
operator|=
name|connectionId
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|int
name|generateTransactionId
parameter_list|()
block|{
return|return
operator|++
name|transactionIdCounter
return|;
block|}
specifier|public
name|ConsumerId
name|createConsumerId
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
specifier|public
name|MessageId
name|generateMessageId
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
comment|// TODO static???
specifier|public
specifier|static
name|short
name|generateCommandId
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
specifier|public
name|SessionId
name|generateSessionId
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
specifier|public
name|Packet
name|marshal
parameter_list|(
name|Object
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Packet
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|marshal
parameter_list|(
name|Object
name|arg0
parameter_list|,
name|DataOutputStream
name|arg1
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|DataInputStream
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

