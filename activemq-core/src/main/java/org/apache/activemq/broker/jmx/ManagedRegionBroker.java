begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|OpenTypeSupport
operator|.
name|OpenTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedRegionBroker
extends|extends
name|RegionBroker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ManagedRegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MBeanServer
name|mbeanServer
decl_stmt|;
specifier|private
specifier|final
name|ObjectName
name|brokerObjectName
decl_stmt|;
specifier|private
specifier|final
name|Map
name|topics
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|queues
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|temporaryQueues
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|temporaryTopics
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|queueSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|topicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|durableTopicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|inactiveDurableTopicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|temporaryQueueSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|temporaryTopicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|subscriptionKeys
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|subscriptionMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
name|registeredMBeans
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|()
decl_stmt|;
comment|/* This is the first broker in the broker interceptor chain. */
specifier|private
name|Broker
name|contextBroker
decl_stmt|;
specifier|public
name|ManagedRegionBroker
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|MBeanServer
name|mbeanServer
parameter_list|,
name|ObjectName
name|brokerObjectName
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|UsageManager
name|memoryManager
parameter_list|,
name|PersistenceAdapter
name|adapter
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|brokerService
argument_list|,
name|taskRunnerFactory
argument_list|,
name|memoryManager
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|this
operator|.
name|mbeanServer
operator|=
name|mbeanServer
expr_stmt|;
name|this
operator|.
name|brokerObjectName
operator|=
name|brokerObjectName
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// build all existing durable subscriptions
name|buildExistingSubscriptions
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
block|{
name|super
operator|.
name|doStop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
comment|// lets remove any mbeans not yet removed
for|for
control|(
name|Iterator
name|iter
init|=
name|registeredMBeans
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"The MBean: "
operator|+
name|name
operator|+
literal|" is no longer registered with JMX"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|registeredMBeans
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Region
name|createQueueRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|PersistenceAdapter
name|adapter
parameter_list|)
block|{
return|return
operator|new
name|ManagedQueueRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|adapter
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createTempQueueRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
return|return
operator|new
name|ManagedTempQueueRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createTempTopicRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
return|return
operator|new
name|ManagedTempTopicRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createTopicRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|PersistenceAdapter
name|adapter
parameter_list|)
block|{
return|return
operator|new
name|ManagedTopicRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|adapter
argument_list|)
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|ActiveMQDestination
name|destName
parameter_list|,
name|Destination
name|destination
parameter_list|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|destName
argument_list|)
decl_stmt|;
name|DestinationView
name|view
decl_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
name|view
operator|=
operator|new
name|QueueView
argument_list|(
name|this
argument_list|,
operator|(
name|Queue
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|=
operator|new
name|TopicView
argument_list|(
name|this
argument_list|,
operator|(
name|Topic
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
name|registerDestination
argument_list|(
name|objectName
argument_list|,
name|destName
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to register destination "
operator|+
name|destName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|ActiveMQDestination
name|destName
parameter_list|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|destName
argument_list|)
decl_stmt|;
name|unregisterDestination
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to unregister "
operator|+
name|destName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|registerSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|)
block|{
name|Hashtable
name|map
init|=
name|brokerObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|String
name|name
init|=
literal|""
decl_stmt|;
name|SubscriptionKey
name|key
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubcriptionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|name
operator|=
name|key
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|+=
literal|"."
operator|+
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|brokerObjectName
operator|.
name|getDomain
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Subscription,"
operator|+
literal|"active=true,"
operator|+
literal|"name="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|name
argument_list|)
operator|+
literal|""
argument_list|)
decl_stmt|;
name|SubscriptionView
name|view
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|view
operator|=
operator|new
name|DurableSubscriptionView
argument_list|(
name|this
argument_list|,
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sub
operator|instanceof
name|TopicSubscription
condition|)
block|{
name|view
operator|=
operator|new
name|TopicSubscriptionView
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
operator|(
name|TopicSubscription
operator|)
name|sub
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|=
operator|new
name|SubscriptionView
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
name|registerSubscription
argument_list|(
name|objectName
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
argument_list|,
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|subscriptionMap
operator|.
name|put
argument_list|(
name|sub
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to register subscription "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregisterSubscription
parameter_list|(
name|Subscription
name|sub
parameter_list|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|subscriptionMap
operator|.
name|get
argument_list|(
name|sub
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|unregisterSubscription
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to unregister subscription "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|registerDestination
parameter_list|(
name|ObjectName
name|key
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|DestinationView
name|view
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dest
operator|.
name|isQueue
argument_list|()
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryQueues
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queues
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryTopics
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|topics
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
name|registeredMBeans
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unregisterDestination
parameter_list|(
name|ObjectName
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|topics
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|queues
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryQueues
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryTopics
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerSubscription
parameter_list|(
name|ObjectName
name|key
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|,
name|SubscriptionKey
name|subscriptionKey
parameter_list|,
name|SubscriptionView
name|view
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|dest
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|isQueue
argument_list|()
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryQueueSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queueSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryTopicSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|info
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|durableTopicSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
comment|// unregister any inactive durable subs
try|try
block|{
name|ObjectName
name|inactiveName
init|=
operator|(
name|ObjectName
operator|)
name|subscriptionKeys
operator|.
name|get
argument_list|(
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|inactiveName
operator|!=
literal|null
condition|)
block|{
name|inactiveDurableTopicSubscribers
operator|.
name|remove
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to unregister inactive durable subscriber: "
operator|+
name|subscriptionKey
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|topicSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|registeredMBeans
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unregisterSubscription
parameter_list|(
name|ObjectName
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|queueSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|topicSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|inactiveDurableTopicSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryQueueSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryTopicSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|DurableSubscriptionView
name|view
init|=
operator|(
name|DurableSubscriptionView
operator|)
name|durableTopicSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
comment|// need to put this back in the inactive list
name|SubscriptionKey
name|subscriptionKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|view
operator|.
name|getClientId
argument_list|()
argument_list|,
name|view
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
name|SubscriptionInfo
name|info
init|=
operator|new
name|SubscriptionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|subscriptionKey
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSubcriptionName
argument_list|(
name|subscriptionKey
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addInactiveSubscription
argument_list|(
name|subscriptionKey
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|buildExistingSubscriptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
name|subscriptions
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Set
name|destinations
init|=
name|adaptor
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|destinations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|destinations
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ActiveMQDestination
name|dest
init|=
operator|(
name|ActiveMQDestination
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|TopicMessageStore
name|store
init|=
name|adaptor
operator|.
name|createTopicMessageStore
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|dest
argument_list|)
decl_stmt|;
name|SubscriptionInfo
index|[]
name|infos
init|=
name|store
operator|.
name|getAllSubscriptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SubscriptionInfo
name|info
init|=
name|infos
index|[
name|i
index|]
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Restoring durable subscription: "
operator|+
name|infos
argument_list|)
expr_stmt|;
name|SubscriptionKey
name|key
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|subscriptions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subscriptions
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|SubscriptionKey
name|key
init|=
operator|(
name|SubscriptionKey
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SubscriptionInfo
name|info
init|=
operator|(
name|SubscriptionInfo
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|addInactiveSubscription
argument_list|(
name|key
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addInactiveSubscription
parameter_list|(
name|SubscriptionKey
name|key
parameter_list|,
name|SubscriptionInfo
name|info
parameter_list|)
block|{
name|Hashtable
name|map
init|=
name|brokerObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|brokerObjectName
operator|.
name|getDomain
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Subscription,"
operator|+
literal|"active=false,"
operator|+
literal|"name="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|""
argument_list|)
decl_stmt|;
name|SubscriptionView
name|view
init|=
operator|new
name|InactiveDurableSubscriptionView
argument_list|(
name|this
argument_list|,
name|key
operator|.
name|getClientId
argument_list|()
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|registeredMBeans
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|inactiveDurableTopicSubscribers
operator|.
name|put
argument_list|(
name|objectName
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|subscriptionKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to register subscription "
operator|+
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CompositeData
index|[]
name|browse
parameter_list|(
name|SubscriptionView
name|view
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|List
name|messages
init|=
name|getSubscriberMessages
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|CompositeData
name|c
index|[]
init|=
operator|new
name|CompositeData
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|c
index|[
name|i
index|]
operator|=
name|OpenTypeSupport
operator|.
name|convert
argument_list|(
operator|(
name|Message
operator|)
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
specifier|public
name|TabularData
name|browseAsTable
parameter_list|(
name|SubscriptionView
name|view
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|OpenTypeFactory
name|factory
init|=
name|OpenTypeSupport
operator|.
name|getFactory
argument_list|(
name|ActiveMQMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
name|messages
init|=
name|getSubscriberMessages
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|factory
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"MessageList"
argument_list|,
literal|"MessageList"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"JMSMessageID"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|rc
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rc
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|factory
operator|.
name|getFields
argument_list|(
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|protected
name|List
name|getSubscriberMessages
parameter_list|(
name|SubscriptionView
name|view
parameter_list|)
block|{
specifier|final
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|TopicMessageStore
name|store
init|=
name|adaptor
operator|.
name|createTopicMessageStore
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|store
operator|.
name|recover
argument_list|(
operator|new
name|MessageRecoveryListener
argument_list|()
block|{
specifier|public
name|void
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|result
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recoverMessageReference
parameter_list|(
name|String
name|messageReference
parameter_list|)
throws|throws
name|Exception
block|{}
specifier|public
name|void
name|finished
parameter_list|()
block|{}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to browse messages for Subscription "
operator|+
name|view
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTopics
parameter_list|()
block|{
name|Set
name|set
init|=
name|topics
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getQueues
parameter_list|()
block|{
name|Set
name|set
init|=
name|queues
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryTopics
parameter_list|()
block|{
name|Set
name|set
init|=
name|temporaryTopics
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryQueues
parameter_list|()
block|{
name|Set
name|set
init|=
name|temporaryQueues
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTopicSubscribers
parameter_list|()
block|{
name|Set
name|set
init|=
name|topicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getDurableTopicSubscribers
parameter_list|()
block|{
name|Set
name|set
init|=
name|durableTopicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getQueueSubscribers
parameter_list|()
block|{
name|Set
name|set
init|=
name|queueSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryTopicSubscribers
parameter_list|()
block|{
name|Set
name|set
init|=
name|temporaryTopicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryQueueSubscribers
parameter_list|()
block|{
name|Set
name|set
init|=
name|temporaryQueueSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getInactiveDurableTopicSubscribers
parameter_list|()
block|{
name|Set
name|set
init|=
name|inactiveDurableTopicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
operator|(
name|ObjectName
index|[]
operator|)
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Broker
name|getContextBroker
parameter_list|()
block|{
return|return
name|contextBroker
return|;
block|}
specifier|public
name|void
name|setContextBroker
parameter_list|(
name|Broker
name|contextBroker
parameter_list|)
block|{
name|this
operator|.
name|contextBroker
operator|=
name|contextBroker
expr_stmt|;
block|}
specifier|protected
name|ObjectName
name|createObjectName
parameter_list|(
name|ActiveMQDestination
name|destName
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
comment|// Build the object name for the destination
name|Hashtable
name|map
init|=
name|brokerObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|brokerObjectName
operator|.
name|getDomain
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|destName
operator|.
name|getDestinationTypeAsString
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Destination="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|destName
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|objectName
return|;
block|}
block|}
end_class

end_unit

