begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2003-2004 The Apache Software Foundation  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|net
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedChannelException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SelectionKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * The SelectorManager will manage one Selector and the thread that checks the  * selector.  *   * We may need to consider running more than one thread to check the selector if  * servicing the selector takes too long.  *   * @version $Rev: 46019 $ $Date: 2004-09-14 05:56:06 -0400 (Tue, 14 Sep 2004) $  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|NIOAsyncChannelSelectorManager
block|{
specifier|static
specifier|private
name|Executor
name|selectorExecutor
init|=
name|ChannelFactory
operator|.
name|DEFAULT_EXECUTOR
decl_stmt|;
specifier|static
specifier|private
name|Executor
name|channelExecutor
init|=
name|ChannelFactory
operator|.
name|DEFAULT_EXECUTOR
decl_stmt|;
specifier|static
specifier|private
name|LinkedList
name|freeManagers
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|static
specifier|private
name|LinkedList
name|fullManagers
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CHANNELS_PER_SELECTOR
init|=
literal|50
decl_stmt|;
static|static
block|{
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|os
operator|.
name|startsWith
argument_list|(
literal|"Linux"
argument_list|)
condition|)
block|{
name|channelExecutor
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|SelectorManagerListener
block|{
specifier|public
name|void
name|onSelect
parameter_list|(
name|SocketChannelAsyncChannelSelection
name|selector
parameter_list|)
function_decl|;
block|}
specifier|final
specifier|public
class|class
name|SocketChannelAsyncChannelSelection
block|{
specifier|private
specifier|final
name|SelectionKey
name|key
decl_stmt|;
specifier|private
specifier|final
name|SelectorManagerListener
name|listener
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
name|int
name|interest
decl_stmt|;
specifier|private
name|SocketChannelAsyncChannelSelection
parameter_list|(
name|SocketChannel
name|socketChannel
parameter_list|,
name|SelectorManagerListener
name|listener
parameter_list|)
throws|throws
name|ClosedChannelException
block|{
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|socketChannel
operator|.
name|register
argument_list|(
name|selector
argument_list|,
literal|0
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|incrementUseCounter
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setInterestOps
parameter_list|(
name|int
name|ops
parameter_list|)
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|interest
operator|=
name|ops
expr_stmt|;
name|enable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|enable
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|key
operator|.
name|interestOps
argument_list|(
name|interest
argument_list|)
expr_stmt|;
name|selector
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|disable
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|key
operator|.
name|interestOps
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
return|return;
name|key
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|decrementUseCounter
argument_list|()
expr_stmt|;
name|selector
operator|.
name|wakeup
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|onSelect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|listener
operator|.
name|onSelect
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWritable
parameter_list|()
block|{
return|return
name|key
operator|.
name|isWritable
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isReadable
parameter_list|()
block|{
return|return
name|key
operator|.
name|isReadable
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|synchronized
specifier|static
name|SocketChannelAsyncChannelSelection
name|register
parameter_list|(
name|SocketChannel
name|socketChannel
parameter_list|,
name|SelectorManagerListener
name|listener
parameter_list|)
throws|throws
name|IOException
block|{
name|NIOAsyncChannelSelectorManager
name|manager
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|freeManagers
init|)
block|{
if|if
condition|(
name|freeManagers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|manager
operator|=
operator|(
name|NIOAsyncChannelSelectorManager
operator|)
name|freeManagers
operator|.
name|getFirst
argument_list|()
expr_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
block|{
name|manager
operator|=
operator|new
name|NIOAsyncChannelSelectorManager
argument_list|()
expr_stmt|;
name|freeManagers
operator|.
name|addFirst
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
comment|// That manager may have filled up.
name|SocketChannelAsyncChannelSelection
name|selection
init|=
name|manager
operator|.
expr|new
name|SocketChannelAsyncChannelSelection
argument_list|(
name|socketChannel
argument_list|,
name|listener
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|.
name|useCounter
operator|>=
name|MAX_CHANNELS_PER_SELECTOR
condition|)
block|{
name|freeManagers
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|fullManagers
operator|.
name|addLast
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
return|return
name|selection
return|;
block|}
block|}
specifier|public
specifier|synchronized
specifier|static
name|void
name|setSelectorExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|NIOAsyncChannelSelectorManager
operator|.
name|selectorExecutor
operator|=
name|executor
expr_stmt|;
block|}
specifier|public
specifier|synchronized
specifier|static
name|void
name|setChannelExecutor
parameter_list|(
name|Executor
name|executor
parameter_list|)
block|{
name|NIOAsyncChannelSelectorManager
operator|.
name|channelExecutor
operator|=
name|executor
expr_stmt|;
block|}
specifier|private
class|class
name|SelectorWorker
implements|implements
name|Runnable
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|origName
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
literal|"Selector Worker: "
operator|+
name|getId
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|selector
operator|.
name|select
argument_list|(
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
operator|!
name|isRunning
argument_list|()
condition|)
return|return;
comment|// Get a java.util.Set containing the SelectionKey objects
comment|// for all channels that are ready for I/O.
name|Set
name|keys
init|=
name|selector
operator|.
name|selectedKeys
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|SelectionKey
name|key
init|=
operator|(
name|SelectionKey
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
specifier|final
name|SocketChannelAsyncChannelSelection
name|s
init|=
operator|(
name|SocketChannelAsyncChannelSelection
operator|)
name|key
operator|.
name|attachment
argument_list|()
decl_stmt|;
name|s
operator|.
name|disable
argument_list|()
expr_stmt|;
comment|// Kick off another thread to find newly selected keys while we process the
comment|// currently selected keys
name|channelExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|s
operator|.
name|onSelect
argument_list|()
expr_stmt|;
name|s
operator|.
name|enable
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ActiveIO unexpected error: "
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setName
argument_list|(
name|origName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The selector used to wait for non-blocking events.      */
specifier|private
name|Selector
name|selector
decl_stmt|;
comment|/**      * How many SelectionKeys does the selector have active.      */
specifier|private
name|int
name|useCounter
decl_stmt|;
specifier|private
name|int
name|id
init|=
name|getNextId
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|nextId
decl_stmt|;
specifier|private
name|NIOAsyncChannelSelectorManager
parameter_list|()
throws|throws
name|IOException
block|{
name|selector
operator|=
name|Selector
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|private
specifier|static
name|int
name|getNextId
parameter_list|()
block|{
return|return
name|nextId
operator|++
return|;
block|}
specifier|private
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|synchronized
specifier|private
name|void
name|incrementUseCounter
parameter_list|()
block|{
name|useCounter
operator|++
expr_stmt|;
if|if
condition|(
name|useCounter
operator|==
literal|1
condition|)
block|{
name|selectorExecutor
operator|.
name|execute
argument_list|(
operator|new
name|SelectorWorker
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|private
name|void
name|decrementUseCounter
parameter_list|()
block|{
name|useCounter
operator|--
expr_stmt|;
synchronized|synchronized
init|(
name|freeManagers
init|)
block|{
if|if
condition|(
name|useCounter
operator|==
literal|0
condition|)
block|{
name|freeManagers
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|useCounter
operator|<
name|MAX_CHANNELS_PER_SELECTOR
condition|)
block|{
name|fullManagers
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|freeManagers
operator|.
name|addLast
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|synchronized
specifier|private
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|useCounter
operator|>
literal|0
return|;
block|}
block|}
end_class

end_unit

