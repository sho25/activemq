begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|BaseDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|Usage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This broker filter handles tracking the state of the broker for purposes of  * publishing advisory messages to advisory consumers.  */
end_comment

begin_class
specifier|public
class|class
name|AdvisoryBroker
extends|extends
name|BrokerFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AdvisoryBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionInfo
argument_list|>
name|connections
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|consumersLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerInfo
argument_list|>
name|consumers
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * This is a set to track all of the virtual destinations that have been added to the broker so      * they can be easily referenced later.      */
specifier|protected
specifier|final
name|Set
argument_list|<
name|VirtualDestination
argument_list|>
name|virtualDestinations
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|<
name|VirtualDestination
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * This is a map to track all consumers that exist on the virtual destination so that we can fire      * an advisory later when they go away to remove the demand.      */
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|ConsumerInfo
argument_list|,
name|VirtualDestination
argument_list|>
name|virtualDestinationConsumers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * This is a map to track unique demand for the existence of a virtual destination so we make sure      * we don't send duplicate advisories.      */
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|VirtualConsumerPair
argument_list|,
name|ConsumerInfo
argument_list|>
name|brokerConsumerDests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|ProducerId
argument_list|,
name|ProducerInfo
argument_list|>
name|producers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ProducerId
argument_list|,
name|ProducerInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|DestinationInfo
argument_list|>
name|destinations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|DestinationInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentMap
argument_list|<
name|BrokerInfo
argument_list|,
name|ActiveMQMessage
argument_list|>
name|networkBridges
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|BrokerInfo
argument_list|,
name|ActiveMQMessage
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ProducerId
name|advisoryProducerId
init|=
operator|new
name|ProducerId
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
name|VirtualDestinationMatcher
name|virtualDestinationMatcher
init|=
operator|new
name|DestinationFilterVirtualDestinationMatcher
argument_list|()
decl_stmt|;
specifier|public
name|AdvisoryBroker
parameter_list|(
name|Broker
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|advisoryProducerId
operator|.
name|setConnectionId
argument_list|(
name|ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getConnectionAdvisoryTopic
argument_list|()
decl_stmt|;
comment|// do not distribute passwords in advisory messages. usernames okay
name|ConnectionInfo
name|copy
init|=
name|info
operator|.
name|copy
argument_list|()
decl_stmt|;
name|copy
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|connections
operator|.
name|put
argument_list|(
name|copy
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|Subscription
name|answer
init|=
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
decl_stmt|;
comment|// Don't advise advisory topics.
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|consumers
operator|.
name|put
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|//check if this is a consumer on a destination that matches a virtual destination
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isUseVirtualDestSubs
argument_list|()
condition|)
block|{
for|for
control|(
name|VirtualDestination
name|virtualDestination
range|:
name|virtualDestinations
control|)
block|{
if|if
condition|(
name|virtualDestinationMatcher
operator|.
name|matches
argument_list|(
name|virtualDestination
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|fireVirtualDestinationAddAdvisory
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// We need to replay all the previously collected state objects
comment|// for this newly added consumer.
if|if
condition|(
name|AdvisorySupport
operator|.
name|isConnectionAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
comment|// Replay the connections.
for|for
control|(
name|Iterator
argument_list|<
name|ConnectionInfo
argument_list|>
name|iter
init|=
name|connections
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConnectionInfo
name|value
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getConnectionAdvisoryTopic
argument_list|()
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|value
argument_list|,
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// We check here whether the Destination is Temporary Destination specific or not since we
comment|// can avoid sending advisory messages to the consumer if it only wants Temporary Destination
comment|// notifications.  If its not just temporary destination related destinations then we have
comment|// to send them all, a composite destination could want both.
if|if
condition|(
name|AdvisorySupport
operator|.
name|isTempDestinationAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
comment|// Replay the temporary destinations.
for|for
control|(
name|DestinationInfo
name|destination
range|:
name|destinations
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|destination
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getDestinationAdvisoryTopic
argument_list|(
name|destination
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|destination
argument_list|,
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|AdvisorySupport
operator|.
name|isDestinationAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
comment|// Replay all the destinations.
for|for
control|(
name|DestinationInfo
name|destination
range|:
name|destinations
operator|.
name|values
argument_list|()
control|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getDestinationAdvisoryTopic
argument_list|(
name|destination
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|destination
argument_list|,
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Replay the producers.
if|if
condition|(
name|AdvisorySupport
operator|.
name|isProducerAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ProducerInfo
argument_list|>
name|iter
init|=
name|producers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProducerInfo
name|value
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getProducerAdvisoryTopic
argument_list|(
name|value
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|fireProducerAdvisory
argument_list|(
name|context
argument_list|,
name|value
operator|.
name|getDestination
argument_list|()
argument_list|,
name|topic
argument_list|,
name|value
argument_list|,
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Replay the consumers.
if|if
condition|(
name|AdvisorySupport
operator|.
name|isConsumerAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ConsumerInfo
argument_list|>
name|iter
init|=
name|consumers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConsumerInfo
name|value
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
name|value
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|value
operator|.
name|getDestination
argument_list|()
argument_list|,
name|topic
argument_list|,
name|value
argument_list|,
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Replay the virtual destination consumers.
if|if
condition|(
name|AdvisorySupport
operator|.
name|isVirtualDestinationConsumerAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ConsumerInfo
argument_list|>
name|iter
init|=
name|virtualDestinationConsumers
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConsumerInfo
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getVirtualDestinationConsumerAdvisoryTopic
argument_list|(
name|key
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|key
operator|.
name|getDestination
argument_list|()
argument_list|,
name|topic
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Replay network bridges
if|if
condition|(
name|AdvisorySupport
operator|.
name|isNetworkBridgeAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|BrokerInfo
argument_list|>
name|iter
init|=
name|networkBridges
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BrokerInfo
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getNetworkBridgeAdvisoryTopic
argument_list|()
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|key
argument_list|,
literal|null
argument_list|,
name|networkBridges
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|//Verify destination is either non-null or that we want to advise anonymous producers on null destination
comment|//Don't advise advisory topics.
if|if
condition|(
operator|(
name|info
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
operator|||
name|getBrokerService
argument_list|()
operator|.
name|isAnonymousProducerAdvisorySupport
argument_list|()
operator|)
operator|&&
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getProducerAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|fireProducerAdvisory
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|producers
operator|.
name|put
argument_list|(
name|info
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Destination
name|addDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|Exception
block|{
name|Destination
name|answer
init|=
name|super
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|create
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|destination
argument_list|)
condition|)
block|{
comment|//for queues, create demand if isUseVirtualDestSubsOnCreation is true
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isUseVirtualDestSubsOnCreation
argument_list|()
operator|&&
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
comment|//check if this new destination matches a virtual destination that exists
for|for
control|(
name|VirtualDestination
name|virtualDestination
range|:
name|virtualDestinations
control|)
block|{
if|if
condition|(
name|virtualDestinationMatcher
operator|.
name|matches
argument_list|(
name|virtualDestination
argument_list|,
name|destination
argument_list|)
condition|)
block|{
name|fireVirtualDestinationAddAdvisory
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|destination
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|(
name|context
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|DestinationInfo
name|previous
init|=
name|destinations
operator|.
name|putIfAbsent
argument_list|(
name|destination
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getDestinationAdvisoryTopic
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|next
operator|.
name|addDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|DestinationInfo
name|previous
init|=
name|destinations
operator|.
name|putIfAbsent
argument_list|(
name|destination
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getDestinationAdvisoryTopic
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|DestinationInfo
name|info
init|=
name|destinations
operator|.
name|remove
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
comment|//on destination removal, remove all demand if using virtual dest subs
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isUseVirtualDestSubs
argument_list|()
condition|)
block|{
for|for
control|(
name|ConsumerInfo
name|consumerInfo
range|:
name|virtualDestinationConsumers
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|//find all consumers for this virtual destination
name|VirtualDestination
name|virtualDestination
init|=
name|virtualDestinationConsumers
operator|.
name|get
argument_list|(
name|consumerInfo
argument_list|)
decl_stmt|;
comment|//find a consumer that matches this virtualDest and destination
if|if
condition|(
name|virtualDestinationMatcher
operator|.
name|matches
argument_list|(
name|virtualDestination
argument_list|,
name|destination
argument_list|)
condition|)
block|{
comment|//in case of multiple matches
name|VirtualConsumerPair
name|key
init|=
operator|new
name|VirtualConsumerPair
argument_list|(
name|virtualDestination
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|i
init|=
name|brokerConsumerDests
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerInfo
operator|.
name|equals
argument_list|(
name|i
argument_list|)
operator|&&
name|brokerConsumerDests
operator|.
name|remove
argument_list|(
name|key
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual consumer pair removed: {} for consumer: {} "
argument_list|,
name|key
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|fireVirtualDestinationRemoveAdvisory
argument_list|(
name|context
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|// ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
name|info
operator|=
name|info
operator|.
name|copy
argument_list|()
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|REMOVE_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getDestinationAdvisoryTopic
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|ActiveMQTopic
index|[]
name|advisoryDestinations
init|=
name|AdvisorySupport
operator|.
name|getAllDestinationAdvisoryTopics
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|ActiveMQTopic
name|advisoryDestination
range|:
name|advisoryDestinations
control|)
block|{
try|try
block|{
name|next
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|advisoryDestination
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expectedIfDestinationDidNotExistYet
parameter_list|)
block|{                 }
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|destInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|removeDestinationInfo
argument_list|(
name|context
argument_list|,
name|destInfo
argument_list|)
expr_stmt|;
name|DestinationInfo
name|info
init|=
name|destinations
operator|.
name|remove
argument_list|(
name|destInfo
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
comment|// ensure we don't modify (and loose/overwrite) an in-flight add advisory, so duplicate
name|info
operator|=
name|info
operator|.
name|copy
argument_list|()
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|destInfo
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|REMOVE_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getDestinationAdvisoryTopic
argument_list|(
name|destInfo
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|ActiveMQTopic
index|[]
name|advisoryDestinations
init|=
name|AdvisorySupport
operator|.
name|getAllDestinationAdvisoryTopics
argument_list|(
name|destInfo
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ActiveMQTopic
name|advisoryDestination
range|:
name|advisoryDestinations
control|)
block|{
try|try
block|{
name|next
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|advisoryDestination
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expectedIfDestinationDidNotExistYet
parameter_list|)
block|{                 }
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|removeConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getConnectionAdvisoryTopic
argument_list|()
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|info
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|connections
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// Don't advise advisory topics.
name|ActiveMQDestination
name|dest
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|consumers
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
comment|//remove the demand for this consumer if it matches a virtual destination
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isUseVirtualDestSubs
argument_list|()
condition|)
block|{
name|fireVirtualDestinationRemoveAdvisory
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dest
operator|.
name|isTemporary
argument_list|()
operator|||
name|destinations
operator|.
name|containsKey
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
name|topic
argument_list|,
name|info
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|RemoveSubscriptionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|SubscriptionKey
name|key
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|info
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionBroker
name|regionBroker
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|RegionBroker
condition|)
block|{
name|regionBroker
operator|=
operator|(
name|RegionBroker
operator|)
name|next
expr_stmt|;
block|}
else|else
block|{
name|BrokerService
name|service
init|=
name|next
operator|.
name|getBrokerService
argument_list|()
decl_stmt|;
name|regionBroker
operator|=
operator|(
name|RegionBroker
operator|)
name|service
operator|.
name|getRegionBroker
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|regionBroker
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cannot locate a RegionBroker instance to pass along the removeSubscription call"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No RegionBroker found."
argument_list|)
throw|;
block|}
name|DurableTopicSubscription
name|sub
init|=
operator|(
operator|(
name|TopicRegion
operator|)
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
operator|)
operator|.
name|getDurableSubscription
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|super
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"We cannot send an advisory message for a durable sub removal when we don't know about the durable sub"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ActiveMQDestination
name|dest
init|=
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
decl_stmt|;
comment|// Don't advise advisory topics.
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getConsumerAdvisoryTopic
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|removeProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|//Verify destination is either non-null or that we want to advise anonymous producers on null destination
comment|//Don't advise advisory topics.
name|ActiveMQDestination
name|dest
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|dest
operator|!=
literal|null
operator|||
name|getBrokerService
argument_list|()
operator|.
name|isAnonymousProducerAdvisorySupport
argument_list|()
operator|)
operator|&&
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getProducerAdvisoryTopic
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|producers
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
operator|||
operator|!
name|dest
operator|.
name|isTemporary
argument_list|()
operator|||
name|destinations
operator|.
name|containsKey
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|fireProducerAdvisory
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
name|topic
argument_list|,
name|info
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageExpired
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|,
name|Subscription
name|subscription
parameter_list|)
block|{
name|super
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|messageReference
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|messageReference
operator|.
name|isAdvisory
argument_list|()
condition|)
block|{
name|BaseDestination
name|baseDestination
init|=
operator|(
name|BaseDestination
operator|)
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getExpiredMessageTopic
argument_list|(
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|payload
init|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseDestination
operator|.
name|isIncludeBodyForAdvisory
argument_list|()
condition|)
block|{
name|payload
operator|.
name|clearBody
argument_list|()
expr_stmt|;
block|}
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_MESSAGE_ID
argument_list|,
name|payload
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|payload
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"expired"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageConsumed
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|)
block|{
name|super
operator|.
name|messageConsumed
argument_list|(
name|context
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|messageReference
operator|.
name|isAdvisory
argument_list|()
condition|)
block|{
name|BaseDestination
name|baseDestination
init|=
operator|(
name|BaseDestination
operator|)
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getMessageConsumedAdvisoryTopic
argument_list|(
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|payload
init|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseDestination
operator|.
name|isIncludeBodyForAdvisory
argument_list|()
condition|)
block|{
name|payload
operator|.
name|clearBody
argument_list|()
expr_stmt|;
block|}
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_MESSAGE_ID
argument_list|,
name|payload
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_DESTINATION
argument_list|,
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|payload
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"consumed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageDelivered
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|)
block|{
name|super
operator|.
name|messageDelivered
argument_list|(
name|context
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|messageReference
operator|.
name|isAdvisory
argument_list|()
condition|)
block|{
name|BaseDestination
name|baseDestination
init|=
operator|(
name|BaseDestination
operator|)
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getMessageDeliveredAdvisoryTopic
argument_list|(
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|payload
init|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseDestination
operator|.
name|isIncludeBodyForAdvisory
argument_list|()
condition|)
block|{
name|payload
operator|.
name|clearBody
argument_list|()
expr_stmt|;
block|}
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_MESSAGE_ID
argument_list|,
name|payload
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_DESTINATION
argument_list|,
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|payload
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"delivered"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageDiscarded
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|)
block|{
name|super
operator|.
name|messageDiscarded
argument_list|(
name|context
argument_list|,
name|sub
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|messageReference
operator|.
name|isAdvisory
argument_list|()
condition|)
block|{
name|BaseDestination
name|baseDestination
init|=
operator|(
name|BaseDestination
operator|)
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getMessageDiscardedAdvisoryTopic
argument_list|(
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|payload
init|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseDestination
operator|.
name|isIncludeBodyForAdvisory
argument_list|()
condition|)
block|{
name|payload
operator|.
name|clearBody
argument_list|()
expr_stmt|;
block|}
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|sub
operator|instanceof
name|TopicSubscription
condition|)
block|{
name|advisoryMessage
operator|.
name|setIntProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_DISCARDED_COUNT
argument_list|,
operator|(
operator|(
name|TopicSubscription
operator|)
name|sub
operator|)
operator|.
name|discarded
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_MESSAGE_ID
argument_list|,
name|payload
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_CONSUMER_ID
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_DESTINATION
argument_list|,
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|payload
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"discarded"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|slowConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|Subscription
name|subs
parameter_list|)
block|{
name|super
operator|.
name|slowConsumer
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|subs
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getSlowConsumerAdvisoryTopic
argument_list|(
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_CONSUMER_ID
argument_list|,
name|subs
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|subs
operator|.
name|getConsumerInfo
argument_list|()
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"slow consumer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|fastProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|producerInfo
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|super
operator|.
name|fastProducer
argument_list|(
name|context
argument_list|,
name|producerInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getFastProducerAdvisoryTopic
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_PRODUCER_ID
argument_list|,
name|producerInfo
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|producerInfo
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"fast producer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|IdGenerator
name|connectionIdGenerator
init|=
operator|new
name|IdGenerator
argument_list|(
literal|"advisory"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|sessionIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|virtualDestinationAdded
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|VirtualDestination
name|virtualDestination
parameter_list|)
block|{
name|super
operator|.
name|virtualDestinationAdded
argument_list|(
name|context
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
if|if
condition|(
name|virtualDestinations
operator|.
name|add
argument_list|(
name|virtualDestination
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual destination added: {}"
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Don't advise advisory topics.
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|virtualDestination
operator|.
name|getVirtualDestination
argument_list|()
argument_list|)
condition|)
block|{
comment|//create demand for consumers on virtual destinations
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|//loop through existing destinations to see if any match this newly
comment|//created virtual destination
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isUseVirtualDestSubsOnCreation
argument_list|()
condition|)
block|{
comment|//for matches that are a queue, fire an advisory for demand
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|destinations
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
if|if
condition|(
name|virtualDestinationMatcher
operator|.
name|matches
argument_list|(
name|virtualDestination
argument_list|,
name|destination
argument_list|)
condition|)
block|{
name|fireVirtualDestinationAddAdvisory
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|destination
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//loop through existing consumers to see if any of them are consuming on a destination
comment|//that matches the new virtual destination
for|for
control|(
name|Iterator
argument_list|<
name|ConsumerInfo
argument_list|>
name|iter
init|=
name|consumers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConsumerInfo
name|info
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|virtualDestinationMatcher
operator|.
name|matches
argument_list|(
name|virtualDestination
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|fireVirtualDestinationAddAdvisory
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"virtualDestinationAdded"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|fireVirtualDestinationAddAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|,
name|ActiveMQDestination
name|activeMQDest
parameter_list|,
name|VirtualDestination
name|virtualDestination
parameter_list|)
throws|throws
name|Exception
block|{
comment|//if no consumer info, we need to create one - this is the case when an advisory is fired
comment|//because of the existence of a destination matching a virtual destination
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
comment|//store the virtual destination and the activeMQDestination as a pair so that we can keep track
comment|//of all matching forwarded destinations that caused demand
name|VirtualConsumerPair
name|pair
init|=
operator|new
name|VirtualConsumerPair
argument_list|(
name|virtualDestination
argument_list|,
name|activeMQDest
argument_list|)
decl_stmt|;
if|if
condition|(
name|brokerConsumerDests
operator|.
name|get
argument_list|(
name|pair
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|connectionIdGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
name|SessionId
name|sessionId
init|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
name|sessionIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|ConsumerId
name|consumerId
init|=
operator|new
name|ConsumerId
argument_list|(
name|sessionId
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|=
operator|new
name|ConsumerInfo
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
if|if
condition|(
name|brokerConsumerDests
operator|.
name|putIfAbsent
argument_list|(
name|pair
argument_list|,
name|info
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual consumer pair added: {} for consumer: {} "
argument_list|,
name|pair
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|setConsumerInfoVirtualDest
argument_list|(
name|info
argument_list|,
name|virtualDestination
argument_list|,
name|activeMQDest
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getVirtualDestinationConsumerAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|virtualDestinationConsumers
operator|.
name|putIfAbsent
argument_list|(
name|info
argument_list|,
name|virtualDestination
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual consumer added: {}, for virtual destination: {}"
argument_list|,
name|info
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//this is the case of a real consumer coming online
block|}
else|else
block|{
name|info
operator|=
name|info
operator|.
name|copy
argument_list|()
expr_stmt|;
name|setConsumerInfoVirtualDest
argument_list|(
name|info
argument_list|,
name|virtualDestination
argument_list|,
name|activeMQDest
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getVirtualDestinationConsumerAdvisoryTopic
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|virtualDestinationConsumers
operator|.
name|putIfAbsent
argument_list|(
name|info
argument_list|,
name|virtualDestination
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual consumer added: {}, for virtual destination: {}"
argument_list|,
name|info
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|topic
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Sets the virtual destination on the ConsumerInfo      * If this is a VirtualTopic then the destination used will be the actual topic subscribed      * to in order to track demand properly      *      * @param info      * @param virtualDestination      * @param activeMQDest      */
specifier|private
name|void
name|setConsumerInfoVirtualDest
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|,
name|VirtualDestination
name|virtualDestination
parameter_list|,
name|ActiveMQDestination
name|activeMQDest
parameter_list|)
block|{
name|info
operator|.
name|setDestination
argument_list|(
name|virtualDestination
operator|.
name|getVirtualDestination
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|virtualDestination
operator|instanceof
name|VirtualTopic
condition|)
block|{
name|VirtualTopic
name|vt
init|=
operator|(
name|VirtualTopic
operator|)
name|virtualDestination
decl_stmt|;
name|String
name|prefix
init|=
name|vt
operator|.
name|getPrefix
argument_list|()
operator|!=
literal|null
condition|?
name|vt
operator|.
name|getPrefix
argument_list|()
else|:
literal|""
decl_stmt|;
name|String
name|postfix
init|=
name|vt
operator|.
name|getPostfix
argument_list|()
operator|!=
literal|null
condition|?
name|vt
operator|.
name|getPostfix
argument_list|()
else|:
literal|""
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|prefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|postfix
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|postfix
operator|=
name|postfix
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|postfix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ActiveMQDestination
name|prefixDestination
init|=
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
operator|new
name|ActiveMQTopic
argument_list|(
name|prefix
argument_list|)
else|:
literal|null
decl_stmt|;
name|ActiveMQDestination
name|postfixDestination
init|=
name|postfix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
operator|new
name|ActiveMQTopic
argument_list|(
name|postfix
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
index|[]
name|prefixPaths
init|=
name|prefixDestination
operator|!=
literal|null
condition|?
name|prefixDestination
operator|.
name|getDestinationPaths
argument_list|()
else|:
operator|new
name|String
index|[]
block|{}
decl_stmt|;
name|String
index|[]
name|activeMQDestPaths
init|=
name|activeMQDest
operator|.
name|getDestinationPaths
argument_list|()
decl_stmt|;
name|String
index|[]
name|postfixPaths
init|=
name|postfixDestination
operator|!=
literal|null
condition|?
name|postfixDestination
operator|.
name|getDestinationPaths
argument_list|()
else|:
operator|new
name|String
index|[]
block|{}
decl_stmt|;
comment|//sanity check
if|if
condition|(
name|activeMQDestPaths
operator|.
name|length
operator|>
name|prefixPaths
operator|.
name|length
operator|+
name|postfixPaths
operator|.
name|length
condition|)
block|{
name|String
index|[]
name|topicPath
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|activeMQDestPaths
argument_list|,
literal|0
operator|+
name|prefixPaths
operator|.
name|length
argument_list|,
name|activeMQDestPaths
operator|.
name|length
operator|-
name|postfixPaths
operator|.
name|length
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|newTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|DestinationPath
operator|.
name|toString
argument_list|(
name|topicPath
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|newTopic
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|virtualDestinationRemoved
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|VirtualDestination
name|virtualDestination
parameter_list|)
block|{
name|super
operator|.
name|virtualDestinationRemoved
argument_list|(
name|context
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
if|if
condition|(
name|virtualDestinations
operator|.
name|remove
argument_list|(
name|virtualDestination
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual destination removed: {}"
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
try|try
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// remove the demand created by the addition of the virtual destination
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isUseVirtualDestSubsOnCreation
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|virtualDestination
operator|.
name|getVirtualDestination
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|virtualDestinationConsumers
operator|.
name|keySet
argument_list|()
control|)
block|{
comment|//find all consumers for this virtual destination
if|if
condition|(
name|virtualDestinationConsumers
operator|.
name|get
argument_list|(
name|info
argument_list|)
operator|.
name|equals
argument_list|(
name|virtualDestination
argument_list|)
condition|)
block|{
name|fireVirtualDestinationRemoveAdvisory
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|//check consumers created for the existence of a destination to see if they
comment|//match the consumerinfo and clean up
for|for
control|(
name|VirtualConsumerPair
name|activeMQDest
range|:
name|brokerConsumerDests
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ConsumerInfo
name|i
init|=
name|brokerConsumerDests
operator|.
name|get
argument_list|(
name|activeMQDest
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|equals
argument_list|(
name|i
argument_list|)
operator|&&
name|brokerConsumerDests
operator|.
name|remove
argument_list|(
name|activeMQDest
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual consumer pair removed: {} for consumer: {} "
argument_list|,
name|activeMQDest
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"virtualDestinationAdded"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|fireVirtualDestinationRemoveAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|VirtualDestination
name|virtualDestination
init|=
name|virtualDestinationConsumers
operator|.
name|remove
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|virtualDestination
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Virtual consumer removed: {}, for virtual destination: {}"
argument_list|,
name|info
argument_list|,
name|virtualDestination
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getVirtualDestinationConsumerAdvisoryTopic
argument_list|(
name|virtualDestination
operator|.
name|getVirtualDestination
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dest
operator|.
name|isTemporary
argument_list|()
operator|||
name|destinations
operator|.
name|containsKey
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|dest
argument_list|,
name|topic
argument_list|,
name|info
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|isFull
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|Usage
argument_list|<
name|?
argument_list|>
name|usage
parameter_list|)
block|{
name|super
operator|.
name|isFull
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|usage
argument_list|)
expr_stmt|;
if|if
condition|(
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getFullAdvisoryTopic
argument_list|(
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_USAGE_NAME
argument_list|,
name|usage
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setLongProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_USAGE_COUNT
argument_list|,
name|usage
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"is full"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nowMasterBroker
parameter_list|()
block|{
name|super
operator|.
name|nowMasterBroker
argument_list|()
expr_stmt|;
try|try
block|{
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getMasterBrokerAdvisoryTopic
argument_list|()
decl_stmt|;
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSecurityContext
argument_list|(
name|SecurityContext
operator|.
name|BROKER_SECURITY_CONTEXT
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|getBrokerService
argument_list|()
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"now master broker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sendToDeadLetterQueue
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|,
name|Subscription
name|subscription
parameter_list|,
name|Throwable
name|poisonCause
parameter_list|)
block|{
name|boolean
name|wasDLQd
init|=
name|super
operator|.
name|sendToDeadLetterQueue
argument_list|(
name|context
argument_list|,
name|messageReference
argument_list|,
name|subscription
argument_list|,
name|poisonCause
argument_list|)
decl_stmt|;
if|if
condition|(
name|wasDLQd
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|messageReference
operator|.
name|isAdvisory
argument_list|()
condition|)
block|{
name|BaseDestination
name|baseDestination
init|=
operator|(
name|BaseDestination
operator|)
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|getRegionDestination
argument_list|()
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getMessageDLQdAdvisoryTopic
argument_list|(
name|baseDestination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|payload
init|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseDestination
operator|.
name|isIncludeBodyForAdvisory
argument_list|()
condition|)
block|{
name|payload
operator|.
name|clearBody
argument_list|()
expr_stmt|;
block|}
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"add to DLQ"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|wasDLQd
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|networkBridgeStarted
parameter_list|(
name|BrokerInfo
name|brokerInfo
parameter_list|,
name|boolean
name|createdByDuplex
parameter_list|,
name|String
name|remoteIp
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|brokerInfo
operator|!=
literal|null
condition|)
block|{
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setBooleanProperty
argument_list|(
literal|"started"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setBooleanProperty
argument_list|(
literal|"createdByDuplex"
argument_list|,
name|createdByDuplex
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
literal|"remoteIp"
argument_list|,
name|remoteIp
argument_list|)
expr_stmt|;
name|networkBridges
operator|.
name|putIfAbsent
argument_list|(
name|brokerInfo
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getNetworkBridgeAdvisoryTopic
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSecurityContext
argument_list|(
name|SecurityContext
operator|.
name|BROKER_SECURITY_CONTEXT
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|getBrokerService
argument_list|()
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|brokerInfo
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"network bridge started"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|networkBridgeStopped
parameter_list|(
name|BrokerInfo
name|brokerInfo
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|brokerInfo
operator|!=
literal|null
condition|)
block|{
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|advisoryMessage
operator|.
name|setBooleanProperty
argument_list|(
literal|"started"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|networkBridges
operator|.
name|remove
argument_list|(
name|brokerInfo
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
name|AdvisorySupport
operator|.
name|getNetworkBridgeAdvisoryTopic
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSecurityContext
argument_list|(
name|SecurityContext
operator|.
name|BROKER_SECURITY_CONTEXT
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|getBrokerService
argument_list|()
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|brokerInfo
argument_list|,
literal|null
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleFireFailure
argument_list|(
literal|"network bridge stopped"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|handleFireFailure
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to fire {} advisory, reason: {}"
argument_list|,
name|message
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} detail: {}"
argument_list|,
name|message
argument_list|,
name|cause
argument_list|,
name|cause
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQTopic
name|topic
parameter_list|,
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|command
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQTopic
name|topic
parameter_list|,
name|Command
name|command
parameter_list|,
name|ConsumerId
name|targetConsumerId
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|command
argument_list|,
name|targetConsumerId
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireConsumerAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|consumerDestination
parameter_list|,
name|ActiveMQTopic
name|topic
parameter_list|,
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|fireConsumerAdvisory
argument_list|(
name|context
argument_list|,
name|consumerDestination
argument_list|,
name|topic
argument_list|,
name|command
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireConsumerAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|consumerDestination
parameter_list|,
name|ActiveMQTopic
name|topic
parameter_list|,
name|Command
name|command
parameter_list|,
name|ConsumerId
name|targetConsumerId
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Destination
argument_list|>
name|set
init|=
name|getDestinations
argument_list|(
name|consumerDestination
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Destination
name|dest
range|:
name|set
control|)
block|{
name|count
operator|+=
name|dest
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
block|}
name|advisoryMessage
operator|.
name|setIntProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_CONSUMER_COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|command
argument_list|,
name|targetConsumerId
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireProducerAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|producerDestination
parameter_list|,
name|ActiveMQTopic
name|topic
parameter_list|,
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|fireProducerAdvisory
argument_list|(
name|context
argument_list|,
name|producerDestination
argument_list|,
name|topic
argument_list|,
name|command
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|fireProducerAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|producerDestination
parameter_list|,
name|ActiveMQTopic
name|topic
parameter_list|,
name|Command
name|command
parameter_list|,
name|ConsumerId
name|targetConsumerId
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQMessage
name|advisoryMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|producerDestination
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Destination
argument_list|>
name|set
init|=
name|getDestinations
argument_list|(
name|producerDestination
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Destination
name|dest
range|:
name|set
control|)
block|{
name|count
operator|+=
name|dest
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getProducers
argument_list|()
operator|.
name|getCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|advisoryMessage
operator|.
name|setIntProperty
argument_list|(
literal|"producerCount"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|fireAdvisory
argument_list|(
name|context
argument_list|,
name|topic
argument_list|,
name|command
argument_list|,
name|targetConsumerId
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fireAdvisory
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQTopic
name|topic
parameter_list|,
name|Command
name|command
parameter_list|,
name|ConsumerId
name|targetConsumerId
parameter_list|,
name|ActiveMQMessage
name|advisoryMessage
parameter_list|)
throws|throws
name|Exception
block|{
comment|//set properties
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_NAME
argument_list|,
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|getBrokerId
argument_list|()
operator|!=
literal|null
condition|?
name|getBrokerId
argument_list|()
operator|.
name|getValue
argument_list|()
else|:
literal|"NOT_SET"
decl_stmt|;
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_ID
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|getBrokerService
argument_list|()
operator|.
name|getVmConnectorURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|//try and find the URL on the transport connector and use if it exists else
comment|//try and find a default URL
if|if
condition|(
name|context
operator|.
name|getConnector
argument_list|()
operator|instanceof
name|TransportConnector
operator|&&
operator|(
operator|(
name|TransportConnector
operator|)
name|context
operator|.
name|getConnector
argument_list|()
operator|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
operator|(
operator|(
name|TransportConnector
operator|)
name|context
operator|.
name|getConnector
argument_list|()
operator|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|getDefaultSocketURIString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|getBrokerService
argument_list|()
operator|.
name|getDefaultSocketURIString
argument_list|()
expr_stmt|;
block|}
name|advisoryMessage
operator|.
name|setStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_ORIGIN_BROKER_URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|//set the data structure
name|advisoryMessage
operator|.
name|setDataStructure
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setType
argument_list|(
name|AdvisorySupport
operator|.
name|ADIVSORY_MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|advisoryProducerId
argument_list|,
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setTargetConsumerId
argument_list|(
name|targetConsumerId
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setDestination
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setResponseRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|advisoryMessage
operator|.
name|setProducerId
argument_list|(
name|advisoryProducerId
argument_list|)
expr_stmt|;
name|boolean
name|originalFlowControl
init|=
name|context
operator|.
name|isProducerFlowControl
argument_list|()
decl_stmt|;
specifier|final
name|ProducerBrokerExchange
name|producerExchange
init|=
operator|new
name|ProducerBrokerExchange
argument_list|()
decl_stmt|;
name|producerExchange
operator|.
name|setConnectionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setMutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setProducerState
argument_list|(
operator|new
name|ProducerState
argument_list|(
operator|new
name|ProducerInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|next
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|advisoryMessage
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|setProducerFlowControl
argument_list|(
name|originalFlowControl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionInfo
argument_list|>
name|getAdvisoryConnections
parameter_list|()
block|{
return|return
name|connections
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ConsumerInfo
argument_list|>
name|getAdvisoryConsumers
parameter_list|()
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|ConsumerInfo
argument_list|>
argument_list|(
name|consumers
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|ProducerId
argument_list|,
name|ProducerInfo
argument_list|>
name|getAdvisoryProducers
parameter_list|()
block|{
return|return
name|producers
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|DestinationInfo
argument_list|>
name|getAdvisoryDestinations
parameter_list|()
block|{
return|return
name|destinations
return|;
block|}
specifier|public
name|ConcurrentMap
argument_list|<
name|ConsumerInfo
argument_list|,
name|VirtualDestination
argument_list|>
name|getVirtualDestinationConsumers
parameter_list|()
block|{
return|return
name|virtualDestinationConsumers
return|;
block|}
specifier|private
class|class
name|VirtualConsumerPair
block|{
specifier|private
specifier|final
name|VirtualDestination
name|virtualDestination
decl_stmt|;
comment|//destination that matches this virtualDestination as part target
comment|//this is so we can keep track of more than one destination that might
comment|//match the virtualDestination and cause demand
specifier|private
specifier|final
name|ActiveMQDestination
name|activeMQDestination
decl_stmt|;
specifier|public
name|VirtualConsumerPair
parameter_list|(
name|VirtualDestination
name|virtualDestination
parameter_list|,
name|ActiveMQDestination
name|activeMQDestination
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|virtualDestination
operator|=
name|virtualDestination
expr_stmt|;
name|this
operator|.
name|activeMQDestination
operator|=
name|activeMQDestination
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
name|getOuterType
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|activeMQDestination
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|activeMQDestination
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|virtualDestination
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|virtualDestination
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|VirtualConsumerPair
name|other
init|=
operator|(
name|VirtualConsumerPair
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|!
name|getOuterType
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getOuterType
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|activeMQDestination
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|activeMQDestination
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|activeMQDestination
operator|.
name|equals
argument_list|(
name|other
operator|.
name|activeMQDestination
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|virtualDestination
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|virtualDestination
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|virtualDestination
operator|.
name|equals
argument_list|(
name|other
operator|.
name|virtualDestination
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"VirtualConsumerPair [virtualDestination="
operator|+
name|virtualDestination
operator|+
literal|", activeMQDestination="
operator|+
name|activeMQDestination
operator|+
literal|"]"
return|;
block|}
specifier|private
name|AdvisoryBroker
name|getOuterType
parameter_list|()
block|{
return|return
name|AdvisoryBroker
operator|.
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

