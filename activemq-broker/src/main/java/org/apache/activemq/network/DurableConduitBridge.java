begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Consolidates subscriptions  */
end_comment

begin_class
specifier|public
class|class
name|DurableConduitBridge
extends|extends
name|ConduitBridge
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableConduitBridge
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"DurableConduitBridge:"
operator|+
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|"->"
operator|+
name|getRemoteBrokerName
argument_list|()
return|;
block|}
comment|/**      * Constructor      *      * @param configuration      *      * @param localBroker      * @param remoteBroker      */
specifier|public
name|DurableConduitBridge
parameter_list|(
name|NetworkBridgeConfiguration
name|configuration
parameter_list|,
name|Transport
name|localBroker
parameter_list|,
name|Transport
name|remoteBroker
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|,
name|localBroker
argument_list|,
name|remoteBroker
argument_list|)
expr_stmt|;
block|}
comment|/**      * Subscriptions for these destinations are always created      *      */
annotation|@
name|Override
specifier|protected
name|void
name|setupStaticDestinations
parameter_list|()
block|{
name|super
operator|.
name|setupStaticDestinations
argument_list|()
expr_stmt|;
name|ActiveMQDestination
index|[]
name|dests
init|=
name|configuration
operator|.
name|isDynamicOnly
argument_list|()
condition|?
literal|null
else|:
name|durableDestinations
decl_stmt|;
if|if
condition|(
name|dests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|dests
control|)
block|{
if|if
condition|(
name|isPermissableDestination
argument_list|(
name|dest
argument_list|)
operator|&&
operator|!
name|doesConsumerExist
argument_list|(
name|dest
argument_list|)
condition|)
block|{
try|try
block|{
comment|//Filtering by non-empty subscriptions, see AMQ-5875
if|if
condition|(
name|dest
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|TopicRegion
name|topicRegion
init|=
operator|(
name|TopicRegion
operator|)
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
decl_stmt|;
name|String
name|candidateSubName
init|=
name|getSubscriberName
argument_list|(
name|dest
argument_list|)
decl_stmt|;
for|for
control|(
name|Subscription
name|subscription
range|:
name|topicRegion
operator|.
name|getDurableSubscriptions
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|subName
init|=
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|subName
operator|!=
literal|null
operator|&&
name|subName
operator|.
name|equals
argument_list|(
name|candidateSubName
argument_list|)
condition|)
block|{
name|DemandSubscription
name|sub
init|=
name|createDemandSubscription
argument_list|(
name|dest
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setSubscriptionName
argument_list|(
name|getSubscriberName
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setStaticallyIncluded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addSubscription
argument_list|(
name|sub
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add static destination {}"
argument_list|,
name|dest
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Forwarding messages for durable destination: {}"
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DemandSubscription
name|createDemandSubscription
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|addToAlreadyInterestedConsumers
argument_list|(
name|info
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
comment|// don't want this subscription added
block|}
comment|//add our original id to ourselves
name|info
operator|.
name|addNetworkConsumerId
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|isDurable
argument_list|()
condition|)
block|{
comment|// set the subscriber name to something reproducible
name|info
operator|.
name|setSubscriptionName
argument_list|(
name|getSubscriberName
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and override the consumerId with something unique so that it won't
comment|// be removed if the durable subscriber (at the other end) goes away
name|info
operator|.
name|setConsumerId
argument_list|(
operator|new
name|ConsumerId
argument_list|(
name|localSessionInfo
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setSelector
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|doCreateDemandSubscription
argument_list|(
name|info
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getSubscriberName
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|)
block|{
name|String
name|subscriberName
init|=
name|DURABLE_SUB_PREFIX
operator|+
name|configuration
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|"_"
operator|+
name|dest
operator|.
name|getPhysicalName
argument_list|()
decl_stmt|;
return|return
name|subscriberName
return|;
block|}
specifier|protected
name|boolean
name|doesConsumerExist
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|)
block|{
name|DestinationFilter
name|filter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|dest
argument_list|)
decl_stmt|;
for|for
control|(
name|DemandSubscription
name|ds
range|:
name|subscriptionMapByLocalId
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|matches
argument_list|(
name|ds
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

