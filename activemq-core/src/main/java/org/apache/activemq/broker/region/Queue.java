begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|PendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|StoreQueueCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|VMPendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupHashBucketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupMapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|DeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|DispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|RoundRobinDispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SharedDeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|BooleanExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|selector
operator|.
name|SelectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Valve
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|BrokerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * The Queue is a List of MessageEntry objects that are dispatched to matching  * subscriptions.  *   * @version $Revision: 1.28 $  */
end_comment

begin_class
specifier|public
class|class
name|Queue
implements|implements
name|Destination
implements|,
name|Task
block|{
specifier|private
specifier|final
name|Log
name|log
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|private
specifier|final
name|List
name|consumers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Valve
name|dispatchValve
init|=
operator|new
name|Valve
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|UsageManager
name|usageManager
decl_stmt|;
specifier|private
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
operator|new
name|DestinationStatistics
argument_list|()
decl_stmt|;
specifier|private
name|PendingMessageCursor
name|messages
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
name|pagedInMessages
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|private
name|LockOwner
name|exclusiveOwner
decl_stmt|;
specifier|private
name|MessageGroupMap
name|messageGroupOwners
decl_stmt|;
specifier|private
name|int
name|garbageSize
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|garbageSizeBeforeCollection
init|=
literal|1000
decl_stmt|;
specifier|private
name|DispatchPolicy
name|dispatchPolicy
init|=
operator|new
name|RoundRobinDispatchPolicy
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MessageStore
name|store
decl_stmt|;
specifier|private
name|DeadLetterStrategy
name|deadLetterStrategy
init|=
operator|new
name|SharedDeadLetterStrategy
argument_list|()
decl_stmt|;
specifier|private
name|MessageGroupMapFactory
name|messageGroupMapFactory
init|=
operator|new
name|MessageGroupHashBucketFactory
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maximumPagedInMessages
init|=
name|garbageSizeBeforeCollection
operator|*
literal|2
decl_stmt|;
specifier|private
specifier|final
name|MessageEvaluationContext
name|queueMsgConext
init|=
operator|new
name|MessageEvaluationContext
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|exclusiveLockMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|doDispatchMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|TaskRunner
name|taskRunner
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|final
name|Broker
name|broker
decl_stmt|;
specifier|public
name|Queue
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
specifier|final
name|UsageManager
name|memoryManager
parameter_list|,
name|MessageStore
name|store
parameter_list|,
name|DestinationStatistics
name|parentStats
parameter_list|,
name|TaskRunnerFactory
name|taskFactory
parameter_list|,
name|Store
name|tmpStore
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|usageManager
operator|=
operator|new
name|UsageManager
argument_list|(
name|memoryManager
argument_list|,
name|destination
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|usageManager
operator|.
name|setUsagePortion
argument_list|(
literal|1.0f
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
if|if
condition|(
name|destination
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|this
operator|.
name|messages
operator|=
operator|new
name|VMPendingMessageCursor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|messages
operator|=
operator|new
name|StoreQueueCursor
argument_list|(
name|this
argument_list|,
name|tmpStore
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|taskRunner
operator|=
name|taskFactory
operator|.
name|createTaskRunner
argument_list|(
name|this
argument_list|,
literal|"Queue  "
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let the store know what usage manager we are using so that he can
comment|// flush messages to disk
comment|// when usage gets high.
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|setUsageManager
argument_list|(
name|usageManager
argument_list|)
expr_stmt|;
block|}
comment|//let's copy the enabled property from the parent DestinationStatistics
name|this
operator|.
name|destinationStatistics
operator|.
name|setEnabled
argument_list|(
name|parentStats
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|setParent
argument_list|(
name|parentStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|log
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
comment|// Restore the persistent messages.
name|messages
operator|.
name|setUsageManager
argument_list|(
name|getUsageManager
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|messages
operator|.
name|isRecoveryRequired
argument_list|()
condition|)
block|{
name|store
operator|.
name|recover
argument_list|(
operator|new
name|MessageRecoveryListener
argument_list|()
block|{
specifier|public
name|void
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
comment|// Message could have expired while it was being loaded..
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|createConnectionContext
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
return|return;
block|}
name|message
operator|.
name|setRegionDestination
argument_list|(
name|Queue
operator|.
name|this
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|messages
init|)
block|{
try|try
block|{
name|messages
operator|.
name|addMessageLast
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|fatal
argument_list|(
literal|"Failed to add message to cursor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recoverMessageReference
parameter_list|(
name|MessageId
name|messageReference
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should not be called."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|finished
parameter_list|()
block|{                     }
specifier|public
name|boolean
name|hasSpace
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Lock a node      *       * @param node      * @param lockOwner      * @return true if can be locked      * @see org.apache.activemq.broker.region.Destination#lock(org.apache.activemq.broker.region.MessageReference,      *      org.apache.activemq.broker.region.LockOwner)      */
specifier|public
name|boolean
name|lock
parameter_list|(
name|MessageReference
name|node
parameter_list|,
name|LockOwner
name|lockOwner
parameter_list|)
block|{
synchronized|synchronized
init|(
name|exclusiveLockMutex
init|)
block|{
if|if
condition|(
name|exclusiveOwner
operator|==
name|lockOwner
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|exclusiveOwner
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|addSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|)
throws|throws
name|Exception
block|{
name|sub
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|maximumPagedInMessages
operator|+=
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPrefetchSize
argument_list|()
expr_stmt|;
name|MessageEvaluationContext
name|msgContext
init|=
name|context
operator|.
name|getMessageEvaluationContext
argument_list|()
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isExclusive
argument_list|()
condition|)
block|{
name|LockOwner
name|owner
init|=
operator|(
name|LockOwner
operator|)
name|sub
decl_stmt|;
if|if
condition|(
name|exclusiveOwner
operator|==
literal|null
condition|)
block|{
name|exclusiveOwner
operator|=
name|owner
expr_stmt|;
block|}
else|else
block|{
comment|// switch the owner if the priority is higher.
if|if
condition|(
name|owner
operator|.
name|getLockPriority
argument_list|()
operator|>
name|exclusiveOwner
operator|.
name|getLockPriority
argument_list|()
condition|)
block|{
name|exclusiveOwner
operator|=
name|owner
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// page in messages
name|doPageIn
argument_list|()
expr_stmt|;
comment|// synchronize with dispatch method so that no new messages are sent
comment|// while
comment|// setting up a subscription. avoid out of order messages,
comment|// duplicates
comment|// etc.
name|dispatchValve
operator|.
name|turnOff
argument_list|()
expr_stmt|;
name|msgContext
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
comment|// Add all the matching messages in the queue to the
comment|// subscription.
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueMessageReference
name|node
init|=
operator|(
name|QueueMessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isDropped
argument_list|()
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|msgContext
operator|.
name|setMessageReference
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|matches
argument_list|(
name|node
argument_list|,
name|msgContext
argument_list|)
condition|)
block|{
name|sub
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not load message: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|msgContext
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dispatchValve
operator|.
name|turnOn
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|)
throws|throws
name|Exception
block|{
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|maximumPagedInMessages
operator|-=
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPrefetchSize
argument_list|()
expr_stmt|;
comment|// synchronize with dispatch method so that no new messages are sent
comment|// while
comment|// removing up a subscription.
name|dispatchValve
operator|.
name|turnOff
argument_list|()
expr_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|consumers
init|)
block|{
name|consumers
operator|.
name|remove
argument_list|(
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isExclusive
argument_list|()
condition|)
block|{
name|LockOwner
name|owner
init|=
operator|(
name|LockOwner
operator|)
name|sub
decl_stmt|;
comment|// Did we loose the exclusive owner??
if|if
condition|(
name|exclusiveOwner
operator|==
name|owner
condition|)
block|{
comment|// Find the exclusive consumer with the higest Lock
comment|// Priority.
name|exclusiveOwner
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|consumers
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subscription
name|s
init|=
operator|(
name|Subscription
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|LockOwner
name|so
init|=
operator|(
name|LockOwner
operator|)
name|s
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isExclusive
argument_list|()
operator|&&
operator|(
name|exclusiveOwner
operator|==
literal|null
operator|||
name|so
operator|.
name|getLockPriority
argument_list|()
operator|>
name|exclusiveOwner
operator|.
name|getLockPriority
argument_list|()
operator|)
condition|)
name|exclusiveOwner
operator|=
name|so
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|messages
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
block|}
name|sub
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|boolean
name|wasExclusiveOwner
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exclusiveOwner
operator|==
name|sub
condition|)
block|{
name|exclusiveOwner
operator|=
literal|null
expr_stmt|;
name|wasExclusiveOwner
operator|=
literal|true
expr_stmt|;
block|}
name|ConsumerId
name|consumerId
init|=
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
decl_stmt|;
name|MessageGroupSet
name|ownedGroups
init|=
name|getMessageGroupOwners
argument_list|()
operator|.
name|removeConsumer
argument_list|(
name|consumerId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isBrowser
argument_list|()
condition|)
block|{
name|MessageEvaluationContext
name|msgContext
init|=
name|context
operator|.
name|getMessageEvaluationContext
argument_list|()
decl_stmt|;
try|try
block|{
name|msgContext
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
comment|// lets copy the messages to dispatch to avoid deadlock
name|List
name|messagesToDispatch
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueMessageReference
name|node
init|=
operator|(
name|QueueMessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isDropped
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|groupID
init|=
name|node
operator|.
name|getGroupID
argument_list|()
decl_stmt|;
comment|// Re-deliver all messages that the sub locked
if|if
condition|(
name|node
operator|.
name|getLockOwner
argument_list|()
operator|==
name|sub
operator|||
name|wasExclusiveOwner
operator|||
operator|(
name|groupID
operator|!=
literal|null
operator|&&
name|ownedGroups
operator|.
name|contains
argument_list|(
name|groupID
argument_list|)
operator|)
condition|)
block|{
name|messagesToDispatch
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now lets dispatch from the copy of the collection to
comment|// avoid deadlocks
for|for
control|(
name|Iterator
name|iter
init|=
name|messagesToDispatch
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|QueueMessageReference
name|node
init|=
operator|(
name|QueueMessageReference
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|node
operator|.
name|incrementRedeliveryCounter
argument_list|()
expr_stmt|;
name|node
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|msgContext
operator|.
name|setMessageReference
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|dispatchPolicy
operator|.
name|dispatch
argument_list|(
name|node
argument_list|,
name|msgContext
argument_list|,
name|consumers
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|msgContext
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|dispatchValve
operator|.
name|turnOn
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
name|messagesWaitingForSpace
init|=
operator|new
name|LinkedList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|sendMessagesWaitingForSpaceTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// We may need to do this in async thread since this is run for within a synchronization
comment|// that the UsageManager is holding.
synchronized|synchronized
init|(
name|messagesWaitingForSpace
init|)
block|{
while|while
condition|(
operator|!
name|usageManager
operator|.
name|isFull
argument_list|()
operator|&&
operator|!
name|messagesWaitingForSpace
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Runnable
name|op
init|=
name|messagesWaitingForSpace
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
name|op
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
block|}
decl_stmt|;
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ConnectionContext
name|context
init|=
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
decl_stmt|;
comment|// There is delay between the client sending it and it arriving at the
comment|// destination.. it may have expired.
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|message
operator|.
name|isResponseRequired
argument_list|()
operator|||
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getWindowSize
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|context
operator|.
name|isProducerFlowControl
argument_list|()
operator|&&
name|usageManager
operator|.
name|isFull
argument_list|()
condition|)
block|{
if|if
condition|(
name|usageManager
operator|.
name|isSendFailIfNoSpace
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|javax
operator|.
name|jms
operator|.
name|ResourceAllocationException
argument_list|(
literal|"Usage Manager memory limit reached"
argument_list|)
throw|;
block|}
comment|// We can avoid blocking due to low usage if the producer is sending a sync message or
comment|// if it is using a producer window
if|if
condition|(
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getWindowSize
argument_list|()
operator|>
literal|0
operator|||
name|message
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|messagesWaitingForSpace
init|)
block|{
name|messagesWaitingForSpace
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// While waiting for space to free up... the message may have expired.
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|isResponseRequired
argument_list|()
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
name|doMessageSend
argument_list|(
name|producerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|isResponseRequired
argument_list|()
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|response
init|=
operator|new
name|ExceptionResponse
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|message
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// If the user manager is not full, then the task will not get called..
if|if
condition|(
operator|!
name|usageManager
operator|.
name|notifyCallbackWhenNotFull
argument_list|(
name|sendMessagesWaitingForSpaceTask
argument_list|)
condition|)
block|{
comment|// so call it directly here.
name|sendMessagesWaitingForSpaceTask
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|setDontSendReponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// Producer flow control cannot be used, so we have do the flow control at the broker
comment|// by blocking this thread until there is space available.
while|while
condition|(
operator|!
name|usageManager
operator|.
name|waitForSpace
argument_list|(
literal|1000
argument_list|)
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getStopping
argument_list|()
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Connection closed, send aborted."
argument_list|)
throw|;
block|}
comment|// The usage manager could have delayed us by the time
comment|// we unblock the message could have expired..
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Expired message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
name|doMessageSend
argument_list|(
name|producerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|void
name|doMessageSend
parameter_list|(
specifier|final
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
specifier|final
name|ConnectionContext
name|context
init|=
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
decl_stmt|;
name|message
operator|.
name|setRegionDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
operator|&&
name|message
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
name|store
operator|.
name|addMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|!
name|message
operator|.
name|isResponseRequired
argument_list|()
operator|||
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getWindowSize
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
comment|// If this is a transacted message.. increase the usage now so that a big TX does not blow up
comment|// our memory.  This increment is decremented once the tx finishes..
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
comment|// It could take while before we receive the commit
comment|// op, by that time the message could have expired..
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
return|return;
block|}
name|sendMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Add to the pending list, this takes care of incrementing the usage manager.
name|sendMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|removeAllMessages
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|destinationStatistics
operator|.
name|setParent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dropEvent
parameter_list|()
block|{
name|dropEvent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dropEvent
parameter_list|(
name|boolean
name|skipGc
parameter_list|)
block|{
comment|// TODO: need to also decrement when messages expire.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
name|garbageSize
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|skipGc
operator|&&
name|garbageSize
operator|>
name|garbageSizeBeforeCollection
condition|)
block|{
name|gc
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|taskRunner
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Task Runner failed to wakeup "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|gc
parameter_list|()
block|{
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// Remove dropped messages from the queue.
name|QueueMessageReference
name|node
init|=
operator|(
name|QueueMessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isDropped
argument_list|()
condition|)
block|{
name|garbageSize
operator|--
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
name|MessageAck
name|ack
parameter_list|,
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
comment|// the original ack may be a ranged ack, but we are trying to delete
comment|// a specific
comment|// message store here so we need to convert to a non ranged ack.
if|if
condition|(
name|ack
operator|.
name|getMessageCount
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Dup the ack
name|MessageAck
name|a
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|copy
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|ack
operator|=
name|a
expr_stmt|;
comment|// Convert to non-ranged.
name|ack
operator|.
name|setFirstMessageId
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setLastMessageId
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|removeMessage
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
name|loadMessage
parameter_list|(
name|MessageId
name|messageId
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
name|msg
init|=
name|store
operator|.
name|getMessage
argument_list|(
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setRegionDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|msg
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|size
operator|=
name|messages
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
literal|"Queue: destination="
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|", subscriptions="
operator|+
name|consumers
operator|.
name|size
argument_list|()
operator|+
literal|", memory="
operator|+
name|usageManager
operator|.
name|getPercentUsage
argument_list|()
operator|+
literal|"%, size="
operator|+
name|size
operator|+
literal|", in flight groups="
operator|+
name|messageGroupOwners
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|started
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|usageManager
operator|!=
literal|null
condition|)
block|{
name|usageManager
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|messages
operator|.
name|start
argument_list|()
expr_stmt|;
name|doPageIn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|started
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|taskRunner
operator|!=
literal|null
condition|)
block|{
name|taskRunner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|messages
operator|!=
literal|null
condition|)
block|{
name|messages
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|usageManager
operator|!=
literal|null
condition|)
block|{
name|usageManager
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|ActiveMQDestination
name|getActiveMQDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|String
name|getDestination
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getPhysicalName
argument_list|()
return|;
block|}
specifier|public
name|UsageManager
name|getUsageManager
parameter_list|()
block|{
return|return
name|usageManager
return|;
block|}
specifier|public
name|DestinationStatistics
name|getDestinationStatistics
parameter_list|()
block|{
return|return
name|destinationStatistics
return|;
block|}
specifier|public
name|MessageGroupMap
name|getMessageGroupOwners
parameter_list|()
block|{
if|if
condition|(
name|messageGroupOwners
operator|==
literal|null
condition|)
block|{
name|messageGroupOwners
operator|=
name|getMessageGroupMapFactory
argument_list|()
operator|.
name|createMessageGroupMap
argument_list|()
expr_stmt|;
block|}
return|return
name|messageGroupOwners
return|;
block|}
specifier|public
name|DispatchPolicy
name|getDispatchPolicy
parameter_list|()
block|{
return|return
name|dispatchPolicy
return|;
block|}
specifier|public
name|void
name|setDispatchPolicy
parameter_list|(
name|DispatchPolicy
name|dispatchPolicy
parameter_list|)
block|{
name|this
operator|.
name|dispatchPolicy
operator|=
name|dispatchPolicy
expr_stmt|;
block|}
specifier|public
name|DeadLetterStrategy
name|getDeadLetterStrategy
parameter_list|()
block|{
return|return
name|deadLetterStrategy
return|;
block|}
specifier|public
name|void
name|setDeadLetterStrategy
parameter_list|(
name|DeadLetterStrategy
name|deadLetterStrategy
parameter_list|)
block|{
name|this
operator|.
name|deadLetterStrategy
operator|=
name|deadLetterStrategy
expr_stmt|;
block|}
specifier|public
name|MessageGroupMapFactory
name|getMessageGroupMapFactory
parameter_list|()
block|{
return|return
name|messageGroupMapFactory
return|;
block|}
specifier|public
name|void
name|setMessageGroupMapFactory
parameter_list|(
name|MessageGroupMapFactory
name|messageGroupMapFactory
parameter_list|)
block|{
name|this
operator|.
name|messageGroupMapFactory
operator|=
name|messageGroupMapFactory
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getActiveMQDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
return|;
block|}
specifier|public
name|PendingMessageCursor
name|getMessages
parameter_list|()
block|{
return|return
name|this
operator|.
name|messages
return|;
block|}
specifier|public
name|void
name|setMessages
parameter_list|(
name|PendingMessageCursor
name|messages
parameter_list|)
block|{
name|this
operator|.
name|messages
operator|=
name|messages
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
specifier|private
name|MessageReference
name|createMessageReference
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|MessageReference
name|result
init|=
operator|new
name|IndirectMessageReference
argument_list|(
name|this
argument_list|,
name|store
argument_list|,
name|message
argument_list|)
decl_stmt|;
name|result
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|MessageStore
name|getMessageStore
parameter_list|()
block|{
return|return
name|store
return|;
block|}
specifier|public
name|Message
index|[]
name|browse
parameter_list|()
block|{
name|ArrayList
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|doPageIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"caught an exception browsing "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageReference
name|r
init|=
operator|(
name|MessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|r
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|m
init|=
name|r
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"caught an exception browsing "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
synchronized|synchronized
init|(
name|messages
init|)
block|{
try|try
block|{
name|messages
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|messages
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|MessageReference
name|r
init|=
name|messages
operator|.
name|next
argument_list|()
decl_stmt|;
name|r
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|m
init|=
name|r
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"caught an exception brwsing "
operator|+
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|messages
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|Message
index|[]
operator|)
name|l
operator|.
name|toArray
argument_list|(
operator|new
name|Message
index|[
name|l
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Message
name|getMessage
parameter_list|(
name|String
name|messageId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|messages
init|)
block|{
try|try
block|{
name|messages
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|messages
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
name|MessageReference
name|r
init|=
name|messages
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageId
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|m
init|=
name|r
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"got an exception retrieving message "
operator|+
name|messageId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|messages
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|purge
parameter_list|()
throws|throws
name|Exception
block|{
name|pageInMessages
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
name|ConnectionContext
name|c
init|=
name|createConnectionContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|QueueMessageReference
name|r
init|=
operator|(
name|QueueMessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// We should only delete messages that can be locked.
if|if
condition|(
name|r
operator|.
name|lock
argument_list|(
name|LockOwner
operator|.
name|HIGH_PRIORITY_LOCK_OWNER
argument_list|)
condition|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageID
argument_list|(
name|r
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|acknowledge
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|ack
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|drop
argument_list|()
expr_stmt|;
name|dropEvent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
comment|// Run gc() by hand. Had we run it in the loop it could be
comment|// quite expensive.
name|gc
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Removes the message matching the given messageId      */
specifier|public
name|boolean
name|removeMessage
parameter_list|(
name|String
name|messageId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|removeMatchingMessages
argument_list|(
name|createMessageIdFilter
argument_list|(
name|messageId
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Removes the messages matching the given selector      *       * @return the number of messages removed      */
specifier|public
name|int
name|removeMatchingMessages
parameter_list|(
name|String
name|selector
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|removeMatchingMessages
argument_list|(
name|selector
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Removes the messages matching the given selector up to the maximum number of matched messages      *       * @return the number of messages removed      */
specifier|public
name|int
name|removeMatchingMessages
parameter_list|(
name|String
name|selector
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|removeMatchingMessages
argument_list|(
name|createSelectorFilter
argument_list|(
name|selector
argument_list|)
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
comment|/**      * Removes the messages matching the given filter up to the maximum number of matched messages      *       * @return the number of messages removed      */
specifier|public
name|int
name|removeMatchingMessages
parameter_list|(
name|MessageReferenceFilter
name|filter
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|pageInMessages
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
name|ConnectionContext
name|c
init|=
name|createConnectionContext
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IndirectMessageReference
name|r
init|=
operator|(
name|IndirectMessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|evaluate
argument_list|(
name|c
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|removeMessage
argument_list|(
name|c
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|counter
operator|>=
name|maximumMessages
operator|&&
name|maximumMessages
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
return|return
name|counter
return|;
block|}
comment|/**      * Copies the message matching the given messageId      */
specifier|public
name|boolean
name|copyMessageTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|messageId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|copyMatchingMessages
argument_list|(
name|context
argument_list|,
name|createMessageIdFilter
argument_list|(
name|messageId
argument_list|)
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Copies the messages matching the given selector      *       * @return the number of messages copied      */
specifier|public
name|int
name|copyMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|copyMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|dest
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Copies the messages matching the given selector up to the maximum number of matched messages      *       * @return the number of messages copied      */
specifier|public
name|int
name|copyMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|copyMatchingMessages
argument_list|(
name|context
argument_list|,
name|createSelectorFilter
argument_list|(
name|selector
argument_list|)
argument_list|,
name|dest
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
comment|/**      * Copies the messages matching the given filter up to the maximum number of matched messages      *       * @return the number of messages copied      */
specifier|public
name|int
name|copyMatchingMessages
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReferenceFilter
name|filter
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|pageInMessages
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageReference
name|r
init|=
operator|(
name|MessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|r
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|m
init|=
name|r
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|BrokerSupport
operator|.
name|resend
argument_list|(
name|context
argument_list|,
name|m
argument_list|,
name|dest
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|counter
operator|>=
name|maximumMessages
operator|&&
name|maximumMessages
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|counter
return|;
block|}
comment|/**      * Moves the message matching the given messageId      */
specifier|public
name|boolean
name|moveMessageTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|messageId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|createMessageIdFilter
argument_list|(
name|messageId
argument_list|)
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Moves the messages matching the given selector      *       * @return the number of messages removed      */
specifier|public
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|dest
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Moves the messages matching the given selector up to the maximum number of matched messages      */
specifier|public
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|createSelectorFilter
argument_list|(
name|selector
argument_list|)
argument_list|,
name|dest
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
comment|/**      * Moves the messages matching the given filter up to the maximum number of matched messages      */
specifier|public
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReferenceFilter
name|filter
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|pageInMessages
argument_list|()
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|pagedInMessages
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|IndirectMessageReference
name|r
init|=
operator|(
name|IndirectMessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|r
argument_list|)
condition|)
block|{
comment|// We should only move messages that can be locked.
if|if
condition|(
name|lockMessage
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|r
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|m
init|=
name|r
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|BrokerSupport
operator|.
name|resend
argument_list|(
name|context
argument_list|,
name|m
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|removeMessage
argument_list|(
name|context
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|counter
operator|>=
name|maximumMessages
operator|&&
name|maximumMessages
operator|>
literal|0
condition|)
block|{
break|break;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|counter
return|;
block|}
comment|/**      * @return      * @see org.apache.activemq.thread.Task#iterate()      */
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
try|try
block|{
name|pageInMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to page in more queue messages "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|MessageReferenceFilter
name|createMessageIdFilter
parameter_list|(
specifier|final
name|String
name|messageId
parameter_list|)
block|{
return|return
operator|new
name|MessageReferenceFilter
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|r
parameter_list|)
block|{
return|return
name|messageId
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|MessageReferenceFilter
name|createSelectorFilter
parameter_list|(
name|String
name|selector
parameter_list|)
throws|throws
name|InvalidSelectorException
block|{
specifier|final
name|BooleanExpression
name|selectorExpression
init|=
operator|new
name|SelectorParser
argument_list|()
operator|.
name|parse
argument_list|(
name|selector
argument_list|)
decl_stmt|;
return|return
operator|new
name|MessageReferenceFilter
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|r
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageEvaluationContext
name|messageEvaluationContext
init|=
name|context
operator|.
name|getMessageEvaluationContext
argument_list|()
decl_stmt|;
name|messageEvaluationContext
operator|.
name|setMessageReference
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|messageEvaluationContext
operator|.
name|getDestination
argument_list|()
operator|==
literal|null
condition|)
block|{
name|messageEvaluationContext
operator|.
name|setDestination
argument_list|(
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectorExpression
operator|.
name|matches
argument_list|(
name|messageEvaluationContext
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|removeMessage
parameter_list|(
name|ConnectionContext
name|c
parameter_list|,
name|IndirectMessageReference
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageID
argument_list|(
name|r
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|acknowledge
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|ack
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|drop
argument_list|()
expr_stmt|;
name|dropEvent
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|lockMessage
parameter_list|(
name|IndirectMessageReference
name|r
parameter_list|)
block|{
return|return
name|r
operator|.
name|lock
argument_list|(
name|LockOwner
operator|.
name|HIGH_PRIORITY_LOCK_OWNER
argument_list|)
return|;
block|}
specifier|protected
name|ConnectionContext
name|createConnectionContext
parameter_list|()
block|{
name|ConnectionContext
name|answer
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|answer
operator|.
name|getMessageEvaluationContext
argument_list|()
operator|.
name|setDestination
argument_list|(
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|final
name|void
name|sendMessage
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|messages
init|)
block|{
name|messages
operator|.
name|addMessageLast
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|destinationStatistics
operator|.
name|getEnqueues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|pageInMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
name|doPageIn
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|doPageIn
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|private
name|List
name|doPageIn
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|toPageIn
init|=
name|maximumPagedInMessages
operator|-
name|pagedInMessages
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|force
operator|||
operator|!
name|consumers
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|toPageIn
operator|>
literal|0
condition|)
block|{
name|messages
operator|.
name|setMaxBatchSize
argument_list|(
name|toPageIn
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatchValve
operator|.
name|increment
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|(
name|toPageIn
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|messages
init|)
block|{
try|try
block|{
name|messages
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|messages
operator|.
name|hasNext
argument_list|()
operator|&&
name|count
operator|<
name|toPageIn
condition|)
block|{
name|MessageReference
name|node
init|=
name|messages
operator|.
name|next
argument_list|()
decl_stmt|;
name|messages
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|node
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|node
operator|=
name|createMessageReference
argument_list|(
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|createConnectionContext
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|messages
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|pagedInMessages
init|)
block|{
name|pagedInMessages
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queueMsgConext
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dispatchValve
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|doDispatch
parameter_list|(
name|List
name|list
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|dispatchValve
operator|.
name|increment
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MessageReference
name|node
init|=
operator|(
name|MessageReference
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|queueMsgConext
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|queueMsgConext
operator|.
name|setMessageReference
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|dispatchPolicy
operator|.
name|dispatch
argument_list|(
name|node
argument_list|,
name|queueMsgConext
argument_list|,
name|consumers
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|queueMsgConext
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dispatchValve
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|pageInMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|pageInMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|pageInMessages
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|doDispatchMutex
init|)
block|{
name|doDispatch
argument_list|(
name|doPageIn
argument_list|(
name|force
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

