begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_comment
comment|/**  * A transport for using Stomp to talk to ActiveMQ  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|StompTransportChannel
extends|extends
name|TcpTransport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StompTransportChannel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|StompTransportChannel
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|StompWireFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StompTransportChannel
parameter_list|(
name|URI
name|remoteLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|super
argument_list|(
operator|new
name|StompWireFormat
argument_list|()
argument_list|,
name|remoteLocation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StompTransportChannel
parameter_list|(
name|URI
name|remoteLocation
parameter_list|,
name|URI
name|localLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|super
argument_list|(
operator|new
name|StompWireFormat
argument_list|()
argument_list|,
name|remoteLocation
argument_list|,
name|localLocation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StompTransportChannel
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
operator|new
name|StompWireFormat
argument_list|()
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
comment|/*      * protected void readWireFormat() throws JMSException, IOException { // no      * need to read wire format from wire }      *       * protected void doConsumeCommand(Command packet) { if( packet ==      * FlushCommand.PACKET ) { try { doAsyncSend(null); } catch (JMSException e) {      * ExceptionListener listener = getExceptionListener(); if (listener !=      * null) { listener.onException(e); } else { log.warn("No listener to report      * error consuming packet: " + e, e); } } } else {      * super.doConsumeCommand(packet); } }      */
block|}
end_class

end_unit

