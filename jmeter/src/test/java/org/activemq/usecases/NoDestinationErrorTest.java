begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_comment
comment|/** * This Unit Test is created to test the memory leakage when a new producer is created and closed for each message that was sent. * The error occured after sending and receiving messages 65536 times. * This test validate if the messages sent by producer is being received by the consumer. * A new producer is created and closed for each message that was sent. * The said procedure is done fore more than 65536 times. */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|NoDestinationErrorTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ACTIVEMQ_SERVER
init|=
literal|"ActiveMQ Server"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|TRANSACTED_FALSE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOOL_DEFAULT
init|=
literal|"TOOL.DEFAULT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LAST_MESSAGE
init|=
literal|"LAST"
decl_stmt|;
specifier|public
name|String
name|userName
decl_stmt|;
specifier|public
name|String
name|password
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|public
specifier|static
name|Map
name|ProducerMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|boolean
name|isTopic
init|=
literal|false
decl_stmt|;
specifier|protected
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|protected
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|public
name|NoDestinationErrorTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|createSession
argument_list|(
name|connection
argument_list|,
name|TRANSACTED_FALSE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|createDestination
argument_list|(
name|session
argument_list|,
literal|"subject"
argument_list|,
name|isTopic
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|70000
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|sentMessage
decl_stmt|;
name|sentMessage
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"message "
operator|+
name|i
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|sentMessage
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|TextMessage
name|rcvMessage
init|=
literal|null
decl_stmt|;
name|rcvMessage
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|message
init|=
name|rcvMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message received should not be null"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Creates the connection to the broker.      *      *  @return Connection - broker connection.      */
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=true"
argument_list|)
return|;
block|}
comment|/**      * Creates the connection session.      *      * @param connection   - broker connection.      * @param isTransacted - true if the session will be session transacted.      *                     otherwise the the session will be using auto acknowledge.      * @return Session - connection session.      */
specifier|private
specifier|static
name|Session
name|createSession
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|isTransacted
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isTransacted
condition|)
block|{
return|return
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
return|;
block|}
block|}
comment|/**      * Creates the session destination.      *      * @param session - connection session.      * @param subject - destination name.      * @param isTopic - true if the destination is a topic,      *                otherwise the destination is a queue.      * @return Destination - session destination.      */
specifier|private
specifier|static
name|Destination
name|createDestination
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|subject
parameter_list|,
name|boolean
name|isTopic
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
name|session
operator|.
name|createTopic
argument_list|(
name|subject
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|session
operator|.
name|createQueue
argument_list|(
name|subject
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|testSendReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

