begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueReceiver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicPublisher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2084Test
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQ2084Test
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
name|CountDownLatch
name|qreceived
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|qreceived
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|listenQueue
parameter_list|(
specifier|final
name|String
name|queueName
parameter_list|,
specifier|final
name|String
name|selectors
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"java.naming.factory.initial"
argument_list|,
literal|"org.apache.activemq.jndi.ActiveMQInitialContextFactory"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"java.naming.provider.url"
argument_list|,
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"queue.queueName"
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|javax
operator|.
name|naming
operator|.
name|Context
name|ctx
init|=
operator|new
name|InitialContext
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|QueueConnectionFactory
name|factory
init|=
operator|(
name|QueueConnectionFactory
operator|)
name|ctx
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
decl_stmt|;
name|QueueConnection
name|conn
init|=
name|factory
operator|.
name|createQueueConnection
argument_list|()
decl_stmt|;
specifier|final
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|ctx
operator|.
name|lookup
argument_list|(
literal|"queueName"
argument_list|)
decl_stmt|;
name|QueueSession
name|session
init|=
name|conn
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|QueueReceiver
name|receiver
init|=
name|session
operator|.
name|createReceiver
argument_list|(
name|queue
argument_list|,
name|selectors
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Message Selector: "
operator|+
name|receiver
operator|.
name|getMessageSelector
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|txtMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|String
name|msg
init|=
name|txtMsg
operator|.
name|getText
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queue Message Received: "
operator|+
name|queueName
operator|+
literal|" - "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|qreceived
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|listenTopic
parameter_list|(
specifier|final
name|String
name|topicName
parameter_list|,
specifier|final
name|String
name|selectors
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"java.naming.factory.initial"
argument_list|,
literal|"org.apache.activemq.jndi.ActiveMQInitialContextFactory"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"java.naming.provider.url"
argument_list|,
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"topic.topicName"
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
name|javax
operator|.
name|naming
operator|.
name|Context
name|ctx
init|=
operator|new
name|InitialContext
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|TopicConnectionFactory
name|factory
init|=
operator|(
name|TopicConnectionFactory
operator|)
name|ctx
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
decl_stmt|;
name|TopicConnection
name|conn
init|=
name|factory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
specifier|final
name|Topic
name|topic
init|=
operator|(
name|Topic
operator|)
name|ctx
operator|.
name|lookup
argument_list|(
literal|"topicName"
argument_list|)
decl_stmt|;
name|TopicSession
name|session
init|=
name|conn
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|receiver
init|=
name|session
operator|.
name|createSubscriber
argument_list|(
name|topic
argument_list|,
name|selectors
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|txtMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|String
name|msg
init|=
name|txtMsg
operator|.
name|getText
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Topic Message Received: "
operator|+
name|topicName
operator|+
literal|" - "
operator|+
name|msg
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|publish
parameter_list|(
name|String
name|topicName
parameter_list|,
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"java.naming.factory.initial"
argument_list|,
literal|"org.apache.activemq.jndi.ActiveMQInitialContextFactory"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"java.naming.provider.url"
argument_list|,
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"topic.topicName"
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
name|javax
operator|.
name|naming
operator|.
name|Context
name|ctx
init|=
operator|new
name|InitialContext
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|TopicConnectionFactory
name|factory
init|=
operator|(
name|TopicConnectionFactory
operator|)
name|ctx
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
decl_stmt|;
name|TopicConnection
name|conn
init|=
name|factory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|Topic
name|topic
init|=
operator|(
name|Topic
operator|)
name|ctx
operator|.
name|lookup
argument_list|(
literal|"topicName"
argument_list|)
decl_stmt|;
name|TopicSession
name|session
init|=
name|conn
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicPublisher
name|publisher
init|=
name|session
operator|.
name|createPublisher
argument_list|(
name|topic
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|Message
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tryXpathSelectorMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xPath
init|=
literal|"XPATH '//books//book[@lang=''en'']'"
decl_stmt|;
name|listenQueue
argument_list|(
literal|"Consumer.Sample.VirtualTopic.TestXpath"
argument_list|,
name|xPath
argument_list|)
expr_stmt|;
name|publish
argument_list|(
literal|"VirtualTopic.TestXpath"
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><books><book lang=\"en\">ABC</book></books>"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"topic received: "
argument_list|,
name|qreceived
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tryXpathSelectorNoMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|xPath
init|=
literal|"XPATH '//books//book[@lang=''es'']'"
decl_stmt|;
name|listenQueue
argument_list|(
literal|"Consumer.Sample.VirtualTopic.TestXpath"
argument_list|,
name|xPath
argument_list|)
expr_stmt|;
name|publish
argument_list|(
literal|"VirtualTopic.TestXpath"
argument_list|,
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><books><book lang=\"en\">ABC</book></books>"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"topic did not receive unmatched"
argument_list|,
name|qreceived
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

