begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Iterator for the set of keys for a RangeLimitedMap  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|RangeLimitedMapKeySetIterator
implements|implements
name|Iterator
block|{
specifier|private
name|RangeLimitedMap
name|map
decl_stmt|;
specifier|private
name|IndexItem
name|current
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
name|RangeLimitedMapKeySetIterator
parameter_list|(
name|RangeLimitedMap
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|current
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
name|started
operator|=
literal|true
expr_stmt|;
name|current
operator|=
name|map
operator|.
name|getIndexList
argument_list|()
operator|.
name|getFirst
argument_list|()
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
name|current
operator|=
name|map
operator|.
name|getNextEntry
argument_list|(
name|current
argument_list|)
expr_stmt|;
return|return
name|current
operator|!=
literal|null
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
return|return
name|map
operator|.
name|getKey
argument_list|(
name|current
argument_list|)
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|Object
name|key
init|=
name|map
operator|.
name|getKey
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

