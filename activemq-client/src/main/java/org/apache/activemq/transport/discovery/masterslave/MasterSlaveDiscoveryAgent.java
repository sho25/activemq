begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|masterslave
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|simple
operator|.
name|SimpleDiscoveryAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A static DiscoveryAgent that supports connecting to a Master / Slave tuple  * of brokers.  */
end_comment

begin_class
specifier|public
class|class
name|MasterSlaveDiscoveryAgent
extends|extends
name|SimpleDiscoveryAgent
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterSlaveDiscoveryAgent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
index|[]
name|msServices
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getServices
parameter_list|()
block|{
return|return
name|msServices
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setServices
parameter_list|(
name|String
name|services
parameter_list|)
block|{
name|this
operator|.
name|msServices
operator|=
name|services
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|configureServices
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setServices
parameter_list|(
name|String
name|services
index|[]
parameter_list|)
block|{
name|this
operator|.
name|msServices
operator|=
name|services
expr_stmt|;
name|configureServices
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setServices
parameter_list|(
name|URI
name|services
index|[]
parameter_list|)
block|{
name|this
operator|.
name|msServices
operator|=
operator|new
name|String
index|[
name|services
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|services
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|this
operator|.
name|msServices
index|[
name|i
index|]
operator|=
name|services
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|configureServices
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|configureServices
parameter_list|()
block|{
if|if
condition|(
operator|(
name|msServices
operator|==
literal|null
operator|)
operator|||
operator|(
name|msServices
operator|.
name|length
operator|<
literal|2
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"masterSlave requires at least 2 URIs"
argument_list|)
expr_stmt|;
name|msServices
operator|=
operator|new
name|String
index|[]
block|{}
expr_stmt|;
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expecting at least 2 arguments"
argument_list|)
throw|;
block|}
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"failover:("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|msServices
operator|.
name|length
operator|-
literal|1
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|msServices
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|msServices
index|[
name|msServices
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|")?randomize=false&maxReconnectAttempts=0"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setServices
argument_list|(
operator|new
name|String
index|[]
block|{
name|buf
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

