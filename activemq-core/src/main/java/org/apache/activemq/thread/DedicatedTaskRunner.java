begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
package|;
end_package

begin_comment
comment|/**  *   */
end_comment

begin_class
class|class
name|DedicatedTaskRunner
implements|implements
name|TaskRunner
block|{
specifier|private
specifier|final
name|Task
name|task
decl_stmt|;
specifier|private
specifier|final
name|Thread
name|thread
decl_stmt|;
specifier|private
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|threadTerminated
decl_stmt|;
specifier|private
name|boolean
name|pending
decl_stmt|;
specifier|private
name|boolean
name|shutdown
decl_stmt|;
specifier|public
name|DedicatedTaskRunner
parameter_list|(
name|Task
name|task
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|priority
parameter_list|,
name|boolean
name|daemon
parameter_list|)
block|{
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|name
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runTask
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      */
specifier|public
name|void
name|wakeup
parameter_list|()
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
return|return;
block|}
name|pending
operator|=
literal|true
expr_stmt|;
name|mutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * shut down the task      *       * @param timeout      * @throws InterruptedException      */
specifier|public
name|void
name|shutdown
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
name|pending
operator|=
literal|true
expr_stmt|;
name|mutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
comment|// Wait till the thread stops ( no need to wait if shutdown
comment|// is called from thread that is shutting down)
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|!=
name|thread
operator|&&
operator|!
name|threadTerminated
condition|)
block|{
name|mutex
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * shut down the task      *       * @throws InterruptedException      */
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|shutdown
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|final
name|void
name|runTask
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|pending
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
operator|!
name|task
operator|.
name|iterate
argument_list|()
condition|)
block|{
comment|// wait to be notified.
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
return|return;
block|}
while|while
condition|(
operator|!
name|pending
condition|)
block|{
name|mutex
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Someone really wants this thread to die off.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// Make sure we notify any waiting threads that thread
comment|// has terminated.
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|threadTerminated
operator|=
literal|true
expr_stmt|;
name|mutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

