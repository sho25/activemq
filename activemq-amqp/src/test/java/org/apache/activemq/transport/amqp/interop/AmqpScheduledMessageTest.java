begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|interop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|JobSchedulerViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClientTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for scheduled message support using AMQP message annotations.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpScheduledMessageTest
extends|extends
name|AmqpClientTestSupport
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|isSchedulerEnabled
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseOpenWireConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSendWithDeliveryTimeIsScheduled
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the Queue View early to avoid racing the delivery.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queueView
argument_list|)
expr_stmt|;
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
name|long
name|deliveryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"x-opt-delivery-time"
argument_list|,
name|deliveryTime
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Test-Message"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|JobSchedulerViewMBean
name|view
init|=
name|getJobSchedulerMBean
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|view
operator|.
name|getAllJobs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSendRecvWithDeliveryTime
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpReceiver
name|receiver
init|=
name|session
operator|.
name|createReceiver
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the Queue View early to avoid racing the delivery.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queueView
argument_list|)
expr_stmt|;
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
name|long
name|deliveryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
decl_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"x-opt-delivery-time"
argument_list|,
name|deliveryTime
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Test-Message"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Delayed message should be delivered"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|queueView
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now try and get the message
name|receiver
operator|.
name|flow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|AmqpMessage
name|received
init|=
name|receiver
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|received
operator|.
name|accept
argument_list|()
expr_stmt|;
name|Long
name|msgDeliveryTime
init|=
operator|(
name|Long
operator|)
name|received
operator|.
name|getMessageAnnotation
argument_list|(
literal|"x-opt-delivery-time"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msgDeliveryTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|deliveryTime
argument_list|,
name|msgDeliveryTime
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSendScheduledReceiveOverOpenWire
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the Queue View early to avoid racing the delivery.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queueView
argument_list|)
expr_stmt|;
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
name|long
name|deliveryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
decl_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"x-opt-delivery-time"
argument_list|,
name|deliveryTime
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Test-Message"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Read the message with short timeout, shouldn't get it.
try|try
block|{
name|readMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not read the message"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{         }
comment|// Read the message
name|readMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleWithDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the Queue View early to avoid racing the delivery.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queueView
argument_list|)
expr_stmt|;
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
literal|5000
decl_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"x-opt-delivery-delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Test-Message"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Read the message with short timeout, shouldn't get it.
try|try
block|{
name|readMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not read the message"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{         }
comment|// Read the message with long timeout, should get it.
try|try
block|{
name|readMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should read the message"
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScheduleRepeated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUMBER
init|=
literal|10
decl_stmt|;
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|()
decl_stmt|;
name|AmqpConnection
name|connection
init|=
name|trackConnection
argument_list|(
name|client
operator|.
name|connect
argument_list|()
argument_list|)
decl_stmt|;
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Get the Queue View early to avoid racing the delivery.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queueView
argument_list|)
expr_stmt|;
name|AmqpMessage
name|message
init|=
operator|new
name|AmqpMessage
argument_list|()
decl_stmt|;
name|long
name|delay
init|=
literal|1000
decl_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"x-opt-delivery-delay"
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"x-opt-delivery-period"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageAnnotation
argument_list|(
literal|"x-opt-delivery-repeat"
argument_list|,
name|NUMBER
operator|-
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Test-Message"
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
name|readMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
name|NUMBER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Read the message with short timeout, shouldn't get it.
try|try
block|{
name|readMessages
argument_list|(
name|getTestName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not read more messages"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{         }
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|readMessages
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|int
name|count
parameter_list|,
name|boolean
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|readMessages
argument_list|(
name|destinationName
argument_list|,
name|count
argument_list|,
name|topic
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|readMessages
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|int
name|count
parameter_list|,
name|boolean
name|topic
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|createJMSConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|destination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|destinationName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
expr_stmt|;
block|}
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|received
init|=
name|consumer
operator|.
name|receive
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read next message: {}"
argument_list|,
name|received
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|JobSchedulerViewMBean
name|getJobSchedulerMBean
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|objectName
init|=
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getJMSJobScheduler
argument_list|()
decl_stmt|;
name|JobSchedulerViewMBean
name|scheduler
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|objectName
operator|!=
literal|null
condition|)
block|{
name|scheduler
operator|=
operator|(
name|JobSchedulerViewMBean
operator|)
name|brokerService
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|objectName
argument_list|,
name|JobSchedulerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|scheduler
return|;
block|}
block|}
end_class

end_unit

