begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_interface
specifier|public
interface|interface
name|MessageDispatchChannel
block|{
specifier|public
specifier|abstract
name|void
name|enqueue
parameter_list|(
name|MessageDispatch
name|message
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|enqueueFirst
parameter_list|(
name|MessageDispatch
name|message
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isEmpty
parameter_list|()
function_decl|;
comment|/**      * Used to get an enqueued message. The amount of time this method blocks is      * based on the timeout value. - if timeout==-1 then it blocks until a      * message is received. - if timeout==0 then it it tries to not block at      * all, it returns a message if it is available - if timeout>0 then it      * blocks up to timeout amount of time. Expired messages will consumed by      * this method.      *       * @throws JMSException      * @return null if we timeout or if the consumer is closed.      * @throws InterruptedException      */
specifier|public
specifier|abstract
name|MessageDispatch
name|dequeue
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
specifier|public
specifier|abstract
name|MessageDispatch
name|dequeueNoWait
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|MessageDispatch
name|peek
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|start
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|stop
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|clear
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isClosed
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|int
name|size
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Object
name|getMutex
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isRunning
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|List
argument_list|<
name|MessageDispatch
argument_list|>
name|removeAll
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

