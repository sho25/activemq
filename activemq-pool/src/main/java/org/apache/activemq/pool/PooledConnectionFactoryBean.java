begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|pool
operator|.
name|ObjectPoolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_comment
comment|/**  * Simple factory bean used to create a jencks connection pool.  * Depending on the properties set, it will create a simple pool,  * a transaction aware connection pool, or a jca aware connection pool.  *  *<pre class="code">  *<bean id="pooledConnectionFactory" class="javax.script.ScriptEngineFactory.PooledConnectionFactoryFactoryBean">  *<property name="connectionFactory" ref="connectionFactory" />  *<property name="transactionManager" ref="transactionManager" />  *<property name="resourceName" value="ResourceName" />  *</bean>  *</pre>  *  * The<code>resourceName</code> property should be used along with the {@link ActiveMQResourceManager} and have  * the same value than its<code>resourceName</code> property. This will make sure the transaction manager  * maps correctly the connection factory to the recovery process.  *  */
end_comment

begin_class
specifier|public
class|class
name|PooledConnectionFactoryBean
implements|implements
name|FactoryBean
implements|,
name|InitializingBean
implements|,
name|DisposableBean
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOGGER
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PooledConnectionFactoryBean
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|PooledConnectionFactory
name|pooledConnectionFactory
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|int
name|maxConnections
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|maximumActive
init|=
literal|500
decl_stmt|;
specifier|private
name|Object
name|transactionManager
decl_stmt|;
specifier|private
name|String
name|resourceName
decl_stmt|;
specifier|private
name|ObjectPoolFactory
name|poolFactory
decl_stmt|;
specifier|public
name|Object
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|pooledConnectionFactory
return|;
block|}
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|ConnectionFactory
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|getMaxConnections
parameter_list|()
block|{
return|return
name|maxConnections
return|;
block|}
specifier|public
name|void
name|setMaxConnections
parameter_list|(
name|int
name|maxConnections
parameter_list|)
block|{
name|this
operator|.
name|maxConnections
operator|=
name|maxConnections
expr_stmt|;
block|}
specifier|public
name|int
name|getMaximumActive
parameter_list|()
block|{
return|return
name|maximumActive
return|;
block|}
specifier|public
name|void
name|setMaximumActive
parameter_list|(
name|int
name|maximumActive
parameter_list|)
block|{
name|this
operator|.
name|maximumActive
operator|=
name|maximumActive
expr_stmt|;
block|}
specifier|public
name|Object
name|getTransactionManager
parameter_list|()
block|{
return|return
name|transactionManager
return|;
block|}
specifier|public
name|void
name|setTransactionManager
parameter_list|(
name|Object
name|transactionManager
parameter_list|)
block|{
name|this
operator|.
name|transactionManager
operator|=
name|transactionManager
expr_stmt|;
block|}
specifier|public
name|String
name|getResourceName
parameter_list|()
block|{
return|return
name|resourceName
return|;
block|}
specifier|public
name|void
name|setResourceName
parameter_list|(
name|String
name|resourceName
parameter_list|)
block|{
name|this
operator|.
name|resourceName
operator|=
name|resourceName
expr_stmt|;
block|}
specifier|public
name|ConnectionFactory
name|getConnectionFactory
parameter_list|()
block|{
return|return
name|connectionFactory
return|;
block|}
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
specifier|public
name|ObjectPoolFactory
name|getPoolFactory
parameter_list|()
block|{
return|return
name|poolFactory
return|;
block|}
specifier|public
name|void
name|setPoolFactory
parameter_list|(
name|ObjectPoolFactory
name|poolFactory
parameter_list|)
block|{
name|this
operator|.
name|poolFactory
operator|=
name|poolFactory
expr_stmt|;
block|}
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|pooledConnectionFactory
operator|==
literal|null
operator|&&
name|transactionManager
operator|!=
literal|null
operator|&&
name|resourceName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Trying to build a JcaPooledConnectionFactory"
argument_list|)
expr_stmt|;
name|JcaPooledConnectionFactory
name|f
init|=
operator|new
name|JcaPooledConnectionFactory
argument_list|()
decl_stmt|;
name|f
operator|.
name|setName
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|f
operator|.
name|setTransactionManager
argument_list|(
operator|(
name|TransactionManager
operator|)
name|transactionManager
argument_list|)
expr_stmt|;
name|f
operator|.
name|setMaxConnections
argument_list|(
name|maxConnections
argument_list|)
expr_stmt|;
name|f
operator|.
name|setMaximumActive
argument_list|(
name|maximumActive
argument_list|)
expr_stmt|;
name|f
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPoolFactory
argument_list|(
name|poolFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|pooledConnectionFactory
operator|=
name|f
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not create JCA enabled connection factory: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pooledConnectionFactory
operator|==
literal|null
operator|&&
name|transactionManager
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Trying to build a XaPooledConnectionFactory"
argument_list|)
expr_stmt|;
name|XaPooledConnectionFactory
name|f
init|=
operator|new
name|XaPooledConnectionFactory
argument_list|()
decl_stmt|;
name|f
operator|.
name|setTransactionManager
argument_list|(
operator|(
name|TransactionManager
operator|)
name|transactionManager
argument_list|)
expr_stmt|;
name|f
operator|.
name|setMaxConnections
argument_list|(
name|maxConnections
argument_list|)
expr_stmt|;
name|f
operator|.
name|setMaximumActive
argument_list|(
name|maximumActive
argument_list|)
expr_stmt|;
name|f
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPoolFactory
argument_list|(
name|poolFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|pooledConnectionFactory
operator|=
name|f
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not create XA enabled connection factory: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pooledConnectionFactory
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Trying to build a PooledConnectionFactory"
argument_list|)
expr_stmt|;
name|PooledConnectionFactory
name|f
init|=
operator|new
name|PooledConnectionFactory
argument_list|()
decl_stmt|;
name|f
operator|.
name|setMaxConnections
argument_list|(
name|maxConnections
argument_list|)
expr_stmt|;
name|f
operator|.
name|setMaximumActive
argument_list|(
name|maximumActive
argument_list|)
expr_stmt|;
name|f
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPoolFactory
argument_list|(
name|poolFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|pooledConnectionFactory
operator|=
name|f
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOGGER
operator|.
name|debug
argument_list|(
literal|"Could not create pooled connection factory: "
operator|+
name|t
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pooledConnectionFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create pooled connection factory.  Enable DEBUG log level for more informations"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|pooledConnectionFactory
operator|!=
literal|null
condition|)
block|{
name|pooledConnectionFactory
operator|.
name|stop
argument_list|()
expr_stmt|;
name|pooledConnectionFactory
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

