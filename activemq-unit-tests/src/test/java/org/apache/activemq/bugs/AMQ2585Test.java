begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerAndConnectionTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|spring
operator|.
name|ConsumerBean
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2585Test
extends|extends
name|EmbeddedBrokerAndConnectionTestSupport
block|{
specifier|private
specifier|final
name|Destination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"MyQueue"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|String
name|LENGTH10STRING
init|=
literal|"1234567890"
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|ConsumerBean
name|messageList
decl_stmt|;
specifier|public
name|void
name|testOneMessageWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|LENGTH10STRING
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
name|LENGTH10STRING
argument_list|,
name|LENGTH10STRING
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|messageList
operator|.
name|assertMessagesArrived
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ActiveMQTextMessage
name|received
init|=
operator|(
operator|(
name|ActiveMQTextMessage
operator|)
name|messageList
operator|.
name|flushMessages
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LENGTH10STRING
argument_list|,
name|received
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getProperties
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|propertyExists
argument_list|(
name|LENGTH10STRING
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LENGTH10STRING
argument_list|,
name|received
operator|.
name|getStringProperty
argument_list|(
name|LENGTH10STRING
argument_list|)
argument_list|)
expr_stmt|;
comment|/**          * As specified by getSize(), the size (memory usage) of the body should          * be length of text * 2. Unsure of how memory usage is calculated for          * properties, but should probably not be less than the sum of (string)          * lengths for the key name and value.          */
specifier|final
name|int
name|sizeShouldBeNoLessThan
init|=
name|LENGTH10STRING
operator|.
name|length
argument_list|()
operator|*
literal|4
operator|+
name|Message
operator|.
name|DEFAULT_MINIMUM_MESSAGE_SIZE
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Message size was smaller than expected: "
operator|+
name|received
operator|.
name|getSize
argument_list|()
argument_list|,
name|received
operator|.
name|getSize
argument_list|()
operator|>=
name|sizeShouldBeNoLessThan
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|LENGTH10STRING
operator|.
name|length
argument_list|()
operator|*
literal|2
operator|==
name|received
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|bindAddress
operator|=
name|bindAddress
operator|+
literal|"?marshal=true"
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|messageList
operator|=
operator|new
name|ConsumerBean
argument_list|()
expr_stmt|;
name|messageList
operator|.
name|setVerbose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageConsumer
name|messageConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|messageConsumer
operator|.
name|setMessageListener
argument_list|(
name|messageList
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

