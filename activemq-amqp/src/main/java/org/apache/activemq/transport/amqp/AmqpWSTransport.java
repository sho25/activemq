begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpFrameParser
operator|.
name|AMQPFrameSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ws
operator|.
name|WSTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_comment
comment|/**  * An AMQP based WebSocket transport implementation.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpWSTransport
extends|extends
name|TransportSupport
implements|implements
name|WSTransport
implements|,
name|AMQPFrameSink
block|{
specifier|private
specifier|final
name|AmqpFrameParser
name|frameReader
init|=
operator|new
name|AmqpFrameParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|URI
name|remoteLocation
decl_stmt|;
specifier|private
name|WSTransportSink
name|outputSink
decl_stmt|;
specifier|private
name|int
name|receiveCounter
decl_stmt|;
specifier|private
name|X509Certificate
index|[]
name|certificates
decl_stmt|;
comment|/**      * Create a new Transport instance.      *      * @param location      *      the remote location where the client connection is from.      * @param wireFormat      *      the WireFormat instance that configures this Transport.      */
specifier|public
name|AmqpWSTransport
parameter_list|(
name|URI
name|location
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|remoteLocation
operator|=
name|location
expr_stmt|;
name|frameReader
operator|.
name|setWireFormat
argument_list|(
operator|(
name|AmqpWireFormat
operator|)
name|wireFormat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTransportSink
parameter_list|(
name|WSTransportSink
name|outputSink
parameter_list|)
block|{
name|this
operator|.
name|outputSink
operator|=
name|outputSink
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|oneway
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|command
operator|instanceof
name|ByteBuffer
condition|)
block|{
name|outputSink
operator|.
name|onSocketOutboundBinary
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unexpected output command."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteAddress
parameter_list|()
block|{
return|return
name|remoteLocation
operator|.
name|toASCIIString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReceiveCounter
parameter_list|()
block|{
return|return
name|receiveCounter
return|;
block|}
annotation|@
name|Override
specifier|public
name|X509Certificate
index|[]
name|getPeerCertificates
parameter_list|()
block|{
return|return
name|certificates
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPeerCertificates
parameter_list|(
name|X509Certificate
index|[]
name|certificates
parameter_list|)
block|{
name|this
operator|.
name|certificates
operator|=
name|certificates
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSubProtocol
parameter_list|()
block|{
return|return
literal|"amqp"
return|;
block|}
annotation|@
name|Override
specifier|public
name|WireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|frameReader
operator|.
name|getWireFormat
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Currently nothing needed here since we have no async workers.
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|outputSink
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Transport started before output sink assigned."
argument_list|)
throw|;
block|}
comment|// Currently nothing needed here since we have no async workers.
block|}
comment|//----- WebSocket event hooks --------------------------------------------//
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketText
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|onException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Illegal text content receive on AMQP WebSocket channel."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketBinary
parameter_list|(
name|ByteBuffer
name|data
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|frameReader
operator|.
name|parse
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onWebSocketClosed
parameter_list|()
throws|throws
name|IOException
block|{
name|onException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Unexpected close of AMQP WebSocket channel."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//----- AMQP Frame Data event hook ---------------------------------------//
annotation|@
name|Override
specifier|public
name|void
name|onFrame
parameter_list|(
name|Object
name|frame
parameter_list|)
block|{
name|doConsume
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

