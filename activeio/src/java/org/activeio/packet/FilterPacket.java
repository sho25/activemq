begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License. You may obtain a copy of  * the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_comment
comment|/**  * Provides a Packet implementation that filters operations to another packet.  *   * Used to make it easier to augment the {@see #narrow(Class)}method.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|FilterPacket
implements|implements
name|Packet
block|{
specifier|final
specifier|protected
name|Packet
name|next
decl_stmt|;
specifier|public
name|FilterPacket
parameter_list|(
name|Packet
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
specifier|public
name|ByteSequence
name|asByteSequence
parameter_list|()
block|{
return|return
name|next
operator|.
name|asByteSequence
argument_list|()
return|;
block|}
specifier|public
name|int
name|capacity
parameter_list|()
block|{
return|return
name|next
operator|.
name|capacity
argument_list|()
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|next
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|flip
parameter_list|()
block|{
name|next
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRemaining
parameter_list|()
block|{
return|return
name|next
operator|.
name|hasRemaining
argument_list|()
return|;
block|}
specifier|public
name|int
name|limit
parameter_list|()
block|{
return|return
name|next
operator|.
name|limit
argument_list|()
return|;
block|}
specifier|public
name|void
name|limit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|next
operator|.
name|limit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|next
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|next
operator|.
name|position
argument_list|()
return|;
block|}
specifier|public
name|void
name|position
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|next
operator|.
name|position
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
block|{
return|return
name|next
operator|.
name|read
argument_list|()
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|next
operator|.
name|read
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|Packet
name|dest
parameter_list|)
block|{
return|return
name|next
operator|.
name|read
argument_list|(
name|dest
argument_list|)
return|;
block|}
specifier|public
name|int
name|remaining
parameter_list|()
block|{
return|return
name|next
operator|.
name|remaining
argument_list|()
return|;
block|}
specifier|public
name|void
name|rewind
parameter_list|()
block|{
name|next
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|sliceAsBytes
parameter_list|()
block|{
return|return
name|next
operator|.
name|sliceAsBytes
argument_list|()
return|;
block|}
specifier|public
name|int
name|write
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|next
operator|.
name|write
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|write
parameter_list|(
name|int
name|data
parameter_list|)
block|{
return|return
name|next
operator|.
name|write
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|next
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|next
operator|.
name|writeTo
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|duplicate
parameter_list|(
name|ClassLoader
name|cl
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|next
operator|.
name|duplicate
argument_list|(
name|cl
argument_list|)
return|;
block|}
specifier|public
name|Packet
name|duplicate
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|next
operator|.
name|duplicate
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Packet
name|slice
parameter_list|()
block|{
return|return
name|filter
argument_list|(
name|next
operator|.
name|slice
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|next
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|abstract
specifier|public
name|Packet
name|filter
parameter_list|(
name|Packet
name|packet
parameter_list|)
function_decl|;
block|}
end_class

end_unit

