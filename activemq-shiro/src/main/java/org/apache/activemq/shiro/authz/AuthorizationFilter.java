begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authz
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|env
operator|.
name|EnvironmentFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|ConnectionSubjectResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|UnauthorizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|PrincipalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|subject
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * The {@code AuthorizationFilter} asserts that actions are allowed to execute first before they are actually  * executed.  Such actions include creating, removing, reading from and writing to destinations.  *<p/>  * This implementation is strictly permission-based, allowing for the finest-grained security policies possible.  * Whenever a {@link Subject} associated with a connection attempts to perform an {@link org.apache.activemq.shiro.authz.Action} (such as creating a  * destination, or reading from a queue, etc), one or more {@link Permission}s representing that {@code action} are  * checked.  *<p/>  * If the {@code Subject}{@link Subject#isPermitted(org.apache.shiro.authz.Permission) isPermitted} to perform the  * {@code action}, the action is allowed to execute and the broker filter chain executes uninterrupted.  *<p/>  * However, if the {@code Subject} is not permitted to perform the action, an {@link UnauthorizedException} will be  * thrown, preventing the filter chain from executing that action.  *<h2>ActionPermissionResolver</h2>  * The attempted {@code Action} is guarded by one or more {@link Permission}s as indicated by a configurable  * {@link #setActionPermissionResolver(org.apache.activemq.shiro.authz.ActionPermissionResolver) actionPermissionResolver}.  The  * {@code actionPermissionResolver} indicates which permissions must be granted to the connection {@code Subject} in  * order for the action to execute.  *<p/>  * The default {@code actionPermissionResolver} instance is a  * {@link org.apache.activemq.shiro.authz.DestinationActionPermissionResolver DestinationActionPermissionResolver}, which indicates which permissions  * are required to perform any action on a particular destination.  Those familiar with Shiro's  * {@link org.apache.shiro.authz.permission.WildcardPermission WildcardPermission} syntax will find the  * {@code DestinationActionPermissionResolver}'s  * {@link org.apache.activemq.shiro.authz.DestinationActionPermissionResolver#createPermissionString createPermissionString} method  * documentation valuable for understanding how destination actions are represented as permissions.  *  * @see org.apache.activemq.shiro.authz.ActionPermissionResolver  * @see org.apache.activemq.shiro.authz.DestinationActionPermissionResolver  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|AuthorizationFilter
extends|extends
name|EnvironmentFilter
block|{
specifier|private
name|ActionPermissionResolver
name|actionPermissionResolver
decl_stmt|;
specifier|public
name|AuthorizationFilter
parameter_list|()
block|{
name|this
operator|.
name|actionPermissionResolver
operator|=
operator|new
name|DestinationActionPermissionResolver
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to      * a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a      * destination, or reading from a queue, etc).  The default instance is a      * {@link DestinationActionPermissionResolver}.      *      * @return the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to      *         a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a      *         destination, or reading from a queue, etc).      */
specifier|public
name|ActionPermissionResolver
name|getActionPermissionResolver
parameter_list|()
block|{
return|return
name|actionPermissionResolver
return|;
block|}
comment|/**      * Sets the {@code ActionPermissionResolver} used to indicate which permissions are required to be granted to      * a {@link Subject} to perform a particular destination {@link org.apache.activemq.shiro.authz.Action}, (such as creating a      * destination, or reading from a queue, etc).  Unless overridden by this method, the default instance is a      * {@link DestinationActionPermissionResolver}.      *      * @param actionPermissionResolver the {@code ActionPermissionResolver} used to indicate which permissions are      *                                 required to be granted to a {@link Subject} to perform a particular destination      *                                 {@link org.apache.activemq.shiro.authz.Action}, (such as creating a destination, or reading from a queue, etc).      */
specifier|public
name|void
name|setActionPermissionResolver
parameter_list|(
name|ActionPermissionResolver
name|actionPermissionResolver
parameter_list|)
block|{
name|this
operator|.
name|actionPermissionResolver
operator|=
name|actionPermissionResolver
expr_stmt|;
block|}
comment|/**      * Returns the {@code Subject} associated with the specified connection using a      * {@link org.apache.activemq.shiro.subject.ConnectionSubjectResolver}.      *      * @param ctx the connection context      * @return the {@code Subject} associated with the specified connection.      */
specifier|protected
name|Subject
name|getSubject
parameter_list|(
name|ConnectionContext
name|ctx
parameter_list|)
block|{
return|return
operator|new
name|ConnectionSubjectResolver
argument_list|(
name|ctx
argument_list|)
operator|.
name|getSubject
argument_list|()
return|;
block|}
specifier|protected
name|String
name|toString
parameter_list|(
name|Subject
name|subject
parameter_list|)
block|{
name|PrincipalCollection
name|pc
init|=
name|subject
operator|.
name|getPrincipals
argument_list|()
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
operator|&&
operator|!
name|pc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|"["
operator|+
name|pc
operator|.
name|toString
argument_list|()
operator|+
literal|"] "
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|protected
name|void
name|assertAuthorized
parameter_list|(
name|DestinationAction
name|action
parameter_list|)
block|{
name|assertAuthorized
argument_list|(
name|action
argument_list|,
name|action
operator|.
name|getVerb
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//ActiveMQ internals will create a ConnectionContext with a SecurityContext that is not
comment|//Shiro specific.  We need to allow actions for internal system operations:
specifier|protected
name|boolean
name|isSystemBroker
parameter_list|(
name|DestinationAction
name|action
parameter_list|)
block|{
name|ConnectionContext
name|context
init|=
name|action
operator|.
name|getConnectionContext
argument_list|()
decl_stmt|;
name|SecurityContext
name|securityContext
init|=
name|context
operator|.
name|getSecurityContext
argument_list|()
decl_stmt|;
return|return
name|securityContext
operator|!=
literal|null
operator|&&
name|securityContext
operator|.
name|isBrokerContext
argument_list|()
return|;
block|}
specifier|protected
name|void
name|assertAuthorized
parameter_list|(
name|DestinationAction
name|action
parameter_list|,
name|String
name|verbText
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
operator|||
name|isSystemBroker
argument_list|(
name|action
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Subject
name|subject
init|=
name|getSubject
argument_list|(
name|action
operator|.
name|getConnectionContext
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|this
operator|.
name|actionPermissionResolver
operator|.
name|getPermissions
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subject
operator|.
name|isPermittedAll
argument_list|(
name|perms
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
name|createUnauthorizedMessage
argument_list|(
name|subject
argument_list|,
name|action
argument_list|,
name|verbText
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|UnauthorizedException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|String
name|createUnauthorizedMessage
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|DestinationAction
name|action
parameter_list|,
name|String
name|verbDisplayText
parameter_list|)
block|{
return|return
literal|"Subject "
operator|+
name|toString
argument_list|(
name|subject
argument_list|)
operator|+
literal|"is not authorized to "
operator|+
name|verbDisplayText
operator|+
literal|" destination: "
operator|+
name|action
operator|.
name|getDestination
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|"create"
argument_list|)
decl_stmt|;
name|assertAuthorized
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|super
operator|.
name|addDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Destination
name|addDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|Exception
block|{
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
literal|"create"
argument_list|)
decl_stmt|;
name|assertAuthorized
argument_list|(
name|action
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|create
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
literal|"remove"
argument_list|)
decl_stmt|;
name|assertAuthorized
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|"remove"
argument_list|)
decl_stmt|;
name|assertAuthorized
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Unlike when adding a producer, consumers must specify the destination at creation time, so we can rely on
comment|//a destination being available to perform the authz check:
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|"read"
argument_list|)
decl_stmt|;
name|assertAuthorized
argument_list|(
name|action
argument_list|,
literal|"read from"
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
comment|// JMS allows producers to be created without first specifying a destination.  In these cases, every send
comment|// operation must specify a destination.  Because of this, we only authorize 'addProducer' if a destination is
comment|// specified. If not specified, the authz check in the 'send' method below will ensure authorization.
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|"write"
argument_list|)
decl_stmt|;
name|assertAuthorized
argument_list|(
name|action
argument_list|,
literal|"write to"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
name|exchange
operator|.
name|getConnectionContext
argument_list|()
argument_list|,
name|message
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|"write"
argument_list|)
decl_stmt|;
name|assertAuthorized
argument_list|(
name|action
argument_list|,
literal|"write to"
argument_list|)
expr_stmt|;
name|super
operator|.
name|send
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

