begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_comment
comment|/**  * Priority dispatch policy that sends a message to every subscription that  * matches the message in consumer priority order.  *   * @org.apache.xbean.XBean  *   */
end_comment

begin_class
specifier|public
class|class
name|PriorityDispatchPolicy
extends|extends
name|SimpleDispatchPolicy
block|{
specifier|private
specifier|final
name|Comparator
argument_list|<
name|?
super|super
name|Subscription
argument_list|>
name|orderedCompare
init|=
operator|new
name|Comparator
argument_list|<
name|Subscription
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Subscription
name|o1
parameter_list|,
name|Subscription
name|o2
parameter_list|)
block|{
comment|// We want the list sorted in descending order
return|return
name|o2
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|-
name|o1
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|boolean
name|dispatch
parameter_list|(
name|MessageReference
name|node
parameter_list|,
name|MessageEvaluationContext
name|msgContext
parameter_list|,
name|List
argument_list|<
name|Subscription
argument_list|>
name|consumers
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
name|ordered
init|=
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|(
name|consumers
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ordered
argument_list|,
name|orderedCompare
argument_list|)
expr_stmt|;
name|StringBuffer
name|stringBuffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Subscription
name|sub
range|:
name|ordered
control|)
block|{
name|stringBuffer
operator|.
name|append
argument_list|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|stringBuffer
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
comment|//System.err.println("Priority:" + stringBuffer.toString() + ", msg: " + node.getMessage());
return|return
name|super
operator|.
name|dispatch
argument_list|(
name|node
argument_list|,
name|msgContext
argument_list|,
name|ordered
argument_list|)
return|;
block|}
block|}
end_class

end_unit

