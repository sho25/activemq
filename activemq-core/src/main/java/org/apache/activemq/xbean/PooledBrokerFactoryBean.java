begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|xbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|FactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_comment
comment|/**  * Used to share a single broker even if you have multiple broker bean  * definitions. A use case is where you have multiple web applications that want  * to start an embedded broker but only the first one to deploy should actually  * start it.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|PooledBrokerFactoryBean
implements|implements
name|FactoryBean
implements|,
name|InitializingBean
implements|,
name|DisposableBean
block|{
specifier|static
specifier|final
name|HashMap
name|sharedBrokerMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|start
decl_stmt|;
specifier|private
name|Resource
name|config
decl_stmt|;
specifier|static
class|class
name|SharedBroker
block|{
name|BrokerFactoryBean
name|factory
decl_stmt|;
name|int
name|refCount
decl_stmt|;
block|}
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|sharedBrokerMap
init|)
block|{
name|SharedBroker
name|sharedBroker
init|=
operator|(
name|SharedBroker
operator|)
name|sharedBrokerMap
operator|.
name|get
argument_list|(
name|config
operator|.
name|getFilename
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedBroker
operator|==
literal|null
condition|)
block|{
name|sharedBroker
operator|=
operator|new
name|SharedBroker
argument_list|()
expr_stmt|;
name|sharedBroker
operator|.
name|factory
operator|=
operator|new
name|BrokerFactoryBean
argument_list|()
expr_stmt|;
name|sharedBroker
operator|.
name|factory
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|sharedBroker
operator|.
name|factory
operator|.
name|setStart
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|sharedBroker
operator|.
name|factory
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|sharedBrokerMap
operator|.
name|put
argument_list|(
name|config
operator|.
name|getFilename
argument_list|()
argument_list|,
name|sharedBroker
argument_list|)
expr_stmt|;
block|}
name|sharedBroker
operator|.
name|refCount
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|sharedBrokerMap
init|)
block|{
name|SharedBroker
name|sharedBroker
init|=
operator|(
name|SharedBroker
operator|)
name|sharedBrokerMap
operator|.
name|get
argument_list|(
name|config
operator|.
name|getFilename
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedBroker
operator|!=
literal|null
condition|)
block|{
name|sharedBroker
operator|.
name|refCount
operator|--
expr_stmt|;
if|if
condition|(
name|sharedBroker
operator|.
name|refCount
operator|==
literal|0
condition|)
block|{
name|sharedBroker
operator|.
name|factory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|sharedBrokerMap
operator|.
name|remove
argument_list|(
name|config
operator|.
name|getFilename
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|Resource
name|getConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
specifier|public
name|Object
name|getObject
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|sharedBrokerMap
init|)
block|{
name|SharedBroker
name|sharedBroker
init|=
operator|(
name|SharedBroker
operator|)
name|sharedBrokerMap
operator|.
name|get
argument_list|(
name|config
operator|.
name|getFilename
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedBroker
operator|!=
literal|null
condition|)
block|{
return|return
name|sharedBroker
operator|.
name|factory
operator|.
name|getObject
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Class
name|getObjectType
parameter_list|()
block|{
return|return
name|BrokerService
operator|.
name|class
return|;
block|}
specifier|public
name|boolean
name|isSingleton
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isStart
parameter_list|()
block|{
return|return
name|start
return|;
block|}
specifier|public
name|void
name|setConfig
parameter_list|(
name|Resource
name|config
parameter_list|)
block|{
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|boolean
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
block|}
block|}
end_class

end_unit

