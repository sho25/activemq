begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|FunctionCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_comment
comment|/**  * Filter function that matches a value against a list of values and evaluates to an indicator of membership in the  * list.  For example:  *<p/>  *<p style="margin-left: 4em">  * INLIST( SPLIT('1,2,3', ',') , '2' )  *</p>  *<p/>  * Note that the first argument must be a List.  Strings containing lists are not acceptable; for example,  * INLIST('1,2,3', '1'), will cause an exception to be thrown at evaluation-time.  */
end_comment

begin_class
specifier|public
class|class
name|inListFunction
implements|implements
name|FilterFunction
block|{
comment|/**      * Check whether the given expression is a valid call of this function.  Two arguments are required.  Note that      * the evaluated results of the arguments will be compared with Object#equals().      *      * @param    expr - the expression consisting of a call to this function.      * @return true - if the expression is valid; false - otherwise.      */
specifier|public
name|boolean
name|isValid
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|.
name|getNumArguments
argument_list|()
operator|!=
literal|2
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|/**      * Check whether the given expression, which consists of a call to this function, evaluates to a Boolean.      * If the function can return different more than one type of value at evaluation-time, it must decide whether      * to cast the result to a Boolean at this time.      *      * @param    expr - the expression consisting of a call to this function.      * @return true - if the expression is valid; false - otherwise.      */
specifier|public
name|boolean
name|returnsBoolean
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Evalutate the given expression, which consists of a call to this function, in the context given.  Checks      * whether the second argument is a member of the list in the first argument.      *      * @param    expr - the expression consisting of a call to this function.      * @param    message_ctx - the context in which the call is being evaluated.      * @return Boolean - the result of the evaluation.      */
specifier|public
name|Object
name|evaluate
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|,
name|MessageEvaluationContext
name|message_ctx
parameter_list|)
throws|throws
name|javax
operator|.
name|jms
operator|.
name|JMSException
block|{
name|java
operator|.
name|util
operator|.
name|List
name|arr
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|Object
name|cand
decl_stmt|;
name|boolean
name|found_f
decl_stmt|;
name|arr
operator|=
operator|(
name|java
operator|.
name|util
operator|.
name|List
operator|)
name|expr
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
operator|.
name|evaluate
argument_list|(
name|message_ctx
argument_list|)
expr_stmt|;
name|cand
operator|=
name|expr
operator|.
name|getArgument
argument_list|(
literal|1
argument_list|)
operator|.
name|evaluate
argument_list|(
name|message_ctx
argument_list|)
expr_stmt|;
name|cur
operator|=
literal|0
expr_stmt|;
name|found_f
operator|=
literal|false
expr_stmt|;
while|while
condition|(
operator|(
name|cur
operator|<
name|arr
operator|.
name|size
argument_list|()
operator|)
operator|&&
operator|(
operator|!
name|found_f
operator|)
condition|)
block|{
name|found_f
operator|=
name|arr
operator|.
name|get
argument_list|(
name|cur
argument_list|)
operator|.
name|equals
argument_list|(
name|cand
argument_list|)
expr_stmt|;
name|cur
operator|++
expr_stmt|;
block|}
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|found_f
argument_list|)
return|;
block|}
block|}
end_class

end_unit

