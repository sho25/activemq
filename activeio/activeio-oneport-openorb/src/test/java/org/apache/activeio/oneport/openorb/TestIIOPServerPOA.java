begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
package|;
end_package

begin_comment
comment|/**  * Interface definition: TestIIOPServer.  *   * @author OpenORB Compiler  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TestIIOPServerPOA
extends|extends
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|Servant
implements|implements
name|TestIIOPServerOperations
implements|,
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|InvokeHandler
block|{
specifier|public
name|TestIIOPServer
name|_this
parameter_list|()
block|{
return|return
name|TestIIOPServerHelper
operator|.
name|narrow
argument_list|(
name|_this_object
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|TestIIOPServer
name|_this
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
name|orb
parameter_list|)
block|{
return|return
name|TestIIOPServerHelper
operator|.
name|narrow
argument_list|(
name|_this_object
argument_list|(
name|orb
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|_ids_list
init|=
block|{
literal|"IDL:org/activeio/oneport/TestIIOPServer:1.0"
block|}
decl_stmt|;
specifier|public
name|String
index|[]
name|_all_interfaces
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|PortableServer
operator|.
name|POA
name|poa
parameter_list|,
name|byte
index|[]
name|objectId
parameter_list|)
block|{
return|return
name|_ids_list
return|;
block|}
specifier|public
specifier|final
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|OutputStream
name|_invoke
parameter_list|(
specifier|final
name|String
name|opName
parameter_list|,
specifier|final
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|InputStream
name|_is
parameter_list|,
specifier|final
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ResponseHandler
name|handler
parameter_list|)
block|{
if|if
condition|(
name|opName
operator|.
name|equals
argument_list|(
literal|"test"
argument_list|)
condition|)
block|{
return|return
name|_invoke_test
argument_list|(
name|_is
argument_list|,
name|handler
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|BAD_OPERATION
argument_list|(
name|opName
argument_list|)
throw|;
block|}
block|}
comment|// helper methods
specifier|private
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|OutputStream
name|_invoke_test
parameter_list|(
specifier|final
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|InputStream
name|_is
parameter_list|,
specifier|final
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ResponseHandler
name|handler
parameter_list|)
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|OutputStream
name|_output
decl_stmt|;
name|test
argument_list|()
expr_stmt|;
name|_output
operator|=
name|handler
operator|.
name|createReply
argument_list|()
expr_stmt|;
return|return
name|_output
return|;
block|}
block|}
end_class

end_unit

