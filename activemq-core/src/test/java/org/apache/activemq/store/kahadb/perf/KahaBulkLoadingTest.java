begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|perf
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProgressPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_comment
comment|/**  * This tests bulk loading and unloading of messages to a Queue.s  *   * @version $Revision: 712224 $  */
end_comment

begin_class
specifier|public
class|class
name|KahaBulkLoadingTest
extends|extends
name|JmsTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KahaBulkLoadingTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|messageSize
init|=
literal|1024
operator|*
literal|4
decl_stmt|;
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/activemq-data/kahadb"
argument_list|)
argument_list|)
expr_stmt|;
comment|// kaha.deleteAllMessages();
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
operator|(
operator|(
name|TransportConnector
operator|)
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setUseAsyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
specifier|public
name|void
name|testQueueSendThenAddConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
decl_stmt|;
name|long
name|end
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|connection
operator|.
name|setUseCompression
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setAll
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|DUPS_OK_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Receiving messages that are in the queue"
argument_list|)
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|BytesMessage
name|msg
init|=
operator|(
name|BytesMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|int
name|consumed
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|consumed
operator|++
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|end
operator|=
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|end
operator|-
name|start
operator|)
operator|<
literal|5000
condition|)
block|{
name|msg
operator|=
operator|(
name|BytesMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|counter
operator|++
expr_stmt|;
name|consumed
operator|++
expr_stmt|;
name|end
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|size
operator|+=
name|msg
operator|.
name|getBodyLength
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumed: "
operator|+
operator|(
name|counter
operator|*
literal|1000.0
operator|/
operator|(
name|end
operator|-
name|start
operator|)
operator|)
operator|+
literal|" "
operator|+
literal|" messages/sec, "
operator|+
operator|(
literal|1.0
operator|*
name|size
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
operator|)
operator|*
operator|(
operator|(
literal|1000.0
operator|/
operator|(
name|end
operator|-
name|start
operator|)
operator|)
operator|)
operator|+
literal|" megs/sec "
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumed "
operator|+
name|consumed
operator|+
literal|" messages from the queue."
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending messages that are "
operator|+
operator|(
name|messageSize
operator|/
literal|1024.0
operator|)
operator|+
literal|"k large"
argument_list|)
expr_stmt|;
comment|// Send a message to the broker.
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|produced
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|end
operator|=
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|int
name|produceCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|end
operator|-
name|start
operator|)
operator|<
literal|5000
operator|&&
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|BytesMessage
name|bm
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|bm
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[
name|messageSize
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|bm
argument_list|)
expr_stmt|;
name|produceCount
operator|++
expr_stmt|;
name|produced
operator|++
expr_stmt|;
name|end
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Produced: "
operator|+
operator|(
name|produceCount
operator|*
literal|1000.0
operator|/
operator|(
name|end
operator|-
name|start
operator|)
operator|)
operator|+
literal|" messages/sec, "
operator|+
operator|(
literal|1.0
operator|*
name|produceCount
operator|*
name|messageSize
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
operator|)
operator|*
operator|(
operator|(
literal|1000.0
operator|/
operator|(
name|end
operator|-
name|start
operator|)
operator|)
operator|)
operator|+
literal|" megs/sec"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Prodcued "
operator|+
name|produced
operator|+
literal|" messages to the queue."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|KahaBulkLoadingTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

