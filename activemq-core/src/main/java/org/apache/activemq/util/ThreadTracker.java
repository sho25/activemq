begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Debugging tool to track entry points through code, useful to see runtime call paths  * To use, add to a method as follows:<code>  *  public void someMethod() {  *      ThreadTracker.track("someMethod");  *      ...  *  }</code>  *  and at some stage call<code>result</code> to get a LOG  *  output of the callers with an associated call count  *        */
end_comment

begin_class
specifier|public
class|class
name|ThreadTracker
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ThreadTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|HashMap
argument_list|<
name|String
argument_list|,
name|Tracker
argument_list|>
name|trackers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Tracker
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * track the stack trace of callers      * @param name the method being tracked      */
specifier|public
specifier|static
name|void
name|track
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Tracker
name|t
decl_stmt|;
synchronized|synchronized
init|(
name|trackers
init|)
block|{
name|t
operator|=
name|trackers
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|t
operator|=
operator|new
name|Tracker
argument_list|()
expr_stmt|;
name|trackers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|t
operator|.
name|track
argument_list|()
expr_stmt|;
block|}
comment|/**      * output the result of stack trace capture to the log      */
specifier|public
specifier|static
name|void
name|result
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Tracker
argument_list|>
name|t
range|:
name|trackers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Tracker: "
operator|+
name|t
operator|.
name|getKey
argument_list|()
operator|+
literal|", "
operator|+
name|t
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|" entry points..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Trace
name|trace
range|:
name|t
operator|.
name|getValue
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"count: "
operator|+
name|trace
operator|.
name|count
argument_list|,
name|trace
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Tracker: "
operator|+
name|t
operator|.
name|getKey
argument_list|()
operator|+
literal|", done."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
class|class
name|Trace
extends|extends
name|Throwable
block|{
specifier|public
name|int
name|count
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
name|int
name|size
decl_stmt|;
name|Trace
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|size
operator|=
name|this
operator|.
name|getStackTrace
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
block|}
end_class

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
class|class
name|Tracker
extends|extends
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|Trace
argument_list|>
block|{
specifier|public
name|void
name|track
parameter_list|()
block|{
name|Trace
name|current
init|=
operator|new
name|Trace
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|Trace
name|exist
init|=
name|get
argument_list|(
name|current
operator|.
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|exist
operator|!=
literal|null
condition|)
block|{
name|exist
operator|.
name|count
operator|++
expr_stmt|;
block|}
else|else
block|{
name|put
argument_list|(
name|current
operator|.
name|size
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

