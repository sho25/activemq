begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ClosedByInterruptException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LinkedNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LinkedNodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|RecoverableRandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ThreadPoolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Manages DataFiles  */
end_comment

begin_class
specifier|public
class|class
name|Journal
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CALLER_BUFFER_APPENDER
init|=
literal|"org.apache.kahadb.journal.CALLER_BUFFER_APPENDER"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|callerBufferAppender
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|CALLER_BUFFER_APPENDER
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PREALLOC_CHUNK_SIZE
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// ITEM_HEAD_SPACE = length + type+ reserved space + SOR
specifier|public
specifier|static
specifier|final
name|int
name|RECORD_HEAD_SPACE
init|=
literal|4
operator|+
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|USER_RECORD_TYPE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|BATCH_CONTROL_RECORD_TYPE
init|=
literal|2
decl_stmt|;
comment|// Batch Control Item holds a 4 byte size of the batch and a 8 byte checksum of the batch.
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|BATCH_CONTROL_RECORD_MAGIC
init|=
name|bytes
argument_list|(
literal|"WRITE BATCH"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BATCH_CONTROL_RECORD_SIZE
init|=
name|RECORD_HEAD_SPACE
operator|+
name|BATCH_CONTROL_RECORD_MAGIC
operator|.
name|length
operator|+
literal|4
operator|+
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|BATCH_CONTROL_RECORD_HEADER
init|=
name|createBatchControlRecordHeader
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BATCH_CONTROL_RECORD
init|=
name|createEmptyBatchControlRecordHeader
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|EOF_INT
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'q'
block|,
literal|'M'
block|,
literal|'a'
block|}
argument_list|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|EOF_EOT
init|=
literal|'4'
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|EOF_RECORD
init|=
name|createEofBatchAndLocationRecord
argument_list|()
decl_stmt|;
specifier|private
name|ScheduledExecutorService
name|scheduler
decl_stmt|;
comment|// tackle corruption when checksum is disabled or corrupt with zeros, minimize data loss
specifier|public
name|void
name|corruptRecoveryLocation
parameter_list|(
name|Location
name|recoveryPosition
parameter_list|)
throws|throws
name|IOException
block|{
name|DataFile
name|dataFile
init|=
name|getDataFile
argument_list|(
name|recoveryPosition
argument_list|)
decl_stmt|;
comment|// with corruption on recovery we have no faith in the content - slip to the next batch record or eof
name|DataFileAccessor
name|reader
init|=
name|accessorPool
operator|.
name|openDataFileAccessor
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|nextOffset
init|=
name|findNextBatchRecord
argument_list|(
name|reader
argument_list|,
name|recoveryPosition
operator|.
name|getOffset
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Sequence
name|sequence
init|=
operator|new
name|Sequence
argument_list|(
name|recoveryPosition
operator|.
name|getOffset
argument_list|()
argument_list|,
name|nextOffset
operator|>=
literal|0
condition|?
name|nextOffset
operator|-
literal|1
else|:
name|dataFile
operator|.
name|getLength
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Corrupt journal records found in '{}' between offsets: {}"
argument_list|,
name|dataFile
operator|.
name|getFile
argument_list|()
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
comment|// skip corruption on getNextLocation
name|recoveryPosition
operator|.
name|setOffset
argument_list|(
operator|(
name|int
operator|)
name|sequence
operator|.
name|getLast
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|recoveryPosition
operator|.
name|setSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dataFile
operator|.
name|corruptedBlocks
operator|.
name|add
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
finally|finally
block|{
name|accessorPool
operator|.
name|closeDataFileAccessor
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DataFileAccessorPool
name|getAccessorPool
parameter_list|()
block|{
return|return
name|accessorPool
return|;
block|}
specifier|public
enum|enum
name|PreallocationStrategy
block|{
name|SPARSE_FILE
block|,
name|OS_KERNEL_COPY
block|,
name|ZEROS
block|,
name|CHUNKED_ZEROS
block|;     }
specifier|public
enum|enum
name|PreallocationScope
block|{
name|ENTIRE_JOURNAL
block|,
name|ENTIRE_JOURNAL_ASYNC
block|,
name|NONE
block|;     }
specifier|public
enum|enum
name|JournalDiskSyncStrategy
block|{
name|ALWAYS
block|,
name|PERIODIC
block|,
name|NEVER
block|;     }
specifier|private
specifier|static
name|byte
index|[]
name|createBatchControlRecordHeader
parameter_list|()
block|{
try|try
init|(
name|DataByteArrayOutputStream
name|os
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
init|;
init|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|BATCH_CONTROL_RECORD_SIZE
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|BATCH_CONTROL_RECORD_TYPE
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|BATCH_CONTROL_RECORD_MAGIC
argument_list|)
expr_stmt|;
name|ByteSequence
name|sequence
init|=
name|os
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
name|sequence
operator|.
name|compact
argument_list|()
expr_stmt|;
return|return
name|sequence
operator|.
name|getData
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create batch control record header."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|createEmptyBatchControlRecordHeader
parameter_list|()
block|{
try|try
init|(
name|DataByteArrayOutputStream
name|os
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
init|;
init|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|BATCH_CONTROL_RECORD_SIZE
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|BATCH_CONTROL_RECORD_TYPE
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|BATCH_CONTROL_RECORD_MAGIC
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
name|ByteSequence
name|sequence
init|=
name|os
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
name|sequence
operator|.
name|compact
argument_list|()
expr_stmt|;
return|return
name|sequence
operator|.
name|getData
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create empty batch control record header."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|createEofBatchAndLocationRecord
parameter_list|()
block|{
try|try
init|(
name|DataByteArrayOutputStream
name|os
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
init|;
init|)
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|EOF_INT
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|EOF_EOT
argument_list|)
expr_stmt|;
name|ByteSequence
name|sequence
init|=
name|os
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
name|sequence
operator|.
name|compact
argument_list|()
expr_stmt|;
return|return
name|sequence
operator|.
name|getData
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not create eof header."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DIRECTORY
init|=
literal|"."
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ARCHIVE_DIRECTORY
init|=
literal|"data-archive"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FILE_PREFIX
init|=
literal|"db-"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FILE_SUFFIX
init|=
literal|".log"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_FILE_LENGTH
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|32
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CLEANUP_INTERVAL
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_WRITE_BATCH_SIZE
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Journal
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|WriteKey
argument_list|,
name|WriteCommand
argument_list|>
name|inflightWrites
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|WriteKey
argument_list|,
name|WriteCommand
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
name|DEFAULT_DIRECTORY
argument_list|)
decl_stmt|;
specifier|protected
name|File
name|directoryArchive
decl_stmt|;
specifier|private
name|boolean
name|directoryArchiveOverridden
init|=
literal|false
decl_stmt|;
specifier|protected
name|String
name|filePrefix
init|=
name|DEFAULT_FILE_PREFIX
decl_stmt|;
specifier|protected
name|String
name|fileSuffix
init|=
name|DEFAULT_FILE_SUFFIX
decl_stmt|;
specifier|protected
name|boolean
name|started
decl_stmt|;
specifier|protected
name|int
name|maxFileLength
init|=
name|DEFAULT_MAX_FILE_LENGTH
decl_stmt|;
specifier|protected
name|int
name|writeBatchSize
init|=
name|DEFAULT_MAX_WRITE_BATCH_SIZE
decl_stmt|;
specifier|protected
name|FileAppender
name|appender
decl_stmt|;
specifier|protected
name|DataFileAccessorPool
name|accessorPool
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|DataFile
argument_list|>
name|fileMap
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DataFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|File
argument_list|,
name|DataFile
argument_list|>
name|fileByFileMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|File
argument_list|,
name|DataFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|LinkedNodeList
argument_list|<
name|DataFile
argument_list|>
name|dataFiles
init|=
operator|new
name|LinkedNodeList
argument_list|<
name|DataFile
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|AtomicReference
argument_list|<
name|Location
argument_list|>
name|lastAppendLocation
init|=
operator|new
name|AtomicReference
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ScheduledFuture
name|cleanupTask
decl_stmt|;
specifier|protected
name|AtomicLong
name|totalLength
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|archiveDataLogs
decl_stmt|;
specifier|private
name|ReplicationTarget
name|replicationTarget
decl_stmt|;
specifier|protected
name|boolean
name|checksum
decl_stmt|;
specifier|protected
name|boolean
name|checkForCorruptionOnStartup
decl_stmt|;
specifier|protected
name|boolean
name|enableAsyncDiskSync
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|nextDataFileId
init|=
literal|1
decl_stmt|;
specifier|private
name|Object
name|dataFileIdLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|DataFile
argument_list|>
name|currentDataFile
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|DataFile
name|nextDataFile
decl_stmt|;
specifier|protected
name|PreallocationScope
name|preallocationScope
init|=
name|PreallocationScope
operator|.
name|ENTIRE_JOURNAL
decl_stmt|;
specifier|protected
name|PreallocationStrategy
name|preallocationStrategy
init|=
name|PreallocationStrategy
operator|.
name|SPARSE_FILE
decl_stmt|;
specifier|private
name|File
name|osKernelCopyTemplateFile
init|=
literal|null
decl_stmt|;
specifier|private
name|ByteBuffer
name|preAllocateDirectBuffer
init|=
literal|null
decl_stmt|;
specifier|protected
name|JournalDiskSyncStrategy
name|journalDiskSyncStrategy
init|=
name|JournalDiskSyncStrategy
operator|.
name|ALWAYS
decl_stmt|;
specifier|public
interface|interface
name|DataFileRemovedListener
block|{
name|void
name|fileRemoved
parameter_list|(
name|DataFile
name|datafile
parameter_list|)
function_decl|;
block|}
specifier|private
name|DataFileRemovedListener
name|dataFileRemovedListener
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|started
condition|)
block|{
return|return;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|accessorPool
operator|=
operator|new
name|DataFileAccessorPool
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
name|appender
operator|=
name|callerBufferAppender
condition|?
operator|new
name|CallerBufferingDataFileAppender
argument_list|(
name|this
argument_list|)
else|:
operator|new
name|DataFileAppender
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|n
parameter_list|)
block|{
return|return
name|dir
operator|.
name|equals
argument_list|(
name|directory
argument_list|)
operator|&&
name|n
operator|.
name|startsWith
argument_list|(
name|filePrefix
argument_list|)
operator|&&
name|n
operator|.
name|endsWith
argument_list|(
name|fileSuffix
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
try|try
block|{
name|String
name|n
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|numStr
init|=
name|n
operator|.
name|substring
argument_list|(
name|filePrefix
operator|.
name|length
argument_list|()
argument_list|,
name|n
operator|.
name|length
argument_list|()
operator|-
name|fileSuffix
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|num
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numStr
argument_list|)
decl_stmt|;
name|DataFile
name|dataFile
init|=
operator|new
name|DataFile
argument_list|(
name|file
argument_list|,
name|num
argument_list|)
decl_stmt|;
name|fileMap
operator|.
name|put
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
name|totalLength
operator|.
name|addAndGet
argument_list|(
name|dataFile
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Ignore file that do not match the pattern.
block|}
block|}
comment|// Sort the list so that we can link the DataFiles together in the
comment|// right order.
name|LinkedList
argument_list|<
name|DataFile
argument_list|>
name|l
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|(
name|fileMap
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|l
argument_list|)
expr_stmt|;
for|for
control|(
name|DataFile
name|df
range|:
name|l
control|)
block|{
if|if
condition|(
name|df
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// possibly the result of a previous failed write
name|LOG
operator|.
name|info
argument_list|(
literal|"ignoring zero length, partially initialised journal data file: "
operator|+
name|df
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|getLast
argument_list|()
operator|.
name|equals
argument_list|(
name|df
argument_list|)
operator|&&
name|isUnusedPreallocated
argument_list|(
name|df
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|dataFiles
operator|.
name|addLast
argument_list|(
name|df
argument_list|)
expr_stmt|;
name|fileByFileMap
operator|.
name|put
argument_list|(
name|df
operator|.
name|getFile
argument_list|()
argument_list|,
name|df
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCheckForCorruptionOnStartup
argument_list|()
condition|)
block|{
name|lastAppendLocation
operator|.
name|set
argument_list|(
name|recoveryCheck
argument_list|(
name|df
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|preallocationScope
operator|!=
name|PreallocationScope
operator|.
name|NONE
condition|)
block|{
switch|switch
condition|(
name|preallocationStrategy
condition|)
block|{
case|case
name|SPARSE_FILE
case|:
break|break;
case|case
name|OS_KERNEL_COPY
case|:
block|{
name|osKernelCopyTemplateFile
operator|=
name|createJournalTemplateFile
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|CHUNKED_ZEROS
case|:
block|{
name|preAllocateDirectBuffer
operator|=
name|allocateDirectBuffer
argument_list|(
name|PREALLOC_CHUNK_SIZE
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ZEROS
case|:
block|{
name|preAllocateDirectBuffer
operator|=
name|allocateDirectBuffer
argument_list|(
name|getMaxFileLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
name|scheduler
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|schedulerThread
init|=
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|schedulerThread
operator|.
name|setName
argument_list|(
literal|"ActiveMQ Journal Scheduled executor"
argument_list|)
expr_stmt|;
name|schedulerThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|schedulerThread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// init current write file
if|if
condition|(
name|dataFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nextDataFileId
operator|=
literal|1
expr_stmt|;
name|rotateWriteFile
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentDataFile
operator|.
name|set
argument_list|(
name|dataFiles
operator|.
name|getTail
argument_list|()
argument_list|)
expr_stmt|;
name|nextDataFileId
operator|=
name|currentDataFile
operator|.
name|get
argument_list|()
operator|.
name|dataFileId
operator|+
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|lastAppendLocation
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|DataFile
name|df
init|=
name|dataFiles
operator|.
name|getTail
argument_list|()
decl_stmt|;
name|lastAppendLocation
operator|.
name|set
argument_list|(
name|recoveryCheck
argument_list|(
name|df
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// ensure we don't report unused space of last journal file in size metric
if|if
condition|(
name|totalLength
operator|.
name|get
argument_list|()
operator|>
name|maxFileLength
operator|&&
name|lastAppendLocation
operator|.
name|get
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|>
literal|0
condition|)
block|{
name|totalLength
operator|.
name|addAndGet
argument_list|(
name|lastAppendLocation
operator|.
name|get
argument_list|()
operator|.
name|getOffset
argument_list|()
operator|-
name|maxFileLength
argument_list|)
expr_stmt|;
block|}
name|cleanupTask
operator|=
name|scheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|DEFAULT_CLEANUP_INTERVAL
argument_list|,
name|DEFAULT_CLEANUP_INTERVAL
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Startup took: "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ByteBuffer
name|allocateDirectBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocateDirect
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|put
argument_list|(
name|EOF_RECORD
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
specifier|public
name|void
name|preallocateEntireJournalDataFile
parameter_list|(
name|RecoverableRandomAccessFile
name|file
parameter_list|)
block|{
if|if
condition|(
name|PreallocationScope
operator|.
name|NONE
operator|!=
name|preallocationScope
condition|)
block|{
try|try
block|{
if|if
condition|(
name|PreallocationStrategy
operator|.
name|OS_KERNEL_COPY
operator|==
name|preallocationStrategy
condition|)
block|{
name|doPreallocationKernelCopy
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PreallocationStrategy
operator|.
name|ZEROS
operator|==
name|preallocationStrategy
condition|)
block|{
name|doPreallocationZeros
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|PreallocationStrategy
operator|.
name|CHUNKED_ZEROS
operator|==
name|preallocationStrategy
condition|)
block|{
name|doPreallocationChunkedZeros
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doPreallocationSparseFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|continueWithNoPrealloc
parameter_list|)
block|{
comment|// error on preallocation is non fatal, and we don't want to leak the journal handle
name|LOG
operator|.
name|error
argument_list|(
literal|"cound not preallocate journal data file"
argument_list|,
name|continueWithNoPrealloc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doPreallocationSparseFile
parameter_list|(
name|RecoverableRandomAccessFile
name|file
parameter_list|)
block|{
specifier|final
name|ByteBuffer
name|journalEof
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|EOF_RECORD
argument_list|)
decl_stmt|;
try|try
block|{
name|FileChannel
name|channel
init|=
name|file
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|channel
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|journalEof
argument_list|)
expr_stmt|;
name|channel
operator|.
name|position
argument_list|(
name|maxFileLength
operator|-
literal|5
argument_list|)
expr_stmt|;
name|journalEof
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|journalEof
argument_list|)
expr_stmt|;
name|channel
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|channel
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedByInterruptException
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Could not preallocate journal file with sparse file"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not preallocate journal file with sparse file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doPreallocationZeros
parameter_list|(
name|RecoverableRandomAccessFile
name|file
parameter_list|)
block|{
name|preAllocateDirectBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
try|try
block|{
name|FileChannel
name|channel
init|=
name|file
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|preAllocateDirectBuffer
argument_list|)
expr_stmt|;
name|channel
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|channel
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedByInterruptException
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Could not preallocate journal file with zeros"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not preallocate journal file with zeros"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doPreallocationKernelCopy
parameter_list|(
name|RecoverableRandomAccessFile
name|file
parameter_list|)
block|{
try|try
init|(
name|RandomAccessFile
name|templateRaf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|osKernelCopyTemplateFile
argument_list|,
literal|"rw"
argument_list|)
init|;
init|)
block|{
name|templateRaf
operator|.
name|getChannel
argument_list|()
operator|.
name|transferTo
argument_list|(
literal|0
argument_list|,
name|getMaxFileLength
argument_list|()
argument_list|,
name|file
operator|.
name|getChannel
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedByInterruptException
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Could not preallocate journal file with kernel copy"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not find the template file on disk at "
operator|+
name|osKernelCopyTemplateFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not transfer the template file to journal, transferFile="
operator|+
name|osKernelCopyTemplateFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|File
name|createJournalTemplateFile
parameter_list|()
block|{
name|String
name|fileName
init|=
literal|"db-log.template"
decl_stmt|;
name|File
name|rc
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
try|try
init|(
name|RandomAccessFile
name|templateRaf
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|rc
argument_list|,
literal|"rw"
argument_list|)
init|;
init|)
block|{
name|templateRaf
operator|.
name|getChannel
argument_list|()
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|EOF_RECORD
argument_list|)
argument_list|)
expr_stmt|;
name|templateRaf
operator|.
name|setLength
argument_list|(
name|maxFileLength
argument_list|)
expr_stmt|;
name|templateRaf
operator|.
name|getChannel
argument_list|()
operator|.
name|force
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not find the template file on disk at "
operator|+
name|osKernelCopyTemplateFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not transfer the template file to journal, transferFile="
operator|+
name|osKernelCopyTemplateFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|private
name|void
name|doPreallocationChunkedZeros
parameter_list|(
name|RecoverableRandomAccessFile
name|file
parameter_list|)
block|{
name|preAllocateDirectBuffer
operator|.
name|limit
argument_list|(
name|preAllocateDirectBuffer
operator|.
name|capacity
argument_list|()
argument_list|)
expr_stmt|;
name|preAllocateDirectBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
try|try
block|{
name|FileChannel
name|channel
init|=
name|file
operator|.
name|getChannel
argument_list|()
decl_stmt|;
name|int
name|remLen
init|=
name|maxFileLength
decl_stmt|;
while|while
condition|(
name|remLen
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|remLen
operator|<
name|preAllocateDirectBuffer
operator|.
name|remaining
argument_list|()
condition|)
block|{
name|preAllocateDirectBuffer
operator|.
name|limit
argument_list|(
name|remLen
argument_list|)
expr_stmt|;
block|}
name|int
name|writeLen
init|=
name|channel
operator|.
name|write
argument_list|(
name|preAllocateDirectBuffer
argument_list|)
decl_stmt|;
name|remLen
operator|-=
name|writeLen
expr_stmt|;
name|preAllocateDirectBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
name|channel
operator|.
name|force
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|channel
operator|.
name|position
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClosedByInterruptException
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Could not preallocate journal file with zeros"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not preallocate journal file with zeros! Will continue without preallocation"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|byte
index|[]
name|bytes
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
return|return
name|string
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isUnusedPreallocated
parameter_list|(
name|DataFile
name|dataFile
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|firstBatchRecordSize
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|preallocationScope
operator|==
name|PreallocationScope
operator|.
name|ENTIRE_JOURNAL_ASYNC
condition|)
block|{
name|Location
name|location
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|location
operator|.
name|setDataFileId
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DataFileAccessor
name|reader
init|=
name|accessorPool
operator|.
name|openDataFileAccessor
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
try|try
block|{
name|firstBatchRecordSize
operator|=
name|checkBatchRecord
argument_list|(
name|reader
argument_list|,
name|location
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{             }
finally|finally
block|{
name|accessorPool
operator|.
name|closeDataFileAccessor
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|firstBatchRecordSize
operator|==
literal|0
return|;
block|}
specifier|protected
name|Location
name|recoveryCheck
parameter_list|(
name|DataFile
name|dataFile
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|location
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|location
operator|.
name|setDataFileId
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DataFileAccessor
name|reader
init|=
name|accessorPool
operator|.
name|openDataFileAccessor
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|size
init|=
name|checkBatchRecord
argument_list|(
name|reader
argument_list|,
name|location
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>=
literal|0
operator|&&
name|location
operator|.
name|getOffset
argument_list|()
operator|+
name|BATCH_CONTROL_RECORD_SIZE
operator|+
name|size
operator|<=
name|dataFile
operator|.
name|getLength
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
comment|// eof batch record
break|break;
block|}
name|location
operator|.
name|setOffset
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
operator|+
name|BATCH_CONTROL_RECORD_SIZE
operator|+
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Perhaps it's just some corruption... scan through the
comment|// file to find the next valid batch record. We
comment|// may have subsequent valid batch records.
name|int
name|nextOffset
init|=
name|findNextBatchRecord
argument_list|(
name|reader
argument_list|,
name|location
operator|.
name|getOffset
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextOffset
operator|>=
literal|0
condition|)
block|{
name|Sequence
name|sequence
init|=
operator|new
name|Sequence
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
argument_list|,
name|nextOffset
operator|-
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Corrupt journal records found in '{}' between offsets: {}"
argument_list|,
name|dataFile
operator|.
name|getFile
argument_list|()
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
name|dataFile
operator|.
name|corruptedBlocks
operator|.
name|add
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|location
operator|.
name|setOffset
argument_list|(
name|nextOffset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
finally|finally
block|{
name|accessorPool
operator|.
name|closeDataFileAccessor
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|int
name|existingLen
init|=
name|dataFile
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|dataFile
operator|.
name|setLength
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingLen
operator|>
name|dataFile
operator|.
name|getLength
argument_list|()
condition|)
block|{
name|totalLength
operator|.
name|addAndGet
argument_list|(
name|dataFile
operator|.
name|getLength
argument_list|()
operator|-
name|existingLen
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dataFile
operator|.
name|corruptedBlocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Is the end of the data file corrupted?
if|if
condition|(
name|dataFile
operator|.
name|corruptedBlocks
operator|.
name|getTail
argument_list|()
operator|.
name|getLast
argument_list|()
operator|+
literal|1
operator|==
name|location
operator|.
name|getOffset
argument_list|()
condition|)
block|{
name|dataFile
operator|.
name|setLength
argument_list|(
operator|(
name|int
operator|)
name|dataFile
operator|.
name|corruptedBlocks
operator|.
name|removeLastSequence
argument_list|()
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|location
return|;
block|}
specifier|private
name|int
name|findNextBatchRecord
parameter_list|(
name|DataFileAccessor
name|reader
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteSequence
name|header
init|=
operator|new
name|ByteSequence
argument_list|(
name|BATCH_CONTROL_RECORD_HEADER
argument_list|)
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
decl_stmt|;
name|ByteSequence
name|bs
init|=
operator|new
name|ByteSequence
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|reader
operator|.
name|read
argument_list|(
name|offset
argument_list|,
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|pos
operator|=
name|bs
operator|.
name|indexOf
argument_list|(
name|header
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
return|return
name|offset
operator|+
name|pos
return|;
block|}
else|else
block|{
comment|// need to load the next data chunck in..
if|if
condition|(
name|bs
operator|.
name|length
operator|!=
name|data
operator|.
name|length
condition|)
block|{
comment|// If we had a short read then we were at EOF
return|return
operator|-
literal|1
return|;
block|}
name|offset
operator|+=
name|bs
operator|.
name|length
operator|-
name|BATCH_CONTROL_RECORD_HEADER
operator|.
name|length
expr_stmt|;
name|bs
operator|=
operator|new
name|ByteSequence
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|reader
operator|.
name|read
argument_list|(
name|offset
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|checkBatchRecord
parameter_list|(
name|DataFileAccessor
name|reader
parameter_list|,
name|int
name|offset
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|controlRecord
index|[]
init|=
operator|new
name|byte
index|[
name|BATCH_CONTROL_RECORD_SIZE
index|]
decl_stmt|;
try|try
init|(
name|DataByteArrayInputStream
name|controlIs
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|controlRecord
argument_list|)
init|;
init|)
block|{
name|reader
operator|.
name|readFully
argument_list|(
name|offset
argument_list|,
name|controlRecord
argument_list|)
expr_stmt|;
comment|// check for journal eof
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|EOF_RECORD
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|controlRecord
argument_list|,
literal|0
argument_list|,
name|EOF_RECORD
operator|.
name|length
argument_list|)
argument_list|)
condition|)
block|{
comment|// eof batch
return|return
literal|0
return|;
block|}
comment|// Assert that it's a batch record.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_CONTROL_RECORD_HEADER
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|controlIs
operator|.
name|readByte
argument_list|()
operator|!=
name|BATCH_CONTROL_RECORD_HEADER
index|[
name|i
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
name|int
name|size
init|=
name|controlIs
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
argument_list|<
literal|0
operator|||
name|size
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
operator|-
operator|(
name|BATCH_CONTROL_RECORD_SIZE
operator|+
name|EOF_RECORD
operator|.
name|length
operator|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|isChecksum
argument_list|()
condition|)
block|{
name|long
name|expectedChecksum
init|=
name|controlIs
operator|.
name|readLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedChecksum
operator|==
literal|0
condition|)
block|{
comment|// Checksuming was not enabled when the record was stored.
comment|// we can't validate the record :(
return|return
name|size
return|;
block|}
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|reader
operator|.
name|readFully
argument_list|(
name|offset
operator|+
name|BATCH_CONTROL_RECORD_SIZE
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|Checksum
name|checksum
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedChecksum
operator|!=
name|checksum
operator|.
name|getValue
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|size
return|;
block|}
block|}
name|void
name|addToTotalLength
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|totalLength
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|length
parameter_list|()
block|{
return|return
name|totalLength
operator|.
name|get
argument_list|()
return|;
block|}
specifier|private
name|void
name|rotateWriteFile
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|dataFileIdLock
init|)
block|{
name|DataFile
name|dataFile
init|=
name|nextDataFile
decl_stmt|;
if|if
condition|(
name|dataFile
operator|==
literal|null
condition|)
block|{
name|dataFile
operator|=
name|newDataFile
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|fileMap
operator|.
name|put
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
name|fileByFileMap
operator|.
name|put
argument_list|(
name|dataFile
operator|.
name|getFile
argument_list|()
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
name|dataFiles
operator|.
name|addLast
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
name|currentDataFile
operator|.
name|set
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
block|}
name|nextDataFile
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|PreallocationScope
operator|.
name|ENTIRE_JOURNAL_ASYNC
operator|==
name|preallocationScope
condition|)
block|{
name|preAllocateNextDataFileFuture
operator|=
name|scheduler
operator|.
name|submit
argument_list|(
name|preAllocateNextDataFileTask
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Runnable
name|preAllocateNextDataFileTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|nextDataFile
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|dataFileIdLock
init|)
block|{
try|try
block|{
name|nextDataFile
operator|=
name|newDataFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to proactively allocate data file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|volatile
name|Future
name|preAllocateNextDataFileFuture
decl_stmt|;
specifier|private
name|DataFile
name|newDataFile
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|nextNum
init|=
name|nextDataFileId
operator|++
decl_stmt|;
name|File
name|file
init|=
name|getFile
argument_list|(
name|nextNum
argument_list|)
decl_stmt|;
name|DataFile
name|nextWriteFile
init|=
operator|new
name|DataFile
argument_list|(
name|file
argument_list|,
name|nextNum
argument_list|)
decl_stmt|;
name|preallocateEntireJournalDataFile
argument_list|(
name|nextWriteFile
operator|.
name|appendRandomAccessFile
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nextWriteFile
return|;
block|}
specifier|public
name|DataFile
name|reserveDataFile
parameter_list|()
block|{
synchronized|synchronized
init|(
name|dataFileIdLock
init|)
block|{
name|int
name|nextNum
init|=
name|nextDataFileId
operator|++
decl_stmt|;
name|File
name|file
init|=
name|getFile
argument_list|(
name|nextNum
argument_list|)
decl_stmt|;
name|DataFile
name|reservedDataFile
init|=
operator|new
name|DataFile
argument_list|(
name|file
argument_list|,
name|nextNum
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|fileMap
operator|.
name|put
argument_list|(
name|reservedDataFile
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|reservedDataFile
argument_list|)
expr_stmt|;
name|fileByFileMap
operator|.
name|put
argument_list|(
name|file
argument_list|,
name|reservedDataFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dataFiles
operator|.
name|addLast
argument_list|(
name|reservedDataFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataFiles
operator|.
name|getTail
argument_list|()
operator|.
name|linkBefore
argument_list|(
name|reservedDataFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reservedDataFile
return|;
block|}
block|}
specifier|public
name|File
name|getFile
parameter_list|(
name|int
name|nextNum
parameter_list|)
block|{
name|String
name|fileName
init|=
name|filePrefix
operator|+
name|nextNum
operator|+
name|fileSuffix
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
return|return
name|file
return|;
block|}
name|DataFile
name|getDataFile
parameter_list|(
name|Location
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|Integer
name|key
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|item
operator|.
name|getDataFileId
argument_list|()
argument_list|)
decl_stmt|;
name|DataFile
name|dataFile
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|dataFile
operator|=
name|fileMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dataFile
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Looking for key "
operator|+
name|key
operator|+
literal|" but not found in fileMap: "
operator|+
name|fileMap
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not locate data file "
operator|+
name|getFile
argument_list|(
name|item
operator|.
name|getDataFileId
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|dataFile
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|!
name|started
condition|)
block|{
return|return;
block|}
name|cleanupTask
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|preAllocateNextDataFileFuture
operator|!=
literal|null
condition|)
block|{
name|preAllocateNextDataFileFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ThreadPoolUtils
operator|.
name|shutdownGraceful
argument_list|(
name|scheduler
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|accessorPool
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// the appender can be calling back to to the journal blocking a close AMQ-5620
name|appender
operator|.
name|close
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|fileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fileByFileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dataFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastAppendLocation
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|started
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|accessorPool
operator|!=
literal|null
condition|)
block|{
name|accessorPool
operator|.
name|disposeUnused
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Close all open file handles...
name|appender
operator|.
name|close
argument_list|()
expr_stmt|;
name|accessorPool
operator|.
name|close
argument_list|()
expr_stmt|;
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DataFile
argument_list|>
name|i
init|=
name|fileMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DataFile
name|dataFile
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|&=
name|dataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|preAllocateNextDataFileFuture
operator|!=
literal|null
condition|)
block|{
name|preAllocateNextDataFileFuture
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|dataFileIdLock
init|)
block|{
if|if
condition|(
name|nextDataFile
operator|!=
literal|null
condition|)
block|{
name|nextDataFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|nextDataFile
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|totalLength
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|fileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fileByFileMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lastAppendLocation
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|dataFiles
operator|=
operator|new
name|LinkedNodeList
argument_list|<
name|DataFile
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// reopen open file handles...
name|accessorPool
operator|=
operator|new
name|DataFileAccessorPool
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|appender
operator|=
operator|new
name|DataFileAppender
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|removeDataFiles
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|files
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Integer
name|key
range|:
name|files
control|)
block|{
comment|// Can't remove the data file (or subsequent files) that is currently being written to.
if|if
condition|(
name|key
operator|>=
name|lastAppendLocation
operator|.
name|get
argument_list|()
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|DataFile
name|dataFile
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|dataFile
operator|=
name|fileMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataFile
operator|!=
literal|null
condition|)
block|{
name|fileByFileMap
operator|.
name|remove
argument_list|(
name|dataFile
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
name|dataFile
operator|.
name|unlink
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataFile
operator|!=
literal|null
condition|)
block|{
name|forceRemoveDataFile
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|forceRemoveDataFile
parameter_list|(
name|DataFile
name|dataFile
parameter_list|)
throws|throws
name|IOException
block|{
name|accessorPool
operator|.
name|disposeDataFileAccessors
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
name|totalLength
operator|.
name|addAndGet
argument_list|(
operator|-
name|dataFile
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|archiveDataLogs
condition|)
block|{
name|File
name|directoryArchive
init|=
name|getDirectoryArchive
argument_list|()
decl_stmt|;
if|if
condition|(
name|directoryArchive
operator|.
name|exists
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Archive directory exists: {}"
argument_list|,
name|directoryArchive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|directoryArchive
operator|.
name|isAbsolute
argument_list|()
condition|)
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Archive directory [{}] does not exist - creating it now"
argument_list|,
name|directoryArchive
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directoryArchive
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Moving data file {} to {} "
argument_list|,
name|dataFile
argument_list|,
name|directoryArchive
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|dataFile
operator|.
name|move
argument_list|(
name|directoryArchive
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully moved data file"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting data file: {}"
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataFile
operator|.
name|delete
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Discarded data file: {}"
argument_list|,
name|dataFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to discard data file : {}"
argument_list|,
name|dataFile
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dataFileRemovedListener
operator|!=
literal|null
condition|)
block|{
name|dataFileRemovedListener
operator|.
name|fileRemoved
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return the maxFileLength      */
specifier|public
name|int
name|getMaxFileLength
parameter_list|()
block|{
return|return
name|maxFileLength
return|;
block|}
comment|/**      * @param maxFileLength the maxFileLength to set      */
specifier|public
name|void
name|setMaxFileLength
parameter_list|(
name|int
name|maxFileLength
parameter_list|)
block|{
name|this
operator|.
name|maxFileLength
operator|=
name|maxFileLength
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|directory
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Location
name|getNextLocation
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
name|Location
name|cur
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|DataFile
name|head
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|head
operator|=
name|dataFiles
operator|.
name|getHead
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|head
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|cur
operator|=
operator|new
name|Location
argument_list|()
expr_stmt|;
name|cur
operator|.
name|setDataFileId
argument_list|(
name|head
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|cur
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Set to the next offset..
if|if
condition|(
name|location
operator|.
name|getSize
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|cur
operator|=
operator|new
name|Location
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cur
operator|=
operator|new
name|Location
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|cur
operator|.
name|setOffset
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
operator|+
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|cur
operator|.
name|setOffset
argument_list|(
name|cur
operator|.
name|getOffset
argument_list|()
operator|+
name|cur
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DataFile
name|dataFile
init|=
name|getDataFile
argument_list|(
name|cur
argument_list|)
decl_stmt|;
comment|// Did it go into the next file??
if|if
condition|(
name|dataFile
operator|.
name|getLength
argument_list|()
operator|<=
name|cur
operator|.
name|getOffset
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
name|dataFile
operator|=
name|dataFile
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataFile
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|cur
operator|.
name|setDataFileId
argument_list|(
name|dataFile
operator|.
name|getDataFileId
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|cur
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Load in location size and type.
name|DataFileAccessor
name|reader
init|=
name|accessorPool
operator|.
name|openDataFileAccessor
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|readLocationDetails
argument_list|(
name|cur
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|accessorPool
operator|.
name|closeDataFileAccessor
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|Sequence
name|corruptedRange
init|=
name|dataFile
operator|.
name|corruptedBlocks
operator|.
name|get
argument_list|(
name|cur
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|corruptedRange
operator|!=
literal|null
condition|)
block|{
comment|// skip corruption
name|cur
operator|.
name|setSize
argument_list|(
operator|(
name|int
operator|)
name|corruptedRange
operator|.
name|range
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cur
operator|.
name|getSize
argument_list|()
operator|==
name|EOF_INT
operator|&&
name|cur
operator|.
name|getType
argument_list|()
operator|==
name|EOF_EOT
operator|||
operator|(
name|cur
operator|.
name|getType
argument_list|()
operator|==
literal|0
operator|&&
name|cur
operator|.
name|getSize
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
comment|// eof - jump to next datafile
comment|// EOF_INT and EOF_EOT replace 0,0 - we need to react to both for
comment|// replay of existing journals
comment|// possibly journal is larger than maxFileLength after config change
name|cur
operator|.
name|setSize
argument_list|(
name|EOF_RECORD
operator|.
name|length
argument_list|)
expr_stmt|;
name|cur
operator|.
name|setOffset
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|maxFileLength
argument_list|,
name|dataFile
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cur
operator|.
name|getType
argument_list|()
operator|==
name|USER_RECORD_TYPE
condition|)
block|{
comment|// Only return user records.
return|return
name|cur
return|;
block|}
block|}
block|}
specifier|public
name|ByteSequence
name|read
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
name|DataFile
name|dataFile
init|=
name|getDataFile
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|DataFileAccessor
name|reader
init|=
name|accessorPool
operator|.
name|openDataFileAccessor
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
name|ByteSequence
name|rc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|rc
operator|=
name|reader
operator|.
name|readRecord
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|accessorPool
operator|.
name|closeDataFileAccessor
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|Location
name|write
parameter_list|(
name|ByteSequence
name|data
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
name|Location
name|loc
init|=
name|appender
operator|.
name|storeItem
argument_list|(
name|data
argument_list|,
name|Location
operator|.
name|USER_TYPE
argument_list|,
name|sync
argument_list|)
decl_stmt|;
return|return
name|loc
return|;
block|}
specifier|public
name|Location
name|write
parameter_list|(
name|ByteSequence
name|data
parameter_list|,
name|Runnable
name|onComplete
parameter_list|)
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
name|Location
name|loc
init|=
name|appender
operator|.
name|storeItem
argument_list|(
name|data
argument_list|,
name|Location
operator|.
name|USER_TYPE
argument_list|,
name|onComplete
argument_list|)
decl_stmt|;
return|return
name|loc
return|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|Location
name|location
parameter_list|,
name|ByteSequence
name|data
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
name|DataFile
name|dataFile
init|=
name|getDataFile
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|DataFileAccessor
name|updater
init|=
name|accessorPool
operator|.
name|openDataFileAccessor
argument_list|(
name|dataFile
argument_list|)
decl_stmt|;
try|try
block|{
name|updater
operator|.
name|updateRecord
argument_list|(
name|location
argument_list|,
name|data
argument_list|,
name|sync
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|accessorPool
operator|.
name|closeDataFileAccessor
argument_list|(
name|updater
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PreallocationStrategy
name|getPreallocationStrategy
parameter_list|()
block|{
return|return
name|preallocationStrategy
return|;
block|}
specifier|public
name|void
name|setPreallocationStrategy
parameter_list|(
name|PreallocationStrategy
name|preallocationStrategy
parameter_list|)
block|{
name|this
operator|.
name|preallocationStrategy
operator|=
name|preallocationStrategy
expr_stmt|;
block|}
specifier|public
name|PreallocationScope
name|getPreallocationScope
parameter_list|()
block|{
return|return
name|preallocationScope
return|;
block|}
specifier|public
name|void
name|setPreallocationScope
parameter_list|(
name|PreallocationScope
name|preallocationScope
parameter_list|)
block|{
name|this
operator|.
name|preallocationScope
operator|=
name|preallocationScope
expr_stmt|;
block|}
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|String
name|getFilePrefix
parameter_list|()
block|{
return|return
name|filePrefix
return|;
block|}
specifier|public
name|void
name|setFilePrefix
parameter_list|(
name|String
name|filePrefix
parameter_list|)
block|{
name|this
operator|.
name|filePrefix
operator|=
name|filePrefix
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|WriteKey
argument_list|,
name|WriteCommand
argument_list|>
name|getInflightWrites
parameter_list|()
block|{
return|return
name|inflightWrites
return|;
block|}
specifier|public
name|Location
name|getLastAppendLocation
parameter_list|()
block|{
return|return
name|lastAppendLocation
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setLastAppendLocation
parameter_list|(
name|Location
name|lastSyncedLocation
parameter_list|)
block|{
name|this
operator|.
name|lastAppendLocation
operator|.
name|set
argument_list|(
name|lastSyncedLocation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|File
name|getDirectoryArchive
parameter_list|()
block|{
if|if
condition|(
operator|!
name|directoryArchiveOverridden
operator|&&
operator|(
name|directoryArchive
operator|==
literal|null
operator|)
condition|)
block|{
comment|// create the directoryArchive relative to the journal location
name|directoryArchive
operator|=
operator|new
name|File
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|DEFAULT_ARCHIVE_DIRECTORY
argument_list|)
expr_stmt|;
block|}
return|return
name|directoryArchive
return|;
block|}
specifier|public
name|void
name|setDirectoryArchive
parameter_list|(
name|File
name|directoryArchive
parameter_list|)
block|{
name|directoryArchiveOverridden
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|directoryArchive
operator|=
name|directoryArchive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isArchiveDataLogs
parameter_list|()
block|{
return|return
name|archiveDataLogs
return|;
block|}
specifier|public
name|void
name|setArchiveDataLogs
parameter_list|(
name|boolean
name|archiveDataLogs
parameter_list|)
block|{
name|this
operator|.
name|archiveDataLogs
operator|=
name|archiveDataLogs
expr_stmt|;
block|}
specifier|public
name|DataFile
name|getDataFileById
parameter_list|(
name|int
name|dataFileId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
return|return
name|fileMap
operator|.
name|get
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|dataFileId
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|DataFile
name|getCurrentDataFile
parameter_list|(
name|int
name|capacity
parameter_list|)
throws|throws
name|IOException
block|{
comment|//First just acquire the currentDataFile lock and return if no rotation needed
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
if|if
condition|(
name|currentDataFile
operator|.
name|get
argument_list|()
operator|.
name|getLength
argument_list|()
operator|+
name|capacity
operator|<
name|maxFileLength
condition|)
block|{
return|return
name|currentDataFile
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|//AMQ-6545 - if rotation needed, acquire dataFileIdLock first to prevent deadlocks
comment|//then re-check if rotation is needed
synchronized|synchronized
init|(
name|dataFileIdLock
init|)
block|{
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
if|if
condition|(
name|currentDataFile
operator|.
name|get
argument_list|()
operator|.
name|getLength
argument_list|()
operator|+
name|capacity
operator|>=
name|maxFileLength
condition|)
block|{
name|rotateWriteFile
argument_list|()
expr_stmt|;
block|}
return|return
name|currentDataFile
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
specifier|public
name|Integer
name|getCurrentDataFileId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
return|return
name|currentDataFile
operator|.
name|get
argument_list|()
operator|.
name|getDataFileId
argument_list|()
return|;
block|}
block|}
comment|/**      * Get a set of files - only valid after start()      *      * @return files currently being used      */
specifier|public
name|Set
argument_list|<
name|File
argument_list|>
name|getFiles
parameter_list|()
block|{
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
return|return
name|fileByFileMap
operator|.
name|keySet
argument_list|()
return|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|Integer
argument_list|,
name|DataFile
argument_list|>
name|getFileMap
parameter_list|()
block|{
synchronized|synchronized
init|(
name|currentDataFile
init|)
block|{
return|return
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|DataFile
argument_list|>
argument_list|(
name|fileMap
argument_list|)
return|;
block|}
block|}
specifier|public
name|long
name|getDiskSize
parameter_list|()
block|{
return|return
name|totalLength
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setReplicationTarget
parameter_list|(
name|ReplicationTarget
name|replicationTarget
parameter_list|)
block|{
name|this
operator|.
name|replicationTarget
operator|=
name|replicationTarget
expr_stmt|;
block|}
specifier|public
name|ReplicationTarget
name|getReplicationTarget
parameter_list|()
block|{
return|return
name|replicationTarget
return|;
block|}
specifier|public
name|String
name|getFileSuffix
parameter_list|()
block|{
return|return
name|fileSuffix
return|;
block|}
specifier|public
name|void
name|setFileSuffix
parameter_list|(
name|String
name|fileSuffix
parameter_list|)
block|{
name|this
operator|.
name|fileSuffix
operator|=
name|fileSuffix
expr_stmt|;
block|}
specifier|public
name|boolean
name|isChecksum
parameter_list|()
block|{
return|return
name|checksum
return|;
block|}
specifier|public
name|void
name|setChecksum
parameter_list|(
name|boolean
name|checksumWrites
parameter_list|)
block|{
name|this
operator|.
name|checksum
operator|=
name|checksumWrites
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCheckForCorruptionOnStartup
parameter_list|()
block|{
return|return
name|checkForCorruptionOnStartup
return|;
block|}
specifier|public
name|void
name|setCheckForCorruptionOnStartup
parameter_list|(
name|boolean
name|checkForCorruptionOnStartup
parameter_list|)
block|{
name|this
operator|.
name|checkForCorruptionOnStartup
operator|=
name|checkForCorruptionOnStartup
expr_stmt|;
block|}
specifier|public
name|void
name|setWriteBatchSize
parameter_list|(
name|int
name|writeBatchSize
parameter_list|)
block|{
name|this
operator|.
name|writeBatchSize
operator|=
name|writeBatchSize
expr_stmt|;
block|}
specifier|public
name|int
name|getWriteBatchSize
parameter_list|()
block|{
return|return
name|writeBatchSize
return|;
block|}
specifier|public
name|void
name|setSizeAccumulator
parameter_list|(
name|AtomicLong
name|storeSizeAccumulator
parameter_list|)
block|{
name|this
operator|.
name|totalLength
operator|=
name|storeSizeAccumulator
expr_stmt|;
block|}
specifier|public
name|void
name|setEnableAsyncDiskSync
parameter_list|(
name|boolean
name|val
parameter_list|)
block|{
name|this
operator|.
name|enableAsyncDiskSync
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnableAsyncDiskSync
parameter_list|()
block|{
return|return
name|enableAsyncDiskSync
return|;
block|}
specifier|public
name|JournalDiskSyncStrategy
name|getJournalDiskSyncStrategy
parameter_list|()
block|{
return|return
name|journalDiskSyncStrategy
return|;
block|}
specifier|public
name|void
name|setJournalDiskSyncStrategy
parameter_list|(
name|JournalDiskSyncStrategy
name|journalDiskSyncStrategy
parameter_list|)
block|{
name|this
operator|.
name|journalDiskSyncStrategy
operator|=
name|journalDiskSyncStrategy
expr_stmt|;
block|}
specifier|public
name|boolean
name|isJournalDiskSyncPeriodic
parameter_list|()
block|{
return|return
name|JournalDiskSyncStrategy
operator|.
name|PERIODIC
operator|.
name|equals
argument_list|(
name|journalDiskSyncStrategy
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDataFileRemovedListener
parameter_list|(
name|DataFileRemovedListener
name|dataFileRemovedListener
parameter_list|)
block|{
name|this
operator|.
name|dataFileRemovedListener
operator|=
name|dataFileRemovedListener
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|WriteCommand
extends|extends
name|LinkedNode
argument_list|<
name|WriteCommand
argument_list|>
block|{
specifier|public
specifier|final
name|Location
name|location
decl_stmt|;
specifier|public
specifier|final
name|ByteSequence
name|data
decl_stmt|;
specifier|final
name|boolean
name|sync
decl_stmt|;
specifier|public
specifier|final
name|Runnable
name|onComplete
decl_stmt|;
specifier|public
name|WriteCommand
parameter_list|(
name|Location
name|location
parameter_list|,
name|ByteSequence
name|data
parameter_list|,
name|boolean
name|sync
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|sync
operator|=
name|sync
expr_stmt|;
name|this
operator|.
name|onComplete
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|WriteCommand
parameter_list|(
name|Location
name|location
parameter_list|,
name|ByteSequence
name|data
parameter_list|,
name|Runnable
name|onComplete
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|onComplete
operator|=
name|onComplete
expr_stmt|;
name|this
operator|.
name|sync
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WriteKey
block|{
specifier|private
specifier|final
name|int
name|file
decl_stmt|;
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
specifier|private
specifier|final
name|int
name|hash
decl_stmt|;
specifier|public
name|WriteKey
parameter_list|(
name|Location
name|item
parameter_list|)
block|{
name|file
operator|=
name|item
operator|.
name|getDataFileId
argument_list|()
expr_stmt|;
name|offset
operator|=
name|item
operator|.
name|getOffset
argument_list|()
expr_stmt|;
comment|// TODO: see if we can build a better hash
name|hash
operator|=
call|(
name|int
call|)
argument_list|(
name|file
operator|^
name|offset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|WriteKey
condition|)
block|{
name|WriteKey
name|di
init|=
operator|(
name|WriteKey
operator|)
name|obj
decl_stmt|;
return|return
name|di
operator|.
name|file
operator|==
name|file
operator|&&
name|di
operator|.
name|offset
operator|==
name|offset
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

