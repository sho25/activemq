begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|group
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|ClusterEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|ClusterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|DestinationMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|impl
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activecluster
operator|.
name|impl
operator|.
name|SimpleDestinationMarshaller
import|;
end_import

begin_comment
comment|/**  * A base class for Group model testing  *  * @version $Revision: 1.5 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GroupTestSupport
extends|extends
name|TestCase
block|{
specifier|protected
name|GroupModel
name|model
decl_stmt|;
specifier|private
name|ClusterListener
name|listener
decl_stmt|;
specifier|private
name|Cluster
name|cluster
decl_stmt|;
specifier|private
name|Map
name|nodes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|DestinationMarshaller
name|marshaller
init|=
operator|new
name|SimpleDestinationMarshaller
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|addNodes
parameter_list|(
name|String
index|[]
name|nodeNames
parameter_list|)
throws|throws
name|JMSException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodeNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|nodeNames
index|[
name|i
index|]
decl_stmt|;
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addNode
parameter_list|(
name|String
name|nodeName
parameter_list|)
throws|throws
name|JMSException
block|{
name|Node
name|node
init|=
operator|new
name|NodeImpl
argument_list|(
name|nodeName
argument_list|,
name|marshaller
operator|.
name|getDestination
argument_list|(
name|nodeName
argument_list|)
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onNodeAdd
argument_list|(
operator|new
name|ClusterEvent
argument_list|(
name|cluster
argument_list|,
name|node
argument_list|,
name|ClusterEvent
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertFull
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Group is not full and usable. Members: "
operator|+
name|group
operator|.
name|getMembers
argument_list|()
argument_list|,
name|group
operator|.
name|isFull
argument_list|()
operator|&&
name|group
operator|.
name|isUsable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertNotFullButUsable
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Group is not not full but usable. Members: "
operator|+
name|group
operator|.
name|getMembers
argument_list|()
argument_list|,
operator|!
name|group
operator|.
name|isFull
argument_list|()
operator|&&
name|group
operator|.
name|isUsable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertIncomplete
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Group is not not full or usable. Members: "
operator|+
name|group
operator|.
name|getMembers
argument_list|()
argument_list|,
operator|!
name|group
operator|.
name|isFull
argument_list|()
operator|&&
operator|!
name|group
operator|.
name|isUsable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertUsable
parameter_list|(
name|Group
name|group
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Group is not usable. Members: "
operator|+
name|group
operator|.
name|getMembers
argument_list|()
argument_list|,
name|group
operator|.
name|isUsable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|model
operator|=
name|createGroupModel
argument_list|()
expr_stmt|;
name|listener
operator|=
operator|new
name|GroupClusterListener
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|GroupModel
name|createGroupModel
parameter_list|()
block|{
return|return
operator|new
name|GroupModel
argument_list|()
return|;
block|}
block|}
end_class

end_unit

