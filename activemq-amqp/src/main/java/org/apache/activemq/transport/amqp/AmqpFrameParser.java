begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpWireFormat
operator|.
name|ResetListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * State based Frame reader that is used in the NIO based transports where  * AMQP frames can come in in partial or overlapping forms.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpFrameParser
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpFrameParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
interface|interface
name|AMQPFrameSink
block|{
name|void
name|onFrame
parameter_list|(
name|Object
name|frame
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|byte
name|AMQP_FRAME_SIZE_BYTES
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
name|AMQP_HEADER_BYTES
init|=
literal|8
decl_stmt|;
specifier|private
specifier|final
name|AMQPFrameSink
name|frameSink
decl_stmt|;
specifier|private
name|FrameParser
name|currentParser
decl_stmt|;
specifier|private
name|AmqpWireFormat
name|wireFormat
decl_stmt|;
specifier|public
name|AmqpFrameParser
parameter_list|(
name|AMQPFrameSink
name|sink
parameter_list|)
block|{
name|this
operator|.
name|frameSink
operator|=
name|sink
expr_stmt|;
block|}
specifier|public
name|AmqpFrameParser
parameter_list|(
specifier|final
name|TcpTransport
name|transport
parameter_list|)
block|{
name|this
operator|.
name|frameSink
operator|=
operator|new
name|AMQPFrameSink
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFrame
parameter_list|(
name|Object
name|frame
parameter_list|)
block|{
name|transport
operator|.
name|doConsume
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|ByteBuffer
name|incoming
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|incoming
operator|==
literal|null
operator|||
operator|!
name|incoming
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|currentParser
operator|==
literal|null
condition|)
block|{
name|currentParser
operator|=
name|initializeHeaderParser
argument_list|()
expr_stmt|;
block|}
comment|// Parser stack will run until current incoming data has all been consumed.
name|currentParser
operator|.
name|parse
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|currentParser
operator|=
name|initializeHeaderParser
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|validateFrameSize
parameter_list|(
name|int
name|frameSize
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|maxFrameSize
init|=
name|AmqpWireFormat
operator|.
name|DEFAULT_MAX_FRAME_SIZE
decl_stmt|;
if|if
condition|(
name|wireFormat
operator|!=
literal|null
condition|)
block|{
name|maxFrameSize
operator|=
name|wireFormat
operator|.
name|getMaxFrameSize
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|frameSize
operator|>
name|maxFrameSize
condition|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|createFrameSizeException
argument_list|(
name|frameSize
argument_list|,
name|maxFrameSize
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setWireFormat
parameter_list|(
name|AmqpWireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
if|if
condition|(
name|wireFormat
operator|!=
literal|null
condition|)
block|{
name|wireFormat
operator|.
name|setProtocolResetListener
argument_list|(
operator|new
name|ResetListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onProtocolReset
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|AmqpWireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|wireFormat
return|;
block|}
comment|//----- Prepare the current frame parser for use -------------------------//
specifier|private
name|FrameParser
name|initializeHeaderParser
parameter_list|()
block|{
name|headerReader
operator|.
name|reset
argument_list|(
name|AMQP_HEADER_BYTES
argument_list|)
expr_stmt|;
return|return
name|headerReader
return|;
block|}
specifier|private
name|FrameParser
name|initializeFrameLengthParser
parameter_list|()
block|{
name|frameSizeReader
operator|.
name|reset
argument_list|(
name|AMQP_FRAME_SIZE_BYTES
argument_list|)
expr_stmt|;
return|return
name|frameSizeReader
return|;
block|}
specifier|private
name|FrameParser
name|initializeContentReader
parameter_list|(
name|int
name|contentLength
parameter_list|)
block|{
name|contentReader
operator|.
name|reset
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
return|return
name|contentReader
return|;
block|}
comment|//----- Frame parser implementations -------------------------------------//
specifier|private
interface|interface
name|FrameParser
block|{
name|void
name|parse
parameter_list|(
name|ByteBuffer
name|incoming
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|reset
parameter_list|(
name|int
name|nextExpectedReadSize
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|final
name|FrameParser
name|headerReader
init|=
operator|new
name|FrameParser
argument_list|()
block|{
specifier|private
specifier|final
name|Buffer
name|header
init|=
operator|new
name|Buffer
argument_list|(
name|AMQP_HEADER_BYTES
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|ByteBuffer
name|incoming
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|incoming
operator|.
name|remaining
argument_list|()
argument_list|,
name|header
operator|.
name|length
operator|-
name|header
operator|.
name|offset
argument_list|)
decl_stmt|;
name|incoming
operator|.
name|get
argument_list|(
name|header
operator|.
name|data
argument_list|,
name|header
operator|.
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|header
operator|.
name|offset
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|offset
operator|==
name|AMQP_HEADER_BYTES
condition|)
block|{
name|header
operator|.
name|reset
argument_list|()
expr_stmt|;
name|AmqpHeader
name|amqpHeader
init|=
operator|new
name|AmqpHeader
argument_list|(
name|header
operator|.
name|deepCopy
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|currentParser
operator|=
name|initializeFrameLengthParser
argument_list|()
expr_stmt|;
name|frameSink
operator|.
name|onFrame
argument_list|(
name|amqpHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|incoming
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentParser
operator|.
name|parse
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|nextExpectedReadSize
parameter_list|)
block|{
name|header
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|FrameParser
name|frameSizeReader
init|=
operator|new
name|FrameParser
argument_list|()
block|{
specifier|private
name|int
name|frameSize
decl_stmt|;
specifier|private
name|int
name|multiplier
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|ByteBuffer
name|incoming
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|incoming
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|frameSize
operator|+=
operator|(
operator|(
name|incoming
operator|.
name|get
argument_list|()
operator|&
literal|0xFF
operator|)
operator|<<
operator|--
name|multiplier
operator|*
name|Byte
operator|.
name|SIZE
operator|)
expr_stmt|;
if|if
condition|(
name|multiplier
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Next incoming frame length: {}"
argument_list|,
name|frameSize
argument_list|)
expr_stmt|;
name|validateFrameSize
argument_list|(
name|frameSize
argument_list|)
expr_stmt|;
name|currentParser
operator|=
name|initializeContentReader
argument_list|(
name|frameSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|incoming
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentParser
operator|.
name|parse
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|nextExpectedReadSize
parameter_list|)
block|{
name|multiplier
operator|=
name|AMQP_FRAME_SIZE_BYTES
expr_stmt|;
name|frameSize
operator|=
literal|0
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|FrameParser
name|contentReader
init|=
operator|new
name|FrameParser
argument_list|()
block|{
specifier|private
name|Buffer
name|frame
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|ByteBuffer
name|incoming
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|length
init|=
name|Math
operator|.
name|min
argument_list|(
name|incoming
operator|.
name|remaining
argument_list|()
argument_list|,
name|frame
operator|.
name|getLength
argument_list|()
operator|-
name|frame
operator|.
name|offset
argument_list|)
decl_stmt|;
name|incoming
operator|.
name|get
argument_list|(
name|frame
operator|.
name|data
argument_list|,
name|frame
operator|.
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|frame
operator|.
name|offset
operator|+=
name|length
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|offset
operator|==
name|frame
operator|.
name|length
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Contents of size {} have been read"
argument_list|,
name|frame
operator|.
name|length
argument_list|)
expr_stmt|;
name|frame
operator|.
name|reset
argument_list|()
expr_stmt|;
name|frameSink
operator|.
name|onFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentParser
operator|==
name|this
condition|)
block|{
name|currentParser
operator|=
name|initializeFrameLengthParser
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentParser
operator|.
name|parse
argument_list|(
name|incoming
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
name|int
name|nextExpectedReadSize
parameter_list|)
block|{
comment|// Allocate a new Buffer to hold the incoming frame.  We must write
comment|// back the frame size value before continue on to read the indicated
comment|// frame size minus the size of the AMQP frame size header value.
name|frame
operator|=
operator|new
name|Buffer
argument_list|(
name|nextExpectedReadSize
argument_list|)
expr_stmt|;
name|frame
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|writeInt
argument_list|(
name|nextExpectedReadSize
argument_list|)
expr_stmt|;
comment|// Reset the length to total length as we do direct write after this.
name|frame
operator|.
name|length
operator|=
name|frame
operator|.
name|data
operator|.
name|length
expr_stmt|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

