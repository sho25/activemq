begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|StorePendingDurableSubscriberMessageStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|JdbcDurableSubDupTest
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JdbcDurableSubDupTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|int
name|prefetchVal
init|=
literal|150
decl_stmt|;
name|String
name|urlOptions
init|=
literal|"jms.watchTopicAdvisories=false"
decl_stmt|;
name|String
name|url
init|=
literal|null
decl_stmt|;
name|String
name|queueName
init|=
literal|"topicTest?consumer.prefetchSize="
operator|+
name|prefetchVal
decl_stmt|;
name|String
name|xmlMessage
init|=
literal|"<Example 01234567890123456789012345678901234567890123456789 MessageText>"
decl_stmt|;
name|String
name|selector
init|=
literal|""
decl_stmt|;
name|String
name|clntVersion
init|=
literal|"87"
decl_stmt|;
name|String
name|clntId
init|=
literal|"timsClntId345"
operator|+
name|clntVersion
decl_stmt|;
name|String
name|subscriptionName
init|=
literal|"subscriptionName-y"
operator|+
name|clntVersion
decl_stmt|;
name|SimpleDateFormat
name|dtf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|TO_RECEIVE
init|=
literal|5000
decl_stmt|;
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
name|Vector
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
specifier|final
name|int
name|MAX_MESSAGES
init|=
literal|100000
decl_stmt|;
name|int
index|[]
name|dupChecker
init|=
operator|new
name|int
index|[
name|MAX_MESSAGES
index|]
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|exceptions
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|dupChecker
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|JDBCPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policyEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policyEntry
operator|.
name|setMaxAuditDepth
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setMaxPageSize
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|policyEntry
operator|.
name|setPrioritizedMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|policyEntry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|url
operator|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"?"
operator|+
name|urlOptions
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoDupsOnSlowConsumerReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|JmsConsumerDup
name|consumer
init|=
operator|new
name|JmsConsumerDup
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|run
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|done
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"serial production then consumption"
argument_list|)
expr_stmt|;
name|JmsProvider
name|provider
init|=
operator|new
name|JmsProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|run
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TO_RECEIVE
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"got message "
operator|+
name|i
argument_list|,
name|dupChecker
index|[
name|i
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoDupsOnSlowConsumerLargePriorityGapReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|JmsConsumerDup
name|consumer
init|=
operator|new
name|JmsConsumerDup
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|run
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|done
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JmsProvider
name|provider
init|=
operator|new
name|JmsProvider
argument_list|()
decl_stmt|;
name|provider
operator|.
name|priorityModulator
operator|=
literal|2500
expr_stmt|;
name|provider
operator|.
name|run
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|run
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TO_RECEIVE
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
literal|"got message "
operator|+
name|i
argument_list|,
name|dupChecker
index|[
name|i
index|]
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|JmsConsumerDup
implements|implements
name|MessageListener
block|{
name|long
name|count
init|=
literal|0
decl_stmt|;
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
decl_stmt|;
name|Topic
name|topic
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
decl_stmt|;
name|MessageConsumer
name|consumer
decl_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"MyUsername"
argument_list|,
literal|"MyPassword"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|clntId
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|topic
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subscriptionName
argument_list|,
name|selector
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for messages..."
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|TO_RECEIVE
operator|||
operator|!
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"caught"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"consumer done ("
operator|+
name|exceptions
operator|.
name|isEmpty
argument_list|()
operator|+
literal|"), closing connection"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
operator|++
name|count
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
empty_stmt|;
try|try
block|{
name|TextMessage
name|m
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
if|if
condition|(
name|count
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rcvd Msg #-"
operator|+
name|count
operator|+
literal|" "
operator|+
name|m
operator|.
name|getText
argument_list|()
operator|+
literal|" Sent->"
operator|+
name|dtf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|m
operator|.
name|getJMSTimestamp
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" Recv->"
operator|+
name|dtf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|+
literal|" Expr->"
operator|+
name|dtf
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|m
operator|.
name|getJMSExpiration
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|", mid: "
operator|+
name|m
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
name|m
operator|.
name|getIntProperty
argument_list|(
literal|"SeqNo"
argument_list|)
decl_stmt|;
comment|//check for duplicate messages
if|if
condition|(
name|i
operator|<
name|MAX_MESSAGES
condition|)
block|{
if|if
condition|(
name|dupChecker
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Duplicate message received at count: "
operator|+
name|count
operator|+
literal|", id: "
operator|+
name|m
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Got Duplicate at: "
operator|+
name|m
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dupChecker
index|[
name|i
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"caught "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|JmsProvider
implements|implements
name|Runnable
block|{
name|int
name|priorityModulator
init|=
literal|10
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
decl_stmt|;
name|Session
name|session
decl_stmt|;
name|Topic
name|topic
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
decl_stmt|;
name|MessageProducer
name|messageProducer
decl_stmt|;
name|long
name|timeToLive
init|=
literal|0l
decl_stmt|;
name|TextMessage
name|message
init|=
literal|null
decl_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
expr_stmt|;
try|try
block|{
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"MyUserName"
argument_list|,
literal|"MyPassword"
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|topic
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|messageProducer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|setPriority
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|int
name|msgSeqNo
init|=
literal|0
decl_stmt|;
name|int
name|NUM_MSGS
init|=
literal|1000
decl_stmt|;
name|int
name|NUM_GROUPS
init|=
name|TO_RECEIVE
operator|/
name|NUM_MSGS
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|NUM_GROUPS
condition|;
name|n
operator|++
control|)
block|{
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MSGS
condition|;
name|i
operator|++
control|)
block|{
name|int
name|priority
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|priorityModulator
operator|<=
literal|10
condition|)
block|{
name|priority
operator|=
name|msgSeqNo
operator|%
name|priorityModulator
expr_stmt|;
block|}
else|else
block|{
name|priority
operator|=
operator|(
name|msgSeqNo
operator|>=
name|priorityModulator
operator|)
condition|?
literal|9
else|:
literal|0
expr_stmt|;
block|}
name|message
operator|.
name|setText
argument_list|(
name|xmlMessage
operator|+
name|msgSeqNo
operator|+
literal|"-"
operator|+
name|priority
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"SeqNo"
argument_list|,
name|msgSeqNo
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message: "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
name|timeToLive
argument_list|)
expr_stmt|;
name|msgSeqNo
operator|++
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"caught "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

