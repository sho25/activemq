begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|CachingConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|SingleConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_class
specifier|public
class|class
name|LoadBalanceTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoadBalanceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TESTING_QUEUE
init|=
literal|"testingqueue"
decl_stmt|;
specifier|private
specifier|static
name|int
name|networkBridgePrefetch
init|=
literal|1000
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|does_load_balance_between_consumers
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService1
init|=
literal|null
decl_stmt|;
name|BrokerService
name|brokerService2
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|100
decl_stmt|;
specifier|final
name|AtomicInteger
name|broker1Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|broker2Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startProducer
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
block|{
name|brokerService1
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService1
operator|.
name|setBrokerName
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|MemoryPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|addConnector
argument_list|(
literal|"nio://0.0.0.0:61616"
argument_list|)
expr_stmt|;
specifier|final
name|NetworkConnector
name|network1
init|=
name|brokerService1
operator|.
name|addNetworkConnector
argument_list|(
literal|"static:(tcp://localhost:51515)"
argument_list|)
decl_stmt|;
name|network1
operator|.
name|setName
argument_list|(
literal|"network1"
argument_list|)
expr_stmt|;
name|network1
operator|.
name|setDynamicOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|network1
operator|.
name|setNetworkTTL
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|network1
operator|.
name|setPrefetchSize
argument_list|(
name|networkBridgePrefetch
argument_list|)
expr_stmt|;
name|network1
operator|.
name|setConduitSubscriptions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|network1
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|network1
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|{
name|brokerService2
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService2
operator|.
name|setBrokerName
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|MemoryPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|addConnector
argument_list|(
literal|"nio://0.0.0.0:51515"
argument_list|)
expr_stmt|;
specifier|final
name|NetworkConnector
name|network2
init|=
name|brokerService2
operator|.
name|addNetworkConnector
argument_list|(
literal|"static:(tcp://localhost:61616)"
argument_list|)
decl_stmt|;
name|network2
operator|.
name|setName
argument_list|(
literal|"network1"
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setDynamicOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setNetworkTTL
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setPrefetchSize
argument_list|(
name|networkBridgePrefetch
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setConduitSubscriptions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|network2
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|final
name|ActiveMQConnectionFactory
name|connectionFactory1
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://one"
argument_list|)
decl_stmt|;
specifier|final
name|SingleConnectionFactory
name|singleConnectionFactory1
init|=
operator|new
name|SingleConnectionFactory
argument_list|(
name|connectionFactory1
argument_list|)
decl_stmt|;
name|singleConnectionFactory1
operator|.
name|setReconnectOnException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DefaultMessageListenerContainer
name|container1
init|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
decl_stmt|;
name|container1
operator|.
name|setConnectionFactory
argument_list|(
name|singleConnectionFactory1
argument_list|)
expr_stmt|;
name|container1
operator|.
name|setMaxConcurrentConsumers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container1
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testingqueue"
argument_list|)
argument_list|)
expr_stmt|;
name|container1
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|broker1Count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|container1
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|container1
operator|.
name|start
argument_list|()
expr_stmt|;
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|ActiveMQConnectionFactory
name|connectionFactory2
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://two"
argument_list|)
decl_stmt|;
specifier|final
name|SingleConnectionFactory
name|singleConnectionFactory2
init|=
operator|new
name|SingleConnectionFactory
argument_list|(
name|connectionFactory2
argument_list|)
decl_stmt|;
name|singleConnectionFactory2
operator|.
name|setReconnectOnException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DefaultMessageListenerContainer
name|container2
init|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
decl_stmt|;
name|container2
operator|.
name|setConnectionFactory
argument_list|(
name|singleConnectionFactory2
argument_list|)
expr_stmt|;
name|container2
operator|.
name|setMaxConcurrentConsumers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container2
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testingqueue"
argument_list|)
argument_list|)
expr_stmt|;
name|container2
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|broker2Count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|container2
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|container2
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wait for start signal"
argument_list|,
name|startProducer
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CachingConnectionFactory
name|cachingConnectionFactory
init|=
operator|new
name|CachingConnectionFactory
argument_list|(
name|singleConnectionFactory2
argument_list|)
decl_stmt|;
specifier|final
name|JmsTemplate
name|template
init|=
operator|new
name|JmsTemplate
argument_list|(
name|cachingConnectionFactory
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testingqueue"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|send
argument_list|(
name|queue
argument_list|,
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|Message
name|createMessage
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// give spring time to scale back again
while|while
condition|(
name|container2
operator|.
name|getActiveConsumerCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"active consumer count: "
operator|+
name|container2
operator|.
name|getActiveConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"concurrent consumer count: "
operator|+
name|container2
operator|.
name|getConcurrentConsumers
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|cachingConnectionFactory
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|container2
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|waitForBridgeFormation
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|startProducer
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"broker1Count "
operator|+
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
literal|", broker2Count "
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// give it 10 seconds
while|while
condition|(
name|count
operator|++
operator|<
literal|10
operator|&&
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
operator|!=
name|total
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"broker1Count "
operator|+
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
literal|", broker2Count "
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|container1
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|brokerService1
operator|!=
literal|null
condition|)
block|{
name|brokerService1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|brokerService2
operator|!=
literal|null
condition|)
block|{
name|brokerService2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|broker1Count
operator|.
name|get
argument_list|()
operator|<
literal|25
operator|||
name|broker2Count
operator|.
name|get
argument_list|()
operator|<
literal|25
condition|)
block|{
name|fail
argument_list|(
literal|"Each broker should have gotten at least 25 messages but instead broker1 got "
operator|+
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
literal|" and broker2 got "
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|does_xml_multicast_load_balance_between_consumers
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|total
init|=
literal|100
decl_stmt|;
specifier|final
name|AtomicInteger
name|broker1Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|broker2Count
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|startProducer
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xmlConfig
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/loadbalancetest.xml"
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"lbt.networkBridgePrefetch"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|networkBridgePrefetch
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"lbt.brokerName"
argument_list|,
literal|"one"
argument_list|)
expr_stmt|;
specifier|final
name|ActiveMQConnectionFactory
name|connectionFactory1
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://one?brokerConfig=xbean:"
operator|+
name|xmlConfig
argument_list|)
decl_stmt|;
specifier|final
name|SingleConnectionFactory
name|singleConnectionFactory1
init|=
operator|new
name|SingleConnectionFactory
argument_list|(
name|connectionFactory1
argument_list|)
decl_stmt|;
name|singleConnectionFactory1
operator|.
name|setReconnectOnException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DefaultMessageListenerContainer
name|container1
init|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
decl_stmt|;
name|container1
operator|.
name|setConnectionFactory
argument_list|(
name|singleConnectionFactory1
argument_list|)
expr_stmt|;
name|container1
operator|.
name|setMaxConcurrentConsumers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container1
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|TESTING_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|container1
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|broker1Count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|container1
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|container1
operator|.
name|start
argument_list|()
expr_stmt|;
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"lbt.brokerName"
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
specifier|final
name|ActiveMQConnectionFactory
name|connectionFactory2
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://two?brokerConfig=xbean:"
operator|+
name|xmlConfig
argument_list|)
decl_stmt|;
specifier|final
name|SingleConnectionFactory
name|singleConnectionFactory2
init|=
operator|new
name|SingleConnectionFactory
argument_list|(
name|connectionFactory2
argument_list|)
decl_stmt|;
name|singleConnectionFactory2
operator|.
name|setReconnectOnException
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DefaultMessageListenerContainer
name|container2
init|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
decl_stmt|;
name|container2
operator|.
name|setConnectionFactory
argument_list|(
name|singleConnectionFactory2
argument_list|)
expr_stmt|;
name|container2
operator|.
name|setMaxConcurrentConsumers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|container2
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|TESTING_QUEUE
argument_list|)
argument_list|)
expr_stmt|;
name|container2
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|broker2Count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|container2
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
name|container2
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wait for start signal"
argument_list|,
name|startProducer
operator|.
name|await
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CachingConnectionFactory
name|cachingConnectionFactory
init|=
operator|new
name|CachingConnectionFactory
argument_list|(
name|singleConnectionFactory2
argument_list|)
decl_stmt|;
specifier|final
name|JmsTemplate
name|template
init|=
operator|new
name|JmsTemplate
argument_list|(
name|cachingConnectionFactory
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|TESTING_QUEUE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|template
operator|.
name|send
argument_list|(
name|queue
argument_list|,
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|Message
name|createMessage
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
specifier|final
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// give network a chance to build, needs advisories
name|waitForBridgeFormation
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|startProducer
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|pool
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"broker1Count "
operator|+
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
literal|", broker2Count "
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// give it 10 seconds
while|while
condition|(
name|count
operator|++
operator|<
literal|10
operator|&&
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
operator|!=
name|total
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"broker1Count "
operator|+
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
literal|", broker2Count "
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|broker1Count
operator|.
name|get
argument_list|()
operator|<
literal|25
operator|||
name|broker2Count
operator|.
name|get
argument_list|()
operator|<
literal|25
condition|)
block|{
name|fail
argument_list|(
literal|"Each broker should have gotten at least 25 messages but instead broker1 got "
operator|+
name|broker1Count
operator|.
name|get
argument_list|()
operator|+
literal|" and broker2 got "
operator|+
name|broker2Count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// need to ensure broker bridge is alive before starting the consumer
comment|// peeking at the internals will give us this info
specifier|private
name|void
name|waitForBridgeFormation
parameter_list|(
name|long
name|delay
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|done
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|delay
decl_stmt|;
while|while
condition|(
name|done
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
name|BrokerService
name|broker
init|=
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|lookup
argument_list|(
literal|"two"
argument_list|)
decl_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
operator|&&
operator|!
name|broker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|broker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

