begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ActiveMQMessageAuditTest  *  *  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQMessageAuditTest
extends|extends
name|TestCase
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMQMessageAuditTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Constructor for ActiveMQMessageAuditTest.      *      * @param name      */
specifier|public
name|ActiveMQMessageAuditTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{     }
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * test case for isDuplicate      */
specifier|public
name|void
name|testIsDuplicateString
parameter_list|()
block|{
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|ActiveMQMessageAudit
name|audit
init|=
operator|new
name|ActiveMQMessageAudit
argument_list|()
decl_stmt|;
name|IdGenerator
name|idGen
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
comment|// add to a list
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|idGen
operator|.
name|generateId
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|audit
operator|.
name|isDuplicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|windowList
init|=
name|list
operator|.
name|subList
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|-
name|audit
operator|.
name|getAuditDepth
argument_list|()
argument_list|,
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|windowList
control|)
block|{
name|assertTrue
argument_list|(
literal|"duplicate, id:"
operator|+
name|id
argument_list|,
name|audit
operator|.
name|isDuplicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testIsDuplicateMessageReference
parameter_list|()
block|{
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|ActiveMQMessageAudit
name|audit
init|=
operator|new
name|ActiveMQMessageAudit
argument_list|()
decl_stmt|;
comment|// add to a list
name|List
argument_list|<
name|MessageReference
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|ProducerId
name|pid
init|=
operator|new
name|ProducerId
argument_list|()
decl_stmt|;
name|pid
operator|.
name|setConnectionId
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|pid
operator|.
name|setSessionId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pid
operator|.
name|setValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MessageId
name|id
init|=
operator|new
name|MessageId
argument_list|()
decl_stmt|;
name|id
operator|.
name|setProducerId
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|id
operator|.
name|setProducerSequenceId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|msg
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMessageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|audit
operator|.
name|isDuplicate
argument_list|(
name|msg
operator|.
name|getMessageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MessageReference
argument_list|>
name|windowList
init|=
name|list
operator|.
name|subList
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|-
name|audit
operator|.
name|getAuditDepth
argument_list|()
argument_list|,
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|MessageReference
name|msg
range|:
name|windowList
control|)
block|{
name|assertTrue
argument_list|(
literal|"duplicate msg:"
operator|+
name|msg
argument_list|,
name|audit
operator|.
name|isDuplicate
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testIsInOrderString
parameter_list|()
block|{
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|ActiveMQMessageAudit
name|audit
init|=
operator|new
name|ActiveMQMessageAudit
argument_list|()
decl_stmt|;
name|IdGenerator
name|idGen
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
comment|// add to a list
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|idGen
operator|.
name|generateId
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
name|audit
operator|.
name|isDuplicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|audit
operator|.
name|isInOrder
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|1
operator|&&
name|i
operator|%
literal|2
operator|!=
literal|0
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|id
range|:
name|list
control|)
block|{
name|assertFalse
argument_list|(
name|audit
operator|.
name|isInOrder
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|audit
operator|.
name|isDuplicate
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQMessageAuditNoSync
name|audit
init|=
operator|new
name|ActiveMQMessageAuditNoSync
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|serialize
argument_list|(
name|audit
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Length: "
operator|+
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|audit
operator|=
name|recover
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessageReference
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|ProducerId
name|pid
init|=
operator|new
name|ProducerId
argument_list|()
decl_stmt|;
name|pid
operator|.
name|setConnectionId
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|pid
operator|.
name|setSessionId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pid
operator|.
name|setValue
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"producer "
operator|+
name|j
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|MessageId
name|id
init|=
operator|new
name|MessageId
argument_list|()
decl_stmt|;
name|id
operator|.
name|setProducerId
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|id
operator|.
name|setProducerSequenceId
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|msg
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMessageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|audit
operator|.
name|isDuplicate
argument_list|(
name|msg
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|bytes
operator|=
name|serialize
argument_list|(
name|audit
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Length: "
operator|+
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|audit
operator|=
name|recover
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|250
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|MessageReference
name|message
range|:
name|list
control|)
block|{
name|audit
operator|.
name|rollback
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bytes
operator|=
name|serialize
argument_list|(
name|audit
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Length: "
operator|+
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|audit
operator|=
name|recover
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|byte
index|[]
name|serialize
parameter_list|(
name|ActiveMQMessageAuditNoSync
name|audit
parameter_list|)
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oout
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|oout
operator|.
name|writeObject
argument_list|(
name|audit
argument_list|)
expr_stmt|;
name|oout
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|protected
name|ActiveMQMessageAuditNoSync
name|recover
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectInputStream
name|objectIn
init|=
operator|new
name|ObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|ActiveMQMessageAuditNoSync
operator|)
name|objectIn
operator|.
name|readObject
argument_list|()
return|;
block|}
block|}
end_class

end_unit

