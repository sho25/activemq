begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SelectionKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * TestServerCnxnFactory allows a caller to impose an artifical  * wait on I/O over the ServerCnxn used to communicate with the  * ZooKeeper server.  */
end_comment

begin_class
specifier|public
class|class
name|TestServerCnxnFactory
extends|extends
name|NIOServerCnxnFactory
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestServerCnxnFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/* testHandle controls whehter or not an artifical wait      * is imposed when talking to the ZooKeeper server     */
specifier|public
name|TestHandle
name|testHandle
init|=
operator|new
name|TestHandle
argument_list|()
decl_stmt|;
specifier|public
name|TestServerCnxnFactory
parameter_list|()
throws|throws
name|IOException
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|NIOServerCnxn
name|createConnection
parameter_list|(
name|SocketChannel
name|sock
parameter_list|,
name|SelectionKey
name|sk
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestServerCnxn
argument_list|(
name|this
operator|.
name|zkServer
argument_list|,
name|sock
argument_list|,
name|sk
argument_list|,
name|this
argument_list|,
name|testHandle
argument_list|)
return|;
block|}
comment|/*      * TestHandle is handed to TestServerCnxn and is used to      * control the amount of time the TestServerCnxn waits      * before allowing an I/O operation.      */
specifier|public
class|class
name|TestHandle
block|{
specifier|private
name|Object
name|mu
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|ioWaitMillis
init|=
literal|0
decl_stmt|;
comment|/*          * Set an artifical I/O wait (in milliseconds) on ServerCnxn and          * then sleep for the specified number of milliseconds.          */
specifier|public
name|void
name|setIOWaitMillis
parameter_list|(
name|int
name|ioWaitMillis
parameter_list|,
name|int
name|sleepMillis
parameter_list|)
block|{
synchronized|synchronized
init|(
name|mu
init|)
block|{
name|this
operator|.
name|ioWaitMillis
operator|=
name|ioWaitMillis
expr_stmt|;
block|}
if|if
condition|(
name|sleepMillis
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepMillis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
block|}
comment|/*          * Get the number of milliseconds to wait before          * allowing ServerCnxn to perform I/O.          */
specifier|public
name|int
name|getIOWaitMillis
parameter_list|()
block|{
synchronized|synchronized
init|(
name|mu
init|)
block|{
return|return
name|this
operator|.
name|ioWaitMillis
return|;
block|}
block|}
block|}
specifier|public
class|class
name|TestServerCnxn
extends|extends
name|NIOServerCnxn
block|{
specifier|public
name|TestHandle
name|testHandle
decl_stmt|;
specifier|public
name|TestServerCnxn
parameter_list|(
name|ZooKeeperServer
name|zk
parameter_list|,
name|SocketChannel
name|sock
parameter_list|,
name|SelectionKey
name|sk
parameter_list|,
name|NIOServerCnxnFactory
name|factory
parameter_list|,
name|TestHandle
name|testHandle
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|zk
argument_list|,
name|sock
argument_list|,
name|sk
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|this
operator|.
name|testHandle
operator|=
name|testHandle
expr_stmt|;
block|}
specifier|public
name|void
name|doIO
parameter_list|(
name|SelectionKey
name|k
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|millis
init|=
name|this
operator|.
name|testHandle
operator|.
name|getIOWaitMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|millis
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"imposing a "
operator|+
name|millis
operator|+
literal|" millisecond wait on ServerCxn: "
operator|+
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
block|}
name|super
operator|.
name|doIO
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

