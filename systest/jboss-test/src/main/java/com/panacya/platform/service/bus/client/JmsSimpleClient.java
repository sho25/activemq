begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|com
operator|.
name|panacya
operator|.
name|platform
operator|.
name|service
operator|.
name|bus
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:michael.gaffney@panacya.com">Michael Gaffney</a>  */
end_comment

begin_class
specifier|public
class|class
name|JmsSimpleClient
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_URL
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
comment|//private static final String BROKER_URL = "jnp://localhost:1099";
specifier|private
specifier|static
specifier|final
name|String
name|SEND_CMD
init|=
literal|"send"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RECEIVE_CMD
init|=
literal|"receive"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENDLESS_RECEIVE_CMD
init|=
literal|"receive-non-stop"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SEND_RECEIVE_CMD
init|=
literal|"send-receive"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMING_CONTEXT
init|=
literal|"org.jnp.interfaces.NamingContextFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JNP_INTERFACES
init|=
literal|"org.jnp.interfaces"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|execute
argument_list|(
operator|new
name|ClientArgs
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|execute
parameter_list|(
name|ClientArgs
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|SEND_CMD
operator|.
name|equals
argument_list|(
name|args
operator|.
name|getCommand
argument_list|()
argument_list|)
condition|)
block|{
name|JmsSimpleClient
operator|.
name|sendToActiveMQ
argument_list|(
name|args
operator|.
name|getDestination
argument_list|()
argument_list|,
name|args
operator|.
name|getNoOfMessages
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|RECEIVE_CMD
operator|.
name|equals
argument_list|(
name|args
operator|.
name|getCommand
argument_list|()
argument_list|)
condition|)
block|{
name|JmsSimpleClient
operator|.
name|receiveFromActiveMQ
argument_list|(
name|args
operator|.
name|getDestination
argument_list|()
argument_list|,
name|args
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ENDLESS_RECEIVE_CMD
operator|.
name|equals
argument_list|(
name|args
operator|.
name|getCommand
argument_list|()
argument_list|)
condition|)
block|{
name|JmsSimpleClient
operator|.
name|receiveFromActiveMQ
argument_list|(
name|args
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SEND_RECEIVE_CMD
operator|.
name|equals
argument_list|(
name|args
operator|.
name|getCommand
argument_list|()
argument_list|)
condition|)
block|{
name|JmsSimpleClient
operator|.
name|sendToActiveMQ
argument_list|(
name|args
operator|.
name|getDestination
argument_list|()
argument_list|,
name|args
operator|.
name|getNoOfMessages
argument_list|()
argument_list|)
expr_stmt|;
name|JmsSimpleClient
operator|.
name|receiveFromActiveMQ
argument_list|(
name|args
operator|.
name|getDestination
argument_list|()
argument_list|,
name|args
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown command: "
operator|+
name|args
operator|.
name|getCommand
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sendToActiveMQ
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sending to '"
operator|+
name|destinationName
operator|+
literal|"' ..."
argument_list|)
expr_stmt|;
name|JmsTemplate
name|jt
init|=
name|createTemplate
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|jt
operator|.
name|send
argument_list|(
name|destinationName
argument_list|,
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"hello ActiveMQ world "
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Done sending "
operator|+
name|count
operator|+
literal|" message/s ........"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|receiveFromActiveMQ
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Listening to '"
operator|+
name|destinationName
operator|+
literal|"' ..."
argument_list|)
expr_stmt|;
name|JmsTemplate
name|jt
init|=
name|createTemplate
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|jt
operator|.
name|setReceiveTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Message
name|aMessage
init|=
name|jt
operator|.
name|receive
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"...done"
argument_list|)
expr_stmt|;
if|if
condition|(
name|aMessage
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No message received"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Message Received: "
operator|+
name|aMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|receiveFromActiveMQ
parameter_list|(
name|String
name|destinationName
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Listening to '"
operator|+
name|destinationName
operator|+
literal|"' ..."
argument_list|)
expr_stmt|;
name|JmsTemplate
name|jt
init|=
name|createTemplate
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Message
name|aMessage
init|=
name|jt
operator|.
name|receive
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
if|if
condition|(
name|aMessage
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No message received"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|messageNumber
init|=
name|aMessage
operator|.
name|getIntProperty
argument_list|(
literal|"MessageNumber"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received MessageNumber: "
operator|+
name|messageNumber
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|JmsTemplate
name|createTemplate
parameter_list|(
name|String
name|destinationName
parameter_list|)
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|()
decl_stmt|;
name|connectionFactory
operator|.
name|setBrokerURL
argument_list|(
name|BROKER_URL
argument_list|)
expr_stmt|;
name|IdGenerator
name|idGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
name|connectionFactory
operator|.
name|setClientID
argument_list|(
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
name|JmsTemplate
name|jt
init|=
operator|new
name|JmsTemplate
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
if|if
condition|(
name|destinationName
operator|.
name|startsWith
argument_list|(
literal|"topic"
argument_list|)
condition|)
block|{
name|jt
operator|.
name|setPubSubDomain
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|jt
return|;
block|}
block|}
end_class

end_unit

