begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|AsyncToSyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|AsyncToSyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stream
operator|.
name|sync
operator|.
name|socket
operator|.
name|SocketMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_comment
comment|/**  * Used to test the {@see org.activeio.net.TcpSynchChannel}  *    * @version $Revision$  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|SyncChannelTestSupport
extends|extends
name|TestCase
block|{
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SyncChannelTestSupport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SyncChannelServer
name|server
decl_stmt|;
specifier|private
name|SyncChannel
name|clientChannel
decl_stmt|;
specifier|private
name|SyncChannel
name|serverChannel
decl_stmt|;
name|Executor
name|sendExecutor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testSmallSendReceive
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|isDisabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"test disabled: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Packet
name|outboundPacket
init|=
operator|new
name|ByteArrayPacket
argument_list|(
literal|"Hello World"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|doSendReceive
argument_list|(
name|outboundPacket
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPeerDisconnect
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|isDisabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"test disabled: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Packet
name|outboundPacket
init|=
operator|new
name|ByteArrayPacket
argument_list|(
literal|"Hello World"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|doSendReceive
argument_list|(
name|outboundPacket
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
comment|// disconnect the client.
name|clientChannel
operator|.
name|dispose
argument_list|()
expr_stmt|;
comment|// The server should get an EOS packet.
name|Packet
name|packet
init|=
name|serverChannel
operator|.
name|read
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|EOSPacket
operator|.
name|EOS_PACKET
argument_list|,
name|packet
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testManySmallSendReceives
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|isDisabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"test disabled: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Start of testManySmallSendReceives"
argument_list|)
expr_stmt|;
name|Packet
name|outboundPacket
init|=
operator|new
name|ByteArrayPacket
argument_list|(
literal|"Hello World"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getTestIterations
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|doSendReceive
argument_list|(
name|outboundPacket
operator|.
name|duplicate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"done. Duration: "
operator|+
name|duration
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|+
literal|", duration per send: "
operator|+
name|unitDuration
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|getTestIterations
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|float
name|unitDuration
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|,
name|int
name|testIterations
parameter_list|)
block|{
return|return
name|duration
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|/
name|testIterations
return|;
block|}
specifier|private
name|float
name|duration
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
block|{
return|return
call|(
name|float
call|)
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
operator|)
operator|/
literal|1000.0f
argument_list|)
return|;
block|}
specifier|protected
name|int
name|getTestIterations
parameter_list|()
block|{
return|return
literal|1000
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Running: "
operator|+
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isDisabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Bind to an annonymous tcp port."
argument_list|)
expr_stmt|;
name|server
operator|=
name|AsyncToSyncChannelServer
operator|.
name|adapt
argument_list|(
name|bindChannel
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Server Bound at URI: "
operator|+
name|server
operator|.
name|getBindURI
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Client connecting to: "
operator|+
name|server
operator|.
name|getConnectURI
argument_list|()
argument_list|)
expr_stmt|;
name|clientChannel
operator|=
name|AsyncToSyncChannel
operator|.
name|adapt
argument_list|(
name|openChannel
argument_list|(
name|server
operator|.
name|getConnectURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clientChannel
operator|.
name|start
argument_list|()
expr_stmt|;
name|SocketMetadata
name|socket
init|=
operator|(
name|SocketMetadata
operator|)
name|clientChannel
operator|.
name|getAdapter
argument_list|(
name|SocketMetadata
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
name|socket
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Get connection that was accepted on the server side."
argument_list|)
expr_stmt|;
name|Channel
name|c
init|=
name|server
operator|.
name|accept
argument_list|(
literal|1000
operator|*
literal|5
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|serverChannel
operator|=
name|AsyncToSyncChannel
operator|.
name|adapt
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|serverChannel
operator|.
name|start
argument_list|()
expr_stmt|;
name|socket
operator|=
operator|(
name|SocketMetadata
operator|)
name|serverChannel
operator|.
name|getAdapter
argument_list|(
name|SocketMetadata
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Server Channel's Remote addreess: "
operator|+
name|socket
operator|.
name|getRemoteSocketAddress
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Server Channel's Local addreess: "
operator|+
name|socket
operator|.
name|getLocalSocketAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param outboundPacket      * @throws IOException      * @throws URISyntaxException      * @throws InterruptedException      */
specifier|private
name|void
name|doSendReceive
parameter_list|(
specifier|final
name|Packet
name|outboundPacket
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
name|ByteArrayPacket
name|inboundPacket
init|=
operator|new
name|ByteArrayPacket
argument_list|(
operator|new
name|byte
index|[
name|outboundPacket
operator|.
name|remaining
argument_list|()
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|runMutext
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Do the send async.
name|sendExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|clientChannel
operator|.
name|write
argument_list|(
name|outboundPacket
argument_list|)
expr_stmt|;
name|clientChannel
operator|.
name|flush
argument_list|()
expr_stmt|;
name|runMutext
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
block|}
argument_list|)
expr_stmt|;
while|while
condition|(
name|inboundPacket
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|Packet
name|packet
init|=
name|serverChannel
operator|.
name|read
argument_list|(
literal|1000
operator|*
literal|5
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|packet
argument_list|)
expr_stmt|;
name|packet
operator|.
name|read
argument_list|(
name|inboundPacket
argument_list|)
expr_stmt|;
block|}
name|outboundPacket
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inboundPacket
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|outboundPacket
operator|.
name|sliceAsBytes
argument_list|()
argument_list|,
name|inboundPacket
operator|.
name|sliceAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|runMutext
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isDisabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Closing down the channels."
argument_list|)
expr_stmt|;
name|serverChannel
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|clientChannel
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|server
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isDisabled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|assertEquals
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|b1
operator|.
name|length
argument_list|,
name|b2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|b2
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|b1
index|[
name|i
index|]
argument_list|,
name|b2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|abstract
specifier|protected
name|Channel
name|openChannel
parameter_list|(
name|URI
name|connectURI
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|abstract
specifier|protected
name|ChannelServer
name|bindChannel
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
function_decl|;
block|}
end_class

end_unit

