begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ReloadableProperties
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ReloadableProperties
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|invertedProps
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|invertedValueProps
decl_stmt|;
specifier|private
name|long
name|reloadTime
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|PropertiesLoader
operator|.
name|FileNameKey
name|key
decl_stmt|;
specifier|public
name|ReloadableProperties
parameter_list|(
name|PropertiesLoader
operator|.
name|FileNameKey
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Properties
name|getProps
parameter_list|()
block|{
return|return
name|props
return|;
block|}
specifier|public
specifier|synchronized
name|ReloadableProperties
name|obtained
parameter_list|()
block|{
if|if
condition|(
name|reloadTime
operator|<
literal|0
operator|||
operator|(
name|key
operator|.
name|isReload
argument_list|()
operator|&&
name|hasModificationAfter
argument_list|(
name|reloadTime
argument_list|)
operator|)
condition|)
block|{
name|props
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
try|try
block|{
name|load
argument_list|(
name|key
operator|.
name|file
argument_list|()
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|invertedProps
operator|=
literal|null
expr_stmt|;
name|invertedValueProps
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|isDebug
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Load of: "
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to load: "
operator|+
name|key
operator|+
literal|", reason:"
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|isDebug
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Load of: "
operator|+
name|key
operator|+
literal|", failure exception"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|reloadTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|invertedPropertiesMap
parameter_list|()
block|{
if|if
condition|(
name|invertedProps
operator|==
literal|null
condition|)
block|{
name|invertedProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|val
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|invertedProps
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|val
operator|.
name|getValue
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|val
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|invertedProps
return|;
block|}
specifier|public
specifier|synchronized
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|invertedPropertiesValuesMap
parameter_list|()
block|{
if|if
condition|(
name|invertedValueProps
operator|==
literal|null
condition|)
block|{
name|invertedValueProps
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|props
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|val
range|:
name|props
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
index|[]
name|userList
init|=
operator|(
operator|(
name|String
operator|)
name|val
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|userList
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|invertedValueProps
operator|.
name|get
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|invertedValueProps
operator|.
name|put
argument_list|(
name|user
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|val
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|invertedValueProps
return|;
block|}
specifier|private
name|void
name|load
parameter_list|(
specifier|final
name|File
name|source
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|source
argument_list|)
decl_stmt|;
try|try
block|{
name|props
operator|.
name|load
argument_list|(
name|in
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|isDecrypt
argument_list|()
condition|)
block|{
try|try
block|{
name|EncryptionSupport
operator|.
name|decrypt
argument_list|(
name|this
operator|.
name|props
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|e
parameter_list|)
block|{
comment|// this Happens whe jasypt is not on the classpath..
name|key
operator|.
name|setDecrypt
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"jasypt is not on the classpath: password decryption disabled."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|hasModificationAfter
parameter_list|(
name|long
name|reloadTime
parameter_list|)
block|{
return|return
name|key
operator|.
name|file
operator|.
name|lastModified
argument_list|()
operator|>
name|reloadTime
return|;
block|}
block|}
end_class

end_unit

