begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|StoreUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|DuplicateFromStoreTest
block|{
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DuplicateFromStoreTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|activemqURL
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|DESTNAME
init|=
literal|"TEST"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|NUM_PRODUCERS
init|=
literal|100
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|NUM_CONSUMERS
init|=
literal|20
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|NUM_MSGS
init|=
literal|20000
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|CONSUMER_SLEEP
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|PRODUCER_SLEEP
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
name|CountDownLatch
name|producersFinished
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_PRODUCERS
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|CountDownLatch
name|consumersFinished
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_CONSUMERS
argument_list|)
decl_stmt|;
specifier|public
name|AtomicInteger
name|totalMessagesToSend
init|=
operator|new
name|AtomicInteger
argument_list|(
name|NUM_MSGS
argument_list|)
decl_stmt|;
specifier|public
name|AtomicInteger
name|totalReceived
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|int
name|messageSize
init|=
literal|16
operator|*
literal|1000
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
comment|// Create<policyEntry>
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
decl_stmt|;
name|policy
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMemoryLimit
argument_list|(
literal|10
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// 10 MB
name|policy
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setEnableAudit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// allow any duplicates from the store to bubble up to the q impl
name|policy
operator|.
name|setQueuePrefetch
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|PolicyMap
name|policies
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policies
operator|.
name|put
argument_list|(
name|dest
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policies
argument_list|)
expr_stmt|;
comment|// configure<systemUsage>
name|MemoryUsage
name|memoryUsage
init|=
operator|new
name|MemoryUsage
argument_list|()
decl_stmt|;
name|memoryUsage
operator|.
name|setPercentOfJvmHeap
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|StoreUsage
name|storeUsage
init|=
operator|new
name|StoreUsage
argument_list|()
decl_stmt|;
name|storeUsage
operator|.
name|setLimit
argument_list|(
literal|8
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// 8 gb
name|SystemUsage
name|memoryManager
init|=
operator|new
name|SystemUsage
argument_list|()
decl_stmt|;
name|memoryManager
operator|.
name|setMemoryUsage
argument_list|(
name|memoryUsage
argument_list|)
expr_stmt|;
name|memoryManager
operator|.
name|setStoreUsage
argument_list|(
name|storeUsage
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSystemUsage
argument_list|(
name|memoryManager
argument_list|)
expr_stmt|;
comment|// configure KahaDB persistence
name|PersistenceAdapter
name|kahadb
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
operator|(
operator|(
name|KahaDBStore
operator|)
name|kahadb
operator|)
operator|.
name|setConcurrentStoreAndDispatchQueues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|kahadb
argument_list|)
expr_stmt|;
comment|// start broker
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|activemqURL
operator|=
name|broker
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Testing for duplicate messages."
argument_list|)
expr_stmt|;
comment|//create producer and consumer threads
name|ExecutorService
name|producers
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_PRODUCERS
argument_list|)
decl_stmt|;
name|ExecutorService
name|consumers
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_CONSUMERS
argument_list|)
decl_stmt|;
name|createOpenwireClients
argument_list|(
name|producers
argument_list|,
name|consumers
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"All producers and consumers got started. Awaiting their termination"
argument_list|)
expr_stmt|;
name|producersFinished
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"All producers have terminated."
argument_list|)
expr_stmt|;
name|consumersFinished
operator|.
name|await
argument_list|(
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"All consumers have terminated."
argument_list|)
expr_stmt|;
name|producers
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|consumers
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no messages pending, i.e. dlq empty"
argument_list|,
literal|0l
argument_list|,
operator|(
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getRegionBroker
argument_list|()
operator|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate cache can be enabled if disabled
block|}
specifier|protected
name|void
name|createOpenwireClients
parameter_list|(
name|ExecutorService
name|producers
parameter_list|,
name|ExecutorService
name|consumers
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CONSUMERS
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating consumer for destination "
operator|+
name|DESTNAME
argument_list|)
expr_stmt|;
name|Consumer
name|consumer
init|=
operator|new
name|Consumer
argument_list|(
name|DESTNAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|consumers
operator|.
name|submit
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
comment|// wait for consumer to signal it has fully initialized
synchronized|synchronized
init|(
name|consumer
operator|.
name|init
init|)
block|{
try|try
block|{
name|consumer
operator|.
name|init
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PRODUCERS
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating producer for destination "
operator|+
name|DESTNAME
argument_list|)
expr_stmt|;
name|Producer
name|producer
init|=
operator|new
name|Producer
argument_list|(
name|DESTNAME
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|producers
operator|.
name|submit
argument_list|(
name|producer
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|Producer
implements|implements
name|Runnable
block|{
name|Logger
name|log
init|=
name|LOG
decl_stmt|;
specifier|protected
name|String
name|destName
init|=
literal|"TEST"
decl_stmt|;
specifier|protected
name|boolean
name|isTopicDest
init|=
literal|false
decl_stmt|;
specifier|public
name|Producer
parameter_list|(
name|String
name|dest
parameter_list|,
name|boolean
name|isTopic
parameter_list|,
name|int
name|ttl
parameter_list|)
block|{
name|this
operator|.
name|destName
operator|=
name|dest
expr_stmt|;
name|this
operator|.
name|isTopicDest
operator|=
name|isTopic
expr_stmt|;
block|}
comment|/**          * Connect to broker and constantly send messages          */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|MessageProducer
name|producer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|activemqURL
argument_list|)
decl_stmt|;
name|connection
operator|=
name|amq
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
argument_list|()
block|{
specifier|public
name|void
name|onException
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create a Session
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Destination
name|destination
decl_stmt|;
if|if
condition|(
name|isTopicDest
condition|)
block|{
comment|// Create the destination (Topic or Queue)
name|destination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|destName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|destName
argument_list|)
expr_stmt|;
block|}
comment|// Create a MessageProducer from the Session to the Topic or Queue
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
comment|// Create message
name|long
name|counter
init|=
literal|0
decl_stmt|;
comment|//enlarge msg to 16 kb
name|int
name|msgSize
init|=
literal|16
operator|*
literal|1024
decl_stmt|;
name|StringBuilder
name|stringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|stringBuilder
operator|.
name|setLength
argument_list|(
name|msgSize
operator|+
literal|15
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"Message: "
argument_list|)
expr_stmt|;
name|stringBuilder
operator|.
name|append
argument_list|(
name|counter
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
operator|(
name|msgSize
operator|/
literal|10
operator|)
condition|;
name|j
operator|++
control|)
block|{
name|stringBuilder
operator|.
name|append
argument_list|(
literal|"XXXXXXXXXX"
argument_list|)
expr_stmt|;
block|}
name|String
name|text
init|=
name|stringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// send message
while|while
condition|(
name|totalMessagesToSend
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sent message: "
operator|+
name|counter
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|%
literal|10000
operator|)
operator|==
literal|0
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"sent "
operator|+
name|counter
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|PRODUCER_SLEEP
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
finally|finally
block|{
name|producersFinished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Closing producer for "
operator|+
name|destName
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|Consumer
implements|implements
name|Runnable
block|{
specifier|public
name|Object
name|init
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|queueName
init|=
literal|"TEST"
decl_stmt|;
name|boolean
name|isTopic
init|=
literal|false
decl_stmt|;
name|Logger
name|log
init|=
name|LOG
decl_stmt|;
specifier|public
name|Consumer
parameter_list|(
name|String
name|destName
parameter_list|,
name|boolean
name|topic
parameter_list|)
block|{
name|this
operator|.
name|isTopic
operator|=
name|topic
expr_stmt|;
name|this
operator|.
name|queueName
operator|=
name|destName
expr_stmt|;
block|}
comment|/**          * connect to broker and receive messages          */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|activemqURL
argument_list|)
decl_stmt|;
name|connection
operator|=
name|amq
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
argument_list|()
block|{
specifier|public
name|void
name|onException
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Create a Session
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|// Create the destination (Topic or Queue)
name|Destination
name|destination
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isTopic
condition|)
name|destination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
else|else
name|destination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
comment|//Create a MessageConsumer from the Session to the Topic or Queue
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|init
init|)
block|{
name|init
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|// Wait for a message
name|long
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|totalReceived
operator|.
name|get
argument_list|()
operator|<
name|NUM_MSGS
condition|)
block|{
name|Message
name|message2
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message2
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message2
decl_stmt|;
name|String
name|text
init|=
name|textMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Received: "
operator|+
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|totalReceived
operator|.
name|get
argument_list|()
operator|<
name|NUM_MSGS
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Received message of unsupported type. Expecting TextMessage. "
operator|+
name|message2
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|message2
operator|!=
literal|null
condition|)
block|{
name|counter
operator|++
expr_stmt|;
name|totalReceived
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|%
literal|10000
operator|)
operator|==
literal|0
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"received "
operator|+
name|counter
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|CONSUMER_SLEEP
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in Consumer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{                 }
finally|finally
block|{
name|consumersFinished
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

