begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_comment
comment|/*   * allow match to any set  of composite destinations, both queues and topics  */
end_comment

begin_class
specifier|public
class|class
name|AnyDestination
extends|extends
name|ActiveMQDestination
block|{
specifier|public
name|AnyDestination
parameter_list|(
name|ActiveMQDestination
index|[]
name|destinations
parameter_list|)
block|{
name|super
argument_list|(
name|destinations
argument_list|)
expr_stmt|;
comment|// ensure we are small when it comes to comparison in DestinationMap
name|physicalName
operator|=
literal|"!0"
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getQualifiedPrefix
parameter_list|()
block|{
return|return
literal|"Any://"
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getDestinationType
parameter_list|()
block|{
return|return
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
operator|&
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"not for marshalling"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isQueue
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isTopic
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

