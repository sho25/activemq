begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ClassLoadingAwareObjectInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Quick port to java to support AMQ build.  *  * This test demonstrates the classloader problem in the  * ClassLoadingAwareObjectInputStream impl. If the first interface in the proxy  * interfaces list is JDK and there are any subsequent interfaces that are NOT  * JDK interfaces the ClassLoadingAwareObjectInputStream will ignore their  * respective classloaders and cause the Proxy to throw an  * IllegalArgumentException because the core JDK classloader can't load the  * interfaces that are not JDK interfaces.  *  * See AMQ-3537  *  * @author jason.yankus  *  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
specifier|public
class|class
name|AMQ3537Test
implements|implements
name|InvocationHandler
implements|,
name|Serializable
block|{
static|static
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.activemq.SERIALIZABLE_PACKAGES"
argument_list|,
literal|"java.util,org.apache.activemq.bugs"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
comment|/**      * If the first and second element in this array are swapped, the test will      * fail.      */
specifier|public
specifier|static
specifier|final
name|Class
index|[]
name|TEST_CLASSES
init|=
operator|new
name|Class
index|[]
block|{
name|List
operator|.
name|class
block|,
name|NonJDKList
operator|.
name|class
block|,
name|Serializable
operator|.
name|class
block|}
decl_stmt|;
comment|/** Underlying list */
specifier|private
specifier|final
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|l
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeserializeProxy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create the proxy
name|List
name|proxy
init|=
operator|(
name|List
operator|)
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|TEST_CLASSES
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// serialize it
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|oos
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|oos
operator|.
name|writeObject
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serializedProxy
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|oos
operator|.
name|close
argument_list|()
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// deserialize the proxy
name|ClassLoadingAwareObjectInputStream
name|claois
init|=
operator|new
name|ClassLoadingAwareObjectInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|serializedProxy
argument_list|)
argument_list|)
decl_stmt|;
comment|// this is where it fails due to the rudimentary classloader selection
comment|// in ClassLoadingAwareObjectInputStream
name|List
name|deserializedProxy
init|=
operator|(
name|List
operator|)
name|claois
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|claois
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// assert the invocation worked
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|deserializedProxy
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|l
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
interface|interface
name|NonJDKList
block|{
name|int
name|size
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

