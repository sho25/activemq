begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ScheduledMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ7086Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ7086Test
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
name|JobSchedulerStoreImpl
name|jobSchedulerStore
decl_stmt|;
name|KahaDBPersistenceAdapter
name|kahaDBPersistenceAdapter
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGcDoneAtStop
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|produceWithScheduledDelayAndConsume
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"job store: "
operator|+
name|jobSchedulerStore
argument_list|)
expr_stmt|;
name|int
name|numSchedulerFiles
init|=
name|jobSchedulerStore
operator|.
name|getJournal
argument_list|()
operator|.
name|getFileMap
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"kahadb store: "
operator|+
name|kahaDBPersistenceAdapter
argument_list|)
expr_stmt|;
name|int
name|numKahadbFiles
init|=
name|kahaDBPersistenceAdapter
operator|.
name|getStore
argument_list|()
operator|.
name|getJournal
argument_list|()
operator|.
name|getFileMap
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num files, job store: {}, messge store: {}"
argument_list|,
name|numKahadbFiles
argument_list|,
name|numKahadbFiles
argument_list|)
expr_stmt|;
comment|// pull the dirs before we stop
name|File
name|jobDir
init|=
name|jobSchedulerStore
operator|.
name|getJournal
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|File
name|kahaDir
init|=
name|kahaDBPersistenceAdapter
operator|.
name|getStore
argument_list|()
operator|.
name|getJournal
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected job store data files"
argument_list|,
literal|1
argument_list|,
name|verifyFilesOnDisk
argument_list|(
name|jobDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected kahadb data files"
argument_list|,
literal|1
argument_list|,
name|verifyFilesOnDisk
argument_list|(
name|kahaDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoGcAtStop
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|produceWithScheduledDelayAndConsume
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"job store: "
operator|+
name|jobSchedulerStore
argument_list|)
expr_stmt|;
name|int
name|numSchedulerFiles
init|=
name|jobSchedulerStore
operator|.
name|getJournal
argument_list|()
operator|.
name|getFileMap
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"kahadb store: "
operator|+
name|kahaDBPersistenceAdapter
argument_list|)
expr_stmt|;
name|int
name|numKahadbFiles
init|=
name|kahaDBPersistenceAdapter
operator|.
name|getStore
argument_list|()
operator|.
name|getJournal
argument_list|()
operator|.
name|getFileMap
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Num files, job store: {}, messge store: {}"
argument_list|,
name|numKahadbFiles
argument_list|,
name|numKahadbFiles
argument_list|)
expr_stmt|;
comment|// pull the dirs before we stop
name|File
name|jobDir
init|=
name|jobSchedulerStore
operator|.
name|getJournal
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|File
name|kahaDir
init|=
name|kahaDBPersistenceAdapter
operator|.
name|getStore
argument_list|()
operator|.
name|getJournal
argument_list|()
operator|.
name|getDirectory
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected job store data files"
argument_list|,
name|numSchedulerFiles
argument_list|,
name|verifyFilesOnDisk
argument_list|(
name|jobDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected kahadb data files"
argument_list|,
name|numKahadbFiles
argument_list|,
name|verifyFilesOnDisk
argument_list|(
name|kahaDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|verifyFilesOnDisk
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker: "
operator|+
name|brokerService
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dir: "
operator|+
name|directory
argument_list|)
expr_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
name|File
index|[]
name|files
init|=
name|directory
operator|.
name|listFiles
argument_list|(
operator|new
name|FilenameFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|n
parameter_list|)
block|{
return|return
name|dir
operator|.
name|equals
argument_list|(
name|directory
argument_list|)
operator|&&
name|n
operator|.
name|startsWith
argument_list|(
name|Journal
operator|.
name|DEFAULT_FILE_PREFIX
argument_list|)
operator|&&
name|n
operator|.
name|endsWith
argument_list|(
name|Journal
operator|.
name|DEFAULT_FILE_SUFFIX
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"File count: "
operator|+
operator|(
name|files
operator|!=
literal|null
condition|?
name|files
operator|.
name|length
else|:
literal|" empty!"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|files
operator|.
name|length
expr_stmt|;
block|}
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"name :"
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|doCleanupOnStop
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|schedulerDirectory
init|=
operator|new
name|File
argument_list|(
literal|"target/scheduler"
argument_list|)
decl_stmt|;
name|File
name|kahadbDir
init|=
operator|new
name|File
argument_list|(
literal|"target/kahadb"
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|directory
range|:
operator|new
name|File
index|[]
block|{
name|schedulerDirectory
block|,
name|kahadbDir
block|}
control|)
block|{
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSchedulerSupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|jobSchedulerStore
operator|=
operator|new
name|JobSchedulerStoreImpl
argument_list|()
expr_stmt|;
name|jobSchedulerStore
operator|.
name|setDirectory
argument_list|(
name|schedulerDirectory
argument_list|)
expr_stmt|;
name|jobSchedulerStore
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|jobSchedulerStore
operator|.
name|setCheckpointInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|jobSchedulerStore
operator|.
name|setCleanupOnStop
argument_list|(
name|doCleanupOnStop
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setJobSchedulerStore
argument_list|(
name|jobSchedulerStore
argument_list|)
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setDirectory
argument_list|(
name|kahadbDir
argument_list|)
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|16
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setCleanupInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setCleanupOnStop
argument_list|(
name|doCleanupOnStop
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|kahaDBPersistenceAdapter
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|produceWithScheduledDelayAndConsume
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ActiveMQQueue
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"QQ"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numMessages
init|=
literal|50
decl_stmt|;
specifier|final
name|long
name|time
init|=
literal|1000l
decl_stmt|;
specifier|final
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|bytesMessage
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|bytesMessage
operator|.
name|writeBytes
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|bytesMessage
operator|.
name|setLongProperty
argument_list|(
name|ScheduledMessage
operator|.
name|AMQ_SCHEDULED_DELAY
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|bytesMessage
argument_list|)
expr_stmt|;
block|}
name|MessageConsumer
name|messageConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// let last ack settle
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

