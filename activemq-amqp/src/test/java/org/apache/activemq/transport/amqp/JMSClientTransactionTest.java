begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|SubscriptionViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests for transaction behaviors using the JMS client.  */
end_comment

begin_class
specifier|public
class|class
name|JMSClientTransactionTest
extends|extends
name|JMSClientTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JMSClientTransactionTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|MSG_COUNT
init|=
literal|1000
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testProduceOneConsumeOneInTx
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createMessage
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createMessage
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|MessageConsumer
name|messageConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSingleConsumedMessagePerTxCase
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_TIME_TO_LIVE
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|MessageConsumer
name|messageConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
do|do
block|{
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|counter
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message n. {} with content '{}' has been recieved."
argument_list|,
name|counter
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Transaction has been committed."
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|counter
operator|<
name|MSG_COUNT
condition|)
do|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConsumeAllMessagesInSingleTxCase
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_TIME_TO_LIVE
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueViewMBean
name|queueView
init|=
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
expr_stmt|;
name|MessageConsumer
name|messageConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
do|do
block|{
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|messageConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|counter
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message n. {} with content '{}' has been recieved."
argument_list|,
name|counter
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|counter
operator|<
name|MSG_COUNT
condition|)
do|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Transaction has been committed."
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testQueueTXRollbackAndCommit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MSG_COUNT
init|=
literal|3
decl_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message: {} to rollback"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Rolled back Message: "
operator|+
name|i
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"MessageSequence"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message: {} to commit"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Commit Message: "
operator|+
name|i
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"MessageSequence"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|MSG_COUNT
argument_list|,
name|getProxyToQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|SubscriptionViewMBean
name|subscription
init|=
name|getProxyToQueueSubscriber
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Subscription[{}]: prefetch size after rollback = {}"
argument_list|,
name|subscription
operator|.
name|getSubscriptionId
argument_list|()
argument_list|,
name|subscription
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subscription
operator|.
name|getPrefetchSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to receive message: {}"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" should be available"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should get message: "
operator|+
name|i
argument_list|,
name|i
argument_list|,
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"MessageSequence"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testQueueTXRollbackAndCommitAsyncConsumer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MSG_COUNT
init|=
literal|3
decl_stmt|;
specifier|final
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received Message {}"
argument_list|,
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{                 }
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|msgIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message: {} to rollback"
argument_list|,
name|msgIndex
operator|++
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Rolled back Message: "
operator|+
name|msgIndex
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"MessageSequence"
argument_list|,
name|msgIndex
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"ROLLBACK of sent message here:"
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message: {} to commit"
argument_list|,
name|msgIndex
operator|++
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Commit Message: "
operator|+
name|msgIndex
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"MessageSequence"
argument_list|,
name|msgIndex
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"COMMIT of sent message here:"
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|MSG_COUNT
argument_list|,
name|getProxyToQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|SubscriptionViewMBean
name|subscription
init|=
name|getProxyToQueueSubscriber
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Subscription[{}]: prefetch size after rollback = {}"
argument_list|,
name|subscription
operator|.
name|getSubscriptionId
argument_list|()
argument_list|,
name|subscription
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subscription
operator|.
name|getPrefetchSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should read all "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|counter
operator|.
name|get
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"COMMIT of first received batch here:"
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|subscription
operator|.
name|getPrefetchSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MSG_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending message: {} to commit"
argument_list|,
name|msgIndex
operator|++
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Commit Message: "
operator|+
name|msgIndex
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"MessageSequence"
argument_list|,
name|msgIndex
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"COMMIT of next sent message batch here:"
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"WAITING -> for next three messages to arrive:"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|subscription
operator|.
name|getPrefetchSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should read all "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Read {} messages so far"
argument_list|,
name|counter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|counter
operator|.
name|get
argument_list|()
operator|==
name|MSG_COUNT
operator|*
literal|2
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

