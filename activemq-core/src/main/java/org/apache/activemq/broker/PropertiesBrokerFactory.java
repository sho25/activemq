begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * A {@link BrokerFactoryHandler} which uses a properties file to configure the  * broker's various policies.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|PropertiesBrokerFactory
implements|implements
name|BrokerFactoryHandler
block|{
specifier|public
name|BrokerService
name|createBroker
parameter_list|(
name|URI
name|brokerURI
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|properties
init|=
name|loadProperties
argument_list|(
name|brokerURI
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
init|=
name|createBrokerService
argument_list|(
name|brokerURI
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|brokerService
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
comment|/**      * Lets load the properties from some external URL or a relative file      */
specifier|protected
name|Map
name|loadProperties
parameter_list|(
name|URI
name|brokerURI
parameter_list|)
throws|throws
name|IOException
block|{
comment|// lets load a URI
name|String
name|remaining
init|=
name|brokerURI
operator|.
name|getSchemeSpecificPart
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|inputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// lets now see if we can find the name on the classpath
name|inputStream
operator|=
name|findResourceOnClassPath
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File does not exist: "
operator|+
name|remaining
operator|+
literal|", could not be found on the classpath and is not a valid URL: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|inputStream
operator|==
literal|null
operator|&&
name|url
operator|!=
literal|null
condition|)
block|{
name|inputStream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// should we append any system properties?
try|try
block|{
name|Properties
name|systemProperties
init|=
name|System
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|systemProperties
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore security exception
block|}
return|return
name|properties
return|;
block|}
specifier|protected
name|InputStream
name|findResourceOnClassPath
parameter_list|(
name|String
name|remaining
parameter_list|)
block|{
name|InputStream
name|answer
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|remaining
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
operator|==
literal|null
condition|)
block|{
name|answer
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|remaining
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|BrokerService
name|createBrokerService
parameter_list|(
name|URI
name|brokerURI
parameter_list|,
name|Map
name|properties
parameter_list|)
block|{
return|return
operator|new
name|BrokerService
argument_list|()
return|;
block|}
block|}
end_class

end_unit

