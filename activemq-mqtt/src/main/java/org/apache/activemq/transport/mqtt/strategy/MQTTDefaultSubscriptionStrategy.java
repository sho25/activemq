begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|strategy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapterSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|MQTTProtocolConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|MQTTProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|MQTTProtocolSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|MQTTSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
operator|.
name|ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|CONNECT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation that uses unmapped topic subscriptions.  */
end_comment

begin_class
specifier|public
class|class
name|MQTTDefaultSubscriptionStrategy
extends|extends
name|AbstractMQTTSubscriptionStrategy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTDefaultSubscriptionStrategy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|restoredSubs
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onConnect
parameter_list|(
name|CONNECT
name|connect
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|List
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subs
decl_stmt|;
try|try
block|{
name|subs
operator|=
name|PersistenceAdapterSupport
operator|.
name|listSubscriptions
argument_list|(
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
argument_list|,
name|protocol
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Error loading store subscriptions"
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|connect
operator|.
name|cleanSession
argument_list|()
condition|)
block|{
name|deleteDurableSubs
argument_list|(
name|subs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|restoreDurableSubs
argument_list|(
name|subs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
name|onSubscribe
parameter_list|(
name|String
name|topicName
parameter_list|,
name|QoS
name|requestedQoS
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|MQTTProtocolSupport
operator|.
name|convertMQTTToActiveMQ
argument_list|(
name|topicName
argument_list|)
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
operator|new
name|ConsumerInfo
argument_list|(
name|getNextConsumerId
argument_list|()
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|ActiveMQPrefetchPolicy
operator|.
name|DEFAULT_TOPIC_PREFETCH
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setRetroactive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setDispatchAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// create durable subscriptions only when clean session is false
if|if
condition|(
operator|!
name|protocol
operator|.
name|isCleanSession
argument_list|()
operator|&&
name|protocol
operator|.
name|getClientId
argument_list|()
operator|!=
literal|null
operator|&&
name|requestedQoS
operator|.
name|ordinal
argument_list|()
operator|>=
name|QoS
operator|.
name|AT_LEAST_ONCE
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
name|requestedQoS
operator|+
literal|":"
operator|+
name|topicName
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|ActiveMQPrefetchPolicy
operator|.
name|DEFAULT_DURABLE_TOPIC_PREFETCH
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|protocol
operator|.
name|getActiveMQSubscriptionPrefetch
argument_list|()
operator|>
literal|0
condition|)
block|{
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|protocol
operator|.
name|getActiveMQSubscriptionPrefetch
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|doSubscribe
argument_list|(
name|consumerInfo
argument_list|,
name|topicName
argument_list|,
name|requestedQoS
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onReSubscribe
parameter_list|(
name|MQTTSubscription
name|mqttSubscription
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|ActiveMQDestination
name|destination
init|=
name|mqttSubscription
operator|.
name|getDestination
argument_list|()
decl_stmt|;
comment|// check whether the Topic has been recovered in restoreDurableSubs
comment|// mark subscription available for recovery for duplicate subscription
if|if
condition|(
name|restoredSubs
operator|.
name|remove
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|super
operator|.
name|onReSubscribe
argument_list|(
name|mqttSubscription
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onUnSubscribe
parameter_list|(
name|String
name|topicName
parameter_list|)
throws|throws
name|MQTTProtocolException
block|{
name|MQTTSubscription
name|subscription
init|=
name|mqttSubscriptionByTopic
operator|.
name|remove
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
if|if
condition|(
name|subscription
operator|!=
literal|null
condition|)
block|{
name|doUnSubscribe
argument_list|(
name|subscription
argument_list|)
expr_stmt|;
comment|// check if the durable sub also needs to be removed
if|if
condition|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// also remove it from restored durable subscriptions set
name|restoredSubs
operator|.
name|remove
argument_list|(
name|MQTTProtocolSupport
operator|.
name|convertMQTTToActiveMQ
argument_list|(
name|subscription
operator|.
name|getTopicName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RemoveSubscriptionInfo
name|rsi
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|rsi
operator|.
name|setConnectionId
argument_list|(
name|protocol
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setSubscriptionName
argument_list|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setClientId
argument_list|(
name|protocol
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|sendToActiveMQ
argument_list|(
name|rsi
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ignore failures..
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|deleteDurableSubs
parameter_list|(
name|List
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subs
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|SubscriptionInfo
name|sub
range|:
name|subs
control|)
block|{
name|RemoveSubscriptionInfo
name|rsi
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|rsi
operator|.
name|setConnectionId
argument_list|(
name|protocol
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setSubscriptionName
argument_list|(
name|sub
operator|.
name|getSubcriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setClientId
argument_list|(
name|sub
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|protocol
operator|.
name|sendToActiveMQ
argument_list|(
name|rsi
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// ignore failures..
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not delete the MQTT durable subs."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|restoreDurableSubs
parameter_list|(
name|List
argument_list|<
name|SubscriptionInfo
argument_list|>
name|subs
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|SubscriptionInfo
name|sub
range|:
name|subs
control|)
block|{
name|String
name|name
init|=
name|sub
operator|.
name|getSubcriptionName
argument_list|()
decl_stmt|;
name|String
index|[]
name|split
init|=
name|name
operator|.
name|split
argument_list|(
literal|":"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QoS
name|qoS
init|=
name|QoS
operator|.
name|valueOf
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|onSubscribe
argument_list|(
operator|new
name|Topic
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|,
name|qoS
argument_list|)
argument_list|)
expr_stmt|;
comment|// mark this durable subscription as restored by Broker
name|restoredSubs
operator|.
name|add
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not restore the MQTT durable subs."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

