begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|group
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|ConsumerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|ConsumerEventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|ConsumerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|SchedulerTimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *<P>  * A<CODE>GroupMap</CODE> is used to shared state amongst a distributed  * group. You can restrict ownership of objects inserted into the map,  * by allowing only the map that inserted the objects to update or remove them  *<P>  * Updates to the group shared map are controlled by a co-ordinator.  * The co-ordinator is chosen by the member with the lowest lexicographical id .  *<P>The {@link #selectCordinator(Collection<Member> members)} method may be overridden to   * implement a custom mechanism for choosing the co-ordinator  * are added to the map.  *<P>  * @param<K> the key type  * @param<V> the value type  *  */
end_comment

begin_class
specifier|public
class|class
name|GroupMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Service
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|GroupMap
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STATE_TOPIC_PREFIX
init|=
name|GroupMap
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HEART_BEAT_INTERVAL
init|=
literal|15000
decl_stmt|;
specifier|private
specifier|final
name|Object
name|mapMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|localMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Member
argument_list|>
name|members
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Member
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MapRequest
argument_list|>
name|requests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MapRequest
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MemberChangedListener
argument_list|>
name|membershipListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|MemberChangedListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MapChangedListener
argument_list|>
name|mapChangedListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|MapChangedListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|LRUSet
argument_list|<
name|Message
argument_list|>
name|mapUpdateReplies
init|=
operator|new
name|LRUSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Member
name|local
decl_stmt|;
specifier|private
name|Member
name|coordinator
decl_stmt|;
specifier|private
name|String
name|groupName
decl_stmt|;
specifier|private
name|boolean
name|sharedWrites
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|Topic
name|topic
decl_stmt|;
specifier|private
name|Topic
name|heartBeatTopic
decl_stmt|;
specifier|private
name|Topic
name|inboxTopic
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|ConsumerEventSource
name|consumerEvents
decl_stmt|;
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|SchedulerTimerTask
name|heartBeatTask
decl_stmt|;
specifier|private
name|SchedulerTimerTask
name|checkMembershipTask
decl_stmt|;
specifier|private
name|Timer
name|heartBeatTimer
decl_stmt|;
specifier|private
name|int
name|heartBeatInterval
init|=
name|HEART_BEAT_INTERVAL
decl_stmt|;
specifier|private
name|IdGenerator
name|requestGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|removeOwnedObjectsOnExit
decl_stmt|;
comment|/**      * @param connection      * @param name      */
specifier|public
name|GroupMap
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
literal|"default"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param connection      * @param groupName      * @param name      */
specifier|public
name|GroupMap
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|groupName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|local
operator|=
operator|new
name|Member
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|coordinator
operator|=
name|this
operator|.
name|local
expr_stmt|;
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
block|}
comment|/**      * Set the local map implementation to be used      * By default its a HashMap - but you could use a Cache for example      * @param map      */
specifier|public
name|void
name|setLocalMap
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|this
operator|.
name|localMap
operator|=
name|map
expr_stmt|;
block|}
block|}
comment|/**      * Start membership to the group      * @throws Exception       *       */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|localMap
operator|=
operator|new
name|HashMap
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|this
operator|.
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|producer
operator|=
name|this
operator|.
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|inboxTopic
operator|=
name|this
operator|.
name|session
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
name|String
name|topicName
init|=
name|STATE_TOPIC_PREFIX
operator|+
name|this
operator|.
name|groupName
decl_stmt|;
name|this
operator|.
name|topic
operator|=
name|this
operator|.
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
name|this
operator|.
name|heartBeatTopic
operator|=
name|this
operator|.
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
operator|+
literal|".heartbeat"
argument_list|)
expr_stmt|;
name|MessageConsumer
name|privateInbox
init|=
name|this
operator|.
name|session
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
decl_stmt|;
name|privateInbox
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|handleResponses
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ActiveMQMessageConsumer
name|mapChangeConsumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|this
operator|.
name|session
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|topic
argument_list|)
decl_stmt|;
name|mapChangeConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|handleMapUpdates
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MessageConsumer
name|heartBeatConsumer
init|=
name|this
operator|.
name|session
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|heartBeatTopic
argument_list|)
decl_stmt|;
name|heartBeatConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|handleHeartbeats
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerEvents
operator|=
operator|new
name|ConsumerEventSource
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|this
operator|.
name|topic
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerEvents
operator|.
name|setConsumerListener
argument_list|(
operator|new
name|ConsumerListener
argument_list|()
block|{
specifier|public
name|void
name|onConsumerEvent
parameter_list|(
name|ConsumerEvent
name|event
parameter_list|)
block|{
name|handleConsumerEvents
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerEvents
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|local
operator|.
name|setId
argument_list|(
name|mapChangeConsumer
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|local
operator|.
name|setInBoxDestination
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
expr_stmt|;
name|sendHeartBeat
argument_list|()
expr_stmt|;
name|this
operator|.
name|heartBeatTask
operator|=
operator|new
name|SchedulerTimerTask
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sendHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkMembershipTask
operator|=
operator|new
name|SchedulerTimerTask
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkMembership
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|heartBeatTimer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Distributed heart beat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|heartBeatTimer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|.
name|heartBeatTask
argument_list|,
name|getHeartBeatInterval
argument_list|()
operator|/
literal|3
argument_list|,
name|getHeartBeatInterval
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * stop membership to the group      * @throws Exception       */
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|checkMembershipTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|heartBeatTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|heartBeatTimer
operator|.
name|purge
argument_list|()
expr_stmt|;
name|this
operator|.
name|consumerEvents
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return the partitionName      */
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupName
return|;
block|}
comment|/**      * @return the sharedWrites      */
specifier|public
name|boolean
name|isSharedWrites
parameter_list|()
block|{
return|return
name|this
operator|.
name|sharedWrites
return|;
block|}
comment|/**      * @param sharedWrites the sharedWrites to set      */
specifier|public
name|void
name|setSharedWrites
parameter_list|(
name|boolean
name|sharedWrites
parameter_list|)
block|{
name|this
operator|.
name|sharedWrites
operator|=
name|sharedWrites
expr_stmt|;
block|}
comment|/**      * @return the heartBeatInterval      */
specifier|public
name|int
name|getHeartBeatInterval
parameter_list|()
block|{
return|return
name|this
operator|.
name|heartBeatInterval
return|;
block|}
comment|/**      * @param heartBeatInterval the heartBeatInterval to set      */
specifier|public
name|void
name|setHeartBeatInterval
parameter_list|(
name|int
name|heartBeatInterval
parameter_list|)
block|{
name|this
operator|.
name|heartBeatInterval
operator|=
name|heartBeatInterval
expr_stmt|;
block|}
comment|/**      * @param l      */
specifier|public
name|void
name|addMemberChangedListener
parameter_list|(
name|MemberChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|membershipListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param l      */
specifier|public
name|void
name|removeMemberChangedListener
parameter_list|(
name|MemberChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|membershipListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param l      */
specifier|public
name|void
name|addMapChangedListener
parameter_list|(
name|MapChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|mapChangedListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param l      */
specifier|public
name|void
name|removeMapChangedListener
parameter_list|(
name|MapChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|mapChangedListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the removeOwnedObjectsOnExit      */
specifier|public
name|boolean
name|isRemoveOwnedObjectsOnExit
parameter_list|()
block|{
return|return
name|removeOwnedObjectsOnExit
return|;
block|}
comment|/**      * Sets the policy for owned objects in the group      * If set to true, when this<code>GroupMap<code> stops,      * any objects it owns will be removed from the group map      * @param removeOwnedObjectsOnExit the removeOwnedObjectsOnExit to set      */
specifier|public
name|void
name|setRemoveOwnedObjectsOnExit
parameter_list|(
name|boolean
name|removeOwnedObjectsOnExit
parameter_list|)
block|{
name|this
operator|.
name|removeOwnedObjectsOnExit
operator|=
name|removeOwnedObjectsOnExit
expr_stmt|;
block|}
comment|/**      * clear entries from the Map      * @throws IllegalStateException       */
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|IllegalStateException
block|{
name|checkStarted
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|localMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|keys
operator|=
operator|new
name|HashSet
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|(
name|this
operator|.
name|localMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|localMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
range|:
name|keys
control|)
block|{
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|EntryKey
name|stateKey
init|=
operator|new
name|EntryKey
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|key
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|containsKey
argument_list|(
name|stateKey
argument_list|)
else|:
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|EntryValue
name|entryValue
init|=
operator|new
name|EntryValue
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|value
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|containsValue
argument_list|(
name|entryValue
argument_list|)
else|:
literal|false
return|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|localMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
operator|.
name|entrySet
argument_list|()
return|;
block|}
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|stateKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|value
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|get
argument_list|(
name|stateKey
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getValue
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|isEmpty
argument_list|()
else|:
literal|true
return|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|K
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
range|:
name|this
operator|.
name|localMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Puts an value into the map associated with the key      * @param key       * @param value       * @return the old value or null      * @throws IllegalAccessException       * @throws IllegalStateException       *       */
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IllegalStateException
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|isSharedWrites
argument_list|()
argument_list|,
name|isRemoveOwnedObjectsOnExit
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Puts an value into the map associated with the key      * @param key       * @param value       * @param sharedWrites       * @param removeOnExit       * @return the old value or null      * @throws IllegalAccessException       * @throws IllegalStateException       *       */
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|boolean
name|sharedWrites
parameter_list|,
name|boolean
name|removeOnExit
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IllegalStateException
block|{
name|checkStarted
argument_list|()
expr_stmt|;
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|stateValue
init|=
operator|new
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|entryKey
operator|.
name|setShare
argument_list|(
name|sharedWrites
argument_list|)
expr_stmt|;
name|entryKey
operator|.
name|setRemoveOnExit
argument_list|(
name|removeOnExit
argument_list|)
expr_stmt|;
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
return|return
name|sendEntryMessage
argument_list|(
name|entryMsg
argument_list|)
return|;
block|}
comment|/**      * Add the Map to the distribution      * @param t      * @throws IllegalAccessException      * @throws IllegalStateException      */
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|t
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IllegalStateException
block|{
name|putAll
argument_list|(
name|t
argument_list|,
name|isSharedWrites
argument_list|()
argument_list|,
name|isRemoveOwnedObjectsOnExit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add the Map to the distribution      * @param t      * @param sharedWrites      * @param removeOnExit      * @throws IllegalAccessException      * @throws IllegalStateException      */
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|t
parameter_list|,
name|boolean
name|sharedWrites
parameter_list|,
name|boolean
name|removeOnExit
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IllegalStateException
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|t
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|sharedWrites
argument_list|,
name|removeOnExit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * remove a value from the map associated with the key      * @param key       * @return the Value or null      * @throws IllegalAccessException       * @throws IllegalStateException       *       */
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IllegalStateException
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
return|return
name|remove
argument_list|(
name|entryKey
argument_list|)
return|;
block|}
name|V
name|remove
parameter_list|(
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|IllegalStateException
block|{
name|checkStarted
argument_list|()
expr_stmt|;
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
return|return
name|sendEntryMessage
argument_list|(
name|entryMsg
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|List
argument_list|<
name|V
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
range|:
name|this
operator|.
name|localMap
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return a set of the members       */
specifier|public
name|Set
argument_list|<
name|Member
argument_list|>
name|members
parameter_list|()
block|{
name|Set
argument_list|<
name|Member
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Member
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * @param key      * @return true if this is the owner of the key      */
specifier|public
name|boolean
name|isOwner
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|stateKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|entryValue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|entryValue
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|get
argument_list|(
name|stateKey
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entryValue
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|entryValue
operator|.
name|getOwner
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Get the owner of a key      * @param key      * @return the owner - or null if the key doesn't exist      */
specifier|public
name|Member
name|getOwner
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|stateKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|entryValue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|entryValue
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|get
argument_list|(
name|stateKey
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
return|return
name|entryValue
operator|!=
literal|null
condition|?
name|entryValue
operator|.
name|getOwner
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * @return true if the coordinator for the map      */
specifier|public
name|boolean
name|isCoordinator
parameter_list|()
block|{
return|return
name|this
operator|.
name|local
operator|.
name|equals
argument_list|(
name|this
operator|.
name|coordinator
argument_list|)
return|;
block|}
comment|/**      * Select a coordinator - by default, its the member with       * the lowest lexicographical id       * @param members      * @return      */
specifier|protected
name|Member
name|selectCordinator
parameter_list|(
name|Collection
argument_list|<
name|Member
argument_list|>
name|members
parameter_list|)
block|{
name|Member
name|result
init|=
name|this
operator|.
name|local
decl_stmt|;
for|for
control|(
name|Member
name|member
range|:
name|members
control|)
block|{
if|if
condition|(
name|result
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|result
operator|=
name|member
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
name|V
name|sendEntryMessage
parameter_list|(
name|EntryMessage
name|entry
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|MapRequest
name|request
init|=
operator|new
name|MapRequest
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|requestGenerator
operator|.
name|generateId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|requests
init|)
block|{
name|this
operator|.
name|requests
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|session
operator|.
name|createObjectMessage
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSReplyTo
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|producer
operator|.
name|send
argument_list|(
name|this
operator|.
name|topic
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
name|result
operator|=
name|request
operator|.
name|get
argument_list|(
name|getHeartBeatInterval
argument_list|()
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send EntryMessage "
operator|+
name|entry
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|instanceof
name|IllegalAccessException
condition|)
block|{
throw|throw
operator|(
name|IllegalAccessException
operator|)
name|result
throw|;
block|}
return|return
operator|(
name|V
operator|)
name|result
return|;
block|}
name|void
name|handleResponses
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
name|ObjectMessage
name|objMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
name|Object
name|payload
init|=
name|objMsg
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|instanceof
name|Member
condition|)
block|{
name|handleHeartbeats
argument_list|(
operator|(
name|Member
operator|)
name|payload
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|payload
operator|instanceof
name|EntryMessage
condition|)
block|{
name|EntryMessage
name|entryMsg
init|=
operator|(
name|EntryMessage
operator|)
name|payload
decl_stmt|;
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
init|=
name|entryMsg
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
operator|new
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
operator|(
name|V
operator|)
name|entryMsg
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
name|boolean
name|fireUpdate
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|localMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|this
operator|.
name|localMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|fireUpdate
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fireUpdate
condition|)
block|{
name|fireMapChanged
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|String
name|id
init|=
name|objMsg
operator|.
name|getJMSCorrelationID
argument_list|()
decl_stmt|;
name|MapRequest
name|result
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|requests
init|)
block|{
name|result
operator|=
name|this
operator|.
name|requests
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|objMsg
operator|.
name|getObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to process reply: "
operator|+
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|handleMapUpdates
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Object
name|reply
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
try|try
block|{
name|ObjectMessage
name|objMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|EntryMessage
name|entryMsg
init|=
operator|(
name|EntryMessage
operator|)
name|objMsg
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
init|=
name|entryMsg
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
operator|new
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
operator|(
name|V
operator|)
name|entryMsg
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|containsKey
init|=
literal|false
decl_stmt|;
name|boolean
name|mapExists
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|mapExists
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|mapExists
condition|)
block|{
name|containsKey
operator|=
name|this
operator|.
name|localMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mapExists
condition|)
block|{
if|if
condition|(
name|containsKey
condition|)
block|{
name|Member
name|owner
init|=
name|getOwner
argument_list|(
operator|(
name|K
operator|)
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|&&
operator|!
name|key
operator|.
name|isShare
argument_list|()
condition|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|old
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entryMsg
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|INSERT
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|old
operator|=
name|this
operator|.
name|localMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|old
operator|=
name|this
operator|.
name|localMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|fireMapChanged
argument_list|(
name|owner
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|old
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reply
operator|=
operator|new
name|IllegalAccessException
argument_list|(
literal|"Owned by "
operator|+
name|owner
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|entryMsg
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|INSERT
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|this
operator|.
name|localMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|fireMapChanged
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to process map update"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reply
operator|=
name|e
expr_stmt|;
block|}
try|try
block|{
name|Destination
name|replyTo
init|=
name|message
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
name|String
name|correlationId
init|=
name|message
operator|.
name|getJMSCorrelationID
argument_list|()
decl_stmt|;
name|ObjectMessage
name|replyMsg
init|=
name|this
operator|.
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|reply
argument_list|)
decl_stmt|;
name|replyMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
comment|// reuse timestamp - this will be cleared by the producer on
comment|// send
name|replyMsg
operator|.
name|setJMSTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCoordinator
argument_list|()
condition|)
block|{
name|this
operator|.
name|producer
operator|.
name|send
argument_list|(
name|replyTo
argument_list|,
name|replyMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|mapUpdateReplies
init|)
block|{
name|this
operator|.
name|mapUpdateReplies
operator|.
name|add
argument_list|(
name|replyMsg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send response to a map update "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected map update message "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|handleHeartbeats
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
name|ObjectMessage
name|objMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|Member
name|member
init|=
operator|(
name|Member
operator|)
name|objMsg
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|handleHeartbeats
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to handle heart beat"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|handleHeartbeats
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|member
operator|.
name|setTimeStamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|members
operator|.
name|put
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|,
name|member
argument_list|)
operator|==
literal|null
condition|)
block|{
name|fireMemberStarted
argument_list|(
name|member
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|member
operator|.
name|equals
argument_list|(
name|this
operator|.
name|local
argument_list|)
condition|)
block|{
comment|//send the new member our details
name|sendHeartBeat
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCoordinator
argument_list|()
condition|)
block|{
name|updateNewMemberMap
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|handleConsumerEvents
parameter_list|(
name|ConsumerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|Member
name|member
init|=
name|this
operator|.
name|members
operator|.
name|remove
argument_list|(
name|event
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|member
operator|!=
literal|null
condition|)
block|{
name|fireMemberStopped
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|doElection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|checkMembership
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|checkTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getHeartBeatInterval
argument_list|()
decl_stmt|;
name|boolean
name|doElection
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Member
name|member
range|:
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|member
operator|.
name|getTimeStamp
argument_list|()
operator|<
name|checkTime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Member timestamp expired "
operator|+
name|member
argument_list|)
expr_stmt|;
name|this
operator|.
name|members
operator|.
name|remove
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|fireMemberStopped
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|doElection
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doElection
condition|)
block|{
name|doElection
argument_list|()
expr_stmt|;
block|}
block|}
comment|//clear down cached reply messages
name|long
name|checkTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
operator|(
name|getHeartBeatInterval
argument_list|()
operator|*
literal|2
operator|)
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|tmpList
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapUpdateReplies
init|)
block|{
try|try
block|{
for|for
control|(
name|Message
name|msg
range|:
name|this
operator|.
name|mapUpdateReplies
control|)
block|{
if|if
condition|(
name|msg
operator|.
name|getJMSTimestamp
argument_list|()
operator|<
name|checkTime
condition|)
block|{
name|tmpList
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Message
name|msg
range|:
name|tmpList
control|)
block|{
name|this
operator|.
name|mapUpdateReplies
operator|.
name|remove
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to clear down mapUpdateReplies"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|sendHeartBeat
parameter_list|()
block|{
name|sendHeartBeat
argument_list|(
name|this
operator|.
name|heartBeatTopic
argument_list|)
expr_stmt|;
block|}
name|void
name|sendHeartBeat
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|ObjectMessage
name|msg
init|=
name|this
operator|.
name|session
operator|.
name|createObjectMessage
argument_list|(
name|this
operator|.
name|local
argument_list|)
decl_stmt|;
name|this
operator|.
name|producer
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to send heart beat"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|updateNewMemberMap
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|localMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|list
control|)
block|{
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|session
operator|.
name|createObjectMessage
argument_list|(
name|entryMsg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|member
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
name|this
operator|.
name|producer
operator|.
name|send
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update new member "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|fireMemberStarted
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|local
operator|.
name|getName
argument_list|()
operator|+
literal|" Member started "
operator|+
name|member
argument_list|)
expr_stmt|;
for|for
control|(
name|MemberChangedListener
name|l
range|:
name|this
operator|.
name|membershipListeners
control|)
block|{
name|l
operator|.
name|memberStarted
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|fireMemberStopped
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|local
operator|.
name|getName
argument_list|()
operator|+
literal|" Member stopped "
operator|+
name|member
argument_list|)
expr_stmt|;
for|for
control|(
name|MemberChangedListener
name|l
range|:
name|this
operator|.
name|membershipListeners
control|)
block|{
name|l
operator|.
name|memberStopped
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
comment|//remove all entries owned by the stopped member
name|List
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|>
name|tmpList
init|=
operator|new
name|ArrayList
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|mapExists
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|mapExists
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|mapExists
condition|)
block|{
for|for
control|(
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
range|:
name|this
operator|.
name|localMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entryKey
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|member
argument_list|)
condition|)
block|{
if|if
condition|(
name|entryKey
operator|.
name|isRemoveOnExit
argument_list|()
condition|)
block|{
name|tmpList
operator|.
name|add
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|mapExists
condition|)
block|{
for|for
control|(
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
range|:
name|tmpList
control|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|value
operator|=
name|this
operator|.
name|localMap
operator|.
name|remove
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
block|}
name|fireMapChanged
argument_list|(
name|member
argument_list|,
name|entryKey
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|fireMapChanged
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|)
block|{
for|for
control|(
name|MapChangedListener
name|l
range|:
name|this
operator|.
name|mapChangedListeners
control|)
block|{
name|l
operator|.
name|mapChanged
argument_list|(
name|owner
argument_list|,
name|key
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|doElection
parameter_list|()
block|{
name|this
operator|.
name|coordinator
operator|=
name|selectCordinator
argument_list|(
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCoordinator
argument_list|()
operator|&&
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
comment|//send any inflight requests
name|List
argument_list|<
name|Message
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapUpdateReplies
init|)
block|{
name|list
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|mapUpdateReplies
argument_list|)
expr_stmt|;
name|this
operator|.
name|mapUpdateReplies
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
try|try
block|{
for|for
control|(
name|Message
name|msg
range|:
name|list
control|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|this
operator|.
name|producer
operator|.
name|send
argument_list|(
name|msg
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to resend replies"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|checkStarted
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"GroupMap "
operator|+
name|this
operator|.
name|local
operator|.
name|getName
argument_list|()
operator|+
literal|" not started"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

