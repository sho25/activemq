begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|AmqpHeader
block|{
specifier|static
specifier|final
name|Buffer
name|PREFIX
init|=
operator|new
name|Buffer
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'A'
block|,
literal|'M'
block|,
literal|'Q'
block|,
literal|'P'
block|}
argument_list|)
decl_stmt|;
specifier|private
name|Buffer
name|buffer
decl_stmt|;
specifier|public
name|AmqpHeader
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Buffer
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'A'
block|,
literal|'M'
block|,
literal|'Q'
block|,
literal|'P'
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AmqpHeader
parameter_list|(
name|Buffer
name|buffer
parameter_list|)
block|{
name|setBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getProtocolId
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|&
literal|0xFF
return|;
block|}
specifier|public
name|void
name|setProtocolId
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|buffer
operator|.
name|data
index|[
name|buffer
operator|.
name|offset
operator|+
literal|4
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|getMajor
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|&
literal|0xFF
return|;
block|}
specifier|public
name|void
name|setMajor
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|buffer
operator|.
name|data
index|[
name|buffer
operator|.
name|offset
operator|+
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|getMinor
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|&
literal|0xFF
return|;
block|}
specifier|public
name|void
name|setMinor
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|buffer
operator|.
name|data
index|[
name|buffer
operator|.
name|offset
operator|+
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|getRevision
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|&
literal|0xFF
return|;
block|}
specifier|public
name|void
name|setRevision
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|buffer
operator|.
name|data
index|[
name|buffer
operator|.
name|offset
operator|+
literal|7
index|]
operator|=
operator|(
name|byte
operator|)
name|value
expr_stmt|;
block|}
specifier|public
name|Buffer
name|getBuffer
parameter_list|()
block|{
return|return
name|buffer
return|;
block|}
specifier|public
name|void
name|setBuffer
parameter_list|(
name|Buffer
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|startsWith
argument_list|(
name|PREFIX
argument_list|)
operator|||
name|value
operator|.
name|length
argument_list|()
operator|!=
literal|8
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not an AMQP header buffer"
argument_list|)
throw|;
block|}
name|buffer
operator|=
name|value
operator|.
name|buffer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

