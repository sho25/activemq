begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activegroups
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activegroups
operator|.
name|command
operator|.
name|AsyncMapRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activegroups
operator|.
name|command
operator|.
name|ElectionMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activegroups
operator|.
name|command
operator|.
name|EntryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activegroups
operator|.
name|command
operator|.
name|EntryMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activegroups
operator|.
name|command
operator|.
name|EntryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activegroups
operator|.
name|command
operator|.
name|MapRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|ConsumerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|ConsumerEventSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|ConsumerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|SchedulerTimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  *<P>  * A<CODE>Group</CODE> is a distributed collaboration implementation that is used to shared state and process  * messages amongst a distributed group of other<CODE>Group</CODE> instances. Membership of a group is handled  * automatically using discovery.  *<P>  * The underlying transport is JMS and there are some optimizations that occur for membership if used with ActiveMQ -  * but<CODE>Group</CODE> can be used with any JMS implementation.  *   *<P>  * Updates to the group shared map are controlled by a coordinator. The coordinator is elected by the member with the  * lowest lexicographical id - based on the bully algorithm [Silberschatz et al. 1993]  *<P>  * The {@link #selectCordinator(Collection<Member> members)} method may be overridden to implement a custom mechanism  * for choosing how the coordinator is elected for the map.  *<P>  * New<CODE>Group</CODE> instances have their state updated by the coordinator, and coordinator failure is handled  * automatically within the group.  *<P>  * All map updates are totally ordered through the coordinator, whilst read operations happen locally.  *<P>  * A<CODE>Group</CODE> supports the concept of owner only updates(write locks), shared updates, entry expiration  * times and removal on owner exit - all of which are optional. In addition, you can grab and release locks for values  * in the map, independently of who created them.  *<P>  * In addition, members of a group can broadcast messages and implement request/response with other<CODE>Group</CODE>  * instances.  *   *<P>  *   * @param<K>  *            the key type  * @param<V>  *            the value type  *   */
end_comment

begin_class
specifier|public
class|class
name|Group
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
implements|,
name|Service
block|{
comment|/**      * default interval within which to detect a member failure      */
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_HEART_BEAT_INTERVAL
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|EXPIRATION_SWEEP_INTERVAL
init|=
literal|500
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STATE_PREFIX
init|=
literal|"STATE."
operator|+
name|Group
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_MESSAGE_PREFIX
init|=
literal|"MESSAGE."
operator|+
name|Group
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STATE_TYPE
init|=
literal|"state"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MESSAGE_TYPE
init|=
literal|"message"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MEMBER_ID_PROPERTY
init|=
literal|"memberId"
decl_stmt|;
specifier|protected
name|Member
name|local
decl_stmt|;
specifier|private
specifier|final
name|Object
name|mapMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|localMap
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Member
argument_list|>
name|members
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Member
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MapRequest
argument_list|>
name|stateRequests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MapRequest
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MapRequest
argument_list|>
name|messageRequests
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MapRequest
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MemberChangedListener
argument_list|>
name|membershipListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|MemberChangedListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|GroupStateChangedListener
argument_list|>
name|mapChangedListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|GroupStateChangedListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|GroupMessageListener
argument_list|>
name|groupMessageListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|GroupMessageListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Member
name|coordinator
decl_stmt|;
specifier|private
name|String
name|groupName
decl_stmt|;
specifier|private
name|boolean
name|alwaysLock
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|stateSession
decl_stmt|;
specifier|private
name|Session
name|messageSession
decl_stmt|;
specifier|private
name|Topic
name|stateTopic
decl_stmt|;
specifier|private
name|Topic
name|heartBeatTopic
decl_stmt|;
specifier|private
name|Topic
name|inboxTopic
decl_stmt|;
specifier|private
name|Topic
name|messageTopic
decl_stmt|;
specifier|private
name|Queue
name|messageQueue
decl_stmt|;
specifier|private
name|MessageProducer
name|stateProducer
decl_stmt|;
specifier|private
name|MessageProducer
name|messageProducer
decl_stmt|;
specifier|private
name|ConsumerEventSource
name|consumerEvents
decl_stmt|;
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|SchedulerTimerTask
name|heartBeatTask
decl_stmt|;
specifier|private
name|SchedulerTimerTask
name|checkMembershipTask
decl_stmt|;
specifier|private
name|SchedulerTimerTask
name|expirationTask
decl_stmt|;
specifier|private
name|Timer
name|timer
decl_stmt|;
specifier|private
name|long
name|heartBeatInterval
init|=
name|DEFAULT_HEART_BEAT_INTERVAL
decl_stmt|;
specifier|private
name|IdGenerator
name|idGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|removeOwnedObjectsOnExit
decl_stmt|;
specifier|private
name|boolean
name|releaseLockOnExit
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|timeToLive
decl_stmt|;
specifier|private
name|int
name|lockTimeToLive
decl_stmt|;
specifier|private
name|int
name|minimumGroupSize
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|coordinatorWeight
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|electionFinished
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|ExecutorService
name|stateExecutor
decl_stmt|;
specifier|private
name|ExecutorService
name|messageExecutor
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|electionExecutor
decl_stmt|;
specifier|private
specifier|final
name|Object
name|memberMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**      * @param connection      * @param name      */
specifier|public
name|Group
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|connection
argument_list|,
literal|"default"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param connection      * @param groupName      * @param name      */
specifier|public
name|Group
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|groupName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|this
operator|.
name|local
operator|=
operator|new
name|Member
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|coordinator
operator|=
name|this
operator|.
name|local
expr_stmt|;
name|this
operator|.
name|groupName
operator|=
name|groupName
expr_stmt|;
block|}
comment|/**      * Set the local map implementation to be used By default its a HashMap - but you could use a Cache for example      *       * @param map      */
specifier|public
name|void
name|setLocalMap
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|this
operator|.
name|localMap
operator|=
name|map
expr_stmt|;
block|}
block|}
comment|/**      * Start membership to the group      *       * @throws Exception      *       */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|localMap
operator|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateSession
operator|=
name|this
operator|.
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageSession
operator|=
name|this
operator|.
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|=
name|this
operator|.
name|stateSession
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|this
operator|.
name|inboxTopic
operator|=
name|this
operator|.
name|stateSession
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
name|String
name|stateTopicName
init|=
name|STATE_PREFIX
operator|+
name|this
operator|.
name|groupName
decl_stmt|;
name|this
operator|.
name|stateTopic
operator|=
name|this
operator|.
name|stateSession
operator|.
name|createTopic
argument_list|(
name|stateTopicName
argument_list|)
expr_stmt|;
name|this
operator|.
name|heartBeatTopic
operator|=
name|this
operator|.
name|stateSession
operator|.
name|createTopic
argument_list|(
name|stateTopicName
operator|+
literal|".heartbeat"
argument_list|)
expr_stmt|;
name|String
name|messageDestinationName
init|=
name|GROUP_MESSAGE_PREFIX
operator|+
name|this
operator|.
name|groupName
decl_stmt|;
name|this
operator|.
name|messageTopic
operator|=
name|this
operator|.
name|messageSession
operator|.
name|createTopic
argument_list|(
name|messageDestinationName
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageQueue
operator|=
name|this
operator|.
name|messageSession
operator|.
name|createQueue
argument_list|(
name|messageDestinationName
argument_list|)
expr_stmt|;
name|MessageConsumer
name|privateInbox
init|=
name|this
operator|.
name|messageSession
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|memberChangeConsumer
init|=
name|this
operator|.
name|stateSession
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|stateTopic
argument_list|)
decl_stmt|;
name|String
name|memberId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|memberChangeConsumer
operator|instanceof
name|ActiveMQMessageConsumer
condition|)
block|{
name|memberId
operator|=
operator|(
operator|(
name|ActiveMQMessageConsumer
operator|)
name|memberChangeConsumer
operator|)
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|memberId
operator|=
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|local
operator|.
name|setId
argument_list|(
name|memberId
argument_list|)
expr_stmt|;
name|this
operator|.
name|local
operator|.
name|setInBoxDestination
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
expr_stmt|;
name|this
operator|.
name|local
operator|.
name|setCoordinatorWeight
argument_list|(
name|getCoordinatorWeight
argument_list|()
argument_list|)
expr_stmt|;
name|privateInbox
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|processJMSMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|memberChangeConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|processJMSMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|=
name|this
operator|.
name|messageSession
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|MessageConsumer
name|topicMessageConsumer
init|=
name|this
operator|.
name|messageSession
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|messageTopic
argument_list|)
decl_stmt|;
name|topicMessageConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|processJMSMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MessageConsumer
name|queueMessageConsumer
init|=
name|this
operator|.
name|messageSession
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|messageQueue
argument_list|)
decl_stmt|;
name|queueMessageConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|processJMSMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|MessageConsumer
name|heartBeatConsumer
init|=
name|this
operator|.
name|stateSession
operator|.
name|createConsumer
argument_list|(
name|this
operator|.
name|heartBeatTopic
argument_list|)
decl_stmt|;
name|heartBeatConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|handleHeartbeats
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerEvents
operator|=
operator|new
name|ConsumerEventSource
argument_list|(
name|this
operator|.
name|connection
argument_list|,
name|this
operator|.
name|stateTopic
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerEvents
operator|.
name|setConsumerListener
argument_list|(
operator|new
name|ConsumerListener
argument_list|()
block|{
specifier|public
name|void
name|onConsumerEvent
parameter_list|(
name|ConsumerEvent
name|event
parameter_list|)
block|{
name|handleConsumerEvents
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|consumerEvents
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|electionExecutor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|LinkedBlockingQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"Election{"
operator|+
name|Group
operator|.
name|this
operator|.
name|local
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"Group State{"
operator|+
name|Group
operator|.
name|this
operator|.
name|local
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageExecutor
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"Group Messages{"
operator|+
name|Group
operator|.
name|this
operator|.
name|local
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendHeartBeat
argument_list|()
expr_stmt|;
name|this
operator|.
name|heartBeatTask
operator|=
operator|new
name|SchedulerTimerTask
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|sendHeartBeat
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|checkMembershipTask
operator|=
operator|new
name|SchedulerTimerTask
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkMembership
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|expirationTask
operator|=
operator|new
name|SchedulerTimerTask
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|expirationSweep
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|=
operator|new
name|Timer
argument_list|(
literal|"Distributed heart beat"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|.
name|heartBeatTask
argument_list|,
name|getHeartBeatInterval
argument_list|()
operator|/
literal|3
argument_list|,
name|getHeartBeatInterval
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|.
name|checkMembershipTask
argument_list|,
name|getHeartBeatInterval
argument_list|()
argument_list|,
name|getHeartBeatInterval
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|scheduleAtFixedRate
argument_list|(
name|this
operator|.
name|expirationTask
argument_list|,
name|EXPIRATION_SWEEP_INTERVAL
argument_list|,
name|EXPIRATION_SWEEP_INTERVAL
argument_list|)
expr_stmt|;
comment|// await for members to join
name|long
name|timeout
init|=
call|(
name|long
call|)
argument_list|(
name|this
operator|.
name|heartBeatInterval
operator|*
name|this
operator|.
name|minimumGroupSize
operator|*
literal|1.5
argument_list|)
decl_stmt|;
name|long
name|deadline
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
while|while
condition|(
operator|(
name|this
operator|.
name|members
operator|.
name|size
argument_list|()
operator|<
name|this
operator|.
name|minimumGroupSize
operator|||
operator|!
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
operator|)
operator|&&
name|timeout
operator|>
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|electionFinished
init|)
block|{
name|this
operator|.
name|electionFinished
operator|.
name|wait
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
name|timeout
operator|=
name|Math
operator|.
name|max
argument_list|(
name|deadline
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * stop membership to the group      *       * @throws Exception      */
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|this
operator|.
name|expirationTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|checkMembershipTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|heartBeatTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|expirationTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|this
operator|.
name|timer
operator|.
name|purge
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|electionExecutor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|electionExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|stateExecutor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stateExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|messageExecutor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|messageExecutor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|consumerEvents
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|stateSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|messageSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception stopping"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return true if started      */
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * @return true if there is elections have finished      */
specifier|public
name|boolean
name|isElectionFinished
parameter_list|()
block|{
return|return
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|setElectionFinished
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|electionFinished
operator|.
name|set
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the partitionName      */
specifier|public
name|String
name|getGroupName
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupName
return|;
block|}
comment|/**      * @return the name ofthis map      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|local
operator|.
name|getName
argument_list|()
return|;
block|}
comment|/**      * @return true if by default always lock objects (default is false)      */
specifier|public
name|boolean
name|isAlwaysLock
parameter_list|()
block|{
return|return
name|this
operator|.
name|alwaysLock
return|;
block|}
comment|/**      * @param alwaysLock -      *            set true if objects inserted will always be locked (default is false)      */
specifier|public
name|void
name|setAlwaysLock
parameter_list|(
name|boolean
name|alwaysLock
parameter_list|)
block|{
name|this
operator|.
name|alwaysLock
operator|=
name|alwaysLock
expr_stmt|;
block|}
comment|/**      * @return the heartBeatInterval      */
specifier|public
name|long
name|getHeartBeatInterval
parameter_list|()
block|{
return|return
name|this
operator|.
name|heartBeatInterval
return|;
block|}
comment|/**      * @param heartBeatInterval      *            the heartBeatInterval to set      */
specifier|public
name|void
name|setHeartBeatInterval
parameter_list|(
name|long
name|heartBeatInterval
parameter_list|)
block|{
name|this
operator|.
name|heartBeatInterval
operator|=
name|heartBeatInterval
expr_stmt|;
block|}
comment|/**      * Add a listener for membership changes      *       * @param l      */
specifier|public
name|void
name|addMemberChangedListener
parameter_list|(
name|MemberChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|membershipListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a listener for membership changes      *       * @param l      */
specifier|public
name|void
name|removeMemberChangedListener
parameter_list|(
name|MemberChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|membershipListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a listener for map changes      *       * @param l      */
specifier|public
name|void
name|addMapChangedListener
parameter_list|(
name|GroupStateChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|mapChangedListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * Remove a listener for map changes      *       * @param l      */
specifier|public
name|void
name|removeMapChangedListener
parameter_list|(
name|GroupStateChangedListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|mapChangedListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a listener for group messages      *       * @param l      */
specifier|public
name|void
name|addGroupMessageListener
parameter_list|(
name|GroupMessageListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|groupMessageListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * remove a listener for group messages      *       * @param l      */
specifier|public
name|void
name|removeGroupMessageListener
parameter_list|(
name|GroupMessageListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|groupMessageListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the timeToLive      */
specifier|public
name|int
name|getTimeToLive
parameter_list|()
block|{
return|return
name|this
operator|.
name|timeToLive
return|;
block|}
comment|/**      * @param timeToLive      *            the timeToLive to set      */
specifier|public
name|void
name|setTimeToLive
parameter_list|(
name|int
name|timeToLive
parameter_list|)
block|{
name|this
operator|.
name|timeToLive
operator|=
name|timeToLive
expr_stmt|;
block|}
comment|/**      * @return the removeOwnedObjectsOnExit      */
specifier|public
name|boolean
name|isRemoveOwnedObjectsOnExit
parameter_list|()
block|{
return|return
name|this
operator|.
name|removeOwnedObjectsOnExit
return|;
block|}
comment|/**      * Sets the policy for owned objects in the group If set to true, when this<code>GroupMap<code> stops,      * any objects it owns will be removed from the group map      * @param removeOwnedObjectsOnExit the removeOwnedObjectsOnExit to set      */
specifier|public
name|void
name|setRemoveOwnedObjectsOnExit
parameter_list|(
name|boolean
name|removeOwnedObjectsOnExit
parameter_list|)
block|{
name|this
operator|.
name|removeOwnedObjectsOnExit
operator|=
name|removeOwnedObjectsOnExit
expr_stmt|;
block|}
comment|/**      * @return releaseLockOnExit - true by default      */
specifier|public
name|boolean
name|isReleaseLockOnExit
parameter_list|()
block|{
return|return
name|releaseLockOnExit
return|;
block|}
comment|/**      * set release lock on exit - true by default      *       * @param releaseLockOnExit      *            the releaseLockOnExit to set      */
specifier|public
name|void
name|setReleaseLockOnExit
parameter_list|(
name|boolean
name|releaseLockOnExit
parameter_list|)
block|{
name|this
operator|.
name|releaseLockOnExit
operator|=
name|releaseLockOnExit
expr_stmt|;
block|}
comment|/**      * @return the lockTimeToLive      */
specifier|public
name|int
name|getLockTimeToLive
parameter_list|()
block|{
return|return
name|lockTimeToLive
return|;
block|}
comment|/**      * @param lockTimeToLive      *            the lockTimeToLive to set      */
specifier|public
name|void
name|setLockTimeToLive
parameter_list|(
name|int
name|lockTimeToLive
parameter_list|)
block|{
name|this
operator|.
name|lockTimeToLive
operator|=
name|lockTimeToLive
expr_stmt|;
block|}
comment|/**      * @return the minimumGroupSize      */
specifier|public
name|int
name|getMinimumGroupSize
parameter_list|()
block|{
return|return
name|this
operator|.
name|minimumGroupSize
return|;
block|}
comment|/**      * @param minimumGroupSize      *            the minimumGroupSize to set      */
specifier|public
name|void
name|setMinimumGroupSize
parameter_list|(
name|int
name|minimumGroupSize
parameter_list|)
block|{
name|this
operator|.
name|minimumGroupSize
operator|=
name|minimumGroupSize
expr_stmt|;
block|}
comment|/**      * @return the coordinatorWeight      */
specifier|public
name|int
name|getCoordinatorWeight
parameter_list|()
block|{
return|return
name|this
operator|.
name|coordinatorWeight
return|;
block|}
comment|/**      * @param coordinatorWeight      *            the coordinatorWeight to set      */
specifier|public
name|void
name|setCoordinatorWeight
parameter_list|(
name|int
name|coordinatorWeight
parameter_list|)
block|{
name|this
operator|.
name|coordinatorWeight
operator|=
name|coordinatorWeight
expr_stmt|;
block|}
comment|/**      * clear entries from the Map      *       * @throws IllegalStateException      */
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|IllegalStateException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|localMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|keys
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|keys
operator|=
operator|new
name|HashSet
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|localMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|K
name|key
range|:
name|keys
control|)
block|{
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|localMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
else|:
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|EntryValue
name|entryValue
init|=
operator|new
name|EntryValue
argument_list|(
literal|null
argument_list|,
name|value
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|containsValue
argument_list|(
name|entryValue
argument_list|)
else|:
literal|false
return|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntryValue
argument_list|<
name|V
argument_list|>
name|entry
range|:
name|this
operator|.
name|localMap
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
operator|(
name|K
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
operator|.
name|entrySet
argument_list|()
return|;
block|}
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|value
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
return|return
name|value
operator|!=
literal|null
condition|?
name|value
operator|.
name|getValue
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|isEmpty
argument_list|()
else|:
literal|true
return|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|result
operator|=
operator|new
name|HashSet
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|localMap
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Puts an value into the map associated with the key      *       * @param key      * @param value      * @return the old value or null      * @throws GroupUpdateException      * @throws IllegalStateException      *       */
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
throws|throws
name|GroupUpdateException
throws|,
name|IllegalStateException
block|{
return|return
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|isAlwaysLock
argument_list|()
argument_list|,
name|isRemoveOwnedObjectsOnExit
argument_list|()
argument_list|,
name|isReleaseLockOnExit
argument_list|()
argument_list|,
name|getTimeToLive
argument_list|()
argument_list|,
name|getLockTimeToLive
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Puts an value into the map associated with the key      *       * @param key      * @param value      * @param lock      * @param removeOnExit      * @param releaseLockOnExit      * @param timeToLive      * @param leaseTime      * @return the old value or null      * @throws GroupUpdateException      * @throws IllegalStateException      *       */
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|,
name|boolean
name|lock
parameter_list|,
name|boolean
name|removeOnExit
parameter_list|,
name|boolean
name|releaseLockOnExit
parameter_list|,
name|long
name|timeToLive
parameter_list|,
name|long
name|leaseTime
parameter_list|)
throws|throws
name|GroupUpdateException
throws|,
name|IllegalStateException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|entryKey
operator|.
name|setLocked
argument_list|(
name|lock
argument_list|)
expr_stmt|;
name|entryKey
operator|.
name|setRemoveOnExit
argument_list|(
name|removeOnExit
argument_list|)
expr_stmt|;
name|entryKey
operator|.
name|setReleaseLockOnExit
argument_list|(
name|releaseLockOnExit
argument_list|)
expr_stmt|;
name|entryKey
operator|.
name|setTimeToLive
argument_list|(
name|timeToLive
argument_list|)
expr_stmt|;
name|entryKey
operator|.
name|setLockLeaseTime
argument_list|(
name|leaseTime
argument_list|)
expr_stmt|;
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
return|return
operator|(
name|V
operator|)
name|sendStateRequest
argument_list|(
name|getCoordinator
argument_list|()
argument_list|,
name|entryMsg
argument_list|)
return|;
block|}
comment|/**      * Remove a lock on a key      *       * @param key      * @throws GroupUpdateException      */
specifier|public
name|void
name|unlock
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|GroupUpdateException
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|entryKey
operator|.
name|setLocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setLockUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendStateRequest
argument_list|(
name|getCoordinator
argument_list|()
argument_list|,
name|entryMsg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Lock a key in the distributed map      *       * @param key      * @throws GroupUpdateException      */
specifier|public
name|void
name|lock
parameter_list|(
name|K
name|key
parameter_list|)
throws|throws
name|GroupUpdateException
block|{
name|lock
argument_list|(
name|key
argument_list|,
name|getLockTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Lock a key in the distributed map      *       * @param key      * @param leaseTime      * @throws GroupUpdateException      */
specifier|public
name|void
name|lock
parameter_list|(
name|K
name|key
parameter_list|,
name|long
name|leaseTime
parameter_list|)
throws|throws
name|GroupUpdateException
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|entryKey
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entryKey
operator|.
name|setLockLeaseTime
argument_list|(
name|leaseTime
argument_list|)
expr_stmt|;
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setLockUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sendStateRequest
argument_list|(
name|getCoordinator
argument_list|()
argument_list|,
name|entryMsg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add the Map to the distribution      *       * @param t      * @throws GroupUpdateException      * @throws IllegalStateException      */
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|t
parameter_list|)
throws|throws
name|GroupUpdateException
throws|,
name|IllegalStateException
block|{
name|putAll
argument_list|(
name|t
argument_list|,
name|isAlwaysLock
argument_list|()
argument_list|,
name|isRemoveOwnedObjectsOnExit
argument_list|()
argument_list|,
name|isReleaseLockOnExit
argument_list|()
argument_list|,
name|getTimeToLive
argument_list|()
argument_list|,
name|getLockTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add the Map to the distribution      *       * @param t      * @param lock      * @param removeOnExit      * @param releaseLockOnExit      * @param timeToLive      * @param lockTimeToLive      * @throws GroupUpdateException      * @throws IllegalStateException      */
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|t
parameter_list|,
name|boolean
name|lock
parameter_list|,
name|boolean
name|removeOnExit
parameter_list|,
name|boolean
name|releaseLockOnExit
parameter_list|,
name|long
name|timeToLive
parameter_list|,
name|long
name|lockTimeToLive
parameter_list|)
throws|throws
name|GroupUpdateException
throws|,
name|IllegalStateException
block|{
for|for
control|(
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|t
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|lock
argument_list|,
name|removeOnExit
argument_list|,
name|releaseLockOnExit
argument_list|,
name|timeToLive
argument_list|,
name|lockTimeToLive
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * remove a value from the map associated with the key      *       * @param key      * @return the Value or null      * @throws GroupUpdateException      * @throws IllegalStateException      *       */
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
throws|throws
name|GroupUpdateException
throws|,
name|IllegalStateException
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
init|=
operator|new
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|(
name|this
operator|.
name|local
argument_list|,
operator|(
name|K
operator|)
name|key
argument_list|)
decl_stmt|;
return|return
name|doRemove
argument_list|(
name|entryKey
argument_list|)
return|;
block|}
name|V
name|doRemove
parameter_list|(
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
parameter_list|)
throws|throws
name|GroupUpdateException
throws|,
name|IllegalStateException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
return|return
operator|(
name|V
operator|)
name|sendStateRequest
argument_list|(
name|getCoordinator
argument_list|()
argument_list|,
name|entryMsg
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
return|return
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|List
argument_list|<
name|V
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|V
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
range|:
name|this
operator|.
name|localMap
operator|.
name|values
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|value
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * @return a set of the members      */
specifier|public
name|Set
argument_list|<
name|Member
argument_list|>
name|getMembers
parameter_list|()
block|{
name|Set
argument_list|<
name|Member
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|Member
argument_list|>
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Get a member by its unique id      *       * @param id      * @return      */
specifier|public
name|Member
name|getMemberById
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
name|this
operator|.
name|members
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**      * Return a member of the Group with the matching name      *       * @param name      * @return      */
specifier|public
name|Member
name|getMemberByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Member
name|member
range|:
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|member
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|member
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @return the local member that represents this<CODE>Group</CODE> instance      */
specifier|public
name|Member
name|getLocalMember
parameter_list|()
block|{
return|return
name|this
operator|.
name|local
return|;
block|}
comment|/**      * @param key      * @return true if this is the owner of the key      */
specifier|public
name|boolean
name|isOwner
parameter_list|(
name|K
name|key
parameter_list|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|entryValue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|entryValue
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entryValue
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|entryValue
operator|.
name|getKey
argument_list|()
operator|.
name|getOwner
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Get the owner of a key      *       * @param key      * @return the owner - or null if the key doesn't exist      */
name|EntryKey
name|getKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|entryValue
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|entryValue
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|?
name|this
operator|.
name|localMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
expr_stmt|;
block|}
return|return
name|entryValue
operator|!=
literal|null
condition|?
name|entryValue
operator|.
name|getKey
argument_list|()
else|:
literal|null
return|;
block|}
comment|/**      * @return true if the coordinator for the map      */
specifier|protected
name|boolean
name|isCoordinator
parameter_list|()
block|{
return|return
name|isCoordinatorMatch
argument_list|()
operator|&&
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * @return true if the coordinator for the map      */
specifier|protected
name|boolean
name|isCoordinatorMatch
parameter_list|()
block|{
return|return
name|this
operator|.
name|local
operator|.
name|equals
argument_list|(
name|this
operator|.
name|coordinator
argument_list|)
return|;
block|}
comment|/**      * @return the coordinator      */
specifier|public
name|Member
name|getCoordinator
parameter_list|()
block|{
return|return
name|this
operator|.
name|coordinator
return|;
block|}
name|void
name|setCoordinator
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|this
operator|.
name|coordinator
operator|=
name|member
expr_stmt|;
block|}
comment|/**      * Broadcast a message to the group      *       * @param message      * @throws JMSException      */
specifier|public
name|void
name|broadcastMessage
parameter_list|(
name|Object
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|messageSession
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|message
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setStringProperty
argument_list|(
name|MEMBER_ID_PROPERTY
argument_list|,
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|.
name|send
argument_list|(
name|this
operator|.
name|messageTopic
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
comment|/**      * As the group for a response - one will be selected from the group      *       * @param member      * @param message      * @param timeout      *            in milliseconds - a value if 0 means wait until complete      * @return      * @throws JMSException      */
specifier|public
name|Serializable
name|broadcastMessageRequest
parameter_list|(
name|Object
name|message
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|MapRequest
name|request
init|=
operator|new
name|MapRequest
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|messageRequests
init|)
block|{
name|this
operator|.
name|messageRequests
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|message
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSReplyTo
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setStringProperty
argument_list|(
name|MEMBER_ID_PROPERTY
argument_list|,
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|.
name|send
argument_list|(
name|this
operator|.
name|messageQueue
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
name|result
operator|=
name|request
operator|.
name|get
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
operator|(
name|Serializable
operator|)
name|result
return|;
block|}
comment|/**      * Send a message to the group - but only the least loaded member will process it      *       * @param message      * @throws JMSException      */
specifier|public
name|void
name|sendMessage
parameter_list|(
name|Object
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|messageSession
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|message
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setStringProperty
argument_list|(
name|MEMBER_ID_PROPERTY
argument_list|,
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|.
name|send
argument_list|(
name|this
operator|.
name|messageQueue
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send a message to an individual member      *       * @param member      * @param message      * @throws JMSException      */
specifier|public
name|void
name|sendMessage
parameter_list|(
name|Member
name|member
parameter_list|,
name|Object
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|messageSession
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|message
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setStringProperty
argument_list|(
name|MEMBER_ID_PROPERTY
argument_list|,
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|.
name|send
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Send a request to a member      *       * @param member      * @param message      * @param timeout      *            in milliseconds - a value if 0 means wait until complete      * @return the request or null      * @throws JMSException      */
specifier|public
name|Object
name|sendMessageRequest
parameter_list|(
name|Member
name|member
parameter_list|,
name|Object
name|message
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|MapRequest
name|request
init|=
operator|new
name|MapRequest
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|messageRequests
init|)
block|{
name|this
operator|.
name|messageRequests
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|message
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSReplyTo
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setStringProperty
argument_list|(
name|MEMBER_ID_PROPERTY
argument_list|,
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|.
name|send
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
name|result
operator|=
name|request
operator|.
name|get
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * send a response to a message      *       * @param member      * @param replyId      * @param message      * @throws JMSException      */
specifier|public
name|void
name|sendMessageResponse
parameter_list|(
name|Member
name|member
parameter_list|,
name|String
name|replyId
parameter_list|,
name|Object
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkStatus
argument_list|()
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|messageSession
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|message
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|replyId
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setStringProperty
argument_list|(
name|MEMBER_ID_PROPERTY
argument_list|,
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|messageProducer
operator|.
name|send
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
comment|/**      * Select a coordinator - coordinator weighting is used - or if everything is equal - a comparison of member ids.      *       * @param members      * @return      */
specifier|protected
name|Member
name|selectCordinator
parameter_list|(
name|List
argument_list|<
name|Member
argument_list|>
name|list
parameter_list|)
block|{
name|List
argument_list|<
name|Member
argument_list|>
name|sorted
init|=
name|sortMemberList
argument_list|(
name|list
argument_list|)
decl_stmt|;
name|Member
name|result
init|=
name|sorted
operator|.
name|isEmpty
argument_list|()
condition|?
name|this
operator|.
name|local
else|:
name|sorted
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Member
argument_list|>
name|sortMemberList
parameter_list|(
name|List
argument_list|<
name|Member
argument_list|>
name|list
parameter_list|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Member
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Member
name|m1
parameter_list|,
name|Member
name|m2
parameter_list|)
block|{
name|int
name|result
init|=
name|m1
operator|.
name|getCoordinatorWeight
argument_list|()
operator|-
name|m2
operator|.
name|getCoordinatorWeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
name|result
operator|=
name|m1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
name|Object
name|sendStateRequest
parameter_list|(
name|Member
name|member
parameter_list|,
name|Serializable
name|payload
parameter_list|)
block|{
name|Object
name|result
init|=
literal|null
decl_stmt|;
name|MapRequest
name|request
init|=
operator|new
name|MapRequest
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|stateRequests
init|)
block|{
name|this
operator|.
name|stateRequests
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSReplyTo
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|STATE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|send
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
name|result
operator|=
name|request
operator|.
name|get
argument_list|(
name|getHeartBeatInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send request "
operator|+
name|payload
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|instanceof
name|GroupUpdateException
condition|)
block|{
throw|throw
operator|(
name|GroupUpdateException
operator|)
name|result
throw|;
block|}
if|if
condition|(
name|result
operator|instanceof
name|EntryMessage
condition|)
block|{
name|EntryMessage
name|entryMsg
init|=
operator|(
name|EntryMessage
operator|)
name|result
decl_stmt|;
name|result
operator|=
name|entryMsg
operator|.
name|getOldValue
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|void
name|sendAsyncStateRequest
parameter_list|(
name|AsyncMapRequest
name|asyncRequest
parameter_list|,
name|Member
name|member
parameter_list|,
name|Serializable
name|payload
parameter_list|)
block|{
name|MapRequest
name|request
init|=
operator|new
name|MapRequest
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|this
operator|.
name|idGenerator
operator|.
name|generateId
argument_list|()
decl_stmt|;
name|asyncRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|request
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|stateRequests
init|)
block|{
name|this
operator|.
name|stateRequests
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSReplyTo
argument_list|(
name|this
operator|.
name|inboxTopic
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|STATE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|send
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send async request "
operator|+
name|payload
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|sendReply
parameter_list|(
name|Object
name|reply
parameter_list|,
name|Destination
name|replyTo
parameter_list|,
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|replyTo
operator|.
name|equals
argument_list|(
name|this
operator|.
name|local
operator|.
name|getInBoxDestination
argument_list|()
argument_list|)
condition|)
block|{
name|processRequest
argument_list|(
name|id
argument_list|,
name|reply
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ObjectMessage
name|replyMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
operator|(
name|Serializable
operator|)
name|reply
argument_list|)
decl_stmt|;
name|replyMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|replyMsg
operator|.
name|setJMSType
argument_list|(
name|STATE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|send
argument_list|(
name|replyTo
argument_list|,
name|replyMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't send reply from co-ordinator"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"NULL replyTo destination"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|broadcastMapUpdate
parameter_list|(
name|EntryMessage
name|entry
parameter_list|,
name|String
name|correlationId
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|EntryMessage
name|copy
init|=
name|entry
operator|.
name|copy
argument_list|()
decl_stmt|;
name|copy
operator|.
name|setMapUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
name|copy
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSCorrelationID
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|STATE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|send
argument_list|(
name|this
operator|.
name|stateTopic
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to send EntryMessage "
operator|+
name|entry
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|processJMSMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
name|ObjectMessage
name|objMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
name|String
name|messageType
init|=
name|objMsg
operator|.
name|getJMSType
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|objMsg
operator|.
name|getJMSCorrelationID
argument_list|()
decl_stmt|;
name|String
name|memberId
init|=
name|objMsg
operator|.
name|getStringProperty
argument_list|(
name|MEMBER_ID_PROPERTY
argument_list|)
decl_stmt|;
name|Destination
name|replyTo
init|=
name|objMsg
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
name|Object
name|payload
init|=
name|objMsg
operator|.
name|getObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|STATE_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|payload
operator|instanceof
name|Member
condition|)
block|{
name|handleHeartbeats
argument_list|(
operator|(
name|Member
operator|)
name|payload
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|payload
operator|instanceof
name|EntryMessage
condition|)
block|{
name|EntryMessage
name|entryMsg
init|=
operator|(
name|EntryMessage
operator|)
name|payload
decl_stmt|;
name|entryMsg
operator|=
name|entryMsg
operator|.
name|copy
argument_list|()
expr_stmt|;
if|if
condition|(
name|entryMsg
operator|.
name|isLockUpdate
argument_list|()
condition|)
block|{
name|processLockUpdate
argument_list|(
name|entryMsg
argument_list|,
name|replyTo
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|entryMsg
operator|.
name|isMapUpdate
argument_list|()
condition|)
block|{
name|processMapUpdate
argument_list|(
name|entryMsg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processEntryMessage
argument_list|(
name|entryMsg
argument_list|,
name|replyTo
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|payload
operator|instanceof
name|ElectionMessage
condition|)
block|{
name|ElectionMessage
name|electionMsg
init|=
operator|(
name|ElectionMessage
operator|)
name|payload
decl_stmt|;
name|electionMsg
operator|=
name|electionMsg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|processElectionMessage
argument_list|(
name|electionMsg
argument_list|,
name|replyTo
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|messageType
operator|.
name|equals
argument_list|(
name|MESSAGE_TYPE
argument_list|)
condition|)
block|{
name|processGroupMessage
argument_list|(
name|memberId
argument_list|,
name|id
argument_list|,
name|replyTo
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unknown message type: "
operator|+
name|messageType
argument_list|)
expr_stmt|;
block|}
name|processRequest
argument_list|(
name|id
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Can't process a message type of null"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to process message: "
operator|+
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|processRequest
parameter_list|(
name|String
name|id
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|MapRequest
name|result
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|stateRequests
init|)
block|{
name|result
operator|=
name|this
operator|.
name|stateRequests
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|processLockUpdate
parameter_list|(
name|EntryMessage
name|entryMsg
parameter_list|,
name|Destination
name|replyTo
parameter_list|,
name|String
name|correlationId
parameter_list|)
block|{
name|waitForElection
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|boolean
name|newLock
init|=
name|entryMsg
operator|.
name|getKey
argument_list|()
operator|.
name|isLocked
argument_list|()
decl_stmt|;
name|Member
name|newOwner
init|=
name|entryMsg
operator|.
name|getKey
argument_list|()
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|long
name|newLockExpiration
init|=
name|newLock
condition|?
name|entryMsg
operator|.
name|getKey
argument_list|()
operator|.
name|getLockExpiration
argument_list|()
else|:
literal|0l
decl_stmt|;
if|if
condition|(
name|isCoordinator
argument_list|()
operator|&&
operator|!
name|entryMsg
operator|.
name|isMapUpdate
argument_list|()
condition|)
block|{
name|EntryKey
name|originalKey
init|=
name|getKey
argument_list|(
name|entryMsg
operator|.
name|getKey
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|originalKey
operator|.
name|isLocked
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|originalKey
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|entryMsg
operator|.
name|getKey
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
name|Serializable
name|reply
init|=
operator|new
name|GroupUpdateException
argument_list|(
literal|"Owned by "
operator|+
name|originalKey
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|sendReply
argument_list|(
name|reply
argument_list|,
name|replyTo
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|originalKey
operator|.
name|setLocked
argument_list|(
name|newLock
argument_list|)
expr_stmt|;
name|originalKey
operator|.
name|setOwner
argument_list|(
name|newOwner
argument_list|)
expr_stmt|;
name|originalKey
operator|.
name|setLockExpiration
argument_list|(
name|newLockExpiration
argument_list|)
expr_stmt|;
name|broadcastMapUpdate
argument_list|(
name|entryMsg
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|originalKey
operator|.
name|setLocked
argument_list|(
name|newLock
argument_list|)
expr_stmt|;
name|originalKey
operator|.
name|setOwner
argument_list|(
name|newOwner
argument_list|)
expr_stmt|;
name|originalKey
operator|.
name|setLockExpiration
argument_list|(
name|newLockExpiration
argument_list|)
expr_stmt|;
name|broadcastMapUpdate
argument_list|(
name|entryMsg
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|EntryKey
name|originalKey
init|=
name|getKey
argument_list|(
name|entryMsg
operator|.
name|getKey
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalKey
operator|!=
literal|null
condition|)
block|{
name|originalKey
operator|.
name|setLocked
argument_list|(
name|newLock
argument_list|)
expr_stmt|;
name|originalKey
operator|.
name|setOwner
argument_list|(
name|newOwner
argument_list|)
expr_stmt|;
name|originalKey
operator|.
name|setLockExpiration
argument_list|(
name|newLockExpiration
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|processEntryMessage
parameter_list|(
name|EntryMessage
name|entryMsg
parameter_list|,
name|Destination
name|replyTo
parameter_list|,
name|String
name|correlationId
parameter_list|)
block|{
name|waitForElection
argument_list|()
expr_stmt|;
if|if
condition|(
name|isCoordinator
argument_list|()
condition|)
block|{
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
init|=
name|entryMsg
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
operator|new
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
operator|(
name|V
operator|)
name|entryMsg
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|insert
init|=
name|entryMsg
operator|.
name|isInsert
argument_list|()
decl_stmt|;
name|boolean
name|containsKey
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|containsKey
operator|=
name|this
operator|.
name|localMap
operator|.
name|containsKey
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|containsKey
condition|)
block|{
name|EntryKey
name|originalKey
init|=
name|getKey
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|originalKey
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|)
operator|||
operator|!
name|originalKey
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|old
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|insert
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|old
operator|=
name|this
operator|.
name|localMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|old
operator|=
name|this
operator|.
name|localMap
operator|.
name|remove
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|entryMsg
operator|.
name|setOldValue
argument_list|(
name|old
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|broadcastMapUpdate
argument_list|(
name|entryMsg
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
name|fireMapChanged
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|old
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Serializable
name|reply
init|=
operator|new
name|GroupUpdateException
argument_list|(
literal|"Owned by "
operator|+
name|originalKey
operator|.
name|getOwner
argument_list|()
argument_list|)
decl_stmt|;
name|sendReply
argument_list|(
name|reply
argument_list|,
name|replyTo
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|insert
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|this
operator|.
name|localMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|broadcastMapUpdate
argument_list|(
name|entryMsg
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
name|fireMapChanged
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sendReply
argument_list|(
literal|null
argument_list|,
name|replyTo
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|processMapUpdate
parameter_list|(
name|EntryMessage
name|entryMsg
parameter_list|)
block|{
name|boolean
name|containsKey
init|=
literal|false
decl_stmt|;
name|EntryKey
argument_list|<
name|K
argument_list|>
name|key
init|=
name|entryMsg
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
operator|new
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|(
name|key
argument_list|,
operator|(
name|V
operator|)
name|entryMsg
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|insert
init|=
name|entryMsg
operator|.
name|isInsert
argument_list|()
operator|||
name|entryMsg
operator|.
name|isSync
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|containsKey
operator|=
name|this
operator|.
name|localMap
operator|.
name|containsKey
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitForElection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCoordinator
argument_list|()
operator|||
name|entryMsg
operator|.
name|isSync
argument_list|()
condition|)
block|{
if|if
condition|(
name|containsKey
condition|)
block|{
if|if
condition|(
name|key
operator|.
name|isLockExpired
argument_list|()
condition|)
block|{
name|EntryValue
name|old
init|=
name|this
operator|.
name|localMap
operator|.
name|get
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|old
operator|.
name|getKey
argument_list|()
operator|.
name|setLocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|old
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|insert
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|old
operator|=
name|this
operator|.
name|localMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|old
operator|=
name|this
operator|.
name|localMap
operator|.
name|remove
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|fireMapChanged
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|old
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
name|entryMsg
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|insert
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|this
operator|.
name|localMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|fireMapChanged
argument_list|(
name|key
operator|.
name|getOwner
argument_list|()
argument_list|,
name|key
operator|.
name|getKey
argument_list|()
argument_list|,
literal|null
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|processGroupMessage
parameter_list|(
name|String
name|memberId
parameter_list|,
name|String
name|replyId
parameter_list|,
name|Destination
name|replyTo
parameter_list|,
name|Object
name|payload
parameter_list|)
block|{
name|Member
name|member
init|=
name|this
operator|.
name|members
operator|.
name|get
argument_list|(
name|memberId
argument_list|)
decl_stmt|;
if|if
condition|(
name|member
operator|!=
literal|null
condition|)
block|{
name|fireMemberMessage
argument_list|(
name|member
argument_list|,
name|replyId
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|replyId
operator|!=
literal|null
condition|)
block|{
name|MapRequest
name|result
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|messageRequests
init|)
block|{
name|result
operator|=
name|this
operator|.
name|messageRequests
operator|.
name|remove
argument_list|(
name|replyId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|replyId
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|handleHeartbeats
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|message
operator|instanceof
name|ObjectMessage
condition|)
block|{
name|ObjectMessage
name|objMsg
init|=
operator|(
name|ObjectMessage
operator|)
name|message
decl_stmt|;
name|Member
name|member
init|=
operator|(
name|Member
operator|)
name|objMsg
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|handleHeartbeats
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to handle heart beat"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|handleHeartbeats
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|member
operator|.
name|setTimeStamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|members
operator|.
name|put
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|,
name|member
argument_list|)
operator|==
literal|null
condition|)
block|{
name|fireMemberStarted
argument_list|(
name|member
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|member
operator|.
name|equals
argument_list|(
name|this
operator|.
name|local
argument_list|)
condition|)
block|{
name|sendHeartBeat
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|election
argument_list|(
name|member
argument_list|,
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|memberMutex
init|)
block|{
name|this
operator|.
name|memberMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|handleConsumerEvents
parameter_list|(
name|ConsumerEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|Member
name|member
init|=
name|this
operator|.
name|members
operator|.
name|remove
argument_list|(
name|event
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|member
operator|!=
literal|null
condition|)
block|{
name|fireMemberStopped
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|election
argument_list|(
name|member
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|checkMembership
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
condition|)
block|{
name|long
name|checkTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getHeartBeatInterval
argument_list|()
decl_stmt|;
name|boolean
name|doElection
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Member
name|member
range|:
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|member
operator|.
name|getTimeStamp
argument_list|()
operator|<
name|checkTime
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Member timestamp expired "
operator|+
name|member
argument_list|)
expr_stmt|;
name|this
operator|.
name|members
operator|.
name|remove
argument_list|(
name|member
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|fireMemberStopped
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|doElection
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|doElection
condition|)
block|{
name|election
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|expirationSweep
parameter_list|()
block|{
name|waitForElection
argument_list|()
expr_stmt|;
if|if
condition|(
name|isCoordinator
argument_list|()
operator|&&
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|EntryKey
argument_list|>
name|expiredMessages
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|EntryKey
argument_list|>
name|expiredLocks
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|Map
argument_list|<
name|K
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|map
init|=
name|this
operator|.
name|localMap
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|EntryValue
name|value
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|EntryKey
name|k
init|=
name|value
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|isExpired
argument_list|(
name|currentTime
argument_list|)
condition|)
block|{
if|if
condition|(
name|expiredMessages
operator|==
literal|null
condition|)
block|{
name|expiredMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|EntryKey
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|expiredMessages
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|isLockExpired
argument_list|(
name|currentTime
argument_list|)
condition|)
block|{
name|k
operator|.
name|setLocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|expiredLocks
operator|==
literal|null
condition|)
block|{
name|expiredLocks
operator|=
operator|new
name|ArrayList
argument_list|<
name|EntryKey
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|expiredLocks
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// do the actual removal of entries in a separate thread
if|if
condition|(
name|expiredMessages
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|EntryKey
argument_list|>
name|expire
init|=
name|expiredMessages
decl_stmt|;
name|this
operator|.
name|stateExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doMessageExpiration
argument_list|(
name|expire
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expiredLocks
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|EntryKey
argument_list|>
name|expire
init|=
name|expiredLocks
decl_stmt|;
name|this
operator|.
name|stateExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doLockExpiration
argument_list|(
name|expire
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|doMessageExpiration
parameter_list|(
name|List
argument_list|<
name|EntryKey
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
operator|&&
name|isCoordinator
argument_list|()
condition|)
block|{
for|for
control|(
name|EntryKey
name|k
range|:
name|list
control|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|old
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|old
operator|=
name|this
operator|.
name|localMap
operator|.
name|remove
argument_list|(
name|k
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setExpired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setValue
argument_list|(
name|old
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|broadcastMapUpdate
argument_list|(
name|entryMsg
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fireMapChanged
argument_list|(
name|k
operator|.
name|getOwner
argument_list|()
argument_list|,
name|k
operator|.
name|getKey
argument_list|()
argument_list|,
name|old
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|doLockExpiration
parameter_list|(
name|List
argument_list|<
name|EntryKey
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
operator|&&
name|isCoordinator
argument_list|()
condition|)
block|{
for|for
control|(
name|EntryKey
name|k
range|:
name|list
control|)
block|{
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setLockExpired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|broadcastMapUpdate
argument_list|(
name|entryMsg
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|sendHeartBeat
parameter_list|()
block|{
name|sendHeartBeat
argument_list|(
name|this
operator|.
name|heartBeatTopic
argument_list|)
expr_stmt|;
block|}
name|void
name|sendHeartBeat
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|ObjectMessage
name|msg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
name|this
operator|.
name|local
argument_list|)
decl_stmt|;
name|msg
operator|.
name|setJMSType
argument_list|(
name|STATE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ignore - as we are probably stopping
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to send heart beat"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|updateNewMemberMap
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|localMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|this
operator|.
name|localMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|EntryValue
argument_list|<
name|V
argument_list|>
argument_list|>
name|entry
range|:
name|list
control|)
block|{
name|EntryMessage
name|entryMsg
init|=
operator|new
name|EntryMessage
argument_list|()
decl_stmt|;
name|entryMsg
operator|.
name|setKey
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setType
argument_list|(
name|EntryMessage
operator|.
name|MessageType
operator|.
name|SYNC
argument_list|)
expr_stmt|;
name|entryMsg
operator|.
name|setMapUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
name|entryMsg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|member
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
condition|)
block|{
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|STATE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|send
argument_list|(
name|member
operator|.
name|getInBoxDestination
argument_list|()
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ignore - as closing
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to update new member "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|fireMemberStarted
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|local
operator|.
name|getName
argument_list|()
operator|+
literal|" Member started "
operator|+
name|member
argument_list|)
expr_stmt|;
for|for
control|(
name|MemberChangedListener
name|l
range|:
name|this
operator|.
name|membershipListeners
control|)
block|{
name|l
operator|.
name|memberStarted
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|fireMemberStopped
parameter_list|(
name|Member
name|member
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|local
operator|.
name|getName
argument_list|()
operator|+
literal|" Member stopped "
operator|+
name|member
argument_list|)
expr_stmt|;
for|for
control|(
name|MemberChangedListener
name|l
range|:
name|this
operator|.
name|membershipListeners
control|)
block|{
name|l
operator|.
name|memberStopped
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
comment|// remove all entries owned by the stopped member
name|List
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|>
name|tmpList
init|=
operator|new
name|ArrayList
argument_list|<
name|EntryKey
argument_list|<
name|K
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|mapExists
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|mapExists
operator|=
name|this
operator|.
name|localMap
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|mapExists
condition|)
block|{
for|for
control|(
name|EntryValue
name|value
range|:
name|this
operator|.
name|localMap
operator|.
name|values
argument_list|()
control|)
block|{
name|EntryKey
name|entryKey
init|=
name|value
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|entryKey
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|member
argument_list|)
condition|)
block|{
if|if
condition|(
name|entryKey
operator|.
name|isRemoveOnExit
argument_list|()
condition|)
block|{
name|tmpList
operator|.
name|add
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryKey
operator|.
name|isReleaseLockOnExit
argument_list|()
condition|)
block|{
name|entryKey
operator|.
name|setLocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|mapExists
condition|)
block|{
for|for
control|(
name|EntryKey
argument_list|<
name|K
argument_list|>
name|entryKey
range|:
name|tmpList
control|)
block|{
name|EntryValue
argument_list|<
name|V
argument_list|>
name|value
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|mapMutex
init|)
block|{
name|value
operator|=
name|this
operator|.
name|localMap
operator|.
name|remove
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
block|}
name|fireMapChanged
argument_list|(
name|member
argument_list|,
name|entryKey
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|fireMemberMessage
parameter_list|(
specifier|final
name|Member
name|member
parameter_list|,
specifier|final
name|String
name|replyId
parameter_list|,
specifier|final
name|Object
name|message
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|stateExecutor
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|messageExecutor
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|this
operator|.
name|messageExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doFireMemberMessage
argument_list|(
name|member
argument_list|,
name|replyId
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|doFireMemberMessage
parameter_list|(
name|Member
name|sender
parameter_list|,
name|String
name|replyId
parameter_list|,
name|Object
name|message
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
for|for
control|(
name|GroupMessageListener
name|l
range|:
name|this
operator|.
name|groupMessageListeners
control|)
block|{
name|l
operator|.
name|messageDelivered
argument_list|(
name|sender
argument_list|,
name|replyId
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|fireMapChanged
parameter_list|(
specifier|final
name|Member
name|owner
parameter_list|,
specifier|final
name|Object
name|key
parameter_list|,
specifier|final
name|Object
name|oldValue
parameter_list|,
specifier|final
name|Object
name|newValue
parameter_list|,
specifier|final
name|boolean
name|expired
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|stateExecutor
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|stateExecutor
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|this
operator|.
name|stateExecutor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doFireMapChanged
argument_list|(
name|owner
argument_list|,
name|key
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|,
name|expired
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|doFireMapChanged
parameter_list|(
name|Member
name|owner
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|oldValue
parameter_list|,
name|Object
name|newValue
parameter_list|,
name|boolean
name|expired
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
for|for
control|(
name|GroupStateChangedListener
name|l
range|:
name|this
operator|.
name|mapChangedListeners
control|)
block|{
if|if
condition|(
name|oldValue
operator|==
literal|null
condition|)
block|{
name|l
operator|.
name|mapInsert
argument_list|(
name|owner
argument_list|,
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|newValue
operator|==
literal|null
condition|)
block|{
name|l
operator|.
name|mapRemove
argument_list|(
name|owner
argument_list|,
name|key
argument_list|,
name|oldValue
argument_list|,
name|expired
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|mapUpdate
argument_list|(
name|owner
argument_list|,
name|key
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|checkStatus
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"GroupMap "
operator|+
name|this
operator|.
name|local
operator|.
name|getName
argument_list|()
operator|+
literal|" not started"
argument_list|)
throw|;
block|}
name|waitForElection
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Group:"
operator|+
name|getName
argument_list|()
operator|+
literal|"{id="
operator|+
name|this
operator|.
name|local
operator|.
name|getId
argument_list|()
operator|+
literal|",coordinator="
operator|+
name|isCoordinator
argument_list|()
operator|+
literal|",inbox="
operator|+
name|this
operator|.
name|local
operator|.
name|getInBoxDestination
argument_list|()
operator|+
literal|"}"
return|;
block|}
name|void
name|election
parameter_list|(
specifier|final
name|Member
name|member
parameter_list|,
specifier|final
name|boolean
name|memberStarted
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
operator|&&
name|this
operator|.
name|electionExecutor
operator|!=
literal|null
operator|&&
operator|!
name|this
operator|.
name|electionExecutor
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|electionFinished
init|)
block|{
name|this
operator|.
name|electionFinished
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
operator|.
name|electionExecutor
init|)
block|{
comment|// remove any queued election tasks
name|List
argument_list|<
name|Runnable
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|(
name|this
operator|.
name|electionExecutor
operator|.
name|getQueue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Runnable
name|r
range|:
name|list
control|)
block|{
name|ElectionService
name|es
init|=
operator|(
name|ElectionService
operator|)
name|r
decl_stmt|;
name|es
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|electionExecutor
operator|.
name|remove
argument_list|(
name|es
argument_list|)
expr_stmt|;
block|}
block|}
name|ElectionService
name|es
init|=
operator|new
name|ElectionService
argument_list|(
name|member
argument_list|,
name|memberStarted
argument_list|)
decl_stmt|;
name|es
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|electionExecutor
operator|.
name|execute
argument_list|(
name|es
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|callElection
parameter_list|()
block|{
name|List
argument_list|<
name|Member
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<
name|Member
argument_list|>
argument_list|(
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Member
argument_list|>
name|sorted
init|=
name|sortMemberList
argument_list|(
name|members
argument_list|)
decl_stmt|;
name|AsyncMapRequest
name|request
init|=
operator|new
name|AsyncMapRequest
argument_list|()
decl_stmt|;
name|boolean
name|doCall
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Member
name|member
range|:
name|sorted
control|)
block|{
if|if
condition|(
name|this
operator|.
name|local
operator|.
name|equals
argument_list|(
name|member
argument_list|)
condition|)
block|{
name|doCall
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|doCall
condition|)
block|{
name|ElectionMessage
name|msg
init|=
operator|new
name|ElectionMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMember
argument_list|(
name|this
operator|.
name|local
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setType
argument_list|(
name|ElectionMessage
operator|.
name|MessageType
operator|.
name|ELECTION
argument_list|)
expr_stmt|;
name|sendAsyncStateRequest
argument_list|(
name|request
argument_list|,
name|member
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|result
init|=
name|request
operator|.
name|isSuccess
argument_list|(
name|getHeartBeatInterval
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
name|void
name|processElectionMessage
parameter_list|(
name|ElectionMessage
name|msg
parameter_list|,
name|Destination
name|replyTo
parameter_list|,
name|String
name|correlationId
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|.
name|isElection
argument_list|()
condition|)
block|{
name|msg
operator|.
name|setType
argument_list|(
name|ElectionMessage
operator|.
name|MessageType
operator|.
name|ANSWER
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setMember
argument_list|(
name|this
operator|.
name|local
argument_list|)
expr_stmt|;
name|sendReply
argument_list|(
name|msg
argument_list|,
name|replyTo
argument_list|,
name|correlationId
argument_list|)
expr_stmt|;
name|election
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|msg
operator|.
name|isCoordinator
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|electionFinished
init|)
block|{
name|this
operator|.
name|coordinator
operator|=
name|msg
operator|.
name|getMember
argument_list|()
expr_stmt|;
name|this
operator|.
name|electionFinished
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|electionFinished
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|void
name|broadcastElectionType
parameter_list|(
name|ElectionMessage
operator|.
name|MessageType
name|type
parameter_list|)
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|ElectionMessage
name|msg
init|=
operator|new
name|ElectionMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMember
argument_list|(
name|this
operator|.
name|local
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|ObjectMessage
name|objMsg
init|=
name|this
operator|.
name|stateSession
operator|.
name|createObjectMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setJMSType
argument_list|(
name|STATE_TYPE
argument_list|)
expr_stmt|;
name|this
operator|.
name|stateProducer
operator|.
name|send
argument_list|(
name|this
operator|.
name|stateTopic
argument_list|,
name|objMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// ignore - we are stopping
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to broadcast election message: "
operator|+
name|type
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|void
name|waitForElection
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
operator|.
name|electionFinished
init|)
block|{
while|while
condition|(
name|started
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|this
operator|.
name|electionFinished
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|electionFinished
operator|.
name|wait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted in waitForElection"
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
class|class
name|ElectionService
implements|implements
name|Runnable
block|{
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|Member
name|member
decl_stmt|;
specifier|private
name|boolean
name|memberStarted
decl_stmt|;
name|ElectionService
parameter_list|(
name|Member
name|member
parameter_list|,
name|boolean
name|memberStarted
parameter_list|)
block|{
name|this
operator|.
name|member
operator|=
name|member
expr_stmt|;
name|this
operator|.
name|memberStarted
operator|=
name|memberStarted
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|this
operator|.
name|started
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|void
name|stop
parameter_list|()
block|{
name|this
operator|.
name|started
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|doElection
argument_list|()
expr_stmt|;
block|}
name|void
name|doElection
parameter_list|()
block|{
if|if
condition|(
operator|(
name|this
operator|.
name|member
operator|==
literal|null
operator|||
operator|(
operator|!
name|this
operator|.
name|member
operator|.
name|equals
argument_list|(
name|Group
operator|.
name|this
operator|.
name|local
argument_list|)
operator|||
name|Group
operator|.
name|this
operator|.
name|members
operator|.
name|size
argument_list|()
operator|==
name|getMinimumGroupSize
argument_list|()
operator|)
operator|)
condition|)
block|{
name|boolean
name|wasCoordinator
init|=
name|isCoordinatorMatch
argument_list|()
operator|&&
operator|!
name|isEmpty
argument_list|()
decl_stmt|;
comment|// call an election
while|while
condition|(
operator|!
name|callElection
argument_list|()
operator|&&
name|isStarted
argument_list|()
operator|&&
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
empty_stmt|;
if|if
condition|(
name|isStarted
argument_list|()
operator|&&
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Member
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<
name|Member
argument_list|>
argument_list|(
name|Group
operator|.
name|this
operator|.
name|members
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Group
operator|.
name|this
operator|.
name|coordinator
operator|=
name|selectCordinator
argument_list|(
name|members
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCoordinatorMatch
argument_list|()
condition|)
block|{
name|broadcastElectionType
argument_list|(
name|ElectionMessage
operator|.
name|MessageType
operator|.
name|COORDINATOR
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|memberStarted
operator|&&
name|this
operator|.
name|member
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|wasCoordinator
operator|||
name|isCoordinator
argument_list|()
operator|&&
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|updateNewMemberMap
argument_list|(
name|this
operator|.
name|member
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isElectionFinished
argument_list|()
operator|&&
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|Group
operator|.
name|this
operator|.
name|electionFinished
init|)
block|{
name|Group
operator|.
name|this
operator|.
name|electionFinished
operator|.
name|wait
argument_list|(
name|Group
operator|.
name|this
operator|.
name|heartBeatInterval
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                         }
block|}
if|if
condition|(
operator|!
name|isElectionFinished
argument_list|()
operator|&&
name|this
operator|.
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// we must be the coordinator
name|setCoordinator
argument_list|(
name|getLocalMember
argument_list|()
argument_list|)
expr_stmt|;
name|setElectionFinished
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broadcastElectionType
argument_list|(
name|ElectionMessage
operator|.
name|MessageType
operator|.
name|COORDINATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

