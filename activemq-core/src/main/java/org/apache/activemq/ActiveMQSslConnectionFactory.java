begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|SslTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * An ActiveMQConnectionFactory that allows access to the key and trust managers  * used for SslConnections. There is no reason to use this class unless SSL is  * being used AND the key and trust managers need to be specified from within  * code. In fact, if the URI passed to this class does not have an "ssl" scheme,  * this class will pass all work on to its superclass.  *   * There are two alternative approaches you can use to provide X.509 certificates  * for the SSL connections:  *   * Call<code>setTrustStore</code>,<code>setTrustStorePassword</code>,<code>setKeyStore</code>,  * and<code>setKeyStorePassword</code>.  *   * Call<code>setKeyAndTrustManagers</code>.  *   * @author sepandm@gmail.com  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQSslConnectionFactory
extends|extends
name|ActiveMQConnectionFactory
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ActiveMQSslConnectionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The key and trust managers used to initialize the used SSLContext.
specifier|protected
name|KeyManager
index|[]
name|keyManager
decl_stmt|;
specifier|protected
name|TrustManager
index|[]
name|trustManager
decl_stmt|;
specifier|protected
name|SecureRandom
name|secureRandom
decl_stmt|;
specifier|protected
name|String
name|trustStore
decl_stmt|;
specifier|protected
name|String
name|trustStorePassword
decl_stmt|;
specifier|protected
name|String
name|keyStore
decl_stmt|;
specifier|protected
name|String
name|keyStorePassword
decl_stmt|;
specifier|public
name|ActiveMQSslConnectionFactory
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ActiveMQSslConnectionFactory
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
name|super
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ActiveMQSslConnectionFactory
parameter_list|(
name|URI
name|brokerURL
parameter_list|)
block|{
name|super
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the key and trust managers used when creating SSL connections.      *       * @param km The KeyManagers used.      * @param tm The TrustManagers used.      * @param random The SecureRandom number used.      */
specifier|public
name|void
name|setKeyAndTrustManagers
parameter_list|(
specifier|final
name|KeyManager
index|[]
name|km
parameter_list|,
specifier|final
name|TrustManager
index|[]
name|tm
parameter_list|,
specifier|final
name|SecureRandom
name|random
parameter_list|)
block|{
name|keyManager
operator|=
name|km
expr_stmt|;
name|trustManager
operator|=
name|tm
expr_stmt|;
name|secureRandom
operator|=
name|random
expr_stmt|;
block|}
comment|/**      * Overriding to make special considerations for SSL connections. If we are      * not using SSL, the superclass's method is called. If we are using SSL, an      * SslConnectionFactory is used and it is given the needed key and trust      * managers.      *       * @author sepandm@gmail.com      */
specifier|protected
name|Transport
name|createTransport
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// If the given URI is non-ssl, let superclass handle it.
if|if
condition|(
operator|!
name|brokerURL
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ssl"
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|createTransport
argument_list|()
return|;
block|}
try|try
block|{
if|if
condition|(
name|keyManager
operator|==
literal|null
operator|||
name|trustManager
operator|==
literal|null
condition|)
block|{
name|trustManager
operator|=
name|createTrustManager
argument_list|()
expr_stmt|;
name|keyManager
operator|=
name|createKeyManager
argument_list|()
expr_stmt|;
comment|// secureRandom can be left as null
block|}
name|SslTransportFactory
name|sslFactory
init|=
operator|new
name|SslTransportFactory
argument_list|()
decl_stmt|;
name|SslContext
name|ctx
init|=
operator|new
name|SslContext
argument_list|(
name|keyManager
argument_list|,
name|trustManager
argument_list|,
name|secureRandom
argument_list|)
decl_stmt|;
name|SslContext
operator|.
name|setCurrentSslContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|sslFactory
operator|.
name|doConnect
argument_list|(
name|brokerURL
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
literal|"Could not create Transport. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|TrustManager
index|[]
name|createTrustManager
parameter_list|()
throws|throws
name|Exception
block|{
name|TrustManager
index|[]
name|trustStoreManagers
init|=
literal|null
decl_stmt|;
name|KeyStore
name|trustedCertStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"jks"
argument_list|)
decl_stmt|;
name|InputStream
name|tsStream
init|=
name|getUrlOrResourceAsStream
argument_list|(
name|trustStore
argument_list|)
decl_stmt|;
name|trustedCertStore
operator|.
name|load
argument_list|(
name|tsStream
argument_list|,
name|trustStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|trustedCertStore
argument_list|)
expr_stmt|;
name|trustStoreManagers
operator|=
name|tmf
operator|.
name|getTrustManagers
argument_list|()
expr_stmt|;
return|return
name|trustStoreManagers
return|;
block|}
specifier|protected
name|KeyManager
index|[]
name|createKeyManager
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
literal|"jks"
argument_list|)
decl_stmt|;
name|KeyManager
index|[]
name|keystoreManagers
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|sslCert
init|=
name|loadClientCredential
argument_list|(
name|keyStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslCert
operator|!=
literal|null
operator|&&
name|sslCert
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|sslCert
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|bin
argument_list|,
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|keystoreManagers
operator|=
name|kmf
operator|.
name|getKeyManagers
argument_list|()
expr_stmt|;
block|}
return|return
name|keystoreManagers
return|;
block|}
specifier|protected
name|byte
index|[]
name|loadClientCredential
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InputStream
name|in
init|=
name|getUrlOrResourceAsStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|//FileInputStream in = new FileInputStream(fileName);
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|int
name|i
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|protected
name|InputStream
name|getUrlOrResourceAsStream
parameter_list|(
name|String
name|urlOrResource
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|ins
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|urlOrResource
argument_list|)
decl_stmt|;
name|ins
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|ignore
parameter_list|)
block|{
name|ins
operator|=
literal|null
expr_stmt|;
block|}
comment|// Alternatively, treat as classpath resource
if|if
condition|(
name|ins
operator|==
literal|null
condition|)
block|{
name|ins
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|urlOrResource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ins
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
literal|"Could not load resource: "
operator|+
name|urlOrResource
argument_list|)
throw|;
block|}
return|return
name|ins
return|;
block|}
specifier|public
name|String
name|getTrustStore
parameter_list|()
block|{
return|return
name|trustStore
return|;
block|}
comment|/**      * The location of a keystore file (in<code>jks</code> format) containing one or more      * trusted certificates.      *       * @param trustStore If specified with a scheme, treat as a URL, otherwise treat as a classpath resource.      */
specifier|public
name|void
name|setTrustStore
parameter_list|(
name|String
name|trustStore
parameter_list|)
block|{
name|this
operator|.
name|trustStore
operator|=
name|trustStore
expr_stmt|;
name|trustManager
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getTrustStorePassword
parameter_list|()
block|{
return|return
name|trustStorePassword
return|;
block|}
comment|/**      * The password to match the trust store specified by {@link setTrustStore}.      *       * @param trustStorePassword The password used to unlock the keystore file.      */
specifier|public
name|void
name|setTrustStorePassword
parameter_list|(
name|String
name|trustStorePassword
parameter_list|)
block|{
name|this
operator|.
name|trustStorePassword
operator|=
name|trustStorePassword
expr_stmt|;
block|}
specifier|public
name|String
name|getKeyStore
parameter_list|()
block|{
return|return
name|keyStore
return|;
block|}
comment|/**      * The location of a keystore file (in<code>jks</code> format) containing a certificate      * and its private key.      *       * @param keyStore If specified with a scheme, treat as a URL, otherwise treat as a classpath resource.      */
specifier|public
name|void
name|setKeyStore
parameter_list|(
name|String
name|keyStore
parameter_list|)
block|{
name|this
operator|.
name|keyStore
operator|=
name|keyStore
expr_stmt|;
name|keyManager
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getKeyStorePassword
parameter_list|()
block|{
return|return
name|keyStorePassword
return|;
block|}
comment|/**      * The password to match the key store specified by {@link setKeyStore}.      *       * @param keyStorePassword The password, which is used both to unlock the keystore file      * and as the pass phrase for the private key stored in the keystore.      */
specifier|public
name|void
name|setKeyStorePassword
parameter_list|(
name|String
name|keyStorePassword
parameter_list|)
block|{
name|this
operator|.
name|keyStorePassword
operator|=
name|keyStorePassword
expr_stmt|;
block|}
block|}
end_class

end_unit

