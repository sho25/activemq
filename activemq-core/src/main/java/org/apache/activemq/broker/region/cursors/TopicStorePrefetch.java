begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|NonCachedMessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * perist pendingCount messages pendingCount message (messages awaiting disptach  * to a consumer) cursor  *   * @version $Revision$  */
end_comment

begin_class
class|class
name|TopicStorePrefetch
extends|extends
name|AbstractStoreCursor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TopicStorePrefetch
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TopicMessageStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
name|batchList
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|clientId
decl_stmt|;
specifier|private
name|String
name|subscriberName
decl_stmt|;
specifier|private
name|Subscription
name|subscription
decl_stmt|;
comment|/**      * @param topic      * @param clientId      * @param subscriberName      */
specifier|public
name|TopicStorePrefetch
parameter_list|(
name|Subscription
name|subscription
parameter_list|,
name|Topic
name|topic
parameter_list|,
name|String
name|clientId
parameter_list|,
name|String
name|subscriberName
parameter_list|)
block|{
name|super
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|this
operator|.
name|subscription
operator|=
name|subscription
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|(
name|TopicMessageStore
operator|)
name|topic
operator|.
name|getMessageStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|clientId
operator|=
name|clientId
expr_stmt|;
name|this
operator|.
name|subscriberName
operator|=
name|subscriberName
expr_stmt|;
name|this
operator|.
name|maxProducersToAudit
operator|=
literal|32
expr_stmt|;
name|this
operator|.
name|maxAuditDepth
operator|=
literal|10000
expr_stmt|;
block|}
specifier|public
name|boolean
name|recoverMessageReference
parameter_list|(
name|MessageId
name|messageReference
parameter_list|)
throws|throws
name|Exception
block|{
comment|// shouldn't get called
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not supported"
argument_list|)
throw|;
block|}
comment|/**      * Mark a message as already dispatched      * @param message      */
specifier|public
specifier|synchronized
name|void
name|dispatched
parameter_list|(
name|MessageReference
name|message
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|audit
operator|!=
literal|null
condition|)
block|{
name|isDuplicate
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|removed
init|=
name|this
operator|.
name|batchList
operator|.
name|remove
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|removed
operator|!=
literal|null
condition|)
block|{
name|removed
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|boolean
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|boolean
name|cached
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageEvaluationContext
name|messageEvaluationContext
init|=
operator|new
name|NonCachedMessageEvaluationContext
argument_list|()
decl_stmt|;
name|messageEvaluationContext
operator|.
name|setMessageReference
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|subscription
operator|.
name|matches
argument_list|(
name|message
argument_list|,
name|messageEvaluationContext
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|recoverMessage
argument_list|(
name|message
argument_list|,
name|cached
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
specifier|synchronized
name|int
name|getStoreSize
parameter_list|()
block|{
try|try
block|{
return|return
name|store
operator|.
name|getMessageCount
argument_list|(
name|clientId
argument_list|,
name|subscriberName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|this
operator|+
literal|" Failed to get the outstanding message count from the store"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|resetBatch
parameter_list|()
block|{
name|this
operator|.
name|store
operator|.
name|resetBatching
argument_list|(
name|clientId
argument_list|,
name|subscriberName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doFillBatch
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|store
operator|.
name|recoverNextMessages
argument_list|(
name|clientId
argument_list|,
name|subscriberName
argument_list|,
name|maxBatchSize
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"TopicStorePrefetch"
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
operator|+
literal|"("
operator|+
name|clientId
operator|+
literal|","
operator|+
name|subscriberName
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

