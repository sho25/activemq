begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|KeepAliveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|NetworkBridgeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|DefaultTransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|FutureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A useful base class for implementing demand forwarding bridges.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DemandForwardingBridgeSupport
implements|implements
name|Bridge
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DemandForwardingBridge
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Transport
name|localBroker
decl_stmt|;
specifier|protected
specifier|final
name|Transport
name|remoteBroker
decl_stmt|;
specifier|protected
name|IdGenerator
name|idGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|protected
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|protected
name|ConnectionInfo
name|localConnectionInfo
decl_stmt|;
specifier|protected
name|ConnectionInfo
name|remoteConnectionInfo
decl_stmt|;
specifier|protected
name|SessionInfo
name|localSessionInfo
decl_stmt|;
specifier|protected
name|ProducerInfo
name|producerInfo
decl_stmt|;
specifier|protected
name|String
name|localBrokerName
decl_stmt|;
specifier|protected
name|String
name|remoteBrokerName
decl_stmt|;
specifier|protected
name|String
name|localClientId
decl_stmt|;
specifier|protected
name|String
name|userName
decl_stmt|;
specifier|protected
name|String
name|password
decl_stmt|;
specifier|protected
name|int
name|prefetchSize
init|=
literal|1000
decl_stmt|;
specifier|protected
name|boolean
name|dispatchAsync
decl_stmt|;
specifier|protected
name|String
name|destinationFilter
init|=
literal|">"
decl_stmt|;
specifier|protected
name|String
name|name
init|=
literal|"bridge"
decl_stmt|;
specifier|protected
name|ConsumerInfo
name|demandConsumerInfo
decl_stmt|;
specifier|protected
name|int
name|demandConsumerDispatched
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|localBridgeStarted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|remoteBridgeStarted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|disposed
init|=
literal|false
decl_stmt|;
specifier|protected
name|BrokerId
name|localBrokerId
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|excludedDestinations
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|dynamicallyIncludedDestinations
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|staticallyIncludedDestinations
decl_stmt|;
specifier|protected
name|ActiveMQDestination
index|[]
name|durableDestinations
decl_stmt|;
specifier|protected
name|ConcurrentHashMap
name|subscriptionMapByLocalId
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|protected
name|ConcurrentHashMap
name|subscriptionMapByRemoteId
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|BrokerId
name|localBrokerPath
index|[]
init|=
operator|new
name|BrokerId
index|[]
block|{
literal|null
block|}
decl_stmt|;
specifier|protected
name|CountDownLatch
name|startedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|decreaseNetworkConsumerPriority
decl_stmt|;
specifier|protected
name|boolean
name|shutDown
decl_stmt|;
specifier|protected
name|int
name|networkTTL
init|=
literal|1
decl_stmt|;
specifier|public
name|DemandForwardingBridgeSupport
parameter_list|(
specifier|final
name|Transport
name|localBroker
parameter_list|,
specifier|final
name|Transport
name|remoteBroker
parameter_list|)
block|{
name|this
operator|.
name|localBroker
operator|=
name|localBroker
expr_stmt|;
name|this
operator|.
name|remoteBroker
operator|=
name|remoteBroker
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting a network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|" has been established."
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setTransportListener
argument_list|(
operator|new
name|DefaultTransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|serviceLocalCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|serviceLocalException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|serviceRemoteCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|serviceRemoteException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{
comment|//clear any subscriptions - to try and prevent the bridge from stalling the broker
name|log
operator|.
name|warn
argument_list|(
literal|"Outbound transport to "
operator|+
name|remoteBrokerName
operator|+
literal|" interrupted ..."
argument_list|)
expr_stmt|;
name|clearDownSubscriptions
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{
comment|//restart and static subscriptions - the consumer advisories will be replayed
name|log
operator|.
name|info
argument_list|(
literal|"Outbound transport to "
operator|+
name|remoteBrokerName
operator|+
literal|" resumed"
argument_list|)
expr_stmt|;
name|setupStaticDestinations
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|triggerRemoteStartBridge
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|triggerLocalStartBridge
parameter_list|()
throws|throws
name|IOException
block|{
name|Thread
name|thead
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startLocalBridge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to start network bridge: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thead
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|triggerRemoteStartBridge
parameter_list|()
throws|throws
name|IOException
block|{
name|Thread
name|thead
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|startRemoteBridge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to start network bridge: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thead
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startLocalBridge
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localBridgeStarted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|localConnectionInfo
operator|=
operator|new
name|ConnectionInfo
argument_list|()
expr_stmt|;
name|localConnectionInfo
operator|.
name|setConnectionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|localClientId
operator|=
literal|"NC_"
operator|+
name|remoteBrokerName
operator|+
literal|"_inbound"
operator|+
name|name
expr_stmt|;
name|localConnectionInfo
operator|.
name|setClientId
argument_list|(
name|localClientId
argument_list|)
expr_stmt|;
name|localConnectionInfo
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|localConnectionInfo
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|localConnectionInfo
argument_list|)
expr_stmt|;
name|localSessionInfo
operator|=
operator|new
name|SessionInfo
argument_list|(
name|localConnectionInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|localSessionInfo
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|"("
operator|+
name|remoteBrokerName
operator|+
literal|") has been established."
argument_list|)
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|setupStaticDestinations
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|startRemoteBridge
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|remoteBridgeStarted
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|remoteConnectionInfo
operator|=
operator|new
name|ConnectionInfo
argument_list|()
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setConnectionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setClientId
argument_list|(
literal|"NC_"
operator|+
name|localBrokerName
operator|+
literal|"_outbound"
operator|+
name|name
argument_list|)
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|remoteConnectionInfo
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|remoteConnectionInfo
argument_list|)
expr_stmt|;
name|BrokerInfo
name|brokerInfo
init|=
operator|new
name|BrokerInfo
argument_list|()
decl_stmt|;
name|brokerInfo
operator|.
name|setBrokerName
argument_list|(
name|localBrokerName
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|brokerInfo
argument_list|)
expr_stmt|;
name|SessionInfo
name|remoteSessionInfo
init|=
operator|new
name|SessionInfo
argument_list|(
name|remoteConnectionInfo
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|remoteSessionInfo
argument_list|)
expr_stmt|;
name|producerInfo
operator|=
operator|new
name|ProducerInfo
argument_list|(
name|remoteSessionInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producerInfo
operator|.
name|setResponseRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// Listen to consumer advisory messages on the remote broker to determine demand.
name|demandConsumerInfo
operator|=
operator|new
name|ConsumerInfo
argument_list|(
name|remoteSessionInfo
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|demandConsumerInfo
operator|.
name|setDispatchAsync
argument_list|(
name|dispatchAsync
argument_list|)
expr_stmt|;
name|demandConsumerInfo
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|AdvisorySupport
operator|.
name|CONSUMER_ADVISORY_TOPIC_PREFIX
operator|+
name|destinationFilter
argument_list|)
argument_list|)
expr_stmt|;
name|demandConsumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|prefetchSize
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|demandConsumerInfo
argument_list|)
expr_stmt|;
comment|//we want infomation about Destinations as well
name|ConsumerInfo
name|destinationInfo
init|=
operator|new
name|ConsumerInfo
argument_list|(
name|remoteSessionInfo
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|destinationInfo
operator|.
name|setDestination
argument_list|(
name|AdvisorySupport
operator|.
name|TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC
argument_list|)
expr_stmt|;
name|destinationInfo
operator|.
name|setPrefetchSize
argument_list|(
name|prefetchSize
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|destinationInfo
argument_list|)
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|shutDown
operator|=
literal|true
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
block|}
comment|/**      * stop the bridge      * @throws Exception       */
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|" stopping "
operator|+
name|localBrokerName
operator|+
literal|" bridge to "
operator|+
name|remoteBrokerName
operator|+
literal|" is disposed already ? "
operator|+
name|disposed
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
try|try
block|{
name|disposed
operator|=
literal|true
expr_stmt|;
name|localBridgeStarted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBridgeStarted
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shutDown
condition|)
block|{
name|remoteBroker
operator|.
name|oneway
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|localConnectionInfo
operator|!=
literal|null
condition|)
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
name|localConnectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|remoteConnectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|localBroker
operator|.
name|oneway
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|localBroker
operator|.
name|setTransportListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setTransportListener
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Caught exception stopping"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ServiceStopper
name|ss
init|=
operator|new
name|ServiceStopper
argument_list|()
decl_stmt|;
name|ss
operator|.
name|stop
argument_list|(
name|localBroker
argument_list|)
expr_stmt|;
name|ss
operator|.
name|stop
argument_list|(
name|remoteBroker
argument_list|)
expr_stmt|;
name|ss
operator|.
name|throwFirstException
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
name|localBrokerName
operator|+
literal|" bridge to "
operator|+
name|remoteBrokerName
operator|+
literal|" stopped"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|serviceRemoteException
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|" shutdown: "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|serviceRemoteCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
try|try
block|{
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|waitStarted
argument_list|()
expr_stmt|;
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|serviceRemoteConsumerAdvisory
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
name|demandConsumerDispatched
operator|++
expr_stmt|;
if|if
condition|(
name|demandConsumerDispatched
operator|>
operator|(
name|demandConsumerInfo
operator|.
name|getPrefetchSize
argument_list|()
operator|*
literal|.75
operator|)
condition|)
block|{
name|remoteBroker
operator|.
name|oneway
argument_list|(
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
name|demandConsumerDispatched
argument_list|)
argument_list|)
expr_stmt|;
name|demandConsumerDispatched
operator|=
literal|0
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
name|serviceRemoteBrokerInfo
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|KeepAliveInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
case|case
name|WireFormatInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected remote command: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|serviceRemoteException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|serviceRemoteConsumerAdvisory
parameter_list|(
name|DataStructure
name|data
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|data
operator|.
name|getClass
argument_list|()
operator|==
name|ConsumerInfo
operator|.
name|class
condition|)
block|{
comment|// Create a new local subscription
name|ConsumerInfo
name|info
init|=
operator|(
name|ConsumerInfo
operator|)
name|data
decl_stmt|;
name|BrokerId
index|[]
name|path
init|=
name|info
operator|.
name|getBrokerPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
operator|>=
name|networkTTL
operator|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring Subscription "
operator|+
name|info
operator|+
literal|" restricted to "
operator|+
name|networkTTL
operator|+
literal|" network hops only"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|contains
argument_list|(
name|info
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|localBrokerPath
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Ignore this consumer as it's a consumer we locally sent to the broker.
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring sub "
operator|+
name|info
operator|+
literal|" already routed through this broker once"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|isPermissableDestination
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
comment|//ignore if not in the permited or in the excluded list
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring sub "
operator|+
name|info
operator|+
literal|" destination "
operator|+
name|info
operator|.
name|getDestination
argument_list|()
operator|+
literal|" is not permiited"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Update the packet to show where it came from.
name|info
operator|=
name|info
operator|.
name|copy
argument_list|()
expr_stmt|;
name|addRemoteBrokerToBrokerPath
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|DemandSubscription
name|sub
init|=
name|createDemandSubscription
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|addSubscription
argument_list|(
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Forwarding sub on "
operator|+
name|localBroker
operator|+
literal|" from "
operator|+
name|remoteBrokerName
operator|+
literal|" :  "
operator|+
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring sub "
operator|+
name|info
operator|+
literal|" already subscribed to matching destination"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|getClass
argument_list|()
operator|==
name|DestinationInfo
operator|.
name|class
condition|)
block|{
comment|//          It's a destination info - we want to pass up
comment|//infomation about temporary destinations
name|DestinationInfo
name|destInfo
init|=
operator|(
name|DestinationInfo
operator|)
name|data
decl_stmt|;
name|BrokerId
index|[]
name|path
init|=
name|destInfo
operator|.
name|getBrokerPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
operator|>=
name|networkTTL
operator|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring Subscription "
operator|+
name|destInfo
operator|+
literal|" restricted to "
operator|+
name|networkTTL
operator|+
literal|" network hops only"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|contains
argument_list|(
name|destInfo
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|localBrokerPath
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// Ignore this consumer as it's a consumer we locally sent to the broker.
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring sub "
operator|+
name|destInfo
operator|+
literal|" already routed through this broker once"
argument_list|)
expr_stmt|;
return|return;
block|}
name|destInfo
operator|.
name|setConnectionId
argument_list|(
name|localConnectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|destInfo
operator|.
name|getDestination
argument_list|()
operator|instanceof
name|ActiveMQTempDestination
condition|)
block|{
comment|//re-set connection id so comes from here
name|ActiveMQTempDestination
name|tempDest
init|=
operator|(
name|ActiveMQTempDestination
operator|)
name|destInfo
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|tempDest
operator|.
name|setConnectionId
argument_list|(
name|localSessionInfo
operator|.
name|getSessionId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|destInfo
operator|.
name|setBrokerPath
argument_list|(
name|appendToBrokerPath
argument_list|(
name|destInfo
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|getRemoteBrokerPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|destInfo
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|data
operator|.
name|getClass
argument_list|()
operator|==
name|RemoveInfo
operator|.
name|class
condition|)
block|{
name|ConsumerId
name|id
init|=
call|(
name|ConsumerId
call|)
argument_list|(
operator|(
name|RemoveInfo
operator|)
name|data
argument_list|)
operator|.
name|getObjectId
argument_list|()
decl_stmt|;
name|removeDemandSubscription
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|serviceLocalException
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Network connection between "
operator|+
name|localBroker
operator|+
literal|" and "
operator|+
name|remoteBroker
operator|+
literal|" shutdown: "
operator|+
name|error
operator|.
name|getMessage
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSubscription
parameter_list|(
name|DemandSubscription
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeSubscription
parameter_list|(
name|DemandSubscription
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|subscriptionMapByLocalId
operator|.
name|remove
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|DemandSubscription
name|getDemandSubscription
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
return|return
operator|(
name|DemandSubscription
operator|)
name|subscriptionMapByLocalId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|Message
name|configureMessage
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
name|Message
name|message
init|=
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
comment|// Update the packet to show where it came from.
name|message
operator|.
name|setBrokerPath
argument_list|(
name|appendToBrokerPath
argument_list|(
name|message
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|localBrokerPath
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setProducerId
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|md
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getOriginalTransactionId
argument_list|()
operator|==
literal|null
condition|)
name|message
operator|.
name|setOriginalTransactionId
argument_list|(
name|message
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|message
operator|.
name|evictMarshlledForm
argument_list|()
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|protected
name|void
name|serviceLocalCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
specifier|final
name|boolean
name|trace
init|=
name|log
operator|.
name|isTraceEnabled
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|waitStarted
argument_list|()
expr_stmt|;
specifier|final
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|DemandSubscription
name|sub
init|=
operator|(
name|DemandSubscription
operator|)
name|subscriptionMapByLocalId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|Message
name|message
init|=
name|configureMessage
argument_list|(
name|md
argument_list|)
decl_stmt|;
if|if
condition|(
name|trace
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"bridging "
operator|+
name|localBrokerName
operator|+
literal|" -> "
operator|+
name|remoteBrokerName
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
comment|// If the message was originally sent using async send, we will preserve that QOS
comment|// by bridging it using an async send (small chance of message loss).
name|remoteBroker
operator|.
name|oneway
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|oneway
argument_list|(
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// The message was not sent using async send, so we should only ack the local
comment|// broker when we get confirmation that the remote broker has received the message.
name|ResponseCallback
name|callback
init|=
operator|new
name|ResponseCallback
argument_list|()
block|{
specifier|public
name|void
name|onCompletion
parameter_list|(
name|FutureResponse
name|future
parameter_list|)
block|{
try|try
block|{
name|Response
name|response
init|=
name|future
operator|.
name|getResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|er
init|=
operator|(
name|ExceptionResponse
operator|)
name|response
decl_stmt|;
name|serviceLocalException
argument_list|(
name|er
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localBroker
operator|.
name|oneway
argument_list|(
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|serviceLocalException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|remoteBroker
operator|.
name|asyncRequest
argument_list|(
name|message
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
comment|// Ack on every message since we don't know if the broker is blocked due to memory
comment|// usage and is waiting for an Ack to un-block him.
comment|// Acking a range is more efficient, but also more prone to locking up a server
comment|// Perhaps doing something like the following should be policy based.
comment|//                        int dispatched = sub.incrementDispatched();
comment|//                        if(dispatched>(sub.getLocalInfo().getPrefetchSize()*.75)){
comment|//                            localBroker.oneway(new MessageAck(md,MessageAck.STANDARD_ACK_TYPE,dispatched));
comment|//                            sub.setDispatched(0);
comment|//                        }
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
name|serviceLocalBrokerInfo
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isShutdownInfo
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
name|localBrokerName
operator|+
literal|" Shutting down"
argument_list|)
expr_stmt|;
name|shutDown
operator|=
literal|true
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
condition|)
block|{
case|case
name|WireFormatInfo
operator|.
name|DATA_STRUCTURE_TYPE
case|:
break|break;
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Unexpected local command: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|serviceLocalException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return prefetch size      */
specifier|public
name|int
name|getPrefetchSize
parameter_list|()
block|{
return|return
name|prefetchSize
return|;
block|}
comment|/**      * @param prefetchSize      */
specifier|public
name|void
name|setPrefetchSize
parameter_list|(
name|int
name|prefetchSize
parameter_list|)
block|{
name|this
operator|.
name|prefetchSize
operator|=
name|prefetchSize
expr_stmt|;
block|}
comment|/**      * @return true if dispatch async      */
specifier|public
name|boolean
name|isDispatchAsync
parameter_list|()
block|{
return|return
name|dispatchAsync
return|;
block|}
comment|/**      * @param dispatchAsync      */
specifier|public
name|void
name|setDispatchAsync
parameter_list|(
name|boolean
name|dispatchAsync
parameter_list|)
block|{
name|this
operator|.
name|dispatchAsync
operator|=
name|dispatchAsync
expr_stmt|;
block|}
comment|/**      * @return Returns the dynamicallyIncludedDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getDynamicallyIncludedDestinations
parameter_list|()
block|{
return|return
name|dynamicallyIncludedDestinations
return|;
block|}
comment|/**      * @param dynamicallyIncludedDestinations The dynamicallyIncludedDestinations to set.      */
specifier|public
name|void
name|setDynamicallyIncludedDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|dynamicallyIncludedDestinations
parameter_list|)
block|{
name|this
operator|.
name|dynamicallyIncludedDestinations
operator|=
name|dynamicallyIncludedDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the excludedDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getExcludedDestinations
parameter_list|()
block|{
return|return
name|excludedDestinations
return|;
block|}
comment|/**      * @param excludedDestinations The excludedDestinations to set.      */
specifier|public
name|void
name|setExcludedDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|excludedDestinations
parameter_list|)
block|{
name|this
operator|.
name|excludedDestinations
operator|=
name|excludedDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the staticallyIncludedDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getStaticallyIncludedDestinations
parameter_list|()
block|{
return|return
name|staticallyIncludedDestinations
return|;
block|}
comment|/**      * @param staticallyIncludedDestinations The staticallyIncludedDestinations to set.      */
specifier|public
name|void
name|setStaticallyIncludedDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|staticallyIncludedDestinations
parameter_list|)
block|{
name|this
operator|.
name|staticallyIncludedDestinations
operator|=
name|staticallyIncludedDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the durableDestinations.      */
specifier|public
name|ActiveMQDestination
index|[]
name|getDurableDestinations
parameter_list|()
block|{
return|return
name|durableDestinations
return|;
block|}
comment|/**      * @param durableDestinations The durableDestinations to set.      */
specifier|public
name|void
name|setDurableDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|durableDestinations
parameter_list|)
block|{
name|this
operator|.
name|durableDestinations
operator|=
name|durableDestinations
expr_stmt|;
block|}
comment|/**      * @return Returns the localBrokerName.      */
specifier|public
name|String
name|getLocalBrokerName
parameter_list|()
block|{
return|return
name|localBrokerName
return|;
block|}
comment|/**      * @param localBrokerName      *            The localBrokerName to set.      */
specifier|public
name|void
name|setLocalBrokerName
parameter_list|(
name|String
name|localBrokerName
parameter_list|)
block|{
name|this
operator|.
name|localBrokerName
operator|=
name|localBrokerName
expr_stmt|;
block|}
comment|/**      * @return Returns the localBroker.      */
specifier|public
name|Transport
name|getLocalBroker
parameter_list|()
block|{
return|return
name|localBroker
return|;
block|}
comment|/**      * @return Returns the remoteBroker.      */
specifier|public
name|Transport
name|getRemoteBroker
parameter_list|()
block|{
return|return
name|remoteBroker
return|;
block|}
comment|/**      * @return Returns the name.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @param name The name to set.      */
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * @return Returns the decreaseNetworkConsumerPriority.      */
specifier|public
name|boolean
name|isDecreaseNetworkConsumerPriority
parameter_list|()
block|{
return|return
name|decreaseNetworkConsumerPriority
return|;
block|}
comment|/**      * @param decreaseNetworkConsumerPriority The decreaseNetworkConsumerPriority to set.      */
specifier|public
name|void
name|setDecreaseNetworkConsumerPriority
parameter_list|(
name|boolean
name|decreaseNetworkConsumerPriority
parameter_list|)
block|{
name|this
operator|.
name|decreaseNetworkConsumerPriority
operator|=
name|decreaseNetworkConsumerPriority
expr_stmt|;
block|}
comment|/**      * @return Returns the networkTTL.      */
specifier|public
name|int
name|getNetworkTTL
parameter_list|()
block|{
return|return
name|networkTTL
return|;
block|}
comment|/**      * @param networkTTL The networkTTL to set.      */
specifier|public
name|void
name|setNetworkTTL
parameter_list|(
name|int
name|networkTTL
parameter_list|)
block|{
name|this
operator|.
name|networkTTL
operator|=
name|networkTTL
expr_stmt|;
block|}
comment|/**      * @return Returns the shutDown.      */
specifier|public
name|boolean
name|isShutDown
parameter_list|()
block|{
return|return
name|shutDown
return|;
block|}
comment|/**      * @param shutDown The shutDown to set.      */
specifier|public
name|void
name|setShutDown
parameter_list|(
name|boolean
name|shutDown
parameter_list|)
block|{
name|this
operator|.
name|shutDown
operator|=
name|shutDown
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|contains
parameter_list|(
name|BrokerId
index|[]
name|brokerPath
parameter_list|,
name|BrokerId
name|brokerId
parameter_list|)
block|{
if|if
condition|(
name|brokerPath
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|brokerPath
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|brokerId
operator|.
name|equals
argument_list|(
name|brokerPath
index|[
name|i
index|]
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|BrokerId
index|[]
name|appendToBrokerPath
parameter_list|(
name|BrokerId
index|[]
name|brokerPath
parameter_list|,
name|BrokerId
index|[]
name|pathsToAppend
parameter_list|)
block|{
if|if
condition|(
name|brokerPath
operator|==
literal|null
operator|||
name|brokerPath
operator|.
name|length
operator|==
literal|0
condition|)
return|return
name|pathsToAppend
return|;
name|BrokerId
name|rc
index|[]
init|=
operator|new
name|BrokerId
index|[
name|brokerPath
operator|.
name|length
operator|+
name|pathsToAppend
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|brokerPath
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|,
literal|0
argument_list|,
name|brokerPath
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|pathsToAppend
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|,
name|brokerPath
operator|.
name|length
argument_list|,
name|pathsToAppend
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|protected
name|BrokerId
index|[]
name|appendToBrokerPath
parameter_list|(
name|BrokerId
index|[]
name|brokerPath
parameter_list|,
name|BrokerId
name|idToAppend
parameter_list|)
block|{
if|if
condition|(
name|brokerPath
operator|==
literal|null
operator|||
name|brokerPath
operator|.
name|length
operator|==
literal|0
condition|)
return|return
operator|new
name|BrokerId
index|[]
block|{
name|idToAppend
block|}
return|;
name|BrokerId
name|rc
index|[]
init|=
operator|new
name|BrokerId
index|[
name|brokerPath
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|brokerPath
argument_list|,
literal|0
argument_list|,
name|rc
argument_list|,
literal|0
argument_list|,
name|brokerPath
operator|.
name|length
argument_list|)
expr_stmt|;
name|rc
index|[
name|brokerPath
operator|.
name|length
index|]
operator|=
name|idToAppend
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|protected
name|boolean
name|isPermissableDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|DestinationFilter
name|filter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|ActiveMQDestination
index|[]
name|dests
init|=
name|excludedDestinations
decl_stmt|;
if|if
condition|(
name|dests
operator|!=
literal|null
operator|&&
name|dests
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQDestination
name|match
init|=
name|dests
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|matches
argument_list|(
name|match
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|dests
operator|=
name|dynamicallyIncludedDestinations
expr_stmt|;
if|if
condition|(
name|dests
operator|!=
literal|null
operator|&&
name|dests
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQDestination
name|match
init|=
name|dests
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|matches
argument_list|(
name|match
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Subscriptions for these desitnations are always created      *      */
specifier|protected
name|void
name|setupStaticDestinations
parameter_list|()
block|{
name|ActiveMQDestination
index|[]
name|dests
init|=
name|staticallyIncludedDestinations
decl_stmt|;
if|if
condition|(
name|dests
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dests
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQDestination
name|dest
init|=
name|dests
index|[
name|i
index|]
decl_stmt|;
name|DemandSubscription
name|sub
init|=
name|createDemandSubscription
argument_list|(
name|dest
argument_list|)
decl_stmt|;
try|try
block|{
name|addSubscription
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to add static destination "
operator|+
name|dest
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"Forwarding messages for static destination: "
operator|+
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|DemandSubscription
name|createDemandSubscription
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doCreateDemandSubscription
argument_list|(
name|info
argument_list|)
return|;
block|}
specifier|protected
name|DemandSubscription
name|doCreateDemandSubscription
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|DemandSubscription
name|result
init|=
operator|new
name|DemandSubscription
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|result
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setConsumerId
argument_list|(
operator|new
name|ConsumerId
argument_list|(
name|localSessionInfo
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|decreaseNetworkConsumerPriority
condition|)
block|{
name|byte
name|priority
init|=
name|ConsumerInfo
operator|.
name|NETWORK_CONSUMER_PRIORITY
decl_stmt|;
if|if
condition|(
name|priority
operator|>
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|info
operator|.
name|getBrokerPath
argument_list|()
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getBrokerPath
argument_list|()
operator|.
name|length
operator|>
literal|1
condition|)
block|{
comment|// The longer the path to the consumer, the less it's consumer priority.
name|priority
operator|-=
name|info
operator|.
name|getBrokerPath
argument_list|()
operator|.
name|length
operator|+
literal|1
expr_stmt|;
block|}
name|result
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
block|}
name|configureDemandSubscription
argument_list|(
name|info
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|DemandSubscription
name|createDemandSubscription
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|ConsumerInfo
name|info
init|=
operator|new
name|ConsumerInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
comment|//the remote info held by the DemandSubscription holds the original consumerId,
comment|//the local info get's overwritten
name|info
operator|.
name|setConsumerId
argument_list|(
operator|new
name|ConsumerId
argument_list|(
name|localSessionInfo
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|DemandSubscription
name|result
init|=
operator|new
name|DemandSubscription
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|result
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setPriority
argument_list|(
name|ConsumerInfo
operator|.
name|NETWORK_CONSUMER_PRIORITY
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|configureDemandSubscription
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|,
name|DemandSubscription
name|sub
parameter_list|)
throws|throws
name|IOException
block|{
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setDispatchAsync
argument_list|(
name|dispatchAsync
argument_list|)
expr_stmt|;
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setPrefetchSize
argument_list|(
name|prefetchSize
argument_list|)
expr_stmt|;
name|subscriptionMapByLocalId
operator|.
name|put
argument_list|(
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|subscriptionMapByRemoteId
operator|.
name|put
argument_list|(
name|sub
operator|.
name|getRemoteInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|sub
argument_list|)
expr_stmt|;
comment|// This works for now since we use a VM connection to the local broker.
comment|// may need to change if we ever subscribe to a remote broker.
name|sub
operator|.
name|getLocalInfo
argument_list|()
operator|.
name|setAdditionalPredicate
argument_list|(
name|createNetworkBridgeFilter
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeDemandSubscription
parameter_list|(
name|ConsumerId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|DemandSubscription
name|sub
init|=
operator|(
name|DemandSubscription
operator|)
name|subscriptionMapByRemoteId
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|removeSubscription
argument_list|(
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|log
operator|.
name|trace
argument_list|(
literal|"removing sub on "
operator|+
name|localBroker
operator|+
literal|" from "
operator|+
name|remoteBrokerName
operator|+
literal|" :  "
operator|+
name|sub
operator|.
name|getRemoteInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|waitStarted
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|startedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|clearDownSubscriptions
parameter_list|()
block|{              }
specifier|protected
specifier|abstract
name|NetworkBridgeFilter
name|createNetworkBridgeFilter
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|serviceLocalBrokerInfo
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|InterruptedException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|addRemoteBrokerToBrokerPath
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|serviceRemoteBrokerInfo
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|BrokerId
index|[]
name|getRemoteBrokerPath
parameter_list|()
function_decl|;
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|public
name|String
name|getUserName
parameter_list|()
block|{
return|return
name|userName
return|;
block|}
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|this
operator|.
name|userName
operator|=
name|userName
expr_stmt|;
block|}
block|}
end_class

end_unit

