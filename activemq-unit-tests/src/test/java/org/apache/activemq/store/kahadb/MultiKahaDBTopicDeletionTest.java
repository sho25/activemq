begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|WildcardFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * AMQ-5875  *  * This test shows that when multiple destinations share a single KahaDB  * instance when using mKahaDB, that the deletion of one Topic will no longer  * cause an IllegalStateException and the store will be properly kept around  * until all destinations associated with the store are gone.  *  * */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MultiKahaDBTopicDeletionTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MultiKahaDBTopicDeletionTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
specifier|protected
name|Broker
name|broker
decl_stmt|;
specifier|protected
name|URI
name|brokerConnectURI
decl_stmt|;
specifier|protected
name|File
name|storeDir
decl_stmt|;
specifier|protected
name|ActiveMQTopic
name|topic1
decl_stmt|;
specifier|protected
name|ActiveMQTopic
name|topic2
decl_stmt|;
specifier|protected
specifier|static
name|ActiveMQTopic
name|TOPIC1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"test.>"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|ActiveMQTopic
name|TOPIC2
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"test.t.topic"
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
comment|//Test with topics created in different orders
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|TOPIC1
block|,
name|TOPIC2
block|}
block|,
block|{
name|TOPIC2
block|,
name|TOPIC1
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|MultiKahaDBTopicDeletionTest
parameter_list|(
name|ActiveMQTopic
name|topic1
parameter_list|,
name|ActiveMQTopic
name|topic2
parameter_list|)
block|{
name|this
operator|.
name|topic1
operator|=
name|topic1
expr_stmt|;
name|this
operator|.
name|topic2
operator|=
name|topic2
expr_stmt|;
block|}
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempTestDir
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUpBroker
parameter_list|(
name|boolean
name|clearDataDir
parameter_list|)
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|this
operator|.
name|initPersistence
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
comment|// set up a transport
name|TransportConnector
name|connector
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
operator|new
name|TransportConnector
argument_list|()
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|brokerConnectURI
operator|=
name|brokerService
operator|.
name|getConnectorByName
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getConnectUri
argument_list|()
expr_stmt|;
name|broker
operator|=
name|brokerService
operator|.
name|getBroker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|initPersistence
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|IOException
block|{
name|storeDir
operator|=
name|tempTestDir
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// setup multi-kaha adapter
name|MultiKahaDBPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|MultiKahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|persistenceAdapter
operator|.
name|setDirectory
argument_list|(
name|storeDir
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|kahaStore
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|kahaStore
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|1024
operator|*
literal|512
argument_list|)
expr_stmt|;
comment|// set up a store per destination
name|FilteredKahaDBPersistenceAdapter
name|filtered
init|=
operator|new
name|FilteredKahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|filtered
operator|.
name|setPersistenceAdapter
argument_list|(
name|kahaStore
argument_list|)
expr_stmt|;
name|filtered
operator|.
name|setPerDestination
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FilteredKahaDBPersistenceAdapter
argument_list|>
name|stores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|stores
operator|.
name|add
argument_list|(
name|filtered
argument_list|)
expr_stmt|;
name|persistenceAdapter
operator|.
name|setFilteredPersistenceAdapters
argument_list|(
name|stores
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that a topic can be deleted and the other topic can still be subscribed to      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testTopic1Deletion
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} first, {} second"
argument_list|,
name|topic1
argument_list|,
name|topic2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing {}, subscribing to {}"
argument_list|,
name|topic1
argument_list|,
name|topic2
argument_list|)
expr_stmt|;
comment|// Create two topics
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove topic2
name|broker
operator|.
name|removeDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// try and create a subscription on topic2, before AMQ-5875 this
comment|//would cause an IllegalStateException
name|createSubscriber
argument_list|(
name|topic2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTopic2Deletion
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} first, {} second"
argument_list|,
name|topic1
argument_list|,
name|topic2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing {}, subscribing to {}"
argument_list|,
name|topic2
argument_list|,
name|topic1
argument_list|)
expr_stmt|;
comment|// Create two topics
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove topic2
name|broker
operator|.
name|removeDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// try and create a subscription on topic1, before AMQ-5875 this
comment|//would cause an IllegalStateException
name|createSubscriber
argument_list|(
name|topic1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreCleanupDeleteTopic1First
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} first, {} second"
argument_list|,
name|topic1
argument_list|,
name|topic2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting {} first, {} second"
argument_list|,
name|topic1
argument_list|,
name|topic2
argument_list|)
expr_stmt|;
comment|// Create two topics
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove both topics
name|broker
operator|.
name|removeDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//Assert that with no more destinations attached to a store that it has been cleaned up
name|Collection
argument_list|<
name|File
argument_list|>
name|storeFiles
init|=
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|storeDir
argument_list|,
operator|new
name|WildcardFileFilter
argument_list|(
literal|"db*"
argument_list|)
argument_list|,
operator|new
name|WildcardFileFilter
argument_list|(
literal|"topic*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Store files should be deleted"
argument_list|,
literal|0
argument_list|,
name|storeFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreCleanupDeleteTopic2First
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating {} first, {} second"
argument_list|,
name|topic1
argument_list|,
name|topic2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleting {} first, {} second"
argument_list|,
name|topic2
argument_list|,
name|topic1
argument_list|)
expr_stmt|;
comment|// Create two topics
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// remove both topics
name|broker
operator|.
name|removeDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic2
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeDestination
argument_list|(
name|brokerService
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
name|topic1
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|//Assert that with no more destinations attached to a store that it has been cleaned up
name|Collection
argument_list|<
name|File
argument_list|>
name|storeFiles
init|=
name|FileUtils
operator|.
name|listFiles
argument_list|(
name|storeDir
argument_list|,
operator|new
name|WildcardFileFilter
argument_list|(
literal|"db*"
argument_list|)
argument_list|,
operator|new
name|WildcardFileFilter
argument_list|(
literal|"topic*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Store files should be deleted"
argument_list|,
literal|0
argument_list|,
name|storeFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|createSubscriber
parameter_list|(
name|ActiveMQTopic
name|topic
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"client1"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"sub1"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

