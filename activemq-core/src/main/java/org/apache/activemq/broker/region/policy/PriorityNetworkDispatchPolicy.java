begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * dispatch policy that ignores lower priority duplicate network consumers,  * used in conjunction with network bridge suppresDuplicateTopicSubscriptions  *   * @org.apache.xbean.XBean  */
end_comment

begin_class
specifier|public
class|class
name|PriorityNetworkDispatchPolicy
extends|extends
name|SimpleDispatchPolicy
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PriorityNetworkDispatchPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|dispatch
parameter_list|(
name|MessageReference
name|node
parameter_list|,
name|MessageEvaluationContext
name|msgContext
parameter_list|,
name|List
argument_list|<
name|Subscription
argument_list|>
name|consumers
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Subscription
argument_list|>
name|duplicateFreeSubs
init|=
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|consumers
init|)
block|{
for|for
control|(
name|Subscription
name|sub
range|:
name|consumers
control|)
block|{
name|ConsumerInfo
name|info
init|=
name|sub
operator|.
name|getConsumerInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isNetworkSubscription
argument_list|()
condition|)
block|{
name|boolean
name|highestPrioritySub
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subscription
argument_list|>
name|it
init|=
name|duplicateFreeSubs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subscription
name|candidate
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
argument_list|(
name|candidate
argument_list|,
name|info
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasLowerPriority
argument_list|(
name|candidate
argument_list|,
name|info
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// higher priority matching sub exists
name|highestPrioritySub
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"ignoring lower priority: "
operator|+
name|candidate
operator|+
literal|"["
operator|+
name|candidate
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getNetworkConsumerIds
argument_list|()
operator|+
literal|", "
operator|+
name|candidate
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getNetworkConsumerIds
argument_list|()
operator|+
literal|"] in favour of: "
operator|+
name|sub
operator|+
literal|"["
operator|+
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getNetworkConsumerIds
argument_list|()
operator|+
literal|", "
operator|+
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getNetworkConsumerIds
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|highestPrioritySub
condition|)
block|{
name|duplicateFreeSubs
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|duplicateFreeSubs
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|super
operator|.
name|dispatch
argument_list|(
name|node
argument_list|,
name|msgContext
argument_list|,
name|duplicateFreeSubs
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasLowerPriority
parameter_list|(
name|Subscription
name|candidate
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
block|{
return|return
name|candidate
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|<
name|info
operator|.
name|getPriority
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|matches
parameter_list|(
name|Subscription
name|candidate
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
block|{
name|boolean
name|matched
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ConsumerId
name|candidateId
range|:
name|candidate
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getNetworkConsumerIds
argument_list|()
control|)
block|{
for|for
control|(
name|ConsumerId
name|subId
range|:
name|info
operator|.
name|getNetworkConsumerIds
argument_list|()
control|)
block|{
if|if
condition|(
name|candidateId
operator|.
name|equals
argument_list|(
name|subId
argument_list|)
condition|)
block|{
name|matched
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matched
return|;
block|}
block|}
end_class

end_unit

