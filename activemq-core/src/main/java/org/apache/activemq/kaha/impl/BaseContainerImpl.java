begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|RuntimeStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * Implementation of a ListContainer  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseContainerImpl
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseContainerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|IndexItem
name|root
decl_stmt|;
specifier|protected
name|IndexLinkedList
name|list
decl_stmt|;
specifier|protected
name|IndexManager
name|rootIndexManager
decl_stmt|;
comment|// IndexManager that contains the root
specifier|protected
name|IndexManager
name|indexManager
decl_stmt|;
specifier|protected
name|DataManager
name|dataManager
decl_stmt|;
specifier|protected
name|ContainerId
name|containerId
decl_stmt|;
specifier|protected
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
name|BaseContainerImpl
parameter_list|(
name|ContainerId
name|id
parameter_list|,
name|IndexItem
name|root
parameter_list|,
name|IndexManager
name|rootIndexManager
parameter_list|,
name|IndexManager
name|indexManager
parameter_list|,
name|DataManager
name|dataManager
parameter_list|)
block|{
name|this
operator|.
name|containerId
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|rootIndexManager
operator|=
name|rootIndexManager
expr_stmt|;
name|this
operator|.
name|indexManager
operator|=
name|indexManager
expr_stmt|;
name|this
operator|.
name|dataManager
operator|=
name|dataManager
expr_stmt|;
block|}
name|ContainerId
name|getContainerId
parameter_list|()
block|{
return|return
name|containerId
return|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|list
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|list
operator|=
operator|new
name|DiskIndexLinkedList
argument_list|(
name|indexManager
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return the list      */
specifier|public
name|IndexLinkedList
name|getList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
comment|/**      * @param list the list to set      */
specifier|public
name|void
name|setList
parameter_list|(
name|IndexLinkedList
name|list
parameter_list|)
block|{
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|unload
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|load
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|int
name|size
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|getValue
parameter_list|(
name|IndexItem
name|currentItem
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|void
name|remove
parameter_list|(
name|IndexItem
name|currentItem
parameter_list|)
function_decl|;
specifier|protected
specifier|final
name|IndexLinkedList
name|getInternalList
parameter_list|()
block|{
return|return
name|list
return|;
block|}
specifier|public
specifier|final
name|void
name|close
parameter_list|()
block|{
name|unload
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#isLoaded()      */
specifier|public
specifier|final
name|boolean
name|isLoaded
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|loaded
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.ListContainer#getId()      */
specifier|public
specifier|final
name|Object
name|getId
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|containerId
operator|.
name|getKey
argument_list|()
return|;
block|}
specifier|protected
specifier|final
name|void
name|expressDataInterest
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|nextItem
init|=
name|root
operator|.
name|getNextItem
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextItem
operator|!=
name|Item
operator|.
name|POSITION_NOT_SET
condition|)
block|{
name|IndexItem
name|item
init|=
name|indexManager
operator|.
name|getIndex
argument_list|(
name|nextItem
argument_list|)
decl_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|nextItem
argument_list|)
expr_stmt|;
name|dataManager
operator|.
name|addInterestInFile
argument_list|(
name|item
operator|.
name|getKeyFile
argument_list|()
argument_list|)
expr_stmt|;
name|dataManager
operator|.
name|addInterestInFile
argument_list|(
name|item
operator|.
name|getValueFile
argument_list|()
argument_list|)
expr_stmt|;
name|nextItem
operator|=
name|item
operator|.
name|getNextItem
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|doClear
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|loaded
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|nextItem
init|=
name|root
operator|.
name|getNextItem
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextItem
operator|!=
name|Item
operator|.
name|POSITION_NOT_SET
condition|)
block|{
name|IndexItem
name|item
init|=
operator|new
name|IndexItem
argument_list|()
decl_stmt|;
name|item
operator|.
name|setOffset
argument_list|(
name|nextItem
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|nextItem
operator|=
name|item
operator|.
name|getNextItem
argument_list|()
expr_stmt|;
block|}
name|root
operator|.
name|setNextItem
argument_list|(
name|Item
operator|.
name|POSITION_NOT_SET
argument_list|)
expr_stmt|;
name|updateIndex
argument_list|(
name|root
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|IndexItem
name|item
init|=
operator|(
name|IndexItem
operator|)
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|dataManager
operator|.
name|removeInterestInFile
argument_list|(
name|item
operator|.
name|getKeyFile
argument_list|()
argument_list|)
expr_stmt|;
name|dataManager
operator|.
name|removeInterestInFile
argument_list|(
name|item
operator|.
name|getValueFile
argument_list|()
argument_list|)
expr_stmt|;
name|indexManager
operator|.
name|freeIndex
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to clear Container "
operator|+
name|getId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|protected
specifier|final
name|void
name|delete
parameter_list|(
name|IndexItem
name|key
parameter_list|,
name|IndexItem
name|prev
parameter_list|,
name|IndexItem
name|next
parameter_list|)
block|{
try|try
block|{
name|dataManager
operator|.
name|removeInterestInFile
argument_list|(
name|key
operator|.
name|getKeyFile
argument_list|()
argument_list|)
expr_stmt|;
name|dataManager
operator|.
name|removeInterestInFile
argument_list|(
name|key
operator|.
name|getValueFile
argument_list|()
argument_list|)
expr_stmt|;
name|prev
operator|=
name|prev
operator|==
literal|null
condition|?
name|root
else|:
name|prev
expr_stmt|;
name|next
operator|=
name|next
operator|!=
name|root
condition|?
name|next
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|prev
operator|.
name|setNextItem
argument_list|(
name|next
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|setPreviousItem
argument_list|(
name|prev
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|updateIndex
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prev
operator|.
name|setNextItem
argument_list|(
name|Item
operator|.
name|POSITION_NOT_SET
argument_list|)
expr_stmt|;
block|}
name|updateIndex
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|indexManager
operator|.
name|freeIndex
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to delete "
operator|+
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|final
name|void
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
literal|"The store is closed"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|updateIndex
parameter_list|(
name|IndexItem
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexManager
name|im
init|=
name|isRoot
argument_list|(
name|item
argument_list|)
condition|?
name|rootIndexManager
else|:
name|indexManager
decl_stmt|;
name|im
operator|.
name|updateIndex
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|boolean
name|isRoot
parameter_list|(
name|IndexItem
name|item
parameter_list|)
block|{
comment|// return item != null&& root != null&& (root == item || root.getOffset() == item.getOffset());
return|return
name|item
operator|!=
literal|null
operator|&&
name|root
operator|!=
literal|null
operator|&&
name|root
operator|==
name|item
return|;
block|}
block|}
end_class

end_unit

