begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
operator|.
name|ActiveMQComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ThreadTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|// see: https://issues.apache.org/activemq/browse/AMQ-2966
end_comment

begin_class
specifier|public
class|class
name|CamelVMTransportRoutingTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CamelVMTransportRoutingTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
specifier|private
name|TransportConnector
name|connector
init|=
literal|null
decl_stmt|;
specifier|private
name|CamelContext
name|camelContext
init|=
literal|null
decl_stmt|;
specifier|private
name|Connection
name|senderConnection
decl_stmt|;
specifier|private
name|Connection
name|receiverConnection1
decl_stmt|;
specifier|private
name|Connection
name|receiverConnection2
decl_stmt|;
specifier|private
specifier|final
name|String
name|MSG_STRING
init|=
literal|"MESSAGE-TEXT"
decl_stmt|;
specifier|private
specifier|final
name|String
name|SENDER_TOPIC
init|=
literal|"A"
decl_stmt|;
specifier|private
specifier|final
name|String
name|RECEIVER_TOPIC
init|=
literal|"B"
decl_stmt|;
specifier|public
name|void
name|testSendReceiveWithCamelRouteIntercepting
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MSG_COUNT
init|=
literal|1000
decl_stmt|;
name|Session
name|sendSession
init|=
name|senderConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Session
name|receiverSession1
init|=
name|receiverConnection1
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Session
name|receiverSession2
init|=
name|receiverConnection2
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|sendTo
init|=
name|sendSession
operator|.
name|createTopic
argument_list|(
name|SENDER_TOPIC
argument_list|)
decl_stmt|;
name|Destination
name|receiveFrom
init|=
name|receiverSession1
operator|.
name|createTopic
argument_list|(
name|RECEIVER_TOPIC
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|sendSession
operator|.
name|createTextMessage
argument_list|(
name|MSG_STRING
argument_list|)
decl_stmt|;
name|MessageConsumer
name|receiver1
init|=
name|receiverSession1
operator|.
name|createConsumer
argument_list|(
name|receiveFrom
argument_list|)
decl_stmt|;
name|MessageConsumer
name|receiver2
init|=
name|receiverSession2
operator|.
name|createConsumer
argument_list|(
name|receiveFrom
argument_list|)
decl_stmt|;
name|MessageProducer
name|sender
init|=
name|sendSession
operator|.
name|createProducer
argument_list|(
name|sendTo
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|sender
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Attempting Received for Message #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|TextMessage
name|received1
init|=
operator|(
name|TextMessage
operator|)
name|receiver1
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|received1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|MSG_STRING
argument_list|,
name|received1
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|service
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|service
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|=
name|service
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|createCamelContext
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|connFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connector
operator|.
name|getConnectUri
argument_list|()
argument_list|)
decl_stmt|;
name|senderConnection
operator|=
name|connFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|receiverConnection1
operator|=
name|connFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|receiverConnection2
operator|=
name|connFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|receiverConnection1
operator|.
name|start
argument_list|()
expr_stmt|;
name|receiverConnection2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|senderConnection
operator|!=
literal|null
condition|)
block|{
name|senderConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|receiverConnection1
operator|!=
literal|null
condition|)
block|{
name|receiverConnection1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|receiverConnection2
operator|!=
literal|null
condition|)
block|{
name|receiverConnection2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|ThreadTracker
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|fromEndpoint
init|=
literal|"activemq:topic:"
operator|+
name|SENDER_TOPIC
decl_stmt|;
specifier|final
name|String
name|toEndpoint
init|=
literal|"activemq:topic:"
operator|+
name|RECEIVER_TOPIC
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"creating context and sending message"
argument_list|)
expr_stmt|;
name|camelContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"activemq"
argument_list|,
name|ActiveMQComponent
operator|.
name|activeMQComponent
argument_list|(
literal|"vm://localhost?create=false&waitForStart=10000"
argument_list|)
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|fromEndpoint
argument_list|)
operator|.
name|to
argument_list|(
name|toEndpoint
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

