begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|jms
package|;
end_package

begin_comment
comment|/**  * A policy object that defines how a {@link JmsConnector} deals with  * reconnection of the local and foreign connections.  *  * @org.apache.xbean.XBean element="reconnectionPolicy"  */
end_comment

begin_class
specifier|public
class|class
name|ReconnectionPolicy
block|{
specifier|public
specifier|static
specifier|final
name|int
name|INFINITE
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|maxSendRetries
init|=
literal|10
decl_stmt|;
specifier|private
name|long
name|sendRetryDelay
init|=
literal|1000L
decl_stmt|;
specifier|private
name|int
name|maxReconnectAttempts
init|=
name|INFINITE
decl_stmt|;
specifier|private
name|int
name|maxInitialConnectAttempts
init|=
name|INFINITE
decl_stmt|;
specifier|private
name|long
name|maximumReconnectDelay
init|=
literal|30000
decl_stmt|;
specifier|private
name|long
name|initialReconnectDelay
init|=
literal|1000L
decl_stmt|;
specifier|private
name|boolean
name|useExponentialBackOff
init|=
literal|false
decl_stmt|;
specifier|private
name|double
name|backOffMultiplier
init|=
literal|2.0
decl_stmt|;
comment|/**      * Gets the maximum number of a times a Message send should be retried before      * a JMSExeception is thrown indicating that the operation failed.      *      * @return number of send retries that will be performed.      */
specifier|public
name|int
name|getMaxSendRetries
parameter_list|()
block|{
return|return
name|maxSendRetries
return|;
block|}
comment|/**      * Sets the maximum number of a times a Message send should be retried before      * a JMSExeception is thrown indicating that the operation failed.      *      * @param maxSendRetries      * 			number of send retries that will be performed.      */
specifier|public
name|void
name|setMaxSendRetries
parameter_list|(
name|int
name|maxSendRetries
parameter_list|)
block|{
name|this
operator|.
name|maxSendRetries
operator|=
name|maxSendRetries
expr_stmt|;
block|}
comment|/**      * Get the amount of time the DestionationBridge will wait between attempts      * to forward a message.      *      * @return time in milliseconds to wait between send attempts.      */
specifier|public
name|long
name|getSendRetryDelay
parameter_list|()
block|{
return|return
name|this
operator|.
name|sendRetryDelay
return|;
block|}
comment|/**      * Set the amount of time the DestionationBridge will wait between attempts      * to forward a message.  The default policy limits the minimum time between      * send attempt to one second.      *      * @param sendRetryDelay      * 		Time in milliseconds to wait before attempting another send.      */
specifier|public
name|void
name|setSendRetyDelay
parameter_list|(
name|long
name|sendRetryDelay
parameter_list|)
block|{
if|if
condition|(
name|sendRetryDelay
operator|<
literal|1000L
condition|)
block|{
name|this
operator|.
name|sendRetryDelay
operator|=
literal|1000L
expr_stmt|;
block|}
name|this
operator|.
name|sendRetryDelay
operator|=
name|sendRetryDelay
expr_stmt|;
block|}
comment|/**      * Gets the number of time that {@link JmsConnector} will attempt to connect      * or reconnect before giving up.  By default the policy sets this value to      * a negative value meaning try forever.      *      * @return the number of attempts to connect before giving up.      */
specifier|public
name|int
name|getMaxReconnectAttempts
parameter_list|()
block|{
return|return
name|maxReconnectAttempts
return|;
block|}
comment|/**      * Sets the number of time that {@link JmsConnector} will attempt to connect      * or reconnect before giving up.  By default the policy sets this value to      * a negative value meaning try forever, set to a positive value to retry a      * fixed number of times, or zero to never try and reconnect.      *      * @param maxReconnectAttempts      */
specifier|public
name|void
name|setMaxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectAttempts
operator|=
name|maxReconnectAttempts
expr_stmt|;
block|}
comment|/**      * Gets the maximum number of times that the {@link JmsConnector} will try      * to connect on startup to before it marks itself as failed and does not      * try any further connections.      *      * @returns the max number of times a connection attempt is made before failing.      */
specifier|public
name|int
name|getMaxInitialConnectAttempts
parameter_list|()
block|{
return|return
name|this
operator|.
name|maxInitialConnectAttempts
return|;
block|}
comment|/**      * Sets the maximum number of times that the {@link JmsConnector} will try      * to connect on startup to before it marks itself as failed and does not      * try any further connections.      *      * @param maxAttempts      * 		The max number of times a connection attempt is made before failing.      */
specifier|public
name|void
name|setMaxInitialConnectAttempts
parameter_list|(
name|int
name|maxAttempts
parameter_list|)
block|{
name|this
operator|.
name|maxInitialConnectAttempts
operator|=
name|maxAttempts
expr_stmt|;
block|}
comment|/**      * Gets the maximum delay that is inserted between each attempt to connect      * before another attempt is made.  The default setting for this value is      * 30 seconds.      *      * @return the max delay between connection attempts in milliseconds.      */
specifier|public
name|long
name|getMaximumReconnectDelay
parameter_list|()
block|{
return|return
name|maximumReconnectDelay
return|;
block|}
comment|/**      * Sets the maximum delay that is inserted between each attempt to connect      * before another attempt is made.      *      * @param maximumReconnectDelay      * 		The maximum delay between connection attempts in milliseconds.      */
specifier|public
name|void
name|setMaximumReconnectDelay
parameter_list|(
name|long
name|maximumReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|maximumReconnectDelay
operator|=
name|maximumReconnectDelay
expr_stmt|;
block|}
comment|/**      * Gets the initial delay value used before a reconnection attempt is made.  If the      * use exponential back-off value is set to false then this will be the fixed time      * between connection attempts.  By default this value is set to one second.      *      * @return time in milliseconds that will be used between connection retries.      */
specifier|public
name|long
name|getInitialReconnectDelay
parameter_list|()
block|{
return|return
name|initialReconnectDelay
return|;
block|}
comment|/**      * Gets the initial delay value used before a reconnection attempt is made.  If the      * use exponential back-off value is set to false then this will be the fixed time      * between connection attempts.  By default this value is set to one second.       * @param initialReconnectDelay      * 		Time in milliseconds to wait before the first reconnection attempt.      */
specifier|public
name|void
name|setInitialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|initialReconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
comment|/**      * Gets whether the policy uses the set back-off multiplier to grow the time between      * connection attempts.      *      * @return true if the policy will grow the time between connection attempts.      */
specifier|public
name|boolean
name|isUseExponentialBackOff
parameter_list|()
block|{
return|return
name|useExponentialBackOff
return|;
block|}
comment|/**      * Sets whether the policy uses the set back-off multiplier to grow the time between      * connection attempts.      *      * @param useExponentialBackOff      */
specifier|public
name|void
name|setUseExponentialBackOff
parameter_list|(
name|boolean
name|useExponentialBackOff
parameter_list|)
block|{
name|this
operator|.
name|useExponentialBackOff
operator|=
name|useExponentialBackOff
expr_stmt|;
block|}
comment|/**      * Gets the multiplier used to grow the delay between connection attempts from the initial      * time to the max set time.  By default this value is set to 2.0.      *      * @return the currently configured connection delay multiplier.      */
specifier|public
name|double
name|getBackOffMultiplier
parameter_list|()
block|{
return|return
name|backOffMultiplier
return|;
block|}
comment|/**      * Gets the multiplier used to grow the delay between connection attempts from the initial      * time to the max set time.  By default this value is set to 2.0.      *      * @param backOffMultiplier      * 		The multiplier value used to grow the reconnection delay.      */
specifier|public
name|void
name|setBackOffMultiplier
parameter_list|(
name|double
name|backOffMultiplier
parameter_list|)
block|{
name|this
operator|.
name|backOffMultiplier
operator|=
name|backOffMultiplier
expr_stmt|;
block|}
comment|/**      * Returns the next computed delay value that the connection controller should use to      * wait before attempting another connection for the {@link JmsConnector}.      *      * @param attempt      * 		The current connection attempt.      *      * @return the next delay amount in milliseconds.      */
specifier|public
name|long
name|getNextDelay
parameter_list|(
name|int
name|attempt
parameter_list|)
block|{
if|if
condition|(
name|attempt
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|long
name|nextDelay
init|=
name|initialReconnectDelay
decl_stmt|;
if|if
condition|(
name|useExponentialBackOff
condition|)
block|{
name|nextDelay
operator|=
name|nextDelay
operator|*
call|(
name|long
call|)
argument_list|(
name|attempt
operator|*
name|backOffMultiplier
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maximumReconnectDelay
operator|>
literal|0
operator|&&
name|nextDelay
operator|>
name|maximumReconnectDelay
condition|)
block|{
name|nextDelay
operator|=
name|maximumReconnectDelay
expr_stmt|;
block|}
return|return
name|nextDelay
return|;
block|}
block|}
end_class

end_unit

