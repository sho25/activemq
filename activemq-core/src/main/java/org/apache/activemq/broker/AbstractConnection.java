begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|ConnectionStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataArrayResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|FlushCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|IntegerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|KeepAliveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatchNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|CommandVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConsumerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.26 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractConnection
implements|implements
name|Service
implements|,
name|Connection
implements|,
name|Task
implements|,
name|CommandVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Broker
name|broker
decl_stmt|;
specifier|protected
specifier|final
name|List
name|dispatchQueue
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|TaskRunner
name|taskRunner
decl_stmt|;
specifier|protected
specifier|final
name|TransportConnector
name|connector
decl_stmt|;
specifier|protected
name|BrokerInfo
name|brokerInfo
decl_stmt|;
specifier|private
name|ConnectionStatistics
name|statistics
init|=
operator|new
name|ConnectionStatistics
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|inServiceException
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentHashMap
name|connectionStates
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|WireFormatInfo
name|wireFormatInfo
decl_stmt|;
specifier|protected
name|boolean
name|disposed
init|=
literal|false
decl_stmt|;
specifier|static
class|class
name|ConnectionState
extends|extends
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConnectionState
block|{
specifier|private
specifier|final
name|ConnectionContext
name|context
decl_stmt|;
specifier|public
name|ConnectionState
parameter_list|(
name|ConnectionInfo
name|info
parameter_list|,
name|ConnectionContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|ConnectionContext
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
block|}
comment|/**      * @param connector      * @param transport      * @param broker      * @param taskRunnerFactory - can be null if you want direct dispatch to the transport else commands are sent async.      */
specifier|public
name|AbstractConnection
parameter_list|(
name|TransportConnector
name|connector
parameter_list|,
name|Broker
name|broker
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
name|this
operator|.
name|connector
operator|=
name|connector
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|statistics
operator|.
name|setParent
argument_list|(
name|connector
operator|.
name|getStatistics
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskRunnerFactory
operator|!=
literal|null
condition|)
block|{
name|taskRunner
operator|=
name|taskRunnerFactory
operator|.
name|createTaskRunner
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|taskRunner
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Returns the number of messages to be dispatched to this connection      */
specifier|public
name|int
name|getDispatchQueueSize
parameter_list|()
block|{
return|return
name|dispatchQueue
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|dispatch
argument_list|(
name|connector
operator|.
name|getBrokerInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|disposed
condition|)
return|return;
name|disposed
operator|=
literal|true
expr_stmt|;
comment|//
comment|// Remove all logical connection associated with this connection
comment|// from the broker.
name|ArrayList
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|connectionStates
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|l
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConnectionId
name|connectionId
init|=
operator|(
name|ConnectionId
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|processRemoveConnection
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{             }
block|}
if|if
condition|(
name|brokerInfo
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeBroker
argument_list|(
name|this
argument_list|,
name|brokerInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|serviceTransportException
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Transport failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Transport failed: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|serviceException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|disposed
operator|&&
operator|!
name|inServiceException
condition|)
block|{
name|inServiceException
operator|=
literal|true
expr_stmt|;
try|try
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Async error occurred: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ConnectionError
name|ce
init|=
operator|new
name|ConnectionError
argument_list|()
decl_stmt|;
name|ce
operator|.
name|setException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|dispatchAsync
argument_list|(
name|ce
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inServiceException
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Response
name|service
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|Response
name|response
init|=
literal|null
decl_stmt|;
name|boolean
name|responseRequired
init|=
name|command
operator|.
name|isResponseRequired
argument_list|()
decl_stmt|;
name|short
name|commandId
init|=
name|command
operator|.
name|getCommandId
argument_list|()
decl_stmt|;
try|try
block|{
name|response
operator|=
name|command
operator|.
name|visit
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|responseRequired
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Sync error occurred: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|=
operator|new
name|ExceptionResponse
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|responseRequired
condition|)
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
name|response
operator|=
operator|new
name|Response
argument_list|()
expr_stmt|;
block|}
name|response
operator|.
name|setCorrelationId
argument_list|(
name|commandId
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
specifier|protected
name|ConnectionState
name|lookupConnectionState
parameter_list|(
name|ConsumerId
name|id
parameter_list|)
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|id
operator|.
name|getParentId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot lookup a consumer from a connection that had not been registered: "
operator|+
name|id
operator|.
name|getParentId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
throw|;
return|return
name|cs
return|;
block|}
specifier|protected
name|ConnectionState
name|lookupConnectionState
parameter_list|(
name|ProducerId
name|id
parameter_list|)
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|id
operator|.
name|getParentId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot lookup a producer from a connection that had not been registered: "
operator|+
name|id
operator|.
name|getParentId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
throw|;
return|return
name|cs
return|;
block|}
specifier|protected
name|ConnectionState
name|lookupConnectionState
parameter_list|(
name|SessionId
name|id
parameter_list|)
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|id
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot lookup a session from a connection that had not been registered: "
operator|+
name|id
operator|.
name|getParentId
argument_list|()
argument_list|)
throw|;
return|return
name|cs
return|;
block|}
specifier|protected
name|ConnectionState
name|lookupConnectionState
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|)
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot lookup a connection that had not been registered: "
operator|+
name|connectionId
argument_list|)
throw|;
return|return
name|cs
return|;
block|}
specifier|public
name|Response
name|processKeepAlive
parameter_list|(
name|KeepAliveInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveSubscription
parameter_list|(
name|RemoveSubscriptionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|broker
operator|.
name|removeSubscription
argument_list|(
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processWireFormat
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|wireFormatInfo
operator|=
name|info
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processShutdown
parameter_list|(
name|ShutdownInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|stop
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processFlush
parameter_list|(
name|FlushCommand
name|command
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processBeginTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConnectionContext
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|beginTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processEndTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// No need to do anything.  This packet is just sent by the client
comment|// make sure he is synced with the server as commit command could
comment|// come from a different connection.
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processPrepareTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConnectionContext
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|int
name|result
init|=
name|broker
operator|.
name|prepareTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
name|IntegerResponse
name|response
init|=
operator|new
name|IntegerResponse
argument_list|(
name|result
argument_list|)
decl_stmt|;
return|return
name|response
return|;
block|}
specifier|public
name|Response
name|processCommitTransactionOnePhase
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConnectionContext
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processCommitTransactionTwoPhase
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConnectionContext
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRollbackTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConnectionContext
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|rollbackTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processForgetTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConnectionContext
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|forgetTransaction
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRecoverTransactions
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
operator|(
name|ConnectionState
operator|)
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|ConnectionContext
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|context
operator|=
name|cs
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
name|TransactionId
index|[]
name|preparedTransactions
init|=
name|broker
operator|.
name|getPreparedTransactions
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|DataArrayResponse
argument_list|(
name|preparedTransactions
argument_list|)
return|;
block|}
specifier|public
name|Response
name|processMessage
parameter_list|(
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Throwable
block|{
name|broker
operator|.
name|send
argument_list|(
name|lookupConnectionState
argument_list|(
name|messageSend
operator|.
name|getProducerId
argument_list|()
argument_list|)
operator|.
name|getContext
argument_list|()
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processMessageAck
parameter_list|(
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Throwable
block|{
name|broker
operator|.
name|acknowledge
argument_list|(
name|lookupConnectionState
argument_list|(
name|ack
operator|.
name|getConsumerId
argument_list|()
argument_list|)
operator|.
name|getContext
argument_list|()
argument_list|,
name|ack
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processMessageDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|notification
parameter_list|)
throws|throws
name|Throwable
block|{
name|broker
operator|.
name|processDispatchNotification
argument_list|(
name|notification
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processBrokerInfo
parameter_list|(
name|BrokerInfo
name|info
parameter_list|)
block|{
name|broker
operator|.
name|addBroker
argument_list|(
name|this
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddDestination
parameter_list|(
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addDestination
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|cs
operator|.
name|addTempDestination
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveDestination
parameter_list|(
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|removeDestination
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|info
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|cs
operator|.
name|removeTempDestination
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddProducer
parameter_list|(
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|SessionId
name|sessionId
init|=
name|info
operator|.
name|getProducerId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot add a producer to a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
name|broker
operator|.
name|addProducer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|ss
operator|.
name|addProducer
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveProducer
parameter_list|(
name|ProducerId
name|id
parameter_list|)
throws|throws
name|Throwable
block|{
name|SessionId
name|sessionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a producer from a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
name|ProducerState
name|ps
init|=
name|ss
operator|.
name|removeProducer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ps
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a producer that had not been registered: "
operator|+
name|id
argument_list|)
throw|;
name|broker
operator|.
name|removeProducer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|ps
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddConsumer
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|SessionId
name|sessionId
init|=
name|info
operator|.
name|getConsumerId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot add a consumer to a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
name|broker
operator|.
name|addConsumer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|ss
operator|.
name|addConsumer
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveConsumer
parameter_list|(
name|ConsumerId
name|id
parameter_list|)
throws|throws
name|Throwable
block|{
name|SessionId
name|sessionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a consumer from a session that had not been registered: "
operator|+
name|sessionId
argument_list|)
throw|;
name|ConsumerState
name|consumerState
init|=
name|ss
operator|.
name|removeConsumer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerState
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove a consumer that had not been registered: "
operator|+
name|id
argument_list|)
throw|;
name|broker
operator|.
name|removeConsumer
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|consumerState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddSession
parameter_list|(
name|SessionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getSessionId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addSession
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addSession
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveSession
parameter_list|(
name|SessionId
name|id
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionId
name|connectionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|SessionState
name|session
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot remove session that had not been registered: "
operator|+
name|id
argument_list|)
throw|;
comment|// Cascade the connection stop to the consumers and producers.
for|for
control|(
name|Iterator
name|iter
init|=
name|session
operator|.
name|getConsumerIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|processRemoveConsumer
argument_list|(
operator|(
name|ConsumerId
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|session
operator|.
name|getProducerIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|processRemoveProducer
argument_list|(
operator|(
name|ProducerId
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cs
operator|.
name|removeSession
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeSession
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|session
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processAddConnection
parameter_list|(
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Setup the context.
name|String
name|clientId
init|=
name|info
operator|.
name|getClientId
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
operator|new
name|ConnectionContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setConnection
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|context
operator|.
name|setConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|context
operator|.
name|setTransactions
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|context
operator|.
name|setUserName
argument_list|(
name|info
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setConnectionId
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setWireFormatInfo
argument_list|(
name|wireFormatInfo
argument_list|)
expr_stmt|;
name|connectionStates
operator|.
name|put
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|,
operator|new
name|ConnectionState
argument_list|(
name|info
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRemoveConnection
parameter_list|(
name|ConnectionId
name|id
parameter_list|)
throws|throws
name|Throwable
block|{
name|ConnectionState
name|cs
init|=
name|lookupConnectionState
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// Cascade the connection stop to the sessions.
for|for
control|(
name|Iterator
name|iter
init|=
name|cs
operator|.
name|getSessionIds
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|processRemoveSession
argument_list|(
operator|(
name|SessionId
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Cascade the connection stop to temp destinations.
for|for
control|(
name|Iterator
name|iter
init|=
name|cs
operator|.
name|getTempDesinations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|broker
operator|.
name|removeDestination
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
operator|(
name|ActiveMQDestination
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|broker
operator|.
name|removeConnection
argument_list|(
name|cs
operator|.
name|getContext
argument_list|()
argument_list|,
name|cs
operator|.
name|getInfo
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|connectionStates
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Connector
name|getConnector
parameter_list|()
block|{
return|return
name|connector
return|;
block|}
specifier|public
name|void
name|dispatchSync
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|Runnable
name|sub
init|=
operator|(
name|Runnable
operator|)
name|md
operator|.
name|getConsumer
argument_list|()
decl_stmt|;
name|broker
operator|.
name|processDispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
try|try
block|{
name|dispatch
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|sub
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|dispatch
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dispatchAsync
parameter_list|(
name|Command
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|message
decl_stmt|;
name|broker
operator|.
name|processDispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|taskRunner
operator|==
literal|null
condition|)
block|{
name|dispatchSync
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dispatchQueue
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
try|try
block|{
name|taskRunner
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
if|if
condition|(
name|dispatchQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|dispatchQueue
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|dispatch
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/**      * @return true if the Connection is slow      */
specifier|public
name|boolean
name|isSlow
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @return if after being marked, the Connection is still writing      */
specifier|public
name|boolean
name|isBlocked
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @return true if the Connection is connected      */
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
operator|!
name|disposed
return|;
block|}
comment|/**      * @return true if the Connection is active      */
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
return|return
operator|!
name|disposed
return|;
block|}
specifier|abstract
specifier|protected
name|void
name|dispatch
parameter_list|(
name|Command
name|command
parameter_list|)
function_decl|;
comment|/**      * Returns the statistics for this connection      */
specifier|public
name|ConnectionStatistics
name|getStatistics
parameter_list|()
block|{
return|return
name|statistics
return|;
block|}
block|}
end_class

end_unit

