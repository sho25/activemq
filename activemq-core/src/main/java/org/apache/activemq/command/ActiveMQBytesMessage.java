begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageEOFException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotReadableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|PacketData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_comment
comment|/**  * A<CODE>BytesMessage</CODE> object is used to send a message containing a stream of uninterpreted bytes. It inherits  * from the<CODE>Message</CODE> interface and adds a bytes message body. The receiver of the message supplies the  * interpretation of the bytes.<P> The<CODE>BytesMessage</CODE> methods are based largely on those found in  *<CODE>java.io.DataInputStream</CODE> and<CODE>java.io.DataOutputStream</CODE>.<P> This message type is for client  * encoding of existing message formats. If possible, one of the other self-defining message types should be used  * instead.<P> Although the JMS API allows the use of message properties with byte messages, they are typically not  * used, since the inclusion of properties may affect the format.<P> The primitive types can be written explicitly  * using methods for each type. They may also be written generically as objects. For instance, a call to  *<CODE>BytesMessage.writeInt(6)</CODE> is equivalent to<CODE> BytesMessage.writeObject(new Integer(6))</CODE>. Both  * forms are provided, because the explicit form is convenient for static programming, and the object form is needed  * when types are not known at compile time.<P> When the message is first created, and when<CODE>clearBody</CODE> is  * called, the body of the message is in write-only mode. After the first call to<CODE>reset</CODE> has been made, the  * message body is in read-only mode. After a message has been sent, the client that sent it can retain and modify it  * without affecting the message that has been sent. The same message object can be sent multiple times. When a message  * has been received, the provider has called<CODE>reset</CODE> so that the message body is in read-only mode for the  * client.<P> If<CODE>clearBody</CODE> is called on a message in read-only mode, the message body is cleared and the  * message is in write-only mode.<P> If a client attempts to read a message in write-only mode, a  *<CODE>MessageNotReadableException</CODE> is thrown.<P> If a client attempts to write a message in read-only mode, a  *<CODE>MessageNotWriteableException</CODE> is thrown.  *  * @openwire:marshaller code=24  * @see javax.jms.Session#createBytesMessage()  * @see javax.jms.MapMessage  * @see javax.jms.Message  * @see javax.jms.ObjectMessage  * @see javax.jms.StreamMessage  * @see javax.jms.TextMessage  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQBytesMessage
extends|extends
name|ActiveMQMessage
implements|implements
name|BytesMessage
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|ACTIVEMQ_BYTES_MESSAGE
decl_stmt|;
specifier|transient
specifier|protected
name|DataOutputStream
name|dataOut
decl_stmt|;
specifier|transient
specifier|protected
name|ByteArrayOutputStream
name|bytesOut
decl_stmt|;
specifier|transient
specifier|protected
name|DataInputStream
name|dataIn
decl_stmt|;
specifier|transient
specifier|protected
name|int
name|length
decl_stmt|;
specifier|public
name|Message
name|copy
parameter_list|()
block|{
name|ActiveMQBytesMessage
name|copy
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|ActiveMQBytesMessage
name|copy
parameter_list|)
block|{
name|storeContent
argument_list|()
expr_stmt|;
name|super
operator|.
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|copy
operator|.
name|dataOut
operator|=
literal|null
expr_stmt|;
name|copy
operator|.
name|bytesOut
operator|=
literal|null
expr_stmt|;
name|copy
operator|.
name|dataIn
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|onSend
parameter_list|()
block|{
name|super
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|storeContent
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|storeContent
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|dataOut
operator|!=
literal|null
condition|)
block|{
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|ByteSequence
name|bs
init|=
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressed
condition|)
block|{
comment|// Prefix the real length
name|ByteArrayPacket
name|packet
init|=
operator|new
name|ByteArrayPacket
argument_list|(
name|bs
argument_list|)
decl_stmt|;
name|PacketData
operator|.
name|writeIntBig
argument_list|(
name|packet
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|setContent
argument_list|(
name|bs
argument_list|)
expr_stmt|;
name|bytesOut
operator|=
literal|null
expr_stmt|;
name|dataOut
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
comment|//TODO verify RuntimeException
block|}
block|}
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
comment|/**      * Clears out the message body. Clearing a message's body does not clear its header values or property entries.<P>      * If this message body was read-only, calling this method leaves the message body in the same state as an empty      * body in a newly created message.      *      * @throws JMSException if the JMS provider fails to clear the message body due to some internal error.      */
specifier|public
name|void
name|clearBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|super
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|this
operator|.
name|dataOut
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataIn
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bytesOut
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Gets the number of bytes of the message body when the message is in read-only mode. The value returned can be      * used to allocate a byte array. The value returned is the entire length of the message body, regardless of where      * the pointer for reading the message is currently located.      *      * @return number of bytes in the message      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageNotReadableException if the message is in write-only mode.      * @since 1.1      */
specifier|public
name|long
name|getBodyLength
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
return|return
name|length
return|;
block|}
comment|/**      * Reads a<code>boolean</code> from the bytes message stream.      *      * @return the<code>boolean</code> value read      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readBoolean
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a signed 8-bit value from the bytes message stream.      *      * @return the next byte from the bytes message stream as a signed 8-bit<code>byte</code>      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readByte
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads an unsigned 8-bit number from the bytes message stream.      *      * @return the next byte from the bytes message stream, interpreted as an unsigned 8-bit number      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|int
name|readUnsignedByte
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readUnsignedByte
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a signed 16-bit number from the bytes message stream.      *      * @return the next two bytes from the bytes message stream, interpreted as a signed 16-bit number      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readShort
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads an unsigned 16-bit number from the bytes message stream.      *      * @return the next two bytes from the bytes message stream, interpreted as an unsigned 16-bit integer      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|int
name|readUnsignedShort
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readUnsignedShort
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a Unicode character value from the bytes message stream.      *      * @return the next two bytes from the bytes message stream as a Unicode character      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|char
name|readChar
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readChar
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a signed 32-bit integer from the bytes message stream.      *      * @return the next four bytes from the bytes message stream, interpreted as an<code>int</code>      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readInt
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a signed 64-bit integer from the bytes message stream.      *      * @return the next eight bytes from the bytes message stream, interpreted as a<code>long</code>      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readLong
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a<code>float</code> from the bytes message stream.      *      * @return the next four bytes from the bytes message stream, interpreted as a<code>float</code>      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readFloat
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a<code>double</code> from the bytes message stream.      *      * @return the next eight bytes from the bytes message stream, interpreted as a<code>double</code>      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readDouble
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a string that has been encoded using a modified UTF-8 format from the bytes message stream.<P> For more      * information on the UTF-8 format, see "File System Safe UCS Transformation Format (FSS_UTF)", X/Open Preliminary      * Specification, X/Open Company Ltd., Document Number: P316. This information also appears in ISO/IEC 10646, Annex      * P.      *      * @return a Unicode string from the bytes message stream      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageEOFException         if unexpected end of bytes stream has been reached.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|String
name|readUTF
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a byte array from the bytes message stream.<P> If the length of array<code>value</code> is less than the      * number of bytes remaining to be read from the stream, the array should be filled. A subsequent call reads the      * next increment, and so on.<P> If the number of bytes remaining in the stream is less than the length of array      *<code>value</code>, the bytes should be read into the array. The return value of the total number of bytes read      * will be less than the length of the array, indicating that there are no more bytes left to be read from the      * stream. The next read of the stream returns -1.      *      * @param value the buffer into which the data is read      * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the      *         stream has been reached      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|int
name|readBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|readBytes
argument_list|(
name|value
argument_list|,
name|value
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Reads a portion of the bytes message stream.<P> If the length of array<code>value</code> is less than the      * number of bytes remaining to be read from the stream, the array should be filled. A subsequent call reads the      * next increment, and so on.<P> If the number of bytes remaining in the stream is less than the length of array      *<code>value</code>, the bytes should be read into the array. The return value of the total number of bytes read      * will be less than the length of the array, indicating that there are no more bytes left to be read from the      * stream. The next read of the stream returns -1.      *<p/>      * If<code>length</code> is negative, or<code>length</code> is greater than the length of the array      *<code>value</code>, then an<code>IndexOutOfBoundsException</code> is thrown. No bytes will be read from the      * stream for this exception case.      *      * @param value  the buffer into which the data is read      * @param length the number of bytes to read; must be less than or equal to<code>value.length</code>      * @return the total number of bytes read into the buffer, or -1 if there is no more data because the end of the      *         stream has been reached      * @throws JMSException                if the JMS provider fails to read the message due to some internal error.      * @throws MessageNotReadableException if the message is in write-only mode.      */
specifier|public
name|int
name|readBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|<
name|length
condition|)
block|{
name|int
name|count
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|(
name|value
argument_list|,
name|n
argument_list|,
name|length
operator|-
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|n
operator|+=
name|count
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|0
operator|&&
name|length
operator|>
literal|0
condition|)
block|{
name|n
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>boolean</code> to the bytes message stream as a 1-byte value. The value<code>true</code> is      * written as the value<code>(byte)1</code>; the value<code>false</code> is written as the value      *<code>(byte)0</code>.      *      * @param value the<code>boolean</code> value to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>byte</code> to the bytes message stream as a 1-byte value.      *      * @param value the<code>byte</code> value to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeByte
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>short</code> to the bytes message stream as two bytes, high byte first.      *      * @param value the<code>short</code> to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeShort
parameter_list|(
name|short
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeShort
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>char</code> to the bytes message stream as a 2-byte value, high byte first.      *      * @param value the<code>char</code> value to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeChar
parameter_list|(
name|char
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeChar
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes an<code>int</code> to the bytes message stream as four bytes, high byte first.      *      * @param value the<code>int</code> to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>long</code> to the bytes message stream as eight bytes, high byte first.      *      * @param value the<code>long</code> to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Converts the<code>float</code> argument to an<code>int</code> using the<code>floatToIntBits</code> method in      * class<code>Float</code>, and then writes that<code>int</code> value to the bytes message stream as a 4-byte      * quantity, high byte first.      *      * @param value the<code>float</code> value to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeFloat
parameter_list|(
name|float
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeFloat
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Converts the<code>double</code> argument to a<code>long</code> using the<code>doubleToLongBits</code> method      * in class<code>Double</code>, and then writes that<code>long</code> value to the bytes message stream as an      * 8-byte quantity, high byte first.      *      * @param value the<code>double</code> value to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeDouble
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a string to the bytes message stream using UTF-8 encoding in a machine-independent manner.<P> For more      * information on the UTF-8 format, see "File System Safe UCS Transformation Format (FSS_UTF)", X/Open Preliminary      * Specification, X/Open Company Ltd., Document Number: P316. This information also appears in ISO/IEC 10646, Annex      * P.      *      * @param value the<code>String</code> value to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeUTF
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a byte array to the bytes message stream.      *      * @param value the byte array to be written      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a portion of a byte array to the bytes message stream.      *      * @param value  the byte array value to be written      * @param offset the initial offset within the byte array      * @param length the number of bytes to use      * @throws JMSException                 if the JMS provider fails to write the message due to some internal error.      * @throws MessageNotWriteableException if the message is in read-only mode.      */
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes an object to the bytes message stream.<P> This method works only for the objectified primitive object      * types (<code>Integer</code>,<code>Double</code>,<code>Long</code>&nbsp;...),<code>String</code> objects, and      * byte arrays.      *      * @param value the object in the Java programming language ("Java object") to be written; it must not be null      * @throws JMSException                   if the JMS provider fails to write the message due to some internal      *                                        error.      * @throws MessageFormatException         if the object is of an invalid type.      * @throws MessageNotWriteableException   if the message is in read-only mode.      * @throws java.lang.NullPointerException if the parameter<code>value</code> is null.      */
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|initializeWriting
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|writeBoolean
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Character
condition|)
block|{
name|writeChar
argument_list|(
operator|(
operator|(
name|Character
operator|)
name|value
operator|)
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
name|writeByte
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|value
operator|)
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
name|writeShort
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|value
operator|)
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|writeInt
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|writeLong
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|writeFloat
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|writeDouble
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|writeUTF
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|writeBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Cannot write non-primitive type:"
operator|+
name|value
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Puts the message body in read-only mode and repositions the stream of bytes to the beginning.      *      * @throws JMSException if an internal error occurs      */
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|JMSException
block|{
name|storeContent
argument_list|()
expr_stmt|;
name|this
operator|.
name|bytesOut
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataIn
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataOut
operator|=
literal|null
expr_stmt|;
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeWriting
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkReadOnlyBody
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dataOut
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bytesOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
name|bytesOut
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
name|getConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
name|connection
operator|.
name|isUseCompression
argument_list|()
condition|)
block|{
comment|// keep track of the real length of the content if
comment|// we are compressed.
try|try
block|{
name|os
operator|.
name|write
argument_list|(
operator|new
name|byte
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|length
operator|=
literal|0
expr_stmt|;
name|compressed
operator|=
literal|true
expr_stmt|;
name|Deflater
name|deflater
init|=
operator|new
name|Deflater
argument_list|(
name|Deflater
operator|.
name|BEST_SPEED
argument_list|)
decl_stmt|;
name|os
operator|=
operator|new
name|FilterOutputStream
argument_list|(
operator|new
name|DeflaterOutputStream
argument_list|(
name|os
argument_list|,
name|deflater
argument_list|)
argument_list|)
block|{
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|+=
name|arg0
operator|.
name|length
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|arg0
parameter_list|,
name|int
name|arg1
parameter_list|,
name|int
name|arg2
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|+=
name|arg2
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|arg0
argument_list|,
name|arg1
argument_list|,
name|arg2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|int
name|arg0
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|++
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
name|this
operator|.
name|dataOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|checkWriteOnlyBody
parameter_list|()
throws|throws
name|MessageNotReadableException
block|{
if|if
condition|(
operator|!
name|readOnlyBody
condition|)
block|{
throw|throw
operator|new
name|MessageNotReadableException
argument_list|(
literal|"Message body is write-only"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|initializeReading
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkWriteOnlyBody
argument_list|()
expr_stmt|;
if|if
condition|(
name|dataIn
operator|==
literal|null
condition|)
block|{
name|ByteSequence
name|data
init|=
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
name|data
operator|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCompressed
argument_list|()
condition|)
block|{
comment|// keep track of the real length of the content if
comment|// we are compressed.
try|try
block|{
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|length
operator|=
name|dis
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|is
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|length
operator|=
name|data
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|dataIn
operator|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setObjectProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
name|super
operator|.
name|setObjectProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" ActiveMQBytesMessage{ "
operator|+
literal|"bytesOut = "
operator|+
name|bytesOut
operator|+
literal|", dataOut = "
operator|+
name|dataOut
operator|+
literal|", dataIn = "
operator|+
name|dataIn
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

