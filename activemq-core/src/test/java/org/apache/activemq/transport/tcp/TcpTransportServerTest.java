begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * @author<a href="http://www.christianposta.com/blog">Christian Posta</a>  */
end_comment

begin_class
specifier|public
class|class
name|TcpTransportServerTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testDefaultPropertiesSetOnTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|TcpTransportServer
name|server
init|=
operator|(
name|TcpTransportServer
operator|)
name|TransportFactory
operator|.
name|bind
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:61616?trace=true"
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|setTransportOption
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAcceptListener
argument_list|(
operator|new
name|TransportAcceptListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAccept
parameter_list|(
name|Transport
name|transport
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"This transport does not have a TransportLogger!!"
argument_list|,
name|hasTransportLogger
argument_list|(
name|transport
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAcceptError
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not have received an error!"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|Socket
name|socket
init|=
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
literal|61616
argument_list|)
decl_stmt|;
name|server
operator|.
name|handleSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|hasTransportLogger
parameter_list|(
name|Transport
name|transport
parameter_list|)
block|{
name|boolean
name|end
init|=
literal|false
decl_stmt|;
name|Transport
name|current
init|=
name|transport
decl_stmt|;
while|while
condition|(
operator|!
name|end
condition|)
block|{
if|if
condition|(
name|current
operator|instanceof
name|TransportFilter
condition|)
block|{
name|TransportFilter
name|filter
init|=
operator|(
name|TransportFilter
operator|)
name|current
decl_stmt|;
if|if
condition|(
name|filter
operator|instanceof
name|TransportLogger
condition|)
block|{
return|return
literal|true
return|;
block|}
name|current
operator|=
name|filter
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|end
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

