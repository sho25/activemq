begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|connection
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mr
operator|.
name|api
operator|.
name|jms
operator|.
name|MantaTopicConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mr
operator|.
name|api
operator|.
name|jms
operator|.
name|MantaQueueConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jmeter
operator|.
name|util
operator|.
name|JMeterUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|InitialContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Provides static methods for creating Session and Destination objects.  */
end_comment

begin_class
specifier|public
class|class
name|ServerConnectionFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|SONICMQ_SERVER
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"sonicmq_server"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIBCOMQ_SERVER
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"tibcomq_server"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JBOSSMQ_SERVER
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"jbossmq_server"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPENJMS_SERVER
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"openjms_server"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_SERVER
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"joram_server"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_CONNECTION_FACTORY
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"joram_connection_factory"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_USERNAME
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"joram_username"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_PASSWORD
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"joram_password"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_NAMING_PORT
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"joram_naming_port"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MANTARAY_SERVER
init|=
name|JMeterUtils
operator|.
name|getResString
argument_list|(
literal|"mantaray_server"
argument_list|)
decl_stmt|;
comment|// For testing within IntelliJ running main()
comment|/*     public static final String SONICMQ_SERVER = "Sonic Server";     public static final String TIBCOMQ_SERVER = "Tibco Server";     public static final String JBOSSMQ_SERVER = "JbossMQ Server";     public static final String OPENJMS_SERVER = "OpenJMS Server";     public static final String ACTIVEMQ_SERVER = "ActiveMQ Server";     public static final String JORAM_SERVER = "Joram Server";     public static final String JORAM_CONNECTION_FACTORY = "!cf";     public static final String JORAM_USERNAME = "root";     public static final String JORAM_PASSWORD = "root";     public static final String JORAM_NAMING_PORT = "16400";     public static final String MANTARAY_SERVER = "Mantaray";     */
specifier|public
specifier|static
specifier|final
name|String
name|SONICMQ_TOPIC
init|=
literal|"progress.message.jclient.TopicConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SONICMQ_QUEUE
init|=
literal|"progress.message.jclient.QueueConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIBCOMQ_TOPIC
init|=
literal|"com.tibco.tibjms.TibjmsTopicConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIBCOMQ_QUEUE
init|=
literal|"com.tibco.tibjms.TibjmsQueueConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMING_CONTEXT
init|=
literal|"org.jnp.interfaces.NamingContextFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JNP_INTERFACES
init|=
literal|"org.jnp.interfaces"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPENJMS_NAMING_CONTEXT
init|=
literal|"org.exolab.jms.jndi.InitialContextFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPENJMS_TOPIC
init|=
literal|"TcpTopicConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OPENJMS_QUEUE
init|=
literal|"TcpQueueConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_NAMING_CONTEXT
init|=
literal|"fr.dyade.aaa.jndi2.client.NamingContextFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_TOPIC
init|=
literal|"TopicConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JORAM_QUEUE
init|=
literal|"QueueConnectionFactory"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMING_HOST
init|=
literal|"java.naming.factory.host"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMING_PORT
init|=
literal|"java.naming.factory.post"
decl_stmt|;
specifier|public
specifier|static
name|Topic
name|topicContext
decl_stmt|;
specifier|private
specifier|static
name|int
name|mantarayProducerPortCount
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|mantarayConsumerPortCount
init|=
literal|0
decl_stmt|;
comment|/**      * Closes the connection passed through the parameter      *      * @param connection - Connection object to be closed.      * @param session    - Session object to be closed.      * @throws JMSException      */
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Dynamically creates a Connection object based on the type of broker.      *      * @param url            - location of the broker.      * @param mqServer       - type of broker that is running.      * @param isTopic        - type of message domain.      * @param embeddedBroker - specified is the broker is embedded.      * @return      * @throws JMSException      */
specifier|public
specifier|static
name|Connection
name|createConnectionFactory
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|mqServer
parameter_list|,
name|boolean
name|isTopic
parameter_list|,
name|boolean
name|embeddedBroker
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|SONICMQ_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Connection object for a SONIC MQ server.
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
name|createConnectionFactory
argument_list|(
name|url
argument_list|,
name|SONICMQ_TOPIC
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createConnectionFactory
argument_list|(
name|url
argument_list|,
name|SONICMQ_QUEUE
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|TIBCOMQ_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Connection object for a TIBCO MQ server.
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
name|createConnectionFactory
argument_list|(
name|url
argument_list|,
name|TIBCOMQ_TOPIC
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createConnectionFactory
argument_list|(
name|url
argument_list|,
name|TIBCOMQ_QUEUE
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|JBOSSMQ_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Connection object for a JBoss MQ server.
try|try
block|{
name|InitialContext
name|context
init|=
name|getInitialContext
argument_list|(
name|url
argument_list|,
name|JBOSSMQ_SERVER
argument_list|)
decl_stmt|;
name|ConnectionFactory
name|factory
init|=
operator|(
name|ConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
literal|"ConnectionFactory"
argument_list|)
decl_stmt|;
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|factory
operator|.
name|createConnection
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Error creating InitialContext "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|OPENJMS_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Connection object for a OpenJMS server.
try|try
block|{
name|Context
name|context
init|=
name|getInitialContext
argument_list|(
name|url
argument_list|,
name|OPENJMS_SERVER
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTopic
condition|)
block|{
name|TopicConnectionFactory
name|factory
init|=
operator|(
name|TopicConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|OPENJMS_TOPIC
argument_list|)
decl_stmt|;
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|factory
operator|.
name|createTopicConnection
argument_list|()
return|;
block|}
else|else
block|{
name|QueueConnectionFactory
name|factory
init|=
operator|(
name|QueueConnectionFactory
operator|)
name|context
operator|.
name|lookup
argument_list|(
name|OPENJMS_QUEUE
argument_list|)
decl_stmt|;
name|context
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|factory
operator|.
name|createQueueConnection
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Error creating InitialContext "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|JORAM_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Connection object for a JORAM server.
try|try
block|{
name|Context
name|ictx
init|=
name|getInitialContext
argument_list|(
name|url
argument_list|,
name|JORAM_SERVER
argument_list|)
decl_stmt|;
name|ConnectionFactory
name|cf
init|=
operator|(
name|ConnectionFactory
operator|)
name|ictx
operator|.
name|lookup
argument_list|(
name|JORAM_CONNECTION_FACTORY
argument_list|)
decl_stmt|;
name|ictx
operator|.
name|close
argument_list|()
expr_stmt|;
name|Connection
name|cnx
init|=
name|cf
operator|.
name|createConnection
argument_list|(
name|JORAM_USERNAME
argument_list|,
name|JORAM_PASSWORD
argument_list|)
decl_stmt|;
return|return
name|cnx
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Error creating InitialContext "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|MANTARAY_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Connection object for a Mantaray.
name|System
operator|.
name|setProperty
argument_list|(
literal|"mantaHome"
argument_list|,
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTopic
condition|)
block|{
name|TopicConnectionFactory
name|factory
init|=
operator|(
name|TopicConnectionFactory
operator|)
operator|new
name|MantaTopicConnectionFactory
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|createTopicConnection
argument_list|()
return|;
block|}
else|else
block|{
name|QueueConnectionFactory
name|factory
init|=
operator|(
name|QueueConnectionFactory
operator|)
operator|new
name|MantaQueueConnectionFactory
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|createQueueConnection
argument_list|()
return|;
block|}
block|}
else|else
block|{
comment|//Used to create a session from the default MQ server ActiveMQConnectionFactory.
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setUseAsyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|embeddedBroker
condition|)
block|{
name|factory
operator|.
name|setUseEmbeddedBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ActiveMQConnection
name|c
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setQueuePrefetch
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setQueueBrowserPrefetch
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setTopicPrefetch
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|c
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setDurableTopicPrefetch
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
block|}
comment|/**      * Creates a Destination object through Session using subject.      *      * @param session  - Session used to create the Destination.      * @param subject  - the subject of the Destination to be created.      * @param mqServer - ype of broker that is running.      * @param url      - location of the broker.      * @param isTopic  - specified is the broker is embedded.      * @return      * @throws JMSException      */
specifier|public
specifier|static
name|Destination
name|createDestination
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|mqServer
parameter_list|,
name|boolean
name|isTopic
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|JBOSSMQ_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
operator|(
name|Topic
operator|)
name|getInitialContext
argument_list|(
name|url
argument_list|,
name|JBOSSMQ_SERVER
argument_list|)
operator|.
name|lookup
argument_list|(
literal|"topic/"
operator|+
name|subject
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|Queue
operator|)
name|getInitialContext
argument_list|(
name|url
argument_list|,
name|JBOSSMQ_SERVER
argument_list|)
operator|.
name|lookup
argument_list|(
literal|"queue/"
operator|+
name|subject
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Error on lookup for Queue "
operator|+
name|subject
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|OPENJMS_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
operator|(
operator|(
name|TopicSession
operator|)
name|session
operator|)
operator|.
name|createTopic
argument_list|(
name|subject
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|QueueSession
operator|)
name|session
operator|)
operator|.
name|createQueue
argument_list|(
name|subject
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|JORAM_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
operator|(
name|Topic
operator|)
name|getInitialContext
argument_list|(
name|url
argument_list|,
name|JORAM_SERVER
argument_list|)
operator|.
name|lookup
argument_list|(
name|subject
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|Queue
operator|)
name|getInitialContext
argument_list|(
name|url
argument_list|,
name|JORAM_SERVER
argument_list|)
operator|.
name|lookup
argument_list|(
name|subject
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Error on lookup for Queue "
operator|+
name|subject
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
name|session
operator|.
name|createTopic
argument_list|(
name|subject
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|session
operator|.
name|createQueue
argument_list|(
name|subject
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Creates a Session object.      *      * @param connection - Connection object where the session will be created from.      * @return      * @throws JMSException      */
specifier|public
specifier|static
name|Session
name|createSession
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|boolean
name|isTransacted
parameter_list|,
name|String
name|mqServer
parameter_list|,
name|boolean
name|isTopic
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|OPENJMS_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
operator|||
name|MANTARAY_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
if|if
condition|(
name|isTransacted
condition|)
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
name|TopicSession
name|session
init|=
operator|(
operator|(
name|TopicConnection
operator|)
name|connection
operator|)
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
return|;
block|}
else|else
block|{
name|QueueSession
name|session
init|=
operator|(
operator|(
name|QueueConnection
operator|)
name|connection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
name|TopicSession
name|session
init|=
operator|(
operator|(
name|TopicConnection
operator|)
name|connection
operator|)
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
return|;
block|}
else|else
block|{
name|QueueSession
name|session
init|=
operator|(
operator|(
name|QueueConnection
operator|)
name|connection
operator|)
operator|.
name|createQueueSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Session
operator|)
name|session
operator|)
return|;
block|}
block|}
block|}
else|else
block|{
comment|// check when to use Transacted or Non-Transacted type.
if|if
condition|(
name|isTransacted
condition|)
block|{
return|return
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Dynamically creates a ConnectionFactory object depending on the MQ Factory class.      *      * @param url              - location of the broker.      * @param connFactoryClass - fully qualified name of connection factory to be initialized.      * @return      * @throws JMSException      */
specifier|public
specifier|static
name|Connection
name|createConnectionFactory
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|connFactoryClass
parameter_list|)
throws|throws
name|JMSException
block|{
name|Class
name|classObject
decl_stmt|;
name|Constructor
name|constructor
decl_stmt|;
name|Class
index|[]
name|classParameter
init|=
block|{
name|url
operator|.
name|getClass
argument_list|()
block|}
decl_stmt|;
name|Object
index|[]
name|constArgs
init|=
block|{
name|url
block|}
decl_stmt|;
try|try
block|{
name|classObject
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|connFactoryClass
argument_list|)
expr_stmt|;
name|constructor
operator|=
name|classObject
operator|.
name|getConstructor
argument_list|(
name|classParameter
argument_list|)
expr_stmt|;
name|ConnectionFactory
name|factory
init|=
operator|(
name|ConnectionFactory
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
name|constArgs
argument_list|)
decl_stmt|;
return|return
name|factory
operator|.
name|createConnection
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unable to find class "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"No such getConstructor(Class[] class) method found "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unable to instantiate class "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unable to instantiate class "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unable to instantiate class "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates an InitialContext object which contains the information of the broker.      * This is used if the broker uses JNDI.      *      * @param url - location of the broker.      * @return      * @throws JMSException      */
specifier|public
specifier|static
name|InitialContext
name|getInitialContext
parameter_list|(
name|String
name|url
parameter_list|,
name|String
name|mqServer
parameter_list|)
throws|throws
name|JMSException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|JBOSSMQ_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Context oject for JBOSS MQ server
name|properties
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|NAMING_CONTEXT
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Context
operator|.
name|URL_PKG_PREFIXES
argument_list|,
name|JNP_INTERFACES
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|OPENJMS_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Context object for OPENJMS server
name|properties
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|OPENJMS_NAMING_CONTEXT
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JORAM_SERVER
operator|.
name|equals
argument_list|(
name|mqServer
argument_list|)
condition|)
block|{
comment|//Creates a Context object for JORAM server
comment|//The JNDI's host is set to be the same as with the Joram broker
name|properties
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|JORAM_NAMING_CONTEXT
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|NAMING_HOST
argument_list|,
name|getHost
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|NAMING_PORT
argument_list|,
name|JORAM_NAMING_PORT
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|InitialContext
argument_list|(
name|properties
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Error creating InitialContext "
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns the host part of the URL.      *      * @param url - location of the broker.      * @return host      */
specifier|private
specifier|static
name|String
name|getHost
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
name|url
operator|.
name|substring
argument_list|(
name|url
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|,
name|url
operator|.
name|lastIndexOf
argument_list|(
literal|":"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

