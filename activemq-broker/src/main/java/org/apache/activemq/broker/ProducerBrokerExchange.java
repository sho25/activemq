begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Holds internal state in the broker for a MessageProducer  */
end_comment

begin_class
specifier|public
class|class
name|ProducerBrokerExchange
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProducerBrokerExchange
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ConnectionContext
name|connectionContext
decl_stmt|;
specifier|private
name|Destination
name|regionDestination
decl_stmt|;
specifier|private
name|Region
name|region
decl_stmt|;
specifier|private
name|ProducerState
name|producerState
decl_stmt|;
specifier|private
name|boolean
name|mutable
init|=
literal|true
decl_stmt|;
specifier|private
name|AtomicLong
name|lastSendSequenceNumber
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|auditProducerSequenceIds
decl_stmt|;
specifier|private
name|boolean
name|isNetworkProducer
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|final
name|FlowControlInfo
name|flowControlInfo
init|=
operator|new
name|FlowControlInfo
argument_list|()
decl_stmt|;
specifier|public
name|ProducerBrokerExchange
parameter_list|()
block|{     }
specifier|public
name|ProducerBrokerExchange
name|copy
parameter_list|()
block|{
name|ProducerBrokerExchange
name|rc
init|=
operator|new
name|ProducerBrokerExchange
argument_list|()
decl_stmt|;
name|rc
operator|.
name|connectionContext
operator|=
name|connectionContext
operator|.
name|copy
argument_list|()
expr_stmt|;
name|rc
operator|.
name|regionDestination
operator|=
name|regionDestination
expr_stmt|;
name|rc
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|rc
operator|.
name|producerState
operator|=
name|producerState
expr_stmt|;
name|rc
operator|.
name|mutable
operator|=
name|mutable
expr_stmt|;
return|return
name|rc
return|;
block|}
comment|/**      * @return the connectionContext      */
specifier|public
name|ConnectionContext
name|getConnectionContext
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectionContext
return|;
block|}
comment|/**      * @param connectionContext the connectionContext to set      */
specifier|public
name|void
name|setConnectionContext
parameter_list|(
name|ConnectionContext
name|connectionContext
parameter_list|)
block|{
name|this
operator|.
name|connectionContext
operator|=
name|connectionContext
expr_stmt|;
block|}
comment|/**      * @return the mutable      */
specifier|public
name|boolean
name|isMutable
parameter_list|()
block|{
return|return
name|this
operator|.
name|mutable
return|;
block|}
comment|/**      * @param mutable the mutable to set      */
specifier|public
name|void
name|setMutable
parameter_list|(
name|boolean
name|mutable
parameter_list|)
block|{
name|this
operator|.
name|mutable
operator|=
name|mutable
expr_stmt|;
block|}
comment|/**      * @return the regionDestination      */
specifier|public
name|Destination
name|getRegionDestination
parameter_list|()
block|{
return|return
name|this
operator|.
name|regionDestination
return|;
block|}
comment|/**      * @param regionDestination the regionDestination to set      */
specifier|public
name|void
name|setRegionDestination
parameter_list|(
name|Destination
name|regionDestination
parameter_list|)
block|{
name|this
operator|.
name|regionDestination
operator|=
name|regionDestination
expr_stmt|;
block|}
comment|/**      * @return the region      */
specifier|public
name|Region
name|getRegion
parameter_list|()
block|{
return|return
name|this
operator|.
name|region
return|;
block|}
comment|/**      * @param region the region to set      */
specifier|public
name|void
name|setRegion
parameter_list|(
name|Region
name|region
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
block|}
comment|/**      * @return the producerState      */
specifier|public
name|ProducerState
name|getProducerState
parameter_list|()
block|{
return|return
name|this
operator|.
name|producerState
return|;
block|}
comment|/**      * @param producerState the producerState to set      */
specifier|public
name|void
name|setProducerState
parameter_list|(
name|ProducerState
name|producerState
parameter_list|)
block|{
name|this
operator|.
name|producerState
operator|=
name|producerState
expr_stmt|;
block|}
comment|/**      * Enforce duplicate suppression using info from persistence adapter      *      * @return false if message should be ignored as a duplicate      */
specifier|public
name|boolean
name|canDispatch
parameter_list|(
name|Message
name|messageSend
parameter_list|)
block|{
name|boolean
name|canDispatch
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|auditProducerSequenceIds
operator|&&
name|messageSend
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
specifier|final
name|long
name|producerSequenceId
init|=
name|messageSend
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNetworkProducer
condition|)
block|{
comment|//  messages are multiplexed on this producer so we need to query the persistenceAdapter
name|long
name|lastStoredForMessageProducer
init|=
name|getStoredSequenceIdForMessage
argument_list|(
name|messageSend
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|producerSequenceId
operator|<=
name|lastStoredForMessageProducer
condition|)
block|{
name|canDispatch
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"suppressing duplicate message send [{}] from network producer with producerSequence [{}] less than last stored: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|?
name|messageSend
else|:
name|messageSend
operator|.
name|getMessageId
argument_list|()
operator|)
block|,
name|producerSequenceId
block|,
name|lastStoredForMessageProducer
block|}
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|producerSequenceId
operator|<=
name|lastSendSequenceNumber
operator|.
name|get
argument_list|()
condition|)
block|{
name|canDispatch
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|messageSend
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"suppressing duplicated message send [{}] with producerSequenceId [{}]<= last stored: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|?
name|messageSend
else|:
name|messageSend
operator|.
name|getMessageId
argument_list|()
operator|)
block|,
name|producerSequenceId
block|,
name|lastSendSequenceNumber
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"suppressing duplicated message send [{}] with producerSequenceId [{}]<= last stored: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|?
name|messageSend
else|:
name|messageSend
operator|.
name|getMessageId
argument_list|()
operator|)
block|,
name|producerSequenceId
block|,
name|lastSendSequenceNumber
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// track current so we can suppress duplicates later in the stream
name|lastSendSequenceNumber
operator|.
name|set
argument_list|(
name|producerSequenceId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|canDispatch
return|;
block|}
specifier|private
name|long
name|getStoredSequenceIdForMessage
parameter_list|(
name|MessageId
name|messageId
parameter_list|)
block|{
try|try
block|{
return|return
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|getLastProducerSequenceId
argument_list|(
name|messageId
operator|.
name|getProducerId
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to determine last producer sequence id for: {}"
argument_list|,
name|messageId
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setLastStoredSequenceId
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|auditProducerSequenceIds
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|connectionContext
operator|.
name|isNetworkConnection
argument_list|()
condition|)
block|{
name|brokerService
operator|=
name|connectionContext
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerService
argument_list|()
expr_stmt|;
name|isNetworkProducer
operator|=
literal|true
expr_stmt|;
block|}
name|lastSendSequenceNumber
operator|.
name|set
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"last stored sequence id set: {}"
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incrementSend
parameter_list|()
block|{
name|flowControlInfo
operator|.
name|incrementSend
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|blockingOnFlowControl
parameter_list|(
name|boolean
name|blockingOnFlowControl
parameter_list|)
block|{
name|flowControlInfo
operator|.
name|setBlockingOnFlowControl
argument_list|(
name|blockingOnFlowControl
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incrementTimeBlocked
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|long
name|timeBlocked
parameter_list|)
block|{
name|flowControlInfo
operator|.
name|incrementTimeBlocked
argument_list|(
name|timeBlocked
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBlockedForFlowControl
parameter_list|()
block|{
return|return
name|flowControlInfo
operator|.
name|isBlockingOnFlowControl
argument_list|()
return|;
block|}
specifier|public
name|void
name|resetFlowControl
parameter_list|()
block|{
name|flowControlInfo
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalTimeBlocked
parameter_list|()
block|{
return|return
name|flowControlInfo
operator|.
name|getTotalTimeBlocked
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPercentageBlocked
parameter_list|()
block|{
name|double
name|value
init|=
name|flowControlInfo
operator|.
name|getSendsBlocked
argument_list|()
operator|/
name|flowControlInfo
operator|.
name|getTotalSends
argument_list|()
decl_stmt|;
return|return
operator|(
name|int
operator|)
name|value
operator|*
literal|100
return|;
block|}
specifier|public
specifier|static
class|class
name|FlowControlInfo
block|{
specifier|private
name|AtomicBoolean
name|blockingOnFlowControl
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|totalSends
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|sendsBlocked
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|AtomicLong
name|totalTimeBlocked
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
name|boolean
name|isBlockingOnFlowControl
parameter_list|()
block|{
return|return
name|blockingOnFlowControl
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setBlockingOnFlowControl
parameter_list|(
name|boolean
name|blockingOnFlowControl
parameter_list|)
block|{
name|this
operator|.
name|blockingOnFlowControl
operator|.
name|set
argument_list|(
name|blockingOnFlowControl
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockingOnFlowControl
condition|)
block|{
name|incrementSendBlocked
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getTotalSends
parameter_list|()
block|{
return|return
name|totalSends
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|incrementSend
parameter_list|()
block|{
name|this
operator|.
name|totalSends
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getSendsBlocked
parameter_list|()
block|{
return|return
name|sendsBlocked
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|incrementSendBlocked
parameter_list|()
block|{
name|this
operator|.
name|sendsBlocked
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getTotalTimeBlocked
parameter_list|()
block|{
return|return
name|totalTimeBlocked
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|incrementTimeBlocked
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|this
operator|.
name|totalTimeBlocked
operator|.
name|addAndGet
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|blockingOnFlowControl
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|totalSends
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sendsBlocked
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|totalTimeBlocked
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

