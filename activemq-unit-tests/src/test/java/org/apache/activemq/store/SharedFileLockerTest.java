begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|LockableServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Locker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LockFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SharedFileLockerTest
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|slf4j
operator|.
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SharedFileLockerTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|testFolder
decl_stmt|;
specifier|public
name|SharedFileLockerTest
parameter_list|()
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|IOHelper
operator|.
name|getDefaultDataDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|.
name|mkdir
argument_list|()
expr_stmt|;
comment|// TemporaryFolder will make sure the files are removed after the test is done
name|testFolder
operator|=
operator|new
name|TemporaryFolder
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStopNoStart
parameter_list|()
throws|throws
name|Exception
block|{
name|SharedFileLocker
name|locker1
init|=
operator|new
name|SharedFileLocker
argument_list|()
decl_stmt|;
name|locker1
operator|.
name|setDirectory
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|locker1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Increase the number of iterations if you are debugging races
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|internalLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogging
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using a bigger wait here
comment|// to make sure we won't log any extra info
name|internalLoop
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|internalLoop
parameter_list|(
name|long
name|timewait
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|logCounts
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DefaultTestAppender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|==
name|Level
operator|.
name|INFO
condition|)
block|{
name|logCounts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|errors
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
literal|null
decl_stmt|;
name|SharedFileLocker
name|locker1
init|=
operator|new
name|SharedFileLocker
argument_list|()
decl_stmt|;
name|locker1
operator|.
name|setDirectory
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SharedFileLocker
name|locker2
init|=
operator|new
name|SharedFileLocker
argument_list|()
decl_stmt|;
name|locker2
operator|.
name|setLockAcquireSleepInterval
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|locker2
operator|.
name|setDirectory
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|locker1
operator|.
name|doStart
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|locker1
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|=
operator|new
name|Thread
argument_list|(
literal|"Locker Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|locker2
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|errors
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// I need to make sure the info was already logged
comment|// but I don't want to have an unecessary wait here,
comment|// as I want the test to run as fast as possible
block|{
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|5000
decl_stmt|;
while|while
condition|(
name|logCounts
operator|.
name|get
argument_list|()
operator|<
literal|1
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|timewait
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timewait
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|thread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|locker1
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// 10 seconds here is an eternity, but it should only take milliseconds
name|thread
operator|.
name|join
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Extra logs in place"
argument_list|,
literal|1
argument_list|,
name|logCounts
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|5000
decl_stmt|;
while|while
condition|(
name|timeout
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|&&
operator|!
name|locker2
operator|.
name|keepAlive
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|locker2
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|locker2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errors
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
comment|// to make sure we won't leak threads if the test ever failed for any reason
name|thread
operator|.
name|join
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|thread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|thread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|File
name|lockFile
init|=
operator|new
name|File
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"lock"
argument_list|)
decl_stmt|;
name|lockFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|verifyLockAcquireWaitsForLockDrop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|logCounts
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DefaultTestAppender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|logCounts
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Logger
name|sharedFileLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SharedFileLocker
operator|.
name|class
argument_list|)
decl_stmt|;
name|sharedFileLogger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|LockableServiceSupport
name|config
init|=
operator|new
name|LockableServiceSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getLockKeepAlivePeriod
parameter_list|()
block|{
return|return
literal|500
return|;
block|}
annotation|@
name|Override
specifier|public
name|Locker
name|createDefaultLocker
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|Exception
block|{             }
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{             }
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{             }
block|}
decl_stmt|;
specifier|final
name|SharedFileLocker
name|underTest
init|=
operator|new
name|SharedFileLocker
argument_list|()
decl_stmt|;
name|underTest
operator|.
name|setDirectory
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setLockAcquireSleepInterval
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|underTest
operator|.
name|setLockable
argument_list|(
name|config
argument_list|)
expr_stmt|;
comment|// get the in jvm lock
name|File
name|lockFile
init|=
operator|new
name|File
argument_list|(
name|testFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"lock"
argument_list|)
decl_stmt|;
name|String
name|jvmProp
init|=
name|LockFile
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".lock."
operator|+
name|lockFile
operator|.
name|getCanonicalPath
argument_list|()
decl_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|jvmProp
argument_list|,
name|jvmProp
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|locked
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AtomicLong
name|acquireTime
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0l
argument_list|)
decl_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|underTest
operator|.
name|start
argument_list|()
expr_stmt|;
name|acquireTime
operator|.
name|set
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|locked
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"locker failed to obtain lock"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|logCounts
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// release vm lock
name|long
name|releaseTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|jvmProp
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"locker got lock"
argument_list|,
name|locked
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify delay in start
name|LOG
operator|.
name|info
argument_list|(
literal|"ReleaseTime: "
operator|+
name|releaseTime
operator|+
literal|", AcquireTime:"
operator|+
name|acquireTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"acquire delayed for keepAlive: "
operator|+
name|config
operator|.
name|getLockKeepAlivePeriod
argument_list|()
argument_list|,
name|acquireTime
operator|.
name|get
argument_list|()
operator|>=
name|releaseTime
operator|+
name|config
operator|.
name|getLockKeepAlivePeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|underTest
operator|.
name|stop
argument_list|()
expr_stmt|;
name|lockFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|sharedFileLogger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

