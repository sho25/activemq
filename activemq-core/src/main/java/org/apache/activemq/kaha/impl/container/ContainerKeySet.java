begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|container
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|IndexLinkedList
import|;
end_import

begin_comment
comment|/** * A Set of keys for the container *  * @version $Revision: 1.2 $ */
end_comment

begin_class
specifier|public
class|class
name|ContainerKeySet
extends|extends
name|ContainerCollectionSupport
implements|implements
name|Set
block|{
name|ContainerKeySet
parameter_list|(
name|MapContainerImpl
name|container
parameter_list|)
block|{
name|super
argument_list|(
name|container
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|container
operator|.
name|containsKey
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|ContainerKeySetIterator
argument_list|(
name|container
argument_list|)
return|;
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|IndexItem
name|item
init|=
name|container
operator|.
name|getInternalList
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|item
operator|=
name|container
operator|.
name|getInternalList
argument_list|()
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|container
operator|.
name|getKey
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|()
return|;
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|(
name|Object
index|[]
name|a
parameter_list|)
block|{
name|List
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|IndexItem
name|item
init|=
name|container
operator|.
name|getInternalList
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|item
operator|=
name|container
operator|.
name|getInternalList
argument_list|()
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|container
operator|.
name|getKey
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot add here"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|container
operator|.
name|remove
argument_list|(
name|o
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|c
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|result
operator|&=
name|container
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|)
condition|)
block|{
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot add here"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|List
name|tmpList
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|tmpList
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|tmpList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|remove
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|tmpList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
name|c
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|remove
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|(
literal|32
argument_list|)
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"ContainerKeySet["
argument_list|)
expr_stmt|;
name|IndexItem
name|item
init|=
name|container
operator|.
name|getInternalList
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|item
operator|=
name|container
operator|.
name|getInternalList
argument_list|()
operator|.
name|getNextEntry
argument_list|(
name|item
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|container
operator|.
name|getKey
argument_list|(
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

