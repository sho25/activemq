begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|FunctionCallExpression
import|;
end_import

begin_comment
comment|/**  * Registry of built-in functions.  Add built-in functions to this list to make sure they are registered at startup.  *<p/>  * Custom add-ons that are not built-in to the core ActiveMQ should not be listed here.  * Use FunctionCallExpression.registerFunction() directly.  */
end_comment

begin_class
specifier|public
class|class
name|BuiltinFunctionRegistry
block|{
specifier|public
specifier|static
name|void
name|register
parameter_list|()
block|{
name|FunctionCallExpression
operator|.
name|registerFunction
argument_list|(
literal|"INLIST"
argument_list|,
operator|new
name|inListFunction
argument_list|()
argument_list|)
expr_stmt|;
name|FunctionCallExpression
operator|.
name|registerFunction
argument_list|(
literal|"MAKELIST"
argument_list|,
operator|new
name|makeListFunction
argument_list|()
argument_list|)
expr_stmt|;
name|FunctionCallExpression
operator|.
name|registerFunction
argument_list|(
literal|"REGEX"
argument_list|,
operator|new
name|regexMatchFunction
argument_list|()
argument_list|)
expr_stmt|;
name|FunctionCallExpression
operator|.
name|registerFunction
argument_list|(
literal|"REPLACE"
argument_list|,
operator|new
name|replaceFunction
argument_list|()
argument_list|)
expr_stmt|;
name|FunctionCallExpression
operator|.
name|registerFunction
argument_list|(
literal|"SPLIT"
argument_list|,
operator|new
name|splitFunction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

