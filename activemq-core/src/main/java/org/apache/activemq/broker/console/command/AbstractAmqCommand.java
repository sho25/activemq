begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
operator|.
name|formatter
operator|.
name|GlobalWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAmqCommand
extends|extends
name|AbstractCommand
block|{
specifier|private
name|URI
name|brokerUrl
decl_stmt|;
specifier|private
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|private
specifier|final
name|List
name|connections
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      * Establishes a connection to the remote broker specified by the broker url.      * @return - connection to the broker      * @throws JMSException      */
specifier|protected
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getBrokerUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|GlobalWriter
operator|.
name|printException
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"You must specify a broker URL to connect to using the --amqurl option."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|getBrokerUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Connection
name|conn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
return|return
name|conn
return|;
block|}
comment|/**      * Establishes a connection to the remote broker specified by the broker url.      * @param username - username for the connection      * @param password - password for the connection      * @return - connection to the broker      * @throws JMSException      */
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|getBrokerUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|GlobalWriter
operator|.
name|printException
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"You must specify a broker URL to connect to using the --amqurl option."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|getBrokerUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Connection
name|conn
init|=
name|factory
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|conn
return|;
block|}
comment|/**      * Close all created connections.      */
specifier|protected
name|void
name|closeAllConnections
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|connections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
operator|(
operator|(
name|Connection
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{ }
block|}
name|connections
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Handle the --amqurl option.      * @param token - current option      * @param tokens - succeeding list of arguments      * @throws Exception      */
specifier|protected
name|void
name|handleOption
parameter_list|(
name|String
name|token
parameter_list|,
name|List
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Try to handle the options first
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--amqurl"
argument_list|)
condition|)
block|{
comment|// If no broker url specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|GlobalWriter
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Broker URL not specified."
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// If broker url already specified
if|if
condition|(
name|getBrokerUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|GlobalWriter
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple broker URL cannot be specified."
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|strBrokerUrl
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|setBrokerUrl
argument_list|(
operator|new
name|URI
argument_list|(
name|strBrokerUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|GlobalWriter
operator|.
name|printException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
comment|// Let the super class handle the option
name|super
operator|.
name|handleOption
argument_list|(
name|token
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Set the broker url.      * @param brokerUrl - new broker url      */
specifier|protected
name|void
name|setBrokerUrl
parameter_list|(
name|URI
name|brokerUrl
parameter_list|)
block|{
name|this
operator|.
name|brokerUrl
operator|=
name|brokerUrl
expr_stmt|;
block|}
comment|/**      * Set the broker url.      * @param address - address of the new broker url      * @throws URISyntaxException      */
specifier|protected
name|void
name|setBrokerUrl
parameter_list|(
name|String
name|address
parameter_list|)
throws|throws
name|URISyntaxException
block|{
name|this
operator|.
name|brokerUrl
operator|=
operator|new
name|URI
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the current broker url.      * @return current broker url      */
specifier|protected
name|URI
name|getBrokerUrl
parameter_list|()
block|{
return|return
name|brokerUrl
return|;
block|}
block|}
end_class

end_unit

