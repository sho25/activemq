begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStoreSubscriptionStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This test checks that pending message metrics work properly with KahaDB  *  * AMQ-5923, AMQ-6375  *  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|KahaDBPendingMessageCursorTest
extends|extends
name|AbstractPendingMessageCursorTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|KahaDBPendingMessageCursorTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"prioritizedMessages={0},enableSubscriptionStatistics={1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// use priority messages
block|{
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|true
block|,
literal|false
block|}
block|,
comment|// don't use priority messages
block|{
literal|false
block|,
literal|true
block|}
block|,
block|{
literal|false
block|,
literal|false
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dataFileDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * @param prioritizedMessages      */
specifier|public
name|KahaDBPendingMessageCursorTest
parameter_list|(
specifier|final
name|boolean
name|prioritizedMessages
parameter_list|,
specifier|final
name|boolean
name|enableSubscriptionStatistics
parameter_list|)
block|{
name|super
argument_list|(
name|prioritizedMessages
argument_list|)
expr_stmt|;
name|this
operator|.
name|enableSubscriptionStatistics
operator|=
name|enableSubscriptionStatistics
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUpBroker
parameter_list|(
name|boolean
name|clearDataDir
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|clearDataDir
operator|&&
name|dataFileDir
operator|.
name|getRoot
argument_list|()
operator|.
name|exists
argument_list|()
condition|)
name|FileUtils
operator|.
name|cleanDirectory
argument_list|(
name|dataFileDir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUpBroker
argument_list|(
name|clearDataDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initPersistence
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|IOException
block|{
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|persistenceAdapter
operator|.
name|setDirectory
argument_list|(
name|dataFileDir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|persistenceAdapter
operator|.
name|setEnableSubscriptionStatistics
argument_list|(
name|enableSubscriptionStatistics
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the the counter restores size and works after restart and more      * messages are published      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testDurableMessageSizeAfterRestartAndPublish
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Topic
name|topic
init|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
comment|// verify the count and size
name|verifyPendingStats
argument_list|(
name|topic
argument_list|,
name|subKey
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|topic
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//should be equal in this case
name|long
name|beforeRestartSize
init|=
name|topic
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|subKey
argument_list|)
operator|.
name|getPendingMessageSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|beforeRestartSize
argument_list|,
name|topic
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageStoreStatistics
argument_list|()
operator|.
name|getMessageSize
argument_list|()
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// stop, restart broker and publish more messages
name|stopBroker
argument_list|()
expr_stmt|;
name|this
operator|.
name|setUpBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//verify that after restart the size is the same as before restart on recovery
name|topic
operator|=
operator|(
name|Topic
operator|)
name|getBroker
argument_list|()
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|defaultTopicName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeRestartSize
argument_list|,
name|topic
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|subKey
argument_list|)
operator|.
name|getPendingMessageSize
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|topic
operator|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
comment|// verify the count and size
name|verifyPendingStats
argument_list|(
name|topic
argument_list|,
name|subKey
argument_list|,
literal|400
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|topic
argument_list|,
literal|400
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMessageSizeTwoDurablesPartialConsumption
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|subKey2
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|,
literal|"sub2"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
comment|//verify the count and size - durable is offline so all 200 should be pending since none are in prefetch
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//consume all messages
name|consumeDurableTestMessages
argument_list|(
name|connection
argument_list|,
literal|"sub1"
argument_list|,
literal|50
argument_list|,
name|publishedMessageSize
argument_list|)
expr_stmt|;
comment|//150 should be left
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|150
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//200 should be left
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey2
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test that the the counter restores size and works after restart and more      * messages are published      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testNonPersistentDurableMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Topic
name|topic
init|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
comment|// verify the count and size
name|verifyPendingStats
argument_list|(
name|topic
argument_list|,
name|subKey
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|topic
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the subscription counters are properly set when enabled      * and not set when disabled      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testEnabledSubscriptionStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|subKey2
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|,
literal|"sub2"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
name|TopicMessageStore
name|store
init|=
operator|(
name|TopicMessageStore
operator|)
name|dest
operator|.
name|getMessageStore
argument_list|()
decl_stmt|;
name|MessageStoreSubscriptionStatistics
name|stats
init|=
name|store
operator|.
name|getMessageStoreSubStatistics
argument_list|()
decl_stmt|;
if|if
condition|(
name|enableSubscriptionStatistics
condition|)
block|{
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageCount
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
operator|==
literal|200
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageCount
argument_list|(
name|subKey2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
operator|==
literal|200
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getMessageCount
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getMessageCount
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
operator|+
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getMessageSize
argument_list|()
operator|.
name|getTotalSize
argument_list|()
argument_list|,
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
operator|+
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//Delete second subscription and verify stats are updated accordingly
name|store
operator|.
name|deleteSubscription
argument_list|(
name|subKey2
operator|.
name|getClientId
argument_list|()
argument_list|,
name|subKey2
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getMessageCount
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
operator|.
name|getMessageCount
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getMessageSize
argument_list|()
operator|.
name|getTotalSize
argument_list|()
argument_list|,
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageCount
argument_list|(
name|subKey2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageCount
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageCount
argument_list|(
name|subKey2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getCount
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|stats
operator|.
name|getMessageSize
argument_list|(
name|subKey2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|getTotalSize
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMessageCount
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|getMessageSize
argument_list|()
operator|.
name|getTotalSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateMessageSubSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|TopicSession
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|dest
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|defaultTopicName
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"sub1"
argument_list|)
expr_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"sub2"
argument_list|)
expr_stmt|;
name|MessageProducer
name|prod
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"SmallMessage"
argument_list|)
expr_stmt|;
name|prod
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|subKey2
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
specifier|final
name|Topic
name|topic
init|=
operator|(
name|Topic
operator|)
name|getBroker
argument_list|()
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|defaultTopicName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DurableTopicSubscription
name|sub
init|=
name|topic
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|subKey
argument_list|)
decl_stmt|;
specifier|final
name|DurableTopicSubscription
name|sub2
init|=
name|topic
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|subKey2
argument_list|)
decl_stmt|;
name|long
name|sizeBeforeUpdate
init|=
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
decl_stmt|;
name|message
operator|=
operator|(
name|ActiveMQTextMessage
operator|)
name|topic
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessage
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"LargerMessageLargerMessage"
argument_list|)
expr_stmt|;
comment|//update the message
name|topic
operator|.
name|getMessageStore
argument_list|()
operator|.
name|updateMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|//should be at least 10 bytes bigger and match the store size
name|assertTrue
argument_list|(
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
operator|>
name|sizeBeforeUpdate
operator|+
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
argument_list|,
name|topic
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
argument_list|,
name|sub2
operator|.
name|getPendingMessageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateMessageSubSizeAfterConsume
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|TopicSession
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|dest
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|defaultTopicName
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"sub1"
argument_list|)
expr_stmt|;
name|TopicSubscriber
name|subscriber2
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|dest
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|MessageProducer
name|prod
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"SmallMessage"
argument_list|)
expr_stmt|;
name|ActiveMQTextMessage
name|message2
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message2
operator|.
name|setText
argument_list|(
literal|"SmallMessage2"
argument_list|)
expr_stmt|;
name|prod
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|prod
operator|.
name|send
argument_list|(
name|message2
argument_list|)
expr_stmt|;
comment|//Receive first message for sub 2 and wait for stats to update
name|subscriber2
operator|.
name|receive
argument_list|()
expr_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|subKey2
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
specifier|final
name|Topic
name|topic
init|=
operator|(
name|Topic
operator|)
name|getBroker
argument_list|()
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|defaultTopicName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DurableTopicSubscription
name|sub
init|=
name|topic
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|subKey
argument_list|)
decl_stmt|;
specifier|final
name|DurableTopicSubscription
name|sub2
init|=
name|topic
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|subKey2
argument_list|)
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
operator|>
name|sub2
operator|.
name|getPendingMessageSize
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|long
name|sizeBeforeUpdate
init|=
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
decl_stmt|;
name|long
name|sizeBeforeUpdate2
init|=
name|sub2
operator|.
name|getPendingMessageSize
argument_list|()
decl_stmt|;
comment|//update message 2
name|message
operator|=
operator|(
name|ActiveMQTextMessage
operator|)
name|topic
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessage
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setText
argument_list|(
literal|"LargerMessageLargerMessage"
argument_list|)
expr_stmt|;
comment|//update the message
name|topic
operator|.
name|getMessageStore
argument_list|()
operator|.
name|updateMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|//should be at least 10 bytes bigger and match the store size
name|assertTrue
argument_list|(
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
operator|>
name|sizeBeforeUpdate
operator|+
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
argument_list|,
name|topic
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//Sub2 only has 1 message so should be less than sub, verify that the update message
comment|//didn't update the stats of sub2 and sub1 should be over twice as large since the
comment|//updated message is bigger
name|assertTrue
argument_list|(
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
operator|>
literal|2
operator|*
name|sub2
operator|.
name|getPendingMessageSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sizeBeforeUpdate2
argument_list|,
name|sub2
operator|.
name|getPendingMessageSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

