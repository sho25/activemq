begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|leveldb
operator|.
name|LevelDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
operator|.
name|NIOTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
operator|.
name|NIOTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  * @author x22koe  */
end_comment

begin_class
specifier|public
class|class
name|CheckDuplicateMessagesOnDuplexTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CheckDuplicateMessagesOnDuplexTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|localBroker
decl_stmt|;
specifier|private
name|BrokerService
name|remoteBroker
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|localFactory
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|remoteFactory
decl_stmt|;
specifier|private
name|Session
name|localSession
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|private
name|Session
name|remoteSession
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|private
name|Connection
name|remoteConnection
decl_stmt|;
specifier|private
name|Connection
name|localConnection
decl_stmt|;
specifier|private
name|DebugTransportFilter
name|debugTransportFilter
decl_stmt|;
specifier|private
name|boolean
name|useLevelDB
init|=
literal|false
decl_stmt|;
specifier|public
name|CheckDuplicateMessagesOnDuplexTest
parameter_list|()
block|{     }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpClass
parameter_list|()
block|{     }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
block|{     }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{     }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testConnectionLossBehaviorBeforeAckIsSent
parameter_list|()
throws|throws
name|Exception
block|{
name|createBrokers
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|startBrokers
argument_list|()
expr_stmt|;
name|openConnections
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\n\n==============================================\nsend hello1\n"
argument_list|)
expr_stmt|;
comment|// simulate network failure between REMOTE and LOCAL just before the reception response is sent back to REMOTE
name|debugTransportFilter
operator|.
name|closeOnResponse
operator|=
literal|true
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|remoteSession
operator|.
name|createTextMessage
argument_list|(
literal|"hello1"
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|30000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected hello1"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello1"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|msg
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\n\n------------------------------------------\nsend hello2\n"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|remoteSession
operator|.
name|createTextMessage
argument_list|(
literal|"hello2"
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expected hello2"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello2"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|msg
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|closeLocalConnection
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\n\n------------------------------------------\nsend hello3\n"
argument_list|)
expr_stmt|;
name|openLocalConnection
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|remoteSession
operator|.
name|createTextMessage
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expected hello3"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|msg
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\n\n==============================================\n\n"
argument_list|)
expr_stmt|;
name|closeConnections
argument_list|()
expr_stmt|;
name|stopBrokers
argument_list|()
expr_stmt|;
comment|// restart the local broker, which should be empty
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"\n\n##############################################\n\n"
argument_list|)
expr_stmt|;
name|createLocalBroker
argument_list|()
expr_stmt|;
name|startLocalBroker
argument_list|()
expr_stmt|;
name|openLocalConnection
argument_list|()
expr_stmt|;
comment|// this should not return the "hello1" message
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|closeLocalConnection
argument_list|()
expr_stmt|;
name|stopLocalBroker
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|createLocalBroker
argument_list|()
expr_stmt|;
name|createRemoteBroker
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createLocalBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|localBroker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|setBrokerName
argument_list|(
literal|"LOCAL"
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setSchedulePeriodForDestinationPurge
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|ManagementContext
name|managementContext
init|=
operator|new
name|ManagementContext
argument_list|()
decl_stmt|;
name|managementContext
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setManagementContext
argument_list|(
name|managementContext
argument_list|)
expr_stmt|;
name|PersistenceAdapter
name|persistenceAdapter
init|=
name|persistanceAdapterFactory
argument_list|(
literal|"target/local"
argument_list|)
decl_stmt|;
name|localBroker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|transportConnectors
init|=
operator|new
name|ArrayList
argument_list|<
name|TransportConnector
argument_list|>
argument_list|()
decl_stmt|;
name|DebugTransportFactory
name|tf
init|=
operator|new
name|DebugTransportFactory
argument_list|()
decl_stmt|;
name|TransportServer
name|transport
init|=
name|tf
operator|.
name|doBind
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"nio://127.0.0.1:23539"
argument_list|)
argument_list|)
decl_stmt|;
name|TransportConnector
name|transportConnector
init|=
operator|new
name|TransportConnector
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|transportConnector
operator|.
name|setName
argument_list|(
literal|"tc"
argument_list|)
expr_stmt|;
name|transportConnector
operator|.
name|setAuditNetworkProducers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|transportConnectors
operator|.
name|add
argument_list|(
name|transportConnector
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setTransportConnectors
argument_list|(
name|transportConnectors
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createRemoteBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|remoteBroker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|setBrokerName
argument_list|(
literal|"REMOTE"
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setSchedulePeriodForDestinationPurge
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|ManagementContext
name|managementContext
init|=
operator|new
name|ManagementContext
argument_list|()
decl_stmt|;
name|managementContext
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setManagementContext
argument_list|(
name|managementContext
argument_list|)
expr_stmt|;
name|PersistenceAdapter
name|persistenceAdapter
init|=
name|persistanceAdapterFactory
argument_list|(
literal|"target/remote"
argument_list|)
decl_stmt|;
name|remoteBroker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NetworkConnector
argument_list|>
name|networkConnectors
init|=
operator|new
name|ArrayList
argument_list|<
name|NetworkConnector
argument_list|>
argument_list|()
decl_stmt|;
name|DiscoveryNetworkConnector
name|networkConnector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|()
decl_stmt|;
name|networkConnector
operator|.
name|setName
argument_list|(
literal|"to local"
argument_list|)
expr_stmt|;
comment|// set maxInactivityDuration to 0, otherwise the broker restarts while you are in the debugger
name|networkConnector
operator|.
name|setUri
argument_list|(
name|URI
operator|.
name|create
argument_list|(
literal|"static://(tcp://127.0.0.1:23539?wireFormat.maxInactivityDuration=0)"
argument_list|)
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//networkConnector.setNetworkTTL(5);
comment|//networkConnector.setDynamicOnly(true);
name|networkConnector
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setPrefetchSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setCheckDuplicateMessagesOnDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkConnectors
operator|.
name|add
argument_list|(
name|networkConnector
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setNetworkConnectors
argument_list|(
name|networkConnectors
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|startLocalBroker
argument_list|()
expr_stmt|;
name|startRemoteBroker
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|startLocalBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|startRemoteBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|remoteBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|openConnections
parameter_list|()
throws|throws
name|JMSException
block|{
name|openLocalConnection
argument_list|()
expr_stmt|;
name|openRemoteConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|openLocalConnection
parameter_list|()
throws|throws
name|JMSException
block|{
name|localFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|localBroker
operator|.
name|getVmConnectorURI
argument_list|()
argument_list|)
expr_stmt|;
comment|//localFactory.setSendAcksAsync(false);
name|localConnection
operator|=
name|localFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|localConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|localSession
operator|=
name|localConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|localSession
operator|.
name|createConsumer
argument_list|(
name|localSession
operator|.
name|createQueue
argument_list|(
literal|"testqueue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openRemoteConnection
parameter_list|()
throws|throws
name|JMSException
block|{
name|remoteFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|remoteBroker
operator|.
name|getVmConnectorURI
argument_list|()
argument_list|)
expr_stmt|;
comment|//remoteFactory.setSendAcksAsync(false);
name|remoteConnection
operator|=
name|remoteFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|remoteConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteSession
operator|=
name|remoteConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|remoteSession
operator|.
name|createProducer
argument_list|(
name|remoteSession
operator|.
name|createQueue
argument_list|(
literal|"testqueue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|closeConnections
parameter_list|()
throws|throws
name|JMSException
block|{
name|closeLocalConnection
argument_list|()
expr_stmt|;
name|closeRemoteConnection
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|closeLocalConnection
parameter_list|()
throws|throws
name|JMSException
block|{
name|localConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|closeRemoteConnection
parameter_list|()
throws|throws
name|JMSException
block|{
name|remoteConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|stopBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|stopRemoteBroker
argument_list|()
expr_stmt|;
name|stopLocalBroker
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|stopLocalBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|localBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|stopRemoteBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|remoteBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PersistenceAdapter
name|persistanceAdapterFactory
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|useLevelDB
condition|)
block|{
return|return
name|persistanceAdapterFactory_LevelDB
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|persistanceAdapterFactory_KahaDB
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
specifier|private
name|PersistenceAdapter
name|persistanceAdapterFactory_KahaDB
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|KahaDBPersistenceAdapter
name|kahaDBPersistenceAdapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setIgnoreMissingJournalfiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setCheckForCorruptJournalFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setChecksumJournalFiles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|kahaDBPersistenceAdapter
return|;
block|}
specifier|private
name|PersistenceAdapter
name|persistanceAdapterFactory_LevelDB
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|LevelDBPersistenceAdapter
name|levelDBPersistenceAdapter
init|=
operator|new
name|LevelDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|levelDBPersistenceAdapter
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|levelDBPersistenceAdapter
return|;
block|}
specifier|private
class|class
name|DebugTransportFactory
extends|extends
name|NIOTransportFactory
block|{
annotation|@
name|Override
specifier|protected
name|TcpTransportServer
name|createTcpTransportServer
parameter_list|(
name|URI
name|location
parameter_list|,
name|ServerSocketFactory
name|serverSocketFactory
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
operator|new
name|DebugTransportServer
argument_list|(
name|this
argument_list|,
name|location
argument_list|,
name|serverSocketFactory
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|DebugTransportServer
extends|extends
name|TcpTransportServer
block|{
specifier|public
name|DebugTransportServer
parameter_list|(
name|TcpTransportFactory
name|transportFactory
parameter_list|,
name|URI
name|location
parameter_list|,
name|ServerSocketFactory
name|serverSocketFactory
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|super
argument_list|(
name|transportFactory
argument_list|,
name|location
argument_list|,
name|serverSocketFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Transport
name|createTransport
parameter_list|(
name|Socket
name|socket
parameter_list|,
name|WireFormat
name|format
parameter_list|)
throws|throws
name|IOException
block|{
name|Transport
name|transport
decl_stmt|;
name|transport
operator|=
operator|new
name|NIOTransport
argument_list|(
name|format
argument_list|,
name|socket
argument_list|)
expr_stmt|;
name|debugTransportFilter
operator|=
operator|new
name|DebugTransportFilter
argument_list|(
name|transport
argument_list|)
expr_stmt|;
return|return
name|debugTransportFilter
return|;
block|}
block|}
specifier|private
class|class
name|DebugTransportFilter
extends|extends
name|TransportFilter
block|{
name|boolean
name|closeOnResponse
init|=
literal|false
decl_stmt|;
specifier|public
name|DebugTransportFilter
parameter_list|(
name|Transport
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|oneway
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|closeOnResponse
operator|&&
name|command
operator|instanceof
name|Response
condition|)
block|{
name|closeOnResponse
operator|=
literal|false
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"\n\nclosing connection before response is sent\n\n"
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|NIOTransport
operator|)
name|next
operator|)
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"couldn't stop niotransport"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|// don't send response
return|return;
block|}
name|super
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

