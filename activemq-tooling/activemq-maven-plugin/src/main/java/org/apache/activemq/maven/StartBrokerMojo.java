begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|AbstractMojo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugin
operator|.
name|MojoExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|project
operator|.
name|MavenProject
import|;
end_import

begin_comment
comment|/**  * Goal which starts an activemq broker.  *  * @goal run  * @phase process-sources  */
end_comment

begin_class
specifier|public
class|class
name|StartBrokerMojo
extends|extends
name|AbstractMojo
block|{
comment|/**      * Default connector property name format.      */
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT
init|=
literal|"org.apache.activemq.connector.%s.uri"
decl_stmt|;
comment|/**      * The maven project.      *      * @parameter property="project" default-value="${project}"      * @required      * @readonly      */
specifier|protected
name|MavenProject
name|project
decl_stmt|;
comment|/**      * The broker configuration uri The list of currently supported URI syntaxes      * is described<a      * href="http://activemq.apache.org/how-do-i-embed-a-broker-inside-a-connection.html">here</a>      *      * @parameter property="configUri"      *            default-value="broker:(tcp://localhost:61616)?useJmx=false&persistent=false"      * @required      */
specifier|private
name|String
name|configUri
decl_stmt|;
comment|/**      * Indicates whether to fork the broker, useful for integration tests.      *      * @parameter property="fork" default-value="false"      */
specifier|private
name|boolean
name|fork
decl_stmt|;
comment|/**      * System properties to add      *      * @parameter property="systemProperties"      */
specifier|private
name|Properties
name|systemProperties
decl_stmt|;
comment|/**      * Skip execution of the ActiveMQ Broker plugin if set to true      *      * @parameter property="skip"      */
specifier|private
name|boolean
name|skip
decl_stmt|;
comment|/**      * Format of the connector URI property names.  The first argument for the format is the connector name.      *      * @parameter property="connectorPropertyNameFormat"      */
specifier|private
name|String
name|connectorPropertyNameFormat
init|=
name|DEFAULT_CONNECTOR_PROPERTY_NAME_FORMAT
decl_stmt|;
comment|/**      * Broker manager used to start and stop the broker.      */
specifier|private
name|MavenBrokerManager
name|brokerManager
decl_stmt|;
comment|/**      * XBean File Resolver used to detect and transform xbean file URIs.      */
specifier|private
name|XBeanFileResolver
name|xBeanFileResolver
init|=
operator|new
name|XBeanFileResolver
argument_list|()
decl_stmt|;
comment|/**      * Retrieve the Maven project for this mojo.      *      * @return the Maven project.      */
specifier|public
name|MavenProject
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
comment|/**      * Set the Maven project for this mojo.      *      * @param project the Maven project.      */
specifier|public
name|void
name|setProject
parameter_list|(
name|MavenProject
name|project
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
block|}
comment|/**      * Retrieve the URI used to configure the broker on startup.      *      * @return the configuration URI.      */
specifier|public
name|String
name|getConfigUri
parameter_list|()
block|{
return|return
name|configUri
return|;
block|}
comment|/**      * Set the URI used to configure the broker on startup.      *      * @param configUri the URI used to configure the broker.      */
specifier|public
name|void
name|setConfigUri
parameter_list|(
name|String
name|configUri
parameter_list|)
block|{
name|this
operator|.
name|configUri
operator|=
name|configUri
expr_stmt|;
block|}
comment|/**      * Determine if the mojo is configured to fork a broker.      *      * @return true => the mojo will fork a broker (i.e. start it in the background); false => start the broker and      * wait synchronously for it to terminate.      */
specifier|public
name|boolean
name|isFork
parameter_list|()
block|{
return|return
name|fork
return|;
block|}
comment|/**      * Configure the mojo to run the broker asynchronously (i.e. fork) or synchronously.      *      * @param fork true => start the broker asynchronously; true => start the broker synchronously.      */
specifier|public
name|void
name|setFork
parameter_list|(
name|boolean
name|fork
parameter_list|)
block|{
name|this
operator|.
name|fork
operator|=
name|fork
expr_stmt|;
block|}
comment|/**      * Determine if the mojo is configured to skip the broker startup.      *      * @return true => the mojo will skip the broker startup; false => the mojo will start the broker normally.      */
specifier|public
name|boolean
name|isSkip
parameter_list|()
block|{
return|return
name|skip
return|;
block|}
comment|/**      * Configure the mojo to skip or normally execute the broker startup.      *      * @param skip true => the mojo will skip the broker startup; false => the mojo will start the broker normally.      */
specifier|public
name|void
name|setSkip
parameter_list|(
name|boolean
name|skip
parameter_list|)
block|{
name|this
operator|.
name|skip
operator|=
name|skip
expr_stmt|;
block|}
comment|/**      * Retrieve properties to add to the System properties on broker startup.      *      * @return properties to add to the System properties.      */
specifier|public
name|Properties
name|getSystemProperties
parameter_list|()
block|{
return|return
name|systemProperties
return|;
block|}
comment|/**      * Set properties to add to the System properties on broker startup.      *      * @param systemProperties properties to add to the System properties.      */
specifier|public
name|void
name|setSystemProperties
parameter_list|(
name|Properties
name|systemProperties
parameter_list|)
block|{
name|this
operator|.
name|systemProperties
operator|=
name|systemProperties
expr_stmt|;
block|}
comment|/**      * Retrieve the format used to generate property names when registering connector URIs.      *      * @return the format used to generate property names.      */
specifier|public
name|String
name|getConnectorPropertyNameFormat
parameter_list|()
block|{
return|return
name|connectorPropertyNameFormat
return|;
block|}
comment|/**      * Set the format used to generate property names when registering connector URIs.      *      * @param connectorPropertyNameFormat the new format to use when generating property names.      */
specifier|public
name|void
name|setConnectorPropertyNameFormat
parameter_list|(
name|String
name|connectorPropertyNameFormat
parameter_list|)
block|{
name|this
operator|.
name|connectorPropertyNameFormat
operator|=
name|connectorPropertyNameFormat
expr_stmt|;
block|}
comment|/**      * Retrieve the manager used to create and retain the started broker.      *      * @return the manager.      */
specifier|public
name|MavenBrokerManager
name|getBrokerManager
parameter_list|()
block|{
return|return
name|brokerManager
return|;
block|}
comment|/**      * Set the manager used to create and retain the started broker.      *      * @param brokerManager the new manager to use.      */
specifier|public
name|void
name|setBrokerManager
parameter_list|(
name|MavenBrokerManager
name|brokerManager
parameter_list|)
block|{
name|this
operator|.
name|brokerManager
operator|=
name|brokerManager
expr_stmt|;
block|}
comment|/**      * Retrieve the XBeanFileResolver used to detect and transform XBean URIs.      *      * @return the XBeanFileResolver used.      */
specifier|public
name|XBeanFileResolver
name|getxBeanFileResolver
parameter_list|()
block|{
return|return
name|xBeanFileResolver
return|;
block|}
comment|/**      * Set the XBeanFileResolver to use when detecting and transforming XBean URIs.      *      * @param xBeanFileResolver the XBeanFileResolver to use.      */
specifier|public
name|void
name|setxBeanFileResolver
parameter_list|(
name|XBeanFileResolver
name|xBeanFileResolver
parameter_list|)
block|{
name|this
operator|.
name|xBeanFileResolver
operator|=
name|xBeanFileResolver
expr_stmt|;
block|}
comment|/**      * Perform the mojo operation, which starts the ActiveMQ broker unless configured to skip it.  Also registers the      * connector URIs in the maven project properties on startup, which enables the use of variable substitution in      * the pom.xml file to determine the address of the connector using the standard ${...} syntax.      *      * @throws MojoExecutionException      */
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|MojoExecutionException
block|{
if|if
condition|(
name|skip
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Skipped execution of ActiveMQ Broker"
argument_list|)
expr_stmt|;
return|return;
block|}
name|addActiveMQSystemProperties
argument_list|()
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Loading broker configUri: "
operator|+
name|configUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|xBeanFileResolver
operator|.
name|isXBeanFile
argument_list|(
name|configUri
argument_list|)
condition|)
block|{
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"configUri before transformation: "
operator|+
name|configUri
argument_list|)
expr_stmt|;
name|configUri
operator|=
name|this
operator|.
name|xBeanFileResolver
operator|.
name|toUrlCompliantAbsolutePath
argument_list|(
name|configUri
argument_list|)
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"configUri after transformation: "
operator|+
name|configUri
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|useBrokerManager
argument_list|()
operator|.
name|start
argument_list|(
name|fork
argument_list|,
name|configUri
argument_list|)
expr_stmt|;
comment|//
comment|// Register the transport connector URIs in the Maven project.
comment|//
name|this
operator|.
name|registerTransportConnectorUris
argument_list|()
expr_stmt|;
name|getLog
argument_list|()
operator|.
name|info
argument_list|(
literal|"Started the ActiveMQ Broker"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set system properties      */
specifier|protected
name|void
name|addActiveMQSystemProperties
parameter_list|()
block|{
comment|// Set the default properties
name|System
operator|.
name|setProperty
argument_list|(
literal|"activemq.base"
argument_list|,
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"activemq.home"
argument_list|,
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.activemq.UseDedicatedTaskRunner"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.activemq.default.directory.prefix"
argument_list|,
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"derby.system.home"
argument_list|,
name|project
operator|.
name|getBuild
argument_list|()
operator|.
name|getDirectory
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"derby.storage.fileSyncTransactionLog"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// Overwrite any custom properties
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|systemProperties
argument_list|)
expr_stmt|;
block|}
comment|/**      * Register all of the broker's transport connector URIs in the Maven project as properties.  Property names are      * formed from the connectorPropertyNameFormat using String.format(), with the connector name as the one and only      * argument.  The value of each property is that returned by getPublishableConnectString().      */
specifier|protected
name|void
name|registerTransportConnectorUris
parameter_list|()
block|{
name|Properties
name|props
init|=
name|project
operator|.
name|getProperties
argument_list|()
decl_stmt|;
comment|//
comment|// Loop through all of the connectors, adding each.
comment|//
for|for
control|(
name|TransportConnector
name|oneConnector
range|:
name|this
operator|.
name|useBrokerManager
argument_list|()
operator|.
name|getBroker
argument_list|()
operator|.
name|getTransportConnectors
argument_list|()
control|)
block|{
try|try
block|{
comment|//
comment|// Format the name of the property and grab the value.
comment|//
name|String
name|propName
init|=
name|String
operator|.
name|format
argument_list|(
name|this
operator|.
name|connectorPropertyNameFormat
argument_list|,
name|oneConnector
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|oneConnector
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|getLog
argument_list|()
operator|.
name|debug
argument_list|(
literal|"setting transport connector URI property: propertyName=\""
operator|+
name|propName
operator|+
literal|"\"; value=\""
operator|+
name|value
operator|+
literal|"\""
argument_list|)
expr_stmt|;
comment|//
comment|// Set the property.
comment|//
name|props
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
comment|//
comment|// Warn of the issue and continue.
comment|//
name|getLog
argument_list|()
operator|.
name|warn
argument_list|(
literal|"error on obtaining broker connector uri; connector="
operator|+
name|oneConnector
argument_list|,
name|exc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Use the configured broker manager, if defined; otherwise, use the default broker manager.      *      * @return the broker manager to use.      */
specifier|protected
name|MavenBrokerManager
name|useBrokerManager
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|brokerManager
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|brokerManager
operator|=
operator|new
name|MavenBrokerSingletonManager
argument_list|()
expr_stmt|;
block|}
return|return
name|this
operator|.
name|brokerManager
return|;
block|}
block|}
end_class

end_unit

