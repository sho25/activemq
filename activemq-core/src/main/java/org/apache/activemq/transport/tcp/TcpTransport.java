begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportThreadSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of the {@link Transport} interface using raw tcp/ip  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|TcpTransport
extends|extends
name|TransportThreadSupport
implements|implements
name|Transport
implements|,
name|Service
implements|,
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TcpTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|connectionTimeout
init|=
literal|30000
decl_stmt|;
specifier|private
name|int
name|soTimeout
init|=
literal|10000
decl_stmt|;
specifier|private
name|int
name|socketBufferSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|private
name|Socket
name|socket
decl_stmt|;
specifier|private
name|DataOutputStream
name|dataOut
decl_stmt|;
specifier|private
name|DataInputStream
name|dataIn
decl_stmt|;
specifier|private
name|WireFormat
name|wireFormat
decl_stmt|;
specifier|private
name|boolean
name|trace
decl_stmt|;
specifier|private
name|boolean
name|useLocalHost
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|minmumWireFormatVersion
decl_stmt|;
specifier|private
name|InetSocketAddress
name|socketAddress
decl_stmt|;
comment|/**      * Construct basic helpers      *       * @param wireFormat      */
specifier|protected
name|TcpTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
comment|/**      * Connect to a remote Node - e.g. a Broker      *       * @param wireFormat      * @param remoteLocation      * @throws IOException      * @throws UnknownHostException      */
specifier|public
name|TcpTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|URI
name|remoteLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|socket
operator|=
name|createSocket
argument_list|(
name|remoteLocation
argument_list|)
expr_stmt|;
block|}
comment|/**      * Connect to a remote Node - e.g. a Broker      *       * @param wireFormat      * @param remoteLocation      * @param localLocation -      *            e.g. local InetAddress and local port      * @throws IOException      * @throws UnknownHostException      */
specifier|public
name|TcpTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|URI
name|remoteLocation
parameter_list|,
name|URI
name|localLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|socket
operator|=
name|createSocket
argument_list|(
name|remoteLocation
argument_list|,
name|localLocation
argument_list|)
expr_stmt|;
block|}
comment|/**      * Initialize from a server Socket      *       * @param wireFormat      * @param socket      * @throws IOException      */
specifier|public
name|TcpTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|socket
operator|=
name|socket
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * A one way asynchronous send      */
specifier|public
name|void
name|oneway
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|checkStarted
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|command
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return pretty print of 'this'      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"tcp://"
operator|+
name|socket
operator|.
name|getInetAddress
argument_list|()
operator|+
literal|":"
operator|+
name|socket
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**      * reads packets from a Socket      */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"TCP consumer thread starting"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|dataIn
argument_list|)
decl_stmt|;
name|doConsume
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|InterruptedIOException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Caught while closing: "
operator|+
name|e2
operator|+
literal|". Now Closed"
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|boolean
name|isTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
specifier|public
name|void
name|setTrace
parameter_list|(
name|boolean
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
specifier|public
name|int
name|getMinmumWireFormatVersion
parameter_list|()
block|{
return|return
name|minmumWireFormatVersion
return|;
block|}
specifier|public
name|void
name|setMinmumWireFormatVersion
parameter_list|(
name|int
name|minmumWireFormatVersion
parameter_list|)
block|{
name|this
operator|.
name|minmumWireFormatVersion
operator|=
name|minmumWireFormatVersion
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseLocalHost
parameter_list|()
block|{
return|return
name|useLocalHost
return|;
block|}
comment|/**      * Sets whether 'localhost' or the actual local host name should be used to      * make local connections. On some operating systems such as Macs its not      * possible to connect as the local host name so localhost is better.      */
specifier|public
name|void
name|setUseLocalHost
parameter_list|(
name|boolean
name|useLocalHost
parameter_list|)
block|{
name|this
operator|.
name|useLocalHost
operator|=
name|useLocalHost
expr_stmt|;
block|}
specifier|public
name|int
name|getSocketBufferSize
parameter_list|()
block|{
return|return
name|socketBufferSize
return|;
block|}
comment|/**      * Sets the buffer size to use on the socket      */
specifier|public
name|void
name|setSocketBufferSize
parameter_list|(
name|int
name|socketBufferSize
parameter_list|)
block|{
name|this
operator|.
name|socketBufferSize
operator|=
name|socketBufferSize
expr_stmt|;
block|}
specifier|public
name|int
name|getSoTimeout
parameter_list|()
block|{
return|return
name|soTimeout
return|;
block|}
comment|/**      * Sets the socket timeout      */
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|soTimeout
parameter_list|)
block|{
name|this
operator|.
name|soTimeout
operator|=
name|soTimeout
expr_stmt|;
block|}
specifier|public
name|int
name|getConnectionTimeout
parameter_list|()
block|{
return|return
name|connectionTimeout
return|;
block|}
comment|/**      * Sets the timeout used to connect to the socket      */
specifier|public
name|void
name|setConnectionTimeout
parameter_list|(
name|int
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * Factory method to create a new socket      *       * @param remoteLocation      *            the URI to connect to      * @return the newly created socket      * @throws UnknownHostException      * @throws IOException      */
specifier|protected
name|Socket
name|createSocket
parameter_list|(
name|URI
name|remoteLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|String
name|host
init|=
name|resolveHostName
argument_list|(
name|remoteLocation
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|socketAddress
operator|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|remoteLocation
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
return|return
name|sock
return|;
block|}
comment|/**      * Factory method to create a new socket      *       * @param remoteLocation      * @param localLocation      * @return      * @throws IOException      * @throws IOException      * @throws UnknownHostException      */
specifier|protected
name|Socket
name|createSocket
parameter_list|(
name|URI
name|remoteLocation
parameter_list|,
name|URI
name|localLocation
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|String
name|host
init|=
name|resolveHostName
argument_list|(
name|remoteLocation
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|SocketAddress
name|sockAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|remoteLocation
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|SocketAddress
name|localAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getByName
argument_list|(
name|localLocation
operator|.
name|getHost
argument_list|()
argument_list|)
argument_list|,
name|localLocation
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|Socket
name|sock
init|=
operator|new
name|Socket
argument_list|()
decl_stmt|;
name|initialiseSocket
argument_list|(
name|sock
argument_list|)
expr_stmt|;
name|sock
operator|.
name|bind
argument_list|(
name|localAddress
argument_list|)
expr_stmt|;
name|sock
operator|.
name|connect
argument_list|(
name|sockAddress
argument_list|)
expr_stmt|;
return|return
name|sock
return|;
block|}
specifier|protected
name|String
name|resolveHostName
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|localName
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|!=
literal|null
operator|&&
name|isUseLocalHost
argument_list|()
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|host
argument_list|)
condition|)
block|{
return|return
literal|"localhost"
return|;
block|}
block|}
return|return
name|host
return|;
block|}
comment|/**      * Configures the socket for use      *       * @param sock      * @throws SocketException      */
specifier|protected
name|void
name|initialiseSocket
parameter_list|(
name|Socket
name|sock
parameter_list|)
throws|throws
name|SocketException
block|{
try|try
block|{
name|sock
operator|.
name|setReceiveBufferSize
argument_list|(
name|socketBufferSize
argument_list|)
expr_stmt|;
name|sock
operator|.
name|setSendBufferSize
argument_list|(
name|socketBufferSize
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketException
name|se
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cannot set socket buffer size = "
operator|+
name|socketBufferSize
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
name|sock
operator|.
name|setSoTimeout
argument_list|(
name|soTimeout
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|initialiseSocket
argument_list|(
name|socket
argument_list|)
expr_stmt|;
if|if
condition|(
name|socketAddress
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connectionTimeout
operator|>=
literal|0
condition|)
block|{
name|socket
operator|.
name|connect
argument_list|(
name|socketAddress
argument_list|,
name|connectionTimeout
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socket
operator|.
name|connect
argument_list|(
name|socketAddress
argument_list|)
expr_stmt|;
block|}
block|}
name|initializeStreams
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|closeStreams
argument_list|()
expr_stmt|;
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeStreams
parameter_list|()
throws|throws
name|IOException
block|{
name|TcpBufferedInputStream
name|buffIn
init|=
operator|new
name|TcpBufferedInputStream
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|4096
argument_list|)
decl_stmt|;
name|this
operator|.
name|dataIn
operator|=
operator|new
name|DataInputStream
argument_list|(
name|buffIn
argument_list|)
expr_stmt|;
name|TcpBufferedOutputStream
name|buffOut
init|=
operator|new
name|TcpBufferedOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|8192
argument_list|)
decl_stmt|;
name|this
operator|.
name|dataOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|buffOut
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|closeStreams
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dataOut
operator|!=
literal|null
condition|)
block|{
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dataIn
operator|!=
literal|null
condition|)
block|{
name|dataIn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

