begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|OpenTypeSupport
operator|.
name|OpenTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|DestinationView
block|{
specifier|protected
specifier|final
name|Destination
name|destination
decl_stmt|;
specifier|protected
specifier|final
name|ManagedRegionBroker
name|broker
decl_stmt|;
specifier|public
name|DestinationView
parameter_list|(
name|ManagedRegionBroker
name|broker
parameter_list|,
name|Destination
name|destination
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
specifier|public
name|void
name|gc
parameter_list|()
block|{
name|destination
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|void
name|resetStatistics
parameter_list|()
block|{
name|destination
operator|.
name|resetStatistics
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getEnqueueCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getEnqueueCount
argument_list|()
return|;
block|}
specifier|public
name|long
name|getDequeueCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getDequeueCount
argument_list|()
return|;
block|}
specifier|public
name|long
name|getConsumerCount
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getConsumerCount
argument_list|()
return|;
block|}
specifier|public
name|long
name|getQueueSize
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getQueueSize
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMessagesCached
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getMessagesCached
argument_list|()
return|;
block|}
specifier|public
name|int
name|getMemoryPercentageUsed
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getMemoryPercentageUsed
argument_list|()
return|;
block|}
specifier|public
name|long
name|getMemoryLimit
parameter_list|()
block|{
return|return
name|destination
operator|.
name|getMemoryLimit
argument_list|()
return|;
block|}
specifier|public
name|void
name|setMemoryLimit
parameter_list|(
name|long
name|limit
parameter_list|)
block|{
name|destination
operator|.
name|setMemoryLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompositeData
index|[]
name|browse
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|Message
index|[]
name|messages
init|=
name|destination
operator|.
name|browse
argument_list|()
decl_stmt|;
name|CompositeData
name|c
index|[]
init|=
operator|new
name|CompositeData
index|[
name|messages
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|c
index|[
name|i
index|]
operator|=
name|OpenTypeSupport
operator|.
name|convert
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
specifier|public
name|TabularData
name|browseAsTable
parameter_list|()
throws|throws
name|OpenDataException
block|{
name|OpenTypeFactory
name|factory
init|=
name|OpenTypeSupport
operator|.
name|getFactory
argument_list|(
name|ActiveMQMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
index|[]
name|messages
init|=
name|destination
operator|.
name|browse
argument_list|()
decl_stmt|;
name|CompositeType
name|ct
init|=
name|factory
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"MessageList"
argument_list|,
literal|"MessageList"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"JMSMessageID"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|rc
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rc
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|factory
operator|.
name|getFields
argument_list|(
name|messages
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|String
name|sendTextMessage
parameter_list|(
name|String
name|body
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sendTextMessage
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|,
name|body
argument_list|)
return|;
block|}
specifier|public
name|String
name|sendTextMessage
parameter_list|(
name|Map
name|headers
parameter_list|,
name|String
name|body
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|brokerUrl
init|=
literal|"vm://"
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUrl
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQTextMessage
name|msg
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|session
operator|.
name|createTextMessage
argument_list|(
name|body
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|headers
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setObjectProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|msg
operator|.
name|getJMSDeliveryMode
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setPriority
argument_list|(
name|msg
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|ttl
init|=
name|msg
operator|.
name|getExpiration
argument_list|()
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|producer
operator|.
name|setTimeToLive
argument_list|(
name|ttl
operator|>
literal|0
condition|?
name|ttl
else|:
literal|0
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|msg
operator|.
name|getJMSMessageID
argument_list|()
return|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

