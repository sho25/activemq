begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslBrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SslBrokerServiceTest
extends|extends
name|TransportBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SslBrokerServiceTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|TransportConnector
name|needClientAuthConnector
decl_stmt|;
name|TransportConnector
name|limitedCipherSuites
decl_stmt|;
specifier|protected
name|String
name|getBindLocation
parameter_list|()
block|{
return|return
literal|"ssl://localhost:0"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// http://java.sun.com/javase/javaseforbusiness/docs/TLSReadme.html
comment|// work around: javax.net.ssl.SSLHandshakeException: renegotiation is not allowed
name|System
operator|.
name|setProperty
argument_list|(
literal|"sun.security.ssl.allowUnsafeRenegotiation"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SslBrokerService
name|service
init|=
operator|new
name|SslBrokerService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|KeyManager
index|[]
name|km
init|=
name|getKeyManager
argument_list|()
decl_stmt|;
name|TrustManager
index|[]
name|tm
init|=
name|getTrustManager
argument_list|()
decl_stmt|;
name|connector
operator|=
name|service
operator|.
name|addSslConnector
argument_list|(
name|getBindLocation
argument_list|()
argument_list|,
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|limitedCipherSuites
operator|=
name|service
operator|.
name|addSslConnector
argument_list|(
literal|"ssl://localhost:0?transport.enabledCipherSuites=TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
argument_list|,
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|needClientAuthConnector
operator|=
name|service
operator|.
name|addSslConnector
argument_list|(
literal|"ssl://localhost:0?transport.needClientAuth=true"
argument_list|,
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// for client side
name|SslTransportFactory
name|sslFactory
init|=
operator|new
name|SslTransportFactory
argument_list|()
decl_stmt|;
name|SslContext
name|ctx
init|=
operator|new
name|SslContext
argument_list|(
name|km
argument_list|,
name|tm
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SslContext
operator|.
name|setCurrentSslContext
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|TransportFactory
operator|.
name|registerTransportFactory
argument_list|(
literal|"ssl"
argument_list|,
name|sslFactory
argument_list|)
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|public
name|void
name|testNeedClientAuthReject
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
comment|// no client cert
name|context
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|getTrustManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|needClientAuthConnector
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected failure on no client cert"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|expected
parameter_list|)
block|{
name|expected
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// should work with regular connector
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|connector
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNeedClientAuthSucceed
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|getKeyManager
argument_list|()
argument_list|,
name|getTrustManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|needClientAuthConnector
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCipherSuitesDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|context
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|context
operator|.
name|init
argument_list|(
name|getKeyManager
argument_list|()
argument_list|,
name|getTrustManager
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Enable only one cipher suite which is not enabled on the server
try|try
block|{
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"SSL_RSA_WITH_RC4_128_MD5"
block|}
argument_list|,
name|limitedCipherSuites
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected failure on non allowed cipher suite"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SSLException
name|expectedOnNotAnAvailableSuite
parameter_list|)
block|{         }
comment|// ok with the enabled one
name|makeSSLConnection
argument_list|(
name|context
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256"
block|}
argument_list|,
name|limitedCipherSuites
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|makeSSLConnection
parameter_list|(
name|SSLContext
name|context
parameter_list|,
name|String
name|enabledSuites
index|[]
parameter_list|,
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
throws|,
name|UnknownHostException
throws|,
name|SocketException
block|{
name|SSLSocket
name|sslSocket
init|=
operator|(
name|SSLSocket
operator|)
name|context
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|createSocket
argument_list|(
literal|"localhost"
argument_list|,
name|connector
operator|.
name|getUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enabledSuites
operator|!=
literal|null
condition|)
block|{
name|sslSocket
operator|.
name|setEnabledCipherSuites
argument_list|(
name|enabledSuites
argument_list|)
expr_stmt|;
block|}
name|sslSocket
operator|.
name|setSoTimeout
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|SSLSession
name|session
init|=
name|sslSocket
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|sslSocket
operator|.
name|startHandshake
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cyphersuite: "
operator|+
name|session
operator|.
name|getCipherSuite
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer port: "
operator|+
name|session
operator|.
name|getPeerPort
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"peer cert: "
operator|+
name|session
operator|.
name|getPeerCertificateChain
argument_list|()
index|[
literal|0
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|TrustManager
index|[]
name|getTrustManager
parameter_list|()
throws|throws
name|Exception
block|{
name|TrustManager
index|[]
name|trustStoreManagers
init|=
literal|null
decl_stmt|;
name|KeyStore
name|trustedCertStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|SslTransportBrokerTest
operator|.
name|KEYSTORE_TYPE
argument_list|)
decl_stmt|;
name|trustedCertStore
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|SslTransportBrokerTest
operator|.
name|TRUST_KEYSTORE
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|trustedCertStore
argument_list|)
expr_stmt|;
name|trustStoreManagers
operator|=
name|tmf
operator|.
name|getTrustManagers
argument_list|()
expr_stmt|;
return|return
name|trustStoreManagers
return|;
block|}
specifier|public
specifier|static
name|KeyManager
index|[]
name|getKeyManager
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|SslTransportBrokerTest
operator|.
name|KEYSTORE_TYPE
argument_list|)
decl_stmt|;
name|KeyManager
index|[]
name|keystoreManagers
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|sslCert
init|=
name|loadClientCredential
argument_list|(
name|SslTransportBrokerTest
operator|.
name|SERVER_KEYSTORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslCert
operator|!=
literal|null
operator|&&
name|sslCert
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|sslCert
argument_list|)
decl_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|bin
argument_list|,
name|SslTransportBrokerTest
operator|.
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|SslTransportBrokerTest
operator|.
name|PASSWORD
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|keystoreManagers
operator|=
name|kmf
operator|.
name|getKeyManagers
argument_list|()
expr_stmt|;
block|}
return|return
name|keystoreManagers
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|loadClientCredential
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|int
name|i
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|maxWait
operator|=
literal|10000
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|SslBrokerServiceTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

