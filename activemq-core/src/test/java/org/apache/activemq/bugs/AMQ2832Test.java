begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2832Test
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQ2832Test
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Destination
name|destination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"AMQ2832Test"
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|startBroker
parameter_list|(
name|boolean
name|delete
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|configurePersistence
argument_list|(
name|broker
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting broker.."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|configurePersistence
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|boolean
name|deleteAllOnStart
parameter_list|)
throws|throws
name|Exception
block|{
name|KahaDBPersistenceAdapter
name|adapter
init|=
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
comment|// ensure there are a bunch of data files but multiple entries in each
name|adapter
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
comment|// speed up the test case, checkpoint an cleanup early and often
name|adapter
operator|.
name|setCheckpointInterval
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setCleanupInterval
argument_list|(
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deleteAllOnStart
condition|)
block|{
name|adapter
operator|.
name|setForceRecoverIndex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAckRemovedMessageReplayedAfterRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|startBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StagedConsumer
name|consumer
init|=
operator|new
name|StagedConsumer
argument_list|()
decl_stmt|;
name|int
name|numMessagesAvailable
init|=
name|produceMessagesToConsumeMultipleDataFiles
argument_list|(
literal|20
argument_list|)
decl_stmt|;
comment|// this will block the reclaiming of one data file
name|Message
name|firstUnacked
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"first unacked: "
operator|+
name|firstUnacked
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|secondUnacked
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"second unacked: "
operator|+
name|secondUnacked
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|numMessagesAvailable
operator|-=
literal|11
expr_stmt|;
name|numMessagesAvailable
operator|+=
name|produceMessagesToConsumeMultipleDataFiles
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// ensure ack is another data file
name|LOG
operator|.
name|info
argument_list|(
literal|"Acking firstUnacked: "
operator|+
name|firstUnacked
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|firstUnacked
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
name|numMessagesAvailable
operator|+=
name|produceMessagesToConsumeMultipleDataFiles
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|receive
argument_list|(
name|numMessagesAvailable
argument_list|)
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
comment|// second unacked should keep first data file available but journal with the first ack
comment|// may get whacked
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|startBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|consumer
operator|=
operator|new
name|StagedConsumer
argument_list|()
expr_stmt|;
comment|// need to force recovery?
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"One messages left after recovery"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
comment|// should be no more messages
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only one messages left after recovery: "
operator|+
name|msg
argument_list|,
literal|null
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|produceMessagesToConsumeMultipleDataFiles
parameter_list|(
name|int
name|numToSend
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|sent
init|=
literal|0
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numToSend
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|session
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sent
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|sent
return|;
block|}
specifier|final
name|String
name|payload
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
literal|1024
index|]
argument_list|)
decl_stmt|;
specifier|private
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|session
operator|.
name|createTextMessage
argument_list|(
name|payload
operator|+
literal|"::"
operator|+
name|i
argument_list|)
return|;
block|}
specifier|private
class|class
name|StagedConsumer
block|{
name|Connection
name|connection
decl_stmt|;
name|MessageConsumer
name|consumer
decl_stmt|;
name|StagedConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover://"
operator|+
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|ActiveMQSession
operator|.
name|INDIVIDUAL_ACKNOWLEDGE
argument_list|)
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Message
name|receive
parameter_list|(
name|int
name|numToReceive
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|receive
argument_list|(
name|numToReceive
argument_list|,
literal|2
argument_list|)
return|;
block|}
specifier|public
name|Message
name|receive
parameter_list|(
name|int
name|numToReceive
parameter_list|,
name|int
name|timeoutInSeconds
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|msg
init|=
literal|null
decl_stmt|;
for|for
control|(
init|;
name|numToReceive
operator|>
literal|0
condition|;
name|numToReceive
operator|--
control|)
block|{
do|do
block|{
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|msg
operator|==
literal|null
operator|&&
operator|--
name|timeoutInSeconds
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|numToReceive
operator|>
literal|1
condition|)
block|{
name|msg
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"received: "
operator|+
name|msg
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// last message, unacked
return|return
name|msg
return|;
block|}
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

