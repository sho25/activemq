begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|QueueMessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|BrokerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Provides a JMX Management view of a Queue.  */
end_comment

begin_class
specifier|public
class|class
name|QueueView
extends|extends
name|DestinationView
implements|implements
name|QueueViewMBean
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueueView
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|QueueView
parameter_list|(
name|ManagedRegionBroker
name|broker
parameter_list|,
name|Queue
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|broker
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompositeData
name|getMessage
parameter_list|(
name|String
name|messageId
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|CompositeData
name|result
init|=
literal|null
decl_stmt|;
name|QueueMessageReference
name|ref
init|=
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|getMessage
argument_list|(
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
name|Message
name|rc
init|=
name|ref
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|=
name|OpenTypeSupport
operator|.
name|convert
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|purge
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|originalMessageCount
init|=
name|destination
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|purge
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"{} purge of {} messages"
argument_list|,
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|originalMessageCount
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeMessage
parameter_list|(
name|String
name|messageId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|removeMessage
argument_list|(
name|messageId
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|removeMatchingMessages
parameter_list|(
name|String
name|selector
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|removeMatchingMessages
argument_list|(
name|selector
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|removeMatchingMessages
parameter_list|(
name|String
name|selector
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|removeMatchingMessages
argument_list|(
name|selector
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|copyMessageTo
parameter_list|(
name|String
name|messageId
parameter_list|,
name|String
name|destinationName
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|toDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|copyMessageTo
argument_list|(
name|context
argument_list|,
name|messageId
argument_list|,
name|toDestination
argument_list|)
return|;
block|}
specifier|public
name|int
name|copyMatchingMessagesTo
parameter_list|(
name|String
name|selector
parameter_list|,
name|String
name|destinationName
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|toDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|copyMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|toDestination
argument_list|)
return|;
block|}
specifier|public
name|int
name|copyMatchingMessagesTo
parameter_list|(
name|String
name|selector
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|toDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|copyMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|toDestination
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|moveMessageTo
parameter_list|(
name|String
name|messageId
parameter_list|,
name|String
name|destinationName
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|toDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|moveMessageTo
argument_list|(
name|context
argument_list|,
name|messageId
argument_list|,
name|toDestination
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|String
name|selector
parameter_list|,
name|String
name|destinationName
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|toDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|toDestination
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|String
name|selector
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|toDestination
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|destinationName
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|toDestination
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|retryMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|Queue
operator|)
name|destination
operator|)
operator|.
name|retryMessages
argument_list|(
name|context
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * Moves a message back to its original destination      */
specifier|public
name|boolean
name|retryMessage
parameter_list|(
name|String
name|messageId
parameter_list|)
throws|throws
name|Exception
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
name|QueueMessageReference
name|ref
init|=
name|queue
operator|.
name|getMessage
argument_list|(
name|messageId
argument_list|)
decl_stmt|;
name|Message
name|rc
init|=
name|ref
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
condition|)
block|{
name|ActiveMQDestination
name|originalDestination
init|=
name|rc
operator|.
name|getOriginalDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|originalDestination
operator|!=
literal|null
condition|)
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|broker
operator|.
name|getContextBroker
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|queue
operator|.
name|moveMessageTo
argument_list|(
name|context
argument_list|,
name|ref
argument_list|,
name|originalDestination
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"No original destination for message: "
operator|+
name|messageId
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Could not find message: "
operator|+
name|messageId
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|cursorSize
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getMessages
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|doesCursorHaveMessagesBuffered
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getMessages
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|hasMessagesBufferedToDeliver
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|doesCursorHaveSpace
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getMessages
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|hasSpace
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|long
name|getCursorMemoryUsage
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getMessages
argument_list|()
operator|!=
literal|null
operator|&&
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getCursorPercentUsage
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getMessages
argument_list|()
operator|!=
literal|null
operator|&&
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|isCursorFull
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getMessages
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|isFull
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
if|if
condition|(
name|queue
operator|.
name|getMessages
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|queue
operator|.
name|getMessages
argument_list|()
operator|.
name|isCacheEnabled
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * @return a Map of groupNames and ConsumerIds      */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMessageGroups
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
return|return
name|queue
operator|.
name|getMessageGroupOwners
argument_list|()
operator|.
name|getGroups
argument_list|()
return|;
block|}
comment|/**      * @return the message group type implementation (simple,bucket,cached)      */
annotation|@
name|Override
specifier|public
name|String
name|getMessageGroupType
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
return|return
name|queue
operator|.
name|getMessageGroupOwners
argument_list|()
operator|.
name|getType
argument_list|()
return|;
block|}
comment|/**      * remove a message group = has the effect of rebalancing group      */
annotation|@
name|Override
specifier|public
name|void
name|removeMessageGroup
parameter_list|(
annotation|@
name|MBeanInfo
argument_list|(
literal|"groupName"
argument_list|)
name|String
name|groupName
parameter_list|)
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
name|queue
operator|.
name|getMessageGroupOwners
argument_list|()
operator|.
name|removeGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
comment|/**      * remove all the message groups - will rebalance all message groups across consumers      */
annotation|@
name|Override
specifier|public
name|void
name|removeAllMessageGroups
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
name|queue
operator|.
name|getMessageGroupOwners
argument_list|()
operator|.
name|removeAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|pause
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
name|queue
operator|.
name|pauseDispatch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resume
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
name|queue
operator|.
name|resumeDispatch
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPaused
parameter_list|()
block|{
name|Queue
name|queue
init|=
operator|(
name|Queue
operator|)
name|destination
decl_stmt|;
return|return
name|queue
operator|.
name|isDispatchPaused
argument_list|()
return|;
block|}
block|}
end_class

end_unit

