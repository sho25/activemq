begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ws
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|ssl
operator|.
name|SslContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|client
operator|.
name|ClientUpgradeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|websocket
operator|.
name|client
operator|.
name|WebSocketClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|CONNECT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PUBACK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PUBLISH
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|SUBSCRIBE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * This shows that last will and testament messages work with MQTT over WS.  * This test is modeled after org.apache.activemq.transport.mqtt.MQTTWillTest  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MQTTWSTransportWillTest
extends|extends
name|WSTransportTestSupport
block|{
specifier|protected
name|WebSocketClient
name|wsClient
decl_stmt|;
specifier|protected
name|MQTTWSConnection
name|wsMQTTConnection1
decl_stmt|;
specifier|protected
name|MQTTWSConnection
name|wsMQTTConnection2
decl_stmt|;
specifier|protected
name|ClientUpgradeRequest
name|request
decl_stmt|;
specifier|private
name|String
name|willTopic
init|=
literal|"willTopic"
decl_stmt|;
specifier|private
name|String
name|payload
init|=
literal|"last will"
decl_stmt|;
specifier|private
name|boolean
name|closeWithDisconnect
decl_stmt|;
comment|//Test both with a proper disconnect and without
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"closeWithDisconnect={0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|true
block|}
block|,
block|{
literal|false
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|MQTTWSTransportWillTest
parameter_list|(
name|boolean
name|closeWithDisconnect
parameter_list|)
block|{
name|this
operator|.
name|closeWithDisconnect
operator|=
name|closeWithDisconnect
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|//turn off advisory support
name|broker
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wsClient
operator|=
operator|new
name|WebSocketClient
argument_list|(
operator|new
name|SslContextFactory
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|wsClient
operator|.
name|start
argument_list|()
expr_stmt|;
name|request
operator|=
operator|new
name|ClientUpgradeRequest
argument_list|()
expr_stmt|;
name|request
operator|.
name|setSubProtocols
argument_list|(
literal|"mqttv3.1"
argument_list|)
expr_stmt|;
name|wsMQTTConnection1
operator|=
operator|new
name|MQTTWSConnection
argument_list|()
expr_stmt|;
name|wsMQTTConnection2
operator|=
operator|new
name|MQTTWSConnection
argument_list|()
expr_stmt|;
name|wsClient
operator|.
name|connect
argument_list|(
name|wsMQTTConnection1
argument_list|,
name|wsConnectUri
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wsMQTTConnection1
operator|.
name|awaitConnection
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not connect to MQTT WS endpoint"
argument_list|)
throw|;
block|}
name|wsClient
operator|.
name|connect
argument_list|(
name|wsMQTTConnection2
argument_list|,
name|wsConnectUri
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wsMQTTConnection2
operator|.
name|awaitConnection
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not connect to MQTT WS endpoint"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|wsMQTTConnection1
operator|!=
literal|null
condition|)
block|{
name|wsMQTTConnection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|wsMQTTConnection1
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|wsMQTTConnection2
operator|!=
literal|null
condition|)
block|{
name|wsMQTTConnection2
operator|.
name|close
argument_list|()
expr_stmt|;
name|wsMQTTConnection2
operator|=
literal|null
expr_stmt|;
block|}
name|wsClient
operator|.
name|stop
argument_list|()
expr_stmt|;
name|wsClient
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testWill
parameter_list|()
throws|throws
name|Exception
block|{
comment|//connect with will retain false
name|CONNECT
name|command
init|=
name|getWillConnectCommand
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|//connect both connections
name|wsMQTTConnection1
operator|.
name|connect
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|//Subscribe to topics
name|SUBSCRIBE
name|subscribe
init|=
operator|new
name|SUBSCRIBE
argument_list|()
decl_stmt|;
name|subscribe
operator|.
name|topics
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
literal|"#"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|sendFrame
argument_list|(
name|subscribe
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//Test message send/receive
name|wsMQTTConnection1
operator|.
name|sendFrame
argument_list|(
name|getTestMessage
argument_list|(
operator|(
name|short
operator|)
literal|125
argument_list|)
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|assertMessageReceived
argument_list|(
name|wsMQTTConnection2
argument_list|)
expr_stmt|;
comment|//close the first connection without sending a proper disconnect frame first
comment|//if closeWithDisconnect is false
if|if
condition|(
name|closeWithDisconnect
condition|)
block|{
name|wsMQTTConnection1
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|wsMQTTConnection1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//Make sure LWT message is not received
if|if
condition|(
name|closeWithDisconnect
condition|)
block|{
name|assertNull
argument_list|(
name|wsMQTTConnection2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|//make sure LWT is received
block|}
else|else
block|{
name|assertWillTopicReceived
argument_list|(
name|wsMQTTConnection2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testRetainWillMessage
parameter_list|()
throws|throws
name|Exception
block|{
comment|//create connection with will retain true
name|CONNECT
name|command
init|=
name|getWillConnectCommand
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|wsMQTTConnection1
operator|.
name|connect
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|//set to at most once to test will retain
name|SUBSCRIBE
name|subscribe
init|=
operator|new
name|SUBSCRIBE
argument_list|()
decl_stmt|;
name|subscribe
operator|.
name|topics
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
literal|"#"
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|sendFrame
argument_list|(
name|subscribe
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//Test message send/receive
name|PUBLISH
name|pub
init|=
name|getTestMessage
argument_list|(
operator|(
name|short
operator|)
literal|127
argument_list|)
decl_stmt|;
name|wsMQTTConnection1
operator|.
name|sendFrame
argument_list|(
name|pub
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|assertMessageReceived
argument_list|(
name|wsMQTTConnection2
argument_list|)
expr_stmt|;
name|PUBACK
name|ack
init|=
operator|new
name|PUBACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|messageId
argument_list|(
name|pub
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|sendFrame
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
comment|//Properly close connection 2 and improperly close connection 1 for LWT test
name|wsMQTTConnection2
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//close the first connection without sending a proper disconnect frame first
comment|//if closeWithoutDisconnect is false
if|if
condition|(
name|closeWithDisconnect
condition|)
block|{
name|wsMQTTConnection1
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|wsMQTTConnection1
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|//Do the reconnect of the websocket after close
name|wsMQTTConnection2
operator|=
operator|new
name|MQTTWSConnection
argument_list|()
expr_stmt|;
name|wsClient
operator|.
name|connect
argument_list|(
name|wsMQTTConnection2
argument_list|,
name|wsConnectUri
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wsMQTTConnection2
operator|.
name|awaitConnection
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not connect to MQTT WS endpoint"
argument_list|)
throw|;
block|}
comment|//Make sure the will message is received on reconnect
name|wsMQTTConnection2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|sendFrame
argument_list|(
name|subscribe
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|wsMQTTConnection2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|//Make sure LWT message not received
if|if
condition|(
name|closeWithDisconnect
condition|)
block|{
name|assertNull
argument_list|(
name|wsMQTTConnection2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|//make sure LWT is received
block|}
else|else
block|{
name|assertWillTopicReceived
argument_list|(
name|wsMQTTConnection2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PUBLISH
name|getTestMessage
parameter_list|(
name|short
name|id
parameter_list|)
block|{
name|PUBLISH
name|publish
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
name|publish
operator|.
name|dup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|publish
operator|.
name|messageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|publish
operator|.
name|qos
argument_list|(
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|publish
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
literal|"hello world"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|publish
operator|.
name|topicName
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|publish
return|;
block|}
specifier|private
name|CONNECT
name|getWillConnectCommand
parameter_list|(
name|boolean
name|willRetain
parameter_list|)
block|{
name|CONNECT
name|command
init|=
operator|new
name|CONNECT
argument_list|()
decl_stmt|;
name|command
operator|.
name|clientId
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|"clientId"
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|cleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|version
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|command
operator|.
name|keepAlive
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|command
operator|.
name|willMessage
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
name|payload
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|willQos
argument_list|(
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|command
operator|.
name|willTopic
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
name|willTopic
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|willRetain
argument_list|(
name|willRetain
argument_list|)
expr_stmt|;
return|return
name|command
return|;
block|}
specifier|private
name|void
name|assertMessageReceived
parameter_list|(
name|MQTTWSConnection
name|wsMQTTConnection2
parameter_list|)
throws|throws
name|Exception
block|{
name|PUBLISH
name|msg
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
name|msg
operator|.
name|decode
argument_list|(
name|wsMQTTConnection2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
name|msg
operator|.
name|payload
argument_list|()
operator|.
name|ascii
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|msg
operator|.
name|topicName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertWillTopicReceived
parameter_list|(
name|MQTTWSConnection
name|wsMQTTConnection2
parameter_list|)
throws|throws
name|Exception
block|{
name|PUBLISH
name|willMsg
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
name|willMsg
operator|.
name|decode
argument_list|(
name|wsMQTTConnection2
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|willMsg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
name|willMsg
operator|.
name|payload
argument_list|()
operator|.
name|ascii
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|willTopic
argument_list|,
name|willMsg
operator|.
name|topicName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

