begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SharedDeadLetterStrategy
operator|.
name|DEFAULT_DEAD_LETTER_QUEUE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|FailoverDurableSubTransactionTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FailoverDurableSubTransactionTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TOPIC_NAME
init|=
literal|"Failover.WithTx"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TRANSPORT_URI
init|=
literal|"tcp://localhost:0"
decl_stmt|;
specifier|private
name|String
name|url
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
specifier|public
enum|enum
name|FailType
block|{
name|ON_DISPATCH
block|,
name|ON_ACK
block|,
name|ON_COMMIT
block|,
name|ON_DISPACH_WITH_REPLAY_DELAY
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|FailType
name|failType
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"failType=#{0}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|FailType
operator|.
name|ON_DISPATCH
block|}
block|,
block|{
name|FailType
operator|.
name|ON_DISPACH_WITH_REPLAY_DELAY
block|}
block|,
block|{
name|FailType
operator|.
name|ON_ACK
block|}
block|,
block|{
name|FailType
operator|.
name|ON_COMMIT
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stopBroker
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startBroker
parameter_list|(
name|boolean
name|deleteAllMessagesOnStartup
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|(
name|deleteAllMessagesOnStartup
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startBroker
parameter_list|(
name|boolean
name|deleteAllMessagesOnStartup
parameter_list|,
name|String
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|(
name|deleteAllMessagesOnStartup
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|deleteAllMessagesOnStartup
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBroker
argument_list|(
name|deleteAllMessagesOnStartup
argument_list|,
name|TRANSPORT_URI
argument_list|)
return|;
block|}
specifier|public
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|deleteAllMessagesOnStartup
parameter_list|,
name|String
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessagesOnStartup
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
comment|// faster redispatch
name|broker
operator|.
name|setKeepDurableSubsActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|url
operator|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|configureConnectionFactory
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|)
block|{
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setMaximumRedeliveries
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|FailType
operator|.
name|ON_DISPACH_WITH_REPLAY_DELAY
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
condition|)
block|{
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setRedeliveryDelay
argument_list|(
literal|0l
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testFailoverCommit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|dispatchedCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|errorAt
init|=
name|FailType
operator|.
name|ON_COMMIT
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
condition|?
literal|1
else|:
literal|9
decl_stmt|;
specifier|final
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
name|broker
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|FailType
operator|.
name|ON_COMMIT
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
operator|&&
name|dispatchedCount
operator|.
name|incrementAndGet
argument_list|()
operator|==
name|errorAt
condition|)
block|{
for|for
control|(
name|TransportConnection
name|transportConnection
range|:
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Whacking connection on commit: "
operator|+
name|transportConnection
argument_list|)
expr_stmt|;
name|transportConnection
operator|.
name|serviceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"ERROR NOW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|,
name|onePhase
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConsumerBrokerExchange
name|consumerExchange
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|FailType
operator|.
name|ON_ACK
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
operator|&&
name|ack
operator|.
name|getAckType
argument_list|()
operator|==
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
operator|&&
name|dispatchedCount
operator|.
name|incrementAndGet
argument_list|()
operator|==
name|errorAt
condition|)
block|{
for|for
control|(
name|TransportConnection
name|transportConnection
range|:
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Whacking connection on ack: "
operator|+
name|transportConnection
argument_list|)
expr_stmt|;
name|transportConnection
operator|.
name|serviceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"ERROR NOW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|acknowledge
argument_list|(
name|consumerExchange
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|postProcessDispatch
parameter_list|(
name|MessageDispatch
name|messageDispatch
parameter_list|)
block|{
name|super
operator|.
name|postProcessDispatch
argument_list|(
name|messageDispatch
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|FailType
operator|.
name|ON_DISPATCH
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
operator|||
name|FailType
operator|.
name|ON_DISPACH_WITH_REPLAY_DELAY
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
operator|)
operator|&&
name|dispatchedCount
operator|.
name|incrementAndGet
argument_list|()
operator|==
name|errorAt
condition|)
block|{
for|for
control|(
name|TransportConnection
name|transportConnection
range|:
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Whacking connection on dispatch: "
operator|+
name|transportConnection
argument_list|)
expr_stmt|;
name|transportConnection
operator|.
name|serviceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"ERROR NOW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_empty_stmt
unit|}         })
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cf
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cf
operator|.
name|setAlwaysSessionAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cf
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setDurableTopicPrefetch
argument_list|(
name|FailType
operator|.
name|ON_ACK
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
condition|?
literal|2
else|:
literal|100
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|configureConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|.
name|setClientID
argument_list|(
literal|"CID"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Topic
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|TOPIC_NAME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|destination
argument_list|,
literal|"DS"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|produceMessage
argument_list|(
name|destination
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Production done! "
operator|+
name|broker
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
name|destination
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|destination
argument_list|,
literal|"DS"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|AtomicBoolean
name|success
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|dupCheck
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
operator|!
name|success
operator|.
name|get
argument_list|()
condition|)
block|{
name|dupCheck
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed to receive on: "
operator|+
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Received: @"
operator|+
name|i
operator|+
literal|":"
operator|+
name|msg
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|", ID:"
operator|+
name|msg
operator|.
name|getIntProperty
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"single instance of: "
operator|+
name|i
argument_list|,
name|dupCheck
operator|.
name|add
argument_list|(
name|msg
operator|.
name|getIntProperty
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|i
operator|==
name|messageCount
condition|)
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|success
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TransactionRolledBackException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
end_while

begin_expr_stmt
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
name|dlq
init|=
name|broker
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|DEFAULT_DEAD_LETTER_QUEUE_NAME
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"DLQ: "
operator|+
name|dlq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"DLQ empty "
argument_list|,
literal|0
argument_list|,
name|dlq
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|org
operator|.
name|junit
operator|.
name|Test
specifier|public
name|void
name|testFailoverCommitListener
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicInteger
name|dispatchedCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|errorAt
init|=
name|FailType
operator|.
name|ON_ACK
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
condition|?
literal|1
else|:
literal|1
decl_stmt|;
specifier|final
name|int
name|messageCount
init|=
literal|10
decl_stmt|;
name|broker
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"commit request: "
operator|+
name|xid
argument_list|)
expr_stmt|;
if|if
condition|(
name|FailType
operator|.
name|ON_COMMIT
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
operator|&&
name|dispatchedCount
operator|.
name|incrementAndGet
argument_list|()
operator|==
name|errorAt
condition|)
block|{
for|for
control|(
name|TransportConnection
name|transportConnection
range|:
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Whacking connection on commit: "
operator|+
name|transportConnection
argument_list|)
expr_stmt|;
name|transportConnection
operator|.
name|serviceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"ERROR NOW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_else
else|else
block|{
name|super
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|,
name|onePhase
argument_list|)
expr_stmt|;
block|}
end_else

begin_function
unit|}                       @
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConsumerBrokerExchange
name|consumerExchange
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ack request: "
operator|+
name|ack
argument_list|)
expr_stmt|;
if|if
condition|(
name|FailType
operator|.
name|ON_ACK
operator|.
name|equals
argument_list|(
name|failType
argument_list|)
comment|/*&& ack.getAckType() == MessageAck.DELIVERED_ACK_TYPE*/
operator|&&
name|dispatchedCount
operator|.
name|incrementAndGet
argument_list|()
operator|==
name|errorAt
condition|)
block|{
for|for
control|(
name|TransportConnection
name|transportConnection
range|:
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
control|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Whacking connection on ack: "
operator|+
name|transportConnection
argument_list|)
expr_stmt|;
name|transportConnection
operator|.
name|serviceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"ERROR NOW"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|acknowledge
argument_list|(
name|consumerExchange
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_empty_stmt
unit|}          })
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cf
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|cf
operator|.
name|setAlwaysSessionAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|//cf.getPrefetchPolicy().setDurableTopicPrefetch(FailType.ON_ACK.equals(failType) ? 2 : 100);
end_comment

begin_expr_stmt
name|cf
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|.
name|setClientID
argument_list|(
literal|"CID"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Topic
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|TOPIC_NAME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|destination
argument_list|,
literal|"DS"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|produceMessage
argument_list|(
name|destination
argument_list|,
name|messageCount
operator|*
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Production done! "
operator|+
name|broker
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
name|destination
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|setClientID
argument_list|(
literal|"CID"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Session
name|receiveSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|consumer
operator|=
name|receiveSession
operator|.
name|createDurableSubscriber
argument_list|(
name|destination
argument_list|,
literal|"DS"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|AtomicBoolean
name|success
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|dupCheck
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|AtomicInteger
name|receivedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
try|try
block|{
name|int
name|i
init|=
name|receivedCount
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received: @"
operator|+
name|i
operator|+
literal|":"
operator|+
name|msg
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|", ID:"
operator|+
name|msg
operator|.
name|getIntProperty
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"single instance of: "
operator|+
name|i
argument_list|,
name|dupCheck
operator|.
name|add
argument_list|(
name|msg
operator|.
name|getIntProperty
argument_list|(
literal|"ID"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|receivedCount
operator|.
name|get
argument_list|()
operator|==
name|messageCount
condition|)
block|{
name|receiveSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|success
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TransactionRolledBackException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got expected"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
try|try
block|{
name|receiveSession
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|dupCheck
operator|.
name|clear
argument_list|()
expr_stmt|;
name|receivedCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_try
try|try
block|{
name|assertTrue
argument_list|(
literal|"committed ok"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|success
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_try

begin_decl_stmt
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
name|dlq
init|=
name|broker
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|DEFAULT_DEAD_LETTER_QUEUE_NAME
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"DLQ: "
operator|+
name|dlq
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"DLQ empty "
argument_list|,
literal|0
argument_list|,
name|dlq
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
name|void
name|produceMessage
parameter_list|(
name|Topic
name|destination
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|configureConnectionFactory
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|producerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|producerSession
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|producerSession
operator|.
name|createTextMessage
argument_list|(
literal|"Test message"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"ID"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

