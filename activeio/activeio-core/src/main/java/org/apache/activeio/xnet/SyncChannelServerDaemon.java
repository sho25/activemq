begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|xnet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|SyncChannelToSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|socket
operator|.
name|SocketSyncChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_class
specifier|public
class|class
name|SyncChannelServerDaemon
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SyncChannelServerDaemon
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SocketService
name|socketService
decl_stmt|;
specifier|private
name|InetAddress
name|address
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|int
name|timeout
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|URI
name|bindURI
decl_stmt|;
specifier|private
name|SyncChannelServer
name|server
decl_stmt|;
specifier|public
name|SyncChannelServerDaemon
parameter_list|(
name|SocketService
name|socketService
parameter_list|,
name|InetAddress
name|address
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|socketService
argument_list|,
name|address
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SyncChannelServerDaemon
parameter_list|(
name|String
name|name
parameter_list|,
name|SocketService
name|socketService
parameter_list|,
name|InetAddress
name|address
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|socketService
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"socketService is null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|socketService
operator|=
name|socketService
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
try|try
block|{
name|this
operator|.
name|bindURI
operator|=
operator|new
name|URI
argument_list|(
literal|"uri"
argument_list|,
literal|null
argument_list|,
name|address
operator|.
name|getHostName
argument_list|()
argument_list|,
name|port
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IllegalArgumentException
operator|)
operator|new
name|IllegalArgumentException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|SocketSyncChannelFactory
name|factory
init|=
operator|new
name|SocketSyncChannelFactory
argument_list|()
decl_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|server
operator|=
name|factory
operator|.
name|bindSyncChannel
argument_list|(
name|bindURI
argument_list|)
expr_stmt|;
name|port
operator|=
name|server
operator|.
name|getConnectURI
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|address
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|server
operator|.
name|getConnectURI
argument_list|()
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|stopped
operator|=
literal|false
expr_stmt|;
comment|//            server.setSoTimeout(timeout);
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Service failed to open socket"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setName
argument_list|(
literal|"service."
operator|+
name|name
operator|+
literal|"@"
operator|+
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|doStop
parameter_list|()
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|doFail
parameter_list|()
throws|throws
name|IOException
block|{
name|doStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setSoTimeout
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|SocketException
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
specifier|public
name|int
name|getSoTimeout
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|timeout
return|;
block|}
comment|/**      * Gets the inetAddress number that the      * daemon is listening on.      */
specifier|public
name|InetAddress
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
comment|/**      * Gets the port number that the      * daemon is listening on.      */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|shouldStop
argument_list|()
condition|)
block|{
name|Socket
name|socket
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SyncChannel
name|channel
init|=
operator|(
name|SyncChannel
operator|)
name|server
operator|.
name|accept
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
name|socket
operator|=
operator|new
name|SyncChannelToSocket
argument_list|(
name|channel
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldStop
argument_list|()
condition|)
block|{
comment|// the server service is responsible
comment|// for closing the socket.
name|this
operator|.
name|socketService
operator|.
name|service
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
comment|// we don't really care
name|log
operator|.
name|debug
argument_list|(
literal|"Socket timed-out"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unexpected error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Processed"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioException
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error cleaning up socked"
argument_list|,
name|ioException
argument_list|)
expr_stmt|;
block|}
name|server
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|stopped
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
name|stopped
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|boolean
name|shouldStop
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
block|}
end_class

end_unit

