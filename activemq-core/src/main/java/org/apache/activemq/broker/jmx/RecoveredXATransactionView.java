begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|XATransaction
import|;
end_import

begin_class
specifier|public
class|class
name|RecoveredXATransactionView
implements|implements
name|RecoveredXATransactionViewMBean
block|{
specifier|private
specifier|final
name|XATransaction
name|transaction
decl_stmt|;
specifier|public
name|RecoveredXATransactionView
parameter_list|(
specifier|final
name|ManagedRegionBroker
name|managedRegionBroker
parameter_list|,
specifier|final
name|XATransaction
name|transaction
parameter_list|)
block|{
name|this
operator|.
name|transaction
operator|=
name|transaction
expr_stmt|;
name|transaction
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|managedRegionBroker
operator|.
name|unregister
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|managedRegionBroker
operator|.
name|unregister
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
name|transaction
operator|.
name|getXid
argument_list|()
operator|.
name|getFormatId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|transaction
operator|.
name|getXid
argument_list|()
operator|.
name|getBranchQualifier
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|transaction
operator|.
name|getXid
argument_list|()
operator|.
name|getGlobalTransactionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|heuristicCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|transaction
operator|.
name|commit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|heuristicRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|transaction
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

