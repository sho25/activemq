begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|RedeliveryPolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
operator|.
name|RedeliveryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|scheduler
operator|.
name|JobSchedulerStoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ7002Test
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ7002Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|protected
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|JobSchedulerStoreImpl
name|store
decl_stmt|;
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
return|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
return|;
block|}
specifier|public
name|ActiveMQConnectionFactory
name|getConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connectionFactory
operator|==
literal|null
condition|)
block|{
name|connectionFactory
operator|=
name|createConnectionFactory
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have created a connection factory!"
argument_list|,
name|connectionFactory
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|connectionFactory
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
literal|"target/test/ScheduledJobsDB"
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|createSchedulerStore
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|BrokerService
name|service
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|service
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|service
operator|.
name|setJobSchedulerStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|service
operator|.
name|setSchedulerSupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|service
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RedeliveryPlugin
name|redeliveryPlugin
init|=
operator|new
name|RedeliveryPlugin
argument_list|()
decl_stmt|;
name|RedeliveryPolicy
name|brokerRedeliveryPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|brokerRedeliveryPolicy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|brokerRedeliveryPolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|brokerRedeliveryPolicy
operator|.
name|setMaximumRedeliveryDelay
argument_list|(
literal|300000
argument_list|)
expr_stmt|;
name|brokerRedeliveryPolicy
operator|.
name|setBackOffMultiplier
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|RedeliveryPolicyMap
name|redeliveryPolicyMap
init|=
operator|new
name|RedeliveryPolicyMap
argument_list|()
decl_stmt|;
name|redeliveryPolicyMap
operator|.
name|setDefaultEntry
argument_list|(
name|brokerRedeliveryPolicy
argument_list|)
expr_stmt|;
name|redeliveryPlugin
operator|.
name|setRedeliveryPolicyMap
argument_list|(
name|redeliveryPolicyMap
argument_list|)
expr_stmt|;
name|service
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
name|redeliveryPlugin
block|}
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
return|return
name|service
return|;
block|}
specifier|protected
name|ConsumerObject
name|getConsumer
parameter_list|(
name|int
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|RedeliveryPolicy
name|redeliveryPolicy
init|=
operator|new
name|RedeliveryPolicy
argument_list|()
decl_stmt|;
name|redeliveryPolicy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|redeliveryPolicy
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ActiveMQConnection
name|consumerConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|()
decl_stmt|;
name|consumerConnection
operator|.
name|setRedeliveryPolicy
argument_list|(
name|redeliveryPolicy
argument_list|)
expr_stmt|;
name|consumerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConnection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|consumerSession
operator|.
name|createQueue
argument_list|(
literal|"Consumer."
operator|+
name|id
operator|+
literal|".VirtualTopic.Orders"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|consumer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ConsumerObject
name|co
init|=
operator|new
name|ConsumerObject
argument_list|(
name|consumerSession
argument_list|,
name|consumer
argument_list|,
name|consumerConnection
argument_list|)
decl_stmt|;
return|return
name|co
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TestDuplicateJobIDs
parameter_list|()
throws|throws
name|Exception
block|{
name|ConsumerObject
name|consumer1
init|=
name|getConsumer
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ConsumerObject
name|consumer2
init|=
name|getConsumer
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|producerConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|()
decl_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//Session session = producerConnection.createSession(false, Session.CLIENT_ACKNOWLEDGE);
name|Session
name|session
init|=
name|producerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"VirtualTopic.Orders"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|TextMessage
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Test Me"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|Message
name|message1
init|=
name|consumer1
operator|.
name|getConsumer
argument_list|()
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|message1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got: "
operator|+
name|message1
argument_list|)
expr_stmt|;
name|Message
name|message2
init|=
name|consumer2
operator|.
name|getConsumer
argument_list|()
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|message2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got: "
operator|+
name|message2
argument_list|)
expr_stmt|;
comment|//Force rollback
name|consumer1
operator|.
name|getSession
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|consumer2
operator|.
name|getSession
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
comment|// Check the scheduled jobs here //
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|JobScheduler
name|js
init|=
name|brokerService
operator|.
name|getJobSchedulerStore
argument_list|()
operator|.
name|getJobScheduler
argument_list|(
literal|"JMS"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Job
argument_list|>
name|jobList
init|=
name|js
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|jobList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|jobList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|jobId1
init|=
name|jobList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|String
name|jobId2
init|=
name|jobList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getJobId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"FAIL: JobIDs are duplicates!"
argument_list|,
name|jobId1
operator|.
name|equals
argument_list|(
name|jobId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|ConsumerObject
block|{
name|Session
name|session
decl_stmt|;
name|MessageConsumer
name|consumer
decl_stmt|;
name|Connection
name|connection
decl_stmt|;
specifier|public
name|ConsumerObject
parameter_list|(
name|Session
name|session
parameter_list|,
name|MessageConsumer
name|consumer
parameter_list|,
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
specifier|public
name|void
name|setSession
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|MessageConsumer
name|getConsumer
parameter_list|()
block|{
return|return
name|consumer
return|;
block|}
specifier|public
name|void
name|setConsumer
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
specifier|public
name|void
name|setConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createSchedulerStore
parameter_list|(
name|File
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|=
operator|new
name|JobSchedulerStoreImpl
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setCheckpointInterval
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|store
operator|.
name|setCleanupInterval
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|//store.setJournalMaxFileLength(10 * 1024);
block|}
block|}
end_class

end_unit

