begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConnectionStateTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FailoverTransportTest
block|{
specifier|protected
name|Transport
name|transport
decl_stmt|;
specifier|protected
name|FailoverTransport
name|failoverTransport
decl_stmt|;
specifier|private
name|int
name|commandsReceived
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{ 	}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testCommandsIgnoredWhenOffline
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|transport
operator|=
name|createTransport
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|failoverTransport
argument_list|)
expr_stmt|;
name|ConnectionStateTracker
name|tracker
init|=
name|failoverTransport
operator|.
name|getStateTracker
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
name|ConnectionId
name|id
init|=
operator|new
name|ConnectionId
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|ConnectionInfo
name|connection
init|=
operator|new
name|ConnectionInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// Track a connection
name|tracker
operator|.
name|track
argument_list|(
name|connection
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|transport
operator|.
name|oneway
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
operator|new
name|ConnectionId
argument_list|(
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not have failed to remove this known connection"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|transport
operator|.
name|oneway
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
operator|new
name|ConnectionId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should not have failed to remove this unknown connection"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|transport
operator|.
name|oneway
argument_list|(
operator|new
name|MessageAck
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|transport
operator|.
name|oneway
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testResponsesSentWhenRequestForIgnoredCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|transport
operator|=
name|createTransport
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|failoverTransport
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have received a Response"
argument_list|,
name|this
operator|.
name|transport
operator|.
name|request
argument_list|(
name|ack
argument_list|)
argument_list|)
expr_stmt|;
name|RemoveInfo
name|info
init|=
operator|new
name|RemoveInfo
argument_list|(
operator|new
name|ConnectionId
argument_list|(
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have received a Response"
argument_list|,
name|this
operator|.
name|transport
operator|.
name|request
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Transport
name|createTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|Transport
name|transport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
operator|new
name|URI
argument_list|(
literal|"failover://(tcp://doesNotExist:1234)"
argument_list|)
argument_list|)
decl_stmt|;
name|transport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|commandsReceived
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{             }
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{             }
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{             }
block|}
argument_list|)
expr_stmt|;
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|failoverTransport
operator|=
name|transport
operator|.
name|narrow
argument_list|(
name|FailoverTransport
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
block|}
end_class

end_unit

