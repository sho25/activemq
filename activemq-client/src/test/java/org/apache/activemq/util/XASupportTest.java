begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMENDRSCAN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMFAIL
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMJOIN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMNOFLAGS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMONEPHASE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMRESUME
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMSTARTRSCAN
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMSUCCESS
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
operator|.
name|TMSUSPEND
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XASupportTest
block|{
specifier|private
specifier|final
name|int
name|flags
decl_stmt|;
specifier|private
specifier|final
name|String
name|expectedResult
decl_stmt|;
specifier|public
name|XASupportTest
parameter_list|(
name|int
name|flags
parameter_list|,
name|String
name|expectedResult
parameter_list|)
block|{
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|expectedResult
operator|=
name|expectedResult
expr_stmt|;
block|}
annotation|@
name|Parameters
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|p
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
comment|// single values from XAResource
name|add
argument_list|(
name|p
argument_list|,
name|TMENDRSCAN
argument_list|,
literal|"TMENDRSCAN"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMFAIL
argument_list|,
literal|"TMFAIL"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMJOIN
argument_list|,
literal|"TMJOIN"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMNOFLAGS
argument_list|,
literal|"TMNOFLAGS"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMONEPHASE
argument_list|,
literal|"TMONEPHASE"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMRESUME
argument_list|,
literal|"TMRESUME"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMSTARTRSCAN
argument_list|,
literal|"TMSTARTRSCAN"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMSUCCESS
argument_list|,
literal|"TMSUCCESS"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|,
name|TMSUSPEND
argument_list|,
literal|"TMSUSPEND"
argument_list|)
expr_stmt|;
comment|// combination of multiple flags
name|add
argument_list|(
name|p
argument_list|,
name|TMONEPHASE
operator||
name|TMSUCCESS
argument_list|,
literal|"TMONEPHASE | TMSUCCESS"
argument_list|)
expr_stmt|;
comment|// flags not specified in XAResource
name|add
argument_list|(
name|p
argument_list|,
name|TMSUCCESS
operator||
literal|0x00400000
argument_list|,
literal|"TMSUCCESS | 0x00400000"
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
specifier|static
name|void
name|add
parameter_list|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|p
parameter_list|,
name|int
name|flags
parameter_list|,
name|String
name|expectedResult
parameter_list|)
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|flags
block|,
name|expectedResult
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
name|XASupport
operator|.
name|toString
argument_list|(
name|flags
argument_list|)
argument_list|,
name|is
argument_list|(
name|expectedResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

