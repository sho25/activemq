begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Locker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SuppressReplyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LeaseLockerIOExceptionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|Expectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|Mockery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|States
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jmock
operator|.
name|lib
operator|.
name|legacy
operator|.
name|ClassImposteriser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCIOExceptionHandlerMockeryTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCIOExceptionHandlerMockeryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|HashMap
argument_list|<
name|Thread
argument_list|,
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testShutdownWithoutTransportRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockery
name|context
init|=
operator|new
name|Mockery
argument_list|()
block|{
block|{
name|setImposteriser
parameter_list|(
name|ClassImposteriser
operator|.
name|INSTANCE
parameter_list|)
constructor_decl|;
block|}
block|}
decl_stmt|;
name|Thread
operator|.
name|setDefaultUncaughtExceptionHandler
argument_list|(
operator|new
name|Thread
operator|.
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|uncaughtException
parameter_list|(
name|Thread
name|t
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unexpected exception {} on thread {}"
argument_list|,
name|e
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|BrokerService
name|brokerService
init|=
name|context
operator|.
name|mock
argument_list|(
name|BrokerService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|JDBCPersistenceAdapter
name|jdbcPersistenceAdapter
init|=
name|context
operator|.
name|mock
argument_list|(
name|JDBCPersistenceAdapter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Locker
name|locker
init|=
name|context
operator|.
name|mock
argument_list|(
name|Locker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|States
name|jdbcConn
init|=
name|context
operator|.
name|states
argument_list|(
literal|"jdbc"
argument_list|)
operator|.
name|startsAs
argument_list|(
literal|"down"
argument_list|)
decl_stmt|;
specifier|final
name|States
name|broker
init|=
name|context
operator|.
name|states
argument_list|(
literal|"broker"
argument_list|)
operator|.
name|startsAs
argument_list|(
literal|"started"
argument_list|)
decl_stmt|;
comment|// simulate jdbc up between hasLock and checkpoint, so hasLock fails to verify
name|context
operator|.
name|checking
argument_list|(
operator|new
name|Expectations
argument_list|()
block|{
block|{
name|allowing
argument_list|(
name|brokerService
argument_list|)
operator|.
name|isStarted
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|brokerService
argument_list|)
operator|.
name|isRestartAllowed
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|brokerService
argument_list|)
operator|.
name|setSystemExitOnShutdown
argument_list|(
name|with
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|brokerService
argument_list|)
operator|.
name|stopAllConnectors
argument_list|(
name|with
argument_list|(
name|any
argument_list|(
name|ServiceStopper
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|brokerService
argument_list|)
operator|.
name|getPersistenceAdapter
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
operator|.
name|allowIOResumption
argument_list|()
expr_stmt|;
name|allowing
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
operator|.
name|getLocker
argument_list|()
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
name|locker
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|locker
argument_list|)
operator|.
name|keepAlive
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|jdbcConn
operator|.
name|is
argument_list|(
literal|"down"
argument_list|)
argument_list|)
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|locker
argument_list|)
operator|.
name|keepAlive
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|jdbcConn
operator|.
name|is
argument_list|(
literal|"up"
argument_list|)
argument_list|)
expr_stmt|;
name|will
argument_list|(
name|returnValue
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
operator|.
name|checkpoint
argument_list|(
name|with
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|then
argument_list|(
name|jdbcConn
operator|.
name|is
argument_list|(
literal|"up"
argument_list|)
argument_list|)
expr_stmt|;
name|allowing
argument_list|(
name|brokerService
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|then
argument_list|(
name|broker
operator|.
name|is
argument_list|(
literal|"stopped"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|LeaseLockerIOExceptionHandler
name|underTest
init|=
operator|new
name|LeaseLockerIOExceptionHandler
argument_list|()
decl_stmt|;
name|underTest
operator|.
name|setBrokerService
argument_list|(
name|brokerService
argument_list|)
expr_stmt|;
try|try
block|{
name|underTest
operator|.
name|handle
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"except suppress reply ex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SuppressReplyException
name|expected
parameter_list|)
block|{         }
name|assertTrue
argument_list|(
literal|"broker stopped state triggered"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"broker state {}"
argument_list|,
name|broker
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|is
argument_list|(
literal|"stopped"
argument_list|)
operator|.
name|isActive
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|assertIsSatisfied
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

