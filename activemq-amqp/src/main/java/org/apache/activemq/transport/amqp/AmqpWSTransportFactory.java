begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_comment
comment|/**  * Factory for creating WebSocket aware AMQP Transports.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpWSTransportFactory
extends|extends
name|TransportFactory
implements|implements
name|BrokerServiceAware
block|{
specifier|private
name|BrokerService
name|brokerService
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|String
name|getDefaultWireFormatType
parameter_list|()
block|{
return|return
literal|"amqp"
return|;
block|}
annotation|@
name|Override
specifier|public
name|TransportServer
name|doBind
parameter_list|(
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"doBind() method not implemented! No Server over WS implemented."
argument_list|)
throw|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Transport
name|compositeConfigure
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|AmqpTransportFilter
name|amqpTransport
init|=
operator|new
name|AmqpTransportFilter
argument_list|(
name|transport
argument_list|,
name|format
argument_list|,
name|brokerService
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|wireFormatOptions
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"wireFormat."
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|amqpTransport
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|amqpTransport
operator|.
name|getWireFormat
argument_list|()
argument_list|,
name|wireFormatOptions
argument_list|)
expr_stmt|;
comment|// Now wrap the filter with the monitor
name|transport
operator|=
name|createInactivityMonitor
argument_list|(
name|amqpTransport
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|transport
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|compositeConfigure
argument_list|(
name|transport
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
comment|/**      * Factory method to create a new transport      *      * @throws IOException      * @throws UnknownHostException      */
annotation|@
name|Override
specifier|protected
name|Transport
name|createTransport
parameter_list|(
name|URI
name|location
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|UnknownHostException
throws|,
name|IOException
block|{
return|return
operator|new
name|AmqpWSTransport
argument_list|(
name|location
argument_list|,
name|wireFormat
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
block|}
specifier|protected
name|Transport
name|createInactivityMonitor
parameter_list|(
name|AmqpTransportFilter
name|transport
parameter_list|,
name|WireFormat
name|format
parameter_list|)
block|{
name|AmqpInactivityMonitor
name|monitor
init|=
operator|new
name|AmqpInactivityMonitor
argument_list|(
name|transport
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|transport
operator|.
name|setInactivityMonitor
argument_list|(
name|monitor
argument_list|)
expr_stmt|;
return|return
name|monitor
return|;
block|}
block|}
end_class

end_unit

