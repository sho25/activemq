begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|BaseDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|AbstractRuntimeConfigurationBroker
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyEntryUtil
block|{
comment|/**      * Find a matching PolicyEntry by looking up the Set of entries from the map and      * then comparing the destination to find the exact match.  This lets us be able to      * find the correct policy entry to update even though there might be multiple that      * are returned from the get method of the PolicyMap.      *      * @param runtimeBroker      * @param entry      * @return      */
specifier|public
specifier|static
name|PolicyEntry
name|findEntryByDestination
parameter_list|(
name|AbstractRuntimeConfigurationBroker
name|runtimeBroker
parameter_list|,
name|PolicyEntry
name|entry
parameter_list|)
block|{
name|PolicyMap
name|existingMap
init|=
name|runtimeBroker
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Set
argument_list|<
name|PolicyEntry
argument_list|>
name|existingEntries
init|=
name|existingMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
comment|//First just look up by the destination type to see if anything matches
name|PolicyEntry
name|existingEntry
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PolicyEntry
name|ee
range|:
name|existingEntries
control|)
block|{
if|if
condition|(
name|ee
operator|.
name|getDestination
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|existingEntry
operator|=
name|ee
expr_stmt|;
break|break;
block|}
block|}
return|return
name|existingEntry
return|;
block|}
comment|/**      * Utility to properly apply an updated policy entry to all existing destinations that      * match this entry.  The destination will only be updated if the policy is the exact      * policy (most specific) that matches the destination.      *      * @param runtimeBroker      * @param updatedEntry      */
specifier|public
specifier|static
name|void
name|applyRetrospectively
parameter_list|(
name|AbstractRuntimeConfigurationBroker
name|runtimeBroker
parameter_list|,
name|PolicyEntry
name|updatedEntry
parameter_list|)
block|{
name|PolicyEntryUtil
operator|.
name|applyRetrospectively
argument_list|(
name|runtimeBroker
argument_list|,
name|updatedEntry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * Utility to properly apply an updated policy entry to all existing destinations that      * match this entry.  The destination will only be updated if the policy is the exact      * policy (most specific) that matches the destination.      *      * The includedProperties List is optional and is used to specify a list of properties      * to apply retrospectively to the matching destinations. This allows only certain properties      * to be reapplied.  If the list is null then all properties will be applied.      *      * @param runtimeBroker      * @param updatedEntry      * @param includedProperties      */
specifier|public
specifier|static
name|void
name|applyRetrospectively
parameter_list|(
name|AbstractRuntimeConfigurationBroker
name|runtimeBroker
parameter_list|,
name|PolicyEntry
name|updatedEntry
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|includedProperties
parameter_list|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|runtimeBroker
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
for|for
control|(
name|Destination
name|destination
range|:
name|regionBroker
operator|.
name|getDestinations
argument_list|(
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
control|)
block|{
comment|//Look up the policy that applies to the destination
name|PolicyEntry
name|specificyPolicy
init|=
name|regionBroker
operator|.
name|getDestinationPolicy
argument_list|()
operator|.
name|getEntryFor
argument_list|(
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
decl_stmt|;
comment|//only update the destination if it matches the specific policy being updated
comment|//currently just an identity check which is what we want
if|if
condition|(
name|updatedEntry
operator|.
name|equals
argument_list|(
name|specificyPolicy
argument_list|)
condition|)
block|{
name|Destination
name|target
init|=
name|destination
decl_stmt|;
while|while
condition|(
name|target
operator|instanceof
name|DestinationFilter
condition|)
block|{
name|target
operator|=
operator|(
operator|(
name|DestinationFilter
operator|)
name|target
operator|)
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
comment|//If we are providing a list of properties to set then use them
comment|//to set eligible properties that are in the includedProperties list
if|if
condition|(
name|target
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|updatedEntry
operator|.
name|update
argument_list|(
operator|(
name|Queue
operator|)
name|target
argument_list|,
name|includedProperties
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|updatedEntry
operator|.
name|update
argument_list|(
operator|(
name|Topic
operator|)
name|target
argument_list|,
name|includedProperties
argument_list|)
expr_stmt|;
block|}
name|runtimeBroker
operator|.
name|debug
argument_list|(
literal|"applied update to:"
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

