begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
operator|.
name|DefaultJDBCAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * Stuck messages test client.  *<p/>  * Will kick of publisher and consumer simultaneously, and will usually result in stuck messages on the queue.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AMQ5266Test
block|{
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ5266Test
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|activemqURL
init|=
literal|"tcp://localhost:61617"
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|EmbeddedDataSource
name|dataSource
decl_stmt|;
specifier|public
name|int
name|messageSize
init|=
literal|1000
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|int
name|publisherMessagesPerThread
init|=
literal|1000
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|int
name|publisherThreadCount
init|=
literal|20
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|2
argument_list|)
specifier|public
name|int
name|consumerThreadsPerQueue
init|=
literal|5
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|3
argument_list|)
specifier|public
name|int
name|destMemoryLimit
init|=
literal|50
operator|*
literal|1024
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|4
argument_list|)
specifier|public
name|boolean
name|useCache
init|=
literal|true
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|5
argument_list|)
specifier|public
name|boolean
name|useDefaultStore
init|=
literal|false
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"#{0},producerThreads:{1},consumerThreads:{2},mL:{3},useCache:{4},useDefaultStore:{5}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|// jdbc
block|{
literal|1000
block|,
literal|20
block|,
literal|5
block|,
literal|50
operator|*
literal|1024
block|,
literal|true
block|,
literal|false
block|}
block|,
block|{
literal|100
block|,
literal|20
block|,
literal|5
block|,
literal|50
operator|*
literal|1024
block|,
literal|false
block|,
literal|false
block|}
block|,
block|{
literal|1000
block|,
literal|5
block|,
literal|20
block|,
literal|50
operator|*
literal|1024
block|,
literal|true
block|,
literal|false
block|}
block|,
block|{
literal|1000
block|,
literal|20
block|,
literal|20
block|,
literal|1024
operator|*
literal|1024
block|,
literal|true
block|,
literal|false
block|}
block|,
block|{
literal|1000
block|,
literal|100
block|,
literal|100
block|,
literal|1024
operator|*
literal|1024
block|,
literal|true
block|,
literal|false
block|}
block|,
comment|// default store
block|{
literal|1000
block|,
literal|20
block|,
literal|5
block|,
literal|50
operator|*
literal|1024
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|100
block|,
literal|20
block|,
literal|5
block|,
literal|50
operator|*
literal|1024
block|,
literal|false
block|,
literal|true
block|}
block|,
block|{
literal|1000
block|,
literal|5
block|,
literal|20
block|,
literal|50
operator|*
literal|1024
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|1000
block|,
literal|20
block|,
literal|20
block|,
literal|1024
operator|*
literal|1024
block|,
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|1000
block|,
literal|100
block|,
literal|100
block|,
literal|1024
operator|*
literal|1024
block|,
literal|true
block|,
literal|true
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|int
name|consumerBatchSize
init|=
literal|5
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|dataSource
operator|=
operator|new
name|EmbeddedDataSource
argument_list|()
expr_stmt|;
name|dataSource
operator|.
name|setDatabaseName
argument_list|(
literal|"target/derbyDb"
argument_list|)
expr_stmt|;
name|dataSource
operator|.
name|setCreateDatabase
argument_list|(
literal|"create"
argument_list|)
expr_stmt|;
name|JDBCPersistenceAdapter
name|jdbcPersistenceAdapter
init|=
operator|new
name|JDBCPersistenceAdapter
argument_list|()
decl_stmt|;
name|jdbcPersistenceAdapter
operator|.
name|setDataSource
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|jdbcPersistenceAdapter
operator|.
name|setUseLock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDefaultStore
condition|)
block|{
name|brokerService
operator|.
name|setPersistenceAdapter
argument_list|(
name|jdbcPersistenceAdapter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|KahaDBPersistenceAdapter
name|kahaDBPersistenceAdapter
init|=
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
name|kahaDBPersistenceAdapter
operator|.
name|setConcurrentStoreAndDispatchQueues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setUseConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// java.lang.IllegalArgumentException: Comparison method violates its general contract!
name|defaultEntry
operator|.
name|setMaxAuditDepth
argument_list|(
name|publisherThreadCount
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setEnableAudit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setUseCache
argument_list|(
name|useCache
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setMaxPageSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setOptimizedDispatch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setMemoryLimit
argument_list|(
name|destMemoryLimit
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|512
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|TransportConnector
name|transportConnector
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
decl_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|activemqURL
operator|=
name|transportConnector
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|dataSource
operator|.
name|setShutdownDatabase
argument_list|(
literal|"shutdown"
argument_list|)
expr_stmt|;
name|dataSource
operator|.
name|getConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|activemqQueues
init|=
literal|"activemq,activemq2"
decl_stmt|;
comment|//,activemq3,activemq4,activemq5,activemq6,activemq7,activemq8,activemq9";
name|int
name|consumerWaitForConsumption
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
name|ExportQueuePublisher
name|publisher
init|=
literal|null
decl_stmt|;
name|ExportQueueConsumer
name|consumer
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Publisher will publish "
operator|+
operator|(
name|publisherMessagesPerThread
operator|*
name|publisherThreadCount
operator|)
operator|+
literal|" messages to each queue specified."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"\nBuilding Publisher..."
argument_list|)
expr_stmt|;
name|publisher
operator|=
operator|new
name|ExportQueuePublisher
argument_list|(
name|activemqURL
argument_list|,
name|activemqQueues
argument_list|,
name|publisherMessagesPerThread
argument_list|,
name|publisherThreadCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Building Consumer..."
argument_list|)
expr_stmt|;
name|consumer
operator|=
operator|new
name|ExportQueueConsumer
argument_list|(
name|activemqURL
argument_list|,
name|activemqQueues
argument_list|,
name|consumerThreadsPerQueue
argument_list|,
name|consumerBatchSize
argument_list|,
name|publisherMessagesPerThread
operator|*
name|publisherThreadCount
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Publisher..."
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting Consumer..."
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|distinctPublishedCount
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting For Publisher Completion..."
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|waitForCompletion
argument_list|()
expr_stmt|;
name|List
name|publishedIds
init|=
name|publisher
operator|.
name|getIDs
argument_list|()
decl_stmt|;
name|distinctPublishedCount
operator|=
operator|new
name|TreeSet
argument_list|(
name|publishedIds
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Publisher Complete. Published: "
operator|+
name|publishedIds
operator|.
name|size
argument_list|()
operator|+
literal|", Distinct IDs Published: "
operator|+
name|distinctPublishedCount
argument_list|)
expr_stmt|;
name|long
name|endWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|consumerWaitForConsumption
decl_stmt|;
while|while
condition|(
operator|!
name|consumer
operator|.
name|completed
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endWait
condition|)
block|{
try|try
block|{
name|int
name|secs
init|=
call|(
name|int
call|)
argument_list|(
name|endWait
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|/
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting For Consumer Completion. Time left: "
operator|+
name|secs
operator|+
literal|" secs"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDefaultStore
condition|)
block|{
name|DefaultJDBCAdapter
operator|.
name|dumpTables
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"\nConsumer Complete: "
operator|+
name|consumer
operator|.
name|completed
argument_list|()
operator|+
literal|", Shutting Down."
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"DB Contents START"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|useDefaultStore
condition|)
block|{
name|DefaultJDBCAdapter
operator|.
name|dumpTables
argument_list|(
name|dataSource
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DB Contents END"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer Stats:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|consumer
operator|.
name|getIDs
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|idList
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|distinctConsumed
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|idList
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"   Queue: "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" -> Total Messages Consumed: "
operator|+
name|idList
operator|.
name|size
argument_list|()
operator|+
literal|", Distinct IDs Consumed: "
operator|+
name|distinctConsumed
argument_list|)
expr_stmt|;
name|int
name|diff
init|=
name|distinctPublishedCount
operator|-
name|distinctConsumed
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" ( "
operator|+
operator|(
name|diff
operator|>
literal|0
condition|?
name|diff
else|:
literal|"NO"
operator|)
operator|+
literal|" STUCK MESSAGES "
operator|+
literal|" ) "
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expect to get all messages!"
argument_list|,
literal|0
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|ExportQueuePublisher
block|{
specifier|private
specifier|final
name|String
name|amqUser
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_USER
decl_stmt|;
specifier|private
specifier|final
name|String
name|amqPassword
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_PASSWORD
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|activemqURL
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|activemqQueues
init|=
literal|null
decl_stmt|;
comment|// Collection of distinct IDs that the publisher has published.
comment|// After a message is published, its UUID will be written to this list for tracking.
comment|// This list of IDs (or distinct count) will be used to compare to the consumed list of IDs.
comment|//private Set<String> ids = Collections.synchronizedSet(new TreeSet<String>());
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PublisherThread
argument_list|>
name|threads
decl_stmt|;
specifier|public
name|ExportQueuePublisher
parameter_list|(
name|String
name|activemqURL
parameter_list|,
name|String
name|activemqQueues
parameter_list|,
name|int
name|messagesPerThread
parameter_list|,
name|int
name|threadCount
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|activemqURL
operator|=
name|activemqURL
expr_stmt|;
name|this
operator|.
name|activemqQueues
operator|=
name|activemqQueues
expr_stmt|;
name|threads
operator|=
operator|new
name|ArrayList
argument_list|<
name|PublisherThread
argument_list|>
argument_list|()
expr_stmt|;
comment|// Build the threads and tell them how many messages to publish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|PublisherThread
name|pt
init|=
operator|new
name|PublisherThread
argument_list|(
name|messagesPerThread
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|pt
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getIDs
parameter_list|()
block|{
return|return
name|ids
return|;
block|}
comment|// Kick off threads
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|PublisherThread
name|pt
range|:
name|threads
control|)
block|{
name|pt
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Wait for threads to complete. They will complete once they've published all of their messages.
specifier|public
name|void
name|waitForCompletion
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|PublisherThread
name|pt
range|:
name|threads
control|)
block|{
name|pt
operator|.
name|join
argument_list|()
expr_stmt|;
name|pt
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Session
name|newSession
parameter_list|(
name|QueueConnection
name|queueConnection
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|queueConnection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|QueueConnection
name|newQueueConnection
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connectionFactory
operator|==
literal|null
condition|)
block|{
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|amqUser
argument_list|,
name|amqPassword
argument_list|,
name|activemqURL
argument_list|)
expr_stmt|;
block|}
comment|// Set the redelivery count to -1 (infinite), or else messages will start dropping
comment|// after the queue has had a certain number of failures (default is 6)
name|RedeliveryPolicy
name|policy
init|=
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QueueConnection
name|amqConnection
init|=
name|connectionFactory
operator|.
name|createQueueConnection
argument_list|()
decl_stmt|;
name|amqConnection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|amqConnection
return|;
block|}
specifier|private
class|class
name|PublisherThread
extends|extends
name|Thread
block|{
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|QueueConnection
name|qc
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageProducer
name|mp
decl_stmt|;
specifier|private
name|PublisherThread
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
comment|// Each Thread has its own Connection and Session, so no sync worries
name|qc
operator|=
name|newQueueConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|newSession
argument_list|(
name|qc
argument_list|)
expr_stmt|;
comment|// In our code, when publishing to multiple queues,
comment|// we're using composite destinations like below
name|Queue
name|q
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|activemqQueues
argument_list|)
decl_stmt|;
name|mp
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// Loop until we've published enough messages
while|while
condition|(
name|count
operator|--
operator|>
literal|0
condition|)
block|{
name|TextMessage
name|tm
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|getMessageText
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|tm
operator|.
name|setStringProperty
argument_list|(
literal|"KEY"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// keep track of the key to compare against consumer
name|mp
operator|.
name|send
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Called by waitForCompletion
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|mp
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
try|try
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
try|try
block|{
name|qc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
block|}
block|}
name|String
name|messageText
decl_stmt|;
specifier|private
name|String
name|getMessageText
parameter_list|()
block|{
if|if
condition|(
name|messageText
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|messageText
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageSize
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
block|}
name|messageText
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|messageText
return|;
block|}
specifier|public
class|class
name|ExportQueueConsumer
block|{
specifier|private
specifier|final
name|String
name|amqUser
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_USER
decl_stmt|;
specifier|private
specifier|final
name|String
name|amqPassword
init|=
name|ActiveMQConnection
operator|.
name|DEFAULT_PASSWORD
decl_stmt|;
specifier|private
specifier|final
name|int
name|totalToExpect
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|activemqURL
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|activemqQueues
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|queues
init|=
literal|null
decl_stmt|;
comment|// Map of IDs that were consumed, keyed by queue name.
comment|// We'll compare these against what was published to know if any got stuck or dropped.
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|idsByQueue
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ConsumerThread
argument_list|>
argument_list|>
name|threads
decl_stmt|;
specifier|public
name|ExportQueueConsumer
parameter_list|(
name|String
name|activemqURL
parameter_list|,
name|String
name|activemqQueues
parameter_list|,
name|int
name|threadsPerQueue
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|int
name|totalToExpect
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|activemqURL
operator|=
name|activemqURL
expr_stmt|;
name|this
operator|.
name|activemqQueues
operator|=
name|activemqQueues
expr_stmt|;
name|this
operator|.
name|totalToExpect
operator|=
name|totalToExpect
expr_stmt|;
name|queues
operator|=
name|this
operator|.
name|activemqQueues
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|queues
index|[
name|i
index|]
operator|=
name|queues
index|[
name|i
index|]
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|threads
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ConsumerThread
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
comment|// For each queue, create a list of threads and set up the list of ids
for|for
control|(
name|String
name|q
range|:
name|queues
control|)
block|{
name|List
argument_list|<
name|ConsumerThread
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ConsumerThread
argument_list|>
argument_list|()
decl_stmt|;
name|idsByQueue
operator|.
name|put
argument_list|(
name|q
argument_list|,
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadsPerQueue
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|ConsumerThread
argument_list|(
name|q
argument_list|,
name|batchSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|threads
operator|.
name|put
argument_list|(
name|q
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getIDs
parameter_list|()
block|{
return|return
name|idsByQueue
return|;
block|}
comment|// Start the threads
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|List
argument_list|<
name|ConsumerThread
argument_list|>
name|list
range|:
name|threads
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ConsumerThread
name|ct
range|:
name|list
control|)
block|{
name|ct
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Tell the threads to stop
comment|// Then wait for them to stop
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|List
argument_list|<
name|ConsumerThread
argument_list|>
name|list
range|:
name|threads
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ConsumerThread
name|ct
range|:
name|list
control|)
block|{
name|ct
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|List
argument_list|<
name|ConsumerThread
argument_list|>
name|list
range|:
name|threads
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ConsumerThread
name|ct
range|:
name|list
control|)
block|{
name|ct
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Session
name|newSession
parameter_list|(
name|QueueConnection
name|queueConnection
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|queueConnection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|QueueConnection
name|newQueueConnection
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connectionFactory
operator|==
literal|null
condition|)
block|{
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|amqUser
argument_list|,
name|amqPassword
argument_list|,
name|activemqURL
argument_list|)
expr_stmt|;
block|}
comment|// Set the redelivery count to -1 (infinite), or else messages will start dropping
comment|// after the queue has had a certain number of failures (default is 6)
name|RedeliveryPolicy
name|policy
init|=
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QueueConnection
name|amqConnection
init|=
name|connectionFactory
operator|.
name|createQueueConnection
argument_list|()
decl_stmt|;
name|amqConnection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|amqConnection
return|;
block|}
specifier|public
name|boolean
name|completed
parameter_list|()
block|{
for|for
control|(
name|List
argument_list|<
name|ConsumerThread
argument_list|>
name|list
range|:
name|threads
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|ConsumerThread
name|ct
range|:
name|list
control|)
block|{
if|if
condition|(
name|ct
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"thread for {} is still alive."
argument_list|,
name|ct
operator|.
name|qName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
class|class
name|ConsumerThread
extends|extends
name|Thread
block|{
specifier|private
name|int
name|batchSize
decl_stmt|;
specifier|private
name|QueueConnection
name|qc
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|MessageConsumer
name|mc
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|idList
decl_stmt|;
specifier|private
name|boolean
name|shutdown
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|qName
decl_stmt|;
specifier|private
name|ConsumerThread
parameter_list|(
name|String
name|queueName
parameter_list|,
name|int
name|batchSize
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
comment|// Each thread has its own connection and session
name|qName
operator|=
name|queueName
expr_stmt|;
name|qc
operator|=
name|newQueueConnection
argument_list|()
expr_stmt|;
name|session
operator|=
name|newSession
argument_list|(
name|qc
argument_list|)
expr_stmt|;
name|Queue
name|q
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
operator|+
literal|"?consumer.prefetchSize="
operator|+
name|batchSize
argument_list|)
decl_stmt|;
name|mc
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|idList
operator|=
name|idsByQueue
operator|.
name|get
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
comment|// Keep reading as long as it hasn't been told to shutdown
while|while
condition|(
operator|!
name|shutdown
condition|)
block|{
if|if
condition|(
name|idList
operator|.
name|size
argument_list|()
operator|>=
name|totalToExpect
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got {} for q: {}"
argument_list|,
operator|+
name|idList
operator|.
name|size
argument_list|()
argument_list|,
name|qName
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
break|break;
block|}
name|Message
name|m
init|=
name|mc
operator|.
name|receive
argument_list|(
literal|4000
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
comment|// We received a non-null message, add the ID to our list
name|idList
operator|.
name|add
argument_list|(
name|m
operator|.
name|getStringProperty
argument_list|(
literal|"KEY"
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
comment|// If we've reached our batch size, commit the batch and reset the count
if|if
condition|(
name|count
operator|==
name|batchSize
condition|)
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// We didn't receive anything this time, commit any current batch and reset the count
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
comment|// Sleep a little before trying to read after not getting a message
try|try
block|{
if|if
condition|(
name|idList
operator|.
name|size
argument_list|()
operator|<
name|totalToExpect
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"did not receive on {}, current count: {}"
argument_list|,
name|qName
argument_list|,
name|idList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//sleep(3000);
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                             }
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// Once we exit, close everything
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
try|try
block|{
name|mc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
try|try
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
try|try
block|{
name|qc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                  }
block|}
block|}
block|}
block|}
end_class

end_unit

