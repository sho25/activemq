begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataArrayResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|XATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_class
specifier|public
class|class
name|KahaDBXARecoveryBrokerTest
extends|extends
name|XARecoveryBrokerTest
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|configureBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|KahaDBXARecoveryBrokerTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ActiveMQDestination
name|createDestination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
literal|"test"
argument_list|)
return|;
block|}
specifier|public
name|void
name|testPreparedTransactionRecoveredPurgeCommitOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Prepare 4 message sends.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Prepare
name|connection
operator|.
name|send
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|stopBroker
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|instanceof
name|KahaDBPersistenceAdapter
condition|)
block|{
name|KahaDBPersistenceAdapter
name|adapter
init|=
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setPurgeRecoveredXATransactionStrategy
argument_list|(
literal|"COMMIT"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting purgeRecoveredXATransactions to true on the KahaDBPersistenceAdapter"
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Setup the consumer and try receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Since committed ... they should get delivered.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|DataArrayResponse
name|dar
init|=
operator|(
name|DataArrayResponse
operator|)
name|response
decl_stmt|;
comment|//These should be purged so expect 0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPreparedTransactionRecoveredPurgeRollbackOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Prepare 4 message sends.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Prepare
name|connection
operator|.
name|send
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|stopBroker
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|instanceof
name|KahaDBPersistenceAdapter
condition|)
block|{
name|KahaDBPersistenceAdapter
name|adapter
init|=
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setPurgeRecoveredXATransactionStrategy
argument_list|(
literal|"ROLLBACK"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting purgeRecoveredXATransactions to true on the KahaDBPersistenceAdapter"
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Setup the consumer and try receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Since rolledback but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|DataArrayResponse
name|dar
init|=
operator|(
name|DataArrayResponse
operator|)
name|response
decl_stmt|;
comment|//These should be purged so expect 0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

