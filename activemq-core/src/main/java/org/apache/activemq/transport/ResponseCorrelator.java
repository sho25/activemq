begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Adds the incrementing sequence number to commands along with performing the corelation of  * responses to requests to create a blocking request-response semantics.  *   * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|ResponseCorrelator
extends|extends
name|TransportFilter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ResponseCorrelator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
name|requestMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastCommandId
init|=
literal|0
decl_stmt|;
specifier|synchronized
name|int
name|getNextCommandId
parameter_list|()
block|{
return|return
operator|++
name|lastCommandId
return|;
block|}
specifier|public
name|ResponseCorrelator
parameter_list|(
name|Transport
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|oneway
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|getNextCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|next
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FutureResponse
name|asyncRequest
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|getNextCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|FutureResponse
name|future
init|=
operator|new
name|FutureResponse
argument_list|()
decl_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|future
argument_list|)
expr_stmt|;
name|next
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
specifier|public
name|Response
name|request
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|FutureResponse
name|response
init|=
name|asyncRequest
argument_list|(
name|command
argument_list|)
decl_stmt|;
return|return
name|response
operator|.
name|getResult
argument_list|()
return|;
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|boolean
name|debug
init|=
name|log
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|FutureResponse
name|future
init|=
operator|(
name|FutureResponse
operator|)
name|requestMap
operator|.
name|remove
argument_list|(
operator|new
name|Integer
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|future
operator|!=
literal|null
condition|)
block|{
name|future
operator|.
name|set
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Received unexpected response for command id: "
operator|+
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getTransportListener
argument_list|()
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|next
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

