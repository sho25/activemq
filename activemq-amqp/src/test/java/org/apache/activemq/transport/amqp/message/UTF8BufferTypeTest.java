begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|AMQPDefinedTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|DecoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|EncoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|EncodingCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|PrimitiveTypeEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|codec
operator|.
name|ReadableBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test the UTF8Buffer type encoder  */
end_comment

begin_class
specifier|public
class|class
name|UTF8BufferTypeTest
block|{
specifier|private
specifier|final
name|UTF8BufferType
name|utf8BufferEncoding
decl_stmt|;
specifier|private
specifier|final
name|DecoderImpl
name|decoder
init|=
operator|new
name|DecoderImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|EncoderImpl
name|encoder
init|=
operator|new
name|EncoderImpl
argument_list|(
name|decoder
argument_list|)
decl_stmt|;
block|{
name|AMQPDefinedTypes
operator|.
name|registerAllTypes
parameter_list|(
name|decoder
parameter_list|,
name|encoder
parameter_list|)
constructor_decl|;
name|utf8BufferEncoding
operator|=
operator|new
name|UTF8BufferType
argument_list|(
name|encoder
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|register
parameter_list|(
name|utf8BufferEncoding
parameter_list|)
constructor_decl|;
block|}
specifier|private
name|String
name|smallString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
name|String
name|largeString
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
name|UTF8Buffer
name|smallBuffer
decl_stmt|;
specifier|private
name|UTF8Buffer
name|largeBuffer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|smallBuffer
operator|=
operator|new
name|UTF8Buffer
argument_list|(
name|smallString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|largeBuffer
operator|=
operator|new
name|UTF8Buffer
argument_list|(
name|largeString
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllEncodings
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|utf8BufferEncoding
operator|.
name|getAllEncodings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTypeClass
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|UTF8Buffer
operator|.
name|class
argument_list|,
name|utf8BufferEncoding
operator|.
name|getTypeClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCanonicalEncoding
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|utf8BufferEncoding
operator|.
name|getCanonicalEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEncodingForSmallUTF8Buffer
parameter_list|()
block|{
name|PrimitiveTypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
name|encoding
init|=
name|utf8BufferEncoding
operator|.
name|getEncoding
argument_list|(
name|smallBuffer
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|encoding
operator|instanceof
name|UTF8BufferType
operator|.
name|SmallUTF8BufferEncoding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|encoding
operator|.
name|getConstructorSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|smallBuffer
operator|.
name|getLength
argument_list|()
operator|+
name|Byte
operator|.
name|BYTES
argument_list|,
name|encoding
operator|.
name|getValueSize
argument_list|(
name|smallBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EncodingCodes
operator|.
name|STR8
argument_list|,
name|encoding
operator|.
name|getEncodingCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|encoding
operator|.
name|encodesJavaPrimitive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|utf8BufferEncoding
argument_list|,
name|encoding
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEncodingForLargeUTF8Buffer
parameter_list|()
block|{
name|PrimitiveTypeEncoding
argument_list|<
name|UTF8Buffer
argument_list|>
name|encoding
init|=
name|utf8BufferEncoding
operator|.
name|getEncoding
argument_list|(
name|largeBuffer
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|encoding
operator|instanceof
name|UTF8BufferType
operator|.
name|LargeUTF8BufferEncoding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|encoding
operator|.
name|getConstructorSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|largeBuffer
operator|.
name|getLength
argument_list|()
operator|+
name|Integer
operator|.
name|BYTES
argument_list|,
name|encoding
operator|.
name|getValueSize
argument_list|(
name|largeBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EncodingCodes
operator|.
name|STR32
argument_list|,
name|encoding
operator|.
name|getEncodingCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|encoding
operator|.
name|encodesJavaPrimitive
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|utf8BufferEncoding
argument_list|,
name|encoding
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodeDecodeEmptyStringBuffer
parameter_list|()
block|{
specifier|final
name|AmqpWritableBuffer
name|buffer
init|=
operator|new
name|AmqpWritableBuffer
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|setByteBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|writeObject
argument_list|(
operator|new
name|UTF8Buffer
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|getArrayLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|getArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getArrayLength
argument_list|()
argument_list|)
expr_stmt|;
name|ReadableBuffer
name|encoded
init|=
name|ReadableBuffer
operator|.
name|ByteBufferReader
operator|.
name|wrap
argument_list|(
name|copy
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|setBuffer
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Object
name|valueRead
init|=
name|decoder
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|valueRead
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|String
name|decodedString
init|=
operator|(
name|String
operator|)
name|valueRead
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|decodedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodeDecodeSmallBuffer
parameter_list|()
block|{
specifier|final
name|AmqpWritableBuffer
name|buffer
init|=
operator|new
name|AmqpWritableBuffer
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|setByteBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|writeObject
argument_list|(
name|smallBuffer
argument_list|)
expr_stmt|;
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|getArrayLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|getArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getArrayLength
argument_list|()
argument_list|)
expr_stmt|;
name|ReadableBuffer
name|encoded
init|=
name|ReadableBuffer
operator|.
name|ByteBufferReader
operator|.
name|wrap
argument_list|(
name|copy
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|setBuffer
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Object
name|valueRead
init|=
name|decoder
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|valueRead
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|String
name|decodedString
init|=
operator|(
name|String
operator|)
name|valueRead
decl_stmt|;
name|assertEquals
argument_list|(
name|smallString
argument_list|,
name|decodedString
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncodeDecodeLargeBuffer
parameter_list|()
block|{
specifier|final
name|AmqpWritableBuffer
name|buffer
init|=
operator|new
name|AmqpWritableBuffer
argument_list|()
decl_stmt|;
name|encoder
operator|.
name|setByteBuffer
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|encoder
operator|.
name|writeObject
argument_list|(
name|largeBuffer
argument_list|)
expr_stmt|;
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|buffer
operator|.
name|getArrayLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
operator|.
name|getArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getArrayLength
argument_list|()
argument_list|)
expr_stmt|;
name|ReadableBuffer
name|encoded
init|=
name|ReadableBuffer
operator|.
name|ByteBufferReader
operator|.
name|wrap
argument_list|(
name|copy
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|setBuffer
argument_list|(
name|encoded
argument_list|)
expr_stmt|;
name|Object
name|valueRead
init|=
name|decoder
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|valueRead
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|String
name|decodedString
init|=
operator|(
name|String
operator|)
name|valueRead
decl_stmt|;
name|assertEquals
argument_list|(
name|largeString
argument_list|,
name|decodedString
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

