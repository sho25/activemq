begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|management
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|j2ee
operator|.
name|statistics
operator|.
name|CountStatistic
import|;
end_import

begin_comment
comment|/**  * A count statistic implementation  *   * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|CountStatisticImpl
extends|extends
name|StatisticImpl
implements|implements
name|CountStatistic
block|{
specifier|private
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|CountStatisticImpl
name|parent
decl_stmt|;
specifier|public
name|CountStatisticImpl
parameter_list|(
name|CountStatisticImpl
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|CountStatisticImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|"count"
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CountStatisticImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|unit
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|unit
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
if|if
condition|(
name|isDoReset
argument_list|()
condition|)
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|counter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|counter
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCount
parameter_list|(
name|long
name|count
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|counter
operator|.
name|set
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
name|long
name|amount
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|counter
operator|.
name|addAndGet
argument_list|(
name|amount
argument_list|)
expr_stmt|;
name|updateSampleTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|add
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|increment
parameter_list|()
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|counter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|updateSampleTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|subtract
parameter_list|(
name|long
name|amount
parameter_list|)
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|counter
operator|.
name|addAndGet
argument_list|(
operator|-
name|amount
argument_list|)
expr_stmt|;
name|updateSampleTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|subtract
argument_list|(
name|amount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|decrement
parameter_list|()
block|{
if|if
condition|(
name|isEnabled
argument_list|()
condition|)
block|{
name|counter
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
name|updateSampleTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|decrement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|CountStatisticImpl
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|CountStatisticImpl
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|protected
name|void
name|appendFieldDescription
parameter_list|(
name|StringBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" count: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|counter
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|appendFieldDescription
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the average time period that elapses between counter increments      *         since the last reset.      */
specifier|public
name|double
name|getPeriod
parameter_list|()
block|{
name|double
name|count
init|=
name|counter
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|double
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getStartTime
argument_list|()
decl_stmt|;
return|return
name|time
operator|/
operator|(
name|count
operator|*
literal|1000.0
operator|)
return|;
block|}
comment|/**      * @return the number of times per second that the counter is incrementing      *         since the last reset.      */
specifier|public
name|double
name|getFrequency
parameter_list|()
block|{
name|double
name|count
init|=
name|counter
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|getStartTime
argument_list|()
decl_stmt|;
return|return
name|count
operator|*
literal|1000.0
operator|/
name|time
return|;
block|}
block|}
end_class

end_unit

