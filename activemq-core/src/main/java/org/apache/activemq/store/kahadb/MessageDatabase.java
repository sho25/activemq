begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerServiceAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|XATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAddMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaCommitCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaEntryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaLocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaPrepareCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveDestinationCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRemoveMessageCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaRollbackCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaSubscriptionCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaTraceCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaTransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaXATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
operator|.
name|BTreeIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|index
operator|.
name|BTreeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|DataFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Page
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|LockFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|LongMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|SequenceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|StringMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_class
specifier|public
class|class
name|MessageDatabase
extends|extends
name|ServiceSupport
implements|implements
name|BrokerServiceAware
block|{
specifier|protected
name|BrokerService
name|brokerService
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_LOG_SLOW_ACCESS_TIME
init|=
literal|"org.apache.activemq.store.kahadb.LOG_SLOW_ACCESS_TIME"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOG_SLOW_ACCESS_TIME
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|PROPERTY_LOG_SLOW_ACCESS_TIME
argument_list|,
literal|"500"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MessageDatabase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DATABASE_LOCKED_WAIT_DELAY
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CLOSED_STATE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OPEN_STATE
init|=
literal|2
decl_stmt|;
specifier|protected
class|class
name|Metadata
block|{
specifier|protected
name|Page
argument_list|<
name|Metadata
argument_list|>
name|page
decl_stmt|;
specifier|protected
name|int
name|state
decl_stmt|;
specifier|protected
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|destinations
decl_stmt|;
specifier|protected
name|Location
name|lastUpdate
decl_stmt|;
specifier|protected
name|Location
name|firstInProgressTransactionLocation
decl_stmt|;
specifier|public
name|void
name|read
parameter_list|(
name|DataInput
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|destinations
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|is
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|lastUpdate
operator|=
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastUpdate
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|is
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|firstInProgressTransactionLocation
operator|=
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstInProgressTransactionLocation
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|destinations
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastUpdate
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|lastUpdate
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstInProgressTransactionLocation
operator|!=
literal|null
condition|)
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|firstInProgressTransactionLocation
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|os
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|class
name|MetadataMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|Metadata
argument_list|>
block|{
specifier|public
name|Metadata
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|rc
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|rc
operator|.
name|read
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|Metadata
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|PageFile
name|pageFile
decl_stmt|;
specifier|protected
name|Journal
name|journal
decl_stmt|;
specifier|protected
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
specifier|protected
name|MetadataMarshaller
name|metadataMarshaller
init|=
operator|new
name|MetadataMarshaller
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|failIfDatabaseIsLocked
decl_stmt|;
specifier|protected
name|boolean
name|deleteAllMessages
decl_stmt|;
specifier|protected
name|File
name|directory
decl_stmt|;
specifier|protected
name|Thread
name|checkpointThread
decl_stmt|;
specifier|protected
name|boolean
name|enableJournalDiskSyncs
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|archiveDataLogs
decl_stmt|;
specifier|protected
name|File
name|directoryArchive
decl_stmt|;
name|long
name|checkpointInterval
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
name|long
name|cleanupInterval
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
name|int
name|journalMaxFileLength
init|=
name|Journal
operator|.
name|DEFAULT_MAX_FILE_LENGTH
decl_stmt|;
name|int
name|journalMaxWriteBatchSize
init|=
name|Journal
operator|.
name|DEFAULT_MAX_WRITE_BATCH_SIZE
decl_stmt|;
name|boolean
name|enableIndexWriteAsync
init|=
literal|false
decl_stmt|;
name|int
name|setIndexWriteBatchSize
init|=
name|PageFile
operator|.
name|DEFAULT_WRITE_BATCH_SIZE
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|opened
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|LockFile
name|lockFile
decl_stmt|;
specifier|private
name|boolean
name|ignoreMissingJournalfiles
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|indexCacheSize
init|=
literal|10000
decl_stmt|;
specifier|private
name|boolean
name|checkForCorruptJournalFiles
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|checksumJournalFiles
init|=
literal|false
decl_stmt|;
specifier|public
name|MessageDatabase
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|load
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
name|unload
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadPageFile
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
specifier|final
name|PageFile
name|pageFile
init|=
name|getPageFile
argument_list|()
decl_stmt|;
name|pageFile
operator|.
name|load
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pageFile
operator|.
name|getPageCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// First time this is created.. Initialize the metadata
name|Page
argument_list|<
name|Metadata
argument_list|>
name|page
init|=
name|tx
operator|.
name|allocate
argument_list|()
decl_stmt|;
assert|assert
name|page
operator|.
name|getPageId
argument_list|()
operator|==
literal|0
assert|;
name|page
operator|.
name|set
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|page
operator|=
name|page
expr_stmt|;
name|metadata
operator|.
name|state
operator|=
name|CLOSED_STATE
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Page
argument_list|<
name|Metadata
argument_list|>
name|page
init|=
name|tx
operator|.
name|load
argument_list|(
literal|0
argument_list|,
name|metadataMarshaller
argument_list|)
decl_stmt|;
name|metadata
operator|=
name|page
operator|.
name|get
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|page
operator|=
name|page
expr_stmt|;
block|}
name|metadata
operator|.
name|destinations
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|StoredDestinationMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pageFile
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Load up all the destinations since we need to scan all the indexes to figure out which journal files can be deleted.
comment|// Perhaps we should just keep an index of file
name|storedDestinations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|>
name|iterator
init|=
name|metadata
operator|.
name|destinations
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|StoredDestination
name|sd
init|=
name|loadStoredDestination
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|subscriptions
operator|!=
literal|null
argument_list|)
decl_stmt|;
name|storedDestinations
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|sd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startCheckpoint
parameter_list|()
block|{
name|checkpointThread
operator|=
operator|new
name|Thread
argument_list|(
literal|"ActiveMQ Journal Checkpoint Worker"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|long
name|lastCleanup
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|lastCheckpoint
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Sleep for a short time so we can periodically check
comment|// to see if we need to exit this thread.
name|long
name|sleepTime
init|=
name|Math
operator|.
name|min
argument_list|(
name|checkpointInterval
argument_list|,
literal|500
argument_list|)
decl_stmt|;
while|while
condition|(
name|opened
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|lastCleanup
operator|>=
name|cleanupInterval
condition|)
block|{
name|checkpointCleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lastCleanup
operator|=
name|now
expr_stmt|;
name|lastCheckpoint
operator|=
name|now
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|now
operator|-
name|lastCheckpoint
operator|>=
name|checkpointInterval
condition|)
block|{
name|checkpointCleanup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lastCheckpoint
operator|=
name|now
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Looks like someone really wants us to exit this thread...
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Checkpoint failed"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|handleIOException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|checkpointThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkpointThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @throws IOException 	 */
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|opened
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|getJournal
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|loadPageFile
argument_list|()
expr_stmt|;
name|startCheckpoint
argument_list|()
expr_stmt|;
name|recover
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|lock
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|lockFile
operator|==
literal|null
condition|)
block|{
name|File
name|lockFileName
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"lock"
argument_list|)
decl_stmt|;
name|lockFile
operator|=
operator|new
name|LockFile
argument_list|(
name|lockFileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|failIfDatabaseIsLocked
condition|)
block|{
name|lockFile
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|lockFile
operator|.
name|lock
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Database "
operator|+
name|lockFileName
operator|+
literal|" is locked... waiting "
operator|+
operator|(
name|DATABASE_LOCKED_WAIT_DELAY
operator|/
literal|1000
operator|)
operator|+
literal|" seconds for the database to be unlocked. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DATABASE_LOCKED_WAIT_DELAY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{                         }
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|lock
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteAllMessages
condition|)
block|{
name|getJournal
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|getJournal
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|getJournal
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|journal
operator|=
literal|null
expr_stmt|;
name|getPageFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Persistence store purged."
argument_list|)
expr_stmt|;
name|deleteAllMessages
operator|=
literal|false
expr_stmt|;
block|}
name|open
argument_list|()
expr_stmt|;
name|store
argument_list|(
operator|new
name|KahaTraceCommand
argument_list|()
operator|.
name|setMessage
argument_list|(
literal|"LOADED "
operator|+
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|opened
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|checkpointUpdate
argument_list|(
name|tx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|pageFile
operator|.
name|unload
argument_list|()
expr_stmt|;
name|metadata
operator|=
operator|new
name|Metadata
argument_list|()
expr_stmt|;
block|}
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
name|checkpointThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|lockFile
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|lockFile
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unload
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
if|if
condition|(
name|pageFile
operator|!=
literal|null
operator|&&
name|pageFile
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|metadata
operator|.
name|state
operator|=
name|CLOSED_STATE
expr_stmt|;
name|metadata
operator|.
name|firstInProgressTransactionLocation
operator|=
name|getFirstInProgressTxLocation
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return      */
specifier|private
name|Location
name|getFirstInProgressTxLocation
parameter_list|()
block|{
name|Location
name|l
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|inflightTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|l
operator|=
name|inflightTransactions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|preparedTransactions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Location
name|t
init|=
name|preparedTransactions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
operator|||
name|t
operator|.
name|compareTo
argument_list|(
name|l
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|l
operator|=
name|t
expr_stmt|;
block|}
block|}
return|return
name|l
return|;
block|}
comment|/**      * Move all the messages that were in the journal into long term storage. We      * just replay and do a checkpoint.      *       * @throws IOException      * @throws IOException      * @throws IllegalStateException      */
specifier|private
name|void
name|recover
parameter_list|()
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Location
name|recoveryPosition
init|=
name|getRecoveryPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|recoveryPosition
operator|!=
literal|null
condition|)
block|{
name|int
name|redoCounter
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recoverying from the journal ..."
argument_list|)
expr_stmt|;
while|while
condition|(
name|recoveryPosition
operator|!=
literal|null
condition|)
block|{
name|JournalCommand
name|message
init|=
name|load
argument_list|(
name|recoveryPosition
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|recoveryPosition
expr_stmt|;
name|process
argument_list|(
name|message
argument_list|,
name|recoveryPosition
argument_list|)
expr_stmt|;
name|redoCounter
operator|++
expr_stmt|;
name|recoveryPosition
operator|=
name|journal
operator|.
name|getNextLocation
argument_list|(
name|recoveryPosition
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovery replayed "
operator|+
name|redoCounter
operator|+
literal|" operations from the journal in "
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0f
operator|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
comment|// We may have to undo some index updates.
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|recoverIndex
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|recoverIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// It is possible index updates got applied before the journal updates..
comment|// in that case we need to removed references to messages that are not in the journal
specifier|final
name|Location
name|lastAppendLocation
init|=
name|journal
operator|.
name|getLastAppendLocation
argument_list|()
decl_stmt|;
name|long
name|undoCounter
init|=
literal|0
decl_stmt|;
comment|// Go through all the destinations to see if they have messages past the lastAppendLocation
for|for
control|(
name|StoredDestination
name|sd
range|:
name|storedDestinations
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// Find all the Locations that are>= than the last Append Location.
name|sd
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
operator|.
name|GTEVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|lastAppendLocation
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|matched
parameter_list|(
name|Location
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|sequenceId
range|:
name|matches
control|)
block|{
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
decl_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|undoCounter
operator|++
expr_stmt|;
comment|// TODO: do we need to modify the ack positions for the pub sub case?
block|}
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|undoCounter
operator|>
literal|0
condition|)
block|{
comment|// The rolledback operations are basically in flight journal writes.  To avoid getting these the end user
comment|// should do sync writes to the journal.
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolled back "
operator|+
name|undoCounter
operator|+
literal|" messages from the index in "
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0f
operator|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
name|undoCounter
operator|=
literal|0
expr_stmt|;
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
comment|// Lets be extra paranoid here and verify that all the datafiles being referenced
comment|// by the indexes still exists.
specifier|final
name|SequenceSet
name|ss
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
for|for
control|(
name|StoredDestination
name|sd
range|:
name|storedDestinations
operator|.
name|values
argument_list|()
control|)
block|{
comment|// Use a visitor to cut down the number of pages that we load
name|sd
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Location
name|first
parameter_list|,
name|Location
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
operator|!
name|ss
operator|.
name|contains
argument_list|(
literal|0
argument_list|,
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|!
name|ss
operator|.
name|contains
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|List
argument_list|<
name|Location
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|Location
name|l
range|:
name|keys
control|)
block|{
name|int
name|fileId
init|=
name|l
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
name|fileId
condition|)
block|{
name|ss
operator|.
name|add
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
name|last
operator|=
name|fileId
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|missingJournalFiles
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|ss
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|missingJournalFiles
operator|.
name|add
argument_list|(
operator|(
name|int
operator|)
name|ss
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|missingJournalFiles
operator|.
name|removeAll
argument_list|(
name|journal
operator|.
name|getFileMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|missingJournalFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Some journal files are missing: "
operator|+
name|missingJournalFiles
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|BTreeVisitor
operator|.
name|Predicate
argument_list|<
name|Location
argument_list|>
argument_list|>
name|missingPredicates
init|=
operator|new
name|ArrayList
argument_list|<
name|BTreeVisitor
operator|.
name|Predicate
argument_list|<
name|Location
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|missing
range|:
name|missingJournalFiles
control|)
block|{
name|missingPredicates
operator|.
name|add
argument_list|(
operator|new
name|BTreeVisitor
operator|.
name|BetweenVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
operator|new
name|Location
argument_list|(
name|missing
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|Location
argument_list|(
name|missing
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkForCorruptJournalFiles
condition|)
block|{
name|Collection
argument_list|<
name|DataFile
argument_list|>
name|dataFiles
init|=
name|journal
operator|.
name|getFileMap
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|DataFile
name|dataFile
range|:
name|dataFiles
control|)
block|{
name|int
name|id
init|=
name|dataFile
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
name|missingPredicates
operator|.
name|add
argument_list|(
operator|new
name|BTreeVisitor
operator|.
name|BetweenVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
operator|new
name|Location
argument_list|(
name|id
argument_list|,
name|dataFile
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Location
argument_list|(
name|id
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
name|dataFile
operator|.
name|getCorruptedBlocks
argument_list|()
operator|.
name|getHead
argument_list|()
decl_stmt|;
while|while
condition|(
name|seq
operator|!=
literal|null
condition|)
block|{
name|missingPredicates
operator|.
name|add
argument_list|(
operator|new
name|BTreeVisitor
operator|.
name|BetweenVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
operator|new
name|Location
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|seq
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Location
argument_list|(
name|id
argument_list|,
operator|(
name|int
operator|)
name|seq
operator|.
name|getLast
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|seq
operator|=
name|seq
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|missingPredicates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|StoredDestination
name|sd
range|:
name|storedDestinations
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|matches
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
operator|.
name|OrVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|missingPredicates
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|matched
parameter_list|(
name|Location
name|key
parameter_list|,
name|Long
name|value
parameter_list|)
block|{
name|matches
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// If somes message references are affected by the missing data files...
if|if
condition|(
operator|!
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// We either 'gracefully' recover dropping the missing messages or
comment|// we error out.
if|if
condition|(
name|ignoreMissingJournalfiles
condition|)
block|{
comment|// Update the index to remove the references to the missing data
for|for
control|(
name|Long
name|sequenceId
range|:
name|matches
control|)
block|{
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
decl_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|undoCounter
operator|++
expr_stmt|;
comment|// TODO: do we need to modify the ack positions for the pub sub case?
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Detected missing/corrupt journal files. "
operator|+
name|matches
operator|.
name|size
argument_list|()
operator|+
literal|" messages affected."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|end
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|undoCounter
operator|>
literal|0
condition|)
block|{
comment|// The rolledback operations are basically in flight journal writes.  To avoid getting these the end user
comment|// should do sync writes to the journal.
name|LOG
operator|.
name|info
argument_list|(
literal|"Detected missing/corrupt journal files.  Dropped "
operator|+
name|undoCounter
operator|+
literal|" messages from the index in "
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|1000.0f
operator|)
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Location
name|nextRecoveryPosition
decl_stmt|;
specifier|private
name|Location
name|lastRecoveryPosition
decl_stmt|;
specifier|public
name|void
name|incrementalRecover
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
if|if
condition|(
name|nextRecoveryPosition
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lastRecoveryPosition
operator|==
literal|null
condition|)
block|{
name|nextRecoveryPosition
operator|=
name|getRecoveryPosition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nextRecoveryPosition
operator|=
name|journal
operator|.
name|getNextLocation
argument_list|(
name|lastRecoveryPosition
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|nextRecoveryPosition
operator|!=
literal|null
condition|)
block|{
name|lastRecoveryPosition
operator|=
name|nextRecoveryPosition
expr_stmt|;
name|metadata
operator|.
name|lastUpdate
operator|=
name|lastRecoveryPosition
expr_stmt|;
name|JournalCommand
name|message
init|=
name|load
argument_list|(
name|lastRecoveryPosition
argument_list|)
decl_stmt|;
name|process
argument_list|(
name|message
argument_list|,
name|lastRecoveryPosition
argument_list|)
expr_stmt|;
name|nextRecoveryPosition
operator|=
name|journal
operator|.
name|getNextLocation
argument_list|(
name|lastRecoveryPosition
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Location
name|getLastUpdatePosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|metadata
operator|.
name|lastUpdate
return|;
block|}
specifier|private
name|Location
name|getRecoveryPosition
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If we need to recover the transactions..
if|if
condition|(
name|metadata
operator|.
name|firstInProgressTransactionLocation
operator|!=
literal|null
condition|)
block|{
return|return
name|metadata
operator|.
name|firstInProgressTransactionLocation
return|;
block|}
comment|// Perhaps there were no transactions...
if|if
condition|(
name|metadata
operator|.
name|lastUpdate
operator|!=
literal|null
condition|)
block|{
comment|// Start replay at the record after the last one recorded in the index file.
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
name|metadata
operator|.
name|lastUpdate
argument_list|)
return|;
block|}
comment|// This loads the first position.
return|return
name|journal
operator|.
name|getNextLocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|void
name|checkpointCleanup
parameter_list|(
specifier|final
name|boolean
name|cleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|opened
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|checkpointUpdate
argument_list|(
name|tx
argument_list|,
name|cleanup
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG_SLOW_ACCESS_TIME
operator|>
literal|0
operator|&&
name|end
operator|-
name|start
operator|>
name|LOG_SLOW_ACCESS_TIME
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Slow KahaDB access: cleanup took "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkpoint
parameter_list|(
name|Callback
name|closure
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|checkpointUpdate
argument_list|(
name|tx
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closure
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Methods call by the broker to update and query the store.
comment|// /////////////////////////////////////////////////////////////////
specifier|public
name|Location
name|store
parameter_list|(
name|JournalCommand
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|store
argument_list|(
name|data
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * All updated are are funneled through this method. The updates are converted      * to a JournalMessage which is logged to the journal and then the data from      * the JournalMessage is used to update the index just like it would be done      * during a recovery process.      */
specifier|public
name|Location
name|store
parameter_list|(
name|JournalCommand
name|data
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|int
name|size
init|=
name|data
operator|.
name|serializedSizeFramed
argument_list|()
decl_stmt|;
name|DataByteArrayOutputStream
name|os
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|(
name|size
operator|+
literal|1
argument_list|)
decl_stmt|;
name|os
operator|.
name|writeByte
argument_list|(
name|data
operator|.
name|type
argument_list|()
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeFramed
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Location
name|location
init|=
name|journal
operator|.
name|write
argument_list|(
name|os
operator|.
name|toByteSequence
argument_list|()
argument_list|,
name|sync
argument_list|)
decl_stmt|;
name|long
name|start2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|process
argument_list|(
name|data
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG_SLOW_ACCESS_TIME
operator|>
literal|0
operator|&&
name|end
operator|-
name|start
operator|>
name|LOG_SLOW_ACCESS_TIME
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Slow KahaDB access: Journal append took: "
operator|+
operator|(
name|start2
operator|-
name|start
operator|)
operator|+
literal|" ms, Index update took "
operator|+
operator|(
name|end
operator|-
name|start2
operator|)
operator|+
literal|" ms"
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|metadata
operator|.
name|lastUpdate
operator|=
name|location
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|checkpointThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"KahaDB: Recovering checkpoint thread after exception"
argument_list|)
expr_stmt|;
name|startCheckpoint
argument_list|()
expr_stmt|;
block|}
return|return
name|location
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"KahaDB failed to store to Journal"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|handleIOException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
block|}
comment|/**      * Loads a previously stored JournalMessage      *       * @param location      * @return      * @throws IOException      */
specifier|public
name|JournalCommand
name|load
parameter_list|(
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteSequence
name|data
init|=
name|journal
operator|.
name|read
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|DataByteArrayInputStream
name|is
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|byte
name|readByte
init|=
name|is
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|KahaEntryType
name|type
init|=
name|KahaEntryType
operator|.
name|valueOf
argument_list|(
name|readByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not load journal record. Invalid location: "
operator|+
name|location
argument_list|)
throw|;
block|}
name|JournalCommand
name|message
init|=
operator|(
name|JournalCommand
operator|)
name|type
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|mergeFramed
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Journaled record processing methods. Once the record is journaled,
comment|// these methods handle applying the index updates. These may be called
comment|// from the recovery method too so they need to be idempotent
comment|// /////////////////////////////////////////////////////////////////
name|void
name|process
parameter_list|(
name|JournalCommand
name|data
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|data
operator|.
name|visit
argument_list|(
operator|new
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaAddMessageCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaRemoveMessageCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaPrepareCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaCommitCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaRollbackCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaRemoveDestinationCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|KahaSubscriptionCommand
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|process
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaAddMessageCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|command
operator|.
name|hasTransactionInfo
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|getInflightTx
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|inflightTx
operator|.
name|add
argument_list|(
operator|new
name|AddOpperation
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
name|TransactionId
name|key
init|=
name|key
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|upadateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaRemoveMessageCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|command
operator|.
name|hasTransactionInfo
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|getInflightTx
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|inflightTx
operator|.
name|add
argument_list|(
operator|new
name|RemoveOpperation
argument_list|(
name|command
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaRemoveDestinationCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
specifier|final
name|KahaSubscriptionCommand
name|command
parameter_list|,
specifier|final
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
name|KahaCommitCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|TransactionId
name|key
init|=
name|key
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|inflightTx
init|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|inflightTx
operator|==
literal|null
condition|)
block|{
name|inflightTx
operator|=
name|preparedTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inflightTx
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|messagingTx
init|=
name|inflightTx
decl_stmt|;
name|pageFile
operator|.
name|tx
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Transaction
operator|.
name|Closure
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Operation
name|op
range|:
name|messagingTx
control|)
block|{
name|op
operator|.
name|execute
argument_list|(
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
name|KahaPrepareCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|TransactionId
name|key
init|=
name|key
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
block|{
name|preparedTransactions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|process
parameter_list|(
name|KahaRollbackCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
synchronized|synchronized
init|(
name|indexMutex
init|)
block|{
name|TransactionId
name|key
init|=
name|key
argument_list|(
name|command
operator|.
name|getTransactionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
name|preparedTransactions
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// These methods do the actual index updates.
comment|// /////////////////////////////////////////////////////////////////
specifier|protected
specifier|final
name|Object
name|indexMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|journalFilesBeingReplicated
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|void
name|upadateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaAddMessageCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
comment|// Skip adding the message to the index if this is a topic and there are
comment|// no subscriptions.
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
operator|&&
name|sd
operator|.
name|ackPositions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// Add the message.
name|long
name|id
init|=
name|sd
operator|.
name|nextMessageId
operator|++
decl_stmt|;
name|Long
name|previous
init|=
name|sd
operator|.
name|locationIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|location
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|previous
operator|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|previous
operator|==
literal|null
condition|)
block|{
name|sd
operator|.
name|orderIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|id
argument_list|,
operator|new
name|MessageKeys
argument_list|(
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the message ID as indexed, then the broker asked us to store a DUP
comment|// message.  Bad BOY!  Don't do it, and log a warning.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Duplicate message add attempt rejected. Message id: "
operator|+
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: consider just rolling back the tx.
name|sd
operator|.
name|messageIdIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// restore the previous value.. Looks like this was a redo of a previously
comment|// added message.  We don't want to assign it a new id as the other indexes would
comment|// be wrong..
comment|//
comment|// TODO: consider just rolling back the tx.
name|sd
operator|.
name|locationIndex
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|location
argument_list|,
name|previous
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaRemoveMessageCommand
name|command
parameter_list|,
name|Location
name|ackLocation
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|command
operator|.
name|hasSubscriptionKey
argument_list|()
condition|)
block|{
comment|// In the queue case we just remove the message from the index..
name|Long
name|sequenceId
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sequenceId
operator|!=
literal|null
condition|)
block|{
name|MessageKeys
name|keys
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|sequenceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|keys
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|keys
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// In the topic case we need remove the message once it's been acked
comment|// by all the subs
name|Long
name|sequence
init|=
name|sd
operator|.
name|messageIdIndex
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|command
operator|.
name|getMessageId
argument_list|()
argument_list|)
decl_stmt|;
comment|// Make sure it's a valid message id...
if|if
condition|(
name|sequence
operator|!=
literal|null
condition|)
block|{
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
name|Long
name|prev
init|=
name|sd
operator|.
name|subscriptionAcks
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|sequence
argument_list|)
decl_stmt|;
comment|// The following method handles deleting un-referenced messages.
name|removeAckLocation
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|,
name|prev
argument_list|)
expr_stmt|;
comment|// Add it to the new location set.
name|addAckLocation
argument_list|(
name|sd
argument_list|,
name|sequence
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaRemoveDestinationCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|orderIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|locationIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|locationIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|messageIdIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|subscriptions
operator|!=
literal|null
condition|)
block|{
name|sd
operator|.
name|subscriptions
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptions
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|subscriptions
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|sd
operator|.
name|subscriptionAcks
operator|.
name|unload
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|tx
operator|.
name|free
argument_list|(
name|sd
operator|.
name|subscriptionAcks
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|key
init|=
name|key
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|storedDestinations
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|destinations
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
name|void
name|updateIndex
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|KahaSubscriptionCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|sd
init|=
name|getStoredDestination
argument_list|(
name|command
operator|.
name|getDestination
argument_list|()
argument_list|,
name|tx
argument_list|)
decl_stmt|;
comment|// If set then we are creating it.. otherwise we are destroying the sub
if|if
condition|(
name|command
operator|.
name|hasSubscriptionInfo
argument_list|()
condition|)
block|{
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
name|sd
operator|.
name|subscriptions
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|long
name|ackLocation
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|command
operator|.
name|getRetroactive
argument_list|()
condition|)
block|{
name|ackLocation
operator|=
name|sd
operator|.
name|nextMessageId
operator|-
literal|1
expr_stmt|;
block|}
name|sd
operator|.
name|subscriptionAcks
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|,
name|ackLocation
argument_list|)
expr_stmt|;
name|addAckLocation
argument_list|(
name|sd
argument_list|,
name|ackLocation
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// delete the sub...
name|String
name|subscriptionKey
init|=
name|command
operator|.
name|getSubscriptionKey
argument_list|()
decl_stmt|;
name|sd
operator|.
name|subscriptions
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
expr_stmt|;
name|Long
name|prev
init|=
name|sd
operator|.
name|subscriptionAcks
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|removeAckLocation
argument_list|(
name|tx
argument_list|,
name|sd
argument_list|,
name|subscriptionKey
argument_list|,
name|prev
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param tx      * @throws IOException      */
name|void
name|checkpointUpdate
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|boolean
name|cleanup
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checkpoint started."
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|state
operator|=
name|OPEN_STATE
expr_stmt|;
name|metadata
operator|.
name|firstInProgressTransactionLocation
operator|=
name|getFirstInProgressTxLocation
argument_list|()
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pageFile
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|cleanup
condition|)
block|{
specifier|final
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|gcCandidateSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|journal
operator|.
name|getFileMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// Don't GC files under replication
if|if
condition|(
name|journalFilesBeingReplicated
operator|!=
literal|null
condition|)
block|{
name|gcCandidateSet
operator|.
name|removeAll
argument_list|(
name|journalFilesBeingReplicated
argument_list|)
expr_stmt|;
block|}
comment|// Don't GC files after the first in progress tx
name|Location
name|firstTxLocation
init|=
name|metadata
operator|.
name|lastUpdate
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|firstInProgressTransactionLocation
operator|!=
literal|null
condition|)
block|{
name|firstTxLocation
operator|=
name|metadata
operator|.
name|firstInProgressTransactionLocation
expr_stmt|;
block|}
if|if
condition|(
name|firstTxLocation
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
operator|!
name|gcCandidateSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Integer
name|last
init|=
name|gcCandidateSet
operator|.
name|last
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|>=
name|firstTxLocation
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
comment|// Go through all the destinations to see if any of them can remove GC candidates.
for|for
control|(
name|StoredDestination
name|sd
range|:
name|storedDestinations
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|gcCandidateSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// Use a visitor to cut down the number of pages that we load
name|sd
operator|.
name|locationIndex
operator|.
name|visit
argument_list|(
name|tx
argument_list|,
operator|new
name|BTreeVisitor
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|()
block|{
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|boolean
name|isInterestedInKeysBetween
parameter_list|(
name|Location
name|first
parameter_list|,
name|Location
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|subset
init|=
name|gcCandidateSet
operator|.
name|headSet
argument_list|(
name|second
operator|.
name|getDataFileId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|last
argument_list|()
operator|==
name|second
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|subset
init|=
name|gcCandidateSet
operator|.
name|tailSet
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|first
argument_list|()
operator|==
name|first
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
else|else
block|{
name|SortedSet
argument_list|<
name|Integer
argument_list|>
name|subset
init|=
name|gcCandidateSet
operator|.
name|subSet
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|,
name|second
operator|.
name|getDataFileId
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|first
argument_list|()
operator|==
name|first
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|first
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
operator|&&
name|subset
operator|.
name|last
argument_list|()
operator|==
name|second
operator|.
name|getDataFileId
argument_list|()
condition|)
block|{
name|subset
operator|.
name|remove
argument_list|(
name|second
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|subset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|List
argument_list|<
name|Location
argument_list|>
name|keys
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|values
parameter_list|)
block|{
for|for
control|(
name|Location
name|l
range|:
name|keys
control|)
block|{
name|int
name|fileId
init|=
name|l
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|!=
name|fileId
condition|)
block|{
name|gcCandidateSet
operator|.
name|remove
argument_list|(
name|fileId
argument_list|)
expr_stmt|;
name|last
operator|=
name|fileId
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gcCandidateSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cleanup removing the data files: "
operator|+
name|gcCandidateSet
argument_list|)
expr_stmt|;
name|journal
operator|.
name|removeDataFiles
argument_list|(
name|gcCandidateSet
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Checkpoint done."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|getJournalFilesBeingReplicated
parameter_list|()
block|{
return|return
name|journalFilesBeingReplicated
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// StoredDestination related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
name|storedDestinations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StoredDestination
argument_list|>
argument_list|()
decl_stmt|;
class|class
name|StoredSubscription
block|{
name|SubscriptionInfo
name|subscriptionInfo
decl_stmt|;
name|String
name|lastAckId
decl_stmt|;
name|Location
name|lastAckLocation
decl_stmt|;
name|Location
name|cursor
decl_stmt|;
block|}
specifier|static
class|class
name|MessageKeys
block|{
specifier|final
name|String
name|messageId
decl_stmt|;
specifier|final
name|Location
name|location
decl_stmt|;
specifier|public
name|MessageKeys
parameter_list|(
name|String
name|messageId
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|messageId
operator|=
name|messageId
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"["
operator|+
name|messageId
operator|+
literal|","
operator|+
name|location
operator|+
literal|"]"
return|;
block|}
block|}
specifier|static
specifier|protected
class|class
name|MessageKeysMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|MessageKeys
argument_list|>
block|{
specifier|static
specifier|final
name|MessageKeysMarshaller
name|INSTANCE
init|=
operator|new
name|MessageKeysMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|MessageKeys
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MessageKeys
argument_list|(
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|,
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|readPayload
argument_list|(
name|dataIn
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|MessageKeys
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|object
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|LocationMarshaller
operator|.
name|INSTANCE
operator|.
name|writePayload
argument_list|(
name|object
operator|.
name|location
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|StoredDestination
block|{
name|long
name|nextMessageId
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|orderIndex
decl_stmt|;
name|BTreeIndex
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
name|locationIndex
decl_stmt|;
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|messageIdIndex
decl_stmt|;
comment|// These bits are only set for Topics
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
name|subscriptions
decl_stmt|;
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|subscriptionAcks
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|subscriptionCursors
decl_stmt|;
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|ackPositions
decl_stmt|;
block|}
specifier|protected
class|class
name|StoredDestinationMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|StoredDestination
argument_list|>
block|{
specifier|public
name|StoredDestination
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|StoredDestination
name|value
init|=
operator|new
name|StoredDestination
argument_list|()
decl_stmt|;
name|value
operator|.
name|orderIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|locationIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|messageIdIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dataIn
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|value
operator|.
name|subscriptions
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|value
operator|.
name|subscriptionAcks
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|StoredDestination
name|value
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|orderIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|locationIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|messageIdIndex
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|subscriptions
operator|!=
literal|null
condition|)
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|subscriptions
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
operator|.
name|subscriptionAcks
operator|.
name|getPageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
class|class
name|LocationMarshaller
implements|implements
name|Marshaller
argument_list|<
name|Location
argument_list|>
block|{
specifier|final
specifier|static
name|LocationMarshaller
name|INSTANCE
init|=
operator|new
name|LocationMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|Location
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|Location
name|rc
init|=
operator|new
name|Location
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setDataFileId
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOffset
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|Location
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|object
operator|.
name|getDataFileId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|object
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getFixedSize
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
specifier|public
name|Location
name|deepCopy
parameter_list|(
name|Location
name|source
parameter_list|)
block|{
return|return
operator|new
name|Location
argument_list|(
name|source
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDeepCopySupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|static
class|class
name|KahaSubscriptionCommandMarshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|KahaSubscriptionCommand
argument_list|>
block|{
specifier|final
specifier|static
name|KahaSubscriptionCommandMarshaller
name|INSTANCE
init|=
operator|new
name|KahaSubscriptionCommandMarshaller
argument_list|()
decl_stmt|;
specifier|public
name|KahaSubscriptionCommand
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|KahaSubscriptionCommand
name|rc
init|=
operator|new
name|KahaSubscriptionCommand
argument_list|()
decl_stmt|;
name|rc
operator|.
name|mergeFramed
argument_list|(
operator|(
name|InputStream
operator|)
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|KahaSubscriptionCommand
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|writeFramed
argument_list|(
operator|(
name|OutputStream
operator|)
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|StoredDestination
name|getStoredDestination
parameter_list|(
name|KahaDestination
name|destination
parameter_list|,
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|key
init|=
name|key
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|StoredDestination
name|rc
init|=
name|storedDestinations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|boolean
name|topic
init|=
name|destination
operator|.
name|getType
argument_list|()
operator|==
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|TOPIC
operator|||
name|destination
operator|.
name|getType
argument_list|()
operator|==
name|KahaDestination
operator|.
name|DestinationType
operator|.
name|TEMP_TOPIC
decl_stmt|;
name|rc
operator|=
name|loadStoredDestination
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|topic
argument_list|)
expr_stmt|;
comment|// Cache it. We may want to remove/unload destinations from the
comment|// cache that are not used for a while
comment|// to reduce memory usage.
name|storedDestinations
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
comment|/**      * @param tx      * @param key      * @param topic      * @return      * @throws IOException      */
specifier|private
name|StoredDestination
name|loadStoredDestination
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|String
name|key
parameter_list|,
name|boolean
name|topic
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Try to load the existing indexes..
name|StoredDestination
name|rc
init|=
name|metadata
operator|.
name|destinations
operator|.
name|get
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
comment|// Brand new destination.. allocate indexes for it.
name|rc
operator|=
operator|new
name|StoredDestination
argument_list|()
expr_stmt|;
name|rc
operator|.
name|orderIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|locationIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|Location
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|rc
operator|.
name|subscriptions
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|KahaSubscriptionCommand
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|=
operator|new
name|BTreeIndex
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|(
name|pageFile
argument_list|,
name|tx
operator|.
name|allocate
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|destinations
operator|.
name|put
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
comment|// Configure the marshalers and load.
name|rc
operator|.
name|orderIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|orderIndex
operator|.
name|setValueMarshaller
argument_list|(
name|MessageKeysMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|orderIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|// Figure out the next key using the last entry in the destination.
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|lastEntry
init|=
name|rc
operator|.
name|orderIndex
operator|.
name|getLast
argument_list|(
name|tx
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastEntry
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|nextMessageId
operator|=
name|lastEntry
operator|.
name|getKey
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
name|rc
operator|.
name|locationIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|LocationMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|locationIndex
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|locationIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|messageIdIndex
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|// If it was a topic...
if|if
condition|(
name|topic
condition|)
block|{
name|rc
operator|.
name|subscriptions
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptions
operator|.
name|setValueMarshaller
argument_list|(
name|KahaSubscriptionCommandMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptions
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|setKeyMarshaller
argument_list|(
name|StringMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|setValueMarshaller
argument_list|(
name|LongMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|rc
operator|.
name|subscriptionAcks
operator|.
name|load
argument_list|(
name|tx
argument_list|)
expr_stmt|;
name|rc
operator|.
name|ackPositions
operator|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|rc
operator|.
name|subscriptionCursors
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|iterator
init|=
name|rc
operator|.
name|subscriptionAcks
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|addAckLocation
argument_list|(
name|rc
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|/**      * @param sd      * @param messageSequence      * @param subscriptionKey      */
specifier|private
name|void
name|addAckLocation
parameter_list|(
name|StoredDestination
name|sd
parameter_list|,
name|Long
name|messageSequence
parameter_list|,
name|String
name|subscriptionKey
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|hs
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|messageSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|hs
operator|==
literal|null
condition|)
block|{
name|hs
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|put
argument_list|(
name|messageSequence
argument_list|,
name|hs
argument_list|)
expr_stmt|;
block|}
name|hs
operator|.
name|add
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param tx      * @param sd      * @param subscriptionKey      * @param sequenceId      * @throws IOException      */
specifier|private
name|void
name|removeAckLocation
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|StoredDestination
name|sd
parameter_list|,
name|String
name|subscriptionKey
parameter_list|,
name|Long
name|sequenceId
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Remove the sub from the previous location set..
if|if
condition|(
name|sequenceId
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|hs
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|get
argument_list|(
name|sequenceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|hs
operator|!=
literal|null
condition|)
block|{
name|hs
operator|.
name|remove
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|hs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|firstSet
init|=
name|sd
operator|.
name|ackPositions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|sd
operator|.
name|ackPositions
operator|.
name|remove
argument_list|(
name|sequenceId
argument_list|)
expr_stmt|;
comment|// Did we just empty out the first set in the
comment|// ordered list of ack locations? Then it's time to
comment|// delete some messages.
if|if
condition|(
name|hs
operator|==
name|firstSet
condition|)
block|{
comment|// Find all the entries that need to get deleted.
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
argument_list|>
name|iterator
init|=
name|sd
operator|.
name|orderIndex
operator|.
name|iterator
argument_list|(
name|tx
argument_list|)
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|sequenceId
argument_list|)
operator|<=
literal|0
condition|)
block|{
comment|// We don't do the actually delete while we are
comment|// iterating the BTree since
comment|// iterating would fail.
name|deletes
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//no point in iterating the in-order sequences anymore
break|break;
block|}
block|}
comment|// Do the actual deletes.
for|for
control|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|MessageKeys
argument_list|>
name|entry
range|:
name|deletes
control|)
block|{
name|sd
operator|.
name|locationIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|location
argument_list|)
expr_stmt|;
name|sd
operator|.
name|messageIdIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|sd
operator|.
name|orderIndex
operator|.
name|remove
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|key
parameter_list|(
name|KahaDestination
name|destination
parameter_list|)
block|{
return|return
name|destination
operator|.
name|getType
argument_list|()
operator|.
name|getNumber
argument_list|()
operator|+
literal|":"
operator|+
name|destination
operator|.
name|getName
argument_list|()
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Transaction related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|protected
specifier|final
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|inflightTransactions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
name|preparedTransactions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|TransactionId
argument_list|,
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|getInflightTx
parameter_list|(
name|KahaTransactionInfo
name|info
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|TransactionId
name|key
init|=
name|key
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Operation
argument_list|>
name|tx
init|=
name|inflightTransactions
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tx
operator|==
literal|null
condition|)
block|{
name|tx
operator|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
expr_stmt|;
name|inflightTransactions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|tx
argument_list|)
expr_stmt|;
block|}
return|return
name|tx
return|;
block|}
specifier|private
name|TransactionId
name|key
parameter_list|(
name|KahaTransactionInfo
name|transactionInfo
parameter_list|)
block|{
if|if
condition|(
name|transactionInfo
operator|.
name|hasLocalTransacitonId
argument_list|()
condition|)
block|{
name|KahaLocalTransactionId
name|tx
init|=
name|transactionInfo
operator|.
name|getLocalTransacitonId
argument_list|()
decl_stmt|;
name|LocalTransactionId
name|rc
init|=
operator|new
name|LocalTransactionId
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setConnectionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
name|tx
operator|.
name|getConnectionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setValue
argument_list|(
name|tx
operator|.
name|getTransacitonId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
else|else
block|{
name|KahaXATransactionId
name|tx
init|=
name|transactionInfo
operator|.
name|getXaTransacitonId
argument_list|()
decl_stmt|;
name|XATransactionId
name|rc
init|=
operator|new
name|XATransactionId
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setBranchQualifier
argument_list|(
name|tx
operator|.
name|getBranchQualifier
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setGlobalTransactionId
argument_list|(
name|tx
operator|.
name|getGlobalTransactionId
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setFormatId
argument_list|(
name|tx
operator|.
name|getFormatId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
specifier|abstract
class|class
name|Operation
block|{
specifier|final
name|Location
name|location
decl_stmt|;
specifier|public
name|Operation
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|Location
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|abstract
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
class|class
name|AddOpperation
extends|extends
name|Operation
block|{
specifier|final
name|KahaAddMessageCommand
name|command
decl_stmt|;
specifier|public
name|AddOpperation
parameter_list|(
name|KahaAddMessageCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|upadateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KahaAddMessageCommand
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
block|}
class|class
name|RemoveOpperation
extends|extends
name|Operation
block|{
specifier|final
name|KahaRemoveMessageCommand
name|command
decl_stmt|;
specifier|public
name|RemoveOpperation
parameter_list|(
name|KahaRemoveMessageCommand
name|command
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|super
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|updateIndex
argument_list|(
name|tx
argument_list|,
name|command
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
specifier|public
name|KahaRemoveMessageCommand
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Initialization related implementation methods.
comment|// /////////////////////////////////////////////////////////////////
specifier|private
name|PageFile
name|createPageFile
parameter_list|()
block|{
name|PageFile
name|index
init|=
operator|new
name|PageFile
argument_list|(
name|directory
argument_list|,
literal|"db"
argument_list|)
decl_stmt|;
name|index
operator|.
name|setEnableWriteThread
argument_list|(
name|isEnableIndexWriteAsync
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setWriteBatchSize
argument_list|(
name|getIndexWriteBatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|.
name|setPageCacheSize
argument_list|(
name|indexCacheSize
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
specifier|private
name|Journal
name|createJournal
parameter_list|()
throws|throws
name|IOException
block|{
name|Journal
name|manager
init|=
operator|new
name|Journal
argument_list|()
decl_stmt|;
name|manager
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setMaxFileLength
argument_list|(
name|getJournalMaxFileLength
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setCheckForCorruptionOnStartup
argument_list|(
name|checkForCorruptJournalFiles
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setChecksum
argument_list|(
name|checksumJournalFiles
operator|||
name|checkForCorruptJournalFiles
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setWriteBatchSize
argument_list|(
name|getJournalMaxWriteBatchSize
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setArchiveDataLogs
argument_list|(
name|isArchiveDataLogs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDirectoryArchive
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|getDirectoryArchive
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDirectoryArchive
argument_list|(
name|getDirectoryArchive
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|manager
return|;
block|}
specifier|public
name|int
name|getJournalMaxWriteBatchSize
parameter_list|()
block|{
return|return
name|journalMaxWriteBatchSize
return|;
block|}
specifier|public
name|void
name|setJournalMaxWriteBatchSize
parameter_list|(
name|int
name|journalMaxWriteBatchSize
parameter_list|)
block|{
name|this
operator|.
name|journalMaxWriteBatchSize
operator|=
name|journalMaxWriteBatchSize
expr_stmt|;
block|}
specifier|public
name|File
name|getDirectory
parameter_list|()
block|{
return|return
name|directory
return|;
block|}
specifier|public
name|void
name|setDirectory
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|directory
operator|=
name|directory
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDeleteAllMessages
parameter_list|()
block|{
return|return
name|deleteAllMessages
return|;
block|}
specifier|public
name|void
name|setDeleteAllMessages
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|)
block|{
name|this
operator|.
name|deleteAllMessages
operator|=
name|deleteAllMessages
expr_stmt|;
block|}
specifier|public
name|void
name|setIndexWriteBatchSize
parameter_list|(
name|int
name|setIndexWriteBatchSize
parameter_list|)
block|{
name|this
operator|.
name|setIndexWriteBatchSize
operator|=
name|setIndexWriteBatchSize
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexWriteBatchSize
parameter_list|()
block|{
return|return
name|setIndexWriteBatchSize
return|;
block|}
specifier|public
name|void
name|setEnableIndexWriteAsync
parameter_list|(
name|boolean
name|enableIndexWriteAsync
parameter_list|)
block|{
name|this
operator|.
name|enableIndexWriteAsync
operator|=
name|enableIndexWriteAsync
expr_stmt|;
block|}
name|boolean
name|isEnableIndexWriteAsync
parameter_list|()
block|{
return|return
name|enableIndexWriteAsync
return|;
block|}
specifier|public
name|boolean
name|isEnableJournalDiskSyncs
parameter_list|()
block|{
return|return
name|enableJournalDiskSyncs
return|;
block|}
specifier|public
name|void
name|setEnableJournalDiskSyncs
parameter_list|(
name|boolean
name|syncWrites
parameter_list|)
block|{
name|this
operator|.
name|enableJournalDiskSyncs
operator|=
name|syncWrites
expr_stmt|;
block|}
specifier|public
name|long
name|getCheckpointInterval
parameter_list|()
block|{
return|return
name|checkpointInterval
return|;
block|}
specifier|public
name|void
name|setCheckpointInterval
parameter_list|(
name|long
name|checkpointInterval
parameter_list|)
block|{
name|this
operator|.
name|checkpointInterval
operator|=
name|checkpointInterval
expr_stmt|;
block|}
specifier|public
name|long
name|getCleanupInterval
parameter_list|()
block|{
return|return
name|cleanupInterval
return|;
block|}
specifier|public
name|void
name|setCleanupInterval
parameter_list|(
name|long
name|cleanupInterval
parameter_list|)
block|{
name|this
operator|.
name|cleanupInterval
operator|=
name|cleanupInterval
expr_stmt|;
block|}
specifier|public
name|void
name|setJournalMaxFileLength
parameter_list|(
name|int
name|journalMaxFileLength
parameter_list|)
block|{
name|this
operator|.
name|journalMaxFileLength
operator|=
name|journalMaxFileLength
expr_stmt|;
block|}
specifier|public
name|int
name|getJournalMaxFileLength
parameter_list|()
block|{
return|return
name|journalMaxFileLength
return|;
block|}
specifier|public
name|PageFile
name|getPageFile
parameter_list|()
block|{
if|if
condition|(
name|pageFile
operator|==
literal|null
condition|)
block|{
name|pageFile
operator|=
name|createPageFile
argument_list|()
expr_stmt|;
block|}
return|return
name|pageFile
return|;
block|}
specifier|public
name|Journal
name|getJournal
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|journal
operator|==
literal|null
condition|)
block|{
name|journal
operator|=
name|createJournal
argument_list|()
expr_stmt|;
block|}
return|return
name|journal
return|;
block|}
specifier|public
name|boolean
name|isFailIfDatabaseIsLocked
parameter_list|()
block|{
return|return
name|failIfDatabaseIsLocked
return|;
block|}
specifier|public
name|void
name|setFailIfDatabaseIsLocked
parameter_list|(
name|boolean
name|failIfDatabaseIsLocked
parameter_list|)
block|{
name|this
operator|.
name|failIfDatabaseIsLocked
operator|=
name|failIfDatabaseIsLocked
expr_stmt|;
block|}
specifier|public
name|boolean
name|isIgnoreMissingJournalfiles
parameter_list|()
block|{
return|return
name|ignoreMissingJournalfiles
return|;
block|}
specifier|public
name|void
name|setIgnoreMissingJournalfiles
parameter_list|(
name|boolean
name|ignoreMissingJournalfiles
parameter_list|)
block|{
name|this
operator|.
name|ignoreMissingJournalfiles
operator|=
name|ignoreMissingJournalfiles
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexCacheSize
parameter_list|()
block|{
return|return
name|indexCacheSize
return|;
block|}
specifier|public
name|void
name|setIndexCacheSize
parameter_list|(
name|int
name|indexCacheSize
parameter_list|)
block|{
name|this
operator|.
name|indexCacheSize
operator|=
name|indexCacheSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCheckForCorruptJournalFiles
parameter_list|()
block|{
return|return
name|checkForCorruptJournalFiles
return|;
block|}
specifier|public
name|void
name|setCheckForCorruptJournalFiles
parameter_list|(
name|boolean
name|checkForCorruptJournalFiles
parameter_list|)
block|{
name|this
operator|.
name|checkForCorruptJournalFiles
operator|=
name|checkForCorruptJournalFiles
expr_stmt|;
block|}
specifier|public
name|boolean
name|isChecksumJournalFiles
parameter_list|()
block|{
return|return
name|checksumJournalFiles
return|;
block|}
specifier|public
name|void
name|setChecksumJournalFiles
parameter_list|(
name|boolean
name|checksumJournalFiles
parameter_list|)
block|{
name|this
operator|.
name|checksumJournalFiles
operator|=
name|checksumJournalFiles
expr_stmt|;
block|}
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
block|}
comment|/**      * @return the archiveDataLogs      */
specifier|public
name|boolean
name|isArchiveDataLogs
parameter_list|()
block|{
return|return
name|this
operator|.
name|archiveDataLogs
return|;
block|}
comment|/**      * @param archiveDataLogs the archiveDataLogs to set      */
specifier|public
name|void
name|setArchiveDataLogs
parameter_list|(
name|boolean
name|archiveDataLogs
parameter_list|)
block|{
name|this
operator|.
name|archiveDataLogs
operator|=
name|archiveDataLogs
expr_stmt|;
block|}
comment|/**      * @return the directoryArchive      */
specifier|public
name|File
name|getDirectoryArchive
parameter_list|()
block|{
return|return
name|this
operator|.
name|directoryArchive
return|;
block|}
comment|/**      * @param directoryArchive the directoryArchive to set      */
specifier|public
name|void
name|setDirectoryArchive
parameter_list|(
name|File
name|directoryArchive
parameter_list|)
block|{
name|this
operator|.
name|directoryArchive
operator|=
name|directoryArchive
expr_stmt|;
block|}
block|}
end_class

end_unit

