begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SharedDeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ3436Test
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ3436Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|PersistenceAdapter
name|adapter
decl_stmt|;
specifier|private
name|boolean
name|useCache
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|prioritizeMessages
init|=
literal|true
decl_stmt|;
specifier|protected
name|PersistenceAdapter
name|createPersistenceAdapter
parameter_list|(
name|boolean
name|delete
parameter_list|)
throws|throws
name|Exception
block|{
name|KahaDBPersistenceAdapter
name|adapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setConcurrentStoreAndDispatchQueues
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setConcurrentStoreAndDispatchTopics
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
return|return
name|adapter
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
literal|"priorityTest"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|adapter
operator|=
name|createPersistenceAdapter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setPrioritizedMessages
argument_list|(
name|prioritizeMessages
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseCache
argument_list|(
name|useCache
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// do not process expired for one test
name|PolicyEntry
name|ignoreExpired
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|SharedDeadLetterStrategy
name|ignoreExpiredStrategy
init|=
operator|new
name|SharedDeadLetterStrategy
argument_list|()
decl_stmt|;
name|ignoreExpiredStrategy
operator|.
name|setProcessExpired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ignoreExpired
operator|.
name|setDeadLetterStrategy
argument_list|(
name|ignoreExpiredStrategy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPriorityWhenConsumerCreatedBeforeProduction
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|messageCount
init|=
literal|200
decl_stmt|;
name|URI
name|failoverUri
init|=
operator|new
name|URI
argument_list|(
literal|"vm://priorityTest?jms.prefetchPolicy.all=1"
argument_list|)
decl_stmt|;
name|ActiveMQQueue
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST?consumer.dispatchAsync=false"
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|failoverUri
argument_list|)
decl_stmt|;
name|cf
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Create producer
name|ActiveMQConnection
name|producerConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|producerConnection
operator|.
name|setMessagePrioritySupported
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|producerSession
init|=
name|producerConnection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|producerSession
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|consumer
decl_stmt|;
comment|// Create consumer on separate connection
name|ActiveMQConnection
name|consumerConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consumerConnection
operator|.
name|setMessagePrioritySupported
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ActiveMQSession
name|consumerSession
init|=
operator|(
name|ActiveMQSession
operator|)
name|consumerConnection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|consumer
operator|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
comment|// Produce X number of messages with a session commit after each message
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|producerSession
operator|.
name|createTextMessage
argument_list|(
literal|"Test message #"
operator|+
name|i
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|random
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|,
literal|45
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|producerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// ***************************************************
comment|// If we create the consumer here instead of above, the
comment|// the messages will be consumed in priority order
comment|// ***************************************************
comment|//consumer = (ActiveMQMessageConsumer) consumerSession.createConsumer(dest);
comment|// Consume all of the messages we produce using a listener.
comment|// Don't exit until we get all the messages.
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|messageCount
argument_list|)
decl_stmt|;
specifier|final
name|StringBuffer
name|failureMessage
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
name|int
name|lowestPrioritySeen
init|=
literal|10
decl_stmt|;
name|boolean
name|firstMessage
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
try|try
block|{
name|int
name|currentPriority
init|=
name|msg
operator|.
name|getJMSPriority
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|currentPriority
operator|+
literal|"<="
operator|+
name|lowestPrioritySeen
argument_list|)
expr_stmt|;
comment|// Ignore the first message priority since it is prefetched
comment|// and is out of order by design
if|if
condition|(
name|firstMessage
operator|==
literal|true
condition|)
block|{
name|firstMessage
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring first message since it was prefetched"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Verify that we never see a priority higher than the
comment|// lowest
comment|// priority seen
if|if
condition|(
name|lowestPrioritySeen
operator|>
name|currentPriority
condition|)
block|{
name|lowestPrioritySeen
operator|=
name|currentPriority
expr_stmt|;
block|}
if|if
condition|(
name|lowestPrioritySeen
operator|<
name|currentPriority
condition|)
block|{
name|failureMessage
operator|.
name|append
argument_list|(
literal|"Incorrect priority seen (Lowest Priority = "
operator|+
name|lowestPrioritySeen
operator|+
literal|" Current Priority = "
operator|+
name|currentPriority
operator|+
literal|")"
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Messages remaining = "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Cleanup producer resources
name|producerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|producerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Cleanup consumer resources
name|consumerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerConnection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|consumerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Report the failure if found
if|if
condition|(
name|failureMessage
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|failureMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

