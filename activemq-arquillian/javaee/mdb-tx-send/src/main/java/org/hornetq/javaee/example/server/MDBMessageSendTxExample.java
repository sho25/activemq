begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2009 Red Hat, Inc.  *  Red Hat licenses this file to you under the Apache License, version  *  2.0 (the "License"); you may not use this file except in compliance  *  with the License.  You may obtain a copy of the License at  *     http://www.apache.org/licenses/LICENSE-2.0  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or  *  implied.  See the License for the specific language governing  *  permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|hornetq
operator|.
name|javaee
operator|.
name|example
operator|.
name|server
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jboss
operator|.
name|ejb3
operator|.
name|annotation
operator|.
name|ResourceAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|ActivationConfigProperty
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|MessageDriven
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|TransactionAttribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|TransactionAttributeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|TransactionManagement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ejb
operator|.
name|TransactionManagementType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:andy.taylor@jboss.org">Andy Taylor</a>  */
end_comment

begin_class
annotation|@
name|MessageDriven
argument_list|(
name|name
operator|=
literal|"MDBMessageSendTxExample"
argument_list|,
name|activationConfig
operator|=
block|{
annotation|@
name|ActivationConfigProperty
argument_list|(
name|propertyName
operator|=
literal|"destinationType"
argument_list|,
name|propertyValue
operator|=
literal|"javax.jms.Queue"
argument_list|)
block|,
annotation|@
name|ActivationConfigProperty
argument_list|(
name|propertyName
operator|=
literal|"useJndi"
argument_list|,
name|propertyValue
operator|=
literal|"true"
argument_list|)
block|,
annotation|@
name|ActivationConfigProperty
argument_list|(
name|propertyName
operator|=
literal|"destination"
argument_list|,
name|propertyValue
operator|=
literal|"queue/testQueue"
argument_list|)
block|}
argument_list|)
annotation|@
name|TransactionManagement
argument_list|(
name|value
operator|=
name|TransactionManagementType
operator|.
name|CONTAINER
argument_list|)
annotation|@
name|TransactionAttribute
argument_list|(
name|value
operator|=
name|TransactionAttributeType
operator|.
name|REQUIRED
argument_list|)
annotation|@
name|ResourceAdapter
argument_list|(
literal|"activemq-rar.rar"
argument_list|)
specifier|public
class|class
name|MDBMessageSendTxExample
implements|implements
name|MessageListener
block|{
annotation|@
name|Resource
argument_list|(
name|mappedName
operator|=
literal|"java:/JmsXA"
argument_list|)
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|mappedName
operator|=
literal|"java:/queue/replyQueue"
argument_list|)
name|Queue
name|replyQueue
decl_stmt|;
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//Step 9. We know the client is sending a text message so we cast
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
comment|//Step 10. get the text from the message.
name|String
name|text
init|=
name|textMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"message "
operator|+
name|text
argument_list|)
expr_stmt|;
comment|//Step 11. we create a JMS connection
name|conn
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
comment|//Step 12. We create a JMS session
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
comment|//Step 13. we create a producer for the reply queue
name|MessageProducer
name|producer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|replyQueue
argument_list|)
decl_stmt|;
comment|//Step 14. we create a message and send it
name|producer
operator|.
name|send
argument_list|(
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"this is a reply"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{             }
block|}
block|}
block|}
block|}
end_class

end_unit

