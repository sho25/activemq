begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|DataFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ4212Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4212Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|service
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|cf
decl_stmt|;
specifier|private
specifier|final
name|int
name|MSG_COUNT
init|=
literal|256
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|createBroker
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createBroker
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|,
name|boolean
name|recover
parameter_list|)
throws|throws
name|Exception
block|{
name|service
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|service
operator|.
name|setBrokerName
argument_list|(
literal|"InactiveSubTest"
argument_list|)
expr_stmt|;
name|service
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|service
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|service
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|service
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|service
operator|.
name|setKeepDurableSubsActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|pa
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|File
name|dataFile
init|=
operator|new
name|File
argument_list|(
literal|"KahaDB"
argument_list|)
decl_stmt|;
name|pa
operator|.
name|setDirectory
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
name|pa
operator|.
name|setJournalMaxFileLength
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|pa
operator|.
name|setCheckpointInterval
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|pa
operator|.
name|setCleanupInterval
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|pa
operator|.
name|setForceRecoverIndex
argument_list|(
name|recover
argument_list|)
expr_stmt|;
name|pa
operator|.
name|setPreallocationScope
argument_list|(
name|Journal
operator|.
name|PreallocationScope
operator|.
name|ENTIRE_JOURNAL
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|setPersistenceAdapter
argument_list|(
name|pa
argument_list|)
expr_stmt|;
name|service
operator|.
name|start
argument_list|()
expr_stmt|;
name|service
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|connectionUri
operator|=
literal|"vm://InactiveSubTest?create=false"
expr_stmt|;
name|cf
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|restartBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|stopBroker
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|recoverBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|stopBroker
argument_list|()
expr_stmt|;
name|createBroker
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|stop
argument_list|()
expr_stmt|;
name|service
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|service
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurableSubPrefetchRecovered
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"MyQueue"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"MyDurableTopic"
argument_list|)
decl_stmt|;
comment|// Send to a Queue to create some journal files
name|sendMessages
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|createInactiveDurableSub
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have an inactive durable sub"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
index|[]
name|subs
init|=
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
decl_stmt|;
return|return
name|subs
operator|!=
literal|null
operator|&&
name|subs
operator|.
name|length
operator|==
literal|1
condition|?
literal|true
else|:
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now send some more to the queue to create even more files.
name|sendMessages
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNumberOfJournalFiles
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting the broker."
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarted the broker."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNumberOfJournalFiles
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have an inactive durable sub"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
index|[]
name|subs
init|=
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
decl_stmt|;
return|return
name|subs
operator|!=
literal|null
operator|&&
name|subs
operator|.
name|length
operator|==
literal|1
condition|?
literal|true
else|:
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clear out all queue data
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|removeQueue
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Less than two journal files expected, was "
operator|+
name|getNumberOfJournalFiles
argument_list|()
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getNumberOfJournalFiles
argument_list|()
operator|<=
literal|2
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending {} Messages to the Topic."
argument_list|,
name|MSG_COUNT
argument_list|)
expr_stmt|;
comment|// Send some messages to the inactive destination
name|sendMessages
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Attempt to consume {} messages from the Topic."
argument_list|,
name|MSG_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MSG_COUNT
argument_list|,
name|consumeFromInactiveDurableSub
argument_list|(
name|topic
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering the broker."
argument_list|)
expr_stmt|;
name|recoverBroker
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering the broker."
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have an inactive durable sub"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
index|[]
name|subs
init|=
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
decl_stmt|;
return|return
name|subs
operator|!=
literal|null
operator|&&
name|subs
operator|.
name|length
operator|==
literal|1
condition|?
literal|true
else|:
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurableAcksNotDropped
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"MyQueue"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"MyDurableTopic"
argument_list|)
decl_stmt|;
comment|// Create durable sub in first data file.
name|createInactiveDurableSub
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have an inactive durable sub"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
index|[]
name|subs
init|=
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
decl_stmt|;
return|return
name|subs
operator|!=
literal|null
operator|&&
name|subs
operator|.
name|length
operator|==
literal|1
condition|?
literal|true
else|:
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send to a Topic
name|sendMessages
argument_list|(
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Send to a Queue to create some journal files
name|sendMessages
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Before consume there are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Consume all the Messages leaving acks behind.
name|consumeDurableMessages
argument_list|(
name|topic
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After consume there are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now send some more to the queue to create even more files.
name|sendMessages
argument_list|(
name|queue
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"More Queued. There are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNumberOfJournalFiles
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarting the broker."
argument_list|)
expr_stmt|;
name|restartBroker
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restarted the broker."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getNumberOfJournalFiles
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have an inactive durable sub"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
index|[]
name|subs
init|=
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
decl_stmt|;
return|return
name|subs
operator|!=
literal|null
operator|&&
name|subs
operator|.
name|length
operator|==
literal|1
condition|?
literal|true
else|:
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clear out all queue data
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|removeQueue
argument_list|(
name|queue
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Less than three journal file expected, was "
operator|+
name|getNumberOfJournalFiles
argument_list|()
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getNumberOfJournalFiles
argument_list|()
operator|<=
literal|3
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// See if we receive any message they should all be acked.
name|tryConsumeExpectNone
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering the broker."
argument_list|)
expr_stmt|;
name|recoverBroker
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Recovering the broker."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are currently [{}] journal log files."
argument_list|,
name|getNumberOfJournalFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have an inactive durable sub"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
index|[]
name|subs
init|=
name|service
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
decl_stmt|;
return|return
name|subs
operator|!=
literal|null
operator|&&
name|subs
operator|.
name|length
operator|==
literal|1
condition|?
literal|true
else|:
literal|false
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// See if we receive any message they should all be acked.
name|tryConsumeExpectNone
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Less than three journal file expected, was "
operator|+
name|getNumberOfJournalFiles
argument_list|()
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getNumberOfJournalFiles
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getNumberOfJournalFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|DataFile
argument_list|>
name|files
init|=
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|service
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|getStore
argument_list|()
operator|.
name|getJournal
argument_list|()
operator|.
name|getFileMap
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|int
name|reality
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DataFile
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|reality
operator|++
expr_stmt|;
block|}
block|}
return|return
name|reality
return|;
block|}
specifier|private
name|void
name|createInactiveDurableSub
parameter_list|(
name|Topic
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"Inactive"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"Inactive"
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|consumeDurableMessages
parameter_list|(
name|Topic
name|topic
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"Inactive"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"Inactive"
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|consumer
operator|.
name|receive
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"should have received a message"
argument_list|)
expr_stmt|;
block|}
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|tryConsumeExpectNone
parameter_list|(
name|Topic
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"Inactive"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"Inactive"
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|consumer
operator|.
name|receive
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Should be no messages for this durable."
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|consumeFromInactiveDurableSub
parameter_list|(
name|Topic
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"Inactive"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"Inactive"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|consumer
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|private
name|void
name|sendMessages
parameter_list|(
name|Destination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|sendMessages
argument_list|(
name|destination
argument_list|,
name|MSG_COUNT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sendMessages
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Message #"
operator|+
name|i
operator|+
literal|" for destination: "
operator|+
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

