begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CancellationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|DelayQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Delayed
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ResourceAllocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|OrderedPendingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|PendingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|PendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|PrioritizedPendingList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|StoreQueueCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
operator|.
name|VMPendingMessageCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupHashBucketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|group
operator|.
name|MessageGroupMapFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|DispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|RoundRobinDispatchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
operator|.
name|InsertionCountList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatchNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|BooleanExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|NonCachedMessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|selector
operator|.
name|SelectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|Usage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|UsageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|BrokerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|MDC
import|;
end_import

begin_comment
comment|/**  * The Queue is a List of MessageEntry objects that are dispatched to matching  * subscriptions.  */
end_comment

begin_class
specifier|public
class|class
name|Queue
extends|extends
name|BaseDestination
implements|implements
name|Task
implements|,
name|UsageListener
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Queue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|TaskRunnerFactory
name|taskFactory
decl_stmt|;
specifier|protected
name|TaskRunner
name|taskRunner
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|consumersLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|Subscription
argument_list|>
name|consumers
init|=
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|(
literal|50
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|messagesLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|protected
name|PendingMessageCursor
name|messages
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|pagedInMessagesLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|QueueMessageReference
argument_list|>
name|pagedInMessages
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|QueueMessageReference
argument_list|>
argument_list|()
decl_stmt|;
comment|// Messages that are paged in but have not yet been targeted at a
comment|// subscription
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|pagedInPendingDispatchLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|protected
name|PendingList
name|pagedInPendingDispatch
init|=
operator|new
name|OrderedPendingList
argument_list|()
decl_stmt|;
specifier|protected
name|PendingList
name|redeliveredWaitingDispatch
init|=
operator|new
name|OrderedPendingList
argument_list|()
decl_stmt|;
specifier|private
name|MessageGroupMap
name|messageGroupOwners
decl_stmt|;
specifier|private
name|DispatchPolicy
name|dispatchPolicy
init|=
operator|new
name|RoundRobinDispatchPolicy
argument_list|()
decl_stmt|;
specifier|private
name|MessageGroupMapFactory
name|messageGroupMapFactory
init|=
operator|new
name|MessageGroupHashBucketFactory
argument_list|()
decl_stmt|;
specifier|final
name|Lock
name|sendLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|ExecutorService
name|executor
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|MessageId
argument_list|,
name|Runnable
argument_list|>
name|messagesWaitingForSpace
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|MessageId
argument_list|,
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|useConsumerPriority
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|strictOrderDispatch
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|QueueDispatchSelector
name|dispatchSelector
decl_stmt|;
specifier|private
name|boolean
name|optimizedDispatch
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iterationRunning
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|firstConsumer
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|timeBeforeDispatchStarts
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|consumersBeforeDispatchStarts
init|=
literal|0
decl_stmt|;
specifier|private
name|CountDownLatch
name|consumersBeforeStartsLatch
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|pendingWakeups
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|allConsumersExclusiveByDefault
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|sendMessagesWaitingForSpaceTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|asyncWakeup
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|expireMessagesTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|expireMessages
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|Object
name|iteratingMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
class|class
name|TimeoutMessage
implements|implements
name|Delayed
block|{
name|Message
name|message
decl_stmt|;
name|ConnectionContext
name|context
decl_stmt|;
name|long
name|trigger
decl_stmt|;
specifier|public
name|TimeoutMessage
parameter_list|(
name|Message
name|message
parameter_list|,
name|ConnectionContext
name|context
parameter_list|,
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|trigger
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|delay
expr_stmt|;
block|}
specifier|public
name|long
name|getDelay
parameter_list|(
name|TimeUnit
name|unit
parameter_list|)
block|{
name|long
name|n
init|=
name|trigger
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
return|return
name|unit
operator|.
name|convert
argument_list|(
name|n
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Delayed
name|delayed
parameter_list|)
block|{
name|long
name|other
init|=
operator|(
operator|(
name|TimeoutMessage
operator|)
name|delayed
operator|)
operator|.
name|trigger
decl_stmt|;
name|int
name|returnValue
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|trigger
operator|<
name|other
condition|)
block|{
name|returnValue
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|trigger
operator|>
name|other
condition|)
block|{
name|returnValue
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|returnValue
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
block|}
name|DelayQueue
argument_list|<
name|TimeoutMessage
argument_list|>
name|flowControlTimeoutMessages
init|=
operator|new
name|DelayQueue
argument_list|<
name|TimeoutMessage
argument_list|>
argument_list|()
decl_stmt|;
class|class
name|FlowControlTimeoutTask
extends|extends
name|Thread
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TimeoutMessage
name|timeout
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|timeout
operator|=
name|flowControlTimeoutMessages
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|messagesWaitingForSpace
init|)
block|{
if|if
condition|(
name|messagesWaitingForSpace
operator|.
name|remove
argument_list|(
name|timeout
operator|.
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ExceptionResponse
name|response
init|=
operator|new
name|ExceptionResponse
argument_list|(
operator|new
name|ResourceAllocationException
argument_list|(
literal|"Usage Manager Memory Limit reached. Stopping producer ("
operator|+
name|timeout
operator|.
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
argument_list|)
argument_list|)
decl_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|timeout
operator|.
name|message
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|"Producer Flow Control Timeout Task is stopping"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
empty_stmt|;
specifier|private
specifier|final
name|FlowControlTimeoutTask
name|flowControlTimeoutTask
init|=
operator|new
name|FlowControlTimeoutTask
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|Subscription
argument_list|>
name|orderedCompare
init|=
operator|new
name|Comparator
argument_list|<
name|Subscription
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Subscription
name|s1
parameter_list|,
name|Subscription
name|s2
parameter_list|)
block|{
comment|// We want the list sorted in descending order
return|return
name|s2
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|-
name|s1
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|Queue
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|ActiveMQDestination
name|destination
parameter_list|,
name|MessageStore
name|store
parameter_list|,
name|DestinationStatistics
name|parentStats
parameter_list|,
name|TaskRunnerFactory
name|taskFactory
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|brokerService
argument_list|,
name|store
argument_list|,
name|destination
argument_list|,
name|parentStats
argument_list|)
expr_stmt|;
name|this
operator|.
name|taskFactory
operator|=
name|taskFactory
expr_stmt|;
name|this
operator|.
name|dispatchSelector
operator|=
operator|new
name|QueueDispatchSelector
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Subscription
argument_list|>
name|getConsumers
parameter_list|()
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|(
name|consumers
argument_list|)
return|;
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// make the queue easily visible in the debugger from its task runner
comment|// threads
specifier|final
class|class
name|QueueThread
extends|extends
name|Thread
block|{
specifier|final
name|Queue
name|queue
decl_stmt|;
specifier|public
name|QueueThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|,
name|String
name|name
parameter_list|,
name|Queue
name|queue
parameter_list|)
block|{
name|super
argument_list|(
name|runnable
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
block|}
class|class
name|BatchMessageRecoveryListener
implements|implements
name|MessageRecoveryListener
block|{
specifier|final
name|LinkedList
argument_list|<
name|Message
argument_list|>
name|toExpire
init|=
operator|new
name|LinkedList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|double
name|totalMessageCount
decl_stmt|;
name|int
name|recoveredAccumulator
init|=
literal|0
decl_stmt|;
name|int
name|currentBatchCount
decl_stmt|;
name|BatchMessageRecoveryListener
parameter_list|(
name|int
name|totalMessageCount
parameter_list|)
block|{
name|this
operator|.
name|totalMessageCount
operator|=
name|totalMessageCount
expr_stmt|;
name|currentBatchCount
operator|=
name|recoveredAccumulator
expr_stmt|;
block|}
specifier|public
name|boolean
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|recoveredAccumulator
operator|++
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
operator|&&
operator|(
name|recoveredAccumulator
operator|%
literal|10000
operator|)
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"cursor for "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" has recovered "
operator|+
name|recoveredAccumulator
operator|+
literal|" messages. "
operator|+
call|(
name|int
call|)
argument_list|(
name|recoveredAccumulator
operator|*
literal|100
operator|/
name|totalMessageCount
argument_list|)
operator|+
literal|"% complete"
argument_list|)
expr_stmt|;
block|}
comment|// Message could have expired while it was being
comment|// loaded..
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
operator|&&
name|broker
operator|.
name|isExpired
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|toExpire
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|hasSpace
argument_list|()
condition|)
block|{
name|message
operator|.
name|setRegionDestination
argument_list|(
name|Queue
operator|.
name|this
argument_list|)
expr_stmt|;
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|messages
operator|.
name|addMessageLast
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add message to cursor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|recoverMessageReference
parameter_list|(
name|MessageId
name|messageReference
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should not be called."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|hasSpace
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isDuplicate
parameter_list|(
name|MessageId
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|currentBatchCount
operator|=
name|recoveredAccumulator
expr_stmt|;
block|}
specifier|public
name|void
name|processExpired
parameter_list|()
block|{
for|for
control|(
name|Message
name|message
range|:
name|toExpire
control|)
block|{
name|messageExpired
argument_list|(
name|createConnectionContext
argument_list|()
argument_list|,
name|createMessageReference
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// drop message will decrement so counter
comment|// balance here
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
name|toExpire
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|done
parameter_list|()
block|{
return|return
name|currentBatchCount
operator|==
name|recoveredAccumulator
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrioritizedMessages
parameter_list|(
name|boolean
name|prioritizedMessages
parameter_list|)
block|{
name|super
operator|.
name|setPrioritizedMessages
argument_list|(
name|prioritizedMessages
argument_list|)
expr_stmt|;
if|if
condition|(
name|prioritizedMessages
operator|&&
name|this
operator|.
name|pagedInPendingDispatch
operator|instanceof
name|OrderedPendingList
condition|)
block|{
name|pagedInPendingDispatch
operator|=
operator|new
name|PrioritizedPendingList
argument_list|()
expr_stmt|;
name|redeliveredWaitingDispatch
operator|=
operator|new
name|PrioritizedPendingList
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pagedInPendingDispatch
operator|instanceof
name|PrioritizedPendingList
condition|)
block|{
name|pagedInPendingDispatch
operator|=
operator|new
name|OrderedPendingList
argument_list|()
expr_stmt|;
name|redeliveredWaitingDispatch
operator|=
operator|new
name|OrderedPendingList
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|messages
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|destination
operator|.
name|isTemporary
argument_list|()
operator|||
name|broker
operator|==
literal|null
operator|||
name|store
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|messages
operator|=
operator|new
name|VMPendingMessageCursor
argument_list|(
name|isPrioritizedMessages
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|messages
operator|=
operator|new
name|StoreQueueCursor
argument_list|(
name|broker
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If a VMPendingMessageCursor don't use the default Producer System
comment|// Usage
comment|// since it turns into a shared blocking queue which can lead to a
comment|// network deadlock.
comment|// If we are cursoring to disk..it's not and issue because it does not
comment|// block due
comment|// to large disk sizes.
if|if
condition|(
name|messages
operator|instanceof
name|VMPendingMessageCursor
condition|)
block|{
name|this
operator|.
name|systemUsage
operator|=
name|brokerService
operator|.
name|getSystemUsage
argument_list|()
expr_stmt|;
name|memoryUsage
operator|.
name|setParent
argument_list|(
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|taskRunner
operator|=
name|taskFactory
operator|.
name|createTaskRunner
argument_list|(
name|this
argument_list|,
literal|"Queue:"
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|initialize
argument_list|()
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
comment|// Restore the persistent messages.
name|messages
operator|.
name|setSystemUsage
argument_list|(
name|systemUsage
argument_list|)
expr_stmt|;
name|messages
operator|.
name|setEnableAudit
argument_list|(
name|isEnableAudit
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|setMaxAuditDepth
argument_list|(
name|getMaxAuditDepth
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|setMaxProducersToAudit
argument_list|(
name|getMaxProducersToAudit
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|setUseCache
argument_list|(
name|isUseCache
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|setMemoryUsageHighWaterMark
argument_list|(
name|getCursorMemoryHighWaterMark
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|messageCount
init|=
name|store
operator|.
name|getMessageCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageCount
operator|>
literal|0
operator|&&
name|messages
operator|.
name|isRecoveryRequired
argument_list|()
condition|)
block|{
name|BatchMessageRecoveryListener
name|listener
init|=
operator|new
name|BatchMessageRecoveryListener
argument_list|(
name|messageCount
argument_list|)
decl_stmt|;
do|do
block|{
name|listener
operator|.
name|reset
argument_list|()
expr_stmt|;
name|store
operator|.
name|recoverNextMessages
argument_list|(
name|getMaxPageSize
argument_list|()
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|processExpired
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|listener
operator|.
name|done
argument_list|()
condition|)
do|;
block|}
else|else
block|{
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|setCount
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * Holder for subscription that needs attention on next iterate browser      * needs access to existing messages in the queue that have already been      * dispatched      */
class|class
name|BrowserDispatch
block|{
name|QueueBrowserSubscription
name|browser
decl_stmt|;
specifier|public
name|BrowserDispatch
parameter_list|(
name|QueueBrowserSubscription
name|browserSubscription
parameter_list|)
block|{
name|browser
operator|=
name|browserSubscription
expr_stmt|;
name|browser
operator|.
name|incrementQueueRef
argument_list|()
expr_stmt|;
block|}
name|void
name|done
parameter_list|()
block|{
try|try
block|{
name|browser
operator|.
name|decrementQueueRef
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"decrement ref on browser: "
operator|+
name|browser
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|QueueBrowserSubscription
name|getBrowser
parameter_list|()
block|{
return|return
name|browser
return|;
block|}
block|}
name|ConcurrentLinkedQueue
argument_list|<
name|BrowserDispatch
argument_list|>
name|browserDispatches
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|BrowserDispatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" add sub: "
operator|+
name|sub
operator|+
literal|", dequeues: "
operator|+
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|", dispatched: "
operator|+
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|", inflight: "
operator|+
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|)
expr_stmt|;
comment|// synchronize with dispatch method so that no new messages are sent
comment|// while setting up a subscription. avoid out of order messages,
comment|// duplicates, etc.
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|sub
operator|.
name|add
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// needs to be synchronized - so no contention with dispatching
comment|// consumersLock.
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// set a flag if this is a first consumer
if|if
condition|(
name|consumers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|firstConsumer
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|consumersBeforeDispatchStarts
operator|!=
literal|0
condition|)
block|{
name|consumersBeforeStartsLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
name|consumersBeforeDispatchStarts
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|consumersBeforeStartsLatch
operator|!=
literal|null
condition|)
block|{
name|consumersBeforeStartsLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|addToConsumerList
argument_list|(
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isExclusive
argument_list|()
operator|||
name|isAllConsumersExclusiveByDefault
argument_list|()
condition|)
block|{
name|Subscription
name|exclusiveConsumer
init|=
name|dispatchSelector
operator|.
name|getExclusiveConsumer
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclusiveConsumer
operator|==
literal|null
condition|)
block|{
name|exclusiveConsumer
operator|=
name|sub
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|==
name|Byte
operator|.
name|MAX_VALUE
operator|||
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|>
name|exclusiveConsumer
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|exclusiveConsumer
operator|=
name|sub
expr_stmt|;
block|}
name|dispatchSelector
operator|.
name|setExclusiveConsumer
argument_list|(
name|exclusiveConsumer
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sub
operator|instanceof
name|QueueBrowserSubscription
condition|)
block|{
comment|// tee up for dispatch in next iterate
name|QueueBrowserSubscription
name|browserSubscription
init|=
operator|(
name|QueueBrowserSubscription
operator|)
name|sub
decl_stmt|;
name|BrowserDispatch
name|browserDispatch
init|=
operator|new
name|BrowserDispatch
argument_list|(
name|browserSubscription
argument_list|)
decl_stmt|;
name|browserDispatches
operator|.
name|add
argument_list|(
name|browserDispatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|optimizedDispatch
operator|||
name|isSlave
argument_list|()
operator|)
condition|)
block|{
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|optimizedDispatch
operator|||
name|isSlave
argument_list|()
condition|)
block|{
comment|// Outside of dispatchLock() to maintain the lock hierarchy of
comment|// iteratingMutex -> dispatchLock. - see
comment|// https://issues.apache.org/activemq/browse/AMQ-1878
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
name|long
name|lastDeiveredSequenceId
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|,
name|lastDeiveredSequenceId
argument_list|)
expr_stmt|;
comment|// synchronize with dispatch method so that no new messages are sent
comment|// while removing up a subscription.
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" remove sub: "
operator|+
name|sub
operator|+
literal|", lastDeliveredSeqId: "
operator|+
name|lastDeiveredSequenceId
operator|+
literal|", dequeues: "
operator|+
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|", dispatched: "
operator|+
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|", inflight: "
operator|+
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|removeFromConsumerList
argument_list|(
name|sub
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isExclusive
argument_list|()
condition|)
block|{
name|Subscription
name|exclusiveConsumer
init|=
name|dispatchSelector
operator|.
name|getExclusiveConsumer
argument_list|()
decl_stmt|;
if|if
condition|(
name|exclusiveConsumer
operator|==
name|sub
condition|)
block|{
name|exclusiveConsumer
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Subscription
name|s
range|:
name|consumers
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isExclusive
argument_list|()
operator|&&
operator|(
name|exclusiveConsumer
operator|==
literal|null
operator|||
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|>
name|exclusiveConsumer
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|)
condition|)
block|{
name|exclusiveConsumer
operator|=
name|s
expr_stmt|;
block|}
block|}
name|dispatchSelector
operator|.
name|setExclusiveConsumer
argument_list|(
name|exclusiveConsumer
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isAllConsumersExclusiveByDefault
argument_list|()
condition|)
block|{
name|Subscription
name|exclusiveConsumer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Subscription
name|s
range|:
name|consumers
control|)
block|{
if|if
condition|(
name|exclusiveConsumer
operator|==
literal|null
operator|||
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
operator|>
name|exclusiveConsumer
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|exclusiveConsumer
operator|=
name|s
expr_stmt|;
block|}
block|}
name|dispatchSelector
operator|.
name|setExclusiveConsumer
argument_list|(
name|exclusiveConsumer
argument_list|)
expr_stmt|;
block|}
name|ConsumerId
name|consumerId
init|=
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
decl_stmt|;
name|getMessageGroupOwners
argument_list|()
operator|.
name|removeConsumer
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
comment|// redeliver inflight messages
name|boolean
name|markAsRedelivered
init|=
literal|false
decl_stmt|;
name|MessageReference
name|lastDeliveredRef
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MessageReference
argument_list|>
name|unAckedMessages
init|=
name|sub
operator|.
name|remove
argument_list|(
name|context
argument_list|,
name|this
argument_list|)
decl_stmt|;
comment|// locate last redelivered in unconsumed list (list in delivery rather than seq order)
if|if
condition|(
name|lastDeiveredSequenceId
operator|!=
literal|0
condition|)
block|{
for|for
control|(
name|MessageReference
name|ref
range|:
name|unAckedMessages
control|)
block|{
if|if
condition|(
name|ref
operator|.
name|getMessageId
argument_list|()
operator|.
name|getBrokerSequenceId
argument_list|()
operator|==
name|lastDeiveredSequenceId
condition|)
block|{
name|lastDeliveredRef
operator|=
name|ref
expr_stmt|;
name|markAsRedelivered
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"found lastDeliveredSeqID: "
operator|+
name|lastDeiveredSequenceId
operator|+
literal|", message reference: "
operator|+
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
for|for
control|(
name|MessageReference
name|ref
range|:
name|unAckedMessages
control|)
block|{
name|QueueMessageReference
name|qmr
init|=
operator|(
name|QueueMessageReference
operator|)
name|ref
decl_stmt|;
if|if
condition|(
name|qmr
operator|.
name|getLockOwner
argument_list|()
operator|==
name|sub
condition|)
block|{
name|qmr
operator|.
name|unlock
argument_list|()
expr_stmt|;
comment|// have no delivery information
if|if
condition|(
name|lastDeiveredSequenceId
operator|==
literal|0
condition|)
block|{
name|qmr
operator|.
name|incrementRedeliveryCounter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|markAsRedelivered
condition|)
block|{
name|qmr
operator|.
name|incrementRedeliveryCounter
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ref
operator|==
name|lastDeliveredRef
condition|)
block|{
comment|// all that follow were not redelivered
name|markAsRedelivered
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
name|redeliveredWaitingDispatch
operator|.
name|addMessageLast
argument_list|(
name|qmr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|redeliveredWaitingDispatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|doDispatch
argument_list|(
operator|new
name|OrderedPendingList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
operator|(
name|this
operator|.
name|optimizedDispatch
operator|||
name|isSlave
argument_list|()
operator|)
condition|)
block|{
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|optimizedDispatch
operator|||
name|isSlave
argument_list|()
condition|)
block|{
comment|// Outside of dispatchLock() to maintain the lock hierarchy of
comment|// iteratingMutex -> dispatchLock. - see
comment|// https://issues.apache.org/activemq/browse/AMQ-1878
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|send
parameter_list|(
specifier|final
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ConnectionContext
name|context
init|=
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
decl_stmt|;
comment|// There is delay between the client sending it and it arriving at the
comment|// destination.. it may have expired.
name|message
operator|.
name|setRegionDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ProducerState
name|state
init|=
name|producerExchange
operator|.
name|getProducerState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Send failed for: "
operator|+
name|message
operator|+
literal|",  missing producer state for: "
operator|+
name|producerExchange
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Cannot send message to "
operator|+
name|getActiveMQDestination
argument_list|()
operator|+
literal|" with invalid (null) producer state"
argument_list|)
throw|;
block|}
specifier|final
name|ProducerInfo
name|producerInfo
init|=
name|producerExchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|sendProducerAck
init|=
operator|!
name|message
operator|.
name|isResponseRequired
argument_list|()
operator|&&
name|producerInfo
operator|.
name|getWindowSize
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
comment|// message not stored - or added to stats yet - so chuck here
name|broker
operator|.
name|getRoot
argument_list|()
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|sendProducerAck
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|memoryUsage
operator|.
name|isFull
argument_list|()
condition|)
block|{
name|isFull
argument_list|(
name|context
argument_list|,
name|memoryUsage
argument_list|)
expr_stmt|;
name|fastProducer
argument_list|(
name|context
argument_list|,
name|producerInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|isProducerFlowControl
argument_list|()
operator|&&
name|context
operator|.
name|isProducerFlowControl
argument_list|()
condition|)
block|{
if|if
condition|(
name|warnOnProducerFlowControl
condition|)
block|{
name|warnOnProducerFlowControl
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Usage Manager Memory Limit ("
operator|+
name|memoryUsage
operator|.
name|getLimit
argument_list|()
operator|+
literal|") reached on "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|". Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|isNetworkConnection
argument_list|()
operator|&&
name|systemUsage
operator|.
name|isSendFailIfNoSpace
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ResourceAllocationException
argument_list|(
literal|"Usage Manager Memory Limit reached. Stopping producer ("
operator|+
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
argument_list|)
throw|;
block|}
comment|// We can avoid blocking due to low usage if the producer is
comment|// sending
comment|// a sync message or if it is using a producer window
if|if
condition|(
name|producerInfo
operator|.
name|getWindowSize
argument_list|()
operator|>
literal|0
operator|||
name|message
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
comment|// copy the exchange state since the context will be
comment|// modified while we are waiting
comment|// for space.
specifier|final
name|ProducerBrokerExchange
name|producerExchangeCopy
init|=
name|producerExchange
operator|.
name|copy
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|messagesWaitingForSpace
init|)
block|{
comment|// Start flow control timeout task
comment|// Prevent trying to start it multiple times
if|if
condition|(
operator|!
name|flowControlTimeoutTask
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|flowControlTimeoutTask
operator|.
name|setName
argument_list|(
name|getName
argument_list|()
operator|+
literal|" Producer Flow Control Timeout Task"
argument_list|)
expr_stmt|;
name|flowControlTimeoutTask
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|messagesWaitingForSpace
operator|.
name|put
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// While waiting for space to free up... the
comment|// message may have expired.
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"expired waiting for space.."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|doMessageSend
argument_list|(
name|producerExchangeCopy
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sendProducerAck
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Response
name|response
init|=
operator|new
name|Response
argument_list|()
decl_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|message
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sendProducerAck
operator|&&
operator|!
name|context
operator|.
name|isInRecoveryMode
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|response
init|=
operator|new
name|ExceptionResponse
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|message
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unexpected exception on deferred send of :"
operator|+
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|isNetworkConnection
argument_list|()
operator|&&
name|systemUsage
operator|.
name|getSendFailIfNoSpaceAfterTimeout
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|flowControlTimeoutMessages
operator|.
name|add
argument_list|(
operator|new
name|TimeoutMessage
argument_list|(
name|message
argument_list|,
name|context
argument_list|,
name|systemUsage
operator|.
name|getSendFailIfNoSpaceAfterTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|registerCallbackForNotFullNotification
argument_list|()
expr_stmt|;
name|context
operator|.
name|setDontSendReponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
if|if
condition|(
name|memoryUsage
operator|.
name|isFull
argument_list|()
condition|)
block|{
name|waitForSpace
argument_list|(
name|context
argument_list|,
name|memoryUsage
argument_list|,
literal|"Usage Manager Memory Limit reached. Producer ("
operator|+
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") stopped to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
argument_list|)
expr_stmt|;
block|}
comment|// The usage manager could have delayed us by the time
comment|// we unblock the message could have expired..
if|if
condition|(
name|message
operator|.
name|isExpired
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expired message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|getRoot
argument_list|()
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
name|doMessageSend
argument_list|(
name|producerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|sendProducerAck
condition|)
block|{
name|ProducerAck
name|ack
init|=
operator|new
name|ProducerAck
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
argument_list|,
name|message
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|getConnection
argument_list|()
operator|.
name|dispatchAsync
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerCallbackForNotFullNotification
parameter_list|()
block|{
comment|// If the usage manager is not full, then the task will not
comment|// get called..
if|if
condition|(
operator|!
name|memoryUsage
operator|.
name|notifyCallbackWhenNotFull
argument_list|(
name|sendMessagesWaitingForSpaceTask
argument_list|)
condition|)
block|{
comment|// so call it directly here.
name|sendMessagesWaitingForSpaceTask
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|doMessageSend
parameter_list|(
specifier|final
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
specifier|final
name|ConnectionContext
name|context
init|=
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Object
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|checkUsage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|sendLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|store
operator|!=
literal|null
operator|&&
name|message
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|setBrokerSequenceId
argument_list|(
name|getDestinationSequenceId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|messages
operator|.
name|isCacheEnabled
argument_list|()
condition|)
block|{
name|result
operator|=
name|store
operator|.
name|asyncAddQueueMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
name|isOptimizeStorage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|.
name|addMessage
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isReduceMemoryFootprint
argument_list|()
condition|)
block|{
name|message
operator|.
name|clearMarshalledState
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
comment|// If this is a transacted message.. increase the usage now so that
comment|// a big TX does not blow up
comment|// our memory. This increment is decremented once the tx finishes..
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|sendLock
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
comment|// It could take while before we receive the commit
comment|// op, by that time the message could have expired..
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|message
argument_list|)
condition|)
block|{
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
return|return;
block|}
name|sendMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sendLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
name|messageSent
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Add to the pending list, this takes care of incrementing the
comment|// usage manager.
name|sendMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|sendLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|messageSent
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
try|try
block|{
name|result
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CancellationException
name|e
parameter_list|)
block|{
comment|// ignore - the task has been cancelled if the message
comment|// has already been deleted
block|}
block|}
block|}
specifier|private
name|void
name|checkUsage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|ResourceAllocationException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|message
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
if|if
condition|(
name|store
operator|!=
literal|null
operator|&&
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|isFull
argument_list|(
name|getStoreUsageHighWaterMark
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|logMessage
init|=
literal|"Persistent store is Full, "
operator|+
name|getStoreUsageHighWaterMark
argument_list|()
operator|+
literal|"% of "
operator|+
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|+
literal|". Stopping producer ("
operator|+
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
decl_stmt|;
name|waitForSpace
argument_list|(
name|context
argument_list|,
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
argument_list|,
name|getStoreUsageHighWaterMark
argument_list|()
argument_list|,
name|logMessage
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|messages
operator|.
name|getSystemUsage
argument_list|()
operator|!=
literal|null
operator|&&
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
operator|.
name|isFull
argument_list|()
condition|)
block|{
specifier|final
name|String
name|logMessage
init|=
literal|"Temp Store is Full ("
operator|+
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
operator|+
literal|"% of "
operator|+
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|+
literal|"). Stopping producer ("
operator|+
name|message
operator|.
name|getProducerId
argument_list|()
operator|+
literal|") to prevent flooding "
operator|+
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|"."
operator|+
literal|" See http://activemq.apache.org/producer-flow-control.html for more info"
decl_stmt|;
name|waitForSpace
argument_list|(
name|context
argument_list|,
name|messages
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
argument_list|,
name|logMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|expireMessages
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" expiring messages .."
argument_list|)
expr_stmt|;
block|}
comment|// just track the insertion count
name|List
argument_list|<
name|Message
argument_list|>
name|browsedMessages
init|=
operator|new
name|InsertionCountList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|doBrowse
argument_list|(
name|browsedMessages
argument_list|,
name|this
operator|.
name|getMaxExpirePageSize
argument_list|()
argument_list|)
expr_stmt|;
name|asyncWakeup
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" expiring messages done."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|gc
parameter_list|()
block|{     }
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
name|MessageAck
name|ack
parameter_list|,
name|MessageReference
name|node
parameter_list|)
throws|throws
name|IOException
block|{
name|messageConsumed
argument_list|(
name|context
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
operator|&&
name|node
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
name|store
operator|.
name|removeAsyncMessage
argument_list|(
name|context
argument_list|,
name|convertToNonRangedAck
argument_list|(
name|ack
argument_list|,
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Message
name|loadMessage
parameter_list|(
name|MessageId
name|messageId
parameter_list|)
throws|throws
name|IOException
block|{
name|Message
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
comment|// can be null for a temp q
name|msg
operator|=
name|store
operator|.
name|getMessage
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|msg
operator|.
name|setRegionDestination
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|msg
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|int
name|size
init|=
literal|0
decl_stmt|;
name|messagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|size
operator|=
name|messages
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|destination
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|", subscriptions="
operator|+
name|consumers
operator|.
name|size
argument_list|()
operator|+
literal|", memory="
operator|+
name|memoryUsage
operator|.
name|getPercentUsage
argument_list|()
operator|+
literal|"%, size="
operator|+
name|size
operator|+
literal|", in flight groups="
operator|+
name|messageGroupOwners
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|memoryUsage
operator|!=
literal|null
condition|)
block|{
name|memoryUsage
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|addUsageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|messages
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|getExpireMessagesPeriod
argument_list|()
operator|>
literal|0
condition|)
block|{
name|scheduler
operator|.
name|schedualPeriodically
argument_list|(
name|expireMessagesTask
argument_list|,
name|getExpireMessagesPeriod
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doPageIn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|taskRunner
operator|!=
literal|null
condition|)
block|{
name|taskRunner
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|executor
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
name|scheduler
operator|.
name|cancel
argument_list|(
name|expireMessagesTask
argument_list|)
expr_stmt|;
if|if
condition|(
name|flowControlTimeoutTask
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|flowControlTimeoutTask
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|messages
operator|!=
literal|null
condition|)
block|{
name|messages
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|removeUsageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|memoryUsage
operator|!=
literal|null
condition|)
block|{
name|memoryUsage
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|ActiveMQDestination
name|getActiveMQDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|MessageGroupMap
name|getMessageGroupOwners
parameter_list|()
block|{
if|if
condition|(
name|messageGroupOwners
operator|==
literal|null
condition|)
block|{
name|messageGroupOwners
operator|=
name|getMessageGroupMapFactory
argument_list|()
operator|.
name|createMessageGroupMap
argument_list|()
expr_stmt|;
block|}
return|return
name|messageGroupOwners
return|;
block|}
specifier|public
name|DispatchPolicy
name|getDispatchPolicy
parameter_list|()
block|{
return|return
name|dispatchPolicy
return|;
block|}
specifier|public
name|void
name|setDispatchPolicy
parameter_list|(
name|DispatchPolicy
name|dispatchPolicy
parameter_list|)
block|{
name|this
operator|.
name|dispatchPolicy
operator|=
name|dispatchPolicy
expr_stmt|;
block|}
specifier|public
name|MessageGroupMapFactory
name|getMessageGroupMapFactory
parameter_list|()
block|{
return|return
name|messageGroupMapFactory
return|;
block|}
specifier|public
name|void
name|setMessageGroupMapFactory
parameter_list|(
name|MessageGroupMapFactory
name|messageGroupMapFactory
parameter_list|)
block|{
name|this
operator|.
name|messageGroupMapFactory
operator|=
name|messageGroupMapFactory
expr_stmt|;
block|}
specifier|public
name|PendingMessageCursor
name|getMessages
parameter_list|()
block|{
return|return
name|this
operator|.
name|messages
return|;
block|}
specifier|public
name|void
name|setMessages
parameter_list|(
name|PendingMessageCursor
name|messages
parameter_list|)
block|{
name|this
operator|.
name|messages
operator|=
name|messages
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseConsumerPriority
parameter_list|()
block|{
return|return
name|useConsumerPriority
return|;
block|}
specifier|public
name|void
name|setUseConsumerPriority
parameter_list|(
name|boolean
name|useConsumerPriority
parameter_list|)
block|{
name|this
operator|.
name|useConsumerPriority
operator|=
name|useConsumerPriority
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStrictOrderDispatch
parameter_list|()
block|{
return|return
name|strictOrderDispatch
return|;
block|}
specifier|public
name|void
name|setStrictOrderDispatch
parameter_list|(
name|boolean
name|strictOrderDispatch
parameter_list|)
block|{
name|this
operator|.
name|strictOrderDispatch
operator|=
name|strictOrderDispatch
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOptimizedDispatch
parameter_list|()
block|{
return|return
name|optimizedDispatch
return|;
block|}
specifier|public
name|void
name|setOptimizedDispatch
parameter_list|(
name|boolean
name|optimizedDispatch
parameter_list|)
block|{
name|this
operator|.
name|optimizedDispatch
operator|=
name|optimizedDispatch
expr_stmt|;
block|}
specifier|public
name|int
name|getTimeBeforeDispatchStarts
parameter_list|()
block|{
return|return
name|timeBeforeDispatchStarts
return|;
block|}
specifier|public
name|void
name|setTimeBeforeDispatchStarts
parameter_list|(
name|int
name|timeBeforeDispatchStarts
parameter_list|)
block|{
name|this
operator|.
name|timeBeforeDispatchStarts
operator|=
name|timeBeforeDispatchStarts
expr_stmt|;
block|}
specifier|public
name|int
name|getConsumersBeforeDispatchStarts
parameter_list|()
block|{
return|return
name|consumersBeforeDispatchStarts
return|;
block|}
specifier|public
name|void
name|setConsumersBeforeDispatchStarts
parameter_list|(
name|int
name|consumersBeforeDispatchStarts
parameter_list|)
block|{
name|this
operator|.
name|consumersBeforeDispatchStarts
operator|=
name|consumersBeforeDispatchStarts
expr_stmt|;
block|}
specifier|public
name|void
name|setAllConsumersExclusiveByDefault
parameter_list|(
name|boolean
name|allConsumersExclusiveByDefault
parameter_list|)
block|{
name|this
operator|.
name|allConsumersExclusiveByDefault
operator|=
name|allConsumersExclusiveByDefault
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllConsumersExclusiveByDefault
parameter_list|()
block|{
return|return
name|allConsumersExclusiveByDefault
return|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
specifier|private
name|QueueMessageReference
name|createMessageReference
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|QueueMessageReference
name|result
init|=
operator|new
name|IndirectMessageReference
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|Message
index|[]
name|browse
parameter_list|()
block|{
name|List
argument_list|<
name|Message
argument_list|>
name|browseList
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|doBrowse
argument_list|(
name|browseList
argument_list|,
name|getMaxBrowsePageSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|browseList
operator|.
name|toArray
argument_list|(
operator|new
name|Message
index|[
name|browseList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|doBrowse
parameter_list|(
name|List
argument_list|<
name|Message
argument_list|>
name|browseList
parameter_list|,
name|int
name|max
parameter_list|)
block|{
specifier|final
name|ConnectionContext
name|connectionContext
init|=
name|createConnectionContext
argument_list|()
decl_stmt|;
try|try
block|{
name|pageInMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessageReference
argument_list|>
name|toExpire
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|addAll
argument_list|(
name|pagedInPendingDispatch
operator|.
name|values
argument_list|()
argument_list|,
name|browseList
argument_list|,
name|max
argument_list|,
name|toExpire
argument_list|)
expr_stmt|;
for|for
control|(
name|MessageReference
name|ref
range|:
name|toExpire
control|)
block|{
name|pagedInPendingDispatch
operator|.
name|remove
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|ref
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expiring from pagedInPending: "
operator|+
name|ref
argument_list|)
expr_stmt|;
block|}
name|messageExpired
argument_list|(
name|connectionContext
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|toExpire
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|addAll
argument_list|(
name|pagedInMessages
operator|.
name|values
argument_list|()
argument_list|,
name|browseList
argument_list|,
name|max
argument_list|,
name|toExpire
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|MessageReference
name|ref
range|:
name|toExpire
control|)
block|{
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|ref
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expiring from pagedInMessages: "
operator|+
name|ref
argument_list|)
expr_stmt|;
block|}
name|messageExpired
argument_list|(
name|connectionContext
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pagedInMessagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pagedInMessages
operator|.
name|remove
argument_list|(
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|browseList
operator|.
name|size
argument_list|()
operator|<
name|getMaxBrowsePageSize
argument_list|()
condition|)
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|messages
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|messages
operator|.
name|hasNext
argument_list|()
operator|&&
name|browseList
operator|.
name|size
argument_list|()
operator|<
name|max
condition|)
block|{
name|MessageReference
name|node
init|=
name|messages
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|isExpired
argument_list|()
condition|)
block|{
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|node
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expiring from messages: "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
name|messageExpired
argument_list|(
name|connectionContext
argument_list|,
name|createMessageReference
argument_list|(
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|messages
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|messages
operator|.
name|rollback
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|browseList
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|browseList
operator|.
name|add
argument_list|(
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|messages
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem retrieving message for browse"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|MessageReference
argument_list|>
name|refs
parameter_list|,
name|List
argument_list|<
name|Message
argument_list|>
name|l
parameter_list|,
name|int
name|maxBrowsePageSize
parameter_list|,
name|List
argument_list|<
name|MessageReference
argument_list|>
name|toExpire
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
extends|extends
name|MessageReference
argument_list|>
name|i
init|=
name|refs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|l
operator|.
name|size
argument_list|()
operator|<
name|getMaxBrowsePageSize
argument_list|()
condition|;
control|)
block|{
name|QueueMessageReference
name|ref
init|=
operator|(
name|QueueMessageReference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|isExpired
argument_list|()
condition|)
block|{
name|toExpire
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|l
operator|.
name|contains
argument_list|(
name|ref
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|ref
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|QueueMessageReference
name|getMessage
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|MessageId
name|msgId
init|=
operator|new
name|MessageId
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|QueueMessageReference
name|ref
init|=
name|this
operator|.
name|pagedInMessages
operator|.
name|get
argument_list|(
name|msgId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
block|{
return|return
name|ref
return|;
block|}
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|messagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|messages
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|messages
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageReference
name|mr
init|=
name|messages
operator|.
name|next
argument_list|()
decl_stmt|;
name|QueueMessageReference
name|qmr
init|=
name|createMessageReference
argument_list|(
name|mr
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|qmr
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
name|messages
operator|.
name|rollback
argument_list|(
name|qmr
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgId
operator|.
name|equals
argument_list|(
name|qmr
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|qmr
return|;
block|}
block|}
block|}
finally|finally
block|{
name|messages
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|purge
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionContext
name|c
init|=
name|createConnectionContext
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessageReference
argument_list|>
name|list
init|=
literal|null
decl_stmt|;
do|do
block|{
name|doPageIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|list
operator|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|(
name|pagedInMessages
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|MessageReference
name|ref
range|:
name|list
control|)
block|{
try|try
block|{
name|QueueMessageReference
name|r
init|=
operator|(
name|QueueMessageReference
operator|)
name|ref
decl_stmt|;
name|removeMessage
argument_list|(
name|c
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
comment|// don't spin/hang if stats are out and there is nothing left in the
comment|// store
block|}
do|while
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
operator|&&
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getActiveMQDestination
argument_list|()
operator|.
name|getQualifiedName
argument_list|()
operator|+
literal|" after purge complete, message count stats report: "
operator|+
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|gc
argument_list|()
expr_stmt|;
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|setCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|getMessages
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clearPendingMessages
parameter_list|()
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|resetBatching
argument_list|()
expr_stmt|;
block|}
name|messages
operator|.
name|gc
argument_list|()
expr_stmt|;
name|asyncWakeup
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Removes the message matching the given messageId      */
specifier|public
name|boolean
name|removeMessage
parameter_list|(
name|String
name|messageId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|removeMatchingMessages
argument_list|(
name|createMessageIdFilter
argument_list|(
name|messageId
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Removes the messages matching the given selector      *      * @return the number of messages removed      */
specifier|public
name|int
name|removeMatchingMessages
parameter_list|(
name|String
name|selector
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|removeMatchingMessages
argument_list|(
name|selector
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Removes the messages matching the given selector up to the maximum number      * of matched messages      *      * @return the number of messages removed      */
specifier|public
name|int
name|removeMatchingMessages
parameter_list|(
name|String
name|selector
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|removeMatchingMessages
argument_list|(
name|createSelectorFilter
argument_list|(
name|selector
argument_list|)
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
comment|/**      * Removes the messages matching the given filter up to the maximum number      * of matched messages      *      * @return the number of messages removed      */
specifier|public
name|int
name|removeMatchingMessages
parameter_list|(
name|MessageReferenceFilter
name|filter
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|movedCounter
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|MessageReference
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
name|ConnectionContext
name|context
init|=
name|createConnectionContext
argument_list|()
decl_stmt|;
do|do
block|{
name|doPageIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|set
operator|.
name|addAll
argument_list|(
name|pagedInMessages
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|MessageReference
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
for|for
control|(
name|MessageReference
name|ref
range|:
name|list
control|)
block|{
name|IndirectMessageReference
name|r
init|=
operator|(
name|IndirectMessageReference
operator|)
name|ref
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|removeMessage
argument_list|(
name|context
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|movedCounter
operator|>=
name|maximumMessages
operator|&&
name|maximumMessages
operator|>
literal|0
condition|)
block|{
return|return
name|movedCounter
return|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
condition|)
do|;
return|return
name|movedCounter
return|;
block|}
comment|/**      * Copies the message matching the given messageId      */
specifier|public
name|boolean
name|copyMessageTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|messageId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|copyMatchingMessages
argument_list|(
name|context
argument_list|,
name|createMessageIdFilter
argument_list|(
name|messageId
argument_list|)
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Copies the messages matching the given selector      *      * @return the number of messages copied      */
specifier|public
name|int
name|copyMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|copyMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|dest
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**      * Copies the messages matching the given selector up to the maximum number      * of matched messages      *      * @return the number of messages copied      */
specifier|public
name|int
name|copyMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|copyMatchingMessages
argument_list|(
name|context
argument_list|,
name|createSelectorFilter
argument_list|(
name|selector
argument_list|)
argument_list|,
name|dest
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
comment|/**      * Copies the messages matching the given filter up to the maximum number of      * matched messages      *      * @return the number of messages copied      */
specifier|public
name|int
name|copyMatchingMessages
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReferenceFilter
name|filter
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|movedCounter
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|MessageReference
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|MessageReference
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|int
name|oldMaxSize
init|=
name|getMaxPageSize
argument_list|()
decl_stmt|;
name|setMaxPageSize
argument_list|(
operator|(
name|int
operator|)
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|doPageIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setMaxPageSize
argument_list|(
name|oldMaxSize
argument_list|)
expr_stmt|;
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|set
operator|.
name|addAll
argument_list|(
name|pagedInMessages
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|MessageReference
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|MessageReference
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
for|for
control|(
name|MessageReference
name|ref
range|:
name|list
control|)
block|{
name|IndirectMessageReference
name|r
init|=
operator|(
name|IndirectMessageReference
operator|)
name|ref
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|r
argument_list|)
condition|)
block|{
name|r
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
try|try
block|{
name|Message
name|m
init|=
name|r
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|BrokerSupport
operator|.
name|resend
argument_list|(
name|context
argument_list|,
name|m
argument_list|,
name|dest
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|movedCounter
operator|>=
name|maximumMessages
operator|&&
name|maximumMessages
operator|>
literal|0
condition|)
block|{
return|return
name|movedCounter
return|;
block|}
block|}
finally|finally
block|{
name|r
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
name|count
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
name|count
operator|<
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
condition|)
do|;
return|return
name|movedCounter
return|;
block|}
comment|/**      * Move a message      *      * @param context      *            connection context      * @param m      *            QueueMessageReference      * @param dest      *            ActiveMQDestination      * @throws Exception      */
specifier|public
name|boolean
name|moveMessageTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|QueueMessageReference
name|m
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerSupport
operator|.
name|resend
argument_list|(
name|context
argument_list|,
name|m
operator|.
name|getMessage
argument_list|()
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|removeMessage
argument_list|(
name|context
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|messages
operator|.
name|rollback
argument_list|(
name|m
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Moves the message matching the given messageId      */
specifier|public
name|boolean
name|moveMessageTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|messageId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|createMessageIdFilter
argument_list|(
name|messageId
argument_list|)
argument_list|,
name|dest
argument_list|,
literal|1
argument_list|)
operator|>
literal|0
return|;
block|}
comment|/**      * Moves the messages matching the given selector      *      * @return the number of messages removed      */
specifier|public
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|selector
argument_list|,
name|dest
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**      * Moves the messages matching the given selector up to the maximum number      * of matched messages      */
specifier|public
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|String
name|selector
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|moveMatchingMessagesTo
argument_list|(
name|context
argument_list|,
name|createSelectorFilter
argument_list|(
name|selector
argument_list|)
argument_list|,
name|dest
argument_list|,
name|maximumMessages
argument_list|)
return|;
block|}
comment|/**      * Moves the messages matching the given filter up to the maximum number of      * matched messages      */
specifier|public
name|int
name|moveMatchingMessagesTo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReferenceFilter
name|filter
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|int
name|maximumMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|movedCounter
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|QueueMessageReference
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|QueueMessageReference
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|doPageIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|set
operator|.
name|addAll
argument_list|(
name|pagedInMessages
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|QueueMessageReference
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|QueueMessageReference
argument_list|>
argument_list|(
name|set
argument_list|)
decl_stmt|;
for|for
control|(
name|QueueMessageReference
name|ref
range|:
name|list
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|ref
argument_list|)
condition|)
block|{
comment|// We should only move messages that can be locked.
name|moveMessageTo
argument_list|(
name|context
argument_list|,
name|ref
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|movedCounter
operator|>=
name|maximumMessages
operator|&&
name|maximumMessages
operator|>
literal|0
condition|)
block|{
return|return
name|movedCounter
return|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|this
operator|.
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
operator|&&
name|set
operator|.
name|size
argument_list|()
operator|<
name|maximumMessages
condition|)
do|;
return|return
name|movedCounter
return|;
block|}
comment|/**      * @return true if we would like to iterate again      * @see org.apache.activemq.thread.Task#iterate()      */
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
name|MDC
operator|.
name|put
argument_list|(
literal|"activemq.destination"
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|pageInMoreMessages
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|iteratingMutex
init|)
block|{
comment|// If optimize dispatch is on or this is a slave this method could be called recursively
comment|// we set this state value to short-circuit wakeup in those cases to avoid that as it
comment|// could lead to errors.
name|iterationRunning
operator|=
literal|true
expr_stmt|;
comment|// do early to allow dispatch of these waiting messages
synchronized|synchronized
init|(
name|messagesWaitingForSpace
init|)
block|{
name|Iterator
argument_list|<
name|Runnable
argument_list|>
name|it
init|=
name|messagesWaitingForSpace
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|memoryUsage
operator|.
name|isFull
argument_list|()
condition|)
block|{
name|Runnable
name|op
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|op
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|registerCallbackForNotFullNotification
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|firstConsumer
condition|)
block|{
name|firstConsumer
operator|=
literal|false
expr_stmt|;
try|try
block|{
if|if
condition|(
name|consumersBeforeDispatchStarts
operator|>
literal|0
condition|)
block|{
name|int
name|timeout
init|=
literal|1000
decl_stmt|;
comment|// wait one second by default if
comment|// consumer count isn't reached
if|if
condition|(
name|timeBeforeDispatchStarts
operator|>
literal|0
condition|)
block|{
name|timeout
operator|=
name|timeBeforeDispatchStarts
expr_stmt|;
block|}
if|if
condition|(
name|consumersBeforeStartsLatch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|consumers
operator|.
name|size
argument_list|()
operator|+
literal|" consumers subscribed. Starting dispatch."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|timeout
operator|+
literal|" ms elapsed and "
operator|+
name|consumers
operator|.
name|size
argument_list|()
operator|+
literal|" consumers subscribed. Starting dispatch."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|timeBeforeDispatchStarts
operator|>
literal|0
operator|&&
name|consumersBeforeDispatchStarts
operator|<=
literal|0
condition|)
block|{
name|iteratingMutex
operator|.
name|wait
argument_list|(
name|timeBeforeDispatchStarts
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|timeBeforeDispatchStarts
operator|+
literal|" ms elapsed. Starting dispatch."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|BrowserDispatch
name|pendingBrowserDispatch
init|=
name|browserDispatches
operator|.
name|poll
argument_list|()
decl_stmt|;
name|messagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageInMoreMessages
operator||=
operator|!
name|messages
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|pagedInPendingDispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pageInMoreMessages
operator||=
operator|!
name|pagedInPendingDispatch
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Perhaps we should page always into the pagedInPendingDispatch
comment|// list if
comment|// !messages.isEmpty(), and then if
comment|// !pagedInPendingDispatch.isEmpty()
comment|// then we do a dispatch.
if|if
condition|(
name|pageInMoreMessages
operator|||
name|pendingBrowserDispatch
operator|!=
literal|null
operator|||
operator|!
name|redeliveredWaitingDispatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|pageInMessages
argument_list|(
name|pendingBrowserDispatch
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to page in more queue messages "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pendingBrowserDispatch
operator|!=
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|QueueMessageReference
argument_list|>
name|alreadyDispatchedMessages
init|=
literal|null
decl_stmt|;
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|alreadyDispatchedMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueueMessageReference
argument_list|>
argument_list|(
name|pagedInMessages
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"dispatch to browser: "
operator|+
name|pendingBrowserDispatch
operator|.
name|getBrowser
argument_list|()
operator|+
literal|", already dispatched/paged count: "
operator|+
name|alreadyDispatchedMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|do
block|{
try|try
block|{
name|MessageEvaluationContext
name|msgContext
init|=
operator|new
name|NonCachedMessageEvaluationContext
argument_list|()
decl_stmt|;
name|msgContext
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|QueueBrowserSubscription
name|browser
init|=
name|pendingBrowserDispatch
operator|.
name|getBrowser
argument_list|()
decl_stmt|;
for|for
control|(
name|QueueMessageReference
name|node
range|:
name|alreadyDispatchedMessages
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|.
name|isAcked
argument_list|()
condition|)
block|{
name|msgContext
operator|.
name|setMessageReference
argument_list|(
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|browser
operator|.
name|matches
argument_list|(
name|node
argument_list|,
name|msgContext
argument_list|)
condition|)
block|{
name|browser
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|pendingBrowserDispatch
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exception on dispatch to browser: "
operator|+
name|pendingBrowserDispatch
operator|.
name|getBrowser
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|pendingBrowserDispatch
operator|=
name|browserDispatches
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
do|;
block|}
if|if
condition|(
name|pendingWakeups
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|pendingWakeups
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|MDC
operator|.
name|remove
argument_list|(
literal|"activemq.destination"
argument_list|)
expr_stmt|;
name|iterationRunning
operator|=
literal|false
expr_stmt|;
return|return
name|pendingWakeups
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
specifier|protected
name|MessageReferenceFilter
name|createMessageIdFilter
parameter_list|(
specifier|final
name|String
name|messageId
parameter_list|)
block|{
return|return
operator|new
name|MessageReferenceFilter
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|r
parameter_list|)
block|{
return|return
name|messageId
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"MessageIdFilter: "
operator|+
name|messageId
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|MessageReferenceFilter
name|createSelectorFilter
parameter_list|(
name|String
name|selector
parameter_list|)
throws|throws
name|InvalidSelectorException
block|{
if|if
condition|(
name|selector
operator|==
literal|null
operator|||
name|selector
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|MessageReferenceFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
literal|true
return|;
block|}
block|}
return|;
block|}
specifier|final
name|BooleanExpression
name|selectorExpression
init|=
name|SelectorParser
operator|.
name|parse
argument_list|(
name|selector
argument_list|)
decl_stmt|;
return|return
operator|new
name|MessageReferenceFilter
argument_list|()
block|{
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|r
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageEvaluationContext
name|messageEvaluationContext
init|=
name|context
operator|.
name|getMessageEvaluationContext
argument_list|()
decl_stmt|;
name|messageEvaluationContext
operator|.
name|setMessageReference
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|messageEvaluationContext
operator|.
name|getDestination
argument_list|()
operator|==
literal|null
condition|)
block|{
name|messageEvaluationContext
operator|.
name|setDestination
argument_list|(
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|selectorExpression
operator|.
name|matches
argument_list|(
name|messageEvaluationContext
argument_list|)
return|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|removeMessage
parameter_list|(
name|ConnectionContext
name|c
parameter_list|,
name|QueueMessageReference
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|removeMessage
argument_list|(
name|c
argument_list|,
literal|null
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pagedInPendingDispatch
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeMessage
parameter_list|(
name|ConnectionContext
name|c
parameter_list|,
name|Subscription
name|subs
parameter_list|,
name|QueueMessageReference
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageID
argument_list|(
name|r
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|removeMessage
argument_list|(
name|c
argument_list|,
name|subs
argument_list|,
name|r
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
specifier|final
name|QueueMessageReference
name|reference
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|IOException
block|{
name|reference
operator|.
name|setAcked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// This sends the ack the the journal..
if|if
condition|(
operator|!
name|ack
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
name|acknowledge
argument_list|(
name|context
argument_list|,
name|sub
argument_list|,
name|ack
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|dropMessage
argument_list|(
name|reference
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|acknowledge
argument_list|(
name|context
argument_list|,
name|sub
argument_list|,
name|ack
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|dropMessage
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|wakeup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|reference
operator|.
name|setAcked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ack
operator|.
name|isPoisonAck
argument_list|()
condition|)
block|{
comment|// message gone to DLQ, is ok to allow redelivery
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|messages
operator|.
name|rollback
argument_list|(
name|reference
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|dropMessage
parameter_list|(
name|QueueMessageReference
name|reference
parameter_list|)
block|{
name|reference
operator|.
name|drop
argument_list|()
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|decrement
argument_list|()
expr_stmt|;
name|pagedInMessagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pagedInMessages
operator|.
name|remove
argument_list|(
name|reference
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|messageExpired
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|reference
parameter_list|)
block|{
name|messageExpired
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|messageExpired
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|subs
parameter_list|,
name|MessageReference
name|reference
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"message expired: "
operator|+
name|reference
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|reference
argument_list|,
name|subs
argument_list|)
expr_stmt|;
name|destinationStatistics
operator|.
name|getExpired
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
try|try
block|{
name|removeMessage
argument_list|(
name|context
argument_list|,
name|subs
argument_list|,
operator|(
name|QueueMessageReference
operator|)
name|reference
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to remove expired Message from the store "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|void
name|sendMessage
parameter_list|(
specifier|final
name|Message
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|messages
operator|.
name|addMessageLast
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|void
name|messageSent
parameter_list|(
specifier|final
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|Message
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|destinationStatistics
operator|.
name|getEnqueues
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|destinationStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|increment
argument_list|()
expr_stmt|;
name|messageDelivered
argument_list|(
name|context
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|onMessageWithNoConsumers
argument_list|(
name|context
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|" Message "
operator|+
name|msg
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" sent to "
operator|+
name|this
operator|.
name|destination
argument_list|)
expr_stmt|;
block|}
name|wakeup
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|wakeup
parameter_list|()
block|{
if|if
condition|(
operator|(
name|optimizedDispatch
operator|||
name|isSlave
argument_list|()
operator|)
operator|&&
operator|!
name|iterationRunning
condition|)
block|{
name|iterate
argument_list|()
expr_stmt|;
name|pendingWakeups
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|asyncWakeup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|asyncWakeup
parameter_list|()
block|{
try|try
block|{
name|pendingWakeups
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|this
operator|.
name|taskRunner
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Async task tunner failed to wakeup "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isSlave
parameter_list|()
block|{
return|return
name|broker
operator|.
name|getBrokerService
argument_list|()
operator|.
name|isSlave
argument_list|()
return|;
block|}
specifier|private
name|void
name|doPageIn
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|Exception
block|{
name|PendingList
name|newlyPaged
init|=
name|doPageInForDispatch
argument_list|(
name|force
argument_list|)
decl_stmt|;
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|pagedInPendingDispatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pagedInPendingDispatch
operator|.
name|addAll
argument_list|(
name|newlyPaged
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|MessageReference
name|qmr
range|:
name|newlyPaged
control|)
block|{
if|if
condition|(
operator|!
name|pagedInPendingDispatch
operator|.
name|contains
argument_list|(
name|qmr
argument_list|)
condition|)
block|{
name|pagedInPendingDispatch
operator|.
name|addMessageLast
argument_list|(
name|qmr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|PendingList
name|doPageInForDispatch
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|QueueMessageReference
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|PendingList
name|resultList
init|=
literal|null
decl_stmt|;
name|int
name|toPageIn
init|=
name|Math
operator|.
name|min
argument_list|(
name|getMaxPageSize
argument_list|()
argument_list|,
name|messages
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|" toPageIn: "
operator|+
name|toPageIn
operator|+
literal|", Inflight: "
operator|+
name|destinationStatistics
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|", pagedInMessages.size "
operator|+
name|pagedInMessages
operator|.
name|size
argument_list|()
operator|+
literal|", enqueueCount: "
operator|+
name|destinationStatistics
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|", dequeueCount: "
operator|+
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isLazyDispatch
argument_list|()
operator|&&
operator|!
name|force
condition|)
block|{
comment|// Only page in the minimum number of messages which can be
comment|// dispatched immediately.
name|toPageIn
operator|=
name|Math
operator|.
name|min
argument_list|(
name|getConsumerMessageCountBeforeFull
argument_list|()
argument_list|,
name|toPageIn
argument_list|)
expr_stmt|;
block|}
name|int
name|pagedInPendingSize
init|=
literal|0
decl_stmt|;
name|pagedInPendingDispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|pagedInPendingSize
operator|=
name|pagedInPendingDispatch
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|toPageIn
operator|>
literal|0
operator|&&
operator|(
name|force
operator|||
operator|(
operator|!
name|consumers
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pagedInPendingSize
operator|<
name|getMaxPageSize
argument_list|()
operator|)
operator|)
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|QueueMessageReference
argument_list|>
argument_list|(
name|toPageIn
argument_list|)
expr_stmt|;
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|messages
operator|.
name|setMaxBatchSize
argument_list|(
name|toPageIn
argument_list|)
expr_stmt|;
name|messages
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|messages
operator|.
name|hasNext
argument_list|()
operator|&&
name|count
operator|<
name|toPageIn
condition|)
block|{
name|MessageReference
name|node
init|=
name|messages
operator|.
name|next
argument_list|()
decl_stmt|;
name|messages
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QueueMessageReference
name|ref
init|=
name|createMessageReference
argument_list|(
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|.
name|isExpired
argument_list|()
condition|)
block|{
if|if
condition|(
name|broker
operator|.
name|isExpired
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|messageExpired
argument_list|(
name|createConnectionContext
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|messages
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Only add new messages, not already pagedIn to avoid multiple
comment|// dispatch attempts
name|pagedInMessagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|isPrioritizedMessages
argument_list|()
condition|)
block|{
name|resultList
operator|=
operator|new
name|PrioritizedPendingList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resultList
operator|=
operator|new
name|OrderedPendingList
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|QueueMessageReference
name|ref
range|:
name|result
control|)
block|{
if|if
condition|(
operator|!
name|pagedInMessages
operator|.
name|containsKey
argument_list|(
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
name|pagedInMessages
operator|.
name|put
argument_list|(
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|ref
argument_list|)
expr_stmt|;
name|resultList
operator|.
name|addMessageLast
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ref
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Avoid return null list, if condition is not validated
name|resultList
operator|=
operator|new
name|OrderedPendingList
argument_list|()
expr_stmt|;
block|}
return|return
name|resultList
return|;
block|}
specifier|private
name|void
name|doDispatch
parameter_list|(
name|PendingList
name|list
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|doWakeUp
init|=
literal|false
decl_stmt|;
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|redeliveredWaitingDispatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Try first to dispatch redelivered messages to keep an
comment|// proper order
name|redeliveredWaitingDispatch
operator|=
name|doActualDispatch
argument_list|(
name|redeliveredWaitingDispatch
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pagedInPendingDispatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Next dispatch anything that had not been
comment|// dispatched before.
name|pagedInPendingDispatch
operator|=
name|doActualDispatch
argument_list|(
name|pagedInPendingDispatch
argument_list|)
expr_stmt|;
block|}
comment|// and now see if we can dispatch the new stuff.. and append to
comment|// the pending
comment|// list anything that does not actually get dispatched.
if|if
condition|(
name|list
operator|!=
literal|null
operator|&&
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|pagedInPendingDispatch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pagedInPendingDispatch
operator|.
name|addAll
argument_list|(
name|doActualDispatch
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|MessageReference
name|qmr
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|pagedInPendingDispatch
operator|.
name|contains
argument_list|(
name|qmr
argument_list|)
condition|)
block|{
name|pagedInPendingDispatch
operator|.
name|addMessageLast
argument_list|(
name|qmr
argument_list|)
expr_stmt|;
block|}
block|}
name|doWakeUp
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doWakeUp
condition|)
block|{
comment|// avoid lock order contention
name|asyncWakeup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return list of messages that could get dispatched to consumers if they      *         were not full.      */
specifier|private
name|PendingList
name|doActualDispatch
parameter_list|(
name|PendingList
name|list
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Subscription
argument_list|>
name|consumers
decl_stmt|;
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|this
operator|.
name|consumers
operator|.
name|isEmpty
argument_list|()
operator|||
name|isSlave
argument_list|()
condition|)
block|{
comment|// slave dispatch happens in processDispatchNotification
return|return
name|list
return|;
block|}
name|consumers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|(
name|this
operator|.
name|consumers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|PendingList
name|rc
decl_stmt|;
if|if
condition|(
name|isPrioritizedMessages
argument_list|()
condition|)
block|{
name|rc
operator|=
operator|new
name|PrioritizedPendingList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|=
operator|new
name|OrderedPendingList
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Subscription
argument_list|>
name|fullConsumers
init|=
operator|new
name|HashSet
argument_list|<
name|Subscription
argument_list|>
argument_list|(
name|this
operator|.
name|consumers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|MessageReference
argument_list|>
name|iterator
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MessageReference
name|node
init|=
operator|(
name|MessageReference
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Subscription
name|target
init|=
literal|null
decl_stmt|;
name|int
name|interestCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Subscription
name|s
range|:
name|consumers
control|)
block|{
if|if
condition|(
name|s
operator|instanceof
name|QueueBrowserSubscription
condition|)
block|{
name|interestCount
operator|++
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|fullConsumers
operator|.
name|contains
argument_list|(
name|s
argument_list|)
operator|&&
operator|!
name|s
operator|.
name|isFull
argument_list|()
condition|)
block|{
if|if
condition|(
name|dispatchSelector
operator|.
name|canSelect
argument_list|(
name|s
argument_list|,
name|node
argument_list|)
operator|&&
name|assignMessageGroup
argument_list|(
name|s
argument_list|,
operator|(
name|QueueMessageReference
operator|)
name|node
argument_list|)
condition|)
block|{
comment|// Dispatch it.
name|s
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|target
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
comment|// no further dispatch of list to a full consumer to
comment|// avoid out of order message receipt
name|fullConsumers
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sub full "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
comment|// make sure it gets dispatched again
if|if
condition|(
operator|!
name|node
operator|.
name|isDropped
argument_list|()
operator|&&
operator|!
operator|(
operator|(
name|QueueMessageReference
operator|)
name|node
operator|)
operator|.
name|isAcked
argument_list|()
operator|&&
operator|(
operator|!
name|node
operator|.
name|isDropped
argument_list|()
operator|||
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isBrowser
argument_list|()
operator|)
condition|)
block|{
name|interestCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|target
operator|==
literal|null
operator|&&
name|interestCount
operator|>
literal|0
operator|)
operator|||
name|consumers
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// This means all subs were full or that there are no
comment|// consumers...
name|rc
operator|.
name|addMessageLast
argument_list|(
operator|(
name|QueueMessageReference
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
comment|// If it got dispatched, rotate the consumer list to get round robin
comment|// distribution.
if|if
condition|(
name|target
operator|!=
literal|null
operator|&&
operator|!
name|strictOrderDispatch
operator|&&
name|consumers
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|dispatchSelector
operator|.
name|isExclusiveConsumer
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|removeFromConsumerList
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|addToConsumerList
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|consumers
operator|=
operator|new
name|ArrayList
argument_list|<
name|Subscription
argument_list|>
argument_list|(
name|this
operator|.
name|consumers
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
specifier|protected
name|boolean
name|assignMessageGroup
parameter_list|(
name|Subscription
name|subscription
parameter_list|,
name|QueueMessageReference
name|node
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|result
init|=
literal|true
decl_stmt|;
comment|// Keep message groups together.
name|String
name|groupId
init|=
name|node
operator|.
name|getGroupID
argument_list|()
decl_stmt|;
name|int
name|sequence
init|=
name|node
operator|.
name|getGroupSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupId
operator|!=
literal|null
condition|)
block|{
comment|//MessageGroupMap messageGroupOwners = ((Queue) node
comment|//        .getRegionDestination()).getMessageGroupOwners();
name|MessageGroupMap
name|messageGroupOwners
init|=
name|getMessageGroupOwners
argument_list|()
decl_stmt|;
comment|// If we can own the first, then no-one else should own the
comment|// rest.
if|if
condition|(
name|sequence
operator|==
literal|1
condition|)
block|{
name|assignGroup
argument_list|(
name|subscription
argument_list|,
name|messageGroupOwners
argument_list|,
name|node
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Make sure that the previous owner is still valid, we may
comment|// need to become the new owner.
name|ConsumerId
name|groupOwner
decl_stmt|;
name|groupOwner
operator|=
name|messageGroupOwners
operator|.
name|get
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupOwner
operator|==
literal|null
condition|)
block|{
name|assignGroup
argument_list|(
name|subscription
argument_list|,
name|messageGroupOwners
argument_list|,
name|node
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|groupOwner
operator|.
name|equals
argument_list|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|)
condition|)
block|{
comment|// A group sequence< 1 is an end of group signal.
if|if
condition|(
name|sequence
operator|<
literal|0
condition|)
block|{
name|messageGroupOwners
operator|.
name|removeGroup
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|assignGroup
parameter_list|(
name|Subscription
name|subs
parameter_list|,
name|MessageGroupMap
name|messageGroupOwners
parameter_list|,
name|MessageReference
name|n
parameter_list|,
name|String
name|groupId
parameter_list|)
throws|throws
name|IOException
block|{
name|messageGroupOwners
operator|.
name|put
argument_list|(
name|groupId
argument_list|,
name|subs
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|n
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|instanceof
name|ActiveMQMessage
condition|)
block|{
name|ActiveMQMessage
name|activeMessage
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
decl_stmt|;
try|try
block|{
name|activeMessage
operator|.
name|setBooleanProperty
argument_list|(
literal|"JMSXGroupFirstForConsumer"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to set boolean header: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|pageInMessages
parameter_list|(
name|boolean
name|force
parameter_list|)
throws|throws
name|Exception
block|{
name|doDispatch
argument_list|(
name|doPageInForDispatch
argument_list|(
name|force
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addToConsumerList
parameter_list|(
name|Subscription
name|sub
parameter_list|)
block|{
if|if
condition|(
name|useConsumerPriority
condition|)
block|{
name|consumers
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|consumers
argument_list|,
name|orderedCompare
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumers
operator|.
name|add
argument_list|(
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|removeFromConsumerList
parameter_list|(
name|Subscription
name|sub
parameter_list|)
block|{
return|return
name|consumers
operator|.
name|remove
argument_list|(
name|sub
argument_list|)
return|;
block|}
specifier|private
name|int
name|getConsumerMessageCountBeforeFull
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
name|boolean
name|zeroPrefetch
init|=
literal|false
decl_stmt|;
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Subscription
name|s
range|:
name|consumers
control|)
block|{
name|zeroPrefetch
operator||=
name|s
operator|.
name|getPrefetchSize
argument_list|()
operator|==
literal|0
expr_stmt|;
name|int
name|countBeforeFull
init|=
name|s
operator|.
name|countBeforeFull
argument_list|()
decl_stmt|;
name|total
operator|+=
name|countBeforeFull
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|total
operator|==
literal|0
operator|&&
name|zeroPrefetch
condition|)
block|{
name|total
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
comment|/*      * In slave mode, dispatch is ignored till we get this notification as the      * dispatch process is non deterministic between master and slave. On a      * notification, the actual dispatch to the subscription (as chosen by the      * master) is completed. (non-Javadoc)      * @see      * org.apache.activemq.broker.region.BaseDestination#processDispatchNotification      * (org.apache.activemq.command.MessageDispatchNotification)      */
annotation|@
name|Override
specifier|public
name|void
name|processDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|messageDispatchNotification
parameter_list|)
throws|throws
name|Exception
block|{
comment|// do dispatch
name|Subscription
name|sub
init|=
name|getMatchingSubscription
argument_list|(
name|messageDispatchNotification
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
name|MessageReference
name|message
init|=
name|getMatchingMessage
argument_list|(
name|messageDispatchNotification
argument_list|)
decl_stmt|;
name|sub
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|sub
operator|.
name|processMessageDispatchNotification
argument_list|(
name|messageDispatchNotification
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|QueueMessageReference
name|getMatchingMessage
parameter_list|(
name|MessageDispatchNotification
name|messageDispatchNotification
parameter_list|)
throws|throws
name|Exception
block|{
name|QueueMessageReference
name|message
init|=
literal|null
decl_stmt|;
name|MessageId
name|messageId
init|=
name|messageDispatchNotification
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|MessageReference
name|ref
range|:
name|pagedInPendingDispatch
control|)
block|{
if|if
condition|(
name|messageId
operator|.
name|equals
argument_list|(
name|ref
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
name|message
operator|=
operator|(
name|QueueMessageReference
operator|)
name|ref
expr_stmt|;
name|pagedInPendingDispatch
operator|.
name|remove
argument_list|(
name|ref
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|pagedInPendingDispatchLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|message
operator|=
name|pagedInMessages
operator|.
name|get
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|pagedInMessagesLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|messages
operator|.
name|setMaxBatchSize
argument_list|(
name|getMaxPageSize
argument_list|()
argument_list|)
expr_stmt|;
name|messages
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|messages
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MessageReference
name|node
init|=
name|messages
operator|.
name|next
argument_list|()
decl_stmt|;
name|messages
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|messageId
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getMessageId
argument_list|()
argument_list|)
condition|)
block|{
name|message
operator|=
name|this
operator|.
name|createMessageReference
argument_list|(
name|node
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|messages
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|messagesLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|Message
name|msg
init|=
name|loadMessage
argument_list|(
name|messageId
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|message
operator|=
name|this
operator|.
name|createMessageReference
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Slave broker out of sync with master - Message: "
operator|+
name|messageDispatchNotification
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" on "
operator|+
name|messageDispatchNotification
operator|.
name|getDestination
argument_list|()
operator|+
literal|" does not exist among pending("
operator|+
name|pagedInPendingDispatch
operator|.
name|size
argument_list|()
operator|+
literal|") for subscription: "
operator|+
name|messageDispatchNotification
operator|.
name|getConsumerId
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|message
return|;
block|}
comment|/**      * Find a consumer that matches the id in the message dispatch notification      *      * @param messageDispatchNotification      * @return sub or null if the subscription has been removed before dispatch      * @throws JMSException      */
specifier|private
name|Subscription
name|getMatchingSubscription
parameter_list|(
name|MessageDispatchNotification
name|messageDispatchNotification
parameter_list|)
throws|throws
name|JMSException
block|{
name|Subscription
name|sub
init|=
literal|null
decl_stmt|;
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Subscription
name|s
range|:
name|consumers
control|)
block|{
if|if
condition|(
name|messageDispatchNotification
operator|.
name|getConsumerId
argument_list|()
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|)
condition|)
block|{
name|sub
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|sub
return|;
block|}
specifier|public
name|void
name|onUsageChanged
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Usage
name|usage
parameter_list|,
name|int
name|oldPercentUsage
parameter_list|,
name|int
name|newPercentUsage
parameter_list|)
block|{
if|if
condition|(
name|oldPercentUsage
operator|>
name|newPercentUsage
condition|)
block|{
name|asyncWakeup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Logger
name|getLog
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
specifier|protected
name|boolean
name|isOptimizeStorage
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isDoOptimzeMessageStorage
argument_list|()
condition|)
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|consumers
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Subscription
name|s
range|:
name|consumers
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getPrefetchSize
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|s
operator|.
name|isSlowConsumer
argument_list|()
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|s
operator|.
name|getInFlightUsage
argument_list|()
operator|>
name|getOptimizeMessageStoreInFlightLimit
argument_list|()
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|consumersLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

