begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotReadableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQMapMessageTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ActiveMQMapMessageTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
init|=
literal|"testName"
decl_stmt|;
comment|/**      * Constructor for ActiveMQMapMessageTest.      *       * @param name      */
specifier|public
name|ActiveMQMapMessageTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|ActiveMQMapMessageTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/*      * @see TestCase#setUp()      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/*      * @see TestCase#tearDown()      */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testBytesConversion
parameter_list|()
throws|throws
name|JMSException
throws|,
name|IOException
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setBoolean
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setByte
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setChar
argument_list|(
literal|"char"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDouble
argument_list|(
literal|"double"
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setFloat
argument_list|(
literal|"float"
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setInt
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setLong
argument_list|(
literal|"long"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"object"
argument_list|,
literal|"stringObj"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setShort
argument_list|(
literal|"short"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setString
argument_list|(
literal|"string"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
comment|// Test with a 1Meg String
name|StringBuffer
name|bigSB
init|=
operator|new
name|StringBuffer
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
operator|*
literal|1024
condition|;
name|i
operator|++
control|)
block|{
name|bigSB
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
literal|'a'
operator|+
name|i
operator|%
literal|26
argument_list|)
expr_stmt|;
block|}
name|String
name|bigString
init|=
name|bigSB
operator|.
name|toString
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setString
argument_list|(
literal|"bigString"
argument_list|,
name|bigString
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getBoolean
argument_list|(
literal|"boolean"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getByte
argument_list|(
literal|"byte"
argument_list|)
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|(
literal|"bytes"
argument_list|)
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getChar
argument_list|(
literal|"char"
argument_list|)
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getDouble
argument_list|(
literal|"double"
argument_list|)
argument_list|,
literal|1.5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getFloat
argument_list|(
literal|"float"
argument_list|)
argument_list|,
literal|1.5f
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getInt
argument_list|(
literal|"int"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getLong
argument_list|(
literal|"long"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"object"
argument_list|)
argument_list|,
literal|"stringObj"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getShort
argument_list|(
literal|"short"
argument_list|)
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getString
argument_list|(
literal|"string"
argument_list|)
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getString
argument_list|(
literal|"bigString"
argument_list|)
argument_list|,
name|bigString
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetBoolean
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setBoolean
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getBoolean
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|msg
operator|.
name|setString
argument_list|(
name|name
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getBoolean
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetByte
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setByte
argument_list|(
name|this
operator|.
name|name
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getByte
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|==
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetShort
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|setShort
argument_list|(
name|this
operator|.
name|name
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getShort
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|==
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetChar
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|setChar
argument_list|(
name|this
operator|.
name|name
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getChar
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetInt
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|setInt
argument_list|(
name|this
operator|.
name|name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getInt
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetLong
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|setLong
argument_list|(
name|this
operator|.
name|name
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getLong
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetFloat
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|setFloat
argument_list|(
name|this
operator|.
name|name
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getFloat
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|==
literal|1.5f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetDouble
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|setDouble
argument_list|(
name|this
operator|.
name|name
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getDouble
argument_list|(
name|this
operator|.
name|name
argument_list|)
operator|==
literal|1.5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetString
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|str
init|=
literal|"test"
decl_stmt|;
name|msg
operator|.
name|setString
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getString
argument_list|(
name|this
operator|.
name|name
argument_list|)
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetBytes
parameter_list|()
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|bytes1
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|byte
index|[]
name|bytes2
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes1
argument_list|,
literal|0
argument_list|,
name|bytes2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|bytes1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
name|this
operator|.
name|name
operator|+
literal|"2"
argument_list|,
name|bytes1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|(
name|this
operator|.
name|name
argument_list|)
argument_list|,
name|bytes1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|(
name|this
operator|.
name|name
operator|+
literal|"2"
argument_list|)
operator|.
name|length
argument_list|,
name|bytes2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsEx
parameter_list|)
block|{
name|jmsEx
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetObject
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|Boolean
name|booleanValue
init|=
name|Boolean
operator|.
name|TRUE
decl_stmt|;
name|Byte
name|byteValue
init|=
name|Byte
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytesValue
init|=
operator|new
name|byte
index|[
literal|3
index|]
decl_stmt|;
name|Character
name|charValue
init|=
operator|new
name|Character
argument_list|(
literal|'a'
argument_list|)
decl_stmt|;
name|Double
name|doubleValue
init|=
name|Double
operator|.
name|valueOf
argument_list|(
literal|"1.5"
argument_list|)
decl_stmt|;
name|Float
name|floatValue
init|=
name|Float
operator|.
name|valueOf
argument_list|(
literal|"1.5"
argument_list|)
decl_stmt|;
name|Integer
name|intValue
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|Long
name|longValue
init|=
name|Long
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|Short
name|shortValue
init|=
name|Short
operator|.
name|valueOf
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|String
name|stringValue
init|=
literal|"string"
decl_stmt|;
try|try
block|{
name|msg
operator|.
name|setObject
argument_list|(
literal|"boolean"
argument_list|,
name|booleanValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"byte"
argument_list|,
name|byteValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"bytes"
argument_list|,
name|bytesValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"char"
argument_list|,
name|charValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"double"
argument_list|,
name|doubleValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"float"
argument_list|,
name|floatValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"int"
argument_list|,
name|intValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"long"
argument_list|,
name|longValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"short"
argument_list|,
name|shortValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"string"
argument_list|,
name|stringValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|mfe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught: "
operator|+
name|mfe
argument_list|)
expr_stmt|;
name|mfe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"object formats should be correct"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"boolean"
argument_list|)
operator|instanceof
name|Boolean
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"boolean"
argument_list|)
argument_list|,
name|booleanValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getBoolean
argument_list|(
literal|"boolean"
argument_list|)
argument_list|,
name|booleanValue
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"byte"
argument_list|)
operator|instanceof
name|Byte
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"byte"
argument_list|)
argument_list|,
name|byteValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getByte
argument_list|(
literal|"byte"
argument_list|)
argument_list|,
name|byteValue
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"bytes"
argument_list|)
operator|instanceof
name|byte
index|[]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|byte
index|[]
operator|)
name|msg
operator|.
name|getObject
argument_list|(
literal|"bytes"
argument_list|)
operator|)
operator|.
name|length
argument_list|,
name|bytesValue
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getBytes
argument_list|(
literal|"bytes"
argument_list|)
operator|.
name|length
argument_list|,
name|bytesValue
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"char"
argument_list|)
operator|instanceof
name|Character
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"char"
argument_list|)
argument_list|,
name|charValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getChar
argument_list|(
literal|"char"
argument_list|)
argument_list|,
name|charValue
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"double"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"double"
argument_list|)
argument_list|,
name|doubleValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getDouble
argument_list|(
literal|"double"
argument_list|)
argument_list|,
name|doubleValue
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"float"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"float"
argument_list|)
argument_list|,
name|floatValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getFloat
argument_list|(
literal|"float"
argument_list|)
argument_list|,
name|floatValue
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"int"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"int"
argument_list|)
argument_list|,
name|intValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getInt
argument_list|(
literal|"int"
argument_list|)
argument_list|,
name|intValue
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"long"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"long"
argument_list|)
argument_list|,
name|longValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getLong
argument_list|(
literal|"long"
argument_list|)
argument_list|,
name|longValue
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"short"
argument_list|)
operator|instanceof
name|Short
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"short"
argument_list|)
argument_list|,
name|shortValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getShort
argument_list|(
literal|"short"
argument_list|)
argument_list|,
name|shortValue
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"string"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getObject
argument_list|(
literal|"string"
argument_list|)
argument_list|,
name|stringValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|.
name|getString
argument_list|(
literal|"string"
argument_list|)
argument_list|,
name|stringValue
argument_list|)
expr_stmt|;
name|msg
operator|.
name|clearBody
argument_list|()
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|setObject
argument_list|(
literal|"object"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have thrown exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testGetMapNames
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setBoolean
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setByte
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes1"
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes2"
argument_list|,
operator|new
name|byte
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setChar
argument_list|(
literal|"char"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDouble
argument_list|(
literal|"double"
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setFloat
argument_list|(
literal|"float"
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setInt
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setLong
argument_list|(
literal|"long"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"object"
argument_list|,
literal|"stringObj"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setShort
argument_list|(
literal|"short"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setString
argument_list|(
literal|"string"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|msg
operator|.
name|copy
argument_list|()
expr_stmt|;
name|Enumeration
argument_list|<
name|String
argument_list|>
name|mapNamesEnum
init|=
name|msg
operator|.
name|getMapNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|mapNamesList
init|=
name|Collections
operator|.
name|list
argument_list|(
name|mapNamesEnum
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mapNamesList
operator|.
name|size
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"byte"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"bytes1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"bytes2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"char"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"double"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"float"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"object"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"short"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mapNamesList
operator|.
name|contains
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testItemExists
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|mapMessage
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"exists"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|mapMessage
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|mapMessage
operator|.
name|copy
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|mapMessage
operator|.
name|itemExists
argument_list|(
literal|"exists"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mapMessage
operator|.
name|itemExists
argument_list|(
literal|"doesntExist"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClearBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|mapMessage
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"String"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|mapMessage
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|mapMessage
operator|.
name|isReadOnlyBody
argument_list|()
argument_list|)
expr_stmt|;
name|mapMessage
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|mapMessage
operator|.
name|setContent
argument_list|(
name|mapMessage
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mapMessage
operator|.
name|getString
argument_list|(
literal|"String"
argument_list|)
argument_list|)
expr_stmt|;
name|mapMessage
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"String"
argument_list|,
literal|"String"
argument_list|)
expr_stmt|;
name|mapMessage
operator|=
operator|(
name|ActiveMQMapMessage
operator|)
name|mapMessage
operator|.
name|copy
argument_list|()
expr_stmt|;
name|mapMessage
operator|.
name|getString
argument_list|(
literal|"String"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReadOnlyBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setBoolean
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setByte
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes2"
argument_list|,
operator|new
name|byte
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setChar
argument_list|(
literal|"char"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDouble
argument_list|(
literal|"double"
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setFloat
argument_list|(
literal|"float"
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setInt
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setLong
argument_list|(
literal|"long"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"object"
argument_list|,
literal|"stringObj"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setShort
argument_list|(
literal|"short"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setString
argument_list|(
literal|"string"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|msg
operator|.
name|getBoolean
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getByte
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getBytes
argument_list|(
literal|"bytes"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getChar
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getDouble
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getFloat
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getInt
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getLong
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getObject
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getShort
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getString
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotReadableException
name|mnre
parameter_list|)
block|{
name|fail
argument_list|(
literal|"should be readable"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|msg
operator|.
name|setBoolean
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setByte
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes2"
argument_list|,
operator|new
name|byte
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setChar
argument_list|(
literal|"char"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setDouble
argument_list|(
literal|"double"
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setFloat
argument_list|(
literal|"float"
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setInt
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setLong
argument_list|(
literal|"long"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setObject
argument_list|(
literal|"object"
argument_list|,
literal|"stringObj"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setShort
argument_list|(
literal|"short"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
try|try
block|{
name|msg
operator|.
name|setString
argument_list|(
literal|"string"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|mnwe
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testWriteOnlyBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|ActiveMQMapMessage
name|msg
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBoolean
argument_list|(
literal|"boolean"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setByte
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes"
argument_list|,
operator|new
name|byte
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setBytes
argument_list|(
literal|"bytes2"
argument_list|,
operator|new
name|byte
index|[
literal|3
index|]
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setChar
argument_list|(
literal|"char"
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDouble
argument_list|(
literal|"double"
argument_list|,
literal|1.5
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setFloat
argument_list|(
literal|"float"
argument_list|,
literal|1.5f
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setInt
argument_list|(
literal|"int"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setLong
argument_list|(
literal|"long"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setObject
argument_list|(
literal|"object"
argument_list|,
literal|"stringObj"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setShort
argument_list|(
literal|"short"
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setString
argument_list|(
literal|"string"
argument_list|,
literal|"string"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getBoolean
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getByte
argument_list|(
literal|"byte"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getBytes
argument_list|(
literal|"bytes"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getChar
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getDouble
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getFloat
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getInt
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getLong
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getObject
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getShort
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|getString
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

