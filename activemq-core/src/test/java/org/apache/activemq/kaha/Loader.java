begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_comment
comment|/**  * Store test  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
class|class
name|Loader
extends|extends
name|Thread
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Loader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Store
name|store
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|CountDownLatch
name|start
decl_stmt|;
specifier|private
name|CountDownLatch
name|stop
decl_stmt|;
specifier|public
name|Loader
parameter_list|(
name|String
name|name
parameter_list|,
name|Store
name|store
parameter_list|,
name|int
name|count
parameter_list|,
name|CountDownLatch
name|start
parameter_list|,
name|CountDownLatch
name|stop
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|start
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|start
operator|.
name|await
argument_list|()
expr_stmt|;
name|Marshaller
name|keyMarshaller
init|=
operator|new
name|StringMarshaller
argument_list|()
decl_stmt|;
name|Marshaller
name|valueMarshaller
init|=
operator|new
name|BytesMarshaller
argument_list|()
decl_stmt|;
name|MapContainer
name|container
init|=
name|store
operator|.
name|getMapContainer
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|container
operator|.
name|setKeyMarshaller
argument_list|(
name|keyMarshaller
argument_list|)
expr_stmt|;
name|container
operator|.
name|setValueMarshaller
argument_list|(
name|valueMarshaller
argument_list|)
expr_stmt|;
name|container
operator|.
name|load
argument_list|()
expr_stmt|;
comment|// set data
name|Object
name|value
init|=
name|getData
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|startLoad
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
literal|"key:"
operator|+
name|i
decl_stmt|;
name|container
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|long
name|finishLoad
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|totalLoadTime
init|=
name|finishLoad
operator|-
name|startLoad
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"name "
operator|+
name|name
operator|+
literal|" load time = "
operator|+
name|totalLoadTime
operator|+
literal|"(ms)"
argument_list|)
expr_stmt|;
name|Set
name|keys
init|=
name|container
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|long
name|startExtract
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|container
operator|.
name|get
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
block|}
name|long
name|finishExtract
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|totalExtractTime
init|=
name|finishExtract
operator|-
name|startExtract
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"name "
operator|+
name|name
operator|+
literal|" extract time = "
operator|+
name|totalExtractTime
operator|+
literal|"(ms)"
argument_list|)
expr_stmt|;
name|long
name|startRemove
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|container
operator|.
name|remove
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|finishRemove
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|totalRemoveTime
init|=
name|finishRemove
operator|-
name|startRemove
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"name "
operator|+
name|name
operator|+
literal|" remove time = "
operator|+
name|totalRemoveTime
operator|+
literal|"(ms)"
argument_list|)
expr_stmt|;
comment|//re-insert data of longer length
name|startLoad
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|value
operator|=
name|getData
argument_list|(
literal|2048
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
comment|//System.out.println(this + " Container size = " + container.size());
name|String
name|key
init|=
literal|"key:"
operator|+
name|i
decl_stmt|;
name|container
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|finishLoad
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|totalLoadTime
operator|=
name|finishLoad
operator|-
name|startLoad
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"name "
operator|+
name|name
operator|+
literal|" 2nd load time = "
operator|+
name|totalLoadTime
operator|+
literal|"(ms)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stop
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|getData
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
literal|'a'
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

