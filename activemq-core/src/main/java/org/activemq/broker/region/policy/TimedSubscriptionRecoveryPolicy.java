begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_comment
comment|/**  * This implementation of {@link SubscriptionRecoveryPolicy} will keep a timed  * buffer of messages around in memory and use that to recover new  * subscriptions.  *   * @org.xbean.XBean  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|TimedSubscriptionRecoveryPolicy
implements|implements
name|SubscriptionRecoveryPolicy
block|{
specifier|private
specifier|static
specifier|final
name|int
name|GC_INTERVAL
init|=
literal|1000
decl_stmt|;
comment|// TODO: need to get a better synchronized linked list that has little
comment|// contention between enqueuing and dequeuing
specifier|private
specifier|final
name|List
name|buffer
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|LinkedList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|lastGCRun
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|long
name|recoverDuration
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// Buffer for 1 min.
specifier|static
class|class
name|TimestampWrapper
block|{
specifier|public
name|MessageReference
name|message
decl_stmt|;
specifier|public
name|long
name|timestamp
decl_stmt|;
specifier|public
name|TimestampWrapper
parameter_list|(
name|MessageReference
name|message
parameter_list|,
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|Runnable
name|gcTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|gc
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
name|boolean
name|add
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|message
parameter_list|)
throws|throws
name|Throwable
block|{
name|buffer
operator|.
name|add
argument_list|(
operator|new
name|TimestampWrapper
argument_list|(
name|message
argument_list|,
name|lastGCRun
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|recover
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Topic
name|topic
parameter_list|,
name|Subscription
name|sub
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// Re-dispatch the messages from the buffer.
name|ArrayList
name|copy
init|=
operator|new
name|ArrayList
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|copy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MessageEvaluationContext
name|msgContext
init|=
name|context
operator|.
name|getMessageEvaluationContext
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|copy
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimestampWrapper
name|timestampWrapper
init|=
operator|(
name|TimestampWrapper
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|MessageReference
name|message
init|=
name|timestampWrapper
operator|.
name|message
decl_stmt|;
name|msgContext
operator|.
name|setDestination
argument_list|(
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|)
expr_stmt|;
name|msgContext
operator|.
name|setMessageReference
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|sub
operator|.
name|matches
argument_list|(
name|message
argument_list|,
name|msgContext
argument_list|)
condition|)
block|{
name|sub
operator|.
name|add
argument_list|(
name|timestampWrapper
operator|.
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|msgContext
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|Scheduler
operator|.
name|executePeriodically
argument_list|(
name|gcTask
argument_list|,
name|GC_INTERVAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|Scheduler
operator|.
name|cancel
argument_list|(
name|gcTask
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|gc
parameter_list|()
block|{
name|lastGCRun
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|TimestampWrapper
name|timestampWrapper
init|=
operator|(
name|TimestampWrapper
operator|)
name|buffer
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastGCRun
operator|>
name|timestampWrapper
operator|.
name|timestamp
operator|+
name|recoverDuration
condition|)
block|{
comment|// GC it.
name|buffer
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
specifier|public
name|long
name|getRecoverDuration
parameter_list|()
block|{
return|return
name|recoverDuration
return|;
block|}
specifier|public
name|void
name|setRecoverDuration
parameter_list|(
name|long
name|recoverDuration
parameter_list|)
block|{
name|this
operator|.
name|recoverDuration
operator|=
name|recoverDuration
expr_stmt|;
block|}
block|}
end_class

end_unit

