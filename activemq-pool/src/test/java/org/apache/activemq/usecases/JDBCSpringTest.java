begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCSpringTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JDBCSpringTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|numberOfConsumerThreads
init|=
literal|50
decl_stmt|;
name|int
name|numberOfProducerThreads
init|=
literal|50
decl_stmt|;
name|int
name|numberOfMessages
init|=
literal|100
decl_stmt|;
name|int
name|numberOfQueues
init|=
literal|5
decl_stmt|;
name|String
name|url
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
literal|"xbean:activemq-spring-jdbc.xml"
argument_list|)
expr_stmt|;
comment|//broker.deleteAllMessages();
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testJDBCSpringTest
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using "
operator|+
name|numberOfConsumerThreads
operator|+
literal|" consumers, "
operator|+
name|numberOfProducerThreads
operator|+
literal|" producers, "
operator|+
name|numberOfMessages
operator|+
literal|" messages per publisher, and "
operator|+
name|numberOfQueues
operator|+
literal|" queues."
argument_list|)
expr_stmt|;
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
name|ActiveMQPrefetchPolicy
name|prefetch
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|prefetch
operator|.
name|setQueuePrefetch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|amq
operator|.
name|setPrefetchPolicy
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|amq
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PooledConnectionFactory
operator|)
name|connectionFactory
operator|)
operator|.
name|setMaxConnections
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2048
condition|;
name|i
operator|++
control|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|String
name|twoKbMessage
init|=
name|buffer
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ProducerThread
argument_list|>
name|ProducerThreads
init|=
operator|new
name|ArrayList
argument_list|<
name|ProducerThread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfProducerThreads
condition|;
name|i
operator|++
control|)
block|{
name|ProducerThread
name|thread
init|=
operator|new
name|ProducerThread
argument_list|()
decl_stmt|;
name|thread
operator|.
name|setMessage
argument_list|(
name|twoKbMessage
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setNumberOfMessagesToSend
argument_list|(
name|numberOfMessages
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setNumberOfQueues
argument_list|(
name|numberOfQueues
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setQueuePrefix
argument_list|(
literal|"DEV-1786.queue."
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setSendDelay
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ProducerThreads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|ConsumerThreads
init|=
operator|new
name|ArrayList
argument_list|<
name|Thread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfConsumerThreads
condition|;
name|i
operator|++
control|)
block|{
name|ConsumerThread
name|thread
init|=
operator|new
name|ConsumerThread
argument_list|()
decl_stmt|;
name|MessageDrivenPojo
name|mdp1
init|=
operator|new
name|MessageDrivenPojo
argument_list|()
decl_stmt|;
name|thread
operator|.
name|setMessageDrivenPojo
argument_list|(
name|mdp1
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setConcurrentConsumers
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setDestination
argument_list|(
literal|"DEV-1786.queue."
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setPubSubDomain
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setSessionTransacted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setNumberOfQueues
argument_list|(
name|numberOfQueues
argument_list|)
expr_stmt|;
name|ConsumerThreads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|thread
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
for|for
control|(
name|ProducerThread
name|thread
range|:
name|ProducerThreads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|finished
condition|)
block|{
name|int
name|totalMessages
init|=
literal|0
decl_stmt|;
name|retry
operator|++
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|ConsumerThreads
control|)
block|{
name|totalMessages
operator|+=
operator|(
operator|(
name|ConsumerThread
operator|)
name|thread
operator|)
operator|.
name|getMessageDrivenPojo
argument_list|()
operator|.
name|getMessageCount
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|totalMessages
operator|==
operator|(
name|numberOfMessages
operator|*
name|numberOfProducerThreads
operator|)
condition|)
block|{
name|finished
operator|=
literal|true
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Received all "
operator|+
name|totalMessages
operator|+
literal|" messages. Finishing."
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|ConsumerThreads
control|)
block|{
operator|(
operator|(
name|ConsumerThread
operator|)
name|thread
operator|)
operator|.
name|setRun
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|ConsumerThreads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|retry
operator|==
literal|10
condition|)
block|{
name|fail
argument_list|(
literal|"Received "
operator|+
name|totalMessages
operator|+
literal|", expected "
operator|+
operator|(
name|numberOfMessages
operator|*
name|numberOfProducerThreads
operator|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|totalMessages
operator|+
literal|" received so far..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

