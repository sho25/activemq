begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidClientIDException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidDestinationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSSecurityException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ResourceAllocationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TransactionRolledBackException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Modified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Rejected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|TransactionErrors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|AmqpError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ConnectionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ErrorCondition
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpSupport
block|{
comment|// Symbols used for connection capabilities
specifier|public
specifier|static
specifier|final
name|Symbol
name|SOLE_CONNECTION_CAPABILITY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"sole-connection-for-container"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|ANONYMOUS_RELAY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"ANONYMOUS-RELAY"
argument_list|)
decl_stmt|;
comment|// Symbols used to announce connection error information
specifier|public
specifier|static
specifier|final
name|Symbol
name|CONNECTION_OPEN_FAILED
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"amqp:connection-establishment-failed"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|INVALID_FIELD
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"invalid-field"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|CONTAINER_ID
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"container-id"
argument_list|)
decl_stmt|;
comment|// Symbols used to announce connection redirect ErrorCondition 'info'
specifier|public
specifier|static
specifier|final
name|Symbol
name|PORT
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|NETWORK_HOST
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"network-host"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|OPEN_HOSTNAME
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"hostname"
argument_list|)
decl_stmt|;
comment|// Symbols used for connection properties
specifier|public
specifier|static
specifier|final
name|Symbol
name|QUEUE_PREFIX
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"queue-prefix"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|TOPIC_PREFIX
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"topic-prefix"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|PRODUCT
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"product"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|VERSION
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|PLATFORM
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"platform"
argument_list|)
decl_stmt|;
comment|// Symbols used for receivers.
specifier|public
specifier|static
specifier|final
name|Symbol
name|COPY
init|=
name|Symbol
operator|.
name|getSymbol
argument_list|(
literal|"copy"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|NO_LOCAL_SYMBOL
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"no-local"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Symbol
name|SELECTOR_SYMBOL
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"jms-selector"
argument_list|)
decl_stmt|;
comment|// Delivery states
specifier|public
specifier|static
specifier|final
name|Rejected
name|REJECTED
init|=
operator|new
name|Rejected
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Modified
name|MODIFIED_FAILED
init|=
operator|new
name|Modified
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Modified
name|MODIFIED_FAILED_UNDELIVERABLE
init|=
operator|new
name|Modified
argument_list|()
decl_stmt|;
comment|// Temporary Destination constants
specifier|public
specifier|static
specifier|final
name|Symbol
name|DYNAMIC_NODE_LIFETIME_POLICY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"lifetime-policy"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_QUEUE_CREATOR
init|=
literal|"temp-queue-creator:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEMP_TOPIC_CREATOR
init|=
literal|"temp-topic-creator:"
decl_stmt|;
comment|//----- Static initializer -----------------------------------------------//
static|static
block|{
name|MODIFIED_FAILED
operator|.
name|setDeliveryFailed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MODIFIED_FAILED_UNDELIVERABLE
operator|.
name|setDeliveryFailed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MODIFIED_FAILED_UNDELIVERABLE
operator|.
name|setUndeliverableHere
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//----- Utility Methods --------------------------------------------------//
comment|/**      * Given an ErrorCondition instance create a new Exception that best matches      * the error type.      *      * @param errorCondition      *      The ErrorCondition returned from the remote peer.      *      * @return a new Exception instance that best matches the ErrorCondition value.      */
specifier|public
specifier|static
name|Exception
name|convertToException
parameter_list|(
name|ErrorCondition
name|errorCondition
parameter_list|)
block|{
name|Exception
name|remoteError
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|errorCondition
operator|!=
literal|null
operator|&&
name|errorCondition
operator|.
name|getCondition
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Symbol
name|error
init|=
name|errorCondition
operator|.
name|getCondition
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|extractErrorMessage
argument_list|(
name|errorCondition
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|equals
argument_list|(
name|AmqpError
operator|.
name|UNAUTHORIZED_ACCESS
argument_list|)
condition|)
block|{
name|remoteError
operator|=
operator|new
name|JMSSecurityException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|.
name|equals
argument_list|(
name|AmqpError
operator|.
name|RESOURCE_LIMIT_EXCEEDED
argument_list|)
condition|)
block|{
name|remoteError
operator|=
operator|new
name|ResourceAllocationException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|.
name|equals
argument_list|(
name|AmqpError
operator|.
name|NOT_FOUND
argument_list|)
condition|)
block|{
name|remoteError
operator|=
operator|new
name|InvalidDestinationException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|.
name|equals
argument_list|(
name|TransactionErrors
operator|.
name|TRANSACTION_ROLLBACK
argument_list|)
condition|)
block|{
name|remoteError
operator|=
operator|new
name|TransactionRolledBackException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|.
name|equals
argument_list|(
name|ConnectionError
operator|.
name|REDIRECT
argument_list|)
condition|)
block|{
name|remoteError
operator|=
name|createRedirectException
argument_list|(
name|error
argument_list|,
name|message
argument_list|,
name|errorCondition
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|.
name|equals
argument_list|(
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|errorCondition
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|CONTAINER_ID
operator|.
name|equals
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|INVALID_FIELD
argument_list|)
argument_list|)
condition|)
block|{
name|remoteError
operator|=
operator|new
name|InvalidClientIDException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|remoteError
operator|=
operator|new
name|JMSException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|remoteError
operator|=
operator|new
name|JMSException
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|remoteError
operator|=
operator|new
name|JMSException
argument_list|(
literal|"Unknown error from remote peer"
argument_list|)
expr_stmt|;
block|}
return|return
name|remoteError
return|;
block|}
comment|/**      * Attempt to read and return the embedded error message in the given ErrorCondition      * object.  If no message can be extracted a generic message is returned.      *      * @param errorCondition      *      The ErrorCondition to extract the error message from.      *      * @return an error message extracted from the given ErrorCondition.      */
specifier|public
specifier|static
name|String
name|extractErrorMessage
parameter_list|(
name|ErrorCondition
name|errorCondition
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Received error from remote peer without description"
decl_stmt|;
if|if
condition|(
name|errorCondition
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|errorCondition
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|errorCondition
operator|.
name|getDescription
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|=
name|errorCondition
operator|.
name|getDescription
argument_list|()
expr_stmt|;
block|}
name|Symbol
name|condition
init|=
name|errorCondition
operator|.
name|getCondition
argument_list|()
decl_stmt|;
if|if
condition|(
name|condition
operator|!=
literal|null
condition|)
block|{
name|message
operator|=
name|message
operator|+
literal|" [condition = "
operator|+
name|condition
operator|+
literal|"]"
expr_stmt|;
block|}
block|}
return|return
name|message
return|;
block|}
comment|/**      * When a redirect type exception is received this method is called to create the      * appropriate redirect exception type containing the error details needed.      *      * @param error      *        the Symbol that defines the redirection error type.      * @param message      *        the basic error message that should used or amended for the returned exception.      * @param condition      *        the ErrorCondition that describes the redirection.      *      * @return an Exception that captures the details of the redirection error.      */
specifier|public
specifier|static
name|Exception
name|createRedirectException
parameter_list|(
name|Symbol
name|error
parameter_list|,
name|String
name|message
parameter_list|,
name|ErrorCondition
name|condition
parameter_list|)
block|{
name|Exception
name|result
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|info
init|=
name|condition
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|IOException
argument_list|(
name|message
operator|+
literal|" : Redirection information not set."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|hostname
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
name|OPEN_HOSTNAME
argument_list|)
decl_stmt|;
name|String
name|networkHost
init|=
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
name|NETWORK_HOST
argument_list|)
decl_stmt|;
if|if
condition|(
name|networkHost
operator|==
literal|null
operator|||
name|networkHost
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
operator|new
name|IOException
argument_list|(
name|message
operator|+
literal|" : Redirection information not set."
argument_list|)
expr_stmt|;
block|}
name|int
name|port
init|=
literal|0
decl_stmt|;
try|try
block|{
name|port
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|info
operator|.
name|get
argument_list|(
name|PORT
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|result
operator|=
operator|new
name|IOException
argument_list|(
name|message
operator|+
literal|" : Redirection information not set."
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|AmqpRedirectedException
argument_list|(
name|message
argument_list|,
name|hostname
argument_list|,
name|networkHost
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

