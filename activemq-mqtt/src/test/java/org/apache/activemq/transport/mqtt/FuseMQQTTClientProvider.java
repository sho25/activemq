begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
operator|.
name|utf8
import|;
end_import

begin_class
class|class
name|FuseMQQTTClientProvider
implements|implements
name|MQTTClientProvider
block|{
specifier|private
specifier|final
name|MQTT
name|mqtt
init|=
operator|new
name|MQTT
argument_list|()
decl_stmt|;
specifier|private
name|BlockingConnection
name|connection
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|Exception
block|{
name|mqtt
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
comment|// shut off connect retry
name|mqtt
operator|.
name|setConnectAttemptsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setReconnectAttemptsMax
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connection
operator|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|disconnect
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|connection
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|publish
parameter_list|(
name|String
name|topic
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|qos
parameter_list|)
throws|throws
name|Exception
block|{
name|publish
argument_list|(
name|topic
argument_list|,
name|payload
argument_list|,
name|qos
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|publish
parameter_list|(
name|String
name|topic
parameter_list|,
name|byte
index|[]
name|payload
parameter_list|,
name|int
name|qos
parameter_list|,
name|boolean
name|retained
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|values
argument_list|()
index|[
name|qos
index|]
argument_list|,
name|retained
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|subscribe
parameter_list|(
name|String
name|topic
parameter_list|,
name|int
name|qos
parameter_list|)
throws|throws
name|Exception
block|{
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
name|utf8
argument_list|(
name|topic
argument_list|)
argument_list|,
name|QoS
operator|.
name|values
argument_list|()
index|[
name|qos
index|]
argument_list|)
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsubscribe
parameter_list|(
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
name|topic
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|receive
parameter_list|(
name|int
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|result
init|=
literal|null
decl_stmt|;
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|message
operator|.
name|getPayload
argument_list|()
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSslContext
parameter_list|(
name|SSLContext
name|sslContext
parameter_list|)
block|{
name|mqtt
operator|.
name|setSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWillMessage
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|mqtt
operator|.
name|setWillMessage
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWillTopic
parameter_list|(
name|String
name|topic
parameter_list|)
block|{
name|mqtt
operator|.
name|setWillTopic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setClientId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
name|mqtt
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|kill
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|kill
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setKeepAlive
parameter_list|(
name|int
name|keepAlive
parameter_list|)
throws|throws
name|Exception
block|{
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
name|keepAlive
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

