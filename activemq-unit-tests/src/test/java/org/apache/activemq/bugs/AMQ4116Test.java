begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ4116Test
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|final
name|String
name|tcpAddr
init|=
literal|"tcp://localhost:0"
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
comment|/**      * In this test, a message is produced and consumed from the test queue.      * Memory usage on the test queue should be reset to 0. The memory that was      * consumed is then sent to a second queue. Memory usage on the original      * test queue should remain 0, but actually increased when the second      * enqueue occurs.      */
specifier|public
name|void
name|testVMTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
block|}
comment|/**      * This is an analog to the previous test, but occurs over TCP and passes.      */
specifier|public
name|void
name|testTCPTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|runTest
argument_list|(
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runTest
parameter_list|(
name|ConnectionFactory
name|connFactory
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Verify that test queue is empty and not using any memory.
name|Destination
name|physicalDestination
init|=
name|broker
operator|.
name|getDestination
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|physicalDestination
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Enqueue a single message and verify that the test queue is using
comment|// memory.
name|Connection
name|conn
init|=
name|connFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
operator|new
name|ActiveMQMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Commit, which ensures message is in queue and memory usage updated.
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|physicalDestination
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Consume the message and verify that the test queue is no longer using
comment|// any memory.
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Message
name|received
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
comment|// Commit, which ensures message is removed from queue and memory usage
comment|// updated.
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|physicalDestination
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resend the message to a different queue and verify that the original
comment|// test queue is still not using any memory.
name|ActiveMQQueue
name|secondDestination
init|=
operator|new
name|ActiveMQQueue
argument_list|(
name|AMQ4116Test
operator|.
name|class
operator|+
literal|".second"
argument_list|)
decl_stmt|;
name|MessageProducer
name|secondPproducer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|secondDestination
argument_list|)
decl_stmt|;
name|secondPproducer
operator|.
name|send
argument_list|(
name|received
argument_list|)
expr_stmt|;
comment|// Commit, which ensures message is in queue and memory usage updated.
comment|// NOTE: This assertion fails due to bug.
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|physicalDestination
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create an embedded broker that has both TCP and VM connectors.      */
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|super
operator|.
name|createBroker
argument_list|()
decl_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|addConnector
argument_list|(
name|tcpAddr
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
end_class

end_unit

