begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|console
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
class|class
name|QueryCommand
extends|extends
name|AbstractJmxCommand
block|{
comment|// Predefined type=identifier query
specifier|private
specifier|static
specifier|final
name|Properties
name|PREDEFINED_OBJNAME_QUERY
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Broker"
argument_list|,
literal|"Type=Broker,BrokerName=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Connection"
argument_list|,
literal|"Type=Connection,Connection=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Connector"
argument_list|,
literal|"Type=Connector,ConnectorName=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"NetworkConnector"
argument_list|,
literal|"Type=NetworkConnector,BrokerName=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Queue"
argument_list|,
literal|"Type=Queue,Destination=%1,*"
argument_list|)
expr_stmt|;
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|setProperty
argument_list|(
literal|"Topic"
argument_list|,
literal|"Type=Topic,Destination=%1,*"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|private
specifier|final
name|List
name|queryAddObjects
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
name|querySubObjects
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
name|queryViews
init|=
operator|new
name|ArrayList
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|execute
parameter_list|(
name|List
name|tokens
parameter_list|)
block|{
try|try
block|{
comment|// Connect to jmx server
name|JMXConnector
name|jmxConnector
init|=
name|createJmxConnector
argument_list|()
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
comment|// Query for the mbeans to add
name|Set
name|addMBeans
init|=
name|AmqJmxSupport
operator|.
name|queryMBeans
argument_list|(
name|server
argument_list|,
name|queryAddObjects
argument_list|)
decl_stmt|;
comment|// Query for the mbeans to sub
if|if
condition|(
name|querySubObjects
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Set
name|subMBeans
init|=
name|AmqJmxSupport
operator|.
name|queryMBeans
argument_list|(
name|server
argument_list|,
name|querySubObjects
argument_list|)
decl_stmt|;
name|addMBeans
operator|.
name|removeAll
argument_list|(
name|subMBeans
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|addMBeans
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectInstance
name|mbean
init|=
operator|(
name|ObjectInstance
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|AmqJmxSupport
operator|.
name|printMBeanProp
argument_list|(
name|mbean
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|AmqJmxSupport
operator|.
name|printMBeanAttr
argument_list|(
name|server
argument_list|,
name|mbean
argument_list|,
name|queryViews
argument_list|)
expr_stmt|;
block|}
name|closeJmxConnector
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to execute query task. Reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|handleOption
parameter_list|(
name|String
name|token
parameter_list|,
name|List
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
comment|// If token is a additive predefined query define option
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"-Q"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|value
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// If additive query
name|String
name|predefQuery
init|=
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|predefQuery
operator|==
literal|null
condition|)
block|{
name|printError
argument_list|(
literal|"Unknown query object type: "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryStr
init|=
name|AmqJmxSupport
operator|.
name|createQueryString
argument_list|(
name|predefQuery
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|queryAddObjects
operator|.
name|add
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
block|}
comment|// If token is a substractive predefined query define option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"-xQ"
argument_list|)
condition|)
block|{
name|String
name|key
init|=
name|token
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|""
decl_stmt|;
name|int
name|pos
init|=
name|key
operator|.
name|indexOf
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|value
operator|=
name|key
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
name|key
operator|=
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
comment|// If subtractive query
name|String
name|predefQuery
init|=
name|PREDEFINED_OBJNAME_QUERY
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|predefQuery
operator|==
literal|null
condition|)
block|{
name|printError
argument_list|(
literal|"Unknown query object type: "
operator|+
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryStr
init|=
name|AmqJmxSupport
operator|.
name|createQueryString
argument_list|(
name|predefQuery
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|querySubObjects
operator|.
name|add
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
block|}
comment|// If token is an additive object name query option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"--objname"
argument_list|)
condition|)
block|{
comment|// If no object name query is specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"Object name query not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryString
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|queryAddObjects
operator|.
name|add
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
comment|// If token is a substractive object name query option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"--xobjname"
argument_list|)
condition|)
block|{
comment|// If no object name query is specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"Object name query not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|queryString
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|querySubObjects
operator|.
name|add
argument_list|(
name|queryString
argument_list|)
expr_stmt|;
block|}
comment|// If token is a view option
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"--view"
argument_list|)
condition|)
block|{
comment|// If no view specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|printError
argument_list|(
literal|"Attributes to view not specified"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Add the attributes to view
name|Enumeration
name|viewTokens
init|=
operator|new
name|StringTokenizer
argument_list|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|","
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|viewTokens
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|queryViews
operator|.
name|add
argument_list|(
name|viewTokens
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let super class handle unknown option
else|else
block|{
name|super
operator|.
name|handleOption
argument_list|(
name|token
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|printHelp
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Task Usage: Main query [query-options]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Description: Display selected broker component's attributes and statistics."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Query Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -Q<type>=<name>               Add to the search list the specific object type matched by the defined object identifier."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -xQ<type>=<name>              Remove from the search list the specific object type matched by the object identifier."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    --objname<query>             Add to the search list objects matched by the query similar to the JMX object name format."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    --xobjname<query>            Remove from the search list objects matched by the query similar to the JMX object name format."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    --view<attr1>,<attr2>,...    Select the specific attribute of the object to view. By default all attributes will be displayed."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    --jmxurl<url>                Set the JMX URL to connect to."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    --version                     Display the version information."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    -h,-?,--help                  Display the query broker help information."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Examples:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main query"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print all the attributes of all registered objects (queues, topics, connections, etc)."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main query -QQueue=TEST.FOO"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print all the attributes of the queue with destination name TEST.FOO."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main query -QTopic=*"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print all the attributes of all registered topics."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main query --view EnqueueCount,DequeueCount"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print the attributes EnqueueCount and DequeueCount of all registered objects."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main -QTopic=* --view EnqueueCount,DequeueCount"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print the attributes EnqueueCount and DequeueCount of all registered topics."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print the attributes EnqueueCount and DequeueCount of all registered topics and queues."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main -QTopic=* -xQTopic=ActiveMQ.Advisory.*"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print all attributes of all topics except those that has a name that begins with \"ActiveMQ.Advisory\"."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main --objname Type=*Connect*,BrokerName=local* -xQNetworkConnector=*"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print all attributes of all connectors, connections excluding network connectors that belongs to the broker that begins with local."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"    Main -QQueue=* -xQQueue=????"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"        - Print all attributes of all queues except those that are 4 letters long."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

