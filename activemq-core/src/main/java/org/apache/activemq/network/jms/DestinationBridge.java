begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A Destination bridge is used to bridge between to different JMS systems  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|abstract
class|class
name|DestinationBridge
implements|implements
name|Service
implements|,
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DestinationBridge
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|JmsMesageConvertor
name|jmsMessageConvertor
decl_stmt|;
specifier|protected
name|boolean
name|doHandleReplyTo
init|=
literal|true
decl_stmt|;
comment|/**      * @return Returns the consumer.      */
specifier|public
name|MessageConsumer
name|getConsumer
parameter_list|()
block|{
return|return
name|consumer
return|;
block|}
comment|/**      * @param consumer      *            The consumer to set.      */
specifier|public
name|void
name|setConsumer
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
comment|/**      * @return Returns the jmsMessageConvertor.      */
specifier|public
name|JmsMesageConvertor
name|getJmsMessageConvertor
parameter_list|()
block|{
return|return
name|jmsMessageConvertor
return|;
block|}
comment|/**      * @param jmsMessageConvertor      *            The jmsMessageConvertor to set.      */
specifier|public
name|void
name|setJmsMessageConvertor
parameter_list|(
name|JmsMesageConvertor
name|jmsMessageConvertor
parameter_list|)
block|{
name|this
operator|.
name|jmsMessageConvertor
operator|=
name|jmsMessageConvertor
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|MessageConsumer
name|consumer
init|=
name|createConsumer
argument_list|()
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|createProducer
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|started
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
operator|&&
name|message
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|doHandleReplyTo
condition|)
block|{
name|Destination
name|replyTo
init|=
name|message
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
name|replyTo
operator|=
name|processReplyToDestination
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|.
name|setJMSReplyTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|Message
name|converted
init|=
name|jmsMessageConvertor
operator|.
name|convert
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|converted
operator|==
name|message
operator|&&
name|converted
operator|instanceof
name|ActiveMQMessage
condition|)
block|{
name|converted
operator|=
call|(
name|Message
call|)
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|converted
argument_list|)
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
name|sendMessage
argument_list|(
name|converted
argument_list|)
expr_stmt|;
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"failed to forward message: "
operator|+
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to stop cleanly"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * @return Returns the doHandleReplyTo.      */
specifier|protected
name|boolean
name|isDoHandleReplyTo
parameter_list|()
block|{
return|return
name|doHandleReplyTo
return|;
block|}
comment|/**      * @param doHandleReplyTo The doHandleReplyTo to set.      */
specifier|protected
name|void
name|setDoHandleReplyTo
parameter_list|(
name|boolean
name|doHandleReplyTo
parameter_list|)
block|{
name|this
operator|.
name|doHandleReplyTo
operator|=
name|doHandleReplyTo
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|MessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
specifier|protected
specifier|abstract
name|MessageProducer
name|createProducer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|sendMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|protected
specifier|abstract
name|Destination
name|processReplyToDestination
parameter_list|(
name|Destination
name|destination
parameter_list|)
function_decl|;
block|}
end_class

end_unit

