begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used to make sure that commands are arriving periodically from the peer of  * the transport.  */
end_comment

begin_class
specifier|public
class|class
name|InactivityMonitor
extends|extends
name|AbstractInactivityMonitor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InactivityMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|WireFormatInfo
name|localWireFormatInfo
decl_stmt|;
specifier|private
name|WireFormatInfo
name|remoteWireFormatInfo
decl_stmt|;
specifier|private
name|boolean
name|ignoreRemoteWireFormat
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|ignoreAllWireFormatInfo
init|=
literal|false
decl_stmt|;
specifier|public
name|InactivityMonitor
parameter_list|(
name|Transport
name|next
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|,
name|wireFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|wireFormat
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|ignoreAllWireFormatInfo
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processInboundWireFormatInfo
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|IOException
name|error
init|=
literal|null
decl_stmt|;
name|remoteWireFormatInfo
operator|=
name|info
expr_stmt|;
try|try
block|{
name|startMonitorThreads
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|error
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|onException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processOutboundWireFormatInfo
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
name|localWireFormatInfo
operator|=
name|info
expr_stmt|;
name|startMonitorThreads
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|void
name|startMonitorThreads
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isMonitorStarted
argument_list|()
condition|)
block|{
return|return;
block|}
name|long
name|readCheckTime
init|=
name|getReadCheckTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|readCheckTime
operator|>
literal|0
condition|)
block|{
name|setWriteCheckTime
argument_list|(
name|readCheckTime
operator|>
literal|3
condition|?
name|readCheckTime
operator|/
literal|3
else|:
name|readCheckTime
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|startMonitorThreads
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|configuredOk
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|configured
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ignoreAllWireFormatInfo
condition|)
block|{
name|configured
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|localWireFormatInfo
operator|!=
literal|null
operator|&&
name|remoteWireFormatInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|ignoreRemoteWireFormat
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using min of local: "
operator|+
name|localWireFormatInfo
operator|+
literal|" and remote: "
operator|+
name|remoteWireFormatInfo
argument_list|)
expr_stmt|;
block|}
name|long
name|readCheckTime
init|=
name|Math
operator|.
name|min
argument_list|(
name|localWireFormatInfo
operator|.
name|getMaxInactivityDuration
argument_list|()
argument_list|,
name|remoteWireFormatInfo
operator|.
name|getMaxInactivityDuration
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|writeCheckTime
init|=
name|readCheckTime
operator|>
literal|3
condition|?
name|readCheckTime
operator|/
literal|3
else|:
name|readCheckTime
decl_stmt|;
name|setReadCheckTime
argument_list|(
name|readCheckTime
argument_list|)
expr_stmt|;
name|setInitialDelayTime
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|localWireFormatInfo
operator|.
name|getMaxInactivityDurationInitalDelay
argument_list|()
argument_list|,
name|remoteWireFormatInfo
operator|.
name|getMaxInactivityDurationInitalDelay
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setWriteCheckTime
argument_list|(
name|writeCheckTime
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using local: "
operator|+
name|localWireFormatInfo
argument_list|)
expr_stmt|;
block|}
name|long
name|readCheckTime
init|=
name|localWireFormatInfo
operator|.
name|getMaxInactivityDuration
argument_list|()
decl_stmt|;
name|long
name|writeCheckTime
init|=
name|readCheckTime
operator|>
literal|3
condition|?
name|readCheckTime
operator|/
literal|3
else|:
name|readCheckTime
decl_stmt|;
name|setReadCheckTime
argument_list|(
name|readCheckTime
argument_list|)
expr_stmt|;
name|setInitialDelayTime
argument_list|(
name|localWireFormatInfo
operator|.
name|getMaxInactivityDurationInitalDelay
argument_list|()
argument_list|)
expr_stmt|;
name|setWriteCheckTime
argument_list|(
name|writeCheckTime
argument_list|)
expr_stmt|;
block|}
name|configured
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|configured
return|;
block|}
block|}
end_class

end_unit

