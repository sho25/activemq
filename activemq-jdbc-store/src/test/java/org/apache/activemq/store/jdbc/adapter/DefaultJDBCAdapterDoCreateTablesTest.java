begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|adapter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|WARN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Answers
operator|.
name|RETURNS_DEEP_STUBS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|inOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|Statements
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|InOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DefaultJDBCAdapterDoCreateTablesTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_STATEMENT1
init|=
literal|"createStatement1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CREATE_STATEMENT2
init|=
literal|"createStatement2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CREATE_STATEMENTS
init|=
operator|new
name|String
index|[]
block|{
name|CREATE_STATEMENT1
block|,
name|CREATE_STATEMENT2
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|VENDOR_CODE
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SQL_STATE
init|=
literal|"SqlState"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MY_REASON
init|=
literal|"MyReason"
decl_stmt|;
specifier|private
name|DefaultJDBCAdapter
name|defaultJDBCAdapter
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LoggingEvent
argument_list|>
name|loggingEvents
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ReadWriteLock
name|readWriteLock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Lock
name|lock
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|TransactionContext
name|transactionContext
decl_stmt|;
annotation|@
name|Mock
argument_list|(
name|answer
operator|=
name|RETURNS_DEEP_STUBS
argument_list|)
specifier|private
name|Connection
name|connection
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Statements
name|statements
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|ResultSet
name|resultSet
decl_stmt|;
annotation|@
name|Mock
specifier|private
name|Statement
name|statement1
decl_stmt|,
name|statement2
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|DefaultTestAppender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|loggingEvents
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Logger
name|rootLogger
init|=
name|Logger
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|rootLogger
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|rootLogger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|defaultJDBCAdapter
operator|=
operator|new
name|DefaultJDBCAdapter
argument_list|()
expr_stmt|;
name|defaultJDBCAdapter
operator|.
name|cleanupExclusiveLock
operator|=
name|readWriteLock
expr_stmt|;
name|defaultJDBCAdapter
operator|.
name|statements
operator|=
name|statements
expr_stmt|;
name|when
argument_list|(
name|statements
operator|.
name|getCreateSchemaStatements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CREATE_STATEMENTS
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|transactionContext
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getMetaData
argument_list|()
operator|.
name|getTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|this
operator|.
name|statements
operator|.
name|getFullMessageTableName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"TABLE"
block|}
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|resultSet
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|createStatement
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|statement1
argument_list|,
name|statement2
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|readWriteLock
operator|.
name|writeLock
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lock
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|loggingEvents
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createsTheTablesWhenNoMessageTableExistsAndLogsSqlExceptionsInWarnLevel
parameter_list|()
throws|throws
name|IOException
throws|,
name|SQLException
block|{
name|when
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|statement2
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT2
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SQLException
argument_list|(
name|MY_REASON
argument_list|,
name|SQL_STATE
argument_list|,
name|VENDOR_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|defaultJDBCAdapter
operator|.
name|doCreateTables
argument_list|(
name|transactionContext
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|lock
argument_list|,
name|resultSet
argument_list|,
name|connection
argument_list|,
name|statement1
argument_list|,
name|statement2
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lock
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|resultSet
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|resultSet
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement1
argument_list|)
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT1
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement2
argument_list|)
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT2
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement2
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lock
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|loggingEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|0
argument_list|,
name|DEBUG
argument_list|,
literal|"Executing SQL: "
operator|+
name|CREATE_STATEMENT1
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|1
argument_list|,
name|DEBUG
argument_list|,
literal|"Executing SQL: "
operator|+
name|CREATE_STATEMENT2
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|2
argument_list|,
name|WARN
argument_list|,
literal|"Could not create JDBC tables; they could already exist. Failure was: "
operator|+
name|CREATE_STATEMENT2
operator|+
literal|" Message: "
operator|+
name|MY_REASON
operator|+
literal|" SQLState: "
operator|+
name|SQL_STATE
operator|+
literal|" Vendor code: "
operator|+
name|VENDOR_CODE
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|3
argument_list|,
name|WARN
argument_list|,
literal|"Failure details: "
operator|+
name|MY_REASON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|triesTocreateTheTablesWhenMessageTableExistsAndLogsSqlExceptionsInDebugLevel
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|statement1
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT1
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|SQLException
argument_list|(
name|MY_REASON
argument_list|,
name|SQL_STATE
argument_list|,
name|VENDOR_CODE
argument_list|)
argument_list|)
expr_stmt|;
name|defaultJDBCAdapter
operator|.
name|doCreateTables
argument_list|(
name|transactionContext
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|lock
argument_list|,
name|resultSet
argument_list|,
name|connection
argument_list|,
name|statement1
argument_list|,
name|statement2
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lock
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|resultSet
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|resultSet
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement1
argument_list|)
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT1
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement2
argument_list|)
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT2
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement2
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lock
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|loggingEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|0
argument_list|,
name|DEBUG
argument_list|,
literal|"Executing SQL: "
operator|+
name|CREATE_STATEMENT1
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|1
argument_list|,
name|DEBUG
argument_list|,
literal|"Could not create JDBC tables; The message table already existed. Failure was: "
operator|+
name|CREATE_STATEMENT1
operator|+
literal|" Message: "
operator|+
name|MY_REASON
operator|+
literal|" SQLState: "
operator|+
name|SQL_STATE
operator|+
literal|" Vendor code: "
operator|+
name|VENDOR_CODE
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|2
argument_list|,
name|DEBUG
argument_list|,
literal|"Executing SQL: "
operator|+
name|CREATE_STATEMENT2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitsTheTransactionWhenAutoCommitIsDisabled
parameter_list|()
throws|throws
name|SQLException
throws|,
name|IOException
block|{
name|when
argument_list|(
name|connection
operator|.
name|getAutoCommit
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|resultSet
operator|.
name|next
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|defaultJDBCAdapter
operator|.
name|doCreateTables
argument_list|(
name|transactionContext
argument_list|)
expr_stmt|;
name|InOrder
name|inOrder
init|=
name|inOrder
argument_list|(
name|lock
argument_list|,
name|resultSet
argument_list|,
name|connection
argument_list|,
name|statement1
argument_list|,
name|statement2
argument_list|)
decl_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lock
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|resultSet
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|resultSet
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement1
argument_list|)
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT1
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement1
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|createStatement
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement2
argument_list|)
operator|.
name|execute
argument_list|(
name|CREATE_STATEMENT2
argument_list|)
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|connection
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|statement2
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|inOrder
operator|.
name|verify
argument_list|(
name|lock
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loggingEvents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|0
argument_list|,
name|DEBUG
argument_list|,
literal|"Executing SQL: "
operator|+
name|CREATE_STATEMENT1
argument_list|)
expr_stmt|;
name|assertLog
argument_list|(
literal|1
argument_list|,
name|DEBUG
argument_list|,
literal|"Executing SQL: "
operator|+
name|CREATE_STATEMENT2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertLog
parameter_list|(
name|int
name|messageNumber
parameter_list|,
name|Level
name|level
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|LoggingEvent
name|loggingEvent
init|=
name|loggingEvents
operator|.
name|get
argument_list|(
name|messageNumber
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|level
argument_list|,
name|loggingEvent
operator|.
name|getLevel
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|loggingEvent
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

