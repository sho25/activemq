begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Page
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|VariableMarshaller
import|;
end_import

begin_comment
comment|/**  * BTree implementation  *   *   */
end_comment

begin_class
specifier|public
class|class
name|HashIndex
parameter_list|<
name|Key
parameter_list|,
name|Value
parameter_list|>
implements|implements
name|Index
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|int
name|CLOSED_STATE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OPEN_STATE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HashIndex
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BIN_CAPACITY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAXIMUM_BIN_CAPACITY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MINIMUM_BIN_CAPACITY
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_LOAD_FACTOR
decl_stmt|;
static|static
block|{
name|DEFAULT_BIN_CAPACITY
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"defaultBinSize"
argument_list|,
literal|"1024"
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_MAXIMUM_BIN_CAPACITY
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"maximumCapacity"
argument_list|,
literal|"16384"
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_MINIMUM_BIN_CAPACITY
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"minimumCapacity"
argument_list|,
literal|"16"
argument_list|)
argument_list|)
expr_stmt|;
name|DEFAULT_LOAD_FACTOR
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"defaultLoadFactor"
argument_list|,
literal|"75"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AtomicBoolean
name|loaded
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|int
name|increaseThreshold
decl_stmt|;
specifier|private
name|int
name|decreaseThreshold
decl_stmt|;
comment|// Where the bin page array starts at.
specifier|private
name|int
name|maximumBinCapacity
init|=
name|DEFAULT_MAXIMUM_BIN_CAPACITY
decl_stmt|;
specifier|private
name|int
name|minimumBinCapacity
init|=
name|DEFAULT_MINIMUM_BIN_CAPACITY
decl_stmt|;
comment|// Once binsActive/binCapacity reaches the loadFactor, then we need to
comment|// increase the capacity
specifier|private
name|int
name|loadFactor
init|=
name|DEFAULT_LOAD_FACTOR
decl_stmt|;
specifier|private
name|PageFile
name|pageFile
decl_stmt|;
comment|// This page holds the index metadata.
specifier|private
name|long
name|pageId
decl_stmt|;
specifier|static
class|class
name|Metadata
block|{
specifier|private
name|Page
argument_list|<
name|Metadata
argument_list|>
name|page
decl_stmt|;
comment|// When the index is initializing or resizing.. state changes so that
comment|// on failure it can be properly recovered.
specifier|private
name|int
name|state
decl_stmt|;
specifier|private
name|long
name|binPageId
decl_stmt|;
specifier|private
name|int
name|binCapacity
init|=
name|DEFAULT_BIN_CAPACITY
decl_stmt|;
specifier|private
name|int
name|binsActive
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|public
name|void
name|read
parameter_list|(
name|DataInput
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|state
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|binPageId
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|binCapacity
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|size
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|binsActive
operator|=
name|is
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|writeInt
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|binPageId
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|binCapacity
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeInt
argument_list|(
name|binsActive
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|Marshaller
extends|extends
name|VariableMarshaller
argument_list|<
name|Metadata
argument_list|>
block|{
specifier|public
name|Metadata
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|Metadata
name|rc
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|rc
operator|.
name|read
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|writePayload
parameter_list|(
name|Metadata
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|object
operator|.
name|write
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
specifier|private
name|Metadata
operator|.
name|Marshaller
name|metadataMarshaller
init|=
operator|new
name|Metadata
operator|.
name|Marshaller
argument_list|()
decl_stmt|;
specifier|private
name|HashBin
operator|.
name|Marshaller
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|hashBinMarshaller
init|=
operator|new
name|HashBin
operator|.
name|Marshaller
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
name|Marshaller
argument_list|<
name|Key
argument_list|>
name|keyMarshaller
decl_stmt|;
specifier|private
name|Marshaller
argument_list|<
name|Value
argument_list|>
name|valueMarshaller
decl_stmt|;
comment|/**      * Constructor      *       * @param directory      * @param name      * @param indexManager      * @param numberOfBins      * @throws IOException      */
specifier|public
name|HashIndex
parameter_list|(
name|PageFile
name|pageFile
parameter_list|,
name|long
name|pageId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|pageFile
operator|=
name|pageFile
expr_stmt|;
name|this
operator|.
name|pageId
operator|=
name|pageId
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|load
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|loaded
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
specifier|final
name|Page
argument_list|<
name|Metadata
argument_list|>
name|metadataPage
init|=
name|tx
operator|.
name|load
argument_list|(
name|pageId
argument_list|,
name|metadataMarshaller
argument_list|)
decl_stmt|;
comment|// Is this a brand new index?
if|if
condition|(
name|metadataPage
operator|.
name|getType
argument_list|()
operator|==
name|Page
operator|.
name|PAGE_FREE_TYPE
condition|)
block|{
comment|// We need to create the pages for the bins
name|Page
name|binPage
init|=
name|tx
operator|.
name|allocate
argument_list|(
name|metadata
operator|.
name|binCapacity
argument_list|)
decl_stmt|;
name|metadata
operator|.
name|binPageId
operator|=
name|binPage
operator|.
name|getPageId
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|page
operator|=
name|metadataPage
expr_stmt|;
name|metadataPage
operator|.
name|set
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|clear
argument_list|(
name|tx
argument_list|)
expr_stmt|;
comment|// If failure happens now we can continue initializing the
comment|// the hash bins...
block|}
else|else
block|{
name|metadata
operator|=
name|metadataPage
operator|.
name|get
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|page
operator|=
name|metadataPage
expr_stmt|;
comment|// If we did not have a clean shutdown...
if|if
condition|(
name|metadata
operator|.
name|state
operator|==
name|OPEN_STATE
condition|)
block|{
comment|// Figure out the size and the # of bins that are
comment|// active. Yeah This loads the first page of every bin. :(
comment|// We might want to put this in the metadata page, but
comment|// then that page would be getting updated on every write.
name|metadata
operator|.
name|size
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadata
operator|.
name|binCapacity
condition|;
name|i
operator|++
control|)
block|{
name|int
name|t
init|=
name|sizeOfBin
argument_list|(
name|tx
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|>
literal|0
condition|)
block|{
name|metadata
operator|.
name|binsActive
operator|++
expr_stmt|;
block|}
name|metadata
operator|.
name|size
operator|+=
name|t
expr_stmt|;
block|}
block|}
block|}
name|calcThresholds
argument_list|()
expr_stmt|;
name|metadata
operator|.
name|state
operator|=
name|OPEN_STATE
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metadataPage
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"HashIndex loaded. Using "
operator|+
name|metadata
operator|.
name|binCapacity
operator|+
literal|" bins starting at page "
operator|+
name|metadata
operator|.
name|binPageId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|unload
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|loaded
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|metadata
operator|.
name|state
operator|=
name|CLOSED_STATE
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|sizeOfBin
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBin
argument_list|(
name|tx
argument_list|,
name|index
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|Value
name|get
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|assertLoaded
argument_list|()
expr_stmt|;
return|return
name|getBin
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|containsKey
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|assertLoaded
argument_list|()
expr_stmt|;
return|return
name|getBin
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|synchronized
specifier|public
name|Value
name|put
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|,
name|Value
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|assertLoaded
argument_list|()
expr_stmt|;
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|bin
init|=
name|getBin
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|int
name|originalSize
init|=
name|bin
operator|.
name|size
argument_list|()
decl_stmt|;
name|Value
name|result
init|=
name|bin
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|store
argument_list|(
name|tx
argument_list|,
name|bin
argument_list|)
expr_stmt|;
name|int
name|newSize
init|=
name|bin
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|originalSize
condition|)
block|{
name|metadata
operator|.
name|size
operator|++
expr_stmt|;
if|if
condition|(
name|newSize
operator|==
literal|1
condition|)
block|{
name|metadata
operator|.
name|binsActive
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metadata
operator|.
name|binsActive
operator|>=
name|this
operator|.
name|increaseThreshold
condition|)
block|{
name|newSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maximumBinCapacity
argument_list|,
name|metadata
operator|.
name|binCapacity
operator|*
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|binCapacity
operator|!=
name|newSize
condition|)
block|{
name|resize
argument_list|(
name|tx
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|synchronized
specifier|public
name|Value
name|remove
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|assertLoaded
argument_list|()
expr_stmt|;
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|bin
init|=
name|getBin
argument_list|(
name|tx
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|int
name|originalSize
init|=
name|bin
operator|.
name|size
argument_list|()
decl_stmt|;
name|Value
name|result
init|=
name|bin
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|newSize
init|=
name|bin
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|newSize
operator|!=
name|originalSize
condition|)
block|{
name|store
argument_list|(
name|tx
argument_list|,
name|bin
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|size
operator|--
expr_stmt|;
if|if
condition|(
name|newSize
operator|==
literal|0
condition|)
block|{
name|metadata
operator|.
name|binsActive
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metadata
operator|.
name|binsActive
operator|<=
name|this
operator|.
name|decreaseThreshold
condition|)
block|{
name|newSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|minimumBinCapacity
argument_list|,
name|metadata
operator|.
name|binCapacity
operator|/
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|metadata
operator|.
name|binCapacity
operator|!=
name|newSize
condition|)
block|{
name|resize
argument_list|(
name|tx
argument_list|,
name|newSize
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
block|{
name|assertLoaded
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadata
operator|.
name|binCapacity
condition|;
name|i
operator|++
control|)
block|{
name|long
name|pageId
init|=
name|metadata
operator|.
name|binPageId
operator|+
name|i
decl_stmt|;
name|clearBinAtPage
argument_list|(
name|tx
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|size
operator|=
literal|0
expr_stmt|;
name|metadata
operator|.
name|binsActive
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|iterator
parameter_list|(
name|Transaction
name|tx
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/**      * @param tx      * @param pageId      * @throws IOException      */
specifier|private
name|void
name|clearBinAtPage
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|long
name|pageId
parameter_list|)
throws|throws
name|IOException
block|{
name|Page
argument_list|<
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|page
init|=
name|tx
operator|.
name|load
argument_list|(
name|pageId
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|bin
init|=
operator|new
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|()
decl_stmt|;
name|bin
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|page
operator|.
name|set
argument_list|(
name|bin
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|tx
argument_list|,
name|bin
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|str
init|=
literal|"HashIndex"
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
operator|+
literal|": "
operator|+
name|pageFile
decl_stmt|;
return|return
name|str
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Implementation Methods
comment|// /////////////////////////////////////////////////////////////////
specifier|private
name|void
name|assertLoaded
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|loaded
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The HashIndex is not loaded"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|store
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|bin
parameter_list|)
throws|throws
name|IOException
block|{
name|tx
operator|.
name|store
argument_list|(
name|bin
operator|.
name|getPage
argument_list|()
argument_list|,
name|hashBinMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// While resizing, the following contains the new resize data.
specifier|private
name|void
name|resize
parameter_list|(
name|Transaction
name|tx
parameter_list|,
specifier|final
name|int
name|newSize
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resizing to: "
operator|+
name|newSize
argument_list|)
expr_stmt|;
name|int
name|resizeCapacity
init|=
name|newSize
decl_stmt|;
name|long
name|resizePageId
init|=
name|tx
operator|.
name|allocate
argument_list|(
name|resizeCapacity
argument_list|)
operator|.
name|getPageId
argument_list|()
decl_stmt|;
comment|// In Phase 1 we copy the data to the new bins..
comment|// Initialize the bins..
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resizeCapacity
condition|;
name|i
operator|++
control|)
block|{
name|long
name|pageId
init|=
name|resizePageId
operator|+
name|i
decl_stmt|;
name|clearBinAtPage
argument_list|(
name|tx
argument_list|,
name|pageId
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|binsActive
operator|=
literal|0
expr_stmt|;
comment|// Copy the data from the old bins to the new bins.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadata
operator|.
name|binCapacity
condition|;
name|i
operator|++
control|)
block|{
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|bin
init|=
name|getBin
argument_list|(
name|tx
argument_list|,
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|entry
range|:
name|bin
operator|.
name|getAll
argument_list|(
name|tx
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|resizeBin
init|=
name|getBin
argument_list|(
name|tx
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|resizePageId
argument_list|,
name|resizeCapacity
argument_list|)
decl_stmt|;
name|resizeBin
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|tx
argument_list|,
name|resizeBin
argument_list|)
expr_stmt|;
if|if
condition|(
name|resizeBin
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|metadata
operator|.
name|binsActive
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// In phase 2 we free the old bins and switch the the new bins.
name|tx
operator|.
name|free
argument_list|(
name|metadata
operator|.
name|binPageId
argument_list|,
name|metadata
operator|.
name|binCapacity
argument_list|)
expr_stmt|;
name|metadata
operator|.
name|binCapacity
operator|=
name|resizeCapacity
expr_stmt|;
name|metadata
operator|.
name|binPageId
operator|=
name|resizePageId
expr_stmt|;
name|metadata
operator|.
name|state
operator|=
name|OPEN_STATE
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|metadata
operator|.
name|page
argument_list|,
name|metadataMarshaller
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|calcThresholds
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resizing done.  New bins start at: "
operator|+
name|metadata
operator|.
name|binPageId
argument_list|)
expr_stmt|;
name|resizeCapacity
operator|=
literal|0
expr_stmt|;
name|resizePageId
operator|=
literal|0
expr_stmt|;
block|}
specifier|private
name|void
name|calcThresholds
parameter_list|()
block|{
name|increaseThreshold
operator|=
operator|(
name|metadata
operator|.
name|binCapacity
operator|*
name|loadFactor
operator|)
operator|/
literal|100
expr_stmt|;
name|decreaseThreshold
operator|=
operator|(
name|metadata
operator|.
name|binCapacity
operator|*
name|loadFactor
operator|*
name|loadFactor
operator|)
operator|/
literal|20000
expr_stmt|;
block|}
specifier|private
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getBin
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBin
argument_list|(
name|tx
argument_list|,
name|key
argument_list|,
name|metadata
operator|.
name|binPageId
argument_list|,
name|metadata
operator|.
name|binCapacity
argument_list|)
return|;
block|}
specifier|private
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getBin
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBin
argument_list|(
name|tx
argument_list|,
name|i
argument_list|,
name|metadata
operator|.
name|binPageId
argument_list|)
return|;
block|}
specifier|private
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getBin
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|Key
name|key
parameter_list|,
name|long
name|basePage
parameter_list|,
name|int
name|capacity
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|indexFor
argument_list|(
name|key
argument_list|,
name|capacity
argument_list|)
decl_stmt|;
return|return
name|getBin
argument_list|(
name|tx
argument_list|,
name|i
argument_list|,
name|basePage
argument_list|)
return|;
block|}
specifier|private
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|getBin
parameter_list|(
name|Transaction
name|tx
parameter_list|,
name|int
name|i
parameter_list|,
name|long
name|basePage
parameter_list|)
throws|throws
name|IOException
block|{
name|Page
argument_list|<
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
argument_list|>
name|page
init|=
name|tx
operator|.
name|load
argument_list|(
name|basePage
operator|+
name|i
argument_list|,
name|hashBinMarshaller
argument_list|)
decl_stmt|;
name|HashBin
argument_list|<
name|Key
argument_list|,
name|Value
argument_list|>
name|rc
init|=
name|page
operator|.
name|get
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
name|int
name|indexFor
parameter_list|(
name|Key
name|x
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|x
operator|.
name|hashCode
argument_list|()
operator|%
name|length
argument_list|)
return|;
block|}
comment|// /////////////////////////////////////////////////////////////////
comment|// Property Accessors
comment|// /////////////////////////////////////////////////////////////////
specifier|public
name|Marshaller
argument_list|<
name|Key
argument_list|>
name|getKeyMarshaller
parameter_list|()
block|{
return|return
name|keyMarshaller
return|;
block|}
comment|/**      * Set the marshaller for key objects      *       * @param marshaller      */
specifier|public
specifier|synchronized
name|void
name|setKeyMarshaller
parameter_list|(
name|Marshaller
argument_list|<
name|Key
argument_list|>
name|marshaller
parameter_list|)
block|{
name|this
operator|.
name|keyMarshaller
operator|=
name|marshaller
expr_stmt|;
block|}
specifier|public
name|Marshaller
argument_list|<
name|Value
argument_list|>
name|getValueMarshaller
parameter_list|()
block|{
return|return
name|valueMarshaller
return|;
block|}
comment|/**      * Set the marshaller for value objects      *       * @param marshaller      */
specifier|public
name|void
name|setValueMarshaller
parameter_list|(
name|Marshaller
argument_list|<
name|Value
argument_list|>
name|valueMarshaller
parameter_list|)
block|{
name|this
operator|.
name|valueMarshaller
operator|=
name|valueMarshaller
expr_stmt|;
block|}
comment|/**      * @return number of bins in the index      */
specifier|public
name|int
name|getBinCapacity
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|binCapacity
return|;
block|}
comment|/**      * @param binCapacity      */
specifier|public
name|void
name|setBinCapacity
parameter_list|(
name|int
name|binCapacity
parameter_list|)
block|{
if|if
condition|(
name|loaded
operator|.
name|get
argument_list|()
operator|&&
name|binCapacity
operator|!=
name|metadata
operator|.
name|binCapacity
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Pages already loaded - can't reset bin capacity"
argument_list|)
throw|;
block|}
name|metadata
operator|.
name|binCapacity
operator|=
name|binCapacity
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTransient
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @return the loadFactor      */
specifier|public
name|int
name|getLoadFactor
parameter_list|()
block|{
return|return
name|loadFactor
return|;
block|}
comment|/**      * @param loadFactor the loadFactor to set      */
specifier|public
name|void
name|setLoadFactor
parameter_list|(
name|int
name|loadFactor
parameter_list|)
block|{
name|this
operator|.
name|loadFactor
operator|=
name|loadFactor
expr_stmt|;
block|}
comment|/**      * @return the maximumCapacity      */
specifier|public
name|int
name|setMaximumBinCapacity
parameter_list|()
block|{
return|return
name|maximumBinCapacity
return|;
block|}
comment|/**      * @param maximumCapacity the maximumCapacity to set      */
specifier|public
name|void
name|setMaximumBinCapacity
parameter_list|(
name|int
name|maximumCapacity
parameter_list|)
block|{
name|this
operator|.
name|maximumBinCapacity
operator|=
name|maximumCapacity
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|(
name|Transaction
name|tx
parameter_list|)
block|{
return|return
name|metadata
operator|.
name|size
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|getActiveBins
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|binsActive
return|;
block|}
specifier|public
name|long
name|getBinPageId
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|binPageId
return|;
block|}
specifier|public
name|PageFile
name|getPageFile
parameter_list|()
block|{
return|return
name|pageFile
return|;
block|}
specifier|public
name|int
name|getBinsActive
parameter_list|()
block|{
return|return
name|metadata
operator|.
name|binsActive
return|;
block|}
block|}
end_class

end_unit

