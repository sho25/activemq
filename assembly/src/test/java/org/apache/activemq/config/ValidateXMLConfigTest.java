begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|config
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_class
specifier|public
class|class
name|ValidateXMLConfigTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_LANGUAGE_ATTRIBUTE
init|=
literal|"http://java.sun.com/xml/jaxp/properties/schemaLanguage"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XSD_SCHEMA_LANGUAGE
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|validateDefaultConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|validateXML
argument_list|(
literal|"src/release/conf/activemq.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|validateExampleConfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|// resource:copy-resource brings all config files into target/conf
name|File
name|sampleConfDir
init|=
operator|new
name|File
argument_list|(
literal|"target/conf"
argument_list|)
decl_stmt|;
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|skipped
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"resin-web.xml"
block|,
literal|"web.xml"
block|}
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|xmlFile
range|:
name|sampleConfDir
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|pathname
parameter_list|)
block|{
return|return
name|pathname
operator|.
name|isFile
argument_list|()
operator|&&
name|pathname
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"xml"
argument_list|)
operator|&&
operator|!
name|skipped
operator|.
name|contains
argument_list|(
name|pathname
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
control|)
block|{
name|validateXML
argument_list|(
name|xmlFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|validateXML
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|xmlFile
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|validateXML
argument_list|(
name|xmlFile
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateXML
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
name|getDocumentBuilder
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|parse
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DocumentBuilder
name|getDocumentBuilder
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setValidating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAttribute
argument_list|(
name|SCHEMA_LANGUAGE_ATTRIBUTE
argument_list|,
name|XSD_SCHEMA_LANGUAGE
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"resolve: "
operator|+
name|publicId
operator|+
literal|", sys: "
operator|+
name|systemId
argument_list|)
expr_stmt|;
name|InputSource
name|source
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|systemId
operator|.
name|endsWith
argument_list|(
literal|"activemq-core.xsd"
argument_list|)
condition|)
block|{
name|InputStream
name|stream
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"activemq.xsd"
argument_list|)
decl_stmt|;
name|source
operator|=
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|source
operator|.
name|setPublicId
argument_list|(
name|publicId
argument_list|)
expr_stmt|;
name|source
operator|.
name|setSystemId
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setErrorHandler
argument_list|(
operator|new
name|ErrorHandler
argument_list|()
block|{
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|fail
argument_list|(
name|fileName
operator|+
literal|", "
operator|+
name|exception
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|fail
argument_list|(
name|fileName
operator|+
literal|", "
operator|+
name|exception
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|fail
argument_list|(
name|fileName
operator|+
literal|", "
operator|+
name|exception
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

