begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|ListContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|MapContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|RuntimeStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  * Implementation of a Store  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|StoreImpl
implements|implements
name|Store
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StoreImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Object
name|mutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|RandomAccessFile
name|dataFile
decl_stmt|;
specifier|private
name|Map
name|mapContainers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|Map
name|listContainers
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|RootContainer
name|rootMapContainer
decl_stmt|;
specifier|private
name|RootContainer
name|rootListContainer
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|StoreReader
name|reader
decl_stmt|;
specifier|private
name|StoreWriter
name|writer
decl_stmt|;
specifier|private
name|FreeSpaceManager
name|freeSpaceManager
decl_stmt|;
specifier|protected
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
specifier|protected
name|Thread
name|shutdownHook
decl_stmt|;
specifier|public
name|StoreImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|dataFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|name
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|this
operator|.
name|reader
operator|=
operator|new
name|StoreReader
argument_list|(
name|this
operator|.
name|dataFile
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
operator|new
name|StoreWriter
argument_list|(
name|this
operator|.
name|dataFile
argument_list|)
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Kaha Store opened "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|freeSpaceManager
operator|=
operator|new
name|FreeSpaceManager
argument_list|(
name|this
operator|.
name|writer
argument_list|,
name|this
operator|.
name|reader
argument_list|)
expr_stmt|;
name|initialization
argument_list|()
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#close()      */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|mapContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MapContainerImpl
name|container
init|=
operator|(
name|MapContainerImpl
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|listContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ListContainerImpl
name|container
init|=
operator|(
name|ListContainerImpl
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|container
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|force
argument_list|()
expr_stmt|;
name|dataFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#force()      */
specifier|public
name|void
name|force
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|dataFile
operator|.
name|getFD
argument_list|()
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#clear()      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|mapContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MapContainer
name|container
init|=
operator|(
name|MapContainer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|listContainers
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ListContainer
name|container
init|=
operator|(
name|ListContainer
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#delete()      */
specifier|public
name|boolean
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|dataFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|delete
argument_list|()
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#doesMapContainerExist(java.lang.Object)      */
specifier|public
name|boolean
name|doesMapContainerExist
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
return|return
name|mapContainers
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#getContainer(java.lang.Object)      */
specifier|public
name|MapContainer
name|getMapContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|MapContainer
name|result
init|=
operator|(
name|MapContainerImpl
operator|)
name|mapContainers
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|LocatableItem
name|root
init|=
operator|new
name|LocatableItem
argument_list|()
decl_stmt|;
name|rootMapContainer
operator|.
name|addRoot
argument_list|(
name|id
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|MapContainerImpl
argument_list|(
name|id
argument_list|,
name|this
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|mapContainers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#deleteContainer(java.lang.Object)      */
specifier|public
name|void
name|deleteMapContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|doesMapContainerExist
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|MapContainer
name|container
init|=
name|getMapContainer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|load
argument_list|()
expr_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rootMapContainer
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|mapContainers
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#getContainerKeys()      */
specifier|public
name|Set
name|getMapContainerIds
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|mapContainers
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#doesListContainerExist(java.lang.Object)      */
specifier|public
name|boolean
name|doesListContainerExist
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
return|return
name|listContainers
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#getListContainer(java.lang.Object)      */
specifier|public
name|ListContainer
name|getListContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|ListContainer
name|result
init|=
operator|(
name|ListContainerImpl
operator|)
name|listContainers
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|LocatableItem
name|root
init|=
operator|new
name|LocatableItem
argument_list|()
decl_stmt|;
name|rootListContainer
operator|.
name|addRoot
argument_list|(
name|id
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|ListContainerImpl
argument_list|(
name|id
argument_list|,
name|this
argument_list|,
name|root
argument_list|)
expr_stmt|;
name|listContainers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#deleteListContainer(java.lang.Object)      */
specifier|public
name|void
name|deleteListContainer
parameter_list|(
name|Object
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|doesListContainerExist
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|ListContainer
name|container
init|=
name|getListContainer
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
condition|)
block|{
name|container
operator|.
name|load
argument_list|()
expr_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
name|rootListContainer
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|listContainers
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*      * (non-Javadoc)      *       * @see org.apache.activemq.kaha.Store#getListContainerIds()      */
specifier|public
name|Set
name|getListContainerIds
parameter_list|()
block|{
name|checkClosed
argument_list|()
expr_stmt|;
return|return
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|listContainers
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|dumpFreeSpace
parameter_list|(
name|PrintWriter
name|printer
parameter_list|)
block|{
name|checkClosed
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|freeSpaceManager
operator|.
name|dump
argument_list|(
name|printer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|long
name|storeItem
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Object
name|payload
parameter_list|,
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|int
name|payloadSize
init|=
name|writer
operator|.
name|loadPayload
argument_list|(
name|marshaller
argument_list|,
name|payload
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|item
operator|.
name|setSize
argument_list|(
name|payloadSize
argument_list|)
expr_stmt|;
comment|// free space manager will set offset and write any headers required
comment|// so the position should now be correct for writing
name|item
operator|=
name|freeSpaceManager
operator|.
name|getFreeSpace
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|writer
operator|.
name|storeItem
argument_list|(
name|item
argument_list|,
name|payloadSize
argument_list|)
expr_stmt|;
block|}
return|return
name|item
operator|.
name|getOffset
argument_list|()
return|;
block|}
specifier|protected
name|Object
name|readItem
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
return|return
name|reader
operator|.
name|readItem
argument_list|(
name|marshaller
argument_list|,
name|item
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|readHeader
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|reader
operator|.
name|readHeader
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|readLocation
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|reader
operator|.
name|readLocation
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateItem
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|writer
operator|.
name|updatePayload
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeItem
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|mutex
init|)
block|{
name|freeSpaceManager
operator|.
name|addFreeSpace
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initialization
parameter_list|()
throws|throws
name|IOException
block|{
comment|//add shutdown hook
name|addShutdownHook
argument_list|()
expr_stmt|;
comment|// check for new file
name|LocatableItem
name|mapRoot
init|=
operator|new
name|LocatableItem
argument_list|()
decl_stmt|;
name|LocatableItem
name|listRoot
init|=
operator|new
name|LocatableItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataFile
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|allocateSpace
argument_list|(
name|FreeSpaceManager
operator|.
name|RESIZE_INCREMENT
argument_list|)
expr_stmt|;
name|storeItem
argument_list|(
name|RootContainer
operator|.
name|rootMarshaller
argument_list|,
literal|"mapRoot"
argument_list|,
name|mapRoot
argument_list|)
expr_stmt|;
name|storeItem
argument_list|(
name|RootContainer
operator|.
name|rootMarshaller
argument_list|,
literal|"listRoot"
argument_list|,
name|listRoot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|freeSpaceManager
operator|.
name|scanStoredItems
argument_list|()
expr_stmt|;
name|dataFile
operator|.
name|seek
argument_list|(
name|FreeSpaceManager
operator|.
name|ROOT_SIZE
argument_list|)
expr_stmt|;
name|mapRoot
operator|.
name|setOffset
argument_list|(
name|FreeSpaceManager
operator|.
name|ROOT_SIZE
argument_list|)
expr_stmt|;
name|readItem
argument_list|(
name|RootContainer
operator|.
name|rootMarshaller
argument_list|,
name|mapRoot
argument_list|)
expr_stmt|;
name|listRoot
operator|.
name|setOffset
argument_list|(
name|dataFile
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|readItem
argument_list|(
name|RootContainer
operator|.
name|rootMarshaller
argument_list|,
name|listRoot
argument_list|)
expr_stmt|;
block|}
name|rootMapContainer
operator|=
operator|new
name|RootContainer
argument_list|(
literal|"root"
argument_list|,
name|this
argument_list|,
name|mapRoot
argument_list|)
expr_stmt|;
name|rootMapContainer
operator|.
name|load
argument_list|()
expr_stmt|;
name|Set
name|keys
init|=
name|rootMapContainer
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|id
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|LocatableItem
name|item
init|=
operator|(
name|LocatableItem
operator|)
name|rootMapContainer
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|MapContainer
name|container
init|=
operator|new
name|MapContainerImpl
argument_list|(
name|id
argument_list|,
name|this
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|mapContainers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|rootListContainer
operator|=
operator|new
name|RootContainer
argument_list|(
literal|"root"
argument_list|,
name|this
argument_list|,
name|listRoot
argument_list|)
expr_stmt|;
name|rootListContainer
operator|.
name|load
argument_list|()
expr_stmt|;
name|keys
operator|=
name|rootListContainer
operator|.
name|keySet
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|keys
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|id
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|LocatableItem
name|item
init|=
operator|(
name|LocatableItem
operator|)
name|rootListContainer
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|ListContainer
name|container
init|=
operator|new
name|ListContainerImpl
argument_list|(
name|id
argument_list|,
name|this
argument_list|,
name|item
argument_list|)
decl_stmt|;
name|listContainers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|container
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|checkClosed
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
literal|"The store is closed"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|addShutdownHook
parameter_list|()
block|{
name|shutdownHook
operator|=
operator|new
name|Thread
argument_list|(
literal|"Kaha Store implementation is shutting down"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
try|try
block|{
comment|//this needs to be really quick so ...
name|closed
operator|=
literal|true
expr_stmt|;
name|dataFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to close data file"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeShutdownHook
parameter_list|()
block|{
if|if
condition|(
name|shutdownHook
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to run shutdown hook"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

