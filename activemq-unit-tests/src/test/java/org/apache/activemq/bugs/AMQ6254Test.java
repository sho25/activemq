begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|TopicViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|leveldb
operator|.
name|LevelDBStoreFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|AuthenticationUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|AuthorizationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|AuthorizationPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|DefaultAuthorizationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SimpleAuthenticationPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|TempDestinationAuthorizationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AMQ6254Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ6254Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KAHADB
init|=
literal|"KahaDB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LEVELDB
init|=
literal|"LevelDB"
decl_stmt|;
specifier|private
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|String
name|topicA
init|=
literal|"alphabet.a"
decl_stmt|;
specifier|private
name|String
name|topicB
init|=
literal|"alphabet.b"
decl_stmt|;
specifier|private
name|String
name|persistenceAdapterName
decl_stmt|;
specifier|private
name|boolean
name|pluginsEnabled
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0} -> plugins = {1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|KAHADB
block|,
literal|true
block|}
block|,
block|{
name|KAHADB
block|,
literal|false
block|}
block|,
block|{
name|LEVELDB
block|,
literal|true
block|}
block|,
block|{
name|LEVELDB
block|,
literal|false
block|}
block|,             }
argument_list|)
return|;
block|}
specifier|public
name|AMQ6254Test
parameter_list|(
name|String
name|persistenceAdapterName
parameter_list|,
name|boolean
name|pluginsEnabled
parameter_list|)
block|{
name|this
operator|.
name|persistenceAdapterName
operator|=
name|persistenceAdapterName
expr_stmt|;
name|this
operator|.
name|pluginsEnabled
operator|=
name|pluginsEnabled
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testReactivateKeepaliveSubscription
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create wild card durable subscription
name|Connection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"cliID"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|subscriber
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
literal|"alphabet.>"
argument_list|)
argument_list|,
literal|"alphabet.>"
argument_list|)
decl_stmt|;
comment|// Send message on Topic A
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
name|topicA
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hello A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that message is received
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|subscriber
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Message not received."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello A"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have only one consumer"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToTopic
argument_list|(
name|topicA
argument_list|)
operator|.
name|getConsumerCount
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have one message consumed"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToTopic
argument_list|(
name|topicA
argument_list|)
operator|.
name|getDequeueCount
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have only one destination"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|destA
init|=
name|getDestination
argument_list|(
name|topicA
argument_list|)
decl_stmt|;
return|return
name|destA
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have only one inactive subscription"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restart broker
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker stopped"
argument_list|)
expr_stmt|;
name|brokerService
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker restarted"
argument_list|)
expr_stmt|;
comment|// Recreate wild card durable subscription
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"cliID"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|subscriber
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
literal|"alphabet.>"
argument_list|)
argument_list|,
literal|"alphabet.>"
argument_list|)
expr_stmt|;
comment|// Send message on Topic B
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
name|topicA
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hello Again A"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify both messages are received
name|message
operator|=
operator|(
name|TextMessage
operator|)
name|subscriber
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Message not received."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello Again A"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that we still have a single subscription
name|assertTrue
argument_list|(
literal|"Should have only one destination"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|destA
init|=
name|getDestination
argument_list|(
name|topicA
argument_list|)
decl_stmt|;
return|return
name|destA
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Destination
name|getDestination
parameter_list|(
name|String
name|topicName
parameter_list|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|TopicRegion
name|topicRegion
init|=
operator|(
name|TopicRegion
operator|)
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Destination
argument_list|>
name|destinations
init|=
name|topicRegion
operator|.
name|getDestinations
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|topicName
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|destinations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|destinations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
specifier|private
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|connectionURI
init|=
name|brokerService
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionURI
argument_list|)
decl_stmt|;
return|return
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerService
operator|!=
literal|null
condition|)
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|brokerService
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setKeepDurableSubsActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|persistenceAdapterName
condition|)
block|{
case|case
name|KAHADB
case|:
name|answer
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEVELDB
case|:
name|answer
operator|.
name|setPersistenceFactory
argument_list|(
operator|new
name|LevelDBStoreFactory
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|answer
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|pluginsEnabled
condition|)
block|{
name|ArrayList
argument_list|<
name|BrokerPlugin
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<
name|BrokerPlugin
argument_list|>
argument_list|()
decl_stmt|;
name|BrokerPlugin
name|authenticationPlugin
init|=
name|configureAuthentication
argument_list|()
decl_stmt|;
if|if
condition|(
name|authenticationPlugin
operator|!=
literal|null
condition|)
block|{
name|plugins
operator|.
name|add
argument_list|(
name|configureAuthorization
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|BrokerPlugin
name|authorizationPlugin
init|=
name|configureAuthorization
argument_list|()
decl_stmt|;
if|if
condition|(
name|authorizationPlugin
operator|!=
literal|null
condition|)
block|{
name|plugins
operator|.
name|add
argument_list|(
name|configureAuthentication
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|plugins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BrokerPlugin
index|[]
name|array
init|=
operator|new
name|BrokerPlugin
index|[
name|plugins
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|answer
operator|.
name|setPlugins
argument_list|(
name|plugins
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ActiveMQDestination
index|[]
name|destinations
init|=
block|{
operator|new
name|ActiveMQTopic
argument_list|(
name|topicA
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
name|topicB
argument_list|)
block|}
decl_stmt|;
name|answer
operator|.
name|setDestinations
argument_list|(
name|destinations
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|BrokerPlugin
name|configureAuthentication
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AuthenticationUser
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|AuthenticationUser
argument_list|>
argument_list|()
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
operator|new
name|AuthenticationUser
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|,
literal|"users,admins"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleAuthenticationPlugin
name|authenticationPlugin
init|=
operator|new
name|SimpleAuthenticationPlugin
argument_list|(
name|users
argument_list|)
decl_stmt|;
return|return
name|authenticationPlugin
return|;
block|}
specifier|protected
name|BrokerPlugin
name|configureAuthorization
parameter_list|()
throws|throws
name|Exception
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|DestinationMapEntry
argument_list|>
name|authorizationEntries
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationMapEntry
argument_list|>
argument_list|()
decl_stmt|;
name|AuthorizationEntry
name|entry
init|=
operator|new
name|AuthorizationEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setRead
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|authorizationEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|"USERS.>"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setRead
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|authorizationEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setQueue
argument_list|(
literal|"GUEST.>"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setRead
argument_list|(
literal|"guests"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"guests,users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"guests,users"
argument_list|)
expr_stmt|;
name|authorizationEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setTopic
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setRead
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|authorizationEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setTopic
argument_list|(
literal|"USERS.>"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setRead
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"users"
argument_list|)
expr_stmt|;
name|authorizationEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setTopic
argument_list|(
literal|"GUEST.>"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setRead
argument_list|(
literal|"guests"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"guests,users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"guests,users"
argument_list|)
expr_stmt|;
name|authorizationEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setRead
argument_list|(
literal|"guests,users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setWrite
argument_list|(
literal|"guests,users"
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setAdmin
argument_list|(
literal|"guests,users"
argument_list|)
expr_stmt|;
name|authorizationEntries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|TempDestinationAuthorizationEntry
name|tempEntry
init|=
operator|new
name|TempDestinationAuthorizationEntry
argument_list|()
decl_stmt|;
name|tempEntry
operator|.
name|setRead
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|tempEntry
operator|.
name|setWrite
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|tempEntry
operator|.
name|setAdmin
argument_list|(
literal|"admins"
argument_list|)
expr_stmt|;
name|DefaultAuthorizationMap
name|authorizationMap
init|=
operator|new
name|DefaultAuthorizationMap
argument_list|(
name|authorizationEntries
argument_list|)
decl_stmt|;
name|authorizationMap
operator|.
name|setTempDestinationAuthorizationEntry
argument_list|(
name|tempEntry
argument_list|)
expr_stmt|;
name|AuthorizationPlugin
name|authorizationPlugin
init|=
operator|new
name|AuthorizationPlugin
argument_list|(
name|authorizationMap
argument_list|)
decl_stmt|;
return|return
name|authorizationPlugin
return|;
block|}
specifier|protected
name|TopicViewMBean
name|getProxyToTopic
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|JMSException
block|{
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|name
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|proxy
init|=
operator|(
name|TopicViewMBean
operator|)
name|brokerService
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
block|}
end_class

end_unit

