begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|ConstantPendingMessageLimitStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1461 $  */
end_comment

begin_class
specifier|public
class|class
name|StompAdvisoryTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StompAdvisoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ConnectionFactory
name|factory
decl_stmt|;
specifier|protected
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
name|StompConnection
name|stompConnection
decl_stmt|;
name|URI
name|tcpBrokerUri
decl_stmt|;
name|URI
name|stompBrokerUri
decl_stmt|;
specifier|private
name|PolicyEntry
name|createPolicyEntry
parameter_list|()
block|{
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setAdvisdoryForFastProducers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForConsumed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDiscardingMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForSlowConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryWhenFull
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConstantPendingMessageLimitStrategy
name|strategy
init|=
operator|new
name|ConstantPendingMessageLimitStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPendingMessageLimitStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker://()/localhost?useJmx=false"
argument_list|)
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setAdvisdoryForFastProducers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForConsumed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDiscardingMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForSlowConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryWhenFull
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConstantPendingMessageLimitStrategy
name|strategy
init|=
operator|new
name|ConstantPendingMessageLimitStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPendingMessageLimitStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|PolicyMap
name|pMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|pMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|pMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"stomp://localhost:0"
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"basedir"
argument_list|,
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|tcpBrokerUri
operator|=
name|URISupport
operator|.
name|removeQuery
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnectUri
argument_list|()
argument_list|)
expr_stmt|;
name|stompBrokerUri
operator|=
name|URISupport
operator|.
name|removeQuery
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getConnectUri
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Producing using TCP uri: "
operator|+
name|tcpBrokerUri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consuming using STOMP uri: "
operator|+
name|stompBrokerUri
argument_list|)
expr_stmt|;
name|stompConnection
operator|=
operator|new
name|StompConnection
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|open
argument_list|(
operator|new
name|Socket
argument_list|(
literal|"localhost"
argument_list|,
name|stompBrokerUri
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectionAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testConnectionAdvisory"
argument_list|)
decl_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Connection"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|tcpBrokerUri
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|f
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|f
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Body is not null"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Body should have content"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectionAdvisoryJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testConnectionAdvisory"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_JSON
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Connection"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|tcpBrokerUri
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|f
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|f
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Body is not null"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Body should have content"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectionAdvisoryXML
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testConnectionAdvisory"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Connection"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|tcpBrokerUri
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<ConnectionInfo>"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
name|f
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|f
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Body is not null"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Body should have content"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<ConnectionInfo>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConsumerAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testConsumerAdvisory"
argument_list|)
decl_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Consumer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|tcpBrokerUri
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConsumerInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testProducerAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testProducerAdvisory"
argument_list|)
decl_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Producer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|tcpBrokerUri
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mess
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ProducerInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testProducerAdvisoryXML
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testProducerAdvisoryXML"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_ADVISORY_XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Producer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|tcpBrokerUri
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mess
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<ProducerInfo>"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testProducerAdvisoryJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testProducerAdvisoryJSON"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_ADVISORY_JSON
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Producer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|tcpBrokerUri
argument_list|)
decl_stmt|;
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mess
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ProducerInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

