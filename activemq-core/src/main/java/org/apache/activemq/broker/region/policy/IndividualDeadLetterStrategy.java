begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * A {@link DeadLetterStrategy} where each destination has its own individual  * DLQ using the subject naming hierarchy.  *  * @org.apache.xbean.XBean  *  */
end_comment

begin_class
specifier|public
class|class
name|IndividualDeadLetterStrategy
extends|extends
name|AbstractDeadLetterStrategy
block|{
specifier|private
name|String
name|topicPrefix
init|=
literal|"ActiveMQ.DLQ.Topic."
decl_stmt|;
specifier|private
name|String
name|queuePrefix
init|=
literal|"ActiveMQ.DLQ.Queue."
decl_stmt|;
specifier|private
name|String
name|topicSuffix
decl_stmt|;
specifier|private
name|String
name|queueSuffix
decl_stmt|;
specifier|private
name|boolean
name|useQueueForQueueMessages
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useQueueForTopicMessages
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|destinationPerDurableSubscriber
decl_stmt|;
specifier|public
name|ActiveMQDestination
name|getDeadLetterQueueFor
parameter_list|(
name|Message
name|message
parameter_list|,
name|Subscription
name|subscription
parameter_list|)
block|{
if|if
condition|(
name|message
operator|.
name|getDestination
argument_list|()
operator|.
name|isQueue
argument_list|()
condition|)
block|{
return|return
name|createDestination
argument_list|(
name|message
argument_list|,
name|queuePrefix
argument_list|,
name|queueSuffix
argument_list|,
name|useQueueForQueueMessages
argument_list|,
name|subscription
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|createDestination
argument_list|(
name|message
argument_list|,
name|topicPrefix
argument_list|,
name|topicSuffix
argument_list|,
name|useQueueForTopicMessages
argument_list|,
name|subscription
argument_list|)
return|;
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|String
name|getQueuePrefix
parameter_list|()
block|{
return|return
name|queuePrefix
return|;
block|}
comment|/**      * Sets the prefix to use for all dead letter queues for queue messages      */
specifier|public
name|void
name|setQueuePrefix
parameter_list|(
name|String
name|queuePrefix
parameter_list|)
block|{
name|this
operator|.
name|queuePrefix
operator|=
name|queuePrefix
expr_stmt|;
block|}
specifier|public
name|String
name|getTopicPrefix
parameter_list|()
block|{
return|return
name|topicPrefix
return|;
block|}
comment|/**      * Sets the prefix to use for all dead letter queues for topic messages      */
specifier|public
name|void
name|setTopicPrefix
parameter_list|(
name|String
name|topicPrefix
parameter_list|)
block|{
name|this
operator|.
name|topicPrefix
operator|=
name|topicPrefix
expr_stmt|;
block|}
specifier|public
name|String
name|getQueueSuffix
parameter_list|()
block|{
return|return
name|queueSuffix
return|;
block|}
comment|/**      * Sets the suffix to use for all dead letter queues for queue messages      */
specifier|public
name|void
name|setQueueSuffix
parameter_list|(
name|String
name|queueSuffix
parameter_list|)
block|{
name|this
operator|.
name|queueSuffix
operator|=
name|queueSuffix
expr_stmt|;
block|}
specifier|public
name|String
name|getTopicSuffix
parameter_list|()
block|{
return|return
name|topicSuffix
return|;
block|}
comment|/**      * Sets the suffix to use for all dead letter queues for topic messages      */
specifier|public
name|void
name|setTopicSuffix
parameter_list|(
name|String
name|topicSuffix
parameter_list|)
block|{
name|this
operator|.
name|topicSuffix
operator|=
name|topicSuffix
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseQueueForQueueMessages
parameter_list|()
block|{
return|return
name|useQueueForQueueMessages
return|;
block|}
comment|/**      * Sets whether a queue or topic should be used for queue messages sent to a      * DLQ. The default is to use a Queue      */
specifier|public
name|void
name|setUseQueueForQueueMessages
parameter_list|(
name|boolean
name|useQueueForQueueMessages
parameter_list|)
block|{
name|this
operator|.
name|useQueueForQueueMessages
operator|=
name|useQueueForQueueMessages
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseQueueForTopicMessages
parameter_list|()
block|{
return|return
name|useQueueForTopicMessages
return|;
block|}
comment|/**      * Sets whether a queue or topic should be used for topic messages sent to a      * DLQ. The default is to use a Queue      */
specifier|public
name|void
name|setUseQueueForTopicMessages
parameter_list|(
name|boolean
name|useQueueForTopicMessages
parameter_list|)
block|{
name|this
operator|.
name|useQueueForTopicMessages
operator|=
name|useQueueForTopicMessages
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDestinationPerDurableSubscriber
parameter_list|()
block|{
return|return
name|destinationPerDurableSubscriber
return|;
block|}
comment|/**      * sets whether durable topic subscriptions are to get individual dead letter destinations.      * When true, the DLQ is of the form 'topicPrefix.clientId:subscriptionName'      * The default is false.      * @param destinationPerDurableSubscriber      */
specifier|public
name|void
name|setDestinationPerDurableSubscriber
parameter_list|(
name|boolean
name|destinationPerDurableSubscriber
parameter_list|)
block|{
name|this
operator|.
name|destinationPerDurableSubscriber
operator|=
name|destinationPerDurableSubscriber
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
specifier|protected
name|ActiveMQDestination
name|createDestination
parameter_list|(
name|Message
name|message
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|boolean
name|useQueue
parameter_list|,
name|Subscription
name|subscription
parameter_list|)
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getActiveMQDestination
argument_list|()
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|=
name|prefix
operator|+
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|prefix
operator|+
name|message
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|destinationPerDurableSubscriber
operator|&&
name|subscription
operator|instanceof
name|DurableTopicSubscription
condition|)
block|{
name|name
operator|+=
literal|"."
operator|+
operator|(
operator|(
name|DurableTopicSubscription
operator|)
name|subscription
operator|)
operator|.
name|getSubscriptionKey
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
operator|!
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|+=
name|suffix
expr_stmt|;
block|}
if|if
condition|(
name|useQueue
condition|)
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
name|name
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

