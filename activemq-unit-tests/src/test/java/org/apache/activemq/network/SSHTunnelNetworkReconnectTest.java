begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_comment
comment|/**  * Test network reconnects over SSH tunnels. This case can be especially tricky  * since the SSH tunnels fool the TCP transport into thinking that they are  * initially connected.  *  */
end_comment

begin_class
specifier|public
class|class
name|SSHTunnelNetworkReconnectTest
extends|extends
name|NetworkReconnectTest
block|{
name|ArrayList
argument_list|<
name|Process
argument_list|>
name|processes
init|=
operator|new
name|ArrayList
argument_list|<
name|Process
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createFirstBroker
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"xbean:org/apache/activemq/network/ssh-reconnect-broker1.xml"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createSecondBroker
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"xbean:org/apache/activemq/network/ssh-reconnect-broker2.xml"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|startProcess
argument_list|(
literal|"ssh -Nn -L60006:localhost:61616 localhost"
argument_list|)
expr_stmt|;
name|startProcess
argument_list|(
literal|"ssh -Nn -L60007:localhost:61617 localhost"
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
for|for
control|(
name|Process
name|p
range|:
name|processes
control|)
block|{
name|p
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|startProcess
parameter_list|(
name|String
name|command
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|processes
operator|.
name|add
argument_list|(
name|process
argument_list|)
expr_stmt|;
operator|new
name|Thread
argument_list|(
literal|"stdout: "
operator|+
name|command
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|process
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
operator|new
name|Thread
argument_list|(
literal|"stderr: "
operator|+
name|command
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|InputStream
name|is
init|=
name|process
operator|.
name|getErrorStream
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{                 }
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

