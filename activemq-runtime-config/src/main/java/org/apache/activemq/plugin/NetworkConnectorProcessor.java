begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkConnectorProcessor
extends|extends
name|DefaultConfigurationProcessor
block|{
specifier|public
name|NetworkConnectorProcessor
parameter_list|(
name|RuntimeConfigurationBroker
name|plugin
parameter_list|,
name|Class
name|configurationClass
parameter_list|)
block|{
name|super
argument_list|(
name|plugin
argument_list|,
name|configurationClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNew
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DtoNetworkConnector
name|networkConnector
init|=
operator|(
name|DtoNetworkConnector
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|networkConnector
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|DiscoveryNetworkConnector
name|nc
init|=
name|fromDto
argument_list|(
name|networkConnector
argument_list|,
operator|new
name|DiscoveryNetworkConnector
argument_list|()
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|addNetworkConnector
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|nc
operator|.
name|start
argument_list|()
expr_stmt|;
name|plugin
operator|.
name|info
argument_list|(
literal|"started new network connector: "
operator|+
name|nc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"Failed to add new networkConnector "
operator|+
name|networkConnector
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|DtoNetworkConnector
name|toRemove
init|=
operator|(
name|DtoNetworkConnector
operator|)
name|o
decl_stmt|;
for|for
control|(
name|NetworkConnector
name|existingCandidate
range|:
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getNetworkConnectors
argument_list|()
control|)
block|{
if|if
condition|(
name|configMatch
argument_list|(
name|toRemove
argument_list|,
name|existingCandidate
argument_list|)
condition|)
block|{
if|if
condition|(
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|removeNetworkConnector
argument_list|(
name|existingCandidate
argument_list|)
condition|)
block|{
try|try
block|{
name|existingCandidate
operator|.
name|stop
argument_list|()
expr_stmt|;
name|plugin
operator|.
name|info
argument_list|(
literal|"stopped and removed networkConnector: "
operator|+
name|existingCandidate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"Failed to stop removed network connector: "
operator|+
name|existingCandidate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|configMatch
parameter_list|(
name|DtoNetworkConnector
name|dto
parameter_list|,
name|NetworkConnector
name|candidate
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dtoProps
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|dto
argument_list|,
name|dtoProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|candidateProps
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|candidate
argument_list|,
name|candidateProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// every dto prop must be present in the candidate
for|for
control|(
name|String
name|key
range|:
name|dtoProps
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|candidateProps
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
operator|!
name|candidateProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|dtoProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

