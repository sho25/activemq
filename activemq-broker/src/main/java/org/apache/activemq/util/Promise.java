begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>  *   Used to implement callback based result passing of a promised computation.  *   Can be converted to a future using the future() method.  *</p>  *  * @author<a href="http://hiramchirino.com">Hiram Chirino</a>  */
end_comment

begin_class
specifier|public
class|class
name|Promise
parameter_list|<
name|T
parameter_list|>
extends|extends
name|PromiseCallback
argument_list|<
name|T
argument_list|>
block|{
name|ArrayList
argument_list|<
name|PromiseCallback
argument_list|<
name|T
argument_list|>
argument_list|>
name|callbacks
init|=
operator|new
name|ArrayList
argument_list|<
name|PromiseCallback
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|T
name|value
decl_stmt|;
name|Throwable
name|error
decl_stmt|;
name|Future
argument_list|<
name|T
argument_list|>
name|future
init|=
literal|null
decl_stmt|;
specifier|private
class|class
name|PromiseFuture
extends|extends
name|PromiseCallback
argument_list|<
name|T
argument_list|>
implements|implements
name|Future
argument_list|<
name|T
argument_list|>
block|{
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|cancel
parameter_list|(
name|boolean
name|mayInterruptIfRunning
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|latch
operator|.
name|getCount
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|public
name|T
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
name|value
argument_list|()
return|;
block|}
specifier|public
name|T
name|get
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
if|if
condition|(
name|latch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|unit
argument_list|)
condition|)
block|{
return|return
name|value
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|TimeoutException
argument_list|()
throw|;
block|}
block|}
specifier|public
name|void
name|onComplete
parameter_list|(
name|T
name|value
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|T
name|value
parameter_list|()
throws|throws
name|ExecutionException
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|ExecutionException
argument_list|(
name|error
argument_list|)
throw|;
block|}
return|return
name|value
return|;
block|}
block|}
specifier|public
name|Future
argument_list|<
name|T
argument_list|>
name|future
parameter_list|()
block|{
if|if
condition|(
name|future
operator|==
literal|null
condition|)
block|{
name|PromiseFuture
name|future
init|=
operator|new
name|PromiseFuture
argument_list|()
decl_stmt|;
name|watch
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|this
operator|.
name|future
operator|=
name|future
expr_stmt|;
block|}
return|return
name|future
return|;
block|}
specifier|public
name|void
name|watch
parameter_list|(
name|PromiseCallback
argument_list|<
name|T
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|callback
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"callback cannot be null"
argument_list|)
throw|;
name|boolean
name|queued
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|callbacks
operator|!=
literal|null
condition|)
block|{
name|callbacks
operator|.
name|add
argument_list|(
name|callback
argument_list|)
expr_stmt|;
name|queued
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|queued
condition|)
block|{
name|callback
operator|.
name|onComplete
argument_list|(
name|value
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onComplete
parameter_list|(
name|T
name|value
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|error
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"You can not have both a vaule and error"
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|PromiseCallback
argument_list|<
name|T
argument_list|>
argument_list|>
name|callbacks
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|callbacks
operator|=
name|this
operator|.
name|callbacks
expr_stmt|;
if|if
condition|(
name|callbacks
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
name|this
operator|.
name|callbacks
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|callbacks
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PromiseCallback
name|callback
range|:
name|callbacks
control|)
block|{
name|callback
operator|.
name|onComplete
argument_list|(
name|this
operator|.
name|value
argument_list|,
name|this
operator|.
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

