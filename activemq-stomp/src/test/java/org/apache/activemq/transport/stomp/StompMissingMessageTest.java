begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|StompMissingMessageTest
extends|extends
name|StompTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StompMissingMessageTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|destination
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|destination
operator|=
literal|"/topic/"
operator|+
name|getTopicName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addStompConnector
parameter_list|()
throws|throws
name|Exception
block|{
name|TransportConnector
name|connector
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"stomp://0.0.0.0:"
operator|+
name|port
argument_list|)
decl_stmt|;
name|port
operator|=
name|connector
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProducerConsumerLoop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ITERATIONS
init|=
literal|500
decl_stmt|;
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|ITERATIONS
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|doTestProducerConsumer
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|received
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|ITERATIONS
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|doTestProducerConsumer
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be any consumers"
argument_list|,
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|StompConnection
name|producer
init|=
name|stompConnect
argument_list|()
decl_stmt|;
name|StompConnection
name|consumer
init|=
name|stompConnect
argument_list|()
decl_stmt|;
name|subscribe
argument_list|(
name|consumer
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|producer
argument_list|,
name|index
argument_list|)
expr_stmt|;
try|try
block|{
name|StompFrame
name|frame
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer got frame: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|index
argument_list|,
operator|(
name|int
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|frame
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|=
name|frame
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Consumer["
operator|+
name|index
operator|+
literal|"] got error while consuming: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|unsubscribe
argument_list|(
name|consumer
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|stompDisconnect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|stompDisconnect
argument_list|(
name|producer
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProducerDurableConsumerLoop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|ITERATIONS
init|=
literal|500
decl_stmt|;
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|ITERATIONS
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
if|if
condition|(
name|doTestProducerDurableConsumer
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|received
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|ITERATIONS
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|doTestProducerDurableConsumer
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should not be any consumers"
argument_list|,
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|StompConnection
name|producer
init|=
name|stompConnect
argument_list|()
decl_stmt|;
name|StompConnection
name|consumer
init|=
name|stompConnect
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|subscribe
argument_list|(
name|consumer
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|producer
argument_list|,
name|index
argument_list|)
expr_stmt|;
try|try
block|{
name|StompFrame
name|frame
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer got frame: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|index
argument_list|,
operator|(
name|int
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|frame
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|=
name|frame
operator|.
name|getBody
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Consumer["
operator|+
name|index
operator|+
literal|"] got error while consuming: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|unsubscribe
argument_list|(
name|consumer
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|stompDisconnect
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|stompDisconnect
argument_list|(
name|producer
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|protected
name|void
name|subscribe
parameter_list|(
name|StompConnection
name|stompConnection
parameter_list|,
name|String
name|subscriptionId
parameter_list|)
throws|throws
name|Exception
block|{
name|subscribe
argument_list|(
name|stompConnection
argument_list|,
name|subscriptionId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|subscribe
parameter_list|(
name|StompConnection
name|stompConnection
parameter_list|,
name|String
name|subscriptionId
parameter_list|,
name|boolean
name|durable
parameter_list|)
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|subscriptionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|durable
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
literal|"activemq.subscriptionName"
argument_list|,
name|subscriptionId
argument_list|)
expr_stmt|;
block|}
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
name|destination
argument_list|,
literal|"auto"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RECEIPT"
argument_list|,
name|received
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|receipt
init|=
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
argument_list|,
name|receipt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|unsubscribe
parameter_list|(
name|StompConnection
name|stompConnection
parameter_list|,
name|String
name|subscriptionId
parameter_list|)
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|subscriptionId
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|unsubscribe
argument_list|(
name|destination
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RECEIPT"
argument_list|,
name|received
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|receipt
init|=
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
argument_list|,
name|receipt
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendMessage
parameter_list|(
name|StompConnection
name|producer
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|index
argument_list|)
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|StompFrame
name|received
init|=
name|producer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RECEIPT"
argument_list|,
name|received
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|receipt
init|=
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
argument_list|,
name|receipt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|StompConnection
name|stompConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|StompConnection
name|stompConnection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|stompConnect
argument_list|(
name|stompConnection
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|stompConnection
return|;
block|}
specifier|protected
name|StompConnection
name|stompConnect
parameter_list|(
name|String
name|clientId
parameter_list|)
throws|throws
name|Exception
block|{
name|StompConnection
name|stompConnection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|stompConnect
argument_list|(
name|stompConnection
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|,
name|clientId
argument_list|)
expr_stmt|;
return|return
name|stompConnection
return|;
block|}
specifier|protected
name|void
name|stompDisconnect
parameter_list|(
name|StompConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|String
name|receiptId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|connection
operator|.
name|disconnect
argument_list|(
name|receiptId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|connection
operator|.
name|receive
argument_list|()
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|RECEIPT
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to receive receipt for disconnect."
argument_list|)
throw|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

