begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ4893Test
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4893Test
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesInt
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|message
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"TestProp"
argument_list|,
literal|333
argument_list|)
expr_stmt|;
name|fakeUnmarshal
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|roundTripProperties
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesString
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|message
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"TestProp"
argument_list|,
literal|"Value"
argument_list|)
expr_stmt|;
name|fakeUnmarshal
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|roundTripProperties
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesObject
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|message
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setObjectProperty
argument_list|(
literal|"TestProp"
argument_list|,
literal|"Value"
argument_list|)
expr_stmt|;
name|fakeUnmarshal
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|roundTripProperties
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertiesObjectNoMarshalling
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQObjectMessage
name|message
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setObjectProperty
argument_list|(
literal|"TestProp"
argument_list|,
literal|"Value"
argument_list|)
expr_stmt|;
name|roundTripProperties
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|roundTripProperties
parameter_list|(
name|ActiveMQObjectMessage
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|ActiveMQObjectMessage
name|copy
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|prop
range|:
name|message
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} -> {}"
argument_list|,
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|copy
operator|.
name|setObjectProperty
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|,
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fakeUnmarshal
parameter_list|(
name|ActiveMQObjectMessage
name|message
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we need to force the unmarshalled property field to be set so it
comment|// gives us a hawtbuffer for the string
name|OpenWireFormat
name|format
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|message
operator|.
name|beforeMarshall
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|message
operator|.
name|afterMarshall
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|ByteSequence
name|seq
init|=
name|message
operator|.
name|getMarshalledProperties
argument_list|()
decl_stmt|;
name|message
operator|.
name|clearProperties
argument_list|()
expr_stmt|;
name|message
operator|.
name|setMarshalledProperties
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

