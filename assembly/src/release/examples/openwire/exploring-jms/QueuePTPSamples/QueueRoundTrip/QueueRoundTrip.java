begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * © 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.   Sample Application  Queue/PTP Send and receive using multiple sessions and a temporary queue  This sample shows the round trip time for a message being sent to the broker and received. A temporary queue is used to guarantee that each instance of this sample receives its own messages only.  Usage:      java QueueRoundTrip -b<broker:port> -u<username> -p<password> -n<numTests> -h         Optional Parameters:         -b  broker:port    Broker name and port of your message server                             Default: tcp://localhost:61616         -u  username       Default: user (username required)         -p  password       Default: password (not checked)         -n  numTests       The number of messages to be sent/received                            Default: 100         -h                 Prints help screen.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|QueueRoundTrip
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_BROKER_NAME
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_USER_NAME
init|=
literal|"user"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_TESTS
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|msgSize
init|=
literal|1400
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|msgBody
init|=
operator|new
name|byte
index|[
name|msgSize
index|]
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
name|factory
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Session
name|sendSession
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Session
name|receiveSession
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
name|sender
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
name|receiver
init|=
literal|null
decl_stmt|;
specifier|private
name|void
name|QueueRoundTripper
parameter_list|(
name|String
name|broker
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|int
name|numTests
parameter_list|)
block|{
try|try
block|{
comment|//Set up two sessions, one for sending and the other for receiving
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|sendSession
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|receiveSession
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: Cannot connect to broker- "
operator|+
name|broker
operator|+
literal|".\n"
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|//Set up a temporary Queue:
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
name|tempQueue
init|=
name|sendSession
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|receiver
operator|=
name|receiveSession
operator|.
name|createConsumer
argument_list|(
name|tempQueue
argument_list|)
expr_stmt|;
name|sender
operator|=
name|sendSession
operator|.
name|createProducer
argument_list|(
name|tempQueue
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: Connection couldn't be started.\n"
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|//Send messages using Temporary Queue:
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"QueueRoundTrip application:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"==========================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sending Messages to Temporary Queue..."
argument_list|)
expr_stmt|;
comment|//create a message to send
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
name|msg
init|=
name|sendSession
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|writeBytes
argument_list|(
name|msgBody
argument_list|)
expr_stmt|;
comment|//send and receive the message the specified number of times:
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTests
condition|;
name|i
operator|++
control|)
block|{
name|sender
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|msg
operator|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
operator|)
name|receiver
operator|.
name|receive
argument_list|()
expr_stmt|;
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nTime for "
operator|+
name|numTests
operator|+
literal|" sends and receives:\t\t"
operator|+
name|time
operator|+
literal|"ms\n"
operator|+
literal|"Average Time per message:\t\t\t"
operator|+
operator|(
name|float
operator|)
name|time
operator|/
operator|(
name|float
operator|)
name|numTests
operator|+
literal|"ms\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\nPress Enter to close this window."
argument_list|)
expr_stmt|;
name|java
operator|.
name|io
operator|.
name|BufferedReader
name|stdin
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedReader
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|stdin
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: message not sent/received.\n"
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Cleanup resources and then exit. */
specifier|private
name|void
name|exit
parameter_list|()
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
block|{
comment|// Values to be read from parameters
name|String
name|broker
init|=
name|DEFAULT_BROKER_NAME
decl_stmt|;
name|String
name|username
init|=
name|DEFAULT_USER_NAME
decl_stmt|;
name|String
name|password
init|=
name|DEFAULT_PASSWORD
decl_stmt|;
name|int
name|numTests
init|=
name|DEFAULT_NUM_TESTS
decl_stmt|;
comment|// Check parameters
if|if
condition|(
name|argv
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
comment|// Options
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: unexpected argument - "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-b"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing broker name:port"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|broker
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-u"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing user name"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|username
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-p"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing password"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|password
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-n"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing number of test to run."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|numTests
operator|=
operator|(
operator|new
name|Integer
argument_list|(
name|argv
index|[
operator|++
name|i
index|]
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// create the payload
name|byte
name|charToWrite
init|=
operator|(
literal|0x30
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|msgSize
condition|;
name|i
operator|++
control|)
block|{
name|msgBody
index|[
name|i
index|]
operator|=
name|charToWrite
expr_stmt|;
name|charToWrite
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|int
operator|)
name|charToWrite
operator|+
operator|(
name|int
operator|)
literal|0x01
argument_list|)
expr_stmt|;
if|if
condition|(
name|charToWrite
operator|==
operator|(
literal|0x39
operator|)
condition|)
block|{
name|charToWrite
operator|=
operator|(
literal|0x30
operator|)
expr_stmt|;
block|}
block|}
comment|// Start the JMS client for the test.
name|QueueRoundTrip
name|queueRoundTripper
init|=
operator|new
name|QueueRoundTrip
argument_list|()
decl_stmt|;
name|queueRoundTripper
operator|.
name|QueueRoundTripper
argument_list|(
name|broker
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|numTests
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|StringBuffer
name|use
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"Usage:\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"java QueueRoundTrip (options)...\n\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"options:\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"-b  broker:port    Broker name and port of your message server\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                   Default: tcp://localhost:61616\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"-u  username       Default: user (username required)\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"-p  password       Default: password (not checked)\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"-n  numTests       The number of messages to be sent/received\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                   Default: 100\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"-h                 This help screen"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|use
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

