begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadaptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|ListContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|MapContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStoreAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicReferenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStore
operator|.
name|ReferenceData
import|;
end_import

begin_class
specifier|public
class|class
name|KahaReferenceStoreAdapter
extends|extends
name|KahaPersistenceAdapter
implements|implements
name|ReferenceStoreAdapter
block|{
specifier|private
name|MapContainer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|fileReferences
decl_stmt|;
specifier|public
name|KahaReferenceStoreAdapter
parameter_list|(
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Use createQueueReferenceStore instead"
argument_list|)
throw|;
block|}
specifier|public
specifier|synchronized
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Use createTopicReferenceStore instead"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|Store
name|store
init|=
name|getStore
argument_list|()
decl_stmt|;
name|fileReferences
operator|=
name|store
operator|.
name|getMapContainer
argument_list|(
literal|"file-references"
argument_list|)
expr_stmt|;
name|fileReferences
operator|.
name|setKeyMarshaller
argument_list|(
operator|new
name|IntegerMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|fileReferences
operator|.
name|setValueMarshaller
argument_list|(
operator|new
name|IntegerMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|fileReferences
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ReferenceRecord
block|{
specifier|public
name|String
name|messageId
decl_stmt|;
specifier|public
name|ReferenceData
name|data
decl_stmt|;
specifier|public
name|ReferenceRecord
parameter_list|()
block|{			 		}
specifier|public
name|ReferenceRecord
parameter_list|(
name|String
name|messageId
parameter_list|,
name|ReferenceData
name|data
parameter_list|)
block|{
name|this
operator|.
name|messageId
operator|=
name|messageId
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
block|}
specifier|protected
name|Marshaller
argument_list|<
name|Object
argument_list|>
name|createMessageMarshaller
parameter_list|()
block|{
return|return
operator|new
name|Marshaller
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|writePayload
parameter_list|(
name|Object
name|object
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|ReferenceRecord
name|rr
init|=
operator|(
name|ReferenceRecord
operator|)
name|object
decl_stmt|;
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|rr
operator|.
name|messageId
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|rr
operator|.
name|data
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|rr
operator|.
name|data
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeLong
argument_list|(
name|rr
operator|.
name|data
operator|.
name|getExpiration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|readPayload
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|ReferenceRecord
name|rr
init|=
operator|new
name|ReferenceRecord
argument_list|()
decl_stmt|;
name|rr
operator|.
name|messageId
operator|=
name|dataIn
operator|.
name|readUTF
argument_list|()
expr_stmt|;
name|rr
operator|.
name|data
operator|=
operator|new
name|ReferenceData
argument_list|()
expr_stmt|;
name|rr
operator|.
name|data
operator|.
name|setFileId
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|rr
operator|.
name|data
operator|.
name|setOffset
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|rr
operator|.
name|data
operator|.
name|setExpiration
argument_list|(
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rr
return|;
block|}
block|}
return|;
block|}
specifier|public
name|ReferenceStore
name|createQueueReferenceStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|ReferenceStore
name|rc
init|=
operator|(
name|ReferenceStore
operator|)
name|queues
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|rc
operator|=
operator|new
name|KahaReferenceStore
argument_list|(
name|getListContainer
argument_list|(
name|destination
argument_list|,
literal|"queue-data"
argument_list|)
argument_list|,
name|destination
argument_list|,
name|maximumDestinationCacheSize
argument_list|,
name|fileReferences
argument_list|)
expr_stmt|;
name|messageStores
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|//            if(transactionStore!=null){
comment|//                rc=transactionStore.proxy(rc);
comment|//            }
name|queues
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|TopicReferenceStore
name|createTopicReferenceStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|TopicReferenceStore
name|rc
init|=
operator|(
name|TopicReferenceStore
operator|)
name|topics
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|Store
name|store
init|=
name|getStore
argument_list|()
decl_stmt|;
name|ListContainer
name|messageContainer
init|=
name|getListContainer
argument_list|(
name|destination
argument_list|,
literal|"topic-data"
argument_list|)
decl_stmt|;
name|MapContainer
name|subsContainer
init|=
name|getMapContainer
argument_list|(
name|destination
operator|.
name|toString
argument_list|()
operator|+
literal|"-Subscriptions"
argument_list|,
literal|"topic-subs"
argument_list|)
decl_stmt|;
name|ListContainer
name|ackContainer
init|=
name|store
operator|.
name|getListContainer
argument_list|(
name|destination
operator|.
name|toString
argument_list|()
argument_list|,
literal|"topic-acks"
argument_list|)
decl_stmt|;
name|ackContainer
operator|.
name|setMarshaller
argument_list|(
operator|new
name|TopicSubAckMarshaller
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|=
operator|new
name|KahaTopicReferenceStore
argument_list|(
name|store
argument_list|,
name|messageContainer
argument_list|,
name|ackContainer
argument_list|,
name|subsContainer
argument_list|,
name|destination
argument_list|,
name|maximumDestinationCacheSize
argument_list|,
name|fileReferences
argument_list|)
expr_stmt|;
name|messageStores
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|//            if(transactionStore!=null){
comment|//                rc=transactionStore.proxy(rc);
comment|//            }
name|topics
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getReferenceFileIdsInUse
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|rc
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|destinations
init|=
name|getDestinations
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|destination
range|:
name|destinations
control|)
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|KahaReferenceStore
name|store
init|=
operator|(
name|KahaReferenceStore
operator|)
name|createQueueReferenceStore
argument_list|(
operator|(
name|ActiveMQQueue
operator|)
name|destination
argument_list|)
decl_stmt|;
name|store
operator|.
name|addReferenceFileIdsInUse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|KahaTopicReferenceStore
name|store
init|=
operator|(
name|KahaTopicReferenceStore
operator|)
name|createTopicReferenceStore
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|destination
argument_list|)
decl_stmt|;
name|store
operator|.
name|addReferenceFileIdsInUse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
block|}
end_class

end_unit

