begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|IllegalCharsetNameException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|UnsupportedCharsetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|AmqpContentTypeSupport
block|{
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8
init|=
literal|"UTF-8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHARSET
init|=
literal|"charset"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEXT
init|=
literal|"text"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|APPLICATION
init|=
literal|"application"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAVASCRIPT
init|=
literal|"javascript"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML
init|=
literal|"xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_VARIANT
init|=
literal|"+xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON
init|=
literal|"json"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JSON_VARIANT
init|=
literal|"+json"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_DTD
init|=
literal|"xml-dtd"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ECMASCRIPT
init|=
literal|"ecmascript"
decl_stmt|;
comment|/**      * @param contentType      *        the contentType of the received message      * @return the character set to use, or null if not to treat the message as      *         text      * @throws InvalidContentTypeException      *         if the content-type is invalid in some way.      */
specifier|public
specifier|static
name|Charset
name|parseContentTypeForTextualCharset
parameter_list|(
specifier|final
name|String
name|contentType
parameter_list|)
throws|throws
name|InvalidContentTypeException
block|{
if|if
condition|(
name|contentType
operator|==
literal|null
operator|||
name|contentType
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidContentTypeException
argument_list|(
literal|"Content type can't be null or empty"
argument_list|)
throw|;
block|}
name|int
name|subTypeSeparator
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|subTypeSeparator
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|InvalidContentTypeException
argument_list|(
literal|"Content type has no '/' separator: "
operator|+
name|contentType
argument_list|)
throw|;
block|}
specifier|final
name|String
name|type
init|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|subTypeSeparator
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|subTypePart
init|=
name|contentType
operator|.
name|substring
argument_list|(
name|subTypeSeparator
operator|+
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|parameterPart
init|=
literal|null
decl_stmt|;
name|int
name|parameterSeparator
init|=
name|subTypePart
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameterSeparator
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|parameterSeparator
operator|<
name|subTypePart
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|parameterPart
operator|=
name|contentType
operator|.
name|substring
argument_list|(
name|subTypeSeparator
operator|+
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|subTypePart
operator|=
name|subTypePart
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|parameterSeparator
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subTypePart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidContentTypeException
argument_list|(
literal|"Content type has no subtype after '/'"
operator|+
name|contentType
argument_list|)
throw|;
block|}
specifier|final
name|String
name|subType
init|=
name|subTypePart
decl_stmt|;
if|if
condition|(
name|isTextual
argument_list|(
name|type
argument_list|,
name|subType
argument_list|)
condition|)
block|{
name|String
name|charset
init|=
name|findCharset
argument_list|(
name|parameterPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
condition|)
block|{
name|charset
operator|=
name|UTF_8
expr_stmt|;
block|}
if|if
condition|(
name|UTF_8
operator|.
name|equals
argument_list|(
name|charset
argument_list|)
condition|)
block|{
return|return
name|StandardCharsets
operator|.
name|UTF_8
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|Charset
operator|.
name|forName
argument_list|(
name|charset
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalCharsetNameException
name|icne
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentTypeException
argument_list|(
literal|"Illegal charset: "
operator|+
name|charset
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCharsetException
name|uce
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidContentTypeException
argument_list|(
literal|"Unsupported charset: "
operator|+
name|charset
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|//----- Internal Content Type utilities ----------------------------------//
specifier|private
specifier|static
name|boolean
name|isTextual
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|subType
parameter_list|)
block|{
if|if
condition|(
name|TEXT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|APPLICATION
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
if|if
condition|(
name|XML
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
operator|||
name|JSON
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
operator|||
name|JAVASCRIPT
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
operator|||
name|subType
operator|.
name|endsWith
argument_list|(
name|XML_VARIANT
argument_list|)
operator|||
name|subType
operator|.
name|endsWith
argument_list|(
name|JSON_VARIANT
argument_list|)
operator|||
name|XML_DTD
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
operator|||
name|ECMASCRIPT
operator|.
name|equals
argument_list|(
name|subType
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|String
name|findCharset
parameter_list|(
name|String
name|paramaterPart
parameter_list|)
block|{
name|String
name|charset
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|paramaterPart
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|paramaterPart
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|parameter
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|int
name|eqIndex
init|=
name|parameter
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|eqIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|name
init|=
name|parameter
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|eqIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|CHARSET
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|unquote
argument_list|(
name|parameter
operator|.
name|substring
argument_list|(
name|eqIndex
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|charset
operator|=
name|value
operator|.
name|toUpperCase
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|charset
return|;
block|}
specifier|private
specifier|static
name|String
name|unquote
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
operator|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|s
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|)
condition|)
block|{
return|return
name|s
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
block|}
end_class

end_unit

