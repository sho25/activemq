begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TopicProducerFlowControlTest
extends|extends
name|TestCase
implements|implements
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TopicProducerFlowControlTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|brokerName
init|=
literal|"testBroker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|brokerUrl
init|=
literal|"vm://"
operator|+
name|brokerName
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|destinationMemLimit
init|=
literal|2097152
decl_stmt|;
comment|// 2MB
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|produced
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|consumed
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|numMessagesToSend
init|=
literal|50000
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|produced
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|consumed
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Setup and start the broker
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSchedulerSupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|brokerUrl
argument_list|)
expr_stmt|;
comment|// Setup the destination policy
name|PolicyMap
name|pm
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
comment|// Setup the topic destination policy
name|PolicyEntry
name|tpe
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|tpe
operator|.
name|setTopic
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|tpe
operator|.
name|setMemoryLimit
argument_list|(
name|destinationMemLimit
argument_list|)
expr_stmt|;
name|tpe
operator|.
name|setProducerFlowControl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tpe
operator|.
name|setAdvisoryWhenFull
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tpe
operator|.
name|setBlockedProducerWarningInterval
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|pm
operator|.
name|setPolicyEntries
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|PolicyEntry
index|[]
block|{
name|tpe
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|setDestinationPolicy
argument_list|(
name|broker
argument_list|,
name|pm
argument_list|)
expr_stmt|;
comment|// Start the broker
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setDestinationPolicy
parameter_list|(
name|BrokerService
name|broker
parameter_list|,
name|PolicyMap
name|pm
parameter_list|)
block|{
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|pm
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicProducerFlowControl
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the connection factory
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUrl
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setProducerWindowSize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|ActiveMQPrefetchPolicy
name|prefetchPolicy
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|prefetchPolicy
operator|.
name|setAll
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setPrefetchPolicy
argument_list|(
name|prefetchPolicy
argument_list|)
expr_stmt|;
comment|// Start the test destination listener
name|Connection
name|c
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|listenerSession
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|createDestination
argument_list|(
name|listenerSession
argument_list|)
decl_stmt|;
name|listenerSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
operator|.
name|setMessageListener
argument_list|(
operator|new
name|TopicProducerFlowControlTest
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|blockedCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|listenerSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|AdvisorySupport
operator|.
name|FULL_TOPIC_PREFIX
operator|+
literal|">"
argument_list|)
argument_list|)
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|blockedCounter
operator|.
name|get
argument_list|()
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got full advisory, usageName: "
operator|+
name|message
operator|.
name|getStringProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_USAGE_NAME
argument_list|)
operator|+
literal|", usageCount: "
operator|+
name|message
operator|.
name|getLongProperty
argument_list|(
name|AdvisorySupport
operator|.
name|MSG_PROPERTY_USAGE_COUNT
argument_list|)
operator|+
literal|", blockedCounter: "
operator|+
name|blockedCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|blockedCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"missing advisory property"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|warnings
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Appender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|&&
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Usage Manager memory limit reached"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"received  log message: "
operator|+
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|warnings
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|log4jLogger
init|=
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
decl_stmt|;
name|log4jLogger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Start producing the test messages
specifier|final
name|Session
name|session
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Thread
name|producingThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producing Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessagesToSend
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|produced
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Produced "
operator|+
name|count
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                         }
block|}
block|}
block|}
decl_stmt|;
name|producingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|consumed
operator|.
name|get
argument_list|()
operator|==
name|numMessagesToSend
return|;
block|}
block|}
argument_list|,
literal|5
operator|*
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// give it plenty of time before failing
name|assertEquals
argument_list|(
literal|"Didn't produce all messages"
argument_list|,
name|numMessagesToSend
argument_list|,
name|produced
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Didn't consume all messages"
argument_list|,
name|numMessagesToSend
argument_list|,
name|consumed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Producer got blocked"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|blockedCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"BlockedCount: "
operator|+
name|blockedCounter
operator|.
name|get
argument_list|()
operator|+
literal|", Warnings:"
operator|+
name|warnings
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got a few warnings"
argument_list|,
name|warnings
operator|.
name|get
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"warning limited"
argument_list|,
name|warnings
operator|.
name|get
argument_list|()
operator|<
name|blockedCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|log4jLogger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTransactedProducerBlockedAndClosedWillRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTransactedProducerBlockedAndClosedWillRelease
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransactedSyncSendProducerBlockedAndClosedWillRelease
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestTransactedProducerBlockedAndClosedWillRelease
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestTransactedProducerBlockedAndClosedWillRelease
parameter_list|(
specifier|final
name|boolean
name|alwaysSyncSend
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create the connection factory
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUrl
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setAlwaysSyncSend
argument_list|(
name|alwaysSyncSend
argument_list|)
expr_stmt|;
name|Connection
name|c
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQPrefetchPolicy
name|prefetchPolicy
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|prefetchPolicy
operator|.
name|setAll
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setPrefetchPolicy
argument_list|(
name|prefetchPolicy
argument_list|)
expr_stmt|;
comment|// Start the test destination listener
name|Session
name|listenerSession
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|createDestination
argument_list|(
name|listenerSession
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|warnings
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|Appender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getLevel
argument_list|()
operator|.
name|equals
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|&&
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Usage Manager memory limit reached"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"received  log message: "
operator|+
name|event
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|warnings
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|log4jLogger
init|=
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|Topic
operator|.
name|class
argument_list|)
decl_stmt|;
name|log4jLogger
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Start producing the test messages
specifier|final
name|Session
name|session
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Thread
name|producingThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producing Thread"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessagesToSend
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|count
init|=
name|produced
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Produced "
operator|+
name|count
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                         }
block|}
block|}
block|}
decl_stmt|;
name|producingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Producer got blocked"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|warnings
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Produced: "
operator|+
name|produced
operator|.
name|get
argument_list|()
operator|+
literal|", Warnings:"
operator|+
name|warnings
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Producer got blocked"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|warnings
operator|.
name|get
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|enqueueCountWhenBlocked
init|=
name|broker
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
name|destination
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
comment|// now whack the hung connection broker side (mimic jmx), and verify usage gone b/c of rollback
for|for
control|(
name|TransportConnection
name|transportConnection
range|:
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getConnections
argument_list|()
control|)
block|{
name|transportConnection
operator|.
name|serviceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"forcing close for hung connection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Usage gets released on close"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Usage: "
operator|+
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify no pending sends completed in rolledback tx
name|assertEquals
argument_list|(
literal|"nothing sent during close"
argument_list|,
name|enqueueCountWhenBlocked
argument_list|,
name|broker
operator|.
name|getDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
name|destination
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|log4jLogger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Destination
name|createDestination
parameter_list|(
name|Session
name|listenerSession
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
literal|"test"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|long
name|count
init|=
name|consumed
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
if|if
condition|(
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\tConsumed "
operator|+
name|count
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

