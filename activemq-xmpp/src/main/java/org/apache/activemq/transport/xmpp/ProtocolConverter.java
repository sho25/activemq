begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|xmpp
package|;
end_package

begin_import
import|import
name|ietf
operator|.
name|params
operator|.
name|xml
operator|.
name|ns
operator|.
name|xmpp_sasl
operator|.
name|Auth
import|;
end_import

begin_import
import|import
name|ietf
operator|.
name|params
operator|.
name|xml
operator|.
name|ns
operator|.
name|xmpp_sasl
operator|.
name|Challenge
import|;
end_import

begin_import
import|import
name|ietf
operator|.
name|params
operator|.
name|xml
operator|.
name|ns
operator|.
name|xmpp_sasl
operator|.
name|Success
import|;
end_import

begin_import
import|import
name|ietf
operator|.
name|params
operator|.
name|xml
operator|.
name|ns
operator|.
name|xmpp_tls
operator|.
name|Proceed
import|;
end_import

begin_import
import|import
name|ietf
operator|.
name|params
operator|.
name|xml
operator|.
name|ns
operator|.
name|xmpp_tls
operator|.
name|Starttls
import|;
end_import

begin_import
import|import
name|jabber
operator|.
name|client
operator|.
name|Body
import|;
end_import

begin_import
import|import
name|jabber
operator|.
name|client
operator|.
name|Error
import|;
end_import

begin_import
import|import
name|jabber
operator|.
name|client
operator|.
name|Iq
import|;
end_import

begin_import
import|import
name|jabber
operator|.
name|client
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|jabber
operator|.
name|client
operator|.
name|Presence
import|;
end_import

begin_import
import|import
name|jabber
operator|.
name|iq
operator|.
name|auth
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|xmpp
operator|.
name|command
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|xmpp
operator|.
name|command
operator|.
name|HandlerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_info
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_info
operator|.
name|Identity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_items
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|muc_user
operator|.
name|X
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * TODO lots of this code could be shared with Stomp  */
end_comment

begin_class
specifier|public
class|class
name|ProtocolConverter
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProtocolConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HandlerRegistry
name|registry
init|=
operator|new
name|HandlerRegistry
argument_list|()
decl_stmt|;
specifier|private
name|XmppTransport
name|transport
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|connectionIdGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|clientIdGenerator
init|=
operator|new
name|IdGenerator
argument_list|(
literal|"xmpp"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|connectionIdGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionId
name|sessionId
init|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
name|sessionId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConnectionInfo
name|connectionInfo
init|=
operator|new
name|ConnectionInfo
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionInfo
name|sessionInfo
init|=
operator|new
name|SessionInfo
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProducerInfo
name|producerInfo
init|=
operator|new
name|ProducerInfo
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|transactionIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|IntSequenceGenerator
name|tempDestinationIdGenerator
init|=
operator|new
name|IntSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Handler
argument_list|<
name|Response
argument_list|>
argument_list|>
name|resposeHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|Handler
argument_list|<
name|Response
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ConsumerId
argument_list|,
name|Handler
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|>
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|Handler
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConsumerInfo
argument_list|>
name|jidToConsumerMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConsumerInfo
argument_list|>
name|jidToInboxConsumerMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|transactions
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|commnadIdMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastCommandId
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|connected
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|ActiveMQTempQueue
name|inboxDestination
decl_stmt|;
specifier|public
name|ProtocolConverter
parameter_list|(
name|XmppTransport
name|transport
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|initialiseRegistry
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|generateCommandId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commnadIdMutex
init|)
block|{
return|return
name|lastCommandId
operator|++
return|;
block|}
block|}
specifier|protected
name|void
name|initialiseRegistry
parameter_list|()
block|{
comment|// this kinda wiring muck is soooo much cleaner in C# :(
name|registry
operator|.
name|registerHandler
argument_list|(
name|Message
operator|.
name|class
argument_list|,
operator|new
name|Handler
argument_list|<
name|Message
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Message
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|onMessage
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|registry
operator|.
name|registerHandler
argument_list|(
name|Auth
operator|.
name|class
argument_list|,
operator|new
name|Handler
argument_list|<
name|Auth
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Auth
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|onAuth
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|registry
operator|.
name|registerHandler
argument_list|(
name|Starttls
operator|.
name|class
argument_list|,
operator|new
name|Handler
argument_list|<
name|Starttls
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Starttls
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|onStarttls
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|registry
operator|.
name|registerHandler
argument_list|(
name|Iq
operator|.
name|class
argument_list|,
operator|new
name|Handler
argument_list|<
name|Iq
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Iq
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|onIq
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|registry
operator|.
name|registerHandler
argument_list|(
name|Presence
operator|.
name|class
argument_list|,
operator|new
name|Handler
argument_list|<
name|Presence
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Presence
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|onPresence
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onXmppCommand
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO we could do some nice code generation to boost performance
comment|// by autogenerating the bytecode to statically lookup a handler from a registry maybe?
name|Handler
name|handler
init|=
name|registry
operator|.
name|getHandler
argument_list|(
name|command
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|==
literal|null
condition|)
block|{
name|unknownCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|handle
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onActiveMQCommad
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|Handler
argument_list|<
name|Response
argument_list|>
name|handler
init|=
name|resposeHandlers
operator|.
name|remove
argument_list|(
operator|new
name|Integer
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No handler for response: "
operator|+
name|response
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|Handler
argument_list|<
name|MessageDispatch
argument_list|>
name|handler
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|handler
operator|.
name|handle
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No handler for message: "
operator|+
name|md
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|unknownCommand
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unkown command: "
operator|+
name|command
operator|+
literal|" of type: "
operator|+
name|command
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onIq
parameter_list|(
specifier|final
name|Iq
name|iq
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|any
init|=
name|iq
operator|.
name|getAny
argument_list|()
decl_stmt|;
if|if
condition|(
name|any
operator|instanceof
name|Query
condition|)
block|{
name|onAuthQuery
argument_list|(
name|any
argument_list|,
name|iq
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|any
operator|instanceof
name|jabber
operator|.
name|iq
operator|.
name|_private
operator|.
name|Query
condition|)
block|{
name|jabber
operator|.
name|iq
operator|.
name|_private
operator|.
name|Query
name|query
init|=
operator|(
name|jabber
operator|.
name|iq
operator|.
name|_private
operator|.
name|Query
operator|)
name|any
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Iq Private "
operator|+
name|debugString
argument_list|(
name|iq
argument_list|)
operator|+
literal|" any: "
operator|+
name|query
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iq
name|result
init|=
name|createResult
argument_list|(
name|iq
argument_list|)
decl_stmt|;
name|jabber
operator|.
name|iq
operator|.
name|_private
operator|.
name|Query
name|answer
init|=
operator|new
name|jabber
operator|.
name|iq
operator|.
name|_private
operator|.
name|Query
argument_list|()
decl_stmt|;
name|result
operator|.
name|setAny
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|any
operator|instanceof
name|jabber
operator|.
name|iq
operator|.
name|roster
operator|.
name|Query
condition|)
block|{
name|jabber
operator|.
name|iq
operator|.
name|roster
operator|.
name|Query
name|query
init|=
operator|(
name|jabber
operator|.
name|iq
operator|.
name|roster
operator|.
name|Query
operator|)
name|any
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Iq Roster "
operator|+
name|debugString
argument_list|(
name|iq
argument_list|)
operator|+
literal|" item: "
operator|+
name|query
operator|.
name|getItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iq
name|result
init|=
name|createResult
argument_list|(
name|iq
argument_list|)
decl_stmt|;
name|jabber
operator|.
name|iq
operator|.
name|roster
operator|.
name|Query
name|roster
init|=
operator|new
name|jabber
operator|.
name|iq
operator|.
name|roster
operator|.
name|Query
argument_list|()
decl_stmt|;
name|result
operator|.
name|setAny
argument_list|(
name|roster
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|any
operator|instanceof
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_items
operator|.
name|Query
condition|)
block|{
name|onDiscoItems
argument_list|(
name|iq
argument_list|,
operator|(
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_items
operator|.
name|Query
operator|)
name|any
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|any
operator|instanceof
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_info
operator|.
name|Query
condition|)
block|{
name|onDiscoInfo
argument_list|(
name|iq
argument_list|,
operator|(
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_info
operator|.
name|Query
operator|)
name|any
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|any
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|any
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Iq Unknown "
operator|+
name|debugString
argument_list|(
name|iq
argument_list|)
operator|+
literal|" element namespace: "
operator|+
name|element
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|" localName: "
operator|+
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Iq Unknown "
operator|+
name|debugString
argument_list|(
name|iq
argument_list|)
operator|+
literal|" any: "
operator|+
name|any
operator|+
literal|" of type: "
operator|+
name|any
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iq
name|result
init|=
name|createResult
argument_list|(
name|iq
argument_list|)
decl_stmt|;
name|jabber
operator|.
name|client
operator|.
name|Error
name|error
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|error
operator|.
name|setUnexpectedRequest
argument_list|(
literal|"Don't understand: "
operator|+
name|any
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setAny
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onAuthQuery
parameter_list|(
name|Object
name|any
parameter_list|,
specifier|final
name|Iq
name|iq
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|query
init|=
operator|(
name|Query
operator|)
name|any
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Iq Auth Query "
operator|+
name|debugString
argument_list|(
name|iq
argument_list|)
operator|+
literal|" resource: "
operator|+
name|query
operator|.
name|getResource
argument_list|()
operator|+
literal|" username: "
operator|+
name|query
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|.
name|getPassword
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Iq
name|result
init|=
name|createResult
argument_list|(
name|iq
argument_list|)
decl_stmt|;
name|Query
name|required
init|=
operator|new
name|Query
argument_list|()
decl_stmt|;
name|required
operator|.
name|setPassword
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|required
operator|.
name|setUsername
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|setAny
argument_list|(
name|required
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//connectionInfo.setClientId(query.getResource());
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|query
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setPassword
argument_list|(
name|query
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO support digest?
if|if
condition|(
name|connectionInfo
operator|.
name|getClientId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
name|clientIdGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
name|connectionInfo
argument_list|,
operator|new
name|Handler
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Response
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|Iq
name|result
init|=
name|createResult
argument_list|(
name|iq
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|instanceof
name|ExceptionResponse
condition|)
block|{
name|ExceptionResponse
name|exceptionResponse
init|=
operator|(
name|ExceptionResponse
operator|)
name|response
decl_stmt|;
name|Throwable
name|exception
init|=
name|exceptionResponse
operator|.
name|getException
argument_list|()
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to create connection: "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
name|Error
name|error
init|=
operator|new
name|Error
argument_list|()
decl_stmt|;
name|result
operator|.
name|setError
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
name|error
operator|.
name|setInternalServerError
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connected
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|marshall
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|sessionInfo
argument_list|,
name|createErrorHandler
argument_list|(
literal|"create sesssion"
argument_list|)
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|producerInfo
argument_list|,
name|createErrorHandler
argument_list|(
literal|"create producer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|debugString
parameter_list|(
name|Iq
name|iq
parameter_list|)
block|{
return|return
literal|" to: "
operator|+
name|iq
operator|.
name|getTo
argument_list|()
operator|+
literal|" type: "
operator|+
name|iq
operator|.
name|getType
argument_list|()
operator|+
literal|" from: "
operator|+
name|iq
operator|.
name|getFrom
argument_list|()
operator|+
literal|" id: "
operator|+
name|iq
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|protected
name|void
name|onDiscoItems
parameter_list|(
name|Iq
name|iq
parameter_list|,
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_items
operator|.
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|to
init|=
name|iq
operator|.
name|getTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Iq Disco Items query "
operator|+
name|debugString
argument_list|(
name|iq
argument_list|)
operator|+
literal|" node: "
operator|+
name|query
operator|.
name|getNode
argument_list|()
operator|+
literal|" item: "
operator|+
name|query
operator|.
name|getItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iq
name|result
init|=
name|createResult
argument_list|(
name|iq
argument_list|)
decl_stmt|;
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_items
operator|.
name|Query
name|answer
init|=
operator|new
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_items
operator|.
name|Query
argument_list|()
decl_stmt|;
if|if
condition|(
name|to
operator|==
literal|null
operator|||
name|to
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|answer
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|createItem
argument_list|(
literal|"queues"
argument_list|,
literal|"Queues"
argument_list|,
literal|"queues"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getItem
argument_list|()
operator|.
name|add
argument_list|(
name|createItem
argument_list|(
literal|"topics"
argument_list|,
literal|"Topics"
argument_list|,
literal|"topics"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets not add anything?
block|}
name|result
operator|.
name|setAny
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onDiscoInfo
parameter_list|(
name|Iq
name|iq
parameter_list|,
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_info
operator|.
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|to
init|=
name|iq
operator|.
name|getTo
argument_list|()
decl_stmt|;
comment|// TODO lets create the topic 'to'
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Iq Disco Info query "
operator|+
name|debugString
argument_list|(
name|iq
argument_list|)
operator|+
literal|" node: "
operator|+
name|query
operator|.
name|getNode
argument_list|()
operator|+
literal|" features: "
operator|+
name|query
operator|.
name|getFeature
argument_list|()
operator|+
literal|" identity: "
operator|+
name|query
operator|.
name|getIdentity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Iq
name|result
init|=
name|createResult
argument_list|(
name|iq
argument_list|)
decl_stmt|;
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_info
operator|.
name|Query
name|answer
init|=
operator|new
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|disco_info
operator|.
name|Query
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setNode
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|createFeature
argument_list|(
literal|"http://jabber.org/protocol/disco#info"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|createFeature
argument_list|(
literal|"http://jabber.org/protocol/disco#items"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|to
operator|==
literal|null
operator|||
name|to
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"directory"
argument_list|,
literal|"chatroom"
argument_list|,
literal|"queues"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"directory"
argument_list|,
literal|"chatroom"
argument_list|,
literal|"topics"
argument_list|)
argument_list|)
expr_stmt|;
comment|/*             answer.getIdentity().add(createIdentity("hierarchy", "queues", "branch"));             answer.getIdentity().add(createIdentity("hierarchy", "topics", "branch"));             */
block|}
else|else
block|{
comment|// for queues/topics
if|if
condition|(
name|to
operator|.
name|equals
argument_list|(
literal|"queues"
argument_list|)
condition|)
block|{
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"conference"
argument_list|,
literal|"queue.a"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"conference"
argument_list|,
literal|"queue.b"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|to
operator|.
name|equals
argument_list|(
literal|"topics"
argument_list|)
condition|)
block|{
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"conference"
argument_list|,
literal|"topic.x"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"conference"
argument_list|,
literal|"topic.y"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"conference"
argument_list|,
literal|"topic.z"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// lets reply to an actual room
name|answer
operator|.
name|getIdentity
argument_list|()
operator|.
name|add
argument_list|(
name|createIdentity
argument_list|(
literal|"conference"
argument_list|,
name|to
argument_list|,
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|createFeature
argument_list|(
literal|"http://jabber.org/protocol/muc"
argument_list|)
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getFeature
argument_list|()
operator|.
name|add
argument_list|(
name|createFeature
argument_list|(
literal|"muc-open"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|setAny
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onPresence
parameter_list|(
name|Presence
name|presence
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Presence: "
operator|+
name|presence
operator|.
name|getFrom
argument_list|()
operator|+
literal|" id: "
operator|+
name|presence
operator|.
name|getId
argument_list|()
operator|+
literal|" to: "
operator|+
name|presence
operator|.
name|getTo
argument_list|()
operator|+
literal|" type: "
operator|+
name|presence
operator|.
name|getType
argument_list|()
operator|+
literal|" showOrStatusOrPriority: "
operator|+
name|presence
operator|.
name|getShowOrStatusOrPriority
argument_list|()
operator|+
literal|" any: "
operator|+
name|presence
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|muc_user
operator|.
name|Item
name|item
init|=
operator|new
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|muc_user
operator|.
name|Item
argument_list|()
decl_stmt|;
name|item
operator|.
name|setAffiliation
argument_list|(
literal|"owner"
argument_list|)
expr_stmt|;
name|item
operator|.
name|setRole
argument_list|(
literal|"moderator"
argument_list|)
expr_stmt|;
name|item
operator|.
name|setNick
argument_list|(
literal|"broker"
argument_list|)
expr_stmt|;
name|sendPresence
argument_list|(
name|presence
argument_list|,
name|item
argument_list|)
expr_stmt|;
comment|/*         item = new org.jabber.protocol.muc_user.Item();         item.setAffiliation("admin");         item.setRole("moderator");         sendPresence(presence, item);         */
comment|// lets create a subscription
specifier|final
name|String
name|to
init|=
name|presence
operator|.
name|getTo
argument_list|()
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|createActiveMQDestination
argument_list|(
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No 'to' attribute specified for presence so not creating a JMS subscription"
argument_list|)
expr_stmt|;
return|return;
block|}
name|subscribe
argument_list|(
name|to
argument_list|,
name|destination
argument_list|,
name|jidToConsumerMap
argument_list|)
expr_stmt|;
comment|// lets subscribe to a personal inbox for replies
comment|// Check if Destination info is of temporary type.
if|if
condition|(
name|inboxDestination
operator|==
literal|null
condition|)
block|{
name|inboxDestination
operator|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|tempDestinationIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|inboxDestination
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|subscribe
argument_list|(
name|to
argument_list|,
name|inboxDestination
argument_list|,
name|jidToInboxConsumerMap
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|subscribe
parameter_list|(
specifier|final
name|String
name|to
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ConsumerInfo
argument_list|>
name|consumerMap
parameter_list|)
block|{
name|boolean
name|createConsumer
init|=
literal|false
decl_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|consumerMap
init|)
block|{
name|consumerInfo
operator|=
name|consumerMap
operator|.
name|get
argument_list|(
name|to
argument_list|)
expr_stmt|;
if|if
condition|(
name|consumerInfo
operator|==
literal|null
condition|)
block|{
name|consumerInfo
operator|=
operator|new
name|ConsumerInfo
argument_list|()
expr_stmt|;
name|consumerMap
operator|.
name|put
argument_list|(
name|to
argument_list|,
name|consumerInfo
argument_list|)
expr_stmt|;
name|ConsumerId
name|consumerId
init|=
operator|new
name|ConsumerId
argument_list|(
name|sessionId
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setConsumerId
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|createConsumer
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|createConsumer
condition|)
block|{
return|return;
block|}
name|consumerInfo
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|subscriptionsByConsumerId
operator|.
name|put
argument_list|(
name|consumerInfo
operator|.
name|getConsumerId
argument_list|()
argument_list|,
operator|new
name|Handler
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|MessageDispatch
name|messageDispatch
parameter_list|)
throws|throws
name|Exception
block|{
comment|// processing the inbound message
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Receiving inbound: "
operator|+
name|messageDispatch
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// lets send back an ACK
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|messageDispatch
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|,
name|createErrorHandler
argument_list|(
literal|"Ack of message: "
operator|+
name|messageDispatch
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createXmppMessage
argument_list|(
name|to
argument_list|,
name|messageDispatch
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending message to XMPP client from: "
operator|+
name|message
operator|.
name|getFrom
argument_list|()
operator|+
literal|" to: "
operator|+
name|message
operator|.
name|getTo
argument_list|()
operator|+
literal|" type: "
operator|+
name|message
operator|.
name|getType
argument_list|()
operator|+
literal|" with body: "
operator|+
name|message
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|marshall
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|consumerInfo
argument_list|,
name|createErrorHandler
argument_list|(
literal|"subscribe to destination: "
operator|+
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Message
name|createXmppMessage
parameter_list|(
name|String
name|to
parameter_list|,
name|MessageDispatch
name|messageDispatch
parameter_list|)
throws|throws
name|JMSException
block|{
name|Message
name|answer
init|=
operator|new
name|Message
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setType
argument_list|(
literal|"groupchat"
argument_list|)
expr_stmt|;
name|String
name|from
init|=
name|to
decl_stmt|;
name|int
name|idx
init|=
name|from
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|from
operator|=
name|from
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
operator|+
literal|"/broker"
expr_stmt|;
block|}
name|answer
operator|.
name|setFrom
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setTo
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
name|message
init|=
name|messageDispatch
operator|.
name|getMessage
argument_list|()
decl_stmt|;
comment|//answer.setType(message.getType());
if|if
condition|(
name|message
operator|instanceof
name|ActiveMQTextMessage
condition|)
block|{
name|ActiveMQTextMessage
name|activeMQTextMessage
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
decl_stmt|;
name|Body
name|body
init|=
operator|new
name|Body
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|activeMQTextMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Setting the body text to be: "
operator|+
name|text
argument_list|)
expr_stmt|;
name|body
operator|.
name|setValue
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO support other message types
name|log
operator|.
name|warn
argument_list|(
literal|"Could not convert the message to a complete Jabber message: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|sendPresence
parameter_list|(
name|Presence
name|presence
parameter_list|,
name|org
operator|.
name|jabber
operator|.
name|protocol
operator|.
name|muc_user
operator|.
name|Item
name|item
parameter_list|)
throws|throws
name|IOException
block|{
name|Presence
name|answer
init|=
operator|new
name|Presence
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setFrom
argument_list|(
name|presence
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setType
argument_list|(
name|presence
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setTo
argument_list|(
name|presence
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|X
name|x
init|=
operator|new
name|X
argument_list|()
decl_stmt|;
name|x
operator|.
name|getDeclineOrDestroyOrInvite
argument_list|()
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|answer
operator|.
name|getShowOrStatusOrPriority
argument_list|()
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|answer
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Item
name|createItem
parameter_list|(
name|String
name|jid
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|node
parameter_list|)
block|{
name|Item
name|answer
init|=
operator|new
name|Item
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setJid
argument_list|(
name|jid
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|Identity
name|createIdentity
parameter_list|(
name|String
name|category
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Identity
name|answer
init|=
operator|new
name|Identity
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setCategory
argument_list|(
name|category
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|Feature
name|createFeature
parameter_list|(
name|String
name|var
parameter_list|)
block|{
name|Feature
name|feature
init|=
operator|new
name|Feature
argument_list|()
decl_stmt|;
name|feature
operator|.
name|setVar
argument_list|(
name|var
argument_list|)
expr_stmt|;
return|return
name|feature
return|;
block|}
comment|/**      * Creates a result command from the input      */
specifier|protected
name|Iq
name|createResult
parameter_list|(
name|Iq
name|iq
parameter_list|)
block|{
name|Iq
name|result
init|=
operator|new
name|Iq
argument_list|()
decl_stmt|;
name|result
operator|.
name|setId
argument_list|(
name|iq
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFrom
argument_list|(
name|transport
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setTo
argument_list|(
name|iq
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setLang
argument_list|(
name|iq
operator|.
name|getLang
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setType
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|,
name|Handler
argument_list|<
name|Response
argument_list|>
name|handler
parameter_list|)
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|generateCommandId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resposeHandlers
operator|.
name|put
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|getTransportListener
argument_list|()
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onStarttls
parameter_list|(
name|Starttls
name|starttls
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Starttls"
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
operator|new
name|Proceed
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Message from: "
operator|+
name|message
operator|.
name|getFrom
argument_list|()
operator|+
literal|" to: "
operator|+
name|message
operator|.
name|getTo
argument_list|()
operator|+
literal|" subjectOrBodyOrThread: "
operator|+
name|message
operator|.
name|getSubjectOrBodyOrThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ActiveMQMessage
name|activeMQMessage
init|=
name|createActiveMQMessage
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|createActiveMQDestination
argument_list|(
name|message
operator|.
name|getTo
argument_list|()
argument_list|)
decl_stmt|;
name|activeMQMessage
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|producerInfo
argument_list|,
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|activeMQMessage
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|activeMQMessage
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
name|activeMQMessage
operator|.
name|setTimestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|addActiveMQMessageHeaders
argument_list|(
name|activeMQMessage
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|/*         MessageDispatch dispatch = new MessageDispatch();         dispatch.setDestination(destination);         dispatch.setMessage(activeMQMessage);         */
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending ActiveMQ message: "
operator|+
name|activeMQMessage
argument_list|)
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
name|activeMQMessage
argument_list|,
name|createErrorHandler
argument_list|(
literal|"send message"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Handler
argument_list|<
name|Response
argument_list|>
name|createErrorHandler
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
return|return
operator|new
name|Handler
argument_list|<
name|Response
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|handle
parameter_list|(
name|Response
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|event
operator|instanceof
name|ExceptionResponse
condition|)
block|{
name|ExceptionResponse
name|exceptionResponse
init|=
operator|(
name|ExceptionResponse
operator|)
name|event
decl_stmt|;
name|Throwable
name|exception
init|=
name|exceptionResponse
operator|.
name|getException
argument_list|()
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Failed to "
operator|+
name|text
operator|+
literal|". Reason: "
operator|+
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Completed "
operator|+
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
comment|/**      * Converts the Jabber destination name into a destination in ActiveMQ      */
specifier|protected
name|ActiveMQDestination
name|createActiveMQDestination
parameter_list|(
name|String
name|jabberDestination
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|jabberDestination
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
name|jabberDestination
decl_stmt|;
name|int
name|idx
init|=
name|jabberDestination
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"#### Creating ActiveMQ destination for: "
operator|+
name|name
argument_list|)
expr_stmt|;
comment|// lets support lower-case versions of the agent topic
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|AdvisorySupport
operator|.
name|AGENT_TOPIC
argument_list|)
condition|)
block|{
name|name
operator|=
name|AdvisorySupport
operator|.
name|AGENT_TOPIC
expr_stmt|;
block|}
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|protected
name|ActiveMQMessage
name|createActiveMQMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|ActiveMQTextMessage
name|answer
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|String
name|text
init|=
literal|""
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|message
operator|.
name|getSubjectOrBodyOrThread
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|object
range|:
name|list
control|)
block|{
if|if
condition|(
name|object
operator|instanceof
name|Body
condition|)
block|{
name|Body
name|body
init|=
operator|(
name|Body
operator|)
name|object
decl_stmt|;
name|text
operator|=
name|body
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|answer
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|addActiveMQMessageHeaders
parameter_list|(
name|ActiveMQMessage
name|answer
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|answer
operator|.
name|setStringProperty
argument_list|(
literal|"XMPPFrom"
argument_list|,
name|message
operator|.
name|getFrom
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setStringProperty
argument_list|(
literal|"XMPPID"
argument_list|,
name|message
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setStringProperty
argument_list|(
literal|"XMPPLang"
argument_list|,
name|message
operator|.
name|getLang
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setStringProperty
argument_list|(
literal|"XMPPTo"
argument_list|,
name|message
operator|.
name|getTo
argument_list|()
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setJMSType
argument_list|(
name|message
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|replyTo
init|=
name|createActiveMQDestination
argument_list|(
name|message
operator|.
name|getFrom
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyTo
operator|==
literal|null
condition|)
block|{
name|replyTo
operator|=
name|inboxDestination
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Setting reply to destination to: "
operator|+
name|replyTo
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setJMSReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onAuth
parameter_list|(
name|Auth
name|auth
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Auth mechanism: "
operator|+
name|auth
operator|.
name|getMechanism
argument_list|()
operator|+
literal|" value: "
operator|+
name|auth
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|createChallengeValue
argument_list|(
name|auth
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|Challenge
name|challenge
init|=
operator|new
name|Challenge
argument_list|()
decl_stmt|;
name|challenge
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|transport
operator|.
name|marshall
argument_list|(
name|challenge
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transport
operator|.
name|marshall
argument_list|(
operator|new
name|Success
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|createChallengeValue
parameter_list|(
name|Auth
name|auth
parameter_list|)
block|{
comment|// TODO implement the challenge
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

