begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyManagementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_comment
comment|/**  * A holder of SSL configuration.  */
end_comment

begin_class
specifier|public
class|class
name|SslContext
block|{
specifier|protected
name|String
name|protocol
init|=
literal|"TLS"
decl_stmt|;
specifier|protected
name|String
name|provider
init|=
literal|null
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|KeyManager
argument_list|>
name|keyManagers
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyManager
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|TrustManager
argument_list|>
name|trustManagers
init|=
operator|new
name|ArrayList
argument_list|<
name|TrustManager
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|SecureRandom
name|secureRandom
decl_stmt|;
specifier|private
name|SSLContext
name|sslContext
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|SslContext
argument_list|>
name|current
init|=
operator|new
name|ThreadLocal
argument_list|<
name|SslContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SslContext
parameter_list|()
block|{     }
specifier|public
name|SslContext
parameter_list|(
name|KeyManager
index|[]
name|km
parameter_list|,
name|TrustManager
index|[]
name|tm
parameter_list|,
name|SecureRandom
name|random
parameter_list|)
block|{
if|if
condition|(
name|km
operator|!=
literal|null
condition|)
block|{
name|setKeyManagers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|km
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tm
operator|!=
literal|null
condition|)
block|{
name|setTrustManagers
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setSecureRandom
argument_list|(
name|random
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|public
name|void
name|setCurrentSslContext
parameter_list|(
name|SslContext
name|bs
parameter_list|)
block|{
name|current
operator|.
name|set
argument_list|(
name|bs
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|public
name|SslContext
name|getCurrentSslContext
parameter_list|()
block|{
return|return
name|current
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|KeyManager
index|[]
name|getKeyManagersAsArray
parameter_list|()
block|{
name|KeyManager
name|rc
index|[]
init|=
operator|new
name|KeyManager
index|[
name|keyManagers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|keyManagers
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
return|;
block|}
specifier|public
name|TrustManager
index|[]
name|getTrustManagersAsArray
parameter_list|()
block|{
name|TrustManager
name|rc
index|[]
init|=
operator|new
name|TrustManager
index|[
name|trustManagers
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|trustManagers
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
return|;
block|}
specifier|public
name|void
name|addKeyManager
parameter_list|(
name|KeyManager
name|km
parameter_list|)
block|{
name|keyManagers
operator|.
name|add
argument_list|(
name|km
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeKeyManager
parameter_list|(
name|KeyManager
name|km
parameter_list|)
block|{
return|return
name|keyManagers
operator|.
name|remove
argument_list|(
name|km
argument_list|)
return|;
block|}
specifier|public
name|void
name|addTrustManager
parameter_list|(
name|TrustManager
name|tm
parameter_list|)
block|{
name|trustManagers
operator|.
name|add
argument_list|(
name|tm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|removeTrustManager
parameter_list|(
name|TrustManager
name|tm
parameter_list|)
block|{
return|return
name|trustManagers
operator|.
name|remove
argument_list|(
name|tm
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|KeyManager
argument_list|>
name|getKeyManagers
parameter_list|()
block|{
return|return
name|keyManagers
return|;
block|}
specifier|public
name|void
name|setKeyManagers
parameter_list|(
name|List
argument_list|<
name|KeyManager
argument_list|>
name|keyManagers
parameter_list|)
block|{
name|this
operator|.
name|keyManagers
operator|=
name|keyManagers
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TrustManager
argument_list|>
name|getTrustManagers
parameter_list|()
block|{
return|return
name|trustManagers
return|;
block|}
specifier|public
name|void
name|setTrustManagers
parameter_list|(
name|List
argument_list|<
name|TrustManager
argument_list|>
name|trustManagers
parameter_list|)
block|{
name|this
operator|.
name|trustManagers
operator|=
name|trustManagers
expr_stmt|;
block|}
specifier|public
name|SecureRandom
name|getSecureRandom
parameter_list|()
block|{
return|return
name|secureRandom
return|;
block|}
specifier|public
name|void
name|setSecureRandom
parameter_list|(
name|SecureRandom
name|secureRandom
parameter_list|)
block|{
name|this
operator|.
name|secureRandom
operator|=
name|secureRandom
expr_stmt|;
block|}
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
specifier|public
name|String
name|getProvider
parameter_list|()
block|{
return|return
name|provider
return|;
block|}
specifier|public
name|void
name|setProvider
parameter_list|(
name|String
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
specifier|public
name|SSLContext
name|getSSLContext
parameter_list|()
throws|throws
name|NoSuchProviderException
throws|,
name|NoSuchAlgorithmException
throws|,
name|KeyManagementException
block|{
if|if
condition|(
name|sslContext
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
name|sslContext
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sslContext
operator|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|,
name|provider
argument_list|)
expr_stmt|;
block|}
name|sslContext
operator|.
name|init
argument_list|(
name|getKeyManagersAsArray
argument_list|()
argument_list|,
name|getTrustManagersAsArray
argument_list|()
argument_list|,
name|getSecureRandom
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sslContext
return|;
block|}
specifier|public
name|void
name|setSSLContext
parameter_list|(
name|SSLContext
name|sslContext
parameter_list|)
block|{
name|this
operator|.
name|sslContext
operator|=
name|sslContext
expr_stmt|;
block|}
block|}
end_class

end_unit

