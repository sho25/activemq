begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|CronParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|scheduler
operator|.
name|JobSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements an in-memory JobScheduler instance.  */
end_comment

begin_class
specifier|public
class|class
name|InMemoryJobScheduler
implements|implements
name|JobScheduler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|InMemoryJobScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
name|jobs
init|=
operator|new
name|TreeMap
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|dispatchEnabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JobListener
argument_list|>
name|jobListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|JobListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
specifier|public
name|InMemoryJobScheduler
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|startDispatching
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"JobScheduler[{}] started"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|stopDispatching
argument_list|()
expr_stmt|;
name|timer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|jobs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"JobScheduler[{}] stopped"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isDispatchEnabled
parameter_list|()
block|{
return|return
name|dispatchEnabled
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDispatching
parameter_list|()
throws|throws
name|Exception
block|{
name|dispatchEnabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stopDispatching
parameter_list|()
throws|throws
name|Exception
block|{
name|dispatchEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addListener
parameter_list|(
name|JobListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|jobListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeListener
parameter_list|(
name|JobListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|jobListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|schedule
parameter_list|(
name|String
name|jobId
parameter_list|,
name|ByteSequence
name|payload
parameter_list|,
name|long
name|delay
parameter_list|)
throws|throws
name|Exception
block|{
name|doSchedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
name|delay
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|schedule
parameter_list|(
name|String
name|jobId
parameter_list|,
name|ByteSequence
name|payload
parameter_list|,
name|String
name|cronEntry
parameter_list|)
throws|throws
name|Exception
block|{
name|doSchedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
name|cronEntry
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|schedule
parameter_list|(
name|String
name|jobId
parameter_list|,
name|ByteSequence
name|payload
parameter_list|,
name|String
name|cronEntry
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|,
name|int
name|repeat
parameter_list|)
throws|throws
name|Exception
block|{
name|doSchedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
name|cronEntry
argument_list|,
name|delay
argument_list|,
name|period
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|long
name|time
parameter_list|)
throws|throws
name|Exception
block|{
name|doRemoveRange
argument_list|(
name|time
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|jobId
parameter_list|)
throws|throws
name|Exception
block|{
name|doRemoveJob
argument_list|(
name|jobId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAllJobs
parameter_list|()
throws|throws
name|Exception
block|{
name|doRemoveRange
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAllJobs
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|finish
parameter_list|)
throws|throws
name|Exception
block|{
name|doRemoveRange
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNextScheduleTime
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|nextExecutionTime
init|=
operator|-
literal|1L
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|jobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nextExecutionTime
operator|=
name|jobs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|nextExecutionTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Job
argument_list|>
name|getNextScheduleJobs
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Job
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
decl_stmt|;
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|jobs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|jobs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|getAllJobs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Job
argument_list|>
name|getAllJobs
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Job
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
name|entry
range|:
name|jobs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAllJobs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Job
argument_list|>
name|getAllJobs
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|finish
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Job
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Job
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
name|entry
range|:
name|jobs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|long
name|jobTime
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<=
name|jobTime
operator|&&
name|jobTime
operator|<=
name|finish
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getAllJobs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JobScheduler: "
operator|+
name|name
return|;
block|}
specifier|private
name|void
name|doSchedule
parameter_list|(
specifier|final
name|String
name|jobId
parameter_list|,
specifier|final
name|ByteSequence
name|payload
parameter_list|,
specifier|final
name|String
name|cronEntry
parameter_list|,
name|long
name|delay
parameter_list|,
name|long
name|period
parameter_list|,
name|int
name|repeat
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|executionTime
init|=
literal|0
decl_stmt|;
comment|// round startTime - so we can schedule more jobs at the same time
name|startTime
operator|=
operator|(
name|startTime
operator|/
literal|1000
operator|)
operator|*
literal|1000
expr_stmt|;
if|if
condition|(
name|cronEntry
operator|!=
literal|null
operator|&&
name|cronEntry
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|executionTime
operator|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|cronEntry
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|executionTime
operator|==
literal|0
condition|)
block|{
comment|// start time not set by CRON - so it it to the current time
name|executionTime
operator|=
name|startTime
expr_stmt|;
block|}
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|executionTime
operator|+=
name|delay
expr_stmt|;
block|}
else|else
block|{
name|executionTime
operator|+=
name|period
expr_stmt|;
block|}
name|InMemoryJob
name|newJob
init|=
operator|new
name|InMemoryJob
argument_list|(
name|jobId
argument_list|)
decl_stmt|;
name|newJob
operator|.
name|setStart
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setCronEntry
argument_list|(
name|cronEntry
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setDelay
argument_list|(
name|delay
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setRepeat
argument_list|(
name|repeat
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setNextTime
argument_list|(
name|executionTime
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setPayload
argument_list|(
name|payload
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"JobScheduler adding job[{}] to fire at: {}"
argument_list|,
name|jobId
argument_list|,
name|JobSupport
operator|.
name|getDateTime
argument_list|(
name|executionTime
argument_list|)
argument_list|)
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ScheduledTask
name|task
init|=
name|jobs
operator|.
name|get
argument_list|(
name|executionTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|task
operator|=
operator|new
name|ScheduledTask
argument_list|(
name|executionTime
argument_list|)
expr_stmt|;
name|task
operator|.
name|add
argument_list|(
name|newJob
argument_list|)
expr_stmt|;
name|jobs
operator|.
name|put
argument_list|(
name|task
operator|.
name|getExecutionTime
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
operator|new
name|Date
argument_list|(
name|newJob
operator|.
name|getNextTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|add
argument_list|(
name|newJob
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doReschedule
parameter_list|(
name|InMemoryJob
name|job
parameter_list|,
name|long
name|nextExecutionTime
parameter_list|)
block|{
name|job
operator|.
name|setNextTime
argument_list|(
name|nextExecutionTime
argument_list|)
expr_stmt|;
name|job
operator|.
name|incrementExecutionCount
argument_list|()
expr_stmt|;
name|job
operator|.
name|decrementRepeatCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"JobScheduler rescheduling job[{}] to fire at: {}"
argument_list|,
name|job
operator|.
name|getJobId
argument_list|()
argument_list|,
name|JobSupport
operator|.
name|getDateTime
argument_list|(
name|nextExecutionTime
argument_list|)
argument_list|)
expr_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ScheduledTask
name|task
init|=
name|jobs
operator|.
name|get
argument_list|(
name|nextExecutionTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|task
operator|==
literal|null
condition|)
block|{
name|task
operator|=
operator|new
name|ScheduledTask
argument_list|(
name|nextExecutionTime
argument_list|)
expr_stmt|;
name|task
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|jobs
operator|.
name|put
argument_list|(
name|task
operator|.
name|getExecutionTime
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
name|task
argument_list|,
operator|new
name|Date
argument_list|(
name|task
operator|.
name|getExecutionTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|task
operator|.
name|add
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRemoveJob
parameter_list|(
name|String
name|jobId
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
argument_list|>
name|scheduled
init|=
name|jobs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|scheduled
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
name|entry
init|=
name|scheduled
operator|.
name|next
argument_list|()
decl_stmt|;
name|ScheduledTask
name|task
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|task
operator|.
name|remove
argument_list|(
name|jobId
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"JobScheduler removing job[{}]"
argument_list|,
name|jobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|task
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|task
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|scheduled
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRemoveRange
parameter_list|(
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
argument_list|>
name|scheduled
init|=
name|jobs
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|scheduled
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|ScheduledTask
argument_list|>
name|entry
init|=
name|scheduled
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|executionTime
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<=
name|executionTime
operator|&&
name|executionTime
operator|<=
name|end
condition|)
block|{
name|ScheduledTask
name|task
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|task
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|scheduled
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Don't look beyond the end range.
if|if
condition|(
name|end
operator|<
name|executionTime
condition|)
block|{
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|canDispatch
parameter_list|()
block|{
return|return
name|isStarted
argument_list|()
operator|&&
name|isDispatchEnabled
argument_list|()
return|;
block|}
specifier|private
name|long
name|calculateNextExecutionTime
parameter_list|(
name|InMemoryJob
name|job
parameter_list|,
name|long
name|currentTime
parameter_list|,
name|int
name|repeat
parameter_list|)
throws|throws
name|MessageFormatException
block|{
name|long
name|result
init|=
name|currentTime
decl_stmt|;
name|String
name|cron
init|=
name|job
operator|.
name|getCronEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|cron
operator|!=
literal|null
operator|&&
name|cron
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
name|CronParser
operator|.
name|getNextScheduledTime
argument_list|(
name|cron
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|job
operator|.
name|getRepeat
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|result
operator|+=
name|job
operator|.
name|getPeriod
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|dispatch
parameter_list|(
name|InMemoryJob
name|job
parameter_list|)
throws|throws
name|IllegalStateException
throws|,
name|IOException
block|{
if|if
condition|(
name|canDispatch
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Firing: {}"
argument_list|,
name|job
argument_list|)
expr_stmt|;
for|for
control|(
name|JobListener
name|l
range|:
name|jobListeners
control|)
block|{
name|l
operator|.
name|scheduledJob
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|,
operator|new
name|ByteSequence
argument_list|(
name|job
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*      * A TimerTask instance that can aggregate the execution of a number      * scheduled Jobs and handle rescheduling the jobs that require it.      */
specifier|private
class|class
name|ScheduledTask
extends|extends
name|TimerTask
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InMemoryJob
argument_list|>
name|jobs
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|InMemoryJob
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|executionTime
decl_stmt|;
specifier|public
name|ScheduledTask
parameter_list|(
name|long
name|executionTime
parameter_list|)
block|{
name|this
operator|.
name|executionTime
operator|=
name|executionTime
expr_stmt|;
block|}
specifier|public
name|long
name|getExecutionTime
parameter_list|()
block|{
return|return
name|executionTime
return|;
block|}
comment|/**          * @return a Collection containing all the managed jobs for this task.          */
specifier|public
name|Collection
argument_list|<
name|InMemoryJob
argument_list|>
name|getAllJobs
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|InMemoryJob
argument_list|>
argument_list|(
name|jobs
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * @return true if the internal list of jobs has become empty.          */
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|jobs
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**          * Adds the job to the internal list of scheduled Jobs managed by this task.          *          * @param newJob          *        the new job to add to the list of Jobs.          */
specifier|public
name|void
name|add
parameter_list|(
name|InMemoryJob
name|newJob
parameter_list|)
block|{
name|this
operator|.
name|jobs
operator|.
name|put
argument_list|(
name|newJob
operator|.
name|getJobId
argument_list|()
argument_list|,
name|newJob
argument_list|)
expr_stmt|;
block|}
comment|/**          * Removes the job from the internal list of scheduled Jobs managed by this task.          *          * @param jobId          *        the job ID to remove from the list of Jobs.          *          * @return true if the job was removed from the list of managed jobs.          */
specifier|public
name|boolean
name|remove
parameter_list|(
name|String
name|jobId
parameter_list|)
block|{
return|return
name|jobs
operator|.
name|remove
argument_list|(
name|jobId
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Remove this entry as it will now fire any scheduled jobs, if new
comment|// jobs or rescheduled jobs land in the same time slot we want them
comment|// to go into a new ScheduledTask in the Timer instance.
name|InMemoryJobScheduler
operator|.
name|this
operator|.
name|jobs
operator|.
name|remove
argument_list|(
name|executionTime
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|long
name|nextExecutionTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InMemoryJob
name|job
range|:
name|jobs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
block|{
break|break;
block|}
name|int
name|repeat
init|=
name|job
operator|.
name|getRepeat
argument_list|()
decl_stmt|;
name|nextExecutionTime
operator|=
name|calculateNextExecutionTime
argument_list|(
name|job
argument_list|,
name|currentTime
argument_list|,
name|repeat
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|job
operator|.
name|isCron
argument_list|()
condition|)
block|{
name|dispatch
argument_list|(
name|job
argument_list|)
expr_stmt|;
if|if
condition|(
name|repeat
operator|!=
literal|0
condition|)
block|{
comment|// Reschedule for the next time, the scheduler will take care of
comment|// updating the repeat counter on the update.
name|doReschedule
argument_list|(
name|job
argument_list|,
name|nextExecutionTime
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|repeat
operator|==
literal|0
condition|)
block|{
comment|// This is a non-repeating Cron entry so we can fire and forget it.
name|dispatch
argument_list|(
name|job
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextExecutionTime
operator|>
name|currentTime
condition|)
block|{
comment|// Reschedule the cron job as a new event, if the cron entry signals
comment|// a repeat then it will be stored separately and fired as a normal
comment|// event with decrementing repeat.
name|doReschedule
argument_list|(
name|job
argument_list|,
name|nextExecutionTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|repeat
operator|!=
literal|0
condition|)
block|{
comment|// we have a separate schedule to run at this time
comment|// so the cron job is used to set of a separate schedule
comment|// hence we won't fire the original cron job to the
comment|// listeners but we do need to start a separate schedule
name|String
name|jobId
init|=
name|ID_GENERATOR
operator|.
name|generateId
argument_list|()
decl_stmt|;
name|ByteSequence
name|payload
init|=
operator|new
name|ByteSequence
argument_list|(
name|job
operator|.
name|getPayload
argument_list|()
argument_list|)
decl_stmt|;
name|schedule
argument_list|(
name|jobId
argument_list|,
name|payload
argument_list|,
literal|""
argument_list|,
name|job
operator|.
name|getDelay
argument_list|()
argument_list|,
name|job
operator|.
name|getPeriod
argument_list|()
argument_list|,
name|job
operator|.
name|getRepeat
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while processing scheduled job(s)."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

