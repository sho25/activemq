begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_comment
comment|/**  * Checks the behavior of the PooledConnectionFactory when the maximum amount  * of sessions is being reached.  * Older versions simply block in the call to Connection.getSession(), which isn't good.  * An exception being returned is the better option, so JMS clients don't block.  * This test succeeds if an exception is returned and fails if the call to getSession()  * blocks.  *  */
end_comment

begin_class
specifier|public
class|class
name|PooledConnectionFactoryTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|PooledConnectionFactoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Create the test case      *      * @param testName name of the test case      */
specifier|public
name|PooledConnectionFactoryTest
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the suite of tests being tested      */
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
operator|new
name|TestSuite
argument_list|(
name|PooledConnectionFactoryTest
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Tests the behavior of the sessionPool of the PooledConnectionFactory      * when maximum number of sessions are reached.      */
specifier|public
name|void
name|testApp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// using separate thread for testing so that we can interrupt the test
comment|// if the call to get a new session blocks.
comment|// start test runner thread
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|Future
argument_list|<
name|Boolean
argument_list|>
name|result
init|=
operator|(
name|Future
argument_list|<
name|Boolean
argument_list|>
operator|)
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|TestRunner
argument_list|()
argument_list|)
decl_stmt|;
comment|// test should not take> 5secs, so test fails i
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isDone
argument_list|()
operator|||
operator|!
name|result
operator|.
name|get
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|PooledConnectionFactoryTest
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"2nd call to createSession()"
operator|+
literal|" is blocking but should have returned an error instead."
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"SessionPool inside PooledConnectionFactory is blocking if "
operator|+
literal|"limit is exceeded but should return an exception instead."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_class
class|class
name|TestRunner
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestRunner
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @return true if test succeeded, false otherwise      */
specifier|public
name|Boolean
name|call
parameter_list|()
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Session
name|one
init|=
literal|null
decl_stmt|;
comment|// wait at most 5 seconds for the call to createSession
try|try
block|{
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://broker1?marshal=false&broker.persistent=false"
argument_list|)
decl_stmt|;
name|PooledConnectionFactory
name|cf
init|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|amq
argument_list|)
decl_stmt|;
name|cf
operator|.
name|setMaxConnections
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setMaximumActiveSessionPerConnection
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setBlockIfSessionPoolIsFull
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|one
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Session
name|two
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// this should raise an exception as we called setMaximumActive(1)
name|two
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|two
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Expected JMSException wasn't thrown."
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"seconds call to Connection.createSession() was supposed"
operator|+
literal|"to raise an JMSException as internal session pool"
operator|+
literal|"is exhausted. This did not happen and indiates a problem"
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|ex
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|==
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
operator|.
name|class
condition|)
block|{
comment|//expected, ignore but log
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught expected "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|one
operator|!=
literal|null
condition|)
name|one
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|conn
operator|!=
literal|null
condition|)
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|// all good, test succeeded
return|return
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

