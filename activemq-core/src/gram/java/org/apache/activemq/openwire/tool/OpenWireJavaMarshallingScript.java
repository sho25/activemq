begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|tool
package|;
end_package

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jam
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|OpenWireJavaMarshallingScript
extends|extends
name|OpenWireClassesScript
block|{
specifier|protected
name|List
name|concreteClasses
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|File
name|factoryFile
decl_stmt|;
specifier|protected
name|String
name|factoryFileName
init|=
literal|"MarshallerFactory"
decl_stmt|;
specifier|protected
name|String
name|indent
init|=
literal|"        "
decl_stmt|;
specifier|public
name|Object
name|run
parameter_list|()
block|{
if|if
condition|(
name|destDir
operator|==
literal|null
condition|)
block|{
name|destDir
operator|=
operator|new
name|File
argument_list|(
literal|"src/main/java/org/apache/activemq/openwire/v"
operator|+
name|getOpenwireVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|answer
init|=
name|super
operator|.
name|run
argument_list|()
decl_stmt|;
name|processFactory
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|processFactory
parameter_list|()
block|{
if|if
condition|(
name|factoryFile
operator|==
literal|null
condition|)
block|{
name|factoryFile
operator|=
operator|new
name|File
argument_list|(
name|destDir
argument_list|,
name|factoryFileName
operator|+
name|filePostFix
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|out
init|=
literal|null
decl_stmt|;
try|try
block|{
name|out
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|factoryFile
argument_list|)
argument_list|)
expr_stmt|;
name|generateFactory
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|generateFactory
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
function_decl|;
specifier|protected
name|void
name|processClass
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
name|super
operator|.
name|processClass
argument_list|(
name|jclass
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|jclass
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|concreteClasses
operator|.
name|add
argument_list|(
name|jclass
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|getClassName
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
return|return
name|super
operator|.
name|getClassName
argument_list|(
name|jclass
argument_list|)
operator|+
literal|"Marshaller"
return|;
block|}
specifier|protected
name|String
name|getBaseClassName
parameter_list|(
name|JClass
name|jclass
parameter_list|)
block|{
name|String
name|answer
init|=
literal|"DataStreamMarshaller"
decl_stmt|;
name|JClass
name|superclass
init|=
name|jclass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
condition|)
block|{
name|String
name|superName
init|=
name|superclass
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|superName
operator|.
name|equals
argument_list|(
literal|"Object"
argument_list|)
operator|&&
operator|!
name|superName
operator|.
name|equals
argument_list|(
literal|"JNDIBaseStorable"
argument_list|)
operator|&&
operator|!
name|superName
operator|.
name|equals
argument_list|(
literal|"DataStructureSupport"
argument_list|)
condition|)
block|{
name|answer
operator|=
name|superName
operator|+
literal|"Marshaller"
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|initialiseManuallyMaintainedClasses
parameter_list|()
block|{     }
specifier|protected
name|void
name|generateUnmarshalBody
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|propertyTypeName
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
operator|&&
operator|!
name|propertyTypeName
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
name|generateUnmarshalBodyForArrayProperty
argument_list|(
name|out
argument_list|,
name|property
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateUnmarshalBodyForProperty
argument_list|(
name|out
argument_list|,
name|property
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|generateUnmarshalBodyForProperty
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|JProperty
name|property
parameter_list|,
name|JAnnotationValue
name|size
parameter_list|)
block|{
name|out
operator|.
name|print
argument_list|(
literal|"        "
argument_list|)
expr_stmt|;
name|String
name|setter
init|=
name|property
operator|.
name|getSetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(bs.readBoolean());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(dataIn.readByte());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(dataIn.readChar());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(dataIn.readShort());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(dataIn.readInt());"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(unmarshalLong(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(readString(dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            byte data[] = new byte["
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            dataIn.readFully(data);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(data);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"if( bs.readBoolean() ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            int size = dataIn.readInt();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            byte data[] = new byte[size];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            dataIn.readFully(data);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(data);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            } else {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(null);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"if( bs.readBoolean() ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            int size = dataIn.readInt();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            byte data[] = new byte[size];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            dataIn.readFully(data);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(new org.activeio.ByteSequence(data,0,size));"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            } else {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(null);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|property
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|type
operator|+
literal|") unmarsalThrowable(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|type
operator|+
literal|") unmarsalCachedObject(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"info."
operator|+
name|setter
operator|+
literal|"(("
operator|+
name|type
operator|+
literal|") unmarsalNestedObject(wireFormat, dataIn, bs));"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|generateUnmarshalBodyForArrayProperty
parameter_list|(
name|PrintWriter
name|out
parameter_list|,
name|JProperty
name|property
parameter_list|,
name|JAnnotationValue
name|size
parameter_list|)
block|{
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|arrayType
init|=
name|propertyType
operator|.
name|getArrayComponentType
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|setter
init|=
name|property
operator|.
name|getSetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
name|arrayType
operator|+
literal|" value[] = new "
operator|+
name|arrayType
operator|+
literal|"["
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
literal|"for( int i=0; i< "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|"; i++ ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                value[i] = ("
operator|+
name|arrayType
operator|+
literal|") unmarsalNestedObject(wireFormat,dataIn, bs);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(value);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"        if (bs.readBoolean()) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            short size = dataIn.readShort();"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            "
operator|+
name|arrayType
operator|+
literal|" value[] = new "
operator|+
name|arrayType
operator|+
literal|"[size];"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            for( int i=0; i< size; i++ ) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"                value[i] = ("
operator|+
name|arrayType
operator|+
literal|") unmarsalNestedObject(wireFormat,dataIn, bs);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(value);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        else {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"            info."
operator|+
name|setter
operator|+
literal|"(null);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|generateMarshal1Body
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
name|int
name|baseSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|getter
init|=
literal|"info."
operator|+
name|property
operator|.
name|getGetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()"
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"bs.writeBoolean("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|baseSize
operator|+=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"rc+=marshal1Long(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"rc += writeString("
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
if|if
condition|(
name|size
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"bs.writeBoolean("
operator|+
name|getter
operator|+
literal|"!=null);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        rc += "
operator|+
name|getter
operator|+
literal|"==null ? 0 : "
operator|+
name|getter
operator|+
literal|".length+4;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|baseSize
operator|+=
name|size
operator|.
name|asInt
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"bs.writeBoolean("
operator|+
name|getter
operator|+
literal|"!=null);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        rc += "
operator|+
name|getter
operator|+
literal|"==null ? 0 : "
operator|+
name|getter
operator|+
literal|".getLength()+4;"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"rc += marshalObjectArrayConstSize(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"rc += marshalObjectArray(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|propertyType
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"rc += marshalThrowable(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"rc += marshal1CachedObject(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"rc += marshal1NestedObject(wireFormat, "
operator|+
name|getter
operator|+
literal|", bs);"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|baseSize
return|;
block|}
specifier|protected
name|void
name|generateMarshal2Body
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|List
name|properties
init|=
name|getProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JProperty
name|property
init|=
operator|(
name|JProperty
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|JAnnotation
name|annotation
init|=
name|property
operator|.
name|getAnnotation
argument_list|(
literal|"openwire:property"
argument_list|)
decl_stmt|;
name|JAnnotationValue
name|size
init|=
name|annotation
operator|.
name|getValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|JClass
name|propertyType
init|=
name|property
operator|.
name|getType
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|propertyType
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|getter
init|=
literal|"info."
operator|+
name|property
operator|.
name|getGetter
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"()"
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"bs.readBoolean();"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"dataOut.writeByte("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"dataOut.writeChar("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"dataOut.writeShort("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"dataOut.writeInt("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"marshal2Long(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"String"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"writeString("
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"byte[]"
argument_list|)
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"dataOut.write("
operator|+
name|getter
operator|+
literal|", 0, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"if(bs.readBoolean()) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"           dataOut.writeInt("
operator|+
name|getter
operator|+
literal|".length);"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"           dataOut.write("
operator|+
name|getter
operator|+
literal|");"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"ByteSequence"
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"if(bs.readBoolean()) {"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"           org.activeio.ByteSequence data = "
operator|+
name|getter
operator|+
literal|";"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"           dataOut.writeInt(data.getLength());"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"           dataOut.write(data.getData(), data.getOffset(), data.getLength());"
argument_list|)
expr_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"        }"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|propertyType
operator|.
name|isArrayType
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"marshalObjectArrayConstSize(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs, "
operator|+
name|size
operator|.
name|asInt
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"marshalObjectArray(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isThrowable
argument_list|(
name|propertyType
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"marshalThrowable(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isCachedProperty
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|out
operator|.
name|println
argument_list|(
literal|"marshal2CachedObject(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
literal|"marshal2NestedObject(wireFormat, "
operator|+
name|getter
operator|+
literal|", dataOut, bs);"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

