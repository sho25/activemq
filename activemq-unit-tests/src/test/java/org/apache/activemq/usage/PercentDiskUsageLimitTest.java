begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|StoreUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  * This test is for AMQ-5393  and will check that schedulePeriodForDiskLimitCheck  * properly schedules a task that will update disk limits if the amount of usable disk space drops  * because another process uses up disk space.  *  */
end_comment

begin_class
specifier|public
class|class
name|PercentDiskUsageLimitTest
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PercentDiskUsageLimitTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|dataFileDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|PersistenceAdapter
name|adapter
decl_stmt|;
specifier|private
name|TempUsage
name|tempUsage
decl_stmt|;
specifier|private
name|StoreUsage
name|storeUsage
decl_stmt|;
specifier|private
name|File
name|storeDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUpBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectoryFile
argument_list|(
name|dataFileDir
operator|.
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|adapter
operator|=
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|broker
operator|.
name|getTempDataStore
argument_list|()
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|storeDir
operator|=
name|StoreUtil
operator|.
name|findParentDirectory
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SystemUsage
name|systemUsage
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
decl_stmt|;
name|tempUsage
operator|=
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
expr_stmt|;
name|storeUsage
operator|=
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
comment|/**      *      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testDiskLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|freePercent
init|=
name|getFreePercentage
argument_list|()
decl_stmt|;
if|if
condition|(
name|freePercent
operator|>=
literal|2
condition|)
block|{
name|int
name|maxUsage
init|=
name|freePercent
operator|/
literal|2
decl_stmt|;
comment|//Set max usage to less than free space so we know that all space can be allocated
name|storeUsage
operator|.
name|setPercentLimit
argument_list|(
name|maxUsage
argument_list|)
expr_stmt|;
name|tempUsage
operator|.
name|setPercentLimit
argument_list|(
name|maxUsage
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|long
name|diskLimit
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//assert the disk limit is the same as the max usage percent * total available space
comment|//within 1 mb
name|assertEquals
argument_list|(
name|diskLimit
argument_list|,
name|storeDir
operator|.
name|getTotalSpace
argument_list|()
operator|*
name|maxUsage
operator|/
literal|100
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testDiskLimitOverMaxFree
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|freePercent
init|=
name|getFreePercentage
argument_list|()
decl_stmt|;
if|if
condition|(
name|freePercent
operator|>
literal|1
condition|)
block|{
name|storeUsage
operator|.
name|setPercentLimit
argument_list|(
name|freePercent
operator|+
literal|1
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|long
name|diskLimit
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//assert the disk limit is the same as the usable space
comment|//within 1 mb
name|assertEquals
argument_list|(
name|diskLimit
argument_list|,
name|storeDir
operator|.
name|getUsableSpace
argument_list|()
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testStartFailDiskLimitOverMaxFree
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|setAdjustUsageLimits
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|freePercent
init|=
name|getFreePercentage
argument_list|()
decl_stmt|;
if|if
condition|(
name|freePercent
operator|>
literal|1
condition|)
block|{
name|storeUsage
operator|.
name|setPercentLimit
argument_list|(
name|freePercent
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|startBroker
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expect ex"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigurationException
name|expected
parameter_list|)
block|{}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testDiskLimitOver100Percent
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|freePercent
init|=
name|getFreePercentage
argument_list|()
decl_stmt|;
if|if
condition|(
name|freePercent
operator|>
literal|1
condition|)
block|{
name|storeUsage
operator|.
name|setPercentLimit
argument_list|(
literal|110
argument_list|)
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|long
name|diskLimit
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
decl_stmt|;
comment|//assert the disk limit is the same as the available space
comment|//within 1 mb
name|assertEquals
argument_list|(
name|diskLimit
argument_list|,
name|storeDir
operator|.
name|getUsableSpace
argument_list|()
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|getFreePercentage
parameter_list|()
block|{
name|File
name|storeDir
init|=
name|StoreUtil
operator|.
name|findParentDirectory
argument_list|(
name|adapter
operator|.
name|getDirectory
argument_list|()
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|double
operator|)
name|storeDir
operator|.
name|getUsableSpace
argument_list|()
operator|/
name|storeDir
operator|.
name|getTotalSpace
argument_list|()
operator|)
operator|*
literal|100
argument_list|)
return|;
block|}
block|}
end_class

end_unit

