begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|junit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|StatisticsBrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
operator|.
name|PooledConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A JUnit Rule that embeds an ActiveMQ broker into a test.  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddedActiveMQBroker
extends|extends
name|ExternalResource
block|{
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
comment|/**      * Create an embedded ActiveMQ broker using defaults      *      * The defaults are:      *  - the broker name is 'embedded-broker'      *  - JMX is disabled      *  - Persistence is disabled      *      */
specifier|public
name|EmbeddedActiveMQBroker
parameter_list|()
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"embedded-broker"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an embedded ActiveMQ broker using a configuration URI      */
specifier|public
name|EmbeddedActiveMQBroker
parameter_list|(
name|String
name|configurationURI
parameter_list|)
block|{
try|try
block|{
name|brokerService
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|configurationURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception encountered creating embedded ActiveMQ broker from configuration URI: "
operator|+
name|configurationURI
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Create an embedded ActiveMQ broker using a configuration URI      */
specifier|public
name|EmbeddedActiveMQBroker
parameter_list|(
name|URI
name|configurationURI
parameter_list|)
block|{
try|try
block|{
name|brokerService
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|configurationURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception encountered creating embedded ActiveMQ broker from configuration URI: "
operator|+
name|configurationURI
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * Customize the configuration of the embedded ActiveMQ broker      *      * This method is called before the embedded ActiveMQ broker is started, and can      * be overridden to this method to customize the broker configuration.      */
specifier|protected
name|void
name|configure
parameter_list|()
block|{}
comment|/**      * Start the embedded ActiveMQ broker, blocking until the broker has successfully started.      *<p/>      * The broker will normally be started by JUnit using the before() method.  This method allows the broker to      * be started manually to support advanced testing scenarios.      */
specifier|public
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|this
operator|.
name|configure
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Exception encountered starting embedded ActiveMQ broker: {}"
operator|+
name|this
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stop the embedded ActiveMQ broker, blocking until the broker has stopped.      *<p/>      * The broker will normally be stopped by JUnit using the after() method.  This method allows the broker to      * be stopped manually to support advanced testing scenarios.      */
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
operator|!
name|brokerService
operator|.
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception encountered stopping embedded ActiveMQ broker: {}"
operator|+
name|this
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
comment|/**      * Start the embedded ActiveMQ Broker      *<p/>      * Invoked by JUnit to setup the resource      */
annotation|@
name|Override
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Starting embedded ActiveMQ broker: {}"
argument_list|,
name|this
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|start
argument_list|()
expr_stmt|;
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
comment|/**      * Stop the embedded ActiveMQ Broker      *<p/>      * Invoked by JUnit to tear down the resource      */
annotation|@
name|Override
specifier|protected
name|void
name|after
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Stopping Embedded ActiveMQ Broker: {}"
argument_list|,
name|this
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Create an ActiveMQConnectionFactory for the embedded ActiveMQ Broker      *      * @return a new ActiveMQConnectionFactory      */
specifier|public
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|()
decl_stmt|;
name|connectionFactory
operator|.
name|setBrokerURL
argument_list|(
name|brokerService
operator|.
name|getVmConnectorURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|connectionFactory
return|;
block|}
comment|/**      * Create an PooledConnectionFactory for the embedded ActiveMQ Broker      *      * @return a new PooledConnectionFactory      */
specifier|public
name|PooledConnectionFactory
name|createPooledConnectionFactory
parameter_list|()
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|PooledConnectionFactory
name|pooledConnectionFactory
init|=
operator|new
name|PooledConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
decl_stmt|;
return|return
name|pooledConnectionFactory
return|;
block|}
comment|/**      * Get the BrokerService for the embedded ActiveMQ broker.      *<p/>      * This may be required for advanced configuration of the BrokerService.      *      * @return the embedded ActiveMQ broker      */
specifier|public
name|BrokerService
name|getBrokerService
parameter_list|()
block|{
return|return
name|brokerService
return|;
block|}
comment|/**      * Get the VM URL for the embedded ActiveMQ Broker      *<p/>      * NOTE:  The option is precreate=false option is appended to the URL to avoid the automatic creation of brokers      * and the resulting duplicate broker errors      *      * @return the VM URL for the embedded broker      */
specifier|public
name|String
name|getVmURL
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"failover:(%s?create=false)"
argument_list|,
name|brokerService
operator|.
name|getVmConnectorURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the name of the embedded ActiveMQ Broker      *      * @return name of the embedded broker      */
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
return|return
name|brokerService
operator|.
name|getBrokerName
argument_list|()
return|;
block|}
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|brokerService
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStatisticsPluginEnabled
parameter_list|()
block|{
name|BrokerPlugin
index|[]
name|plugins
init|=
name|brokerService
operator|.
name|getPlugins
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|plugins
condition|)
block|{
for|for
control|(
name|BrokerPlugin
name|plugin
range|:
name|plugins
control|)
block|{
if|if
condition|(
name|plugin
operator|instanceof
name|StatisticsBrokerPlugin
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|enableStatisticsPlugin
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isStatisticsPluginEnabled
argument_list|()
condition|)
block|{
name|BrokerPlugin
index|[]
name|newPlugins
decl_stmt|;
name|BrokerPlugin
index|[]
name|currentPlugins
init|=
name|brokerService
operator|.
name|getPlugins
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|currentPlugins
operator|&&
literal|0
operator|<
name|currentPlugins
operator|.
name|length
condition|)
block|{
name|newPlugins
operator|=
operator|new
name|BrokerPlugin
index|[
name|currentPlugins
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentPlugins
argument_list|,
literal|0
argument_list|,
name|newPlugins
argument_list|,
literal|0
argument_list|,
name|currentPlugins
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newPlugins
operator|=
operator|new
name|BrokerPlugin
index|[
literal|1
index|]
expr_stmt|;
block|}
name|newPlugins
index|[
name|newPlugins
operator|.
name|length
operator|-
literal|1
index|]
operator|=
operator|new
name|StatisticsBrokerPlugin
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPlugins
argument_list|(
name|newPlugins
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|disableStatisticsPlugin
parameter_list|()
block|{
if|if
condition|(
name|isStatisticsPluginEnabled
argument_list|()
condition|)
block|{
name|BrokerPlugin
index|[]
name|currentPlugins
init|=
name|brokerService
operator|.
name|getPlugins
argument_list|()
decl_stmt|;
if|if
condition|(
literal|1
operator|<
name|currentPlugins
operator|.
name|length
condition|)
block|{
name|BrokerPlugin
index|[]
name|newPlugins
init|=
operator|new
name|BrokerPlugin
index|[
name|currentPlugins
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BrokerPlugin
name|plugin
range|:
name|currentPlugins
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|plugin
operator|instanceof
name|StatisticsBrokerPlugin
operator|)
condition|)
block|{
name|newPlugins
index|[
name|i
operator|++
index|]
operator|=
name|plugin
expr_stmt|;
block|}
block|}
name|brokerService
operator|.
name|setPlugins
argument_list|(
name|newPlugins
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|brokerService
operator|.
name|setPlugins
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isAdvisoryForDeliveryEnabled
parameter_list|()
block|{
return|return
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|isAdvisoryForDelivery
argument_list|()
return|;
block|}
specifier|public
name|void
name|enableAdvisoryForDelivery
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForDelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disableAdvisoryForDelivery
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForDelivery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAdvisoryForConsumedEnabled
parameter_list|()
block|{
return|return
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|isAdvisoryForConsumed
argument_list|()
return|;
block|}
specifier|public
name|void
name|enableAdvisoryForConsumed
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForConsumed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disableAdvisoryForConsumed
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForConsumed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAdvisoryForDiscardingMessagesEnabled
parameter_list|()
block|{
return|return
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|isAdvisoryForDiscardingMessages
argument_list|()
return|;
block|}
specifier|public
name|void
name|enableAdvisoryForDiscardingMessages
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForDiscardingMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disableAdvisoryForDiscardingMessages
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForDiscardingMessages
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAdvisoryForFastProducersEnabled
parameter_list|()
block|{
return|return
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|isAdvisoryForFastProducers
argument_list|()
return|;
block|}
specifier|public
name|void
name|enableAdvisoryForFastProducers
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForFastProducers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disableAdvisoryForFastProducers
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForFastProducers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAdvisoryForSlowConsumersEnabled
parameter_list|()
block|{
return|return
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|isAdvisoryForSlowConsumers
argument_list|()
return|;
block|}
specifier|public
name|void
name|enableAdvisoryForSlowConsumers
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForSlowConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disableAdvisoryForSlowConsumers
parameter_list|()
block|{
name|getDefaultPolicyEntry
argument_list|()
operator|.
name|setAdvisoryForSlowConsumers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the number of messages in a specific JMS Destination.      *<p/>      * The full name of the JMS destination including the prefix should be provided - i.e. queue:myQueue      * or topic:myTopic.  If the destination type prefix is not included in the destination name, a prefix      * of "queue:" is assumed.      *      * @param fullDestinationName the full name of the JMS Destination      * @return the number of messages in the JMS Destination      */
specifier|public
name|int
name|getMessageCount
parameter_list|(
name|String
name|fullDestinationName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|QUEUE_TYPE
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|TOPIC_TYPE
init|=
literal|2
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|brokerService
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"BrokerService has not yet been created - was before() called?"
argument_list|)
throw|;
block|}
name|int
name|destinationType
init|=
name|QUEUE_TYPE
decl_stmt|;
name|String
name|destinationName
init|=
name|fullDestinationName
decl_stmt|;
if|if
condition|(
name|fullDestinationName
operator|.
name|startsWith
argument_list|(
literal|"queue:"
argument_list|)
condition|)
block|{
name|destinationName
operator|=
name|fullDestinationName
operator|.
name|substring
argument_list|(
name|fullDestinationName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fullDestinationName
operator|.
name|startsWith
argument_list|(
literal|"topic:"
argument_list|)
condition|)
block|{
name|destinationType
operator|=
name|TOPIC_TYPE
expr_stmt|;
name|destinationName
operator|=
name|fullDestinationName
operator|.
name|substring
argument_list|(
name|fullDestinationName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|messageCount
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|foundDestination
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Destination
name|destination
range|:
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|tmpName
init|=
name|destination
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpName
operator|.
name|equalsIgnoreCase
argument_list|(
name|destinationName
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|destinationType
condition|)
block|{
case|case
name|QUEUE_TYPE
case|:
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
name|messageCount
operator|=
name|destination
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageCount
argument_list|()
expr_stmt|;
name|foundDestination
operator|=
literal|true
expr_stmt|;
block|}
break|break;
case|case
name|TOPIC_TYPE
case|:
if|if
condition|(
name|destination
operator|instanceof
name|Topic
condition|)
block|{
name|messageCount
operator|=
name|destination
operator|.
name|getMessageStore
argument_list|()
operator|.
name|getMessageCount
argument_list|()
expr_stmt|;
name|foundDestination
operator|=
literal|true
expr_stmt|;
block|}
break|break;
default|default:
comment|// Should never see this
name|log
operator|.
name|error
argument_list|(
literal|"Type didn't match: {}"
argument_list|,
name|destination
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundDestination
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|foundDestination
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Didn't find destination {} in broker {}"
argument_list|,
name|fullDestinationName
argument_list|,
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|messageCount
return|;
block|}
specifier|private
name|PolicyEntry
name|getDefaultPolicyEntry
parameter_list|()
block|{
name|PolicyMap
name|destinationPolicy
init|=
name|brokerService
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|destinationPolicy
condition|)
block|{
name|destinationPolicy
operator|=
operator|new
name|PolicyMap
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|destinationPolicy
argument_list|)
expr_stmt|;
block|}
name|PolicyEntry
name|defaultEntry
init|=
name|destinationPolicy
operator|.
name|getDefaultEntry
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|defaultEntry
condition|)
block|{
name|defaultEntry
operator|=
operator|new
name|PolicyEntry
argument_list|()
expr_stmt|;
name|destinationPolicy
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|defaultEntry
return|;
block|}
block|}
end_class

end_unit

