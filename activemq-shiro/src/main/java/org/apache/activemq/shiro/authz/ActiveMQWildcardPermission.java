begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authz
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|permission
operator|.
name|WildcardPermission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQWildcardPermission
extends|extends
name|WildcardPermission
block|{
specifier|private
specifier|final
name|boolean
name|caseSensitive
decl_stmt|;
specifier|public
name|ActiveMQWildcardPermission
parameter_list|(
name|String
name|wildcardString
parameter_list|)
block|{
name|this
argument_list|(
name|wildcardString
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ActiveMQWildcardPermission
parameter_list|(
name|String
name|wildcardString
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
name|super
argument_list|(
name|wildcardString
argument_list|,
name|caseSensitive
argument_list|)
expr_stmt|;
name|this
operator|.
name|caseSensitive
operator|=
name|caseSensitive
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|implies
parameter_list|(
name|Permission
name|p
parameter_list|)
block|{
comment|// By default only supports comparisons with other WildcardPermissions
if|if
condition|(
operator|!
operator|(
name|p
operator|instanceof
name|WildcardPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WildcardPermission
name|wp
init|=
operator|(
name|WildcardPermission
operator|)
name|p
decl_stmt|;
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|otherParts
init|=
name|getParts
argument_list|(
name|wp
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|otherPart
range|:
name|otherParts
control|)
block|{
comment|// If this permission has less parts than the other permission, everything after the number of parts contained
comment|// in this permission is automatically implied, so return true
if|if
condition|(
name|getParts
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|<
name|i
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|thisPart
init|=
name|getParts
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|thisPart
control|)
block|{
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
name|WILDCARD_TOKEN
argument_list|)
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|String
name|otherToken
range|:
name|otherPart
control|)
block|{
if|if
condition|(
operator|!
name|caseSensitive
condition|)
block|{
name|otherToken
operator|=
name|otherToken
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|matches
argument_list|(
name|token
argument_list|,
name|otherToken
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// If this permission has more parts than the other parts, only imply it if all of the other parts are wildcards
for|for
control|(
init|;
name|i
operator|<
name|getParts
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|part
init|=
name|getParts
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|part
operator|.
name|contains
argument_list|(
name|WILDCARD_TOKEN
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Tests whether or not a string matches against a pattern.      * The pattern may contain two special characters:<br>      * '*' means zero or more characters<br>      * '?' means one and only one character      *      * @param pattern pattern to match against.      *                Must not be<code>null</code>.      * @param value   string which must be matched against the pattern.      *                Must not be<code>null</code>.      * @return<code>true</code> if the string matches against the      *         pattern, or<code>false</code> otherwise.      */
specifier|protected
name|boolean
name|matches
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|char
index|[]
name|patArr
init|=
name|pattern
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|char
index|[]
name|valArr
init|=
name|value
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|patIndex
init|=
literal|0
decl_stmt|;
name|int
name|patEndIndex
init|=
name|patArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|int
name|valIndex
init|=
literal|0
decl_stmt|;
name|int
name|valEndIndex
init|=
name|valArr
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|char
name|ch
decl_stmt|;
name|boolean
name|patternContainsStar
init|=
literal|false
decl_stmt|;
for|for
control|(
name|char
name|patternChar
range|:
name|patArr
control|)
block|{
if|if
condition|(
name|patternChar
operator|==
literal|'*'
condition|)
block|{
name|patternContainsStar
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|patternContainsStar
condition|)
block|{
comment|// No '*'s, so we make a shortcut
if|if
condition|(
name|patEndIndex
operator|!=
name|valEndIndex
condition|)
block|{
return|return
literal|false
return|;
comment|// Pattern and string do not have the same size
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|patEndIndex
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|patArr
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
name|valArr
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
block|}
return|return
literal|true
return|;
comment|// String matches against pattern
block|}
comment|// Process characters before first star
while|while
condition|(
operator|(
name|ch
operator|=
name|patArr
index|[
name|patIndex
index|]
operator|)
operator|!=
literal|'*'
operator|&&
name|valIndex
operator|<=
name|valEndIndex
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
name|valArr
index|[
name|valIndex
index|]
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
name|patIndex
operator|++
expr_stmt|;
name|valIndex
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|valIndex
operator|>
name|valEndIndex
condition|)
block|{
comment|// All characters in the value are used. Check if only '*'s remain
comment|// in the pattern. If so, we succeeded. Otherwise failure.
for|for
control|(
name|int
name|i
init|=
name|patIndex
init|;
name|i
operator|<=
name|patEndIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Process characters after last star
while|while
condition|(
operator|(
name|ch
operator|=
name|patArr
index|[
name|patEndIndex
index|]
operator|)
operator|!=
literal|'*'
operator|&&
name|valIndex
operator|<=
name|valEndIndex
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
name|valArr
index|[
name|valEndIndex
index|]
condition|)
block|{
return|return
literal|false
return|;
comment|// Character mismatch
block|}
block|}
name|patEndIndex
operator|--
expr_stmt|;
name|valEndIndex
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|valIndex
operator|>
name|valEndIndex
condition|)
block|{
comment|// All characters in the value are used. Check if only '*'s remain
comment|// in the pattern. If so, we succeeded. Otherwise failure.
for|for
control|(
name|int
name|i
init|=
name|patIndex
init|;
name|i
operator|<=
name|patEndIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// process pattern between stars. patIndex and patEndIndex always point to a '*'.
while|while
condition|(
name|patIndex
operator|!=
name|patEndIndex
operator|&&
name|valIndex
operator|<=
name|valEndIndex
condition|)
block|{
name|int
name|innerPatternIndex
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|patIndex
operator|+
literal|1
init|;
name|i
operator|<=
name|patEndIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|==
literal|'*'
condition|)
block|{
name|innerPatternIndex
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|innerPatternIndex
operator|==
name|patIndex
operator|+
literal|1
condition|)
block|{
comment|// Two stars next to each other, skip the first one.
name|patIndex
operator|++
expr_stmt|;
continue|continue;
block|}
comment|// Find the pattern between patIndex& innerPatternIndex in the value between
comment|// valIndex and valEndIndex
name|int
name|innerPatternLength
init|=
operator|(
name|innerPatternIndex
operator|-
name|patIndex
operator|-
literal|1
operator|)
decl_stmt|;
name|int
name|innerValueLength
init|=
operator|(
name|valEndIndex
operator|-
name|valIndex
operator|+
literal|1
operator|)
decl_stmt|;
name|int
name|foundIndex
init|=
operator|-
literal|1
decl_stmt|;
name|innerValueLoop
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|innerValueLength
operator|-
name|innerPatternLength
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|innerPatternLength
condition|;
name|j
operator|++
control|)
block|{
name|ch
operator|=
name|patArr
index|[
name|patIndex
operator|+
name|j
operator|+
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'?'
condition|)
block|{
if|if
condition|(
name|ch
operator|!=
name|valArr
index|[
name|valIndex
operator|+
name|i
operator|+
name|j
index|]
condition|)
block|{
continue|continue
name|innerValueLoop
continue|;
block|}
block|}
block|}
name|foundIndex
operator|=
name|valIndex
operator|+
name|i
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|foundIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|patIndex
operator|=
name|innerPatternIndex
expr_stmt|;
name|valIndex
operator|=
name|foundIndex
operator|+
name|innerPatternLength
expr_stmt|;
block|}
comment|// All characters in the string are used. Check if only '*'s are left
comment|// in the pattern. If so, we succeeded. Otherwise failure.
for|for
control|(
name|int
name|i
init|=
name|patIndex
init|;
name|i
operator|<=
name|patEndIndex
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|patArr
index|[
name|i
index|]
operator|!=
literal|'*'
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getParts
parameter_list|(
name|WildcardPermission
name|wp
parameter_list|)
block|{
if|if
condition|(
name|wp
operator|instanceof
name|ActiveMQWildcardPermission
condition|)
block|{
return|return
operator|(
operator|(
name|ActiveMQWildcardPermission
operator|)
name|wp
operator|)
operator|.
name|getParts
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getPartsByReflection
argument_list|(
name|wp
argument_list|)
return|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|getPartsByReflection
parameter_list|(
name|WildcardPermission
name|wp
parameter_list|)
block|{
try|try
block|{
return|return
name|doGetPartsByReflection
argument_list|(
name|wp
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to obtain WildcardPermission instance's 'parts' value."
decl_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|doGetPartsByReflection
parameter_list|(
name|WildcardPermission
name|wp
parameter_list|)
throws|throws
name|Exception
block|{
name|Method
name|getParts
init|=
name|WildcardPermission
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getParts"
argument_list|)
decl_stmt|;
name|getParts
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|List
argument_list|<
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|getParts
operator|.
name|invoke
argument_list|(
name|wp
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|part
range|:
name|getParts
argument_list|()
control|)
block|{
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|part
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

