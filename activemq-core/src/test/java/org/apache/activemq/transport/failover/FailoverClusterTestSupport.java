begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|FailoverClusterTestSupport
extends|extends
name|TestCase
block|{
specifier|protected
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_CLIENTS
init|=
literal|30
decl_stmt|;
specifier|private
name|String
name|clientUrl
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BrokerService
argument_list|>
name|brokers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BrokerService
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ActiveMQConnection
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<
name|ActiveMQConnection
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|assertClientsConnectedToTwoBrokers
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQConnection
name|c
range|:
name|connections
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|c
operator|.
name|getTransportChannel
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Only 2 connections should be found: "
operator|+
name|set
argument_list|,
name|set
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertClientsConnectedToThreeBrokers
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQConnection
name|c
range|:
name|connections
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|c
operator|.
name|getTransportChannel
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Only 3 connections should be found: "
operator|+
name|set
argument_list|,
name|set
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addBroker
parameter_list|(
name|String
name|name
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|brokers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|brokerService
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|getBroker
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|brokers
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|removeBroker
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|brokers
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|protected
name|void
name|destroyBrokerCluster
parameter_list|()
throws|throws
name|JMSException
throws|,
name|Exception
block|{
for|for
control|(
name|BrokerService
name|b
range|:
name|brokers
operator|.
name|values
argument_list|()
control|)
block|{
name|b
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|brokers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|shutdownClients
parameter_list|()
throws|throws
name|JMSException
block|{
for|for
control|(
name|Connection
name|c
range|:
name|connections
control|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|brokerName
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseShutdownHook
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|addTransportConnector
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|String
name|connectorName
parameter_list|,
name|String
name|uri
parameter_list|,
name|boolean
name|clustered
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnector
name|connector
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setName
argument_list|(
name|connectorName
argument_list|)
expr_stmt|;
if|if
condition|(
name|clustered
condition|)
block|{
name|connector
operator|.
name|setRebalanceClusterClients
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setUpdateClusterClients
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setUpdateClusterClientsOnRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connector
operator|.
name|setRebalanceClusterClients
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setUpdateClusterClients
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setUpdateClusterClientsOnRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addNetworkBridge
parameter_list|(
name|BrokerService
name|answer
parameter_list|,
name|String
name|bridgeName
parameter_list|,
name|String
name|uri
parameter_list|,
name|boolean
name|duplex
parameter_list|,
name|String
name|destinationFilter
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|network
init|=
name|answer
operator|.
name|addNetworkConnector
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|network
operator|.
name|setName
argument_list|(
name|bridgeName
argument_list|)
expr_stmt|;
name|network
operator|.
name|setDuplex
argument_list|(
name|duplex
argument_list|)
expr_stmt|;
if|if
condition|(
name|destinationFilter
operator|!=
literal|null
operator|&&
operator|!
name|destinationFilter
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|network
operator|.
name|setDestinationFilter
argument_list|(
name|bridgeName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|createClients
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|clientUrl
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_CLIENTS
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQConnection
name|c
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|queue
init|=
name|s
operator|.
name|createQueue
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getClientUrl
parameter_list|()
block|{
return|return
name|clientUrl
return|;
block|}
specifier|public
name|void
name|setClientUrl
parameter_list|(
name|String
name|clientUrl
parameter_list|)
block|{
name|this
operator|.
name|clientUrl
operator|=
name|clientUrl
expr_stmt|;
block|}
block|}
end_class

end_unit

