begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|CommandVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  *   * @openwire:marshaller code="1"  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|WireFormatInfo
implements|implements
name|Command
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|WIREFORMAT_INFO
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|byte
name|MAGIC
index|[]
init|=
operator|new
name|byte
index|[]
block|{
literal|'A'
block|,
literal|'c'
block|,
literal|'t'
block|,
literal|'i'
block|,
literal|'v'
block|,
literal|'e'
block|,
literal|'M'
block|,
literal|'Q'
block|}
decl_stmt|;
specifier|static
specifier|final
specifier|public
name|long
name|STACK_TRACE_MASK
init|=
literal|0x00000001
decl_stmt|;
specifier|static
specifier|final
specifier|public
name|long
name|TCP_NO_DELAY_MASK
init|=
literal|0x00000002
decl_stmt|;
specifier|static
specifier|final
specifier|public
name|long
name|CACHE_MASK
init|=
literal|0x00000004
decl_stmt|;
specifier|static
specifier|final
specifier|public
name|long
name|COMPRESSION_MASK
init|=
literal|0x00000008
decl_stmt|;
specifier|protected
name|int
name|version
decl_stmt|;
specifier|protected
name|byte
name|magic
index|[]
init|=
name|MAGIC
decl_stmt|;
specifier|protected
name|int
name|options
decl_stmt|;
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
specifier|public
name|boolean
name|isWireFormatInfo
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @openwire:property version=1 size=8      */
specifier|public
name|byte
index|[]
name|getMagic
parameter_list|()
block|{
return|return
name|magic
return|;
block|}
specifier|public
name|void
name|setMagic
parameter_list|(
name|byte
index|[]
name|magic
parameter_list|)
block|{
name|this
operator|.
name|magic
operator|=
name|magic
expr_stmt|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
name|magic
operator|!=
literal|null
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|magic
argument_list|,
name|MAGIC
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCommandId
parameter_list|(
name|short
name|value
parameter_list|)
block|{     }
specifier|public
name|short
name|getCommandId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|boolean
name|isResponseRequired
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isResponse
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isBrokerInfo
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isMessageDispatch
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isMessage
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isMessageAck
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setResponseRequired
parameter_list|(
name|boolean
name|responseRequired
parameter_list|)
block|{     }
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"WireFormatInfo {version="
operator|+
name|version
operator|+
literal|"}"
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|int
name|getOptions
parameter_list|()
block|{
return|return
name|options
return|;
block|}
specifier|public
name|void
name|setOptions
parameter_list|(
name|int
name|options
parameter_list|)
block|{
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStackTraceEnabled
parameter_list|()
block|{
return|return
operator|(
name|options
operator|&
name|STACK_TRACE_MASK
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|void
name|setStackTraceEnabled
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
block|{
name|options
operator||=
name|STACK_TRACE_MASK
expr_stmt|;
block|}
else|else
block|{
name|options
operator|&=
operator|~
name|STACK_TRACE_MASK
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isTcpNoDelayEnabled
parameter_list|()
block|{
return|return
operator|(
name|options
operator|&
name|TCP_NO_DELAY_MASK
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|void
name|setTcpNoDelayEnabled
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
block|{
name|options
operator||=
name|TCP_NO_DELAY_MASK
expr_stmt|;
block|}
else|else
block|{
name|options
operator|&=
operator|~
name|TCP_NO_DELAY_MASK
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
return|return
operator|(
name|options
operator|&
name|CACHE_MASK
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|void
name|setCacheEnabled
parameter_list|(
name|boolean
name|enable
parameter_list|)
block|{
if|if
condition|(
name|enable
condition|)
block|{
name|options
operator||=
name|CACHE_MASK
expr_stmt|;
block|}
else|else
block|{
name|options
operator|&=
operator|~
name|CACHE_MASK
expr_stmt|;
block|}
block|}
specifier|public
name|Response
name|visit
parameter_list|(
name|CommandVisitor
name|visitor
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|visitor
operator|.
name|processWireFormat
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isMarshallAware
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

