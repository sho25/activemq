begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test for ticket AMQ-6310, leading wildcards no longer match after AMQ-6058  */
end_comment

begin_class
specifier|public
class|class
name|CustomVirtualTopicInterceptorWithLeadingWildcardTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CustomVirtualTopicInterceptorWithLeadingWildcardTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|total
init|=
literal|10
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|ActiveMQDestination
name|getConsumer1Destination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
literal|"q1.a.virtualtopic.topic"
argument_list|)
return|;
block|}
specifier|protected
name|ActiveMQDestination
name|getConsumer2Destination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
literal|"q2.a.virtualtopic.topic"
argument_list|)
return|;
block|}
specifier|protected
name|ActiveMQDestination
name|getProducerDestination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
literal|"virtualtopic.topic"
argument_list|)
return|;
block|}
specifier|public
name|void
name|testVirtualTopicRouting
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"validate no other messages on queues"
argument_list|)
expr_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|destination1
init|=
name|getConsumer1Destination
argument_list|()
decl_stmt|;
name|ActiveMQDestination
name|destination2
init|=
name|getConsumer2Destination
argument_list|()
decl_stmt|;
name|MessageConsumer
name|c1
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MessageConsumer
name|c2
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"send one simple message that should go to both consumers"
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|getProducerDestination
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|producer
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Last Message"
argument_list|)
argument_list|)
expr_stmt|;
comment|//check that c1 received the message as it should
name|assertNotNull
argument_list|(
name|c1
operator|.
name|receive
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
comment|//check that c2 received the message as well - this breaks pre-patch,
comment|//when VirtualTopicInterceptor.shouldDispatch only returned true if the prefix
comment|//did not have ".*", or the destination name started with the first part of the
comment|//prefix (i.e. in the case of "*.*.", the destination name would have had
comment|//to be "*").
name|assertNotNull
argument_list|(
name|c2
operator|.
name|receive
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected ex while waiting for last messages: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|//setup the broker and virtual topic to test custom Virtual topic name
comment|//and a multilevel prefix
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|VirtualTopic
name|virtualTopic
init|=
operator|new
name|VirtualTopic
argument_list|()
decl_stmt|;
name|virtualTopic
operator|.
name|setName
argument_list|(
literal|"virtualtopic.>"
argument_list|)
expr_stmt|;
name|virtualTopic
operator|.
name|setPrefix
argument_list|(
literal|"*.*."
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|interceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|interceptor
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|virtualTopic
block|}
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{
name|interceptor
block|}
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
end_class

end_unit

