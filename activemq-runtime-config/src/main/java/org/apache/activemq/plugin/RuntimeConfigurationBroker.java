begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|CompositeDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMapEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|jmx
operator|.
name|RuntimeConfigurationView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoAuthorizationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoAuthorizationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoAuthorizationPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoCompositeQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoCompositeTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoPolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoPolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoVirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|schema
operator|.
name|core
operator|.
name|DtoVirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|AuthorizationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|AuthorizationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|TempDestinationAuthorizationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|XBeanAuthorizationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|XBeanAuthorizationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|spring
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|PropertyPlaceholderConfigurer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|xml
operator|.
name|PluggableSchemaResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_class
specifier|public
class|class
name|RuntimeConfigurationBroker
extends|extends
name|BrokerFilter
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RuntimeConfigurationBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|objectNamePropsAppendage
init|=
literal|",service=RuntimeConfiguration,name=Plugin"
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|addDestinationBarrier
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
name|PropertiesPlaceHolderUtil
name|placeHolderUtil
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|checkPeriod
decl_stmt|;
specifier|private
name|long
name|lastModified
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Resource
name|configToMonitor
decl_stmt|;
specifier|private
name|DtoBroker
name|currentConfiguration
decl_stmt|;
specifier|private
name|Runnable
name|monitorTask
decl_stmt|;
specifier|private
name|ConcurrentLinkedQueue
argument_list|<
name|Runnable
argument_list|>
name|destinationInterceptorUpdateWork
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ObjectName
name|objectName
decl_stmt|;
specifier|private
name|String
name|infoString
decl_stmt|;
specifier|private
name|Schema
name|schema
decl_stmt|;
specifier|public
name|RuntimeConfigurationBroker
parameter_list|(
name|Broker
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|BrokerContext
name|brokerContext
init|=
name|next
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getBrokerContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|brokerContext
operator|!=
literal|null
condition|)
block|{
name|configToMonitor
operator|=
name|Utils
operator|.
name|resourceFromString
argument_list|(
name|brokerContext
operator|.
name|getConfigurationUrl
argument_list|()
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Configuration "
operator|+
name|configToMonitor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Null BrokerContext; impossible to determine configuration url resource from broker, updates cannot be tracked"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to determine configuration url resource from broker, updates cannot be tracked"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
name|currentConfiguration
operator|=
name|loadConfiguration
argument_list|(
name|configToMonitor
argument_list|)
expr_stmt|;
name|monitorModification
argument_list|(
name|configToMonitor
argument_list|)
expr_stmt|;
name|registerMbean
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|monitorTask
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|cancel
argument_list|(
name|monitorTask
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|letsNotStopStop
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to cancel config monitor task"
argument_list|,
name|letsNotStopStop
argument_list|)
expr_stmt|;
block|}
block|}
name|unregisterMbean
argument_list|()
expr_stmt|;
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerMbean
parameter_list|()
block|{
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isUseJmx
argument_list|()
condition|)
block|{
name|ManagementContext
name|managementContext
init|=
name|getBrokerService
argument_list|()
operator|.
name|getManagementContext
argument_list|()
decl_stmt|;
try|try
block|{
name|objectName
operator|=
operator|new
name|ObjectName
argument_list|(
name|getBrokerService
argument_list|()
operator|.
name|getBrokerObjectName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|objectNamePropsAppendage
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|registerMBean
argument_list|(
operator|new
name|RuntimeConfigurationView
argument_list|(
name|this
argument_list|)
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to register RuntimeConfigurationMBean"
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|unregisterMbean
parameter_list|()
block|{
if|if
condition|(
name|objectName
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|getBrokerService
argument_list|()
operator|.
name|getManagementContext
argument_list|()
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMException
name|ignored
parameter_list|)
block|{             }
block|}
block|}
comment|// modification to virtual destinations interceptor needs exclusive access to destination add
annotation|@
name|Override
specifier|public
name|Destination
name|addDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|boolean
name|createIfTemporary
parameter_list|)
throws|throws
name|Exception
block|{
name|Runnable
name|work
init|=
name|destinationInterceptorUpdateWork
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|work
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|addDestinationBarrier
operator|.
name|writeLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
do|do
block|{
name|work
operator|.
name|run
argument_list|()
expr_stmt|;
name|work
operator|=
name|destinationInterceptorUpdateWork
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|work
operator|!=
literal|null
condition|)
do|;
return|return
name|super
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|createIfTemporary
argument_list|)
return|;
block|}
finally|finally
block|{
name|addDestinationBarrier
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
block|{
name|addDestinationBarrier
operator|.
name|readLock
argument_list|()
operator|.
name|lockInterruptibly
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|createIfTemporary
argument_list|)
return|;
block|}
finally|finally
block|{
name|addDestinationBarrier
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|updateNow
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Manual configuration update triggered"
argument_list|)
expr_stmt|;
name|infoString
operator|=
literal|""
expr_stmt|;
name|applyModifications
argument_list|(
name|configToMonitor
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|infoString
decl_stmt|;
name|infoString
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|void
name|monitorModification
parameter_list|(
specifier|final
name|Resource
name|configToMonitor
parameter_list|)
block|{
name|monitorTask
operator|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|configToMonitor
operator|.
name|lastModified
argument_list|()
operator|>
name|lastModified
condition|)
block|{
name|applyModifications
argument_list|(
name|configToMonitor
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to determine lastModified time on configuration: "
operator|+
name|configToMonitor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
if|if
condition|(
name|lastModified
operator|>
literal|0
operator|&&
name|checkPeriod
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getScheduler
argument_list|()
operator|.
name|executePeriodically
argument_list|(
name|monitorTask
argument_list|,
name|checkPeriod
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Monitoring for updates (every "
operator|+
name|checkPeriod
operator|+
literal|"millis) : "
operator|+
name|configToMonitor
operator|+
literal|", lastUpdate: "
operator|+
operator|new
name|Date
argument_list|(
name|lastModified
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|info
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoString
operator|!=
literal|null
condition|)
block|{
name|infoString
operator|+=
name|s
expr_stmt|;
name|infoString
operator|+=
literal|";"
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|info
parameter_list|(
name|String
name|s
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|infoString
operator|!=
literal|null
condition|)
block|{
name|infoString
operator|+=
name|s
expr_stmt|;
name|infoString
operator|+=
literal|", "
operator|+
name|t
expr_stmt|;
name|infoString
operator|+=
literal|";"
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|applyModifications
parameter_list|(
name|Resource
name|configToMonitor
parameter_list|)
block|{
name|DtoBroker
name|changed
init|=
name|loadConfiguration
argument_list|(
name|configToMonitor
argument_list|)
decl_stmt|;
if|if
condition|(
name|changed
operator|!=
literal|null
operator|&&
operator|!
name|currentConfiguration
operator|.
name|equals
argument_list|(
name|changed
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"change in "
operator|+
name|configToMonitor
operator|+
literal|" at: "
operator|+
operator|new
name|Date
argument_list|(
name|lastModified
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"current:"
operator|+
name|currentConfiguration
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"new    :"
operator|+
name|changed
argument_list|)
expr_stmt|;
name|processSelectiveChanges
argument_list|(
name|currentConfiguration
argument_list|,
name|changed
argument_list|)
expr_stmt|;
name|currentConfiguration
operator|=
name|changed
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
literal|"No material change to configuration in "
operator|+
name|configToMonitor
operator|+
literal|" at: "
operator|+
operator|new
name|Date
argument_list|(
name|lastModified
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processSelectiveChanges
parameter_list|(
name|DtoBroker
name|currentConfiguration
parameter_list|,
name|DtoBroker
name|modifiedConfiguration
parameter_list|)
block|{
for|for
control|(
name|Class
name|upDatable
range|:
operator|new
name|Class
index|[]
block|{
name|DtoBroker
operator|.
name|DestinationPolicy
operator|.
name|class
block|,
name|DtoBroker
operator|.
name|NetworkConnectors
operator|.
name|class
block|,
name|DtoBroker
operator|.
name|DestinationInterceptors
operator|.
name|class
block|,
name|DtoBroker
operator|.
name|Plugins
operator|.
name|class
block|}
control|)
block|{
name|processChanges
argument_list|(
name|currentConfiguration
argument_list|,
name|modifiedConfiguration
argument_list|,
name|upDatable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processChanges
parameter_list|(
name|DtoBroker
name|currentConfiguration
parameter_list|,
name|DtoBroker
name|modifiedConfiguration
parameter_list|,
name|Class
name|upDatable
parameter_list|)
block|{
name|List
name|current
init|=
name|filter
argument_list|(
name|currentConfiguration
argument_list|,
name|upDatable
argument_list|)
decl_stmt|;
name|List
name|modified
init|=
name|filter
argument_list|(
name|modifiedConfiguration
argument_list|,
name|upDatable
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|equals
argument_list|(
name|modified
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"no changes to "
operator|+
name|upDatable
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|info
argument_list|(
literal|"changes to "
operator|+
name|upDatable
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|modIndex
init|=
literal|0
decl_stmt|,
name|currentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|modIndex
operator|<
name|modified
operator|.
name|size
argument_list|()
operator|&&
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
operator|,
name|currentIndex
operator|++
control|)
block|{
comment|// walk the list for mods
name|applyModifications
argument_list|(
name|getContents
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
argument_list|)
argument_list|,
name|getContents
argument_list|(
name|modified
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|modIndex
operator|<
name|modified
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
control|)
block|{
comment|// new element; add all
for|for
control|(
name|Object
name|nc
range|:
name|getContents
argument_list|(
name|modified
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
argument_list|)
control|)
block|{
name|addNew
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|currentIndex
operator|++
control|)
block|{
comment|// removal of element; remove all
for|for
control|(
name|Object
name|nc
range|:
name|getContents
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
argument_list|)
control|)
block|{
name|remove
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// mapping all supported updatable elements to support getContents
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|getContents
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|val
init|=
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getContents"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
operator|.
name|invoke
argument_list|(
name|o
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|List
condition|)
block|{
name|answer
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|val
expr_stmt|;
block|}
else|else
block|{
name|answer
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|mappingIncomplete
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|o
operator|+
literal|" has no modifiable elements"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"Failed to access getContents for "
operator|+
name|o
operator|+
literal|", runtime modifications not supported"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|private
name|void
name|applyModifications
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|current
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|modification
parameter_list|)
block|{
name|int
name|modIndex
init|=
literal|0
decl_stmt|,
name|currentIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|modIndex
operator|<
name|modification
operator|.
name|size
argument_list|()
operator|&&
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
operator|,
name|currentIndex
operator|++
control|)
block|{
name|Object
name|existing
init|=
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
decl_stmt|;
name|Object
name|candidate
init|=
name|modification
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existing
operator|.
name|equals
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"modification to:"
operator|+
name|existing
operator|+
literal|" , with: "
operator|+
name|candidate
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|existing
argument_list|,
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|modIndex
operator|<
name|modification
operator|.
name|size
argument_list|()
condition|;
name|modIndex
operator|++
control|)
block|{
name|addNew
argument_list|(
name|modification
operator|.
name|get
argument_list|(
name|modIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|currentIndex
operator|<
name|current
operator|.
name|size
argument_list|()
condition|;
name|currentIndex
operator|++
control|)
block|{
name|remove
argument_list|(
name|current
operator|.
name|get
argument_list|(
name|currentIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|modify
parameter_list|(
name|Object
name|existing
parameter_list|,
name|Object
name|candidate
parameter_list|)
block|{
if|if
condition|(
name|candidate
operator|instanceof
name|DtoAuthorizationPlugin
condition|)
block|{
try|try
block|{
comment|// replace authorization map - need exclusive write lock to total broker
name|AuthorizationBroker
name|authorizationBroker
init|=
operator|(
name|AuthorizationBroker
operator|)
name|getBrokerService
argument_list|()
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AuthorizationBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|authorizationBroker
operator|.
name|setAuthorizationMap
argument_list|(
name|fromDto
argument_list|(
name|filter
argument_list|(
name|candidate
argument_list|,
name|DtoAuthorizationPlugin
operator|.
name|Map
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"failed to apply modified AuthorizationMap to AuthorizationBroker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|candidate
operator|instanceof
name|DtoPolicyMap
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|existingEntries
init|=
name|filter
argument_list|(
name|existing
argument_list|,
name|DtoPolicyMap
operator|.
name|PolicyEntries
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|candidateEntries
init|=
name|filter
argument_list|(
name|candidate
argument_list|,
name|DtoPolicyMap
operator|.
name|PolicyEntries
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// walk the map for mods
name|applyModifications
argument_list|(
name|getContents
argument_list|(
name|existingEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|getContents
argument_list|(
name|candidateEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|candidate
operator|instanceof
name|DtoPolicyEntry
condition|)
block|{
name|PolicyMap
name|existingMap
init|=
name|getBrokerService
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
name|PolicyEntry
name|updatedEntry
init|=
name|fromDto
argument_list|(
name|candidate
argument_list|,
operator|new
name|PolicyEntry
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|existingEntry
init|=
name|existingMap
operator|.
name|get
argument_list|(
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntry
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|updatedEntry
operator|=
name|fromDto
argument_list|(
name|candidate
argument_list|,
operator|(
name|PolicyEntry
operator|)
name|existingEntry
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|applyRetrospectively
argument_list|(
name|updatedEntry
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"updated policy for: "
operator|+
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
literal|"cannot modify policy matching multiple destinations: "
operator|+
name|existingEntry
operator|+
literal|", destination:"
operator|+
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|remove
argument_list|(
name|existing
argument_list|)
expr_stmt|;
name|addNew
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|applyRetrospectively
parameter_list|(
name|PolicyEntry
name|updatedEntry
parameter_list|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|getBrokerService
argument_list|()
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
for|for
control|(
name|Destination
name|destination
range|:
name|regionBroker
operator|.
name|getDestinations
argument_list|(
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|updatedEntry
operator|.
name|update
argument_list|(
operator|(
name|Queue
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|updatedEntry
operator|.
name|update
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"applied update to:"
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|AuthorizationMap
name|fromDto
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|XBeanAuthorizationMap
name|xBeanAuthorizationMap
init|=
operator|new
name|XBeanAuthorizationMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|map
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DtoAuthorizationPlugin
operator|.
name|Map
condition|)
block|{
name|DtoAuthorizationPlugin
operator|.
name|Map
name|dtoMap
init|=
operator|(
name|DtoAuthorizationPlugin
operator|.
name|Map
operator|)
name|o
decl_stmt|;
name|List
argument_list|<
name|DestinationMapEntry
argument_list|>
name|entries
init|=
operator|new
name|LinkedList
argument_list|<
name|DestinationMapEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|// revisit - would like to map getAuthorizationMap to generic getContents
for|for
control|(
name|Object
name|authMap
range|:
name|filter
argument_list|(
name|dtoMap
operator|.
name|getAuthorizationMap
argument_list|()
argument_list|,
name|DtoAuthorizationMap
operator|.
name|AuthorizationEntries
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|Object
name|entry
range|:
name|filter
argument_list|(
name|getContents
argument_list|(
name|authMap
argument_list|)
argument_list|,
name|DtoAuthorizationEntry
operator|.
name|class
argument_list|)
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|fromDto
argument_list|(
name|entry
argument_list|,
operator|new
name|XBeanAuthorizationEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|xBeanAuthorizationMap
operator|.
name|setAuthorizationEntries
argument_list|(
name|entries
argument_list|)
expr_stmt|;
try|try
block|{
name|xBeanAuthorizationMap
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"failed to update xBeanAuthorizationMap auth entries:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|entry
range|:
name|filter
argument_list|(
name|dtoMap
operator|.
name|getAuthorizationMap
argument_list|()
argument_list|,
name|DtoAuthorizationMap
operator|.
name|TempDestinationAuthorizationEntry
operator|.
name|class
argument_list|)
control|)
block|{
comment|// another restriction - would like to be getContents
name|DtoAuthorizationMap
operator|.
name|TempDestinationAuthorizationEntry
name|dtoEntry
init|=
operator|(
name|DtoAuthorizationMap
operator|.
name|TempDestinationAuthorizationEntry
operator|)
name|entry
decl_stmt|;
name|xBeanAuthorizationMap
operator|.
name|setTempDestinationAuthorizationEntry
argument_list|(
name|fromDto
argument_list|(
name|dtoEntry
operator|.
name|getTempDestinationAuthorizationEntry
argument_list|()
argument_list|,
operator|new
name|TempDestinationAuthorizationEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|info
argument_list|(
literal|"No support for updates to: "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|xBeanAuthorizationMap
return|;
block|}
specifier|private
name|void
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DtoNetworkConnector
condition|)
block|{
name|DtoNetworkConnector
name|toRemove
init|=
operator|(
name|DtoNetworkConnector
operator|)
name|o
decl_stmt|;
for|for
control|(
name|NetworkConnector
name|existingCandidate
range|:
name|getBrokerService
argument_list|()
operator|.
name|getNetworkConnectors
argument_list|()
control|)
block|{
if|if
condition|(
name|configMatch
argument_list|(
name|toRemove
argument_list|,
name|existingCandidate
argument_list|)
condition|)
block|{
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|removeNetworkConnector
argument_list|(
name|existingCandidate
argument_list|)
condition|)
block|{
try|try
block|{
name|existingCandidate
operator|.
name|stop
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"stopped and removed networkConnector: "
operator|+
name|existingCandidate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"Failed to stop removed network connector: "
operator|+
name|existingCandidate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|DtoVirtualDestinationInterceptor
condition|)
block|{
comment|// whack it
name|destinationInterceptorUpdateWork
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|List
argument_list|<
name|DestinationInterceptor
argument_list|>
name|interceptorsList
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationInterceptor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DestinationInterceptor
name|candidate
range|:
name|getBrokerService
argument_list|()
operator|.
name|getDestinationInterceptors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|candidate
operator|instanceof
name|VirtualDestinationInterceptor
operator|)
condition|)
block|{
name|interceptorsList
operator|.
name|add
argument_list|(
name|candidate
argument_list|)
expr_stmt|;
block|}
block|}
name|DestinationInterceptor
index|[]
name|destinationInterceptors
init|=
name|interceptorsList
operator|.
name|toArray
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{}
argument_list|)
decl_stmt|;
name|getBrokerService
argument_list|()
operator|.
name|setDestinationInterceptors
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
operator|(
call|(
name|CompositeDestinationInterceptor
call|)
argument_list|(
operator|(
name|RegionBroker
operator|)
name|getBrokerService
argument_list|()
operator|.
name|getRegionBroker
argument_list|()
argument_list|)
operator|.
name|getDestinationInterceptor
argument_list|()
operator|)
operator|.
name|setInterceptors
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"removed VirtualDestinationInterceptor from: "
operator|+
name|interceptorsList
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
literal|"No runtime support for removal of: "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|configMatch
parameter_list|(
name|DtoNetworkConnector
name|dto
parameter_list|,
name|NetworkConnector
name|candidate
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dtoProps
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|dto
argument_list|,
name|dtoProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|candidateProps
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|candidate
argument_list|,
name|candidateProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// every dto prop must be present in the candidate
for|for
control|(
name|String
name|key
range|:
name|dtoProps
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|candidateProps
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
operator|!
name|candidateProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|dtoProps
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|addNew
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|DtoNetworkConnector
condition|)
block|{
name|DtoNetworkConnector
name|networkConnector
init|=
operator|(
name|DtoNetworkConnector
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|networkConnector
operator|.
name|getUri
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|DiscoveryNetworkConnector
name|nc
init|=
name|fromDto
argument_list|(
name|networkConnector
argument_list|,
operator|new
name|DiscoveryNetworkConnector
argument_list|()
argument_list|)
decl_stmt|;
name|getBrokerService
argument_list|()
operator|.
name|addNetworkConnector
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|nc
operator|.
name|start
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"started new network connector: "
operator|+
name|nc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"Failed to add new networkConnector "
operator|+
name|networkConnector
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|DtoVirtualDestinationInterceptor
condition|)
block|{
specifier|final
name|DtoVirtualDestinationInterceptor
name|dto
init|=
operator|(
name|DtoVirtualDestinationInterceptor
operator|)
name|o
decl_stmt|;
name|destinationInterceptorUpdateWork
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|boolean
name|updatedExistingInterceptor
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DestinationInterceptor
name|destinationInterceptor
range|:
name|getBrokerService
argument_list|()
operator|.
name|getDestinationInterceptors
argument_list|()
control|)
block|{
if|if
condition|(
name|destinationInterceptor
operator|instanceof
name|VirtualDestinationInterceptor
condition|)
block|{
comment|// update existing interceptor
specifier|final
name|VirtualDestinationInterceptor
name|virtualDestinationInterceptor
init|=
operator|(
name|VirtualDestinationInterceptor
operator|)
name|destinationInterceptor
decl_stmt|;
name|virtualDestinationInterceptor
operator|.
name|setVirtualDestinations
argument_list|(
name|fromDto
argument_list|(
name|dto
argument_list|)
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"applied updates to: "
operator|+
name|virtualDestinationInterceptor
argument_list|)
expr_stmt|;
name|updatedExistingInterceptor
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|updatedExistingInterceptor
condition|)
block|{
comment|// add
name|VirtualDestinationInterceptor
name|virtualDestinationInterceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|virtualDestinationInterceptor
operator|.
name|setVirtualDestinations
argument_list|(
name|fromDto
argument_list|(
name|dto
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|DestinationInterceptor
argument_list|>
name|interceptorsList
init|=
operator|new
name|ArrayList
argument_list|<
name|DestinationInterceptor
argument_list|>
argument_list|()
decl_stmt|;
name|interceptorsList
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getBrokerService
argument_list|()
operator|.
name|getDestinationInterceptors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|interceptorsList
operator|.
name|add
argument_list|(
name|virtualDestinationInterceptor
argument_list|)
expr_stmt|;
name|DestinationInterceptor
index|[]
name|destinationInterceptors
init|=
name|interceptorsList
operator|.
name|toArray
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{}
argument_list|)
decl_stmt|;
name|getBrokerService
argument_list|()
operator|.
name|setDestinationInterceptors
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|getBrokerService
argument_list|()
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CompositeDestinationInterceptor
operator|)
name|regionBroker
operator|.
name|getDestinationInterceptor
argument_list|()
operator|)
operator|.
name|setInterceptors
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"applied new: "
operator|+
name|interceptorsList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|DtoPolicyEntry
condition|)
block|{
name|PolicyEntry
name|addition
init|=
name|fromDto
argument_list|(
name|o
argument_list|,
operator|new
name|PolicyEntry
argument_list|()
argument_list|)
decl_stmt|;
name|PolicyMap
name|existingMap
init|=
name|getBrokerService
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
name|existingMap
operator|.
name|put
argument_list|(
name|addition
operator|.
name|getDestination
argument_list|()
argument_list|,
name|addition
argument_list|)
expr_stmt|;
name|applyRetrospectively
argument_list|(
name|addition
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"added policy for: "
operator|+
name|addition
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
literal|"No runtime support for additions of "
operator|+
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|VirtualDestination
index|[]
name|fromDto
parameter_list|(
name|DtoVirtualDestinationInterceptor
name|virtualDestinationInterceptor
parameter_list|)
block|{
name|List
argument_list|<
name|VirtualDestination
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|VirtualDestination
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|vd
range|:
name|filter
argument_list|(
name|virtualDestinationInterceptor
argument_list|,
name|DtoVirtualDestinationInterceptor
operator|.
name|VirtualDestinations
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|Object
name|vt
range|:
name|filter
argument_list|(
name|vd
argument_list|,
name|DtoVirtualTopic
operator|.
name|class
argument_list|)
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|fromDto
argument_list|(
name|vt
argument_list|,
operator|new
name|VirtualTopic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|vt
range|:
name|filter
argument_list|(
name|vd
argument_list|,
name|DtoCompositeTopic
operator|.
name|class
argument_list|)
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|fromDto
argument_list|(
name|vt
argument_list|,
operator|new
name|CompositeTopic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
name|vt
range|:
name|filter
argument_list|(
name|vd
argument_list|,
name|DtoCompositeQueue
operator|.
name|class
argument_list|)
control|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|fromDto
argument_list|(
name|vt
argument_list|,
operator|new
name|CompositeQueue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|VirtualDestination
index|[]
name|array
init|=
operator|new
name|VirtualDestination
index|[
name|answer
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|answer
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
expr_stmt|;
return|return
name|array
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|fromDto
parameter_list|(
name|Object
name|dto
parameter_list|,
name|T
name|instance
parameter_list|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|dto
argument_list|,
name|properties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|replacePlaceHolders
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"applying props: "
operator|+
name|properties
operator|+
literal|", to "
operator|+
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|instance
argument_list|,
name|properties
argument_list|)
expr_stmt|;
comment|// deal with nested elements
for|for
control|(
name|Object
name|nested
range|:
name|filter
argument_list|(
name|dto
argument_list|,
name|Object
operator|.
name|class
argument_list|)
control|)
block|{
name|String
name|elementName
init|=
name|nested
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementName
operator|.
name|endsWith
argument_list|(
literal|"s"
argument_list|)
condition|)
block|{
name|Method
name|setter
init|=
name|findSetter
argument_list|(
name|instance
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|setter
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|argument
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|elementContent
range|:
name|filter
argument_list|(
name|nested
argument_list|,
name|Object
operator|.
name|class
argument_list|)
control|)
block|{
name|argument
operator|.
name|add
argument_list|(
name|fromDto
argument_list|(
name|elementContent
argument_list|,
name|inferTargetObject
argument_list|(
name|elementContent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|setter
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|matchType
argument_list|(
name|argument
argument_list|,
name|setter
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"failed to invoke "
operator|+
name|setter
operator|+
literal|" on "
operator|+
name|instance
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|info
argument_list|(
literal|"failed to find setter for "
operator|+
name|elementName
operator|+
literal|" on :"
operator|+
name|instance
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|info
argument_list|(
literal|"unsupported mapping of element for non plural:"
operator|+
name|elementName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|instance
return|;
block|}
specifier|private
name|Object
name|matchType
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|parameterValues
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|aClass
parameter_list|)
block|{
name|Object
name|result
init|=
name|parameterValues
decl_stmt|;
if|if
condition|(
name|Set
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|aClass
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|HashSet
argument_list|(
name|parameterValues
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Object
name|inferTargetObject
parameter_list|(
name|Object
name|elementContent
parameter_list|)
block|{
if|if
condition|(
name|DtoTopic
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementContent
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|DtoQueue
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|elementContent
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|()
return|;
block|}
else|else
block|{
name|info
argument_list|(
literal|"update not supported for dto: "
operator|+
name|elementContent
argument_list|)
expr_stmt|;
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
block|}
specifier|private
name|Method
name|findSetter
parameter_list|(
name|Object
name|instance
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
name|String
name|setter
init|=
literal|"set"
operator|+
name|elementName
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|instance
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|setter
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|m
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Object
argument_list|>
name|filter
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|filter
argument_list|(
name|getContents
argument_list|(
name|obj
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|Object
argument_list|>
name|filter
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|objectList
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|objectList
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|JAXBElement
condition|)
block|{
name|JAXBElement
name|element
init|=
operator|(
name|JAXBElement
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|element
operator|.
name|getDeclaredType
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|element
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|T
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|DtoBroker
name|loadConfiguration
parameter_list|(
name|Resource
name|configToMonitor
parameter_list|)
block|{
name|DtoBroker
name|jaxbConfig
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|configToMonitor
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|DtoBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|Unmarshaller
name|unMarshaller
init|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
name|unMarshaller
operator|.
name|setSchema
argument_list|(
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip beans and pull out the broker node to validate
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|db
init|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|db
operator|.
name|parse
argument_list|(
name|configToMonitor
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|Node
name|brokerRootNode
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"broker"
argument_list|)
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|DtoBroker
argument_list|>
name|brokerJAXBElement
init|=
name|unMarshaller
operator|.
name|unmarshal
argument_list|(
name|brokerRootNode
argument_list|,
name|DtoBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|jaxbConfig
operator|=
name|brokerJAXBElement
operator|.
name|getValue
argument_list|()
expr_stmt|;
comment|// if we can parse we can track mods
name|lastModified
operator|=
name|configToMonitor
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|loadPropertiesPlaceHolderSupport
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"Failed to access: "
operator|+
name|configToMonitor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"Failed to parse: "
operator|+
name|configToMonitor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"Failed to document parse: "
operator|+
name|configToMonitor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"Failed to find broker element in: "
operator|+
name|configToMonitor
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|jaxbConfig
return|;
block|}
specifier|private
name|void
name|loadPropertiesPlaceHolderSupport
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|BrokerContext
name|brokerContext
init|=
name|getBrokerService
argument_list|()
operator|.
name|getBrokerContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|brokerContext
operator|!=
literal|null
condition|)
block|{
name|Properties
name|initialProperties
init|=
operator|new
name|Properties
argument_list|(
name|System
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|placeHolderUtil
operator|=
operator|new
name|PropertiesPlaceHolderUtil
argument_list|(
name|initialProperties
argument_list|)
expr_stmt|;
name|mergeProperties
argument_list|(
name|doc
argument_list|,
name|initialProperties
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mergeProperties
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Properties
name|initialProperties
parameter_list|)
block|{
comment|// find resources
comment|//<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
comment|//<property name="locations">
comment|//              ...
comment|//</property>
comment|//</bean>
name|String
name|resourcesString
init|=
literal|""
decl_stmt|;
name|NodeList
name|beans
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"bean"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|beans
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|bean
init|=
name|beans
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|bean
operator|.
name|hasAttributes
argument_list|()
operator|&&
name|bean
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"class"
argument_list|)
operator|.
name|getTextContent
argument_list|()
operator|.
name|contains
argument_list|(
literal|"PropertyPlaceholderConfigurer"
argument_list|)
condition|)
block|{
if|if
condition|(
name|bean
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|NodeList
name|beanProps
init|=
name|bean
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|beanProps
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Node
name|beanProp
init|=
name|beanProps
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|beanProp
operator|.
name|getNodeType
argument_list|()
operator|&&
name|beanProp
operator|.
name|hasAttributes
argument_list|()
operator|&&
name|beanProp
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getTextContent
argument_list|()
operator|.
name|equals
argument_list|(
literal|"locations"
argument_list|)
condition|)
block|{
comment|// interested in value or list/value of locations property
name|Element
name|beanPropElement
init|=
operator|(
name|Element
operator|)
name|beanProp
decl_stmt|;
name|NodeList
name|values
init|=
name|beanPropElement
operator|.
name|getElementsByTagName
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|values
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|Node
name|value
init|=
name|values
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resourcesString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resourcesString
operator|+=
literal|","
expr_stmt|;
block|}
name|resourcesString
operator|+=
name|value
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|Resource
argument_list|>
name|propResources
init|=
operator|new
name|LinkedList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|resourcesString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|propResources
operator|.
name|add
argument_list|(
name|Utils
operator|.
name|resourceFromString
argument_list|(
name|replacePlaceHolders
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"failed to resolve resource: "
operator|+
name|value
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Resource
name|resource
range|:
name|propResources
control|)
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|resource
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|info
argument_list|(
literal|"failed to load properties resource: "
operator|+
name|resource
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|initialProperties
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|replacePlaceHolders
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|placeHolderUtil
operator|!=
literal|null
condition|)
block|{
name|placeHolderUtil
operator|.
name|filter
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|replacePlaceHolders
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|placeHolderUtil
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|placeHolderUtil
operator|.
name|filter
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|private
name|Schema
name|getSchema
parameter_list|()
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|SchemaFactory
name|schemaFactory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|StreamSource
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|StreamSource
argument_list|>
argument_list|()
decl_stmt|;
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/activemq.xsd"
argument_list|)
operator|.
name|toExternalForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// avoid going to the net to pull down the spring schema,
comment|// REVISIT may need to be smarter in osgi
specifier|final
name|PluggableSchemaResolver
name|springResolver
init|=
operator|new
name|PluggableSchemaResolver
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InputSource
name|beanInputSource
init|=
name|springResolver
operator|.
name|resolveEntity
argument_list|(
literal|"http://www.springframework.org/schema/beans"
argument_list|,
literal|"http://www.springframework.org/schema/beans/spring-beans.xsd"
argument_list|)
decl_stmt|;
if|if
condition|(
name|beanInputSource
operator|!=
literal|null
condition|)
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|StreamSource
argument_list|(
name|beanInputSource
operator|.
name|getByteStream
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|StreamSource
argument_list|(
literal|"http://www.springframework.org/schema/beans/spring-beans.xsd"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schema
operator|=
name|schemaFactory
operator|.
name|newSchema
argument_list|(
name|schemas
operator|.
name|toArray
argument_list|(
operator|new
name|Source
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schema
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
specifier|public
name|Resource
name|getConfigToMonitor
parameter_list|()
block|{
return|return
name|configToMonitor
return|;
block|}
specifier|public
name|long
name|getCheckPeriod
parameter_list|()
block|{
return|return
name|checkPeriod
return|;
block|}
specifier|public
name|void
name|setCheckPeriod
parameter_list|(
name|long
name|checkPeriod
parameter_list|)
block|{
name|this
operator|.
name|checkPeriod
operator|=
name|checkPeriod
expr_stmt|;
block|}
specifier|static
specifier|public
class|class
name|PropertiesPlaceHolderUtil
block|{
specifier|static
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$\\{([^\\}]+)\\}"
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|properties
decl_stmt|;
specifier|public
name|PropertiesPlaceHolderUtil
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|void
name|filter
parameter_list|(
name|Properties
name|toFilter
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|toFilter
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|val
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|newVal
init|=
name|filter
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|val
operator|.
name|equals
argument_list|(
name|newVal
argument_list|)
condition|)
block|{
name|toFilter
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|filter
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|int
name|start
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|find
argument_list|(
name|start
argument_list|)
condition|)
block|{
break|break;
block|}
name|String
name|group
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|property
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|str
operator|=
name|matcher
operator|.
name|replaceFirst
argument_list|(
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
operator|=
name|matcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|replaceBytePostfix
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|static
name|Pattern
index|[]
name|byteMatchers
init|=
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*k(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*m(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
block|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\s*(\\d+)\\s*g(b)?\\s*$"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
block|}
decl_stmt|;
comment|// xbean can Xb, Xkb, Xmb, Xg etc
specifier|private
name|String
name|replaceBytePostfix
parameter_list|(
name|String
name|str
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|byteMatchers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Matcher
name|matcher
init|=
name|byteMatchers
index|[
name|i
index|]
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|long
name|value
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|i
condition|;
name|j
operator|++
control|)
block|{
name|value
operator|*=
literal|1024
expr_stmt|;
block|}
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"nfe on: "
operator|+
name|str
argument_list|,
name|ignored
argument_list|)
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
block|}
block|}
end_class

end_unit

