begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|rapid
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|journal
operator|.
name|RecordLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|journal
operator|.
name|active
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|JournalQueueAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|MapContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|Synchronization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TransactionTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A MessageStore that uses a Journal to store it's messages.  *   * @version $Revision: 1.14 $  */
end_comment

begin_class
specifier|public
class|class
name|RapidMessageStore
implements|implements
name|MessageStore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RapidMessageStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|RapidPersistenceAdapter
name|peristenceAdapter
decl_stmt|;
specifier|protected
specifier|final
name|RapidTransactionStore
name|transactionStore
decl_stmt|;
specifier|protected
specifier|final
name|MapContainer
name|messageContainer
decl_stmt|;
specifier|protected
specifier|final
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|protected
specifier|final
name|TransactionTemplate
name|transactionTemplate
decl_stmt|;
comment|//    private LinkedHashMap messages = new LinkedHashMap();
comment|//    private ArrayList messageAcks = new ArrayList();
comment|//    /** A MessageStore that we can use to retrieve messages quickly. */
comment|//    private LinkedHashMap cpAddedMessageIds;
specifier|protected
name|RecordLocation
name|lastLocation
decl_stmt|;
specifier|protected
name|HashSet
name|inFlightTxLocations
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
specifier|public
name|RapidMessageStore
parameter_list|(
name|RapidPersistenceAdapter
name|adapter
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|MapContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|peristenceAdapter
operator|=
name|adapter
expr_stmt|;
name|this
operator|.
name|transactionStore
operator|=
name|adapter
operator|.
name|getTransactionStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|messageContainer
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|transactionTemplate
operator|=
operator|new
name|TransactionTemplate
argument_list|(
name|adapter
argument_list|,
operator|new
name|ConnectionContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Not synchronized since the Journal has better throughput if you increase      * the number of concurrent writes that it is doing.      */
specifier|public
name|void
name|addMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MessageId
name|id
init|=
name|message
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|debug
init|=
name|log
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
specifier|final
name|RecordLocation
name|location
init|=
name|peristenceAdapter
operator|.
name|writeCommand
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|isResponseRequired
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RapidMessageReference
name|md
init|=
operator|new
name|RapidMessageReference
argument_list|(
name|message
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Journalled message add for: "
operator|+
name|id
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Journalled transacted message add for: "
operator|+
name|id
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|inFlightTxLocations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|transactionStore
operator|.
name|addMessage
argument_list|(
name|this
argument_list|,
name|message
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Transacted message add commit for: "
operator|+
name|id
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|RapidMessageStore
operator|.
name|this
init|)
block|{
name|inFlightTxLocations
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Transacted message add rollback for: "
operator|+
name|id
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|RapidMessageStore
operator|.
name|this
init|)
block|{
name|inFlightTxLocations
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addMessage
parameter_list|(
specifier|final
name|RapidMessageReference
name|messageReference
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|lastLocation
operator|=
name|messageReference
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|MessageId
name|id
init|=
name|messageReference
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
name|messageContainer
operator|.
name|put
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|protected
name|String
name|toString
parameter_list|(
name|RecordLocation
name|location
parameter_list|)
block|{
name|Location
name|l
init|=
operator|(
name|Location
operator|)
name|location
decl_stmt|;
return|return
name|l
operator|.
name|getLogFileId
argument_list|()
operator|+
literal|":"
operator|+
name|l
operator|.
name|getLogFileOffset
argument_list|()
return|;
block|}
specifier|static
specifier|protected
name|RecordLocation
name|toRecordLocation
parameter_list|(
name|String
name|t
parameter_list|)
block|{
name|String
index|[]
name|strings
init|=
name|t
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|strings
operator|.
name|length
operator|!=
literal|2
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid location: "
operator|+
name|t
argument_list|)
throw|;
return|return
operator|new
name|Location
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|strings
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|strings
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|replayAddMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|,
name|RecordLocation
name|location
parameter_list|)
block|{
try|try
block|{
name|RapidMessageReference
name|messageReference
init|=
operator|new
name|RapidMessageReference
argument_list|(
name|message
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|messageContainer
operator|.
name|put
argument_list|(
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not replay add for message '"
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|+
literal|"'.  Message may have already been added. reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      */
specifier|public
name|void
name|removeMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
specifier|final
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|debug
init|=
name|log
operator|.
name|isDebugEnabled
argument_list|()
decl_stmt|;
name|JournalQueueAck
name|remove
init|=
operator|new
name|JournalQueueAck
argument_list|()
decl_stmt|;
name|remove
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|remove
operator|.
name|setMessageAck
argument_list|(
name|ack
argument_list|)
expr_stmt|;
specifier|final
name|RecordLocation
name|location
init|=
name|peristenceAdapter
operator|.
name|writeCommand
argument_list|(
name|remove
argument_list|,
name|ack
operator|.
name|isResponseRequired
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|isInTransaction
argument_list|()
condition|)
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Journalled message remove for: "
operator|+
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
name|removeMessage
argument_list|(
name|ack
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Journalled transacted message remove for: "
operator|+
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|inFlightTxLocations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|transactionStore
operator|.
name|removeMessage
argument_list|(
name|this
argument_list|,
name|ack
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|context
operator|.
name|getTransaction
argument_list|()
operator|.
name|addSynchronization
argument_list|(
operator|new
name|Synchronization
argument_list|()
block|{
specifier|public
name|void
name|afterCommit
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Transacted message remove commit for: "
operator|+
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|RapidMessageStore
operator|.
name|this
init|)
block|{
name|inFlightTxLocations
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|removeMessage
argument_list|(
name|ack
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|afterRollback
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|debug
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"Transacted message remove rollback for: "
operator|+
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|+
literal|", at: "
operator|+
name|location
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|RapidMessageStore
operator|.
name|this
init|)
block|{
name|inFlightTxLocations
operator|.
name|remove
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeMessage
parameter_list|(
specifier|final
name|MessageAck
name|ack
parameter_list|,
specifier|final
name|RecordLocation
name|location
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|lastLocation
operator|=
name|location
expr_stmt|;
name|MessageId
name|id
init|=
name|ack
operator|.
name|getLastMessageId
argument_list|()
decl_stmt|;
name|messageContainer
operator|.
name|remove
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|replayRemoveMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
block|{
try|try
block|{
name|MessageId
name|id
init|=
name|ack
operator|.
name|getLastMessageId
argument_list|()
decl_stmt|;
name|messageContainer
operator|.
name|remove
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not replay acknowledge for message '"
operator|+
name|ack
operator|.
name|getLastMessageId
argument_list|()
operator|+
literal|"'.  Message may have already been acknowledged. reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *       */
specifier|public
name|Message
name|getMessage
parameter_list|(
name|MessageId
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|RapidMessageReference
name|messageReference
init|=
operator|(
name|RapidMessageReference
operator|)
name|messageContainer
operator|.
name|get
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageReference
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Message
operator|)
name|peristenceAdapter
operator|.
name|readCommand
argument_list|(
name|messageReference
operator|.
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Replays the checkpointStore first as those messages are the oldest ones,      * then messages are replayed from the transaction log and then the cache is      * updated.      *       * @param listener      * @throws Exception       */
specifier|public
name|void
name|recover
parameter_list|(
specifier|final
name|MessageRecoveryListener
name|listener
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|messageContainer
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RapidMessageReference
name|messageReference
init|=
operator|(
name|RapidMessageReference
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Message
name|m
init|=
operator|(
name|Message
operator|)
name|peristenceAdapter
operator|.
name|readCommand
argument_list|(
name|messageReference
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|listener
operator|.
name|recoverMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|/**      * @see org.apache.activemq.store.MessageStore#removeAllMessages(ConnectionContext)      */
specifier|public
name|void
name|removeAllMessages
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|messageContainer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ActiveMQDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|void
name|addMessageReference
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageId
name|messageId
parameter_list|,
name|long
name|expirationTime
parameter_list|,
name|String
name|messageRef
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The journal does not support message references."
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getMessageReference
parameter_list|(
name|MessageId
name|identity
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The journal does not support message references."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|setUsageManager
parameter_list|(
name|UsageManager
name|usageManager
parameter_list|)
block|{     }
comment|/**      * @return      * @throws IOException      */
specifier|public
name|RecordLocation
name|checkpoint
parameter_list|()
throws|throws
name|IOException
block|{
name|ArrayList
name|cpActiveJournalLocations
decl_stmt|;
comment|// swap out the message hash maps..
synchronized|synchronized
init|(
name|this
init|)
block|{
name|cpActiveJournalLocations
operator|=
operator|new
name|ArrayList
argument_list|(
name|inFlightTxLocations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cpActiveJournalLocations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|cpActiveJournalLocations
argument_list|)
expr_stmt|;
return|return
operator|(
name|RecordLocation
operator|)
name|cpActiveJournalLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|lastLocation
return|;
block|}
block|}
block|}
end_class

end_unit

