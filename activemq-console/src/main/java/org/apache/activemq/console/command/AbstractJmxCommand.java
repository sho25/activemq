begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|sun
operator|.
name|management
operator|.
name|ConnectorAddressLink
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractJmxCommand
extends|extends
name|AbstractCommand
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_JMX_URL
init|=
literal|"service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi"
decl_stmt|;
specifier|private
name|JMXServiceURL
name|jmxServiceUrl
decl_stmt|;
specifier|private
name|String
name|jmxUser
decl_stmt|;
specifier|private
name|String
name|jmxPassword
decl_stmt|;
specifier|private
name|boolean
name|jmxUseLocal
decl_stmt|;
specifier|private
name|JMXConnector
name|jmxConnector
decl_stmt|;
specifier|private
name|MBeanServerConnection
name|jmxConnection
decl_stmt|;
comment|/**      * Get the current specified JMX service url.      * @return JMX service url      */
specifier|protected
name|JMXServiceURL
name|getJmxServiceUrl
parameter_list|()
block|{
return|return
name|jmxServiceUrl
return|;
block|}
specifier|public
specifier|static
name|String
name|getJVM
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vm.specification.vendor"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isSunJVM
parameter_list|()
block|{
return|return
name|getJVM
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Sun Microsystems Inc."
argument_list|)
return|;
block|}
comment|/**      * Get the current JMX service url being used, or create a default one if no JMX service url has been specified.      * @return JMX service url      * @throws MalformedURLException      */
specifier|protected
name|JMXServiceURL
name|useJmxServiceUrl
parameter_list|()
throws|throws
name|MalformedURLException
block|{
if|if
condition|(
name|getJmxServiceUrl
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|jmxUrl
init|=
name|DEFAULT_JMX_URL
decl_stmt|;
name|int
name|connectingPid
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|isSunJVM
argument_list|()
condition|)
block|{
try|try
block|{
comment|// Try to attach to the local process
comment|// Classes are all dynamically loaded, since they are specific to Sun VM
comment|// if it fails for any reason default jmx url will be used
comment|// tools.jar are not always included used by default
comment|// class loader, so we will try to use custom loader that will
comment|// try to load tools.jar
name|String
name|javaHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
name|String
name|tools
init|=
name|javaHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|".."
operator|+
name|File
operator|.
name|separator
operator|+
literal|"lib"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"tools.jar"
decl_stmt|;
name|URLClassLoader
name|loader
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
operator|new
name|File
argument_list|(
name|tools
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
argument_list|)
decl_stmt|;
comment|// load all classes dynamically so we can compile on non-Sun VMs
comment|//MonitoredHost host = MonitoredHost.getMonitoredHost(new HostIdentifier((String)null));
name|Class
name|monitoredHostClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.jvmstat.monitor.MonitoredHost"
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Method
name|getMonitoredHostMethod
init|=
name|monitoredHostClass
operator|.
name|getMethod
argument_list|(
literal|"getMonitoredHost"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|host
init|=
name|getMonitoredHostMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
comment|//Set vms = host.activeVms();
name|Method
name|activeVmsMethod
init|=
name|host
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"activeVms"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
name|vms
init|=
operator|(
name|Set
operator|)
name|activeVmsMethod
operator|.
name|invoke
argument_list|(
name|host
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|vmid
range|:
name|vms
control|)
block|{
name|int
name|pid
init|=
operator|(
operator|(
name|Integer
operator|)
name|vmid
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|//MonitoredVm mvm = host.getMonitoredVm(new VmIdentifier(vmid.toString()));
name|Class
name|vmIdentifierClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.jvmstat.monitor.VmIdentifier"
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Constructor
name|vmIdentifierConstructor
init|=
name|vmIdentifierClass
operator|.
name|getConstructor
argument_list|(
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Object
name|vmIdentifier
init|=
name|vmIdentifierConstructor
operator|.
name|newInstance
argument_list|(
name|vmid
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|getMonitoredVmMethod
init|=
name|host
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getMonitoredVm"
argument_list|,
name|vmIdentifierClass
argument_list|)
decl_stmt|;
name|Object
name|mvm
init|=
name|getMonitoredVmMethod
operator|.
name|invoke
argument_list|(
name|host
argument_list|,
name|vmIdentifier
argument_list|)
decl_stmt|;
comment|//String name =  MonitoredVmUtil.commandLine(mvm);
name|Class
name|monitoredVmUtilClass
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.jvmstat.monitor.MonitoredVmUtil"
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|Method
name|commandLineMethod
init|=
name|monitoredVmUtilClass
operator|.
name|getMethod
argument_list|(
literal|"commandLine"
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
literal|"sun.jvmstat.monitor.MonitoredVm"
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
operator|(
name|String
operator|)
name|commandLineMethod
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|mvm
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"run.jar start"
argument_list|)
condition|)
block|{
name|connectingPid
operator|=
name|pid
expr_stmt|;
name|jmxUrl
operator|=
name|ConnectorAddressLink
operator|.
name|importFrom
argument_list|(
name|pid
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
block|}
if|if
condition|(
name|connectingPid
operator|!=
operator|-
literal|1
condition|)
block|{
name|context
operator|.
name|print
argument_list|(
literal|"Connecting to pid: "
operator|+
name|connectingPid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|print
argument_list|(
literal|"Connecting to JMX URL: "
operator|+
name|jmxUrl
argument_list|)
expr_stmt|;
block|}
name|setJmxServiceUrl
argument_list|(
name|jmxUrl
argument_list|)
expr_stmt|;
block|}
return|return
name|getJmxServiceUrl
argument_list|()
return|;
block|}
comment|/**      * Sets the JMX service url to use.      * @param jmxServiceUrl - new JMX service url to use      */
specifier|protected
name|void
name|setJmxServiceUrl
parameter_list|(
name|JMXServiceURL
name|jmxServiceUrl
parameter_list|)
block|{
name|this
operator|.
name|jmxServiceUrl
operator|=
name|jmxServiceUrl
expr_stmt|;
block|}
comment|/**      * Sets the JMX service url to use.      * @param jmxServiceUrl - new JMX service url to use      * @throws MalformedURLException      */
specifier|protected
name|void
name|setJmxServiceUrl
parameter_list|(
name|String
name|jmxServiceUrl
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|setJmxServiceUrl
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|jmxServiceUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the JMX user name to be used when authenticating.      * @return the JMX user name      */
specifier|public
name|String
name|getJmxUser
parameter_list|()
block|{
return|return
name|jmxUser
return|;
block|}
comment|/**      * Sets the JMS user name to use      * @param jmxUser - the jmx       */
specifier|public
name|void
name|setJmxUser
parameter_list|(
name|String
name|jmxUser
parameter_list|)
block|{
name|this
operator|.
name|jmxUser
operator|=
name|jmxUser
expr_stmt|;
block|}
comment|/**      * Get the password used when authenticating      * @return the password used for JMX authentication      */
specifier|public
name|String
name|getJmxPassword
parameter_list|()
block|{
return|return
name|jmxPassword
return|;
block|}
comment|/**      * Sets the password to use when authenticating      * @param jmxPassword - the password used for JMX authentication      */
specifier|public
name|void
name|setJmxPassword
parameter_list|(
name|String
name|jmxPassword
parameter_list|)
block|{
name|this
operator|.
name|jmxPassword
operator|=
name|jmxPassword
expr_stmt|;
block|}
comment|/**      * Get whether the default mbean server for this JVM should be used instead of the jmx url      * @return<code>true</code> if the mbean server from this JVM should be used,<code>false<code> if the jmx url should be used      */
specifier|public
name|boolean
name|isJmxUseLocal
parameter_list|()
block|{
return|return
name|jmxUseLocal
return|;
block|}
comment|/**      * Sets whether the the default mbean server for this JVM should be used instead of the jmx url      * @param jmxUseLocal -<code>true</code> if the mbean server from this JVM should be used,<code>false<code> if the jmx url should be used      */
specifier|public
name|void
name|setJmxUseLocal
parameter_list|(
name|boolean
name|jmxUseLocal
parameter_list|)
block|{
name|this
operator|.
name|jmxUseLocal
operator|=
name|jmxUseLocal
expr_stmt|;
block|}
comment|/**      * Create a JMX connector using the current specified JMX service url. If there is an existing connection,      * it tries to reuse this connection.      * @return created JMX connector      * @throws IOException      */
specifier|private
name|JMXConnector
name|createJmxConnector
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Reuse the previous connection
if|if
condition|(
name|jmxConnector
operator|!=
literal|null
condition|)
block|{
name|jmxConnector
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|jmxConnector
return|;
block|}
comment|// Create a new JMX connector
if|if
condition|(
name|jmxUser
operator|!=
literal|null
operator|&&
name|jmxPassword
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|JMXConnector
operator|.
name|CREDENTIALS
argument_list|,
operator|new
name|String
index|[]
block|{
name|jmxUser
block|,
name|jmxPassword
block|}
argument_list|)
expr_stmt|;
name|jmxConnector
operator|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|useJmxServiceUrl
argument_list|()
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jmxConnector
operator|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|useJmxServiceUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|jmxConnector
return|;
block|}
comment|/**      * Close the current JMX connector      */
specifier|protected
name|void
name|closeJmxConnection
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|jmxConnector
operator|!=
literal|null
condition|)
block|{
name|jmxConnector
operator|.
name|close
argument_list|()
expr_stmt|;
name|jmxConnector
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
block|}
specifier|protected
name|MBeanServerConnection
name|createJmxConnection
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|jmxConnection
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|isJmxUseLocal
argument_list|()
condition|)
block|{
name|jmxConnection
operator|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jmxConnection
operator|=
name|createJmxConnector
argument_list|()
operator|.
name|getMBeanServerConnection
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|jmxConnection
return|;
block|}
comment|/**      * Handle the --jmxurl option.      * @param token - option token to handle      * @param tokens - succeeding command arguments      * @throws Exception      */
specifier|protected
name|void
name|handleOption
parameter_list|(
name|String
name|token
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Try to handle the options first
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--jmxurl"
argument_list|)
condition|)
block|{
comment|// If no jmx url specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|context
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JMX URL not specified."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If jmx url already specified
if|if
condition|(
name|getJmxServiceUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Multiple JMX URL cannot be specified."
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|String
name|strJmxUrl
init|=
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
try|try
block|{
name|this
operator|.
name|setJmxServiceUrl
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|strJmxUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|context
operator|.
name|printException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--pid"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSunJVM
argument_list|()
condition|)
block|{
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|context
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pid not specified"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|pid
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|print
argument_list|(
literal|"Connecting to pid: "
operator|+
name|pid
argument_list|)
expr_stmt|;
name|String
name|jmxUrl
init|=
name|ConnectorAddressLink
operator|.
name|importFrom
argument_list|(
name|pid
argument_list|)
decl_stmt|;
comment|// If jmx url already specified
if|if
condition|(
name|getJmxServiceUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JMX URL already specified."
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|setJmxServiceUrl
argument_list|(
operator|new
name|JMXServiceURL
argument_list|(
name|jmxUrl
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
name|context
operator|.
name|printException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|context
operator|.
name|printInfo
argument_list|(
literal|"--pid option is not available for this VM, using default JMX url"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--jmxuser"
argument_list|)
condition|)
block|{
comment|// If no jmx user specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|context
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JMX user not specified."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setJmxUser
argument_list|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--jmxpassword"
argument_list|)
condition|)
block|{
comment|// If no jmx password specified, or next token is a new option
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|context
operator|.
name|printException
argument_list|(
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JMX password not specified."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|setJmxPassword
argument_list|(
operator|(
name|String
operator|)
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equals
argument_list|(
literal|"--jmxlocal"
argument_list|)
condition|)
block|{
name|this
operator|.
name|setJmxUseLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Let the super class handle the option
name|super
operator|.
name|handleOption
argument_list|(
name|token
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|tokens
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|super
operator|.
name|execute
argument_list|(
name|tokens
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeJmxConnection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

