begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|scheduler
operator|.
name|legacy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|data
operator|.
name|KahaAddScheduledJobCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|scheduler
operator|.
name|JobSchedulerStoreImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used to upgrade a Legacy Job Scheduler store to the latest version this class  * loads a found legacy scheduler store and generates new add commands for all  * jobs currently in the store.  */
end_comment

begin_class
specifier|public
class|class
name|LegacyStoreReplayer
block|{
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LegacyStoreReplayer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LegacyJobSchedulerStoreImpl
name|store
decl_stmt|;
specifier|private
specifier|final
name|File
name|legacyStoreDirectory
decl_stmt|;
comment|/**      * Creates a new Legacy Store Replayer with the given target store      * @param targetStore      * @param directory      */
specifier|public
name|LegacyStoreReplayer
parameter_list|(
name|File
name|directory
parameter_list|)
block|{
name|this
operator|.
name|legacyStoreDirectory
operator|=
name|directory
expr_stmt|;
block|}
comment|/**      * Loads the legacy store and prepares it for replay into a newer Store instance.      *      * @throws IOException if an error occurs while reading in the legacy store.      */
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|store
operator|=
operator|new
name|LegacyJobSchedulerStoreImpl
argument_list|()
expr_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
name|legacyStoreDirectory
argument_list|)
expr_stmt|;
name|store
operator|.
name|setFailIfDatabaseIsLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Legacy store load failed: "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Legacy store load failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Unloads a previously loaded legacy store to release any resources associated with it.      *      * Once a store is unloaded it cannot be replayed again until it has been reloaded.      * @throws IOException      */
specifier|public
name|void
name|unload
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Legacy store unload failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|store
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Performs a replay of scheduled jobs into the target JobSchedulerStore.      *      * @param targetStore      *      The JobSchedulerStore that will receive the replay events from the legacy store.      *      * @throws IOException if an error occurs during replay of the legacy store.      */
specifier|public
name|void
name|startReplay
parameter_list|(
name|JobSchedulerStoreImpl
name|targetStore
parameter_list|)
throws|throws
name|IOException
block|{
name|checkLoaded
argument_list|()
expr_stmt|;
if|if
condition|(
name|targetStore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot replay to a null store"
argument_list|)
throw|;
block|}
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|schedulers
init|=
name|store
operator|.
name|getJobSchedulerNames
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|schedulers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|schedulers
control|)
block|{
name|LegacyJobSchedulerImpl
name|scheduler
init|=
name|store
operator|.
name|getJobScheduler
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replay of legacy store {} starting."
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|replayScheduler
argument_list|(
name|scheduler
argument_list|,
name|targetStore
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Replay of legacy store complate."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed during replay of legacy store: "
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed during replay of legacy store: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|void
name|replayScheduler
parameter_list|(
name|LegacyJobSchedulerImpl
name|legacy
parameter_list|,
name|JobSchedulerStoreImpl
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|LegacyJobImpl
argument_list|>
name|jobs
init|=
name|legacy
operator|.
name|getAllJobs
argument_list|()
decl_stmt|;
name|String
name|schedulerName
init|=
name|legacy
operator|.
name|getName
argument_list|()
decl_stmt|;
for|for
control|(
name|LegacyJobImpl
name|job
range|:
name|jobs
control|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Storing job from legacy store to new store: {}"
argument_list|,
name|job
argument_list|)
expr_stmt|;
name|KahaAddScheduledJobCommand
name|newJob
init|=
operator|new
name|KahaAddScheduledJobCommand
argument_list|()
decl_stmt|;
name|newJob
operator|.
name|setScheduler
argument_list|(
name|schedulerName
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setJobId
argument_list|(
name|job
operator|.
name|getJobId
argument_list|()
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setStartTime
argument_list|(
name|job
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setCronEntry
argument_list|(
name|job
operator|.
name|getCronEntry
argument_list|()
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setDelay
argument_list|(
name|job
operator|.
name|getDelay
argument_list|()
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setPeriod
argument_list|(
name|job
operator|.
name|getPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setRepeat
argument_list|(
name|job
operator|.
name|getRepeat
argument_list|()
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setNextExecutionTime
argument_list|(
name|job
operator|.
name|getNextExecutionTime
argument_list|()
argument_list|)
expr_stmt|;
name|newJob
operator|.
name|setPayload
argument_list|(
name|job
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
name|target
operator|.
name|store
argument_list|(
name|newJob
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|void
name|checkLoaded
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|store
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot replay until legacy store is loaded."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

