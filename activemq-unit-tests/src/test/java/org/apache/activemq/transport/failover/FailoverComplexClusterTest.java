begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|log
operator|.
name|Log
import|;
end_import

begin_comment
comment|/**  * Complex cluster test that will exercise the dynamic failover capabilities of  * a network of brokers. Using a networking of 3 brokers where the 3rd broker is  * removed and then added back in it is expected in each test that the number of  * connections on the client should start with 3, then have two after the 3rd  * broker is removed and then show 3 after the 3rd broker is reintroduced.  */
end_comment

begin_class
specifier|public
class|class
name|FailoverComplexClusterTest
extends|extends
name|FailoverClusterTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A_CLIENT_TC_ADDRESS
init|=
literal|"tcp://127.0.0.1:61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B_CLIENT_TC_ADDRESS
init|=
literal|"tcp://127.0.0.1:61617"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_C_CLIENT_TC_ADDRESS
init|=
literal|"tcp://127.0.0.1:61618"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A_NOB_TC_ADDRESS
init|=
literal|"tcp://127.0.0.1:61626"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B_NOB_TC_ADDRESS
init|=
literal|"tcp://127.0.0.1:61627"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_C_NOB_TC_ADDRESS
init|=
literal|"tcp://127.0.0.1:61628"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_A_NAME
init|=
literal|"BROKERA"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_B_NAME
init|=
literal|"BROKERB"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_C_NAME
init|=
literal|"BROKERC"
decl_stmt|;
comment|/**      * Basic dynamic failover 3 broker test      *      * @throws Exception      */
specifier|public
name|void
name|testThreeBrokerClusterSingleConnectorBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|initSingleTcBroker
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|createClients
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|runTests
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests a 3 broker configuration to ensure that the backup is random and      * supported in a cluster. useExponentialBackOff is set to false and      * maxReconnectAttempts is set to 1 to move through the list quickly for      * this test.      *      * @throws Exception      */
specifier|public
name|void
name|testThreeBrokerClusterSingleConnectorBackupFailoverConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|initSingleTcBroker
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")?backup=true&backupPoolSize=2&useExponentialBackOff=false&initialReconnectDelay=500"
argument_list|)
expr_stmt|;
name|createClients
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|runTests
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests a 3 broker cluster that passes in connection params on the      * transport connector. Prior versions of AMQ passed the TC connection      * params to the client and this should not happen. The chosen param is not      * compatible with the client and will throw an error if used.      *      * @throws Exception      */
specifier|public
name|void
name|testThreeBrokerClusterSingleConnectorWithParams
parameter_list|()
throws|throws
name|Exception
block|{
name|initSingleTcBroker
argument_list|(
literal|"?transport.closeAsync=false"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|createClients
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|runTests
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests a 3 broker cluster using a cluster filter of *      *      * @throws Exception      */
specifier|public
name|void
name|testThreeBrokerClusterWithClusterFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|initSingleTcBroker
argument_list|(
literal|"?transport.closeAsync=false"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|createClients
argument_list|()
expr_stmt|;
name|runTests
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|"*"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to verify that a broker with multiple transport connections only the      * one marked to update clients is propagate      *      * @throws Exception      */
specifier|public
name|void
name|testThreeBrokerClusterMultipleConnectorBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|initMultiTcCluster
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|createClients
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|runTests
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to verify the reintroduction of the A Broker      *      * @throws Exception      */
specifier|public
name|void
name|testOriginalBrokerRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|initSingleTcBroker
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|createClients
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertClientsConnectedToThreeBrokers
argument_list|()
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|removeBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertClientsConnectedToTwoBrokers
argument_list|()
expr_stmt|;
name|createBrokerA
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertClientsConnectedToThreeBrokers
argument_list|()
expr_stmt|;
block|}
comment|/**      * Test to ensure clients are evenly to all available brokers in the      * network.      *      * @throws Exception      */
specifier|public
name|void
name|testThreeBrokerClusterClientDistributions
parameter_list|()
throws|throws
name|Exception
block|{
name|initSingleTcBroker
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false&initialReconnectDelay=500"
argument_list|)
expr_stmt|;
name|createClients
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|runClientDistributionTests
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test to verify that clients are distributed with no less than 20% of the      * clients on any one broker.      *      * @throws Exception      */
specifier|public
name|void
name|testThreeBrokerClusterDestinationFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|initSingleTcBroker
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|setClientUrl
argument_list|(
literal|"failover://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|","
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|createClients
argument_list|()
expr_stmt|;
name|runTests
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Queue.TEST.FOO.>"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFailOverWithUpdateClientsOnRemove
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Broker A
name|addBroker
argument_list|(
name|BROKER_A_NAME
argument_list|,
name|createBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|TransportConnector
name|connectorA
init|=
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|addConnector
argument_list|(
name|BROKER_A_CLIENT_TC_ADDRESS
argument_list|)
decl_stmt|;
name|connectorA
operator|.
name|setName
argument_list|(
literal|"openwire"
argument_list|)
expr_stmt|;
name|connectorA
operator|.
name|setRebalanceClusterClients
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectorA
operator|.
name|setUpdateClusterClients
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectorA
operator|.
name|setUpdateClusterClientsOnRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//If set to false the test succeeds.
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|,
literal|"A_2_B_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Broker B
name|addBroker
argument_list|(
name|BROKER_B_NAME
argument_list|,
name|createBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|TransportConnector
name|connectorB
init|=
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
operator|.
name|addConnector
argument_list|(
name|BROKER_B_CLIENT_TC_ADDRESS
argument_list|)
decl_stmt|;
name|connectorB
operator|.
name|setName
argument_list|(
literal|"openwire"
argument_list|)
expr_stmt|;
name|connectorB
operator|.
name|setRebalanceClusterClients
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectorB
operator|.
name|setUpdateClusterClients
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectorB
operator|.
name|setUpdateClusterClientsOnRemove
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//If set to false the test succeeds.
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|,
literal|"B_2_A_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// create client connecting only to A. It should receive broker B address whet it connects to A.
name|setClientUrl
argument_list|(
literal|"failover:("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=true"
argument_list|)
expr_stmt|;
name|createClients
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// We stop broker A.
name|Log
operator|.
name|info
argument_list|(
literal|"Stopping broker A whose address is: {}"
argument_list|,
name|BROKER_A_CLIENT_TC_ADDRESS
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Client should failover to B.
name|assertAllConnectedTo
argument_list|(
name|BROKER_B_CLIENT_TC_ADDRESS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs a 3 Broker dynamic failover test:<br/>      *<ul>      *<li>asserts clients are distributed across all 3 brokers</li>      *<li>asserts clients are distributed across 2 brokers after removing the 3rd</li>      *<li>asserts clients are distributed across all 3 brokers after      * reintroducing the 3rd broker</li>      *</ul>      *      * @param multi      * @param tcParams      * @param clusterFilter      * @param destinationFilter      * @throws Exception      * @throws InterruptedException      */
specifier|private
name|void
name|runTests
parameter_list|(
name|boolean
name|multi
parameter_list|,
name|String
name|tcParams
parameter_list|,
name|String
name|clusterFilter
parameter_list|,
name|String
name|destinationFilter
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|assertClientsConnectedToThreeBrokers
argument_list|()
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|removeBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertClientsConnectedToTwoBrokers
argument_list|()
expr_stmt|;
name|createBrokerC
argument_list|(
name|multi
argument_list|,
name|tcParams
argument_list|,
name|clusterFilter
argument_list|,
name|destinationFilter
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertClientsConnectedToThreeBrokers
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param multi      * @param tcParams      * @param clusterFilter      * @param destinationFilter      * @throws Exception      * @throws InterruptedException      */
specifier|private
name|void
name|runClientDistributionTests
parameter_list|(
name|boolean
name|multi
parameter_list|,
name|String
name|tcParams
parameter_list|,
name|String
name|clusterFilter
parameter_list|,
name|String
name|destinationFilter
parameter_list|)
throws|throws
name|Exception
throws|,
name|InterruptedException
block|{
name|assertClientsConnectedToThreeBrokers
argument_list|()
expr_stmt|;
name|assertClientsConnectionsEvenlyDistributed
argument_list|(
literal|.25
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|removeBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertClientsConnectedToTwoBrokers
argument_list|()
expr_stmt|;
name|assertClientsConnectionsEvenlyDistributed
argument_list|(
literal|.35
argument_list|)
expr_stmt|;
name|createBrokerC
argument_list|(
name|multi
argument_list|,
name|tcParams
argument_list|,
name|clusterFilter
argument_list|,
name|destinationFilter
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertClientsConnectedToThreeBrokers
argument_list|()
expr_stmt|;
name|assertClientsConnectionsEvenlyDistributed
argument_list|(
literal|.20
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{     }
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|shutdownClients
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|destroyBrokerCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initSingleTcBroker
parameter_list|(
name|String
name|params
parameter_list|,
name|String
name|clusterFilter
parameter_list|,
name|String
name|destinationFilter
parameter_list|)
throws|throws
name|Exception
block|{
name|createBrokerA
argument_list|(
literal|false
argument_list|,
name|params
argument_list|,
name|clusterFilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createBrokerB
argument_list|(
literal|false
argument_list|,
name|params
argument_list|,
name|clusterFilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createBrokerC
argument_list|(
literal|false
argument_list|,
name|params
argument_list|,
name|clusterFilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initMultiTcCluster
parameter_list|(
name|String
name|params
parameter_list|,
name|String
name|clusterFilter
parameter_list|)
throws|throws
name|Exception
block|{
name|createBrokerA
argument_list|(
literal|true
argument_list|,
name|params
argument_list|,
name|clusterFilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createBrokerB
argument_list|(
literal|true
argument_list|,
name|params
argument_list|,
name|clusterFilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|createBrokerC
argument_list|(
literal|true
argument_list|,
name|params
argument_list|,
name|clusterFilter
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createBrokerA
parameter_list|(
name|boolean
name|multi
parameter_list|,
name|String
name|params
parameter_list|,
name|String
name|clusterFilter
parameter_list|,
name|String
name|destinationFilter
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tcParams
init|=
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|params
decl_stmt|;
if|if
condition|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addBroker
argument_list|(
name|BROKER_A_NAME
argument_list|,
name|createBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addTransportConnector
argument_list|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|,
literal|"openwire"
argument_list|,
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
name|tcParams
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|multi
condition|)
block|{
name|addTransportConnector
argument_list|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|,
literal|"network"
argument_list|,
name|BROKER_A_NOB_TC_ADDRESS
operator|+
name|tcParams
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|,
literal|"A_2_B_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_B_NOB_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
name|clusterFilter
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|,
literal|"A_2_C_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_C_NOB_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|,
literal|"A_2_B_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
name|clusterFilter
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
argument_list|,
literal|"A_2_C_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_C_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|getBroker
argument_list|(
name|BROKER_A_NAME
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createBrokerB
parameter_list|(
name|boolean
name|multi
parameter_list|,
name|String
name|params
parameter_list|,
name|String
name|clusterFilter
parameter_list|,
name|String
name|destinationFilter
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tcParams
init|=
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|params
decl_stmt|;
if|if
condition|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addBroker
argument_list|(
name|BROKER_B_NAME
argument_list|,
name|createBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addTransportConnector
argument_list|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|,
literal|"openwire"
argument_list|,
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
name|tcParams
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|multi
condition|)
block|{
name|addTransportConnector
argument_list|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|,
literal|"network"
argument_list|,
name|BROKER_B_NOB_TC_ADDRESS
operator|+
name|tcParams
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|,
literal|"B_2_A_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_A_NOB_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
name|clusterFilter
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|,
literal|"B_2_C_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_C_NOB_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|,
literal|"B_2_A_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
name|clusterFilter
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
argument_list|,
literal|"B_2_C_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_C_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|getBroker
argument_list|(
name|BROKER_B_NAME
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createBrokerC
parameter_list|(
name|boolean
name|multi
parameter_list|,
name|String
name|params
parameter_list|,
name|String
name|clusterFilter
parameter_list|,
name|String
name|destinationFilter
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|tcParams
init|=
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|params
decl_stmt|;
if|if
condition|(
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|addBroker
argument_list|(
name|BROKER_C_NAME
argument_list|,
name|createBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addTransportConnector
argument_list|(
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
argument_list|,
literal|"openwire"
argument_list|,
name|BROKER_C_CLIENT_TC_ADDRESS
operator|+
name|tcParams
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|multi
condition|)
block|{
name|addTransportConnector
argument_list|(
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
argument_list|,
literal|"network"
argument_list|,
name|BROKER_C_NOB_TC_ADDRESS
operator|+
name|tcParams
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
argument_list|,
literal|"C_2_A_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_A_NOB_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
name|clusterFilter
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
argument_list|,
literal|"C_2_B_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_B_NOB_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
argument_list|,
literal|"C_2_A_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_A_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
name|clusterFilter
argument_list|)
expr_stmt|;
name|addNetworkBridge
argument_list|(
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
argument_list|,
literal|"C_2_B_Bridge"
argument_list|,
literal|"static://("
operator|+
name|BROKER_B_CLIENT_TC_ADDRESS
operator|+
literal|")?useExponentialBackOff=false"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|getBroker
argument_list|(
name|BROKER_C_NAME
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

