begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TransactionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerMBeanSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|PersistenceAdapterViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|RecoveredXATransactionViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SharedDeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Used to simulate the recovery that occurs when a broker shuts down.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|XARecoveryBrokerTest
extends|extends
name|BrokerRestartTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XARecoveryBrokerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|boolean
name|prioritySupport
init|=
literal|true
decl_stmt|;
specifier|public
name|boolean
name|keepDurableSubsActive
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|testPreparedJmxView
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Prepare 4 message sends.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Prepare
name|connection
operator|.
name|send
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Response
name|response
init|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|DataArrayResponse
name|dar
init|=
operator|(
name|DataArrayResponse
operator|)
name|response
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// view prepared in kahadb view
if|if
condition|(
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|instanceof
name|KahaDBPersistenceAdapter
condition|)
block|{
name|PersistenceAdapterViewMBean
name|kahadbView
init|=
name|getProxyToPersistenceAdapter
argument_list|(
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|txFromView
init|=
name|kahadbView
operator|.
name|getTransactions
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Tx view fromm PA:"
operator|+
name|txFromView
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"xid with our dud format in transaction string "
operator|+
name|txFromView
argument_list|,
name|txFromView
operator|.
name|contains
argument_list|(
literal|"XID:[55,"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|response
operator|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|dar
operator|=
operator|(
name|DataArrayResponse
operator|)
name|response
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify XAResource scan loop
name|XAResource
name|transactionContextXAResource
init|=
operator|new
name|TransactionContext
argument_list|(
name|ActiveMQConnection
operator|.
name|makeConnection
argument_list|(
name|broker
operator|.
name|getVmConnectorURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|LinkedList
argument_list|<
name|Xid
argument_list|>
name|tracked
init|=
operator|new
name|LinkedList
argument_list|<
name|Xid
argument_list|>
argument_list|()
decl_stmt|;
name|Xid
index|[]
name|recoveryXids
init|=
name|transactionContextXAResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
decl_stmt|;
while|while
condition|(
name|recoveryXids
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|tracked
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|recoveryXids
argument_list|)
argument_list|)
expr_stmt|;
name|recoveryXids
operator|=
name|transactionContextXAResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"got 4 via scan loop"
argument_list|,
literal|4
argument_list|,
name|tracked
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// validate destination depth via jmx
name|DestinationViewMBean
name|destinationView
init|=
name|getProxyToDestination
argument_list|(
name|destinationList
argument_list|(
name|destination
argument_list|)
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"enqueue count does not see prepared"
argument_list|,
literal|0
argument_list|,
name|destinationView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|TransactionId
name|first
init|=
operator|(
name|TransactionId
operator|)
name|dar
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|int
name|commitCount
init|=
literal|0
decl_stmt|;
comment|// via jmx, force outcome
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|RecoveredXATransactionViewMBean
name|mbean
init|=
name|getProxyToPreparedTransactionViewMBean
argument_list|(
operator|(
name|TransactionId
operator|)
name|dar
operator|.
name|getData
argument_list|()
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|mbean
operator|.
name|heuristicCommit
argument_list|()
expr_stmt|;
name|commitCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|mbean
operator|.
name|heuristicRollback
argument_list|()
expr_stmt|;
block|}
block|}
comment|// verify all completed
name|response
operator|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|dar
operator|=
operator|(
name|DataArrayResponse
operator|)
name|response
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// verify messages available
name|assertEquals
argument_list|(
literal|"enqueue count reflects outcome"
argument_list|,
name|commitCount
argument_list|,
name|destinationView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify mbeans gone
try|try
block|{
name|RecoveredXATransactionViewMBean
name|gone
init|=
name|getProxyToPreparedTransactionViewMBean
argument_list|(
name|first
argument_list|)
decl_stmt|;
name|gone
operator|.
name|heuristicRollback
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Excepted not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|expectedNotfound
parameter_list|)
block|{         }
block|}
specifier|private
name|PersistenceAdapterViewMBean
name|getProxyToPersistenceAdapter
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|JMSException
block|{
return|return
operator|(
name|PersistenceAdapterViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|BrokerMBeanSupport
operator|.
name|createPersistenceAdapterName
argument_list|(
name|broker
operator|.
name|getBrokerObjectName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|,
name|PersistenceAdapterViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|RecoveredXATransactionViewMBean
name|getProxyToPreparedTransactionViewMBean
parameter_list|(
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|JMSException
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,transactionType=RecoveredXaTransaction,xid="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|xid
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RecoveredXATransactionViewMBean
name|proxy
init|=
operator|(
name|RecoveredXATransactionViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|objectName
argument_list|,
name|RecoveredXATransactionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
specifier|private
name|DestinationViewMBean
name|getProxyToDestination
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|JMSException
block|{
specifier|final
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName="
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|",destinationType="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|destination
operator|.
name|getDestinationTypeAsString
argument_list|()
argument_list|)
operator|+
literal|",destinationName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DestinationViewMBean
name|proxy
init|=
operator|(
name|DestinationViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|objectName
argument_list|,
name|DestinationViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
specifier|public
name|void
name|testPreparedTransactionRecoveredOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Prepare 4 message sends.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Prepare
name|connection
operator|.
name|send
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and try receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|DataArrayResponse
name|dar
init|=
operator|(
name|DataArrayResponse
operator|)
name|response
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ensure we can close a connection with prepared transactions
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// open again  to deliver outcome
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Commit the prepared transactions.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TransactionId
name|transactionId
init|=
operator|(
name|TransactionId
operator|)
name|dar
operator|.
name|getData
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"commit: "
operator|+
name|transactionId
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction2Phase
argument_list|(
name|connectionInfo
argument_list|,
name|transactionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We should get the committed transactions.
specifier|final
name|int
name|countToReceive
init|=
name|expectedMessageCount
argument_list|(
literal|4
argument_list|,
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countToReceive
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received: "
operator|+
name|m
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Got non null message: "
operator|+
name|i
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertEmptyDLQ
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyDLQ
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|DestinationViewMBean
name|destinationView
init|=
name|getProxyToDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|SharedDeadLetterStrategy
operator|.
name|DEFAULT_DEAD_LETTER_QUEUE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"nothing on dlq"
argument_list|,
literal|0
argument_list|,
name|destinationView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nothing added to dlq"
argument_list|,
literal|0
argument_list|,
name|destinationView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
name|maybeOk
parameter_list|)
block|{
if|if
condition|(
name|maybeOk
operator|.
name|getUndeclaredThrowable
argument_list|()
operator|instanceof
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
condition|)
block|{
comment|// perfect no dlq
block|}
else|else
block|{
throw|throw
name|maybeOk
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|testPreparedInterleavedTransactionRecoveredOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Prepare 4 message sends.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Prepare
name|connection
operator|.
name|send
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// send non tx message
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and try receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// consume non transacted message, but don't ack
name|int
name|countToReceive
init|=
name|expectedMessageCount
argument_list|(
literal|1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countToReceive
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received: "
operator|+
name|m
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got non tx message after prepared"
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|DataArrayResponse
name|dar
init|=
operator|(
name|DataArrayResponse
operator|)
name|response
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ensure we can close a connection with prepared transactions
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// open again  to deliver outcome
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
comment|// Commit the prepared transactions.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TransactionId
name|transactionId
init|=
operator|(
name|TransactionId
operator|)
name|dar
operator|.
name|getData
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"commit: "
operator|+
name|transactionId
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction2Phase
argument_list|(
name|connectionInfo
argument_list|,
name|transactionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// We should get the committed transactions and the non tx message
name|countToReceive
operator|=
name|expectedMessageCount
argument_list|(
literal|5
argument_list|,
name|destination
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countToReceive
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"received: "
operator|+
name|m
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Got non null message: "
operator|+
name|i
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertEmptyDLQ
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicPreparedTransactionRecoveredOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TryTopic"
argument_list|)
decl_stmt|;
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Prepare 4 message sends.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Prepare
name|connection
operator|.
name|send
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and try receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Since prepared but not committed.. they should not get delivered.
name|assertNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|connection
operator|.
name|request
argument_list|(
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|DataArrayResponse
name|dar
init|=
operator|(
name|DataArrayResponse
operator|)
name|response
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ensure we can close a connection with prepared transactions
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// open again  to deliver outcome
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// Commit the prepared transactions.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dar
operator|.
name|getData
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction2Phase
argument_list|(
name|connectionInfo
argument_list|,
operator|(
name|TransactionId
operator|)
name|dar
operator|.
name|getData
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We should get the committed transactions.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMessageCount
argument_list|(
literal|4
argument_list|,
name|destination
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentCommitedMessagesNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Commit
name|connection
operator|.
name|send
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMessageCount
argument_list|(
literal|4
argument_list|,
name|destination
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentCommited2PhaseMessagesNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Commit 2 phase
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createCommitTransaction2Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expectedMessageCount
argument_list|(
literal|4
argument_list|,
name|destination
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|m
init|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentCommitedAcksNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
decl_stmt|;
name|Message
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
comment|// Setup the consumer and receive the message.
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|4
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
comment|// Commit
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// No messages should be delivered.
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentPreparedAcksNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
decl_stmt|;
name|Message
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
comment|// Setup the consumer and receive the message.
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
comment|// one ack with last received, mimic a beforeEnd synchronization
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
literal|4
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
comment|// validate recovery
name|TransactionInfo
name|recoverInfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
name|DataArrayResponse
name|dataArrayResponse
init|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"there is a prepared tx"
argument_list|,
literal|1
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it matches"
argument_list|,
name|txid
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// no redelivery, exactly once semantics unless there is rollback
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// validate destination depth via jmx
name|DestinationViewMBean
name|destinationView
init|=
name|getProxyToDestination
argument_list|(
name|destinationList
argument_list|(
name|destination
argument_list|)
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"enqueue count does not see prepared acks"
argument_list|,
literal|0
argument_list|,
name|destinationView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dequeue count does not see prepared acks"
argument_list|,
literal|0
argument_list|,
name|destinationView
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction2Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate recovery complete
name|dataArrayResponse
operator|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there are no prepared tx"
argument_list|,
literal|0
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"enqueue count does not see commited acks"
argument_list|,
literal|0
argument_list|,
name|destinationView
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dequeue count does not see commited acks"
argument_list|,
literal|4
argument_list|,
name|destinationView
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|x_initCombosForTestTopicPersistentPreparedAcksNotLostOnRestart
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prioritySupport"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicPersistentPreparedAcksNotLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TryTopic"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numMessages
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|messageCount
init|=
name|expectedMessageCount
argument_list|(
name|numMessages
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|Message
name|m
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on: "
operator|+
name|i
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
comment|// one ack with last received, mimic a beforeEnd synchronization
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|m
argument_list|,
name|messageCount
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
comment|// validate recovery
name|TransactionInfo
name|recoverInfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
name|DataArrayResponse
name|dataArrayResponse
init|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"there is a prepared tx"
argument_list|,
literal|1
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it matches"
argument_list|,
name|txid
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// no redelivery, exactly once semantics unless there is rollback
name|m
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction2Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate recovery complete
name|dataArrayResponse
operator|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there are no prepared tx"
argument_list|,
literal|0
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentPreparedAcksAvailableAfterRestartAndRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|int
name|numMessages
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
comment|// Setup the consumer and receive the message.
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// one ack with last received, mimic a beforeEnd synchronization
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
comment|// validate recovery
name|TransactionInfo
name|recoverInfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
name|DataArrayResponse
name|dataArrayResponse
init|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"there is a prepared tx"
argument_list|,
literal|1
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it matches"
argument_list|,
name|txid
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// no redelivery, exactly once semantics while prepared
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|consumerInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Send some more before the rollback"
argument_list|)
expr_stmt|;
comment|// send some more messages
name|producerInfo
operator|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Send some more before the rollback"
argument_list|)
expr_stmt|;
comment|// rollback so we get redelivery
name|connection
operator|.
name|request
argument_list|(
name|createRollbackTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new tx for redelivery"
argument_list|)
expr_stmt|;
name|txid
operator|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ConsumerInfo
argument_list|>
name|consumerInfoSet
init|=
operator|new
name|HashSet
argument_list|<
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
comment|// Setup the consumer and receive the message.
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|consumerInfoSet
operator|.
name|add
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consume messages for: "
operator|+
name|dest
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|" "
operator|+
name|consumerInfo
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on:"
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|" ID: "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|ack
argument_list|)
expr_stmt|;
comment|// clear any pending messages on the stub connection via prefetch
while|while
condition|(
operator|(
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Pre fetched and unwanted: "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" on "
operator|+
name|message
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"commit.."
argument_list|)
expr_stmt|;
comment|// Commit
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove consumers 'after' commit b/c of inflight tally issue
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfoSet
control|)
block|{
name|connection
operator|.
name|request
argument_list|(
name|info
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|consumerInfoSet
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// validate recovery complete
name|dataArrayResponse
operator|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there are no prepared tx"
argument_list|,
literal|0
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consume additional messages"
argument_list|)
expr_stmt|;
comment|// clear any pending messages on the stub connection via prefetch
while|while
condition|(
operator|(
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Pre fetched and unwanted: "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" on "
operator|+
name|message
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// consume the additional messages
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
comment|// Setup the consumer and receive the message.
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consume additional messages for: "
operator|+
name|dest
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|" "
operator|+
name|consumerInfo
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
operator|*
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on:"
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|" ID: "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|request
argument_list|(
name|consumerInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentPreparedAcksAvailableAfterRollbackPrefetchOne
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|int
name|numMessages
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// use consumer per destination for the composite dest case
comment|// bc the same composite dest is used for sending so there
comment|// will be duplicate message ids in the mix which a single
comment|// consumer (PrefetchSubscription) cannot handle in a tx
comment|// atm. The matching is based on messageId rather than messageId
comment|// and destination
name|Set
argument_list|<
name|ConsumerInfo
argument_list|>
name|consumerInfos
init|=
operator|new
name|HashSet
argument_list|<
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|numMessages
argument_list|)
expr_stmt|;
name|consumerInfos
operator|.
name|add
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|info
argument_list|,
name|message
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|info
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconnect
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
comment|// validate recovery
name|TransactionInfo
name|recoverInfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
name|DataArrayResponse
name|dataArrayResponse
init|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"there is a prepared tx"
argument_list|,
literal|1
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it matches"
argument_list|,
name|txid
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|// no redelivery, exactly once semantics while prepared
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// rollback so we get redelivery
name|connection
operator|.
name|request
argument_list|(
name|createRollbackTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new tx for redelivery"
argument_list|)
expr_stmt|;
name|txid
operator|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on:"
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|info
argument_list|,
name|message
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Commit
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate recovery complete
name|dataArrayResponse
operator|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there are no prepared tx"
argument_list|,
literal|0
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testQueuePersistentPreparedAcksAvailableAfterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
name|int
name|numMessages
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// use consumer per destination for the composite dest case
comment|// bc the same composite dest is used for sending so there
comment|// will be duplicate message ids in the mix which a single
comment|// consumer (PrefetchSubscription) cannot handle in a tx
comment|// atm. The matching is based on messageId rather than messageId
comment|// and destination
name|Set
argument_list|<
name|ConsumerInfo
argument_list|>
name|consumerInfos
init|=
operator|new
name|HashSet
argument_list|<
name|ConsumerInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|consumerInfos
operator|.
name|add
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|info
argument_list|,
name|message
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|info
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconnect
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
comment|// validate recovery
name|TransactionInfo
name|recoverInfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
name|DataArrayResponse
name|dataArrayResponse
init|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"there is a prepared tx"
argument_list|,
literal|1
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it matches"
argument_list|,
name|txid
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"add consumers.."
argument_list|)
expr_stmt|;
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
name|connection
operator|.
name|send
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
comment|// no redelivery, exactly once semantics while prepared
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// rollback so we get redelivery
name|connection
operator|.
name|request
argument_list|(
name|createRollbackTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new tx for redelivery"
argument_list|)
expr_stmt|;
name|txid
operator|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|consumerInfos
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on:"
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"REC "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|info
argument_list|,
name|message
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Commit
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate recovery complete
name|dataArrayResponse
operator|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there are no prepared tx"
argument_list|,
literal|0
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTopicPersistentPreparedAcksAvailableAfterRestartAndRollback
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prioritySupport"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TryTopic"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|int
name|numMessages
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// one ack with last received, mimic a beforeEnd synchronization
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
comment|// validate recovery
name|TransactionInfo
name|recoverInfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TransactionInfo
operator|.
name|RECOVER
argument_list|)
decl_stmt|;
name|DataArrayResponse
name|dataArrayResponse
init|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"there is a prepared tx"
argument_list|,
literal|1
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"it matches"
argument_list|,
name|txid
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
comment|// no redelivery, exactly once semantics while prepared
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// rollback so we get redelivery
name|connection
operator|.
name|request
argument_list|(
name|createRollbackTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new tx for redelivery"
argument_list|)
expr_stmt|;
name|txid
operator|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on:"
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|ack
operator|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
comment|// Commit
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// validate recovery complete
name|dataArrayResponse
operator|=
operator|(
name|DataArrayResponse
operator|)
name|connection
operator|.
name|request
argument_list|(
name|recoverInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"there are no prepared tx"
argument_list|,
literal|0
argument_list|,
name|dataArrayResponse
operator|.
name|getData
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTopicPersistentPreparedAcksAvailableAfterRollback
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prioritySupport"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicPersistentPreparedAcksAvailableAfterRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TryTopic"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|int
name|numMessages
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// one ack with last received, mimic a beforeEnd synchronization
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// rollback so we get redelivery
name|connection
operator|.
name|request
argument_list|(
name|createRollbackTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer/tx for redelivery"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|txid
operator|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on:"
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|ack
operator|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
comment|// Commit
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction1Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTopicPersistentPreparedAcksUnavailableTillRollback
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"keepDurableSubsActive"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicPersistentPreparedAcksUnavailableTillRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TryTopic"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|int
name|numMessages
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// one ack with last received, mimic a beforeEnd synchronization
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconnect, verify perpared acks unavailable
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for *no* redelivery"
argument_list|)
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"unexpected non null"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// rollback original tx
name|connection
operator|.
name|request
argument_list|(
name|createRollbackTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify receive after rollback
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"unexpected null on:"
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
comment|// unsubscribe
name|connection
operator|.
name|request
argument_list|(
name|consumerInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|RemoveSubscriptionInfo
name|removeSubscriptionInfo
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|removeSubscriptionInfo
operator|.
name|setClientId
argument_list|(
name|connectionInfo
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|removeSubscriptionInfo
operator|.
name|setSubscriptionName
argument_list|(
name|consumerInfo
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|removeSubscriptionInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestTopicPersistentPreparedAcksUnavailableTillComplete
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"keepDurableSubsActive"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTopicPersistentPreparedAcksUnavailableTillComplete
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TryTopic"
argument_list|)
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|int
name|numMessages
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMessages
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// one ack with last received, mimic a beforeEnd synchronization
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
name|numMessages
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|createPrepareTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconnect, verify perpared acks unavailable
name|connection
operator|.
name|request
argument_list|(
name|closeConnectionInfo
argument_list|(
name|connectionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for *no* redelivery"
argument_list|)
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
comment|// setup durable subs
name|consumerInfo
operator|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
literal|"durable"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"unexpected non null"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// commit original tx
name|connection
operator|.
name|request
argument_list|(
name|createCommitTransaction2Phase
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"unexpected non null"
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// unsubscribe
name|connection
operator|.
name|request
argument_list|(
name|consumerInfo
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|RemoveSubscriptionInfo
name|removeSubscriptionInfo
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|removeSubscriptionInfo
operator|.
name|setClientId
argument_list|(
name|connectionInfo
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|removeSubscriptionInfo
operator|.
name|setSubscriptionName
argument_list|(
name|consumerInfo
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|removeSubscriptionInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ActiveMQDestination
index|[]
name|destinationList
parameter_list|(
name|ActiveMQDestination
name|dest
parameter_list|)
block|{
return|return
name|dest
operator|.
name|isComposite
argument_list|()
condition|?
name|dest
operator|.
name|getCompositeDestinations
argument_list|()
else|:
operator|new
name|ActiveMQDestination
index|[]
block|{
name|dest
block|}
return|;
block|}
specifier|private
name|int
name|expectedMessageCount
parameter_list|(
name|int
name|i
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
name|i
operator|*
operator|(
name|destination
operator|.
name|isComposite
argument_list|()
condition|?
name|destination
operator|.
name|getCompositeDestinations
argument_list|()
operator|.
name|length
else|:
literal|1
operator|)
return|;
block|}
specifier|public
name|void
name|testQueuePersistentUncommittedAcksLostOnRestart
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|createDestination
argument_list|()
decl_stmt|;
comment|// Setup the producer and send the message.
name|StubConnection
name|connection
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Begin the transaction.
name|XATransactionId
name|txid
init|=
name|createXATransaction
argument_list|(
name|sessionInfo
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|createBeginTransaction
argument_list|(
name|connectionInfo
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
comment|// Setup the consumer and receive the message.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|MessageAck
name|ack
init|=
name|createAck
argument_list|(
name|consumerInfo
argument_list|,
name|message
argument_list|,
literal|4
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|txid
argument_list|)
expr_stmt|;
name|connection
operator|.
name|request
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
comment|// Don't commit
comment|// restart the broker.
name|restartBroker
argument_list|()
expr_stmt|;
comment|// Setup the consumer and receive the message.
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|connectionInfo
operator|=
name|createConnectionInfo
argument_list|()
expr_stmt|;
name|sessionInfo
operator|=
name|createSessionInfo
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|sessionInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinationList
argument_list|(
name|destination
argument_list|)
control|)
block|{
comment|// Setup the consumer and receive the message.
name|ConsumerInfo
name|consumerInfo
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|consumerInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|receiveMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|assertNoMessagesLeft
argument_list|(
name|connection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PolicyEntry
name|getDefaultPolicy
parameter_list|()
block|{
name|PolicyEntry
name|policyEntry
init|=
name|super
operator|.
name|getDefaultPolicy
argument_list|()
decl_stmt|;
name|policyEntry
operator|.
name|setPrioritizedMessages
argument_list|(
name|prioritySupport
argument_list|)
expr_stmt|;
return|return
name|policyEntry
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|configureBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setKeepDurableSubsActive
argument_list|(
name|keepDurableSubsActive
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|XARecoveryBrokerTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ActiveMQDestination
name|createDestination
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

