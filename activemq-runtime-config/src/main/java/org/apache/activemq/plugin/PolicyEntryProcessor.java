begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|PolicyEntryProcessor
extends|extends
name|DefaultConfigurationProcessor
block|{
specifier|public
name|PolicyEntryProcessor
parameter_list|(
name|RuntimeConfigurationBroker
name|plugin
parameter_list|,
name|Class
name|configurationClass
parameter_list|)
block|{
name|super
argument_list|(
name|plugin
argument_list|,
name|configurationClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNew
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|PolicyEntry
name|addition
init|=
name|fromDto
argument_list|(
name|o
argument_list|,
operator|new
name|PolicyEntry
argument_list|()
argument_list|)
decl_stmt|;
name|PolicyMap
name|existingMap
init|=
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
name|existingMap
operator|.
name|put
argument_list|(
name|addition
operator|.
name|getDestination
argument_list|()
argument_list|,
name|addition
argument_list|)
expr_stmt|;
name|applyRetrospectively
argument_list|(
name|addition
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|info
argument_list|(
literal|"added policy for: "
operator|+
name|addition
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Object
name|existing
parameter_list|,
name|Object
name|candidate
parameter_list|)
block|{
name|PolicyMap
name|existingMap
init|=
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getDestinationPolicy
argument_list|()
decl_stmt|;
name|PolicyEntry
name|updatedEntry
init|=
name|fromDto
argument_list|(
name|candidate
argument_list|,
operator|new
name|PolicyEntry
argument_list|()
argument_list|)
decl_stmt|;
name|Set
name|existingEntry
init|=
name|existingMap
operator|.
name|get
argument_list|(
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingEntry
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|updatedEntry
operator|=
name|fromDto
argument_list|(
name|candidate
argument_list|,
operator|(
name|PolicyEntry
operator|)
name|existingEntry
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|applyRetrospectively
argument_list|(
name|updatedEntry
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|info
argument_list|(
literal|"updated policy for: "
operator|+
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"cannot modify policy matching multiple destinations: "
operator|+
name|existingEntry
operator|+
literal|", destination:"
operator|+
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|applyRetrospectively
parameter_list|(
name|PolicyEntry
name|updatedEntry
parameter_list|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
for|for
control|(
name|Destination
name|destination
range|:
name|regionBroker
operator|.
name|getDestinations
argument_list|(
name|updatedEntry
operator|.
name|getDestination
argument_list|()
argument_list|)
control|)
block|{
name|Destination
name|target
init|=
name|destination
decl_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|DestinationFilter
condition|)
block|{
name|target
operator|=
operator|(
operator|(
name|DestinationFilter
operator|)
name|destination
operator|)
operator|.
name|getNext
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|updatedEntry
operator|.
name|update
argument_list|(
operator|(
name|Queue
operator|)
name|target
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|updatedEntry
operator|.
name|update
argument_list|(
operator|(
name|Topic
operator|)
name|target
argument_list|)
expr_stmt|;
block|}
name|plugin
operator|.
name|debug
argument_list|(
literal|"applied update to:"
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

