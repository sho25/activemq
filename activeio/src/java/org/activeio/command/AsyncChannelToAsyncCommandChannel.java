begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2005 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|command
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AsyncChannelListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|AsyncChannelToAsyncCommandChannel
implements|implements
name|AsyncCommandChannel
block|{
specifier|private
name|AsyncChannel
name|channel
decl_stmt|;
specifier|private
name|WireFormat
name|wireFormat
decl_stmt|;
specifier|public
name|AsyncChannelToAsyncCommandChannel
parameter_list|(
name|AsyncChannel
name|channel
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|void
name|writeCommand
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|channel
operator|.
name|write
argument_list|(
name|wireFormat
operator|.
name|marshal
argument_list|(
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
return|return
name|channel
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|channel
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|channel
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|channel
operator|.
name|stop
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCommandListener
parameter_list|(
specifier|final
name|CommandListener
name|listener
parameter_list|)
block|{
name|channel
operator|.
name|setAsyncChannelListener
argument_list|(
operator|new
name|AsyncChannelListener
argument_list|()
block|{
specifier|public
name|void
name|onPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
if|if
condition|(
name|packet
operator|==
name|EOSPacket
operator|.
name|EOS_PACKET
condition|)
block|{
name|listener
operator|.
name|onError
argument_list|(
operator|new
name|EOFException
argument_list|(
literal|"Peer disconnected."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Object
name|command
init|=
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onPacketError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|listener
operator|.
name|onError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

