begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessagePriorityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|derby
operator|.
name|jdbc
operator|.
name|EmbeddedDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JDBCMessagePriorityTest
extends|extends
name|MessagePriorityTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JDBCMessagePriorityTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataSource
name|dataSource
decl_stmt|;
name|JDBCPersistenceAdapter
name|jdbc
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|PersistenceAdapter
name|createPersistenceAdapter
parameter_list|(
name|boolean
name|delete
parameter_list|)
throws|throws
name|Exception
block|{
name|jdbc
operator|=
operator|new
name|JDBCPersistenceAdapter
argument_list|()
expr_stmt|;
name|dataSource
operator|=
name|jdbc
operator|.
name|getDataSource
argument_list|()
expr_stmt|;
name|jdbc
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|jdbc
operator|.
name|setCleanupPeriod
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
return|return
name|jdbc
return|;
block|}
comment|// this cannot be a general test as kahaDB just has support for 3 priority levels
specifier|public
name|void
name|testDurableSubsReconnectWithFourLevels
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subName
init|=
literal|"priorityDisconnect"
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|int
name|MED_PRI
init|=
name|LOW_PRI
operator|+
literal|1
decl_stmt|;
specifier|final
name|int
name|MED_HIGH_PRI
init|=
name|HIGH_PRI
operator|-
literal|1
decl_stmt|;
name|ProducerThread
name|lowPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|LOW_PRI
argument_list|)
decl_stmt|;
name|ProducerThread
name|medPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|MED_PRI
argument_list|)
decl_stmt|;
name|ProducerThread
name|medHighPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|MED_HIGH_PRI
argument_list|)
decl_stmt|;
name|ProducerThread
name|highPri
init|=
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|HIGH_PRI
argument_list|)
decl_stmt|;
name|lowPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|medPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|medHighPri
operator|.
name|start
argument_list|()
expr_stmt|;
name|lowPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|highPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|medPri
operator|.
name|join
argument_list|()
expr_stmt|;
name|medHighPri
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|int
name|closeFrequency
init|=
name|MSG_NUM
decl_stmt|;
specifier|final
name|int
index|[]
name|priorities
init|=
operator|new
name|int
index|[]
block|{
name|HIGH_PRI
block|,
name|MED_HIGH_PRI
block|,
name|MED_PRI
block|,
name|LOW_PRI
block|}
decl_stmt|;
name|sub
operator|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_NUM
operator|*
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|sub
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"received i="
operator|+
name|i
operator|+
literal|", m="
operator|+
operator|(
name|msg
operator|!=
literal|null
condition|?
name|msg
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|", priority: "
operator|+
name|msg
operator|.
name|getJMSPriority
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" was null"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" has wrong priority"
argument_list|,
name|priorities
index|[
name|i
operator|/
name|MSG_NUM
index|]
argument_list|,
name|msg
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
name|closeFrequency
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing durable sub.. on: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|sub
operator|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"closing on done!"
argument_list|)
expr_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestConcurrentDurableSubsReconnectWithXLevels
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prioritizeMessages"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|,
name|Boolean
operator|.
name|FALSE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConcurrentDurableSubsReconnectWithXLevels
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subName
init|=
literal|"priorityDisconnect"
decl_stmt|;
name|Connection
name|consumerConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consumerConn
operator|.
name|setClientID
argument_list|(
literal|"priorityDisconnect"
argument_list|)
expr_stmt|;
name|consumerConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|int
name|maxPriority
init|=
literal|5
decl_stmt|;
specifier|final
name|AtomicInteger
index|[]
name|messageCounts
init|=
operator|new
name|AtomicInteger
index|[
name|maxPriority
index|]
decl_stmt|;
specifier|final
name|long
index|[]
name|messageIds
init|=
operator|new
name|long
index|[
name|maxPriority
index|]
decl_stmt|;
name|Vector
argument_list|<
name|ProducerThread
argument_list|>
name|producers
init|=
operator|new
name|Vector
argument_list|<
name|ProducerThread
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|priority
init|=
literal|0
init|;
name|priority
operator|<
name|maxPriority
condition|;
name|priority
operator|++
control|)
block|{
name|producers
operator|.
name|add
argument_list|(
operator|new
name|ProducerThread
argument_list|(
name|topic
argument_list|,
name|MSG_NUM
argument_list|,
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|messageCounts
index|[
name|priority
index|]
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|messageIds
index|[
name|priority
index|]
operator|=
literal|1l
expr_stmt|;
block|}
for|for
control|(
name|ProducerThread
name|producer
range|:
name|producers
control|)
block|{
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|closeFrequency
init|=
name|MSG_NUM
operator|/
literal|2
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|sub
operator|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_NUM
operator|*
name|maxPriority
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|sub
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"received i="
operator|+
name|i
operator|+
literal|", m="
operator|+
operator|(
name|msg
operator|!=
literal|null
condition|?
name|msg
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|", priority: "
operator|+
name|msg
operator|.
name|getJMSPriority
argument_list|()
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Message "
operator|+
name|i
operator|+
literal|" was null, counts: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|messageCounts
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"no duplicate message failed on : "
operator|+
name|msg
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
name|dups
operator|.
name|put
argument_list|(
name|msg
operator|.
name|getJMSMessageID
argument_list|()
argument_list|,
name|subName
argument_list|)
argument_list|)
expr_stmt|;
name|messageCounts
index|[
name|msg
operator|.
name|getJMSPriority
argument_list|()
index|]
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"message is in order : "
operator|+
name|msg
argument_list|,
name|messageIds
index|[
name|msg
operator|.
name|getJMSPriority
argument_list|()
index|]
argument_list|,
operator|(
operator|(
name|ActiveMQMessage
operator|)
name|msg
operator|)
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|messageIds
index|[
name|msg
operator|.
name|getJMSPriority
argument_list|()
index|]
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
name|closeFrequency
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing durable sub.. on: "
operator|+
name|i
operator|+
literal|", counts: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|messageCounts
argument_list|)
argument_list|)
expr_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|sub
operator|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"closing on done!"
argument_list|)
expr_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerConn
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|ProducerThread
name|producer
range|:
name|producers
control|)
block|{
name|producer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initCombosForTestConcurrentRate
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"prefetchVal"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
literal|500
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConcurrentRate
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subName
init|=
literal|"priorityConcurrent"
decl_stmt|;
name|Connection
name|consumerConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consumerConn
operator|.
name|setClientID
argument_list|(
literal|"subName"
argument_list|)
expr_stmt|;
name|consumerConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|int
name|TO_SEND
init|=
literal|2000
decl_stmt|;
specifier|final
name|Vector
argument_list|<
name|Message
argument_list|>
name|duplicates
init|=
operator|new
name|Vector
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|dups
init|=
operator|new
name|int
index|[
name|TO_SEND
operator|*
literal|4
index|]
decl_stmt|;
name|long
name|start
decl_stmt|;
name|double
name|max
init|=
literal|0
decl_stmt|,
name|sum
init|=
literal|0
decl_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|sess
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TO_SEND
condition|;
name|i
operator|++
control|)
block|{
name|int
name|priority
init|=
name|i
operator|%
literal|10
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|i
operator|+
literal|"-"
operator|+
name|priority
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"seq"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Max send time: "
operator|+
name|max
operator|+
literal|". Sending message: "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|duration
argument_list|)
expr_stmt|;
if|if
condition|(
name|duration
operator|==
name|max
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"new max: "
operator|+
name|max
operator|+
literal|" on i="
operator|+
name|i
operator|+
literal|", "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|duration
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent: "
operator|+
name|TO_SEND
operator|+
literal|", max send time: "
operator|+
name|max
argument_list|)
expr_stmt|;
name|double
name|noConsumerAve
init|=
operator|(
name|sum
operator|*
literal|100
operator|/
name|TO_SEND
operator|)
decl_stmt|;
name|sub
operator|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|sub
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|.
name|get
argument_list|()
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"onMessage: count: "
operator|+
name|count
operator|.
name|get
argument_list|()
operator|+
literal|", "
operator|+
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
operator|+
literal|", seqNo "
operator|+
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"seq"
argument_list|)
operator|+
literal|", "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|seqNo
init|=
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"seq"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dups
index|[
name|seqNo
index|]
operator|==
literal|0
condition|)
block|{
name|dups
index|[
name|seqNo
index|]
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Duplicate: "
operator|+
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
operator|+
literal|", "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|duplicates
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Activated consumer"
argument_list|)
expr_stmt|;
name|sum
operator|=
name|max
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|TO_SEND
init|;
name|i
operator|<
operator|(
name|TO_SEND
operator|*
literal|2
operator|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|priority
init|=
name|i
operator|%
literal|10
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|i
operator|+
literal|"-"
operator|+
name|priority
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"seq"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
operator|&&
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Max send time: "
operator|+
name|max
operator|+
literal|". Sending message: "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|long
name|duration
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|duration
argument_list|)
expr_stmt|;
if|if
condition|(
name|duration
operator|==
name|max
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"new max: "
operator|+
name|max
operator|+
literal|" on i="
operator|+
name|i
operator|+
literal|", "
operator|+
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|duration
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent another: "
operator|+
name|TO_SEND
operator|+
literal|", max send time: "
operator|+
name|max
argument_list|)
expr_stmt|;
name|double
name|withConsumerAve
init|=
operator|(
name|sum
operator|*
literal|100
operator|/
name|TO_SEND
operator|)
decl_stmt|;
specifier|final
name|int
name|reasonableMultiplier
init|=
literal|4
decl_stmt|;
comment|// not so reasonable, but on slow disks it can be
name|assertTrue
argument_list|(
literal|"max X times as slow with consumer:"
operator|+
name|withConsumerAve
operator|+
literal|" , noConsumerMax:"
operator|+
name|noConsumerAve
argument_list|,
name|withConsumerAve
operator|<
name|noConsumerAve
operator|*
name|reasonableMultiplier
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"count: "
operator|+
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|TO_SEND
operator|*
literal|2
operator|==
name|count
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No duplicates : "
operator|+
name|duplicates
argument_list|,
name|duplicates
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got all messages"
argument_list|,
name|TO_SEND
operator|*
literal|2
argument_list|,
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCleanupPriorityDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"no messages pending"
argument_list|,
literal|0
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subName
init|=
literal|"priorityConcurrent"
decl_stmt|;
name|Connection
name|consumerConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consumerConn
operator|.
name|setClientID
argument_list|(
literal|"subName"
argument_list|)
expr_stmt|;
name|consumerConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|sess
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two messages pending"
argument_list|,
literal|2
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
name|sub
operator|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|message
operator|=
name|sub
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got high priority"
argument_list|,
literal|5
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAck
argument_list|(
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|jdbc
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"one messages pending"
argument_list|,
literal|1
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|sub
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got high priority"
argument_list|,
literal|2
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|waitForAck
argument_list|(
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|jdbc
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"no messages pending"
argument_list|,
literal|0
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCleanupNonPriorityDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"no messages pending"
argument_list|,
literal|0
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|sess
operator|.
name|createTopic
argument_list|(
literal|"TEST_CLEANUP_NO_PRIORITY"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|subName
init|=
literal|"subName"
decl_stmt|;
name|Connection
name|consumerConn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consumerConn
operator|.
name|setClientID
argument_list|(
literal|"subName"
argument_list|)
expr_stmt|;
name|consumerConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
decl_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|sess
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"ToExpire"
argument_list|)
decl_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|message
operator|=
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
name|assertEquals
argument_list|(
literal|"three messages pending"
argument_list|,
literal|3
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// let first message expire
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|sub
operator|=
name|consumerSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|subName
argument_list|)
expr_stmt|;
name|message
operator|=
name|sub
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|waitForAck
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|jdbc
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"one messages pending"
argument_list|,
literal|1
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|sub
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"got message two"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|waitForAck
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|jdbc
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"no messages pending"
argument_list|,
literal|0
argument_list|,
name|messageTableCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|messageTableCount
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Connection
name|c
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT COUNT(*) FROM ACTIVEMQ_MSGS"
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
name|s
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|waitForAck
parameter_list|(
specifier|final
name|int
name|priority
parameter_list|)
throws|throws
name|Exception
block|{
name|waitForAck
argument_list|(
name|priority
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|waitForAck
parameter_list|(
specifier|final
name|int
name|priority
parameter_list|,
specifier|final
name|int
name|minId
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"got ack for "
operator|+
name|priority
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|id
init|=
literal|0
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Connection
name|c
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT LAST_ACKED_ID FROM ACTIVEMQ_ACKS WHERE PRIORITY="
operator|+
name|priority
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
name|s
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|id
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|id
operator|>
name|minId
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|int
name|messageTableDump
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Connection
name|c
init|=
name|dataSource
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|PreparedStatement
name|s
init|=
name|c
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT * FROM ACTIVEMQ_MSGS"
argument_list|)
decl_stmt|;
name|ResultSet
name|rs
init|=
name|s
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|=
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|JDBCMessagePriorityTest
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

