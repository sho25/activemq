begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2003-2005 Arthur van Hoff, Rick Blair  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * A table of DNS entries. This is a hash table which  * can handle multiple entries with the same name.  *<p/>  * Storing multiple entries with the same name is implemented using a  * linked list of<code>CacheNode</code>'s.  *<p/>  * The current implementation of the API of DNSCache does expose the  * cache nodes to clients. Clients must explicitly deal with the nodes  * when iterating over entries in the cache. Here's how to iterate over  * all entries in the cache:  *<pre>  * for (Iterator i=dnscache.iterator(); i.hasNext(); ) {  *    for (DNSCache.CacheNode n = (DNSCache.CacheNode) i.next(); n != null; n.next()) {  *       DNSEntry entry = n.getValue();  *       ...do something with entry...  *    }  * }  *</pre>  *<p/>  * And here's how to iterate over all entries having a given name:  *<pre>  * for (DNSCache.CacheNode n = (DNSCache.CacheNode) dnscache.find(name); n != null; n.next()) {  *     DNSEntry entry = n.getValue();  *     ...do something with entry...  * }  *</pre>  *  * @version %I%, %G%  * @author	Arthur van Hoff, Werner Randelshofer, Rick Blair  */
end_comment

begin_class
class|class
name|DNSCache
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DNSCache
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Implementation note:
comment|// We might completely hide the existence of CacheNode's in a future version
comment|// of DNSCache. But this will require to implement two (inner) classes for
comment|// the  iterators that will be returned by method<code>iterator()</code> and
comment|// method<code>find(name)</code>.
comment|// Since DNSCache is not a public class, it does not seem worth the effort
comment|// to clean its API up that much.
comment|// [PJYF Oct 15 2004] This should implements Collections that would be amuch cleaner implementation
comment|/**      * The number of DNSEntry's in the cache.      */
specifier|private
name|int
name|size
decl_stmt|;
comment|/**      * The hashtable used internally to store the entries of the cache.      * Keys are instances of String. The String contains an unqualified service      * name.      * Values are linked lists of CacheNode instances.      */
specifier|private
name|HashMap
name|hashtable
decl_stmt|;
comment|/**      * Cache nodes are used to implement storage of multiple DNSEntry's of the      * same name in the cache.      */
specifier|public
specifier|static
class|class
name|CacheNode
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CacheNode
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|DNSEntry
name|value
decl_stmt|;
specifier|private
name|CacheNode
name|next
decl_stmt|;
specifier|public
name|CacheNode
parameter_list|(
name|DNSEntry
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|CacheNode
name|next
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|DNSEntry
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**      * Create a table with a given initial size.      */
specifier|public
name|DNSCache
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
name|hashtable
operator|=
operator|new
name|HashMap
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**      * Clears the cache.      */
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|hashtable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
comment|/**      * Adds an entry to the table.      */
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
specifier|final
name|DNSEntry
name|entry
parameter_list|)
block|{
comment|//logger.log("DNSCache.add("+entry.getName()+")");
name|CacheNode
name|newValue
init|=
operator|new
name|CacheNode
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|CacheNode
name|node
init|=
operator|(
name|CacheNode
operator|)
name|hashtable
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|hashtable
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newValue
operator|.
name|next
operator|=
name|node
operator|.
name|next
expr_stmt|;
name|node
operator|.
name|next
operator|=
name|newValue
expr_stmt|;
block|}
name|size
operator|++
expr_stmt|;
block|}
comment|/**      * Remove a specific entry from the table. Returns true if the      * entry was found.      */
specifier|public
specifier|synchronized
name|boolean
name|remove
parameter_list|(
name|DNSEntry
name|entry
parameter_list|)
block|{
name|CacheNode
name|node
init|=
operator|(
name|CacheNode
operator|)
name|hashtable
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|value
operator|==
name|entry
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|hashtable
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hashtable
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|next
argument_list|)
expr_stmt|;
block|}
name|size
operator|--
expr_stmt|;
return|return
literal|true
return|;
block|}
name|CacheNode
name|previous
init|=
name|node
decl_stmt|;
name|node
operator|=
name|node
operator|.
name|next
expr_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|value
operator|==
name|entry
condition|)
block|{
name|previous
operator|.
name|next
operator|=
name|node
operator|.
name|next
expr_stmt|;
name|size
operator|--
expr_stmt|;
return|return
literal|true
return|;
block|}
name|previous
operator|=
name|node
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|next
expr_stmt|;
block|}
empty_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Get a matching DNS entry from the table (using equals).      * Returns the entry that was found.      */
specifier|public
specifier|synchronized
name|DNSEntry
name|get
parameter_list|(
name|DNSEntry
name|entry
parameter_list|)
block|{
for|for
control|(
name|CacheNode
name|node
init|=
name|find
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|next
control|)
block|{
if|if
condition|(
name|node
operator|.
name|value
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
name|node
operator|.
name|value
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get a matching DNS entry from the table.      */
specifier|public
specifier|synchronized
name|DNSEntry
name|get
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|)
block|{
for|for
control|(
name|CacheNode
name|node
init|=
name|find
argument_list|(
name|name
argument_list|)
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|next
control|)
block|{
if|if
condition|(
name|node
operator|.
name|value
operator|.
name|type
operator|==
name|type
operator|&&
name|node
operator|.
name|value
operator|.
name|clazz
operator|==
name|clazz
condition|)
block|{
return|return
name|node
operator|.
name|value
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Iterates over all cache nodes.      * The iterator returns instances of DNSCache.CacheNode.      * Each instance returned is the first node of a linked list.      * To retrieve all entries, one must iterate over this linked list. See      * code snippets in the header of the class.      */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|hashtable
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      * Iterate only over items with matching name.      * Returns an instance of DNSCache.CacheNode or null.      * If an instance is returned, it is the first node of a linked list.      * To retrieve all entries, one must iterate over this linked list.      */
specifier|public
specifier|synchronized
name|CacheNode
name|find
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|CacheNode
operator|)
name|hashtable
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * List all entries for debugging.      */
specifier|public
specifier|synchronized
name|void
name|print
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
for|for
control|(
name|CacheNode
name|n
init|=
operator|(
name|CacheNode
operator|)
name|i
operator|.
name|next
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|next
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|n
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|synchronized
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|aLog
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|aLog
operator|.
name|append
argument_list|(
literal|"\t---- cache ----"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
for|for
control|(
name|CacheNode
name|n
init|=
operator|(
name|CacheNode
operator|)
name|i
operator|.
name|next
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|next
control|)
block|{
name|aLog
operator|.
name|append
argument_list|(
literal|"\n\t\t"
operator|+
name|n
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|aLog
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

