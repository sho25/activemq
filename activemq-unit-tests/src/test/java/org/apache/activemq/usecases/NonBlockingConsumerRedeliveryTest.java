begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|RedeliveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|NonBlockingConsumerRedeliveryTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NonBlockingConsumerRedeliveryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|destinationName
init|=
literal|"Destination"
decl_stmt|;
specifier|private
specifier|final
name|int
name|MSG_COUNT
init|=
literal|100
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMessageDeleiveredWhenNonBlockingEnabled
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|received
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|beforeRollback
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|afterRollback
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|received
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pre-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|beforeRollback
operator|.
name|addAll
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Post-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages since rollback."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|afterRollback
operator|.
name|addAll
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeRollback
operator|.
name|size
argument_list|()
argument_list|,
name|afterRollback
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeRollback
argument_list|,
name|afterRollback
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMessageDeleiveredInCorrectOrder
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|received
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|beforeRollback
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|afterRollback
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|received
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pre-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|beforeRollback
operator|.
name|addAll
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Post-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages since rollback."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|afterRollback
operator|.
name|addAll
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeRollback
operator|.
name|size
argument_list|()
argument_list|,
name|afterRollback
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeRollback
argument_list|,
name|afterRollback
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Message
argument_list|>
name|after
init|=
name|afterRollback
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Message
argument_list|>
name|before
init|=
name|beforeRollback
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|before
operator|.
name|hasNext
argument_list|()
operator|&&
name|after
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|TextMessage
name|original
init|=
operator|(
name|TextMessage
operator|)
name|before
operator|.
name|next
argument_list|()
decl_stmt|;
name|TextMessage
name|rolledBack
init|=
operator|(
name|TextMessage
operator|)
name|after
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|originalInt
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|original
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|rolledbackInt
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|rolledBack
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|originalInt
argument_list|,
name|rolledbackInt
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMessageDeleiveryDoesntStop
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|received
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|beforeRollback
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|afterRollback
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|received
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pre-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|beforeRollback
operator|.
name|addAll
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Post-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages since rollback."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
operator|*
literal|2
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|afterRollback
operator|.
name|addAll
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|beforeRollback
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|,
name|afterRollback
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonBlockingMessageDeleiveryIsDelayed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|received
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setInitialRedeliveryDelay
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|received
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pre-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delayed redelivery test not expecting any messages yet."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|received
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonBlockingMessageDeleiveryWithRollbacks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|received
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|received
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pre-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|received
operator|.
name|clear
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
operator|++
name|count
operator|>
literal|10
condition|)
block|{
try|try
block|{
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling back session."
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught an unexcepted exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|received
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught an unexcepted exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Post-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages since rollback."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MSG_COUNT
argument_list|,
name|received
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonBlockingMessageDeleiveryWithAllRolledBack
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|received
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
name|dlqed
init|=
operator|new
name|LinkedHashSet
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
specifier|final
name|Destination
name|dlq
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"ActiveMQ.DLQ"
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|dlqConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dlq
argument_list|)
decl_stmt|;
name|dlqConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|dlqed
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|received
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Pre-Rollback expects to receive: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|received
operator|.
name|size
argument_list|()
operator|+
literal|" messages."
argument_list|)
expr_stmt|;
return|return
name|received
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught an unexcepted exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Post-Rollback expects to DLQ: "
operator|+
name|MSG_COUNT
operator|+
literal|" messages."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Consumer has received "
operator|+
name|dlqed
operator|.
name|size
argument_list|()
operator|+
literal|" messages in DLQ."
argument_list|)
expr_stmt|;
return|return
name|dlqed
operator|.
name|size
argument_list|()
operator|==
name|MSG_COUNT
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|sendMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setNonBlockingRedelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|RedeliveryPolicy
name|policy
init|=
name|connectionFactory
operator|.
name|getRedeliveryPolicy
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setInitialRedeliveryDelay
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setBackOffMultiplier
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setRedeliveryDelay
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveryDelay
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setMaximumRedeliveries
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

