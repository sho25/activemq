begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
operator|.
name|NIOSSLTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpNioSslTransport
extends|extends
name|NIOSSLTransport
block|{
specifier|private
specifier|final
name|AmqpFrameParser
name|frameReader
init|=
operator|new
name|AmqpFrameParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|public
name|AmqpNioSslTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|,
name|URI
name|remoteLocation
parameter_list|,
name|URI
name|localLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socketFactory
argument_list|,
name|remoteLocation
argument_list|,
name|localLocation
argument_list|)
expr_stmt|;
name|frameReader
operator|.
name|setWireFormat
argument_list|(
operator|(
name|AmqpWireFormat
operator|)
name|wireFormat
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AmqpNioSslTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socket
argument_list|)
expr_stmt|;
name|frameReader
operator|.
name|setWireFormat
argument_list|(
operator|(
name|AmqpWireFormat
operator|)
name|wireFormat
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|initializeStreams
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|initializeStreams
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputBuffer
operator|.
name|position
argument_list|()
operator|!=
literal|0
operator|&&
name|inputBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|serviceRead
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processCommand
parameter_list|(
name|ByteBuffer
name|plain
parameter_list|)
throws|throws
name|Exception
block|{
name|frameReader
operator|.
name|parse
argument_list|(
name|plain
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

