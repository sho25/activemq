begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A Destination bridge is used to bridge between to different JMS systems  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DestinationBridge
implements|implements
name|Service
implements|,
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DestinationBridge
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|JmsMesageConvertor
name|jmsMessageConvertor
decl_stmt|;
specifier|protected
name|boolean
name|doHandleReplyTo
init|=
literal|true
decl_stmt|;
specifier|protected
name|JmsConnector
name|jmsConnector
decl_stmt|;
comment|/**      * @return Returns the consumer.      */
specifier|public
name|MessageConsumer
name|getConsumer
parameter_list|()
block|{
return|return
name|consumer
return|;
block|}
comment|/**      * @param consumer The consumer to set.      */
specifier|public
name|void
name|setConsumer
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
comment|/**      * @param connector      */
specifier|public
name|void
name|setJmsConnector
parameter_list|(
name|JmsConnector
name|connector
parameter_list|)
block|{
name|this
operator|.
name|jmsConnector
operator|=
name|connector
expr_stmt|;
block|}
comment|/**      * @return Returns the inboundMessageConvertor.      */
specifier|public
name|JmsMesageConvertor
name|getJmsMessageConvertor
parameter_list|()
block|{
return|return
name|jmsMessageConvertor
return|;
block|}
comment|/**      * @param jmsMessageConvertor      */
specifier|public
name|void
name|setJmsMessageConvertor
parameter_list|(
name|JmsMesageConvertor
name|jmsMessageConvertor
parameter_list|)
block|{
name|this
operator|.
name|jmsMessageConvertor
operator|=
name|jmsMessageConvertor
expr_stmt|;
block|}
specifier|protected
name|Destination
name|processReplyToDestination
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
return|return
name|jmsConnector
operator|.
name|createReplyToBridge
argument_list|(
name|destination
argument_list|,
name|getConnnectionForConsumer
argument_list|()
argument_list|,
name|getConnectionForProducer
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|createConsumer
argument_list|()
expr_stmt|;
name|createProducer
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|started
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|int
name|attempt
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|maxRetries
init|=
name|jmsConnector
operator|.
name|getReconnectionPolicy
argument_list|()
operator|.
name|getMaxSendRetries
argument_list|()
decl_stmt|;
while|while
condition|(
name|started
operator|.
name|get
argument_list|()
operator|&&
name|message
operator|!=
literal|null
operator|&&
operator|(
name|maxRetries
operator|==
name|ReconnectionPolicy
operator|.
name|INFINITE
operator|||
name|attempt
operator|<=
name|maxRetries
operator|)
condition|)
block|{
try|try
block|{
if|if
condition|(
name|attempt
operator|++
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|jmsConnector
operator|.
name|getReconnectionPolicy
argument_list|()
operator|.
name|getNextDelay
argument_list|(
name|attempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|Message
name|converted
decl_stmt|;
if|if
condition|(
name|jmsMessageConvertor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|doHandleReplyTo
condition|)
block|{
name|Destination
name|replyTo
init|=
name|message
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
name|converted
operator|=
name|jmsMessageConvertor
operator|.
name|convert
argument_list|(
name|message
argument_list|,
name|processReplyToDestination
argument_list|(
name|replyTo
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|converted
operator|=
name|jmsMessageConvertor
operator|.
name|convert
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|message
operator|.
name|setJMSReplyTo
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|converted
operator|=
name|jmsMessageConvertor
operator|.
name|convert
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// The Producer side is not up or not yet configured, retry.
continue|continue;
block|}
try|try
block|{
name|sendMessage
argument_list|(
name|converted
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|jmsConnector
operator|.
name|handleConnectionFailure
argument_list|(
name|getConnectionForProducer
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
try|try
block|{
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|jmsConnector
operator|.
name|handleConnectionFailure
argument_list|(
name|getConnnectionForConsumer
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// if we got here then it made it out and was ack'd
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"failed to forward message on attempt: {} reason: {} message: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|attempt
block|,
name|e
block|,
name|message
block|}
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @return Returns the doHandleReplyTo.      */
specifier|public
name|boolean
name|isDoHandleReplyTo
parameter_list|()
block|{
return|return
name|doHandleReplyTo
return|;
block|}
comment|/**      * @param doHandleReplyTo The doHandleReplyTo to set.      */
specifier|public
name|void
name|setDoHandleReplyTo
parameter_list|(
name|boolean
name|doHandleReplyTo
parameter_list|)
block|{
name|this
operator|.
name|doHandleReplyTo
operator|=
name|doHandleReplyTo
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|MessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
specifier|protected
specifier|abstract
name|MessageProducer
name|createProducer
parameter_list|()
throws|throws
name|JMSException
function_decl|;
specifier|protected
specifier|abstract
name|void
name|sendMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
function_decl|;
specifier|protected
specifier|abstract
name|Connection
name|getConnnectionForConsumer
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Connection
name|getConnectionForProducer
parameter_list|()
function_decl|;
block|}
end_class

end_unit

