begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpNioTransportHelper
block|{
specifier|private
specifier|final
name|DataInputStream
name|amqpHeaderValue
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'A'
block|,
literal|'M'
block|,
literal|'Q'
block|,
literal|'P'
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Integer
name|AMQP_HEADER_VALUE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpNioTransportHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|nextFrameSize
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|ByteBuffer
name|currentBuffer
decl_stmt|;
specifier|private
name|boolean
name|magicConsumed
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|TransportSupport
name|transportSupport
decl_stmt|;
specifier|public
name|AmqpNioTransportHelper
parameter_list|(
name|TransportSupport
name|transportSupport
parameter_list|)
throws|throws
name|IOException
block|{
name|AMQP_HEADER_VALUE
operator|=
name|amqpHeaderValue
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|this
operator|.
name|transportSupport
operator|=
name|transportSupport
expr_stmt|;
block|}
specifier|protected
name|void
name|processCommand
parameter_list|(
name|ByteBuffer
name|plain
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Are we waiting for the next Command or building on the current one?
comment|// The frame size is in the first 4 bytes.
if|if
condition|(
name|nextFrameSize
operator|==
operator|-
literal|1
condition|)
block|{
comment|// We can get small packets that don't give us enough for the frame
comment|// size so allocate enough for the initial size value and
if|if
condition|(
name|plain
operator|.
name|remaining
argument_list|()
operator|<
literal|4
condition|)
block|{
if|if
condition|(
name|currentBuffer
operator|==
literal|null
condition|)
block|{
name|currentBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// Go until we fill the integer sized current buffer.
while|while
condition|(
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
operator|&&
name|plain
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentBuffer
operator|.
name|put
argument_list|(
name|plain
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Didn't we get enough yet to figure out next frame size.
if|if
condition|(
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
name|currentBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|nextFrameSize
operator|=
name|currentBuffer
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Either we are completing a previous read of the next frame
comment|// size or its fully contained in plain already.
if|if
condition|(
name|currentBuffer
operator|!=
literal|null
condition|)
block|{
comment|// Finish the frame size integer read and get from the
comment|// current buffer.
while|while
condition|(
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentBuffer
operator|.
name|put
argument_list|(
name|plain
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|nextFrameSize
operator|=
name|currentBuffer
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nextFrameSize
operator|=
name|plain
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// There are three possibilities when we get here. We could have a
comment|// partial frame, a full frame, or more than 1 frame
while|while
condition|(
literal|true
condition|)
block|{
comment|// handle headers, which start with 'A','M','Q','P' rather than size
if|if
condition|(
name|nextFrameSize
operator|==
name|AMQP_HEADER_VALUE
condition|)
block|{
name|nextFrameSize
operator|=
name|handleAmqpHeader
argument_list|(
name|plain
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextFrameSize
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
block|}
name|validateFrameSize
argument_list|(
name|nextFrameSize
argument_list|)
expr_stmt|;
comment|// now we have the data, let's reallocate and try to fill it,
comment|// (currentBuffer.putInt() is called TODO update
comment|// because we need to put back the 4 bytes we read to determine the
comment|// size)
if|if
condition|(
name|currentBuffer
operator|==
literal|null
operator|||
operator|(
name|currentBuffer
operator|.
name|limit
argument_list|()
operator|==
literal|4
operator|)
condition|)
block|{
name|currentBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|nextFrameSize
argument_list|)
expr_stmt|;
name|currentBuffer
operator|.
name|putInt
argument_list|(
name|nextFrameSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currentBuffer
operator|.
name|remaining
argument_list|()
operator|>=
name|plain
operator|.
name|remaining
argument_list|()
condition|)
block|{
name|currentBuffer
operator|.
name|put
argument_list|(
name|plain
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|fill
init|=
operator|new
name|byte
index|[
name|currentBuffer
operator|.
name|remaining
argument_list|()
index|]
decl_stmt|;
name|plain
operator|.
name|get
argument_list|(
name|fill
argument_list|)
expr_stmt|;
name|currentBuffer
operator|.
name|put
argument_list|(
name|fill
argument_list|)
expr_stmt|;
block|}
comment|// Either we have enough data for a new command or we have to wait for some more.
comment|// If hasRemaining is true, we have not filled the buffer yet, i.e. we haven't
comment|// received the full frame.
if|if
condition|(
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return;
block|}
else|else
block|{
name|currentBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Calling doConsume with position {} limit {}"
argument_list|,
name|currentBuffer
operator|.
name|position
argument_list|()
argument_list|,
name|currentBuffer
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|transportSupport
operator|.
name|doConsume
argument_list|(
name|AmqpSupport
operator|.
name|toBuffer
argument_list|(
name|currentBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|currentBuffer
operator|=
literal|null
expr_stmt|;
name|nextFrameSize
operator|=
operator|-
literal|1
expr_stmt|;
comment|// Determine if there are more frames to process
if|if
condition|(
name|plain
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
if|if
condition|(
name|plain
operator|.
name|remaining
argument_list|()
operator|<
literal|4
condition|)
block|{
name|currentBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|4
argument_list|)
expr_stmt|;
while|while
condition|(
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
operator|&&
name|plain
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentBuffer
operator|.
name|put
argument_list|(
name|plain
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
name|nextFrameSize
operator|=
name|plain
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|validateFrameSize
parameter_list|(
name|int
name|frameSize
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextFrameSize
operator|>
name|AmqpWireFormat
operator|.
name|DEFAULT_MAX_FRAME_SIZE
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Frame size of "
operator|+
name|nextFrameSize
operator|+
literal|"larger than max allowed "
operator|+
name|AmqpWireFormat
operator|.
name|DEFAULT_MAX_FRAME_SIZE
argument_list|)
throw|;
block|}
block|}
specifier|private
name|int
name|handleAmqpHeader
parameter_list|(
name|ByteBuffer
name|plain
parameter_list|)
block|{
name|int
name|nextFrameSize
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consuming AMQP_HEADER"
argument_list|)
expr_stmt|;
name|currentBuffer
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|currentBuffer
operator|.
name|putInt
argument_list|(
name|AMQP_HEADER_VALUE
argument_list|)
expr_stmt|;
while|while
condition|(
name|currentBuffer
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|currentBuffer
operator|.
name|put
argument_list|(
name|plain
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|currentBuffer
operator|.
name|flip
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|magicConsumed
condition|)
block|{
comment|// The first case we see is special and has to be handled differently
name|transportSupport
operator|.
name|doConsume
argument_list|(
operator|new
name|AmqpHeader
argument_list|(
operator|new
name|Buffer
argument_list|(
name|currentBuffer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|magicConsumed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|transportSupport
operator|.
name|doConsume
argument_list|(
name|AmqpSupport
operator|.
name|toBuffer
argument_list|(
name|currentBuffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|currentBuffer
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|plain
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
if|if
condition|(
name|plain
operator|.
name|remaining
argument_list|()
operator|<
literal|4
condition|)
block|{
name|nextFrameSize
operator|=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|nextFrameSize
operator|=
name|plain
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|nextFrameSize
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|nextFrameSize
return|;
block|}
block|}
end_class

end_unit

