begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|jabber
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|AbstractWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|util
operator|.
name|ByteArray
import|;
end_import

begin_comment
comment|/**  * A wire format which uses XMPP format of messages  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|JabberWireFormat
extends|extends
name|AbstractWireFormat
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JabberWireFormat
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|WireFormat
name|copy
parameter_list|()
block|{
return|return
operator|new
name|JabberWireFormat
argument_list|()
return|;
block|}
specifier|public
name|Packet
name|readPacket
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
comment|/** TODO */
block|}
specifier|public
name|Packet
name|readPacket
parameter_list|(
name|int
name|firstByte
parameter_list|,
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
comment|/** TODO */
block|}
specifier|public
name|Packet
name|writePacket
parameter_list|(
name|Packet
name|packet
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
switch|switch
condition|(
name|packet
operator|.
name|getPacketType
argument_list|()
condition|)
block|{
case|case
name|Packet
operator|.
name|ACTIVEMQ_MESSAGE
case|:
name|writeMessage
argument_list|(
operator|(
name|ActiveMQMessage
operator|)
name|packet
argument_list|,
literal|""
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|Packet
operator|.
name|ACTIVEMQ_TEXT_MESSAGE
case|:
name|writeTextMessage
argument_list|(
operator|(
name|ActiveMQTextMessage
operator|)
name|packet
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|Packet
operator|.
name|ACTIVEMQ_BYTES_MESSAGE
case|:
name|writeBytesMessage
argument_list|(
operator|(
name|ActiveMQBytesMessage
operator|)
name|packet
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|Packet
operator|.
name|ACTIVEMQ_OBJECT_MESSAGE
case|:
name|writeObjectMessage
argument_list|(
operator|(
name|ActiveMQObjectMessage
operator|)
name|packet
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|Packet
operator|.
name|ACTIVEMQ_MAP_MESSAGE
case|:
case|case
name|Packet
operator|.
name|ACTIVEMQ_STREAM_MESSAGE
case|:
case|case
name|Packet
operator|.
name|ACTIVEMQ_BROKER_INFO
case|:
case|case
name|Packet
operator|.
name|ACTIVEMQ_CONNECTION_INFO
case|:
case|case
name|Packet
operator|.
name|ACTIVEMQ_MSG_ACK
case|:
case|case
name|Packet
operator|.
name|CONSUMER_INFO
case|:
case|case
name|Packet
operator|.
name|DURABLE_UNSUBSCRIBE
case|:
case|case
name|Packet
operator|.
name|INT_RESPONSE_RECEIPT_INFO
case|:
case|case
name|Packet
operator|.
name|PRODUCER_INFO
case|:
case|case
name|Packet
operator|.
name|RECEIPT_INFO
case|:
case|case
name|Packet
operator|.
name|RESPONSE_RECEIPT_INFO
case|:
case|case
name|Packet
operator|.
name|SESSION_INFO
case|:
case|case
name|Packet
operator|.
name|TRANSACTION_INFO
case|:
case|case
name|Packet
operator|.
name|XA_TRANSACTION_INFO
case|:
default|default:
name|log
operator|.
name|warn
argument_list|(
literal|"Ignoring message type: "
operator|+
name|packet
operator|.
name|getPacketType
argument_list|()
operator|+
literal|" packet: "
operator|+
name|packet
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Can this wireformat process packets of this version      * @param version the version number to test      * @return true if can accept the version      */
specifier|public
name|boolean
name|canProcessWireFormatVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @return the current version of this wire format      */
specifier|public
name|int
name|getCurrentWireFormatVersion
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
specifier|protected
name|void
name|writeObjectMessage
parameter_list|(
name|ActiveMQObjectMessage
name|message
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
name|Serializable
name|object
init|=
name|message
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|String
name|text
init|=
operator|(
name|object
operator|!=
literal|null
operator|)
condition|?
name|object
operator|.
name|toString
argument_list|()
else|:
literal|""
decl_stmt|;
name|writeMessage
argument_list|(
name|message
argument_list|,
name|text
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeTextMessage
parameter_list|(
name|ActiveMQTextMessage
name|message
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|JMSException
throws|,
name|IOException
block|{
name|writeMessage
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeBytesMessage
parameter_list|(
name|ActiveMQBytesMessage
name|message
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArray
name|data
init|=
name|message
operator|.
name|getBodyAsBytes
argument_list|()
decl_stmt|;
name|String
name|text
init|=
name|encodeBinary
argument_list|(
name|data
operator|.
name|getBuf
argument_list|()
argument_list|,
name|data
operator|.
name|getOffset
argument_list|()
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|writeMessage
argument_list|(
name|message
argument_list|,
name|text
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeMessage
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|,
name|String
name|body
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|getXmppType
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<"
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" to='"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|message
operator|.
name|getJMSDestination
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"' from='"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|message
operator|.
name|getJMSReplyTo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|messageID
init|=
name|message
operator|.
name|getJMSMessageID
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageID
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"' id='"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|messageID
argument_list|)
expr_stmt|;
block|}
name|HashMap
name|properties
init|=
name|message
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|properties
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"' "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"'>"
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|message
operator|.
name|getJMSCorrelationID
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"<thread>"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"</thread>"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|encodeBinary
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
comment|// TODO
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not implemented yet!"
argument_list|)
throw|;
block|}
specifier|protected
name|String
name|getXmppType
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
block|{
name|String
name|type
init|=
name|message
operator|.
name|getJMSType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
literal|"message"
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

