begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_comment
comment|/**  * Implements marshalling and unmarsalling the<a  * href="http://mqtt.org/">MQTT</a> protocol.  */
end_comment

begin_class
specifier|public
class|class
name|MQTTWireFormat
implements|implements
name|WireFormat
block|{
specifier|static
specifier|final
name|int
name|MAX_MESSAGE_LENGTH
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|256
decl_stmt|;
specifier|static
specifier|final
name|long
name|DEFAULT_CONNECTION_TIMEOUT
init|=
literal|30000L
decl_stmt|;
specifier|private
name|int
name|version
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|maxFrameSize
init|=
name|MAX_MESSAGE_LENGTH
decl_stmt|;
specifier|private
name|long
name|connectAttemptTimeout
init|=
name|MQTTWireFormat
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ByteSequence
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|marshal
argument_list|(
name|command
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|baos
operator|.
name|toByteSequence
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|ByteSequence
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayInputStream
name|stream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
return|return
name|unmarshal
argument_list|(
name|dis
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|MQTTFrame
name|frame
init|=
operator|(
name|MQTTFrame
operator|)
name|command
decl_stmt|;
name|dataOut
operator|.
name|write
argument_list|(
name|frame
operator|.
name|header
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|remaining
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Buffer
name|buffer
range|:
name|frame
operator|.
name|buffers
control|)
block|{
name|remaining
operator|+=
name|buffer
operator|.
name|length
expr_stmt|;
block|}
do|do
block|{
name|byte
name|digit
init|=
call|(
name|byte
call|)
argument_list|(
name|remaining
operator|&
literal|0x7F
argument_list|)
decl_stmt|;
name|remaining
operator|>>>=
literal|7
expr_stmt|;
if|if
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|digit
operator||=
literal|0x80
expr_stmt|;
block|}
name|dataOut
operator|.
name|write
argument_list|(
name|digit
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|remaining
operator|>
literal|0
condition|)
do|;
for|for
control|(
name|Buffer
name|buffer
range|:
name|frame
operator|.
name|buffers
control|)
block|{
name|dataOut
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|data
argument_list|,
name|buffer
operator|.
name|offset
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|header
init|=
name|dataIn
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|byte
name|digit
decl_stmt|;
name|int
name|multiplier
init|=
literal|1
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
do|do
block|{
name|digit
operator|=
name|dataIn
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|length
operator|+=
operator|(
name|digit
operator|&
literal|0x7F
operator|)
operator|*
name|multiplier
expr_stmt|;
name|multiplier
operator|<<=
literal|7
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|digit
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
do|;
if|if
condition|(
name|length
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|length
operator|>
name|getMaxFrameSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The maximum message length was exceeded"
argument_list|)
throw|;
block|}
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|dataIn
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Buffer
name|body
init|=
operator|new
name|Buffer
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
operator|new
name|MQTTFrame
argument_list|(
name|body
argument_list|)
operator|.
name|header
argument_list|(
name|header
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|MQTTFrame
argument_list|()
operator|.
name|header
argument_list|(
name|header
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param the version of the wire format      */
annotation|@
name|Override
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
comment|/**      * @return the version of the wire format      */
annotation|@
name|Override
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|this
operator|.
name|version
return|;
block|}
comment|/**      * @return the maximum number of bytes a single MQTT message frame is allowed to be.      */
specifier|public
name|int
name|getMaxFrameSize
parameter_list|()
block|{
return|return
name|maxFrameSize
return|;
block|}
comment|/**      * Sets the maximum frame size for an incoming MQTT frame.  The protocl limit is      * 256 megabytes and this value cannot be set higher.      *      * @param maxFrameSize      *        the maximum allowed frame size for a single MQTT frame.      */
specifier|public
name|void
name|setMaxFrameSize
parameter_list|(
name|int
name|maxFrameSize
parameter_list|)
block|{
name|this
operator|.
name|maxFrameSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|MAX_MESSAGE_LENGTH
argument_list|,
name|maxFrameSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the timeout value used to fail a connection if no CONNECT frame read.      */
specifier|public
name|long
name|getConnectAttemptTimeout
parameter_list|()
block|{
return|return
name|connectAttemptTimeout
return|;
block|}
comment|/**      * Sets the timeout value used to fail a connection if no CONNECT frame is read      * in the given interval.      *      * @param connectTimeout      *        the connection frame received timeout value.      */
specifier|public
name|void
name|setConnectAttemptTimeout
parameter_list|(
name|long
name|connectTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectAttemptTimeout
operator|=
name|connectTimeout
expr_stmt|;
block|}
block|}
end_class

end_unit

