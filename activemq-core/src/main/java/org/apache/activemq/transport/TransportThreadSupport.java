begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * A useful base class for a transport implementation which has a background  * reading thread.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TransportThreadSupport
extends|extends
name|TransportSupport
implements|implements
name|Runnable
block|{
specifier|private
name|boolean
name|daemon
init|=
literal|false
decl_stmt|;
specifier|private
name|Thread
name|runner
decl_stmt|;
specifier|public
name|boolean
name|isDaemon
parameter_list|()
block|{
return|return
name|daemon
return|;
block|}
specifier|public
name|void
name|setDaemon
parameter_list|(
name|boolean
name|daemon
parameter_list|)
block|{
name|this
operator|.
name|daemon
operator|=
name|daemon
expr_stmt|;
block|}
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|runner
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|runner
operator|.
name|setDaemon
argument_list|(
name|daemon
argument_list|)
expr_stmt|;
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|checkStarted
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
block|{
comment|// we might try to shut down the transport before it was ever started in some test cases
if|if
condition|(
operator|!
operator|(
name|command
operator|instanceof
name|ShutdownInfo
operator|||
name|command
operator|instanceof
name|RemoveInfo
operator|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The transport "
operator|+
name|this
operator|+
literal|" of type: "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not running."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

