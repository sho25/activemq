begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLStreamHandlerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|xbean
operator|.
name|XBeanBrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|RequestReplyNoAdvisoryNetworkTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RequestReplyNoAdvisoryNetworkTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|BrokerService
argument_list|>
name|brokers
init|=
operator|new
name|Vector
argument_list|<
name|BrokerService
argument_list|>
argument_list|()
decl_stmt|;
name|BrokerService
name|a
decl_stmt|,
name|b
decl_stmt|;
name|ActiveMQQueue
name|sendQ
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"sendQ"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|connectionIdMarker
init|=
literal|"ID:marker."
decl_stmt|;
name|ActiveMQTempQueue
name|replyQWildcard
init|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionIdMarker
operator|+
literal|">"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|long
name|receiveTimeout
init|=
literal|30000
decl_stmt|;
specifier|public
name|void
name|testNonAdvisoryNetworkRequestReplyXmlConfig
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|xmlConfigString
init|=
operator|new
name|String
argument_list|(
literal|"<beans"
operator|+
literal|" xmlns=\"http://www.springframework.org/schema/beans\""
operator|+
literal|" xmlns:amq=\"http://activemq.apache.org/schema/core\""
operator|+
literal|" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""
operator|+
literal|" xsi:schemaLocation=\"http://www.springframework.org/schema/beans"
operator|+
literal|" http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"
operator|+
literal|" http://activemq.apache.org/schema/core"
operator|+
literal|" http://activemq.apache.org/schema/core/activemq-core.xsd\">"
operator|+
literal|"<broker xmlns=\"http://activemq.apache.org/schema/core\" id=\"broker\""
operator|+
literal|"    allowTempAutoCreationOnSend=\"true\" schedulePeriodForDestinationPurge=\"1000\""
operator|+
literal|"    brokerName=\"%HOST%\" persistent=\"false\" advisorySupport=\"false\" useJmx=\"false\">"
operator|+
literal|"<destinationPolicy>"
operator|+
literal|"<policyMap>"
operator|+
literal|"<policyEntries>"
operator|+
literal|"<policyEntry optimizedDispatch=\"true\"  gcInactiveDestinations=\"true\" gcWithNetworkConsumers=\"true\" inactiveTimoutBeforeGC=\"1000\">"
operator|+
literal|"<destination>"
operator|+
literal|"<tempQueue physicalName=\""
operator|+
name|replyQWildcard
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|"\"/>"
operator|+
literal|"</destination>"
operator|+
literal|"</policyEntry>"
operator|+
literal|"</policyEntries>"
operator|+
literal|"</policyMap>"
operator|+
literal|"</destinationPolicy>"
operator|+
literal|"<networkConnectors>"
operator|+
literal|"<networkConnector uri=\"multicast://default\">"
operator|+
literal|"<staticallyIncludedDestinations>"
operator|+
literal|"<queue physicalName=\""
operator|+
name|sendQ
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|"\"/>"
operator|+
literal|"<tempQueue physicalName=\""
operator|+
name|replyQWildcard
operator|.
name|getPhysicalName
argument_list|()
operator|+
literal|"\"/>"
operator|+
literal|"</staticallyIncludedDestinations>"
operator|+
literal|"</networkConnector>"
operator|+
literal|"</networkConnectors>"
operator|+
literal|"<transportConnectors>"
operator|+
literal|"<transportConnector uri=\"tcp://0.0.0.0:0\" discoveryUri=\"multicast://default\" />"
operator|+
literal|"</transportConnectors>"
operator|+
literal|"</broker>"
operator|+
literal|"</beans>"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|localProtocolScheme
init|=
literal|"inline"
decl_stmt|;
name|URL
operator|.
name|setURLStreamHandlerFactory
argument_list|(
operator|new
name|URLStreamHandlerFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|URLStreamHandler
name|createURLStreamHandler
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
if|if
condition|(
name|localProtocolScheme
operator|.
name|equalsIgnoreCase
argument_list|(
name|protocol
argument_list|)
condition|)
block|{
return|return
operator|new
name|URLStreamHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|URLConnection
name|openConnection
parameter_list|(
name|URL
name|u
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|URLConnection
argument_list|(
name|u
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{                                 }
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|xmlConfigString
operator|.
name|replace
argument_list|(
literal|"%HOST%"
argument_list|,
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|XBeanBrokerFactory
argument_list|()
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"xbean:"
operator|+
name|localProtocolScheme
operator|+
literal|":A"
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|=
operator|new
name|XBeanBrokerFactory
argument_list|()
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"xbean:"
operator|+
name|localProtocolScheme
operator|+
literal|":B"
argument_list|)
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|doTestNonAdvisoryNetworkRequestReply
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testNonAdvisoryNetworkRequestReply
parameter_list|()
throws|throws
name|Exception
block|{
name|createBridgeAndStartBrokers
argument_list|()
expr_stmt|;
name|doTestNonAdvisoryNetworkRequestReply
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testNonAdvisoryNetworkRequestReplyWithPIM
parameter_list|()
throws|throws
name|Exception
block|{
name|a
operator|=
name|configureBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|b
operator|=
name|configureBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|BrokerService
name|hub
init|=
name|configureBroker
argument_list|(
literal|"M"
argument_list|)
decl_stmt|;
name|hub
operator|.
name|setAllowTempAutoCreationOnSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|configureForPiggyInTheMiddle
argument_list|(
name|bridge
argument_list|(
name|a
argument_list|,
name|hub
argument_list|)
argument_list|)
expr_stmt|;
name|configureForPiggyInTheMiddle
argument_list|(
name|bridge
argument_list|(
name|b
argument_list|,
name|hub
argument_list|)
argument_list|)
expr_stmt|;
name|startBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|(
name|hub
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|doTestNonAdvisoryNetworkRequestReply
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|configureForPiggyInTheMiddle
parameter_list|(
name|NetworkConnector
name|bridge
parameter_list|)
block|{
name|bridge
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setNetworkTTL
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestNonAdvisoryNetworkRequestReply
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForBridgeFormation
argument_list|(
name|a
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|waitForBridgeFormation
argument_list|(
name|b
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ActiveMQConnectionFactory
name|sendFactory
init|=
name|createConnectionFactory
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|sendConnection
init|=
name|createConnection
argument_list|(
name|sendFactory
argument_list|)
decl_stmt|;
name|ActiveMQSession
name|sendSession
init|=
operator|(
name|ActiveMQSession
operator|)
name|sendConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|sendSession
operator|.
name|createProducer
argument_list|(
name|sendQ
argument_list|)
decl_stmt|;
name|ActiveMQTempQueue
name|realReplyQ
init|=
operator|(
name|ActiveMQTempQueue
operator|)
name|sendSession
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|TextMessage
name|message
init|=
name|sendSession
operator|.
name|createTextMessage
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|realReplyQ
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"request sent"
argument_list|)
expr_stmt|;
comment|// responder
name|ActiveMQConnectionFactory
name|consumerFactory
init|=
name|createConnectionFactory
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|consumerConnection
init|=
name|createConnection
argument_list|(
name|consumerFactory
argument_list|)
decl_stmt|;
name|ActiveMQSession
name|consumerSession
init|=
operator|(
name|ActiveMQSession
operator|)
name|consumerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|sendQ
argument_list|)
decl_stmt|;
name|TextMessage
name|received
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
name|receiveTimeout
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got request from sender ok"
argument_list|,
name|received
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got request, sending reply"
argument_list|)
expr_stmt|;
name|MessageProducer
name|consumerProducer
init|=
name|consumerSession
operator|.
name|createProducer
argument_list|(
name|received
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|)
decl_stmt|;
name|consumerProducer
operator|.
name|send
argument_list|(
name|consumerSession
operator|.
name|createTextMessage
argument_list|(
literal|"got "
operator|+
name|received
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// temp dest on reply broker tied to this connection, setOptimizedDispatch=true ensures
comment|// message gets delivered before destination is removed
name|consumerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// reply consumer
name|MessageConsumer
name|replyConsumer
init|=
name|sendSession
operator|.
name|createConsumer
argument_list|(
name|realReplyQ
argument_list|)
decl_stmt|;
name|TextMessage
name|reply
init|=
operator|(
name|TextMessage
operator|)
name|replyConsumer
operator|.
name|receive
argument_list|(
name|receiveTimeout
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"expected reply message"
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"text is as expected"
argument_list|,
literal|"got 1"
argument_list|,
name|reply
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|sendConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"checking for dangling temp destinations"
argument_list|)
expr_stmt|;
comment|// ensure all temp dests get cleaned up on all brokers
for|for
control|(
name|BrokerService
name|brokerService
range|:
name|brokers
control|)
block|{
specifier|final
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"all temps are gone on "
operator|+
name|regionBroker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|tempTopics
init|=
name|regionBroker
operator|.
name|getTempTopicRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"temp topics on "
operator|+
name|regionBroker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|tempTopics
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|tempQ
init|=
name|regionBroker
operator|.
name|getTempQueueRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"temp queues on "
operator|+
name|regionBroker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|tempQ
argument_list|)
expr_stmt|;
return|return
name|tempQ
operator|.
name|isEmpty
argument_list|()
operator|&&
name|tempTopics
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ActiveMQConnection
name|createConnection
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|c
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|private
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|target
init|=
name|brokerService
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setConnectionIDPrefix
argument_list|(
name|connectionIdMarker
operator|+
name|brokerService
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
specifier|public
name|void
name|createBridgeAndStartBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|a
operator|=
name|configureBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|b
operator|=
name|configureBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|bridge
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|bridge
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|startBrokers
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|startBrokers
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BrokerService
name|broker
range|:
name|brokers
control|)
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|BrokerService
name|broker
range|:
name|brokers
control|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|brokers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|NetworkConnector
name|bridge
parameter_list|(
name|BrokerService
name|from
parameter_list|,
name|BrokerService
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportConnector
name|toConnector
init|=
name|to
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NetworkConnector
name|bridge
init|=
name|from
operator|.
name|addNetworkConnector
argument_list|(
literal|"static://"
operator|+
name|toConnector
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|sendQ
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|replyQWildcard
argument_list|)
expr_stmt|;
return|return
name|bridge
return|;
block|}
specifier|private
name|BrokerService
name|configureBroker
parameter_list|(
name|String
name|brokerName
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSchedulePeriodForDestinationPurge
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAllowTempAutoCreationOnSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PolicyMap
name|map
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|tempReplyQPolicy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|tempReplyQPolicy
operator|.
name|setOptimizedDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tempReplyQPolicy
operator|.
name|setGcInactiveDestinations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tempReplyQPolicy
operator|.
name|setGcWithNetworkConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tempReplyQPolicy
operator|.
name|setInactiveTimoutBeforeGC
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|replyQWildcard
argument_list|,
name|tempReplyQPolicy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|add
argument_list|(
name|broker
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
end_class

end_unit

