begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_comment
comment|/**  * Allows you to open a data file in read only mode.  Useful when working with   * archived data files.  */
end_comment

begin_class
specifier|public
class|class
name|ReadOnlyDataFile
extends|extends
name|DataFile
block|{
name|ReadOnlyDataFile
parameter_list|(
name|File
name|file
parameter_list|,
name|int
name|number
parameter_list|,
name|long
name|preferedSize
parameter_list|)
block|{
name|super
argument_list|(
name|file
argument_list|,
name|number
argument_list|,
name|preferedSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RandomAccessFile
name|openRandomAccessFile
parameter_list|(
name|boolean
name|appender
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"r"
argument_list|)
return|;
block|}
specifier|public
name|void
name|closeRandomAccessFile
parameter_list|(
name|RandomAccessFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|delete
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not valid on a read only file."
argument_list|)
throw|;
block|}
specifier|public
specifier|synchronized
name|void
name|move
parameter_list|(
name|File
name|targetDirectory
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not valid on a read only file."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

