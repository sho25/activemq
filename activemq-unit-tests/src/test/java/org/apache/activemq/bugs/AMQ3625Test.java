begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|AMQ3625Test
block|{
specifier|protected
name|BrokerService
name|broker1
decl_stmt|;
specifier|protected
name|BrokerService
name|broker2
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|authenticationFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|gotNPE
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|java_security_auth_login_config
init|=
literal|"java.security.auth.login.config"
decl_stmt|;
specifier|protected
name|String
name|xbean
init|=
literal|"xbean:"
decl_stmt|;
specifier|protected
name|String
name|base
init|=
literal|"src/test/resources/org/apache/activemq/bugs/amq3625"
decl_stmt|;
specifier|protected
name|String
name|conf
init|=
literal|"conf"
decl_stmt|;
specifier|protected
name|String
name|keys
init|=
literal|"keys"
decl_stmt|;
specifier|protected
name|String
name|sep
init|=
name|File
operator|.
name|separator
decl_stmt|;
specifier|protected
name|String
name|JaasStompSSLBroker1_xml
init|=
literal|"JaasStompSSLBroker1.xml"
decl_stmt|;
specifier|protected
name|String
name|JaasStompSSLBroker2_xml
init|=
literal|"JaasStompSSLBroker2.xml"
decl_stmt|;
specifier|protected
name|String
name|oldLoginConf
init|=
literal|null
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
name|java_security_auth_login_config
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|oldLoginConf
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|java_security_auth_login_config
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|setProperty
argument_list|(
name|java_security_auth_login_config
argument_list|,
name|base
operator|+
name|sep
operator|+
name|conf
operator|+
name|sep
operator|+
literal|"login.config"
argument_list|)
expr_stmt|;
name|broker1
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|xbean
operator|+
name|base
operator|+
name|sep
operator|+
name|conf
operator|+
name|sep
operator|+
name|JaasStompSSLBroker1_xml
argument_list|)
expr_stmt|;
name|broker2
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|xbean
operator|+
name|base
operator|+
name|sep
operator|+
name|conf
operator|+
name|sep
operator|+
name|JaasStompSSLBroker2_xml
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|oldLoginConf
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|java_security_auth_login_config
argument_list|,
name|oldLoginConf
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|go
parameter_list|()
throws|throws
name|Exception
block|{
name|Appender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getThrowableInformation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Throwable
name|t
init|=
name|event
operator|.
name|getThrowableInformation
argument_list|()
operator|.
name|getThrowable
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|SecurityException
condition|)
block|{
name|authenticationFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|NullPointerException
condition|)
block|{
name|gotNPE
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|String
name|connectURI
init|=
name|broker1
operator|.
name|getConnectorByName
argument_list|(
literal|"openwire"
argument_list|)
operator|.
name|getConnectUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|connectURI
operator|=
name|connectURI
operator|.
name|replace
argument_list|(
literal|"?needClientAuth=true"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|addNetworkConnector
argument_list|(
literal|"static:("
operator|+
name|connectURI
operator|+
literal|")"
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|authenticationFailed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|gotNPE
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

