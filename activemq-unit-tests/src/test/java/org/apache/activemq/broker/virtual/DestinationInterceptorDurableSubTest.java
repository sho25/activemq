begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|xbean
operator|.
name|XBeanBrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test for AMQ-4571.  * checks that durable subscription is fully unregistered   * when using nested destination interceptors.  */
end_comment

begin_class
specifier|public
class|class
name|DestinationInterceptorDurableSubTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DestinationInterceptorDurableSubTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|MBeanServerConnection
name|mbsc
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JMX_CONTEXT_BASE_NAME
init|=
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
decl_stmt|;
comment|/**      * Tests AMQ-4571.      * @throws Exception      */
specifier|public
name|void
name|testVirtualTopicRemoval
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Running testVirtualTopicRemoval()"
argument_list|)
expr_stmt|;
name|String
name|clientId1
init|=
literal|"myId1"
decl_stmt|;
name|String
name|clientId2
init|=
literal|"myId2"
decl_stmt|;
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|broker
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
comment|// create durable sub 1
name|conn
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|conn
operator|.
name|setClientID
argument_list|(
name|clientId1
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|// Topic topic = session.createTopic(destination.getPhysicalName());
name|TopicSubscriber
name|sub1
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|clientId1
argument_list|)
decl_stmt|;
comment|// create durable sub 2
name|TopicSubscriber
name|sub2
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|clientId2
argument_list|)
decl_stmt|;
comment|// verify two subs registered in JMX
name|assertSubscriptionCount
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSubRegisteredInJmx
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|clientId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSubRegisteredInJmx
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|clientId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete sub 1
name|sub1
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|unsubscribe
argument_list|(
name|clientId1
argument_list|)
expr_stmt|;
comment|// verify only one sub registered in JMX
name|assertSubscriptionCount
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isSubRegisteredInJmx
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|clientId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isSubRegisteredInJmx
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|clientId2
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete sub 2
name|sub2
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|unsubscribe
argument_list|(
name|clientId2
argument_list|)
expr_stmt|;
comment|// verify no sub registered in JMX
name|assertSubscriptionCount
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isSubRegisteredInJmx
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|clientId1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isSubRegisteredInJmx
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|clientId2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Connects to broker using JMX      * @return The JMX connection      * @throws IOException in case of any errors      */
specifier|protected
name|MBeanServerConnection
name|connectJMXBroker
parameter_list|()
throws|throws
name|IOException
block|{
comment|// connect to broker via JMX
name|JMXServiceURL
name|url
init|=
operator|new
name|JMXServiceURL
argument_list|(
literal|"service:jmx:rmi:///jndi/rmi://:1299/jmxrmi"
argument_list|)
decl_stmt|;
name|JMXConnector
name|jmxc
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|url
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|mbsc
init|=
name|jmxc
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"JMX connection established"
argument_list|)
expr_stmt|;
return|return
name|mbsc
return|;
block|}
comment|/**      * Asserts that the Subscriptions JMX attribute of a topic has the expected      * count.       * @param topicName name of the topic destination      * @param expectedCount expected number of subscriptions      * @return      */
specifier|protected
name|boolean
name|assertSubscriptionCount
parameter_list|(
name|String
name|topicName
parameter_list|,
name|int
name|expectedCount
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|mbsc
operator|==
literal|null
condition|)
block|{
name|mbsc
operator|=
name|connectJMXBroker
argument_list|()
expr_stmt|;
block|}
comment|// query broker queue size
name|ObjectName
index|[]
name|tmp
init|=
operator|(
name|ObjectName
index|[]
operator|)
name|mbsc
operator|.
name|getAttribute
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|JMX_CONTEXT_BASE_NAME
operator|+
name|topicName
argument_list|)
argument_list|,
literal|"Subscriptions"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCount
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Checks if a subscriptions for topic topicName with subName is registered in JMX      *       * @param topicName physical name of topic destination (excluding prefix 'topic://')      * @param subName name of the durable subscription      * @return true if registered, false otherwise      */
specifier|protected
name|boolean
name|isSubRegisteredInJmx
parameter_list|(
name|String
name|topicName
parameter_list|,
name|String
name|subName
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|mbsc
operator|==
literal|null
condition|)
block|{
name|mbsc
operator|=
name|connectJMXBroker
argument_list|()
expr_stmt|;
block|}
comment|// A durable sub is registered under the Subscriptions JMX attribute of the topic and
comment|// as its own ObjectInstance under the topic's Consumer namespace.
comment|// AMQ-4571 only removed the latter not the former on unsubscribe(), so we need
comment|// to check against both.
name|ObjectName
index|[]
name|names
init|=
operator|(
name|ObjectName
index|[]
operator|)
name|mbsc
operator|.
name|getAttribute
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|JMX_CONTEXT_BASE_NAME
operator|+
name|topicName
argument_list|)
argument_list|,
literal|"Subscriptions"
argument_list|)
decl_stmt|;
name|ObjectInstance
name|instance
init|=
operator|(
name|ObjectInstance
operator|)
name|mbsc
operator|.
name|getObjectInstance
argument_list|(
operator|new
name|ObjectName
argument_list|(
name|JMX_CONTEXT_BASE_NAME
operator|+
name|topicName
operator|+
literal|",endpoint=Consumer,clientId=myId1,consumerId=Durable(myId1_"
operator|+
name|subName
operator|+
literal|")"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|names
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|subName
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|ine
parameter_list|)
block|{
comment|//this may be expected so log at info level
name|LOG
operator|.
name|info
argument_list|(
name|ine
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|XBeanBrokerFactory
name|factory
init|=
operator|new
name|XBeanBrokerFactory
argument_list|()
decl_stmt|;
name|BrokerService
name|answer
init|=
name|factory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
name|getBrokerConfigUri
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// lets disable persistence as we are a test
name|answer
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|useTopic
operator|=
literal|true
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|String
name|getBrokerConfigUri
parameter_list|()
block|{
return|return
literal|"org/apache/activemq/broker/virtual/virtual-topics-and-interceptor.xml"
return|;
block|}
comment|/**      * Simple but custom topic interceptor.      * To be used for testing nested interceptors in conjunction with       * virtual topic interceptor.      */
specifier|public
specifier|static
class|class
name|SimpleDestinationInterceptor
implements|implements
name|DestinationInterceptor
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SimpleDestinationInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|public
name|SimpleDestinationInterceptor
parameter_list|()
block|{         }
comment|/* (non-Javadoc)          * @see org.apache.activemq.broker.BrokerServiceAware#setBrokerService(org.apache.activemq.broker.BrokerService)          */
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setBrokerService()"
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|brokerService
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see org.apache.activemq.broker.region.DestinationInterceptor#intercept(org.apache.activemq.broker.region.Destination)          */
specifier|public
name|Destination
name|intercept
parameter_list|(
specifier|final
name|Destination
name|destination
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"intercept({})"
argument_list|,
name|destination
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destination
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"ActiveMQ"
argument_list|)
condition|)
block|{
return|return
operator|new
name|DestinationFilter
argument_list|(
name|destination
argument_list|)
block|{
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Send message to Destination
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SimpleDestinationInterceptor: Sending message to destination:"
operator|+
name|this
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// message.setDestination(destination.getActiveMQDestination());
name|super
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
return|return
name|destination
return|;
block|}
comment|/* (non-Javadoc)          * @see org.apache.activemq.broker.region.DestinationInterceptor#remove(org.apache.activemq.broker.region.Destination)          */
specifier|public
name|void
name|remove
parameter_list|(
name|Destination
name|destination
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"remove({})"
argument_list|,
name|destination
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
literal|null
expr_stmt|;
block|}
comment|/* (non-Javadoc)          * @see org.apache.activemq.broker.region.DestinationInterceptor#create(org.apache.activemq.broker.Broker, org.apache.activemq.broker.ConnectionContext, org.apache.activemq.command.ActiveMQDestination)          */
specifier|public
name|void
name|create
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"create("
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|context
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

