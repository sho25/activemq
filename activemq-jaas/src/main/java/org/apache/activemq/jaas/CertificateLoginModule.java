begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|FailedLoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A LoginModule that allows for authentication based on SSL certificates.  * Allows for subclasses to define methods used to verify user certificates and  * find user groups. Uses CertificateCallbacks to retrieve certificates.  *   * @author sepandm@gmail.com (Sepand)  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CertificateLoginModule
extends|extends
name|PropertiesLoader
implements|implements
name|LoginModule
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CertificateLoginModule
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CallbackHandler
name|callbackHandler
decl_stmt|;
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|private
name|X509Certificate
name|certificates
index|[]
decl_stmt|;
specifier|private
name|String
name|username
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|groups
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Overriding to allow for proper initialization. Standard JAAS.      */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
name|sharedState
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|callbackHandler
operator|=
name|callbackHandler
expr_stmt|;
name|init
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overriding to allow for certificate-based login. Standard JAAS.      */
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
name|Callback
index|[]
name|callbacks
init|=
operator|new
name|Callback
index|[
literal|1
index|]
decl_stmt|;
name|callbacks
index|[
literal|0
index|]
operator|=
operator|new
name|CertificateCallback
argument_list|()
expr_stmt|;
try|try
block|{
name|callbackHandler
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedCallbackException
name|uce
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|uce
operator|.
name|getMessage
argument_list|()
operator|+
literal|" Unable to obtain client certificates."
argument_list|)
throw|;
block|}
name|certificates
operator|=
operator|(
operator|(
name|CertificateCallback
operator|)
name|callbacks
index|[
literal|0
index|]
operator|)
operator|.
name|getCertificates
argument_list|()
expr_stmt|;
name|username
operator|=
name|getUserNameForCertificates
argument_list|(
name|certificates
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FailedLoginException
argument_list|(
literal|"No user for client certificate: "
operator|+
name|getDistinguishedName
argument_list|(
name|certificates
argument_list|)
argument_list|)
throw|;
block|}
name|groups
operator|=
name|getUserGroups
argument_list|(
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Certificate for user: "
operator|+
name|username
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Overriding to complete login process. Standard JAAS.      */
annotation|@
name|Override
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
name|principals
operator|.
name|add
argument_list|(
operator|new
name|UserPrincipal
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|group
range|:
name|groups
control|)
block|{
name|principals
operator|.
name|add
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|addAll
argument_list|(
name|principals
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"commit"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Standard JAAS override.      */
annotation|@
name|Override
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"abort"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Standard JAAS override.      */
annotation|@
name|Override
specifier|public
name|boolean
name|logout
parameter_list|()
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|removeAll
argument_list|(
name|principals
argument_list|)
expr_stmt|;
name|principals
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|debug
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"logout"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Helper method.      */
specifier|private
name|void
name|clear
parameter_list|()
block|{
name|groups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|certificates
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Should return a unique name corresponding to the certificates given. The      * name returned will be used to look up access levels as well as group      * associations.      *       * @param certs The distinguished name.      * @return The unique name if the certificate is recognized, null otherwise.      */
specifier|protected
specifier|abstract
name|String
name|getUserNameForCertificates
parameter_list|(
specifier|final
name|X509Certificate
index|[]
name|certs
parameter_list|)
throws|throws
name|LoginException
function_decl|;
comment|/**      * Should return a set of the groups this user belongs to. The groups      * returned will be added to the user's credentials.      *       * @param username The username of the client. This is the same name that      *                getUserNameForDn returned for the user's DN.      * @return A Set of the names of the groups this user belongs to.      */
specifier|protected
specifier|abstract
name|Set
argument_list|<
name|String
argument_list|>
name|getUserGroups
parameter_list|(
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|LoginException
function_decl|;
specifier|protected
name|String
name|getDistinguishedName
parameter_list|(
specifier|final
name|X509Certificate
index|[]
name|certs
parameter_list|)
block|{
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
operator|&&
name|certs
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
return|return
name|certs
index|[
literal|0
index|]
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

