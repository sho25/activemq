begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|virtual
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|VirtualDestPerfTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VirtualDestPerfTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|int
name|messageSize
init|=
literal|5
operator|*
literal|1024
decl_stmt|;
specifier|public
name|int
name|messageCount
init|=
literal|10000
decl_stmt|;
name|ActiveMQTopic
name|target
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerService
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"comparison test - 'new' no wait on future with async send broker side is always on"
argument_list|)
specifier|public
name|void
name|testAsyncSendBurstToFillCache
parameter_list|()
throws|throws
name|Exception
block|{
name|startBroker
argument_list|(
literal|4
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setUseAsyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// a burst of messages to fill the cache
name|messageCount
operator|=
literal|22000
expr_stmt|;
name|messageSize
operator|=
literal|10
operator|*
literal|1024
expr_stmt|;
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|results
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"targetQ"
argument_list|)
decl_stmt|;
for|for
control|(
name|Integer
name|numThreads
range|:
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|}
control|)
block|{
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numThreads
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|numMessagesToSend
init|=
operator|new
name|AtomicLong
argument_list|(
name|messageCount
argument_list|)
decl_stmt|;
name|purge
argument_list|()
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
name|i
operator|++
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|produceMessages
argument_list|(
name|numMessagesToSend
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|seconds
init|=
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"For numThreads {} duration {}"
argument_list|,
name|numThreads
operator|.
name|intValue
argument_list|()
argument_list|,
name|seconds
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|numThreads
argument_list|,
name|seconds
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker got {} messages"
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTotalEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Results: {}"
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|purge
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
index|[]
name|queues
init|=
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
decl_stmt|;
if|if
condition|(
name|queues
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|QueueViewMBean
name|queueViewMBean
init|=
operator|(
name|QueueViewMBean
operator|)
name|brokerService
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queues
index|[
literal|0
index|]
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|queueViewMBean
operator|.
name|purge
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"comparison test - takes too long and really needs a peek at the graph"
argument_list|)
specifier|public
name|void
name|testPerf
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|resultsT
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
name|resultsF
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
literal|11
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Boolean
name|concurrent
range|:
operator|new
name|Boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
control|)
block|{
name|startBroker
argument_list|(
name|i
argument_list|,
name|concurrent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|produceMessages
argument_list|(
operator|new
name|AtomicLong
argument_list|(
name|messageCount
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|seconds
init|=
operator|(
name|endTime
operator|-
name|startTime
operator|)
operator|/
literal|1000
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"For routes {} duration {}"
argument_list|,
name|i
argument_list|,
name|seconds
argument_list|)
expr_stmt|;
if|if
condition|(
name|concurrent
condition|)
block|{
name|resultsT
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|seconds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultsF
operator|.
name|put
argument_list|(
name|i
argument_list|,
name|seconds
argument_list|)
expr_stmt|;
block|}
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"results T{} F{}"
argument_list|,
name|resultsT
argument_list|,
name|resultsF
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"http://www.chartgo.com/samples.do?chart=line&border=1&show3d=0&width=600&height=500&roundedge=1&transparency=1&legend=1&title=Send:10k::Concurrent-v-Serial&xtitle=routes&ytitle=Duration(seconds)&chrtbkgndcolor=white&threshold=0.0&lang=en"
operator|+
literal|"&xaxis1="
operator|+
name|toStr
argument_list|(
name|resultsT
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|"&yaxis1="
operator|+
name|toStr
argument_list|(
name|resultsT
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|"&group1=concurrent"
operator|+
literal|"&xaxis2="
operator|+
name|toStr
argument_list|(
name|resultsF
operator|.
name|keySet
argument_list|()
argument_list|)
operator|+
literal|"&yaxis2="
operator|+
name|toStr
argument_list|(
name|resultsF
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|"&group2=serial"
operator|+
literal|"&from=linejsp"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|toStr
parameter_list|(
name|Collection
name|set
parameter_list|)
block|{
return|return
name|set
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|","
argument_list|,
literal|"%0D%0A"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"["
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"]"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|protected
name|void
name|produceMessages
parameter_list|(
name|AtomicLong
name|messageCount
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ByteSequence
name|payLoad
init|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[
name|messageSize
index|]
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|MessageProducer
name|messageProducer
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|messageProducer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|ActiveMQBytesMessage
name|message
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|payLoad
argument_list|)
expr_stmt|;
while|while
condition|(
name|messageCount
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|messageProducer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|startBroker
parameter_list|(
name|int
name|fanoutCount
parameter_list|,
name|boolean
name|concurrentSend
parameter_list|,
name|boolean
name|concurrentStoreAndDispatchQueues
parameter_list|)
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualTopics
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|destPolicyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setOptimizedDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|defaultEntry
operator|.
name|setCursorMemoryHighWaterMark
argument_list|(
literal|110
argument_list|)
expr_stmt|;
name|destPolicyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|destPolicyMap
argument_list|)
expr_stmt|;
name|CompositeTopic
name|route
init|=
operator|new
name|CompositeTopic
argument_list|()
decl_stmt|;
name|route
operator|.
name|setName
argument_list|(
literal|"target"
argument_list|)
expr_stmt|;
name|route
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|route
operator|.
name|setConcurrentSend
argument_list|(
name|concurrentSend
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|ActiveMQQueue
argument_list|>
name|routes
init|=
operator|new
name|ArrayList
argument_list|<
name|ActiveMQQueue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fanoutCount
condition|;
name|i
operator|++
control|)
block|{
name|routes
operator|.
name|add
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"route."
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|route
operator|.
name|setForwardTo
argument_list|(
name|routes
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|interceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|interceptor
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|route
block|}
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationInterceptors
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{
name|interceptor
block|}
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerService
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|connectionFactory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
operator|instanceof
name|KahaDBPersistenceAdapter
condition|)
block|{
comment|//with parallel sends and no consumers, concurrentStoreAnd dispatch, which uses a single thread by default
comment|// will stop/impeed write batching. The num threads will need tweaking when consumers are in the mix but may introduce
comment|// order issues
operator|(
operator|(
name|KahaDBPersistenceAdapter
operator|)
name|brokerService
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|setConcurrentStoreAndDispatchQueues
argument_list|(
name|concurrentStoreAndDispatchQueues
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

