begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Redistribution and use of this software and associated documentation  * ("Software"), with or without modification, are permitted provided  * that the following conditions are met:  *  * 1. Redistributions of source code must retain copyright  *    statements and notices.  Redistributions must also contain a  *    copy of this document.  *  * 2. Redistributions in binary form must reproduce the  *    above copyright notice, this list of conditions and the  *    following disclaimer in the documentation and/or other  *    materials provided with the distribution.  *  * 3. The name "Exolab" must not be used to endorse or promote  *    products derived from this Software without prior written  *    permission of Exoffice Technologies.  For written permission,  *    please contact jima@intalio.com.  *  * 4. Products derived from this Software may not be called "Exolab"  *    nor may "Exolab" appear in their names without prior written  *    permission of Exoffice Technologies. Exolab is a registered  *    trademark of Exoffice Technologies.  *  * 5. Due credit should be given to the Exolab Project  *    (http://www.exolab.org/).  *  * THIS SOFTWARE IS PROVIDED BY EXOFFICE TECHNOLOGIES AND CONTRIBUTORS  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL  * EXOFFICE TECHNOLOGIES OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED  * OF THE POSSIBILITY OF SUCH DAMAGE.  *  * Copyright 2001, 2003 (C) Exoffice Technologies Inc. All Rights Reserved.  * Copyright 2005 (C) Hiram Chirino  *  * $Id: ActiveMQProvider.java,v 1.1.1.1 2005/03/11 21:15:21 jstrachan Exp $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exolab
operator|.
name|jmscts
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NameNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQXAConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|jmscts
operator|.
name|provider
operator|.
name|Administrator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|jmscts
operator|.
name|provider
operator|.
name|Provider
import|;
end_import

begin_comment
comment|/**  * This class provides methods for obtaining and manipulating administered  * objects managed by the ActiveMQ implementation of JMS  *  * @author<a href="mailto:james@protique.com">James Strahcan</a>  * @author<a href="mailto:hiram@protique.com">Hiram Chirino</a>  * @version $Revision: 1.1.1.1 $ $Date: 2005/03/11 21:15:21 $  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQProvider
implements|implements
name|Provider
implements|,
name|Administrator
block|{
specifier|private
name|String
name|brokerURL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"url"
argument_list|,
literal|"vm://localhost"
argument_list|)
decl_stmt|;
specifier|private
name|HashMap
name|directory
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|ActiveMQConnection
name|adminConnection
init|=
literal|null
decl_stmt|;
comment|/**      * Initialises the administation interface      *      * @throws JMSException if the administration interface can't be      *                      initialised      */
specifier|public
name|void
name|initialise
parameter_list|(
name|boolean
name|start
parameter_list|)
throws|throws
name|JMSException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=================================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ActiveMQ provider starting up."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=================================="
argument_list|)
expr_stmt|;
name|directory
operator|.
name|put
argument_list|(
name|getQueueConnectionFactory
argument_list|()
argument_list|,
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
argument_list|)
expr_stmt|;
name|directory
operator|.
name|put
argument_list|(
name|getTopicConnectionFactory
argument_list|()
argument_list|,
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
argument_list|)
expr_stmt|;
name|directory
operator|.
name|put
argument_list|(
name|getXAQueueConnectionFactory
argument_list|()
argument_list|,
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
argument_list|)
expr_stmt|;
name|directory
operator|.
name|put
argument_list|(
name|getXATopicConnectionFactory
argument_list|()
argument_list|,
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|adminConnection
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Admin connection allready established."
argument_list|)
throw|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
decl_stmt|;
name|adminConnection
operator|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|adminConnection
operator|.
name|setClientID
argument_list|(
literal|"admin"
argument_list|)
expr_stmt|;
name|adminConnection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * This method cleans up the administrator      * @throws JMSException       */
specifier|public
name|void
name|cleanup
parameter_list|(
name|boolean
name|stop
parameter_list|)
throws|throws
name|JMSException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=================================="
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ActiveMQ provider sutting down."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"=================================="
argument_list|)
expr_stmt|;
name|adminConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|adminConnection
operator|=
literal|null
expr_stmt|;
name|directory
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the administration interface      */
specifier|public
name|Administrator
name|getAdministrator
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/**      * Look up the named administered object      *      * @param name the name that the administered object is bound to      * @return the administered object bound to name      * @throws javax.naming.NamingException if the object is not bound, or the lookup fails      */
specifier|public
name|Object
name|lookup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NamingException
block|{
name|Object
name|result
init|=
name|directory
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NameNotFoundException
argument_list|(
literal|"Name not found: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Create an administered destination      *      * @param name  the destination name      * @param queue if true, create a queue, else create a topic      * @throws JMSException if the destination cannot be created      */
specifier|public
name|void
name|createDestination
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|queue
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|queue
condition|)
block|{
name|directory
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|directory
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Destroy an administered destination      *      * @param name the destination name      * @throws JMSException if the destination cannot be destroyed      */
specifier|public
name|void
name|destroyDestination
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|object
init|=
name|directory
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|object
operator|!=
literal|null
operator|&&
name|object
operator|instanceof
name|ActiveMQDestination
condition|)
block|{
name|adminConnection
operator|.
name|destroyDestination
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns true if an administered destination exists      *      * @param name the destination name      * @throws JMSException for any internal JMS provider error      */
specifier|public
name|boolean
name|destinationExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|directory
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getQueueConnectionFactory
parameter_list|()
block|{
return|return
literal|"QueueConnectionFactory"
return|;
block|}
specifier|public
name|String
name|getTopicConnectionFactory
parameter_list|()
block|{
return|return
literal|"TopicConnectionFactory"
return|;
block|}
specifier|public
name|String
name|getXAQueueConnectionFactory
parameter_list|()
block|{
return|return
literal|"XAQueueConnectionFactory"
return|;
block|}
specifier|public
name|String
name|getXATopicConnectionFactory
parameter_list|()
block|{
return|return
literal|"XATopicConnectionFactory"
return|;
block|}
specifier|public
name|String
name|getBrokerURL
parameter_list|()
block|{
return|return
name|brokerURL
return|;
block|}
specifier|public
name|void
name|setBrokerURL
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"TEST"
argument_list|)
operator|.
name|info
argument_list|(
literal|"!!!!!!!!!!!!!! setting url to "
operator|+
name|brokerURL
argument_list|)
expr_stmt|;
name|this
operator|.
name|brokerURL
operator|=
name|brokerURL
expr_stmt|;
block|}
block|}
end_class

end_unit

