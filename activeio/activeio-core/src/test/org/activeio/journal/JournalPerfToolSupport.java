begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_comment
comment|/**  * Provides the base class uses to run performance tests against a Journal.  * Should be subclassed to customize for specific journal implementation.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|abstract
specifier|public
class|class
name|JournalPerfToolSupport
implements|implements
name|JournalEventListener
block|{
specifier|private
name|JournalStatsFilter
name|journal
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|byte
name|data
index|[]
decl_stmt|;
specifier|private
name|int
name|workerCount
init|=
literal|0
decl_stmt|;
specifier|private
name|PrintWriter
name|statWriter
decl_stmt|;
comment|// Performance test Options
comment|// The output goes here:
specifier|protected
name|File
name|journalDirectory
init|=
operator|new
name|File
argument_list|(
literal|"journal-logs"
argument_list|)
decl_stmt|;
specifier|protected
name|File
name|statCSVFile
init|=
operator|new
name|File
argument_list|(
literal|"stats.csv"
argument_list|)
decl_stmt|;
empty_stmt|;
comment|// Controls how often we start a new batch of workers.
specifier|protected
name|int
name|workerIncrement
init|=
literal|20
decl_stmt|;
specifier|protected
name|long
name|incrementDelay
init|=
literal|1000
operator|*
literal|20
decl_stmt|;
specifier|protected
name|boolean
name|verbose
init|=
literal|true
decl_stmt|;
comment|// Worker configuration.
specifier|protected
name|int
name|recordSize
init|=
literal|1024
decl_stmt|;
specifier|protected
name|int
name|syncFrequency
init|=
literal|15
decl_stmt|;
specifier|protected
name|int
name|workerThinkTime
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
class|class
name|Worker
implements|implements
name|Runnable
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|i
init|=
name|random
operator|.
name|nextInt
argument_list|()
operator|%
name|syncFrequency
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|sync
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|syncFrequency
operator|>=
literal|0
operator|&&
operator|(
name|i
operator|%
name|syncFrequency
operator|)
operator|==
literal|0
condition|)
block|{
name|sync
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|journal
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayPacket
argument_list|(
name|data
argument_list|)
argument_list|,
name|sync
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|workerThinkTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @throws IOException 	 *  	 */
specifier|protected
name|void
name|exec
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Client threads write records using: Record Size: "
operator|+
name|recordSize
operator|+
literal|", Sync Frequency: "
operator|+
name|syncFrequency
operator|+
literal|", Worker Think Time: "
operator|+
name|workerThinkTime
argument_list|)
expr_stmt|;
comment|// Create the record and fill it with some values.
name|data
operator|=
operator|new
name|byte
index|[
name|recordSize
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
if|if
condition|(
name|statCSVFile
operator|!=
literal|null
condition|)
block|{
name|statWriter
operator|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|statCSVFile
argument_list|)
argument_list|)
expr_stmt|;
name|statWriter
operator|.
name|println
argument_list|(
literal|"Threads,Throughput (k/s),Forcd write latency (ms),Throughput (records/s)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|journalDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
name|deleteDir
argument_list|(
name|journalDirectory
argument_list|)
expr_stmt|;
block|}
name|journal
operator|=
operator|new
name|JournalStatsFilter
argument_list|(
name|createJournal
argument_list|()
argument_list|)
operator|.
name|enableDetailedStats
argument_list|(
name|verbose
argument_list|)
expr_stmt|;
name|journal
operator|.
name|setJournalEventListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Wait a little to see the worker affect the stats.
comment|// Increment the number of workers every few seconds.
while|while
condition|(
literal|true
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting "
operator|+
name|workerIncrement
operator|+
literal|" Workers..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|workerIncrement
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Thread
argument_list|(
operator|new
name|Worker
argument_list|()
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
name|workerCount
operator|++
expr_stmt|;
block|}
comment|// Wait a little to see the worker affect the stats.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Waiting "
operator|+
operator|(
name|incrementDelay
operator|/
literal|1000
operator|)
operator|+
literal|" seconds before next Stat sample."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|incrementDelay
argument_list|)
expr_stmt|;
name|displayStats
argument_list|()
expr_stmt|;
name|journal
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|journal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|displayStats
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Stats at "
operator|+
name|workerCount
operator|+
literal|" workers."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|journal
argument_list|)
expr_stmt|;
if|if
condition|(
name|statWriter
operator|!=
literal|null
condition|)
block|{
name|statWriter
operator|.
name|println
argument_list|(
literal|""
operator|+
name|workerCount
operator|+
literal|","
operator|+
name|journal
operator|.
name|getThroughputKps
argument_list|()
operator|+
literal|","
operator|+
name|journal
operator|.
name|getAvgSyncedLatencyMs
argument_list|()
operator|+
literal|","
operator|+
name|journal
operator|.
name|getThroughputRps
argument_list|()
argument_list|)
expr_stmt|;
name|statWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * @return 	 */
specifier|abstract
specifier|public
name|Journal
name|createJournal
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|static
specifier|private
name|void
name|deleteDir
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|File
index|[]
name|files
init|=
name|f
operator|.
name|listFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
name|f
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|overflowNotification
parameter_list|(
name|RecordLocation
name|safeLocation
parameter_list|)
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Mark set: "
operator|+
name|safeLocation
argument_list|)
expr_stmt|;
name|journal
operator|.
name|setMark
argument_list|(
name|safeLocation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRecordLocationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

