begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|MutexTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCorrelator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportAcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_comment
comment|/**  * Broker side of the VMTransport  */
end_comment

begin_class
specifier|public
class|class
name|VMTransportServer
implements|implements
name|TransportServer
block|{
specifier|private
name|TransportAcceptListener
name|acceptListener
decl_stmt|;
specifier|private
specifier|final
name|URI
name|location
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|connectionCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|disposeOnDisconnect
decl_stmt|;
comment|/**      * @param location      * @param disposeOnDisconnect      */
specifier|public
name|VMTransportServer
parameter_list|(
name|URI
name|location
parameter_list|,
name|boolean
name|disposeOnDisconnect
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|disposeOnDisconnect
operator|=
name|disposeOnDisconnect
expr_stmt|;
block|}
comment|/**      * @return a pretty print of this      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"VMTransportServer("
operator|+
name|location
operator|+
literal|")"
return|;
block|}
comment|/**      * @return new VMTransport      * @throws IOException      */
specifier|public
name|VMTransport
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
name|TransportAcceptListener
name|al
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|disposed
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server has been disposed."
argument_list|)
throw|;
block|}
name|al
operator|=
name|acceptListener
expr_stmt|;
block|}
if|if
condition|(
name|al
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Server TransportAcceptListener is null."
argument_list|)
throw|;
block|}
name|connectionCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|VMTransport
name|client
init|=
operator|new
name|VMTransport
argument_list|(
name|location
argument_list|)
block|{
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|disposed
operator|.
name|get
argument_list|()
condition|)
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectionCount
operator|.
name|decrementAndGet
argument_list|()
operator|==
literal|0
operator|&&
name|disposeOnDisconnect
condition|)
block|{
name|VMTransportServer
operator|.
name|this
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
block|}
decl_stmt|;
name|VMTransport
name|server
init|=
operator|new
name|VMTransport
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|client
operator|.
name|setPeer
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|server
operator|.
name|setPeer
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|al
operator|.
name|onAccept
argument_list|(
name|configure
argument_list|(
name|server
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|client
return|;
block|}
comment|/**      * Configure transport      *      * @param transport      * @return the Transport      */
specifier|public
specifier|static
name|Transport
name|configure
parameter_list|(
name|Transport
name|transport
parameter_list|)
block|{
name|transport
operator|=
operator|new
name|MutexTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|transport
operator|=
operator|new
name|ResponseCorrelator
argument_list|(
name|transport
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
comment|/**      * Set the Transport accept listener for new Connections      *      * @param acceptListener      */
specifier|public
specifier|synchronized
name|void
name|setAcceptListener
parameter_list|(
name|TransportAcceptListener
name|acceptListener
parameter_list|)
block|{
name|this
operator|.
name|acceptListener
operator|=
name|acceptListener
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{     }
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|VMTransportFactory
operator|.
name|stopped
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|URI
name|getConnectURI
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|URI
name|getBindURI
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|void
name|setBrokerInfo
parameter_list|(
name|BrokerInfo
name|brokerInfo
parameter_list|)
block|{     }
specifier|public
name|InetSocketAddress
name|getSocketAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getConnectionCount
parameter_list|()
block|{
return|return
name|connectionCount
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSslServer
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

