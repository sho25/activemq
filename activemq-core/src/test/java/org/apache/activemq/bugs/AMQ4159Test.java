begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DiscoveryEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|discovery
operator|.
name|simple
operator|.
name|SimpleDiscoveryAgent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * This unit test demonstrates a bug in {@link SimpleDiscoveryAgent} that  * results from a lack of thread safety when handling bridge failures. This bug  * allows a single discovery event (which should result in a single bridge  * connection attempt) to multiply into several concurrent bridge connection  * attempts, which can lead to additional bugs (see related) due to a lack of  * thread safety in {@link DiscoveryNetworkConnector}.  */
end_comment

begin_class
specifier|public
class|class
name|AMQ4159Test
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
comment|/**      * This test is expected to pass since the reconnect delay preserves the      * discovery event's failed flag long enough for the multiple bridge failure      * events to be ignored.      */
specifier|public
name|void
name|testWithReconnectDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|1000
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test is expected to fail since the lack of reconnect delay allows      * the discovery event's failed flag to be reset while there are still      * pending failure events, thus allowing (unexpectedly) concurrent bridge      * reconnect attempts.      */
specifier|public
name|void
name|testWithoutReconnectDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTest
parameter_list|(
name|long
name|reconnectDelay
parameter_list|,
name|long
name|minConnectTime
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Start two brokers with a bridge from broker1 to broker2.
name|BrokerService
name|broker1
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(vm://broker1)/broker1?persistent=false"
argument_list|)
argument_list|)
decl_stmt|;
name|BrokerService
name|broker2
init|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(vm://broker2)/broker2?persistent=false"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Prevent broker2 from removing its (inbound) bridge connection.
name|BrokerPlugin
name|ignoreRemoveConnectionPlugin
init|=
operator|new
name|BrokerPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Broker
name|installPlugin
parameter_list|(
name|Broker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|BrokerFilter
argument_list|(
name|broker
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Ignore, leaving behind clientId and connection.
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|broker2
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
name|ignoreRemoveConnectionPlugin
block|}
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Start a bridge from broker1 to broker2 that tracks information about
comment|// the connection attemps.
specifier|final
name|AtomicInteger
name|numAttempts
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|concurrency
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|concurrencyAttempt
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|attemptLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|DiscoveryNetworkConnector
name|nc
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onServiceAdd
parameter_list|(
name|DiscoveryEvent
name|event
parameter_list|)
block|{
name|int
name|attempt
init|=
name|numAttempts
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|concurrency
operator|.
name|incrementAndGet
argument_list|()
operator|>
literal|1
condition|)
block|{
name|concurrencyAttempt
operator|.
name|compareAndSet
argument_list|(
operator|-
literal|1
argument_list|,
name|attempt
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|super
operator|.
name|onServiceAdd
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|concurrency
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
name|attemptLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|SimpleDiscoveryAgent
name|da
init|=
operator|new
name|SimpleDiscoveryAgent
argument_list|()
decl_stmt|;
name|da
operator|.
name|setInitialReconnectDelay
argument_list|(
name|reconnectDelay
argument_list|)
expr_stmt|;
name|da
operator|.
name|setMinConnectTime
argument_list|(
name|minConnectTime
argument_list|)
expr_stmt|;
name|da
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|da
operator|.
name|setServices
argument_list|(
operator|new
name|URI
index|[]
block|{
name|broker2
operator|.
name|getVmConnectorURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setDiscoveryAgent
argument_list|(
name|da
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|addNetworkConnector
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|nc
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
comment|// Verify that only one attempt and thread was used to establish the
comment|// bridge.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numAttempts
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|concurrencyAttempt
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Stop the bridge; this will leave the connections in the broker and
comment|// prevent a new bridge from being established.
name|nc
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Attempt to re-establish the bridge; this will cause repeated
comment|// "connection already exists" exceptions.
name|numAttempts
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|nc
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait for several attempts and verify that only a single thread was
comment|// used to (attempt) to establish the bridge.
name|attemptLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|concurrencyAttempt
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

