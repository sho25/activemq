begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|LastImageSubscriptionRecoveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|RetainedMessageSubscriptionRecoveryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|BlockingConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|MQTT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|QoS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|client
operator|.
name|Tracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PUBLISH
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTTest
extends|extends
name|MQTTTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MESSAGES
init|=
literal|250
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveMQTT
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|subscriptionProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriptionProvider
argument_list|)
expr_stmt|;
name|subscriptionProvider
operator|.
name|subscribe
argument_list|(
literal|"foo/bah"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_MESSAGES
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|byte
index|[]
name|payload
init|=
name|subscriptionProvider
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|publishProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publishProvider
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Message "
operator|+
name|i
decl_stmt|;
name|publishProvider
operator|.
name|publish
argument_list|(
literal|"foo/bah"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publishProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testUnsubscribeMQTT
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|subscriptionProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriptionProvider
argument_list|)
expr_stmt|;
name|String
name|topic
init|=
literal|"foo/bah"
decl_stmt|;
name|subscriptionProvider
operator|.
name|subscribe
argument_list|(
name|topic
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|NUM_MESSAGES
operator|/
literal|2
argument_list|)
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|byte
index|[]
name|payload
init|=
name|subscriptionProvider
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|payload
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|publishProvider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publishProvider
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Message "
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|NUM_MESSAGES
operator|/
literal|2
condition|)
block|{
name|subscriptionProvider
operator|.
name|unsubscribe
argument_list|(
name|topic
argument_list|)
expr_stmt|;
block|}
name|publishProvider
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
block|}
name|latch
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publishProvider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAtMostOnceReceiveExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
comment|/**          * Although subscribing with EXACTLY ONCE, the message gets published          * with AT_MOST_ONCE - in MQTT the QoS is always determined by the          * message as published - not the wish of the subscriber          */
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAtLeastOnceReceiveExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAtLeastOnceReceiveAtMostOnce
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveAtMostOnce
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveAtLeastOnce
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveExactlyOnce
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|publisher
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|subscriber
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|publisher
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|EXACTLY_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|subscriber
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message + ["
operator|+
name|i
operator|+
literal|"]"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subscriber
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveLargeMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
specifier|final
name|MQTTClientProvider
name|publisher
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|subscriber
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|subscriber
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|publisher
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|payload
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|subscriber
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|payload
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|subscriber
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendAndReceiveRetainedMessages
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|publisher
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|publisher
argument_list|)
expr_stmt|;
specifier|final
name|MQTTClientProvider
name|subscriber
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|subscriber
argument_list|)
expr_stmt|;
name|String
name|RETAINED
init|=
literal|"retained"
decl_stmt|;
name|publisher
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|RETAINED
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|messages
operator|.
name|add
argument_list|(
literal|"TEST MESSAGE:"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|subscriber
operator|.
name|subscribe
argument_list|(
literal|"foo"
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|publisher
operator|.
name|publish
argument_list|(
literal|"foo"
argument_list|,
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|msg
init|=
name|subscriber
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAINED
argument_list|,
operator|new
name|String
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
name|subscriber
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
operator|new
name|String
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subscriber
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|publisher
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testValidZeroLengthClientId
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setCleanSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testMQTTPathPatterns
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setCleanSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|RETAINED
init|=
literal|"RETAINED"
decl_stmt|;
name|String
index|[]
name|topics
init|=
block|{
literal|"TopicA"
block|,
literal|"/TopicA"
block|,
literal|"/"
block|,
literal|"TopicA/"
block|,
literal|"//"
block|}
decl_stmt|;
for|for
control|(
name|String
name|topic
range|:
name|topics
control|)
block|{
comment|// test retained message
name|connection
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
operator|(
name|RETAINED
operator|+
name|topic
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|topic
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No message for "
operator|+
name|topic
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAINED
operator|+
name|topic
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
comment|// test non-retained message
name|connection
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|topic
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topic
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
name|topic
block|}
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// test wildcard patterns with above topics
name|String
index|[]
name|wildcards
init|=
block|{
literal|"#"
block|,
literal|"+"
block|,
literal|"+/#"
block|,
literal|"/+"
block|,
literal|"+/"
block|,
literal|"+/+"
block|,
literal|"+/+/"
block|,
literal|"+/+/+"
block|}
decl_stmt|;
for|for
control|(
name|String
name|wildcard
range|:
name|wildcards
control|)
block|{
specifier|final
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|wildcard
operator|.
name|replaceAll
argument_list|(
literal|"/?#"
argument_list|,
literal|"(/?.*)*"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\+"
argument_list|,
literal|"[^/]*"
argument_list|)
argument_list|)
decl_stmt|;
name|connection
operator|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|qos
init|=
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|wildcard
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"Subscribe failed "
operator|+
name|wildcard
argument_list|,
operator|(
name|byte
operator|)
literal|0x80
argument_list|,
name|qos
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// test retained messages
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
do|do
block|{
name|assertNotNull
argument_list|(
literal|"RETAINED null "
operator|+
name|wildcard
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"RETAINED prefix "
operator|+
name|wildcard
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
operator|.
name|startsWith
argument_list|(
name|RETAINED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"RETAINED matching "
operator|+
name|wildcard
operator|+
literal|" "
operator|+
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|,
name|pattern
operator|.
name|matcher
argument_list|(
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|msg
operator|!=
literal|null
condition|)
do|;
comment|// test non-retained message
for|for
control|(
name|String
name|topic
range|:
name|topics
control|)
block|{
name|connection
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|topic
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
do|do
block|{
name|assertNotNull
argument_list|(
literal|"Non-retained Null "
operator|+
name|wildcard
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Non-retained matching "
operator|+
name|wildcard
operator|+
literal|" "
operator|+
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|,
name|pattern
operator|.
name|matcher
argument_list|(
name|msg
operator|.
name|getTopic
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|msg
operator|!=
literal|null
condition|)
do|;
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
name|wildcard
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testMQTTRetainQoS
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|topics
init|=
block|{
literal|"AT_MOST_ONCE"
block|,
literal|"AT_LEAST_ONCE"
block|,
literal|"EXACTLY_ONCE"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topics
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|topic
init|=
name|topics
index|[
name|i
index|]
decl_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|actualQoS
init|=
block|{
operator|-
literal|1
block|}
decl_stmt|;
name|mqtt
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
comment|// validate the QoS
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PUBLISH
operator|.
name|TYPE
condition|)
block|{
name|actualQoS
index|[
literal|0
index|]
operator|=
name|frame
operator|.
name|qos
argument_list|()
operator|.
name|ordinal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|publish
argument_list|(
name|topic
argument_list|,
name|topic
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|topic
argument_list|,
name|QoS
operator|.
name|valueOf
argument_list|(
name|topic
argument_list|)
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|topic
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|actualQoS
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|waitCount
operator|<
literal|10
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|waitCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|i
argument_list|,
name|actualQoS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
name|topic
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDuplicateSubscriptions
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|int
index|[]
name|actualQoS
init|=
block|{
operator|-
literal|1
block|}
decl_stmt|;
name|mqtt
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
comment|// validate the QoS
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PUBLISH
operator|.
name|TYPE
condition|)
block|{
name|actualQoS
index|[
literal|0
index|]
operator|=
name|frame
operator|.
name|qos
argument_list|()
operator|.
name|ordinal
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|RETAIN
init|=
literal|"RETAIN"
decl_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"TopicA"
argument_list|,
name|RETAIN
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QoS
index|[]
name|qoss
init|=
block|{
name|QoS
operator|.
name|AT_MOST_ONCE
block|,
name|QoS
operator|.
name|AT_MOST_ONCE
block|,
name|QoS
operator|.
name|AT_LEAST_ONCE
block|,
name|QoS
operator|.
name|EXACTLY_ONCE
block|}
decl_stmt|;
for|for
control|(
name|QoS
name|qos
range|:
name|qoss
control|)
block|{
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
literal|"TopicA"
argument_list|,
name|qos
argument_list|)
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No message for "
operator|+
name|qos
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAIN
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|actualQoS
index|[
literal|0
index|]
operator|==
operator|-
literal|1
operator|&&
name|waitCount
operator|<
literal|10
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|waitCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|qos
operator|.
name|ordinal
argument_list|()
argument_list|,
name|actualQoS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|actualQoS
index|[
literal|0
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TopicA"
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testRetainedMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|RETAIN
init|=
literal|"RETAIN"
decl_stmt|;
specifier|final
name|String
name|TOPICA
init|=
literal|"TopicA"
decl_stmt|;
specifier|final
name|String
index|[]
name|clientIds
init|=
block|{
literal|null
block|,
literal|"foo"
block|,
literal|"durable"
block|}
decl_stmt|;
for|for
control|(
name|String
name|clientId
range|:
name|clientIds
control|)
block|{
name|mqtt
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setCleanSession
argument_list|(
operator|!
literal|"durable"
operator|.
name|equals
argument_list|(
name|clientId
argument_list|)
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// set retained message and check
name|connection
operator|.
name|publish
argument_list|(
name|TOPICA
argument_list|,
name|RETAIN
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPICA
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No retained message for "
operator|+
name|clientId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAIN
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|connection
operator|.
name|receive
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// test duplicate subscription
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPICA
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|15000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No retained message on duplicate subscription for "
operator|+
name|clientId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAIN
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|connection
operator|.
name|receive
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TopicA"
block|}
argument_list|)
expr_stmt|;
comment|// clear retained message and check that we don't receive it
name|connection
operator|.
name|publish
argument_list|(
name|TOPICA
argument_list|,
literal|""
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_MOST_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPICA
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Retained message not cleared for "
operator|+
name|clientId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TopicA"
block|}
argument_list|)
expr_stmt|;
comment|// set retained message again and check
name|connection
operator|.
name|publish
argument_list|(
name|TOPICA
argument_list|,
name|RETAIN
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPICA
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No reset retained message for "
operator|+
name|clientId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAIN
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|connection
operator|.
name|receive
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-connect and check
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|connection
operator|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPICA
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"No reset retained message for "
operator|+
name|clientId
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAIN
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|connection
operator|.
name|receive
argument_list|(
literal|500
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TopicA"
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testUniqueMessageIds
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setCleanSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PUBLISH
argument_list|>
name|publishList
init|=
operator|new
name|ArrayList
argument_list|<
name|PUBLISH
argument_list|>
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client received:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PUBLISH
operator|.
name|TYPE
condition|)
block|{
name|PUBLISH
name|publish
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
try|try
block|{
name|publish
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error decoding publish "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|publishList
operator|.
name|add
argument_list|(
name|publish
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSend
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client sent:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// create overlapping subscriptions with different QoSs
name|QoS
index|[]
name|qoss
init|=
block|{
name|QoS
operator|.
name|AT_MOST_ONCE
block|,
name|QoS
operator|.
name|AT_LEAST_ONCE
block|,
name|QoS
operator|.
name|EXACTLY_ONCE
block|}
decl_stmt|;
specifier|final
name|String
name|TOPIC
init|=
literal|"TopicA/"
decl_stmt|;
comment|// publish retained message
name|connection
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|subs
init|=
block|{
name|TOPIC
block|,
literal|"TopicA/#"
block|,
literal|"TopicA/+"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qoss
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|subs
index|[
name|i
index|]
argument_list|,
name|qoss
index|[
name|i
index|]
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
comment|// publish non-retained message
name|connection
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|received
init|=
literal|0
decl_stmt|;
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
do|do
block|{
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TOPIC
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|int
name|waitCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|publishList
operator|.
name|size
argument_list|()
operator|<=
name|received
operator|&&
name|waitCount
operator|<
literal|10
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|waitCount
operator|++
expr_stmt|;
block|}
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|msg
operator|!=
literal|null
operator|&&
name|received
operator|++
operator|<
name|subs
operator|.
name|length
operator|*
literal|2
condition|)
do|;
name|assertEquals
argument_list|(
literal|"Unexpected number of messages"
argument_list|,
name|subs
operator|.
name|length
operator|*
literal|2
argument_list|,
name|received
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// make sure we received distinct ids for QoS != AT_MOST_ONCE, and 0 for
comment|// AT_MOST_ONCE
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|publishList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|publishList
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|PUBLISH
name|publish1
init|=
name|publishList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|PUBLISH
name|publish2
init|=
name|publishList
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|boolean
name|qos0
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|publish1
operator|.
name|qos
argument_list|()
operator|==
name|QoS
operator|.
name|AT_MOST_ONCE
condition|)
block|{
name|qos0
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|publish1
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publish2
operator|.
name|qos
argument_list|()
operator|==
name|QoS
operator|.
name|AT_MOST_ONCE
condition|)
block|{
name|qos0
operator|=
literal|true
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|publish2
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qos0
condition|)
block|{
name|assertNotEquals
argument_list|(
name|publish1
operator|.
name|messageId
argument_list|()
argument_list|,
name|publish2
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|connection
operator|.
name|unsubscribe
argument_list|(
name|subs
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testResendMessageId
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|(
literal|"resend"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PUBLISH
argument_list|>
name|publishList
init|=
operator|new
name|ArrayList
argument_list|<
name|PUBLISH
argument_list|>
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client received:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PUBLISH
operator|.
name|TYPE
condition|)
block|{
name|PUBLISH
name|publish
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
try|try
block|{
name|publish
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error decoding publish "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|publishList
operator|.
name|add
argument_list|(
name|publish
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSend
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client sent:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TOPIC
init|=
literal|"TopicA/"
decl_stmt|;
specifier|final
name|String
index|[]
name|topics
init|=
operator|new
name|String
index|[]
block|{
name|TOPIC
block|,
literal|"TopicA/+"
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|topics
index|[
literal|0
index|]
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|,
operator|new
name|Topic
argument_list|(
name|topics
index|[
literal|1
index|]
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// publish non-retained message
name|connection
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|publishList
operator|.
name|size
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|publishList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|connection
operator|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|publishList
operator|.
name|size
argument_list|()
operator|==
literal|4
return|;
block|}
block|}
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|publishList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure we received duplicate message ids
name|assertTrue
argument_list|(
name|publishList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|messageId
argument_list|()
operator|==
name|publishList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|messageId
argument_list|()
operator|||
name|publishList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|messageId
argument_list|()
operator|==
name|publishList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|publishList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|messageId
argument_list|()
operator|==
name|publishList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|messageId
argument_list|()
operator|||
name|publishList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|messageId
argument_list|()
operator|==
name|publishList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|publishList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|dup
argument_list|()
operator|&&
name|publishList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|unsubscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testPacketIdGeneratorNonCleanSession
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|(
literal|"nonclean-packetid"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Short
argument_list|,
name|PUBLISH
argument_list|>
name|publishMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Short
argument_list|,
name|PUBLISH
argument_list|>
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client received:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PUBLISH
operator|.
name|TYPE
condition|)
block|{
name|PUBLISH
name|publish
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
try|try
block|{
name|publish
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PUBLISH "
operator|+
name|publish
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error decoding publish "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publishMap
operator|.
name|get
argument_list|(
name|publish
operator|.
name|messageId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|publish
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|publishMap
operator|.
name|put
argument_list|(
name|publish
operator|.
name|messageId
argument_list|()
argument_list|,
name|publish
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSend
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client sent:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TOPIC
init|=
literal|"TopicA/"
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPIC
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// publish non-retained messages
specifier|final
name|int
name|TOTAL_MESSAGES
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOTAL_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|connection
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// receive half the messages in this session
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TOTAL_MESSAGES
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TOPIC
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// resume session
name|connection
operator|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// receive rest of the messages
name|Message
name|msg
init|=
literal|null
decl_stmt|;
do|do
block|{
name|msg
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|TOPIC
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|msg
operator|!=
literal|null
condition|)
do|;
comment|// make sure we received all message ids
for|for
control|(
name|short
name|id
init|=
literal|1
init|;
name|id
operator|<=
name|TOTAL_MESSAGES
condition|;
name|id
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"No message for id "
operator|+
name|id
argument_list|,
name|publishMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
name|TOPIC
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|90
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testPacketIdGeneratorCleanSession
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|cleanClientIds
init|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"clean-packetid"
block|,
literal|null
block|}
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Short
argument_list|,
name|PUBLISH
argument_list|>
name|publishMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Short
argument_list|,
name|PUBLISH
argument_list|>
argument_list|()
decl_stmt|;
name|MQTT
index|[]
name|mqtts
init|=
operator|new
name|MQTT
index|[
name|cleanClientIds
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cleanClientIds
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mqtts
index|[
name|i
index|]
operator|=
name|createMQTTConnection
argument_list|(
literal|""
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mqtts
index|[
name|i
index|]
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|)
expr_stmt|;
name|mqtts
index|[
name|i
index|]
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client received:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PUBLISH
operator|.
name|TYPE
condition|)
block|{
name|PUBLISH
name|publish
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
try|try
block|{
name|publish
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"PUBLISH "
operator|+
name|publish
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Error decoding publish "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publishMap
operator|.
name|get
argument_list|(
name|publish
operator|.
name|messageId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|publish
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|publishMap
operator|.
name|put
argument_list|(
name|publish
operator|.
name|messageId
argument_list|()
argument_list|,
name|publish
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSend
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client sent:\n"
operator|+
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|BlockingConnection
name|connection
init|=
name|mqtts
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|cleanClientIds
operator|.
name|length
argument_list|)
index|]
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TOPIC
init|=
literal|"TopicA/"
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPIC
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// publish non-retained message
name|connection
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TOPIC
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|publishMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|short
name|id
init|=
call|(
name|short
call|)
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No message for id "
operator|+
name|id
argument_list|,
name|publishMap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|publishMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testClientConnectionFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|(
literal|"reconnect"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|TOPIC
init|=
literal|"TopicA"
decl_stmt|;
specifier|final
name|byte
index|[]
name|qos
init|=
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPIC
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|QoS
operator|.
name|EXACTLY_ONCE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|qos
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|connection
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// kill transport
name|connection
operator|.
name|kill
argument_list|()
expr_stmt|;
specifier|final
name|BlockingConnection
name|newConnection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|newConnection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|newConnection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QoS
operator|.
name|EXACTLY_ONCE
operator|.
name|ordinal
argument_list|()
argument_list|,
name|qos
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|newConnection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TOPIC
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|newConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testCleanSession
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|CLIENTID
init|=
literal|"cleansession"
decl_stmt|;
specifier|final
name|MQTT
name|mqttNotClean
init|=
name|createMQTTConnection
argument_list|(
name|CLIENTID
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BlockingConnection
name|notClean
init|=
name|mqttNotClean
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
specifier|final
name|String
name|TOPIC
init|=
literal|"TopicA"
decl_stmt|;
name|notClean
operator|.
name|connect
argument_list|()
expr_stmt|;
name|notClean
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPIC
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|notClean
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|notClean
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// MUST receive message from previous not clean session
name|notClean
operator|=
name|mqttNotClean
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|notClean
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Message
name|msg
init|=
name|notClean
operator|.
name|receive
argument_list|(
literal|10000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TOPIC
argument_list|,
operator|new
name|String
argument_list|(
name|msg
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|ack
argument_list|()
expr_stmt|;
name|notClean
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|notClean
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// MUST NOT receive message from previous not clean session
specifier|final
name|MQTT
name|mqttClean
init|=
name|createMQTTConnection
argument_list|(
name|CLIENTID
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|BlockingConnection
name|clean
init|=
name|mqttClean
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|clean
operator|.
name|connect
argument_list|()
expr_stmt|;
name|msg
operator|=
name|clean
operator|.
name|receive
argument_list|(
literal|10000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|clean
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|TOPIC
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|clean
operator|.
name|publish
argument_list|(
name|TOPIC
argument_list|,
name|TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|clean
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// MUST NOT receive message from previous clean session
name|notClean
operator|=
name|mqttNotClean
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|notClean
operator|.
name|connect
argument_list|()
expr_stmt|;
name|msg
operator|=
name|notClean
operator|.
name|receive
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|notClean
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendMQTTReceiveJMS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
specifier|final
name|String
name|DESTINATION_NAME
init|=
literal|"foo.*"
decl_stmt|;
comment|// send retained message
specifier|final
name|String
name|RETAINED
init|=
literal|"RETAINED"
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo/bah"
argument_list|,
name|RETAINED
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ActiveMQConnection
name|activeMQConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
comment|// MUST set to true to receive retained messages
name|activeMQConnection
operator|.
name|setUseRetroactiveConsumer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|activeMQConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|activeMQConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|jmsTopic
init|=
name|s
operator|.
name|createTopic
argument_list|(
name|DESTINATION_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|jmsTopic
argument_list|)
decl_stmt|;
comment|// check whether we received retained message on JMS subscribe
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get retained message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ByteSequence
name|bs
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|RETAINED
argument_list|,
operator|new
name|String
argument_list|(
name|bs
operator|.
name|data
argument_list|,
name|bs
operator|.
name|offset
argument_list|,
name|bs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getBooleanProperty
argument_list|(
name|RetainedMessageSubscriptionRecoveryPolicy
operator|.
name|RETAINED_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
literal|"foo/bah"
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|message
operator|=
operator|(
name|ActiveMQMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|bs
operator|=
name|message
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|bs
operator|.
name|data
argument_list|,
name|bs
operator|.
name|offset
argument_list|,
name|bs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|activeMQConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendJMSReceiveMQTT
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
name|ActiveMQConnection
name|activeMQConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|activeMQConnection
operator|.
name|setUseRetroactiveConsumer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|activeMQConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|activeMQConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|jmsTopic
init|=
name|s
operator|.
name|createTopic
argument_list|(
literal|"foo.far"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|s
operator|.
name|createProducer
argument_list|(
name|jmsTopic
argument_list|)
decl_stmt|;
comment|// send retained message from JMS
specifier|final
name|String
name|RETAINED
init|=
literal|"RETAINED"
decl_stmt|;
name|TextMessage
name|sendMessage
init|=
name|s
operator|.
name|createTextMessage
argument_list|(
name|RETAINED
argument_list|)
decl_stmt|;
comment|// mark the message to be retained
name|sendMessage
operator|.
name|setBooleanProperty
argument_list|(
name|RetainedMessageSubscriptionRecoveryPolicy
operator|.
name|RETAIN_PROPERTY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// MQTT QoS can be set using MQTTProtocolConverter.QOS_PROPERTY_NAME property
name|sendMessage
operator|.
name|setIntProperty
argument_list|(
name|MQTTProtocolConverter
operator|.
name|QOS_PROPERTY_NAME
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|sendMessage
argument_list|)
expr_stmt|;
name|provider
operator|.
name|subscribe
argument_list|(
literal|"foo/+"
argument_list|,
name|AT_MOST_ONCE
argument_list|)
expr_stmt|;
name|byte
index|[]
name|message
init|=
name|provider
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get retained message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAINED
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"This is Test Message: "
operator|+
name|i
decl_stmt|;
name|sendMessage
operator|=
name|s
operator|.
name|createTextMessage
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|sendMessage
argument_list|)
expr_stmt|;
name|message
operator|=
name|provider
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|activeMQConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testPingKeepsInactivityMonitorAlive
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testTurnOffInactivityMonitor
parameter_list|()
throws|throws
name|Exception
block|{
name|stopBroker
argument_list|()
expr_stmt|;
name|protocolConfig
operator|=
literal|"transport.useInactivityMonitor=false"
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo3"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testPublishDollarTopics
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
specifier|final
name|String
name|clientId
init|=
literal|"publishDollar"
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|DOLLAR_TOPIC
init|=
literal|"$TopicA"
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|DOLLAR_TOPIC
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|publish
argument_list|(
name|DOLLAR_TOPIC
argument_list|,
name|DOLLAR_TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Publish enabled for $ Topics by default"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|stopBroker
argument_list|()
expr_stmt|;
name|protocolConfig
operator|=
literal|"transport.publishDollarTopics=true"
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|mqtt
operator|=
name|createMQTTConnection
argument_list|()
expr_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
name|connection
operator|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
name|DOLLAR_TOPIC
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|publish
argument_list|(
name|DOLLAR_TOPIC
argument_list|,
name|DOLLAR_TOPIC
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|message
operator|=
name|connection
operator|.
name|receive
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Message body"
argument_list|,
name|DOLLAR_TOPIC
argument_list|,
operator|new
name|String
argument_list|(
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDuplicateClientId
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test link stealing enabled by default
specifier|final
name|String
name|clientId
init|=
literal|"duplicateClient"
decl_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|(
name|clientId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TOPICA
init|=
literal|"TopicA"
decl_stmt|;
name|connection
operator|.
name|publish
argument_list|(
name|TOPICA
argument_list|,
name|TOPICA
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MQTT
name|mqtt1
init|=
name|createMQTTConnection
argument_list|(
name|clientId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|mqtt1
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection1
init|=
name|mqtt1
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection1
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Duplicate client disconnected"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection1
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Old client still connected"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|publish
argument_list|(
name|TOPICA
argument_list|,
name|TOPICA
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|disconnect
argument_list|()
expr_stmt|;
comment|// disable link stealing
name|stopBroker
argument_list|()
expr_stmt|;
name|protocolConfig
operator|=
literal|"allowLinkStealing=false"
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|mqtt
operator|=
name|createMQTTConnection
argument_list|(
name|clientId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection2
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection2
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|publish
argument_list|(
name|TOPICA
argument_list|,
name|TOPICA
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mqtt1
operator|=
name|createMQTTConnection
argument_list|(
name|clientId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mqtt1
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection3
init|=
name|mqtt1
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|connection3
operator|.
name|connect
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Duplicate client connected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|assertTrue
argument_list|(
literal|"Old client disconnected"
argument_list|,
name|connection2
operator|.
name|isConnected
argument_list|()
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|publish
argument_list|(
name|TOPICA
argument_list|,
name|TOPICA
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|10000
argument_list|)
specifier|public
name|void
name|testJmsMapping
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start up jms consumer
name|Connection
name|jmsConn
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|jmsConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"test.foo"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|jmsConn
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// set up mqtt producer
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo3"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|messagesToSend
init|=
literal|5
decl_stmt|;
comment|// publish
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesToSend
condition|;
operator|++
name|i
control|)
block|{
name|connection
operator|.
name|publish
argument_list|(
literal|"test/foo"
argument_list|,
literal|"hello world"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesToSend
condition|;
name|i
operator|++
control|)
block|{
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|instanceof
name|BytesMessage
argument_list|)
expr_stmt|;
name|BytesMessage
name|bytesMessage
init|=
operator|(
name|BytesMessage
operator|)
name|message
decl_stmt|;
name|int
name|length
init|=
operator|(
name|int
operator|)
name|bytesMessage
operator|.
name|getBodyLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|bytesMessage
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jmsConn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|10000
argument_list|)
specifier|public
name|void
name|testSubscribeMultipleTopics
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"MQTT-Client"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setCleanSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
literal|"Topic/A"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|,
operator|new
name|Topic
argument_list|(
literal|"Topic/B"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
decl_stmt|;
name|Topic
index|[]
name|wildcardTopic
init|=
block|{
operator|new
name|Topic
argument_list|(
literal|"Topic/#"
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
decl_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
name|wildcardTopic
argument_list|)
expr_stmt|;
for|for
control|(
name|Topic
name|topic
range|:
name|topics
control|)
block|{
name|connection
operator|.
name|publish
argument_list|(
name|topic
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|topics
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|++
expr_stmt|;
name|payload
operator|=
name|message
operator|.
name|getPayload
argument_list|()
expr_stmt|;
name|String
name|messageContent
init|=
operator|new
name|String
argument_list|(
name|payload
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received message from topic: "
operator|+
name|message
operator|.
name|getTopic
argument_list|()
operator|+
literal|" Message content: "
operator|+
name|messageContent
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have received "
operator|+
name|topics
operator|.
name|length
operator|+
literal|" messages"
argument_list|,
name|topics
operator|.
name|length
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testReceiveMessageSentWhileOffline
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|payload
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|32
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|payload
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|payload
index|[
name|i
index|]
operator|=
literal|'2'
expr_stmt|;
block|}
name|int
name|numberOfRuns
init|=
literal|100
decl_stmt|;
name|int
name|messagesPerRun
init|=
literal|2
decl_stmt|;
specifier|final
name|MQTT
name|mqttPub
init|=
name|createMQTTConnection
argument_list|(
literal|"MQTT-Pub-Client"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|MQTT
name|mqttSub
init|=
name|createMQTTConnection
argument_list|(
literal|"MQTT-Sub-Client"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|BlockingConnection
name|connectionPub
init|=
name|mqttPub
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connectionPub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|BlockingConnection
name|connectionSub
init|=
name|mqttSub
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connectionSub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
literal|"TopicA"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
decl_stmt|;
name|connectionSub
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|connectionPub
operator|.
name|publish
argument_list|(
name|topics
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|connectionSub
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|payload
argument_list|,
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|connectionSub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numberOfRuns
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|connectionPub
operator|.
name|publish
argument_list|(
name|topics
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|connectionSub
operator|=
name|mqttSub
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connectionSub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connectionSub
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesPerRun
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|connectionSub
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|payload
argument_list|,
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|connectionSub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should have received "
operator|+
operator|(
name|messagesPerRun
operator|*
operator|(
name|numberOfRuns
operator|+
literal|1
operator|)
operator|)
operator|+
literal|" messages"
argument_list|,
operator|(
name|messagesPerRun
operator|*
operator|(
name|numberOfRuns
operator|+
literal|1
operator|)
operator|)
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDefaultKeepAliveWhenClientSpecifiesZero
parameter_list|()
throws|throws
name|Exception
block|{
name|stopBroker
argument_list|()
expr_stmt|;
name|protocolConfig
operator|=
literal|"transport.defaultKeepAlive=2000"
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testReuseConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"Test-Client"
argument_list|)
expr_stmt|;
block|{
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|{
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testNoMessageReceivedAfterUnsubscribeMQTT
parameter_list|()
throws|throws
name|Exception
block|{
name|Topic
index|[]
name|topics
init|=
block|{
operator|new
name|Topic
argument_list|(
literal|"TopicA"
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|)
block|}
decl_stmt|;
name|MQTT
name|mqttPub
init|=
name|createMQTTConnection
argument_list|(
literal|"MQTTPub-Client"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// mqttPub.setVersion("3.1.1");
name|MQTT
name|mqttSub
init|=
name|createMQTTConnection
argument_list|(
literal|"MQTTSub-Client"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// mqttSub.setVersion("3.1.1");
name|BlockingConnection
name|connectionPub
init|=
name|mqttPub
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connectionPub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|BlockingConnection
name|connectionSub
init|=
name|mqttSub
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connectionSub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connectionSub
operator|.
name|subscribe
argument_list|(
name|topics
argument_list|)
expr_stmt|;
name|connectionSub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Message "
operator|+
name|i
decl_stmt|;
name|connectionPub
operator|.
name|publish
argument_list|(
name|topics
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|connectionSub
operator|=
name|mqttSub
operator|.
name|blockingConnection
argument_list|()
expr_stmt|;
name|connectionSub
operator|.
name|connect
argument_list|()
expr_stmt|;
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message
init|=
name|connectionSub
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Missing message "
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message is "
operator|+
operator|new
name|String
argument_list|(
name|message
operator|.
name|getPayload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|received
operator|++
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|received
argument_list|)
expr_stmt|;
comment|// unsubscribe from topic
name|connectionSub
operator|.
name|unsubscribe
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"TopicA"
block|}
argument_list|)
expr_stmt|;
comment|// send more messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Message "
operator|+
name|i
decl_stmt|;
name|connectionPub
operator|.
name|publish
argument_list|(
name|topics
index|[
literal|0
index|]
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|EXACTLY_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// these should not be received
name|assertNull
argument_list|(
name|connectionSub
operator|.
name|receive
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|connectionSub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|connectionPub
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testMQTT311Connection
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setVersion
argument_list|(
literal|"3.1.1"
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testActiveMQRecoveryPolicy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test with ActiveMQ LastImageSubscriptionRecoveryPolicy
specifier|final
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
specifier|final
name|PolicyEntry
name|policyEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policyEntry
operator|.
name|setSubscriptionRecoveryPolicy
argument_list|(
operator|new
name|LastImageSubscriptionRecoveryPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|policyEntry
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|(
literal|"pub-sub"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
index|[]
name|retain
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
specifier|final
name|int
index|[]
name|nonretain
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|mqtt
operator|.
name|setTracer
argument_list|(
operator|new
name|Tracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onReceive
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
block|{
if|if
condition|(
name|frame
operator|.
name|messageType
argument_list|()
operator|==
name|PUBLISH
operator|.
name|TYPE
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received message with retain="
operator|+
name|frame
operator|.
name|retain
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|frame
operator|.
name|retain
argument_list|()
condition|)
block|{
name|retain
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
else|else
block|{
name|nonretain
index|[
literal|0
index|]
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
specifier|final
name|String
name|RETAINED
init|=
literal|"RETAINED"
decl_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"one"
argument_list|,
name|RETAINED
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"two"
argument_list|,
name|RETAINED
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|String
name|NONRETAINED
init|=
literal|"NONRETAINED"
decl_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"one"
argument_list|,
name|NONRETAINED
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|publish
argument_list|(
literal|"two"
argument_list|,
name|NONRETAINED
operator|.
name|getBytes
argument_list|()
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|connection
operator|.
name|subscribe
argument_list|(
operator|new
name|Topic
index|[]
block|{
operator|new
name|Topic
argument_list|(
literal|"#"
argument_list|,
name|QoS
operator|.
name|AT_LEAST_ONCE
argument_list|)
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Message
name|message
init|=
name|connection
operator|.
name|receive
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should receive 4 messages"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|ack
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Should receive 2 retained messages"
argument_list|,
literal|2
argument_list|,
name|retain
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should receive 2 non-retained messages"
argument_list|,
literal|2
argument_list|,
name|nonretain
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSendMQTTReceiveJMSVirtualTopic
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|MQTTClientProvider
name|provider
init|=
name|getMQTTClientProvider
argument_list|()
decl_stmt|;
name|initializeConnection
argument_list|(
name|provider
argument_list|)
expr_stmt|;
specifier|final
name|String
name|DESTINATION_NAME
init|=
literal|"Consumer.jms.VirtualTopic.TopicA"
decl_stmt|;
comment|// send retained message
specifier|final
name|String
name|RETAINED
init|=
literal|"RETAINED"
decl_stmt|;
specifier|final
name|String
name|MQTT_DESTINATION_NAME
init|=
literal|"VirtualTopic/TopicA"
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
name|MQTT_DESTINATION_NAME
argument_list|,
name|RETAINED
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ActiveMQConnection
name|activeMQConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|jmsUri
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
comment|// MUST set to true to receive retained messages
name|activeMQConnection
operator|.
name|setUseRetroactiveConsumer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|activeMQConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|activeMQConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|jmsQueue
init|=
name|s
operator|.
name|createQueue
argument_list|(
name|DESTINATION_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|s
operator|.
name|createConsumer
argument_list|(
name|jmsQueue
argument_list|)
decl_stmt|;
comment|// check whether we received retained message on JMS subscribe
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get retained message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|ByteSequence
name|bs
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|RETAINED
argument_list|,
operator|new
name|String
argument_list|(
name|bs
operator|.
name|data
argument_list|,
name|bs
operator|.
name|offset
argument_list|,
name|bs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getBooleanProperty
argument_list|(
name|RetainedMessageSubscriptionRecoveryPolicy
operator|.
name|RETAINED_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_MESSAGES
condition|;
name|i
operator|++
control|)
block|{
name|String
name|payload
init|=
literal|"Test Message: "
operator|+
name|i
decl_stmt|;
name|provider
operator|.
name|publish
argument_list|(
name|MQTT_DESTINATION_NAME
argument_list|,
name|payload
operator|.
name|getBytes
argument_list|()
argument_list|,
name|AT_LEAST_ONCE
argument_list|)
expr_stmt|;
name|message
operator|=
operator|(
name|ActiveMQMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|bs
operator|=
name|message
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|payload
argument_list|,
operator|new
name|String
argument_list|(
name|bs
operator|.
name|data
argument_list|,
name|bs
operator|.
name|offset
argument_list|,
name|bs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// re-create consumer and check we received retained message again
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer
operator|=
name|s
operator|.
name|createConsumer
argument_list|(
name|jmsQueue
argument_list|)
expr_stmt|;
name|message
operator|=
operator|(
name|ActiveMQMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should get retained message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|bs
operator|=
name|message
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|RETAINED
argument_list|,
operator|new
name|String
argument_list|(
name|bs
operator|.
name|data
argument_list|,
name|bs
operator|.
name|offset
argument_list|,
name|bs
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getBooleanProperty
argument_list|(
name|RetainedMessageSubscriptionRecoveryPolicy
operator|.
name|RETAINED_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|activeMQConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|provider
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testPingOnMQTT
parameter_list|()
throws|throws
name|Exception
block|{
name|stopBroker
argument_list|()
expr_stmt|;
name|protocolConfig
operator|=
literal|"maxInactivityDuration=-1"
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|MQTT
name|mqtt
init|=
name|createMQTTConnection
argument_list|()
decl_stmt|;
name|mqtt
operator|.
name|setClientId
argument_list|(
literal|"test-mqtt"
argument_list|)
expr_stmt|;
name|mqtt
operator|.
name|setKeepAlive
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|BlockingConnection
name|connection
init|=
name|mqtt
operator|.
name|blockingConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"KeepAlive didn't work properly"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|connection
operator|.
name|isConnected
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

