begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MapMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|StompTest
extends|extends
name|CombinationTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StompTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|bindAddress
init|=
literal|"stomp://localhost:61613"
decl_stmt|;
specifier|protected
name|String
name|confUri
init|=
literal|"xbean:org/apache/activemq/transport/stomp/stomp-auth-broker.xml"
decl_stmt|;
specifier|protected
name|String
name|jmsUri
init|=
literal|"vm://localhost"
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|StompConnection
name|stompConnection
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|ActiveMQQueue
name|queue
decl_stmt|;
specifier|private
specifier|final
name|String
name|xmlObject
init|=
literal|"<pojo>\n"
operator|+
literal|"<name>Dejan</name>\n"
operator|+
literal|"<city>Belgrade</city>\n"
operator|+
literal|"</pojo>"
decl_stmt|;
specifier|private
name|String
name|xmlMap
init|=
literal|"<map>\n"
operator|+
literal|"<entry>\n"
operator|+
literal|"<string>name</string>\n"
operator|+
literal|"<string>Dejan</string>\n"
operator|+
literal|"</entry>\n"
operator|+
literal|"<entry>\n"
operator|+
literal|"<string>city</string>\n"
operator|+
literal|"<string>Belgrade</string>\n"
operator|+
literal|"</entry>\n"
operator|+
literal|"</map>\n"
decl_stmt|;
specifier|private
specifier|final
name|String
name|jsonObject
init|=
literal|"{\"pojo\":{"
operator|+
literal|"\"name\":\"Dejan\","
operator|+
literal|"\"city\":\"Belgrade\""
operator|+
literal|"}}"
decl_stmt|;
specifier|private
name|String
name|jsonMap
init|=
literal|"{\"map\":{"
operator|+
literal|"\"entry\":["
operator|+
literal|"{\"string\":[\"name\",\"Dejan\"]},"
operator|+
literal|"{\"string\":[\"city\",\"Belgrade\"]}"
operator|+
literal|"]"
operator|+
literal|"}}"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The order of the entries is different when using ibm jdk 5.
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"IBM Corporation"
argument_list|)
operator|&&
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"1.5"
argument_list|)
condition|)
block|{
name|xmlMap
operator|=
literal|"<map>\n"
operator|+
literal|"<entry>\n"
operator|+
literal|"<string>city</string>\n"
operator|+
literal|"<string>Belgrade</string>\n"
operator|+
literal|"</entry>\n"
operator|+
literal|"<entry>\n"
operator|+
literal|"<string>name</string>\n"
operator|+
literal|"<string>Dejan</string>\n"
operator|+
literal|"</entry>\n"
operator|+
literal|"</map>\n"
expr_stmt|;
name|jsonMap
operator|=
literal|"{\"map\":{"
operator|+
literal|"\"entry\":["
operator|+
literal|"{\"string\":[\"city\",\"Belgrade\"]},"
operator|+
literal|"{\"string\":[\"name\",\"Dejan\"]}"
operator|+
literal|"]"
operator|+
literal|"}}"
expr_stmt|;
block|}
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
name|confUri
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|jmsUri
argument_list|)
decl_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|stompConnect
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|UnknownHostException
block|{
name|URI
name|connectUri
init|=
operator|new
name|URI
argument_list|(
name|bindAddress
argument_list|)
decl_stmt|;
name|stompConnection
operator|.
name|open
argument_list|(
name|createSocket
argument_list|(
name|connectUri
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Socket
name|createSocket
parameter_list|(
name|URI
name|connectUri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Socket
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|connectUri
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|stompDisconnect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Some tests explicitly disconnect from stomp so can ignore
block|}
finally|finally
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stompDisconnect
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stompConnection
operator|!=
literal|null
condition|)
block|{
name|stompConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|stompConnection
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|sendMessage
parameter_list|(
name|String
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|sendMessage
argument_list|(
name|msg
argument_list|,
literal|"foo"
argument_list|,
literal|"xyz"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendMessage
parameter_list|(
name|String
name|msg
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|propertyValue
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
name|propertyName
argument_list|,
name|propertyValue
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sendBytesMessage
parameter_list|(
name|byte
index|[]
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|BytesMessage
name|message
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnect
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|connectFrame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n"
operator|+
literal|"request-id: 1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"response-id:1"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that the timestamp is valid - should
comment|// be very close to the current time.
name|long
name|tnow
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|tmsg
init|=
name|message
operator|.
name|getJMSTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|tnow
operator|-
name|tmsg
argument_list|)
operator|<
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJMSXGroupIdCanBeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"JMSXGroupID: TEST\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TEST"
argument_list|,
operator|(
operator|(
name|ActiveMQTextMessage
operator|)
name|message
operator|)
operator|.
name|getGroupID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendMessageWithCustomHeadersAndSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|,
literal|"foo = 'abc'"
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"foo:abc\n"
operator|+
literal|"bar:123\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|"123"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendMessageWithDelay
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"AMQ_SCHEDULED_DELAY:5000\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendMessageWithStandardHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"correlation-id:c123\n"
operator|+
literal|"priority:3\n"
operator|+
literal|"type:t345\n"
operator|+
literal|"JMSXGroupID:abc\n"
operator|+
literal|"foo:abc\n"
operator|+
literal|"bar:123\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
literal|"c123"
argument_list|,
name|message
operator|.
name|getJMSCorrelationID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getJMSType"
argument_list|,
literal|"t345"
argument_list|,
name|message
operator|.
name|getJMSType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"getJMSPriority"
argument_list|,
literal|3
argument_list|,
name|message
operator|.
name|getJMSPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
literal|"abc"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
literal|"123"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"JMSXGroupID"
argument_list|,
literal|"abc"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"JMSXGroupID"
argument_list|)
argument_list|)
expr_stmt|;
name|ActiveMQTextMessage
name|amqMessage
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GroupID"
argument_list|,
literal|"abc"
argument_list|,
name|amqMessage
operator|.
name|getGroupID
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReceipts
parameter_list|()
throws|throws
name|Exception
block|{
name|StompConnection
name|receiver
init|=
operator|new
name|StompConnection
argument_list|()
decl_stmt|;
name|URI
name|connectUri
init|=
operator|new
name|URI
argument_list|(
name|bindAddress
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|open
argument_list|(
name|createSocket
argument_list|(
name|connectUri
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|receiver
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiver
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|receiver
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt: msg-1\n"
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|receiver
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Stomp Message does not contain receipt request"
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Receipt contains correct receipt-id"
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|receiver
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt: msg-1\n"
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Receipt contains correct receipt-id"
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"JMS Message does not contain receipt request"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithAutoAck
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithAutoAckAndBytesMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|sendBytesMessage
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|Pattern
name|cl
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Content-length:\\s*(\\d+)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
name|Matcher
name|clMmatcher
init|=
name|cl
operator|.
name|matcher
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|clMmatcher
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|clMmatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"type:\\s*null"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|frame
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBytesMessageWithNulls
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\ncontent-length:5"
operator|+
literal|" \n\n"
operator|+
literal|"\u0001\u0002\u0000\u0004\u0005"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|StompFrame
name|message
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|length
init|=
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"content-length"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|message
operator|.
name|getContent
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithMessageSentWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"s"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"n"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|message
operator|.
name|setByteProperty
argument_list|(
literal|"byte"
argument_list|,
operator|(
name|byte
operator|)
literal|9
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDoubleProperty
argument_list|(
literal|"d"
argument_list|,
literal|2.0
argument_list|)
expr_stmt|;
name|message
operator|.
name|setFloatProperty
argument_list|(
literal|"f"
argument_list|,
operator|(
name|float
operator|)
literal|6.0
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"i"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|message
operator|.
name|setLongProperty
argument_list|(
literal|"l"
argument_list|,
literal|121
argument_list|)
expr_stmt|;
name|message
operator|.
name|setShortProperty
argument_list|(
literal|"s"
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMessagesAreInOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|ctr
init|=
literal|10
decl_stmt|;
name|String
index|[]
name|data
init|=
operator|new
name|String
index|[
name|ctr
index|]
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|getName
argument_list|()
operator|+
name|i
expr_stmt|;
name|sendMessage
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Message not in order"
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// sleep a while before publishing another set of messages
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
name|getName
argument_list|()
operator|+
literal|":second:"
operator|+
name|i
expr_stmt|;
name|sendMessage
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ctr
condition|;
operator|++
name|i
control|)
block|{
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Message not in order"
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithAutoAckAndSelector
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"selector: foo = 'zzz'\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"Ignored message"
argument_list|,
literal|"foo"
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"Real message"
argument_list|,
literal|"foo"
argument_list|,
literal|"zzz"
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have received the real message but got: "
operator|+
name|frame
argument_list|,
name|frame
operator|.
name|indexOf
argument_list|(
literal|"Real message"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeWithClientAck
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:client\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|stompDisconnect
argument_list|()
expr_stmt|;
comment|// message should be received since message was not acknowledged
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|.
name|getJMSRedelivered
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUnsubscribe
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// send a message to our queue
name|sendMessage
argument_list|(
literal|"first message"
argument_list|)
expr_stmt|;
comment|// receive message from socket
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove suscription
name|frame
operator|=
literal|"UNSUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
comment|// send a message to our queue
name|sendMessage
argument_list|(
literal|"second message"
argument_list|)
expr_stmt|;
try|try
block|{
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received frame: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"No message should have been received since subscription was removed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testTransactionCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"BEGIN\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"COMMIT\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have received a message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransactionRollback
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"BEGIN\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n"
operator|+
literal|"first message"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// rollback first message
name|frame
operator|=
literal|"ABORT\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"BEGIN\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n"
operator|+
literal|"second message"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"COMMIT\n"
operator|+
literal|"transaction: tx1\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// This test case is currently failing
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
comment|// only second msg should be received since first msg was rolled back
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"second message"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDisconnectedClientsAreRemovedFromTheBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|assertClients
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// This test case is currently failing
name|waitForFrameToTakeEffect
argument_list|()
expr_stmt|;
name|assertClients
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// now lets kill the stomp connection
name|stompConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertClients
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectNotAuthenticatedWrongUser
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: dejanb\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertClients
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectNotAuthenticatedWrongPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: dejanb\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
name|assertClients
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: guest\n"
operator|+
literal|"passcode: password\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscribeNotAuthorized
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: guest\n"
operator|+
literal|"passcode: password\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationUnknownTranslator
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:test"
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_XML
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
operator|.
name|getStringProperty
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION_ERROR
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationSendXMLObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_XML
operator|+
literal|"\n\n"
operator|+
name|xmlObject
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|ObjectMessage
name|message
init|=
operator|(
name|ObjectMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|SamplePojo
name|object
init|=
operator|(
name|SamplePojo
operator|)
name|message
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Dejan"
argument_list|,
name|object
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationSendJSONObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_JSON
operator|+
literal|"\n\n"
operator|+
name|jsonObject
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|ObjectMessage
name|message
init|=
operator|(
name|ObjectMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|SamplePojo
name|object
init|=
operator|(
name|SamplePojo
operator|)
name|message
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Dejan"
argument_list|,
name|object
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationSubscribeXML
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|message
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_XML
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmlObject
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveJSONObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|message
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_JSON
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|jsonObject
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveXMLObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|message
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_XML
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmlObject
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveObject
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|message
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_XML
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmlObject
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveXMLObjectAndMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|objMessage
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|objMessage
argument_list|)
expr_stmt|;
name|MapMessage
name|mapMessage
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
literal|"Dejan"
argument_list|)
expr_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"city"
argument_list|,
literal|"Belgrade"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mapMessage
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_XML
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmlObject
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmlMap
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveJSONObjectAndMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|objMessage
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|objMessage
argument_list|)
expr_stmt|;
name|MapMessage
name|mapMessage
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
literal|"Dejan"
argument_list|)
expr_stmt|;
name|mapMessage
operator|.
name|setString
argument_list|(
literal|"city"
argument_list|,
literal|"Belgrade"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mapMessage
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_JSON
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|jsonObject
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|jsonMap
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationSendAndReceiveXmlMap
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_XML
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_MAP_JSON
operator|+
literal|"\n\n"
operator|+
name|jsonMap
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmlMap
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|contains
argument_list|(
literal|"jms-map-xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationSendAndReceiveJsonMap
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_JSON
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_MAP_XML
operator|+
literal|"\n\n"
operator|+
name|xmlMap
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|jsonMap
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|contains
argument_list|(
literal|"jms-map-json"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveBytesMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|BytesMessage
name|message
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|}
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_XML
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|Pattern
name|cl
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Content-length:\\s*(\\d+)"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
name|Matcher
name|clMmatcher
init|=
name|cl
operator|.
name|matcher
argument_list|(
name|frame
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|clMmatcher
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|clMmatcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"type:\\s*null"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
operator|.
name|matcher
argument_list|(
name|frame
argument_list|)
operator|.
name|find
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationNotOverrideSubscription
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|message
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_JSON
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|jsonObject
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationIgnoreTransformation
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectMessage
name|message
init|=
name|session
operator|.
name|createObjectMessage
argument_list|(
operator|new
name|SamplePojo
argument_list|(
literal|"Dejan"
argument_list|,
literal|"Belgrade"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_OBJECT_XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|endsWith
argument_list|(
literal|"\n\n"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationSendXMLMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_MAP_XML
operator|+
literal|"\n\n"
operator|+
name|xmlMap
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|MapMessage
name|message
init|=
operator|(
name|MapMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|"Dejan"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationSendJSONMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_MAP_JSON
operator|+
literal|"\n\n"
operator|+
name|jsonMap
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|MapMessage
name|message
init|=
operator|(
name|MapMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|2500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
operator|.
name|getString
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|"Dejan"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveXMLMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MapMessage
name|message
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
literal|"Dejan"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setString
argument_list|(
literal|"city"
argument_list|,
literal|"Belgrade"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_MAP_XML
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|xmlMap
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTransformationReceiveJSONMap
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS."
operator|+
name|getQueueName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MapMessage
name|message
init|=
name|session
operator|.
name|createMapMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
literal|"Dejan"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setString
argument_list|(
literal|"city"
argument_list|,
literal|"Belgrade"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/USERS."
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n"
operator|+
literal|"transformation:"
operator|+
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_MAP_JSON
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|trim
argument_list|()
operator|.
name|endsWith
argument_list|(
name|jsonMap
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDurableUnsub
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get broker JMX view
name|String
name|domain
init|=
literal|"org.apache.activemq"
decl_stmt|;
name|ObjectName
name|brokerName
init|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":Type=Broker,BrokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|view
init|=
operator|(
name|BrokerViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// connect
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// subscribe
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/topic/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\nactivemq.subscriptionName:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
comment|// wait a bit for MBean to get refreshed
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|400
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|assertEquals
argument_list|(
name|view
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// disconnect
name|frame
operator|=
literal|"DISCONNECT\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|400
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
comment|//reconnect
name|stompConnect
argument_list|()
expr_stmt|;
comment|// connect
name|frame
operator|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
comment|// unsubscribe
name|frame
operator|=
literal|"UNSUBSCRIBE\n"
operator|+
literal|"destination:/topic/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\nactivemq.subscriptionName:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|400
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{}
name|assertEquals
argument_list|(
name|view
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMessageIdHeader
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|begin
argument_list|(
literal|"tx1"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|send
argument_list|(
literal|"/queue/"
operator|+
name|getQueueName
argument_list|()
argument_list|,
literal|"msg"
argument_list|,
literal|"tx1"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|commit
argument_list|(
literal|"tx1"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/queue/"
operator|+
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|StompFrame
name|stompMessage
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|stompMessage
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"transaction"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPrefetchSize
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"activemq.prefetchSize"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/queue/"
operator|+
name|getQueueName
argument_list|()
argument_list|,
literal|"client"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
comment|// send messages using JMS
name|sendMessage
argument_list|(
literal|"message 1"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"message 2"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"message 3"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"message 4"
argument_list|)
expr_stmt|;
name|sendMessage
argument_list|(
literal|"message 5"
argument_list|)
expr_stmt|;
name|StompFrame
name|frame
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|frame
operator|.
name|getBody
argument_list|()
argument_list|,
literal|"message 1"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|begin
argument_list|(
literal|"tx1"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|ack
argument_list|(
name|frame
argument_list|,
literal|"tx1"
argument_list|)
expr_stmt|;
name|StompFrame
name|frame1
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|frame1
operator|.
name|getBody
argument_list|()
argument_list|,
literal|"message 2"
argument_list|)
expr_stmt|;
try|try
block|{
name|StompFrame
name|frame2
init|=
name|stompConnection
operator|.
name|receive
argument_list|(
literal|500
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame2
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Should not have received the second message"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|soe
parameter_list|)
block|{}
name|stompConnection
operator|.
name|ack
argument_list|(
name|frame1
argument_list|,
literal|"tx1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|abort
argument_list|(
literal|"tx1"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|begin
argument_list|(
literal|"tx2"
argument_list|)
expr_stmt|;
comment|// Previously delivered message need to get re-acked...
name|stompConnection
operator|.
name|ack
argument_list|(
name|frame
argument_list|,
literal|"tx2"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|ack
argument_list|(
name|frame1
argument_list|,
literal|"tx2"
argument_list|)
expr_stmt|;
name|StompFrame
name|frame3
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|frame3
operator|.
name|getBody
argument_list|()
argument_list|,
literal|"message 3"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|ack
argument_list|(
name|frame3
argument_list|,
literal|"tx2"
argument_list|)
expr_stmt|;
name|StompFrame
name|frame4
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|frame4
operator|.
name|getBody
argument_list|()
argument_list|,
literal|"message 4"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|ack
argument_list|(
name|frame4
argument_list|,
literal|"tx2"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|commit
argument_list|(
literal|"tx2"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|begin
argument_list|(
literal|"tx3"
argument_list|)
expr_stmt|;
name|StompFrame
name|frame5
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|frame5
operator|.
name|getBody
argument_list|()
argument_list|,
literal|"message 5"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|ack
argument_list|(
name|frame5
argument_list|,
literal|"tx3"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|commit
argument_list|(
literal|"tx3"
argument_list|)
expr_stmt|;
name|stompDisconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTransactionsWithMultipleDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"activemq.prefetchSize"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"activemq.exclusive"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/queue/test1"
argument_list|,
literal|"client"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|begin
argument_list|(
literal|"ID:tx1"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"receipt"
argument_list|,
literal|"ID:msg1"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|send
argument_list|(
literal|"/queue/test2"
argument_list|,
literal|"test message"
argument_list|,
literal|"ID:tx1"
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|commit
argument_list|(
literal|"ID:tx1"
argument_list|)
expr_stmt|;
comment|// make sure connection is active after commit
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|send
argument_list|(
literal|"/queue/test1"
argument_list|,
literal|"another message"
argument_list|)
expr_stmt|;
name|StompFrame
name|frame
init|=
name|stompConnection
operator|.
name|receive
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTempDestination
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/temp-queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/temp-queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|StompFrame
name|message
init|=
name|stompConnection
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Hello World"
argument_list|,
name|message
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJMSXUserIDIsSetInMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|message
operator|.
name|getStringProperty
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|USERID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testJMSXUserIDIsSetInStompMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login: system\n"
operator|+
literal|"passcode: manager\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"Hello World"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|StompFrame
name|message
init|=
name|stompConnection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|USERID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testClientSetMessageIdIsIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|MESSAGE_ID
argument_list|,
literal|"Thisisnotallowed"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|TIMESTAMP
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|REDELIVERED
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|,
literal|"Thisisnotallowed"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|USERID
argument_list|,
literal|"Thisisnotallowed"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|send
argument_list|(
literal|"/queue/"
operator|+
name|getQueueName
argument_list|()
argument_list|,
literal|"msg"
argument_list|,
literal|null
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/queue/"
operator|+
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|StompFrame
name|stompMessage
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mess_headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mess_headers
operator|=
name|stompMessage
operator|.
name|getHeaders
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Thisisnotallowed"
operator|.
name|equals
argument_list|(
name|mess_headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|MESSAGE_ID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"1234"
operator|.
name|equals
argument_list|(
name|mess_headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|TIMESTAMP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mess_headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|REDELIVERED
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mess_headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"system"
argument_list|,
name|mess_headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|USERID
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertClients
parameter_list|(
name|int
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Connection
index|[]
name|clients
init|=
name|broker
operator|.
name|getBroker
argument_list|()
operator|.
name|getClients
argument_list|()
decl_stmt|;
name|int
name|actual
init|=
name|clients
operator|.
name|length
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Number of clients"
argument_list|,
name|expected
argument_list|,
name|actual
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForFrameToTakeEffect
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// bit of a dirty hack :)
comment|// another option would be to force some kind of receipt to be returned
comment|// from the frame
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

