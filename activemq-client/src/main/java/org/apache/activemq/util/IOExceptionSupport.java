begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|IOExceptionSupport
block|{
specifier|private
name|IOExceptionSupport
parameter_list|()
block|{     }
specifier|public
specifier|static
name|IOException
name|create
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
return|return
name|exception
return|;
block|}
specifier|public
specifier|static
name|IOException
name|create
parameter_list|(
name|String
name|msg
parameter_list|,
name|Exception
name|cause
parameter_list|)
block|{
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
return|return
name|exception
return|;
block|}
specifier|public
specifier|static
name|IOException
name|create
parameter_list|(
name|Throwable
name|cause
parameter_list|)
block|{
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
return|return
name|exception
return|;
block|}
specifier|public
specifier|static
name|IOException
name|create
parameter_list|(
name|Exception
name|cause
parameter_list|)
block|{
name|IOException
name|exception
init|=
operator|new
name|IOException
argument_list|(
name|cause
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|cause
argument_list|)
expr_stmt|;
return|return
name|exception
return|;
block|}
specifier|public
specifier|static
name|IOException
name|createFrameSizeException
parameter_list|(
name|int
name|size
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
return|return
operator|new
name|IOException
argument_list|(
literal|"Frame size of "
operator|+
name|toHumanReadableSizeString
argument_list|(
name|size
argument_list|)
operator|+
literal|" larger than max allowed "
operator|+
name|toHumanReadableSizeString
argument_list|(
name|maxSize
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|toHumanReadableSizeString
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
return|return
name|toHumanReadableSizeString
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|toHumanReadableSizeString
parameter_list|(
specifier|final
name|long
name|size
parameter_list|)
block|{
return|return
name|toHumanReadableSizeString
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|toHumanReadableSizeString
parameter_list|(
specifier|final
name|BigInteger
name|size
parameter_list|)
block|{
name|String
name|displaySize
decl_stmt|;
specifier|final
name|BigInteger
name|ONE_KB_BI
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
specifier|final
name|BigInteger
name|ONE_MB_BI
init|=
name|ONE_KB_BI
operator|.
name|multiply
argument_list|(
name|ONE_KB_BI
argument_list|)
decl_stmt|;
specifier|final
name|BigInteger
name|ONE_GB_BI
init|=
name|ONE_KB_BI
operator|.
name|multiply
argument_list|(
name|ONE_MB_BI
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|.
name|divide
argument_list|(
name|ONE_GB_BI
argument_list|)
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|>
literal|0
condition|)
block|{
name|displaySize
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|size
operator|.
name|divide
argument_list|(
name|ONE_GB_BI
argument_list|)
argument_list|)
operator|+
literal|" GB"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|.
name|divide
argument_list|(
name|ONE_MB_BI
argument_list|)
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|>
literal|0
condition|)
block|{
name|displaySize
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|size
operator|.
name|divide
argument_list|(
name|ONE_MB_BI
argument_list|)
argument_list|)
operator|+
literal|" MB"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
operator|.
name|divide
argument_list|(
name|ONE_KB_BI
argument_list|)
operator|.
name|compareTo
argument_list|(
name|BigInteger
operator|.
name|ZERO
argument_list|)
operator|>
literal|0
condition|)
block|{
name|displaySize
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|size
operator|.
name|divide
argument_list|(
name|ONE_KB_BI
argument_list|)
argument_list|)
operator|+
literal|" KB"
expr_stmt|;
block|}
else|else
block|{
name|displaySize
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
operator|+
literal|" bytes"
expr_stmt|;
block|}
return|return
name|displaySize
return|;
block|}
block|}
end_class

end_unit

