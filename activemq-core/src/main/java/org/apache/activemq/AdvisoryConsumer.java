begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AdvisoryConsumer
implements|implements
name|ActiveMQDispatcher
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AdvisoryConsumer
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|deliveredCounter
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|private
name|ConsumerInfo
name|info
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|public
name|AdvisoryConsumer
parameter_list|(
name|ActiveMQConnection
name|connection
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|info
operator|=
operator|new
name|ConsumerInfo
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|AdvisorySupport
operator|.
name|TEMP_DESTINATION_COMPOSITE_ADVISORY_TOPIC
argument_list|)
expr_stmt|;
name|info
operator|.
name|setPrefetchSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|addDispatcher
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|syncSendPacket
argument_list|(
name|this
operator|.
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
try|try
block|{
name|this
operator|.
name|connection
operator|.
name|asyncSendPacket
argument_list|(
name|info
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to send remove command: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|connection
operator|.
name|removeDispatcher
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
comment|// Auto ack messages when we reach 75% of the prefetch
name|deliveredCounter
operator|++
expr_stmt|;
if|if
condition|(
name|deliveredCounter
operator|>
operator|(
literal|0.75
operator|*
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|)
condition|)
block|{
try|try
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
name|deliveredCounter
argument_list|)
decl_stmt|;
name|connection
operator|.
name|asyncSendPacket
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|deliveredCounter
operator|=
literal|0
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|connection
operator|.
name|onClientInternalException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|DataStructure
name|o
init|=
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getDataStructure
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
operator|&&
name|o
operator|.
name|getClass
argument_list|()
operator|==
name|DestinationInfo
operator|.
name|class
condition|)
block|{
name|processDestinationInfo
argument_list|(
operator|(
name|DestinationInfo
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//This can happen across networks
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unexpected message was dispatched to the AdvisoryConsumer: "
operator|+
name|md
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processDestinationInfo
parameter_list|(
name|DestinationInfo
name|dinfo
parameter_list|)
block|{
name|ActiveMQDestination
name|dest
init|=
name|dinfo
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
return|return;
block|}
name|ActiveMQTempDestination
name|tempDest
init|=
operator|(
name|ActiveMQTempDestination
operator|)
name|dest
decl_stmt|;
if|if
condition|(
name|dinfo
operator|.
name|getOperationType
argument_list|()
operator|==
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
condition|)
block|{
name|connection
operator|.
name|activeTempDestinations
operator|.
name|put
argument_list|(
name|tempDest
argument_list|,
name|tempDest
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dinfo
operator|.
name|getOperationType
argument_list|()
operator|==
name|DestinationInfo
operator|.
name|REMOVE_OPERATION_TYPE
condition|)
block|{
name|connection
operator|.
name|activeTempDestinations
operator|.
name|remove
argument_list|(
name|tempDest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

