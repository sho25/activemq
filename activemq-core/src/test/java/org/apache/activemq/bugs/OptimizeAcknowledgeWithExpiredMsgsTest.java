begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test for AMQ-3965.  * A consumer may be stalled in case it uses optimizeAcknowledge and receives   * a number of messages that expire before being dispatched to application code.   * See AMQ-3965 for more details.  */
end_comment

begin_class
specifier|public
class|class
name|OptimizeAcknowledgeWithExpiredMsgsTest
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OptimizeAcknowledgeWithExpiredMsgsTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|BrokerService
name|broker
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DATA_DIR
init|=
literal|"target/activemq-data/"
decl_stmt|;
specifier|public
specifier|final
name|String
name|brokerUrl
init|=
literal|"tcp://localhost:61614"
decl_stmt|;
comment|/**       * Creates a broker instance and starts it.      *       * @param brokerUri - transport uri of broker      * @param brokerName - name for the broker      * @return a BrokerService instance with transport uri and broker name set      * @throws Exception      */
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|URI
name|brokerUri
parameter_list|,
name|String
name|brokerName
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
name|brokerUri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerId
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDataDirectory
argument_list|(
name|DATA_DIR
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setEnableStatistics
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|options
init|=
literal|"?persistent=false&useJmx=false&deleteAllMessagesOnStartup=true"
decl_stmt|;
name|broker
operator|=
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:("
operator|+
name|brokerUrl
operator|+
literal|")"
operator|+
name|options
argument_list|)
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tests for AMQ-3965      * Creates connection into broker using optimzeAcknowledge and prefetch=100      * Creates producer and consumer. Producer sends 45 msgs that will expire      * at consumer (but before being dispatched to app code).      * Producer then sends 60 msgs without expiry.      *       * Consumer receives msgs using a MessageListener and increments a counter.      * Main thread sleeps for 5 seconds and checks the counter value.       * If counter != 60 msgs (the number of msgs that should get dispatched      * to consumer) the test fails.       */
annotation|@
name|Test
specifier|public
name|void
name|testOptimizedAckWithExpiredMsgs
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUrl
operator|+
literal|"?jms.optimizeAcknowledge=true&jms.prefetchPolicy.all=100"
argument_list|)
decl_stmt|;
comment|// Create JMS resources
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
comment|// ***** Consumer code *****
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MyMessageListener
name|listener
init|=
operator|new
name|MyMessageListener
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|(
name|ExceptionListener
operator|)
name|listener
argument_list|)
expr_stmt|;
comment|// ***** Producer Code *****
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
name|String
name|text
init|=
literal|"Hello world! From: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
operator|+
name|this
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|TextMessage
name|message
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|setDelay
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Produce msgs that will expire quickly
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|45
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sent message: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" with expiry 30 msec"
argument_list|)
expr_stmt|;
block|}
comment|// Produce msgs that don't expire
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sent message: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" with no expiry."
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|setDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// set exit condition
name|TestExitCondition
name|cond
init|=
operator|new
name|TestExitCondition
argument_list|(
name|listener
argument_list|)
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
name|cond
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Error: Some non-expired messages were not received."
argument_list|,
name|listener
operator|.
name|getCounter
argument_list|()
operator|>=
literal|60
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received all expected messages with counter at "
operator|+
name|listener
operator|.
name|getCounter
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cleanup
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up."
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|listener
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|milliSecondTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliSecondTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|igonred
parameter_list|)
block|{         }
block|}
comment|/**      * Defines the exit condition for the test.      */
specifier|private
class|class
name|TestExitCondition
implements|implements
name|Wait
operator|.
name|Condition
block|{
specifier|private
name|MyMessageListener
name|listener
decl_stmt|;
specifier|public
name|TestExitCondition
parameter_list|(
name|MyMessageListener
name|l
parameter_list|)
block|{
name|this
operator|.
name|listener
operator|=
name|l
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|listener
operator|.
name|getCounter
argument_list|()
operator|==
literal|36
return|;
block|}
block|}
comment|/**       * Standard JMS MessageListener      */
specifier|private
class|class
name|MyMessageListener
implements|implements
name|MessageListener
implements|,
name|ExceptionListener
block|{
specifier|private
name|AtomicInteger
name|counter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|int
name|delay
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Got Message "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"counter at "
operator|+
name|counter
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|delay
operator|>
literal|0
condition|)
block|{
name|sleep
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCounter
parameter_list|()
block|{
return|return
name|counter
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
specifier|public
name|void
name|setDelay
parameter_list|(
name|int
name|newDelay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|newDelay
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|onException
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"JMS Exception occured.  Shutting down client."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

