begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
package|;
end_package

begin_comment
comment|/**   * Helper class for : TestIIOPServer  *    * @author OpenORB Compiler  */
end_comment

begin_class
specifier|public
class|class
name|TestIIOPServerHelper
block|{
comment|/**      * Insert TestIIOPServer into an any      * @param a an any      * @param t TestIIOPServer value      */
specifier|public
specifier|static
name|void
name|insert
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
name|a
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServer
name|t
parameter_list|)
block|{
name|a
operator|.
name|insert_Object
argument_list|(
name|t
argument_list|,
name|type
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Extract TestIIOPServer from an any      *      * @param a an any      * @return the extracted TestIIOPServer value      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServer
name|extract
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Any
name|a
parameter_list|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|type
argument_list|()
operator|.
name|equivalent
argument_list|(
name|type
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
argument_list|()
throw|;
block|}
try|try
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServerHelper
operator|.
name|narrow
argument_list|(
name|a
operator|.
name|extract_Object
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|BAD_PARAM
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|MARSHAL
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//
comment|// Internal TypeCode value
comment|//
specifier|private
specifier|static
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
name|_tc
init|=
literal|null
decl_stmt|;
comment|/**      * Return the TestIIOPServer TypeCode      * @return a TypeCode      */
specifier|public
specifier|static
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|TypeCode
name|type
parameter_list|()
block|{
if|if
condition|(
name|_tc
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
name|orb
init|=
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|ORB
operator|.
name|init
argument_list|()
decl_stmt|;
name|_tc
operator|=
name|orb
operator|.
name|create_interface_tc
argument_list|(
name|id
argument_list|()
argument_list|,
literal|"TestIIOPServer"
argument_list|)
expr_stmt|;
block|}
return|return
name|_tc
return|;
block|}
comment|/**      * Return the TestIIOPServer IDL ID      * @return an ID      */
specifier|public
specifier|static
name|String
name|id
parameter_list|()
block|{
return|return
name|_id
return|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|_id
init|=
literal|"IDL:org/activeio/oneport/TestIIOPServer:1.0"
decl_stmt|;
comment|/**      * Read TestIIOPServer from a marshalled stream      * @param istream the input stream      * @return the readed TestIIOPServer value      */
specifier|public
specifier|static
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServer
name|read
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|InputStream
name|istream
parameter_list|)
block|{
return|return
operator|(
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServer
operator|)
name|istream
operator|.
name|read_Object
argument_list|(
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|_TestIIOPServerStub
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**      * Write TestIIOPServer into a marshalled stream      * @param ostream the output stream      * @param value TestIIOPServer value      */
specifier|public
specifier|static
name|void
name|write
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|OutputStream
name|ostream
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServer
name|value
parameter_list|)
block|{
name|ostream
operator|.
name|write_Object
argument_list|(
operator|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ObjectImpl
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**      * Narrow CORBA::Object to TestIIOPServer      * @param obj the CORBA Object      * @return TestIIOPServer Object      */
specifier|public
specifier|static
name|TestIIOPServer
name|narrow
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|obj
operator|instanceof
name|TestIIOPServer
condition|)
return|return
operator|(
name|TestIIOPServer
operator|)
name|obj
return|;
if|if
condition|(
name|obj
operator|.
name|_is_a
argument_list|(
name|id
argument_list|()
argument_list|)
condition|)
block|{
name|_TestIIOPServerStub
name|stub
init|=
operator|new
name|_TestIIOPServerStub
argument_list|()
decl_stmt|;
name|stub
operator|.
name|_set_delegate
argument_list|(
operator|(
operator|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ObjectImpl
operator|)
name|obj
operator|)
operator|.
name|_get_delegate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stub
return|;
block|}
throw|throw
operator|new
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|BAD_PARAM
argument_list|()
throw|;
block|}
comment|/**      * Unchecked Narrow CORBA::Object to TestIIOPServer      * @param obj the CORBA Object      * @return TestIIOPServer Object      */
specifier|public
specifier|static
name|TestIIOPServer
name|unchecked_narrow
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|obj
operator|instanceof
name|TestIIOPServer
condition|)
return|return
operator|(
name|TestIIOPServer
operator|)
name|obj
return|;
name|_TestIIOPServerStub
name|stub
init|=
operator|new
name|_TestIIOPServerStub
argument_list|()
decl_stmt|;
name|stub
operator|.
name|_set_delegate
argument_list|(
operator|(
operator|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ObjectImpl
operator|)
name|obj
operator|)
operator|.
name|_get_delegate
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|stub
return|;
block|}
block|}
end_class

end_unit

