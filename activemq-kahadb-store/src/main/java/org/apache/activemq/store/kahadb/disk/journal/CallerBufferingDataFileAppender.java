begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Adler32
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Checksum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|RecoverableRandomAccessFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An optimized writer to do batch appends to a data file. This object is thread  * safe and gains throughput as you increase the number of concurrent writes it  * does.  * The thread calling enqueue does the file open and buffering of the data, which  * reduces the round trip of the write thread.  *  */
end_comment

begin_class
class|class
name|CallerBufferingDataFileAppender
extends|extends
name|DataFileAppender
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CallerBufferingDataFileAppender
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|DataByteArrayOutputStream
name|cachedBuffers
index|[]
init|=
operator|new
name|DataByteArrayOutputStream
index|[]
block|{
operator|new
name|DataByteArrayOutputStream
argument_list|(
name|maxWriteBatchSize
argument_list|)
block|,
operator|new
name|DataByteArrayOutputStream
argument_list|(
name|maxWriteBatchSize
argument_list|)
block|}
decl_stmt|;
specifier|volatile
name|byte
name|flip
init|=
literal|0x1
decl_stmt|;
specifier|public
class|class
name|WriteBatch
extends|extends
name|DataFileAppender
operator|.
name|WriteBatch
block|{
name|DataByteArrayOutputStream
name|buff
init|=
name|cachedBuffers
index|[
name|flip
operator|^=
literal|1
index|]
decl_stmt|;
specifier|private
name|boolean
name|forceToDisk
decl_stmt|;
specifier|public
name|WriteBatch
parameter_list|(
name|DataFile
name|dataFile
parameter_list|,
name|int
name|offset
parameter_list|,
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dataFile
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|initBuffer
argument_list|(
name|buff
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|write
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|append
parameter_list|(
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|append
argument_list|(
name|write
argument_list|)
expr_stmt|;
name|forceToDisk
operator||=
name|appendToBuffer
argument_list|(
name|write
argument_list|,
name|buff
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DataFileAppender
operator|.
name|WriteBatch
name|newWriteBatch
parameter_list|(
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|,
name|DataFile
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|WriteBatch
argument_list|(
name|file
argument_list|,
name|file
operator|.
name|getLength
argument_list|()
argument_list|,
name|write
argument_list|)
return|;
block|}
specifier|private
name|void
name|initBuffer
parameter_list|(
name|DataByteArrayOutputStream
name|buff
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write an empty batch control record.
name|buff
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buff
operator|.
name|write
argument_list|(
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_HEADER
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CallerBufferingDataFileAppender
parameter_list|(
name|Journal
name|dataManager
parameter_list|)
block|{
name|super
argument_list|(
name|dataManager
argument_list|)
expr_stmt|;
block|}
comment|/**      * The async processing loop that writes to the data files and does the      * force calls. Since the file sync() call is the slowest of all the      * operations, this algorithm tries to 'batch' or group together several      * file sync() requests into a single file sync() call. The batching is      * accomplished attaching the same CountDownLatch instance to every force      * request in a group.      */
annotation|@
name|Override
specifier|protected
name|void
name|processQueue
parameter_list|()
block|{
name|DataFile
name|dataFile
init|=
literal|null
decl_stmt|;
name|RecoverableRandomAccessFile
name|file
init|=
literal|null
decl_stmt|;
name|WriteBatch
name|wb
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|o
init|=
literal|null
decl_stmt|;
comment|// Block till we get a command.
synchronized|synchronized
init|(
name|enqueueMutex
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|nextWriteBatch
operator|!=
literal|null
condition|)
block|{
name|o
operator|=
name|nextWriteBatch
expr_stmt|;
name|nextWriteBatch
operator|=
literal|null
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|shutdown
condition|)
block|{
return|return;
block|}
name|enqueueMutex
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|enqueueMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|wb
operator|=
operator|(
name|WriteBatch
operator|)
name|o
expr_stmt|;
if|if
condition|(
name|dataFile
operator|!=
name|wb
operator|.
name|dataFile
condition|)
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|periodicSync
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Syning file {} on rotate"
argument_list|,
name|dataFile
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
name|dataFile
operator|.
name|closeRandomAccessFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|dataFile
operator|=
name|wb
operator|.
name|dataFile
expr_stmt|;
name|file
operator|=
name|dataFile
operator|.
name|openRandomAccessFile
argument_list|()
expr_stmt|;
block|}
specifier|final
name|DataByteArrayOutputStream
name|buff
init|=
name|wb
operator|.
name|buff
decl_stmt|;
specifier|final
name|boolean
name|forceToDisk
init|=
name|wb
operator|.
name|forceToDisk
decl_stmt|;
name|ByteSequence
name|sequence
init|=
name|buff
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
comment|// Now we can fill in the batch control record properly.
name|buff
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buff
operator|.
name|skip
argument_list|(
literal|5
operator|+
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_MAGIC
operator|.
name|length
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeInt
argument_list|(
name|sequence
operator|.
name|getLength
argument_list|()
operator|-
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|journal
operator|.
name|isChecksum
argument_list|()
condition|)
block|{
name|Checksum
name|checksum
init|=
operator|new
name|Adler32
argument_list|()
decl_stmt|;
name|checksum
operator|.
name|update
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
operator|+
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
operator|-
name|Journal
operator|.
name|BATCH_CONTROL_RECORD_SIZE
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeLong
argument_list|(
name|checksum
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now do the 1 big write.
name|file
operator|.
name|seek
argument_list|(
name|wb
operator|.
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxStat
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|statIdx
operator|<
name|maxStat
condition|)
block|{
name|stats
index|[
name|statIdx
operator|++
index|]
operator|=
name|sequence
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|long
name|all
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|statIdx
operator|>
literal|0
condition|;
control|)
block|{
name|all
operator|+=
name|stats
index|[
operator|--
name|statIdx
index|]
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ave writeSize: "
operator|+
name|all
operator|/
name|maxStat
argument_list|)
expr_stmt|;
block|}
block|}
name|file
operator|.
name|write
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationTarget
name|replicationTarget
init|=
name|journal
operator|.
name|getReplicationTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicationTarget
operator|!=
literal|null
condition|)
block|{
name|replicationTarget
operator|.
name|replicate
argument_list|(
name|wb
operator|.
name|writes
operator|.
name|getHead
argument_list|()
operator|.
name|location
argument_list|,
name|sequence
argument_list|,
name|forceToDisk
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|forceToDisk
condition|)
block|{
name|file
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
name|Journal
operator|.
name|WriteCommand
name|lastWrite
init|=
name|wb
operator|.
name|writes
operator|.
name|getTail
argument_list|()
decl_stmt|;
name|journal
operator|.
name|setLastAppendLocation
argument_list|(
name|lastWrite
operator|.
name|location
argument_list|)
expr_stmt|;
name|signalDone
argument_list|(
name|wb
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
synchronized|synchronized
init|(
name|enqueueMutex
init|)
block|{
name|firstAsyncException
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|wb
operator|!=
literal|null
condition|)
block|{
name|wb
operator|.
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|wb
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nextWriteBatch
operator|!=
literal|null
condition|)
block|{
name|nextWriteBatch
operator|.
name|exception
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|nextWriteBatch
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|periodicSync
condition|)
block|{
if|if
condition|(
name|logger
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"Syning file {} on close"
argument_list|,
name|dataFile
operator|.
name|getFile
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|file
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
name|dataFile
operator|.
name|closeRandomAccessFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wb
operator|!=
literal|null
operator|&&
name|wb
operator|.
name|buff
operator|!=
literal|null
condition|)
block|{
name|wb
operator|.
name|buff
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{             }
name|shutdownDone
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|appendToBuffer
parameter_list|(
name|Journal
operator|.
name|WriteCommand
name|write
parameter_list|,
name|DataByteArrayOutputStream
name|buff
parameter_list|)
throws|throws
name|IOException
block|{
name|buff
operator|.
name|writeInt
argument_list|(
name|write
operator|.
name|location
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|writeByte
argument_list|(
name|write
operator|.
name|location
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|buff
operator|.
name|write
argument_list|(
name|write
operator|.
name|data
operator|.
name|getData
argument_list|()
argument_list|,
name|write
operator|.
name|data
operator|.
name|getOffset
argument_list|()
argument_list|,
name|write
operator|.
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|write
operator|.
name|sync
operator||
operator|(
name|syncOnComplete
operator|&&
name|write
operator|.
name|onComplete
operator|!=
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

