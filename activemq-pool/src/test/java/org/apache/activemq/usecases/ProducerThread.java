begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ProducerThread
extends|extends
name|Thread
block|{
specifier|private
name|JmsTemplate
name|jmsTemplate
decl_stmt|;
specifier|private
name|int
name|numberOfTopics
decl_stmt|;
specifier|private
name|int
name|numberOfMessagesToSend
decl_stmt|;
specifier|private
name|int
name|messagesSent
decl_stmt|;
specifier|private
name|Random
name|generator
decl_stmt|;
specifier|private
name|String
name|queuePrefix
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|String
name|message
decl_stmt|;
specifier|private
name|MessageCreator
name|messageCreator
decl_stmt|;
specifier|private
name|int
name|sendDelay
decl_stmt|;
specifier|private
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ProducerThread
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|initialize
argument_list|()
expr_stmt|;
name|Random
name|generator
init|=
operator|new
name|Random
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|messagesSent
operator|<
name|numberOfMessagesToSend
condition|)
block|{
name|int
name|queueSuffix
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|numberOfTopics
argument_list|)
decl_stmt|;
name|jmsTemplate
operator|.
name|send
argument_list|(
name|queuePrefix
operator|+
name|queueSuffix
argument_list|,
name|messageCreator
argument_list|)
expr_stmt|;
name|messagesSent
operator|++
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": sent msg #"
operator|+
name|messagesSent
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sendDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"ProducerThread shutting down."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initialize
parameter_list|()
block|{
name|jmsTemplate
operator|=
operator|new
name|JmsTemplate
argument_list|()
expr_stmt|;
name|jmsTemplate
operator|.
name|setPubSubDomain
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|jmsTemplate
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|messageCreator
operator|=
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|session
operator|.
name|createTextMessage
argument_list|(
name|message
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/** 	 * @param numberOfTopics the numberOfTopics to set 	 */
specifier|protected
name|void
name|setNumberOfQueues
parameter_list|(
name|int
name|numberOfTopics
parameter_list|)
block|{
name|this
operator|.
name|numberOfTopics
operator|=
name|numberOfTopics
expr_stmt|;
block|}
comment|/** 	 * @param queuePrefix the queuePrefix to set 	 */
specifier|protected
name|void
name|setQueuePrefix
parameter_list|(
name|String
name|queuePrefix
parameter_list|)
block|{
name|this
operator|.
name|queuePrefix
operator|=
name|queuePrefix
expr_stmt|;
block|}
comment|/** 	 * @param connectionFactory the connectionFactory to set 	 */
specifier|protected
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
comment|/** 	 * @param message the message to set 	 */
specifier|protected
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
block|}
comment|/** 	 * @param numberOfMessagesToSend the numberOfMessagesToSend to set 	 */
specifier|protected
name|void
name|setNumberOfMessagesToSend
parameter_list|(
name|int
name|numberOfMessagesToSend
parameter_list|)
block|{
name|this
operator|.
name|numberOfMessagesToSend
operator|=
name|numberOfMessagesToSend
expr_stmt|;
block|}
specifier|public
name|void
name|setSendDelay
parameter_list|(
name|int
name|sendDelay
parameter_list|)
block|{
name|this
operator|.
name|sendDelay
operator|=
name|sendDelay
expr_stmt|;
block|}
specifier|public
name|int
name|getMessagesSent
parameter_list|()
block|{
return|return
name|messagesSent
return|;
block|}
block|}
end_class

end_unit

