begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|FactoryFinder
block|{
comment|/**      * The strategey that the FactoryFinder uses to find load and instanciate Objects      * can be chagned out by calling the      * {@link org.apache.activemq.util.FactoryFinder#setObjectFactory(org.apache.activemq.util.FactoryFinder.ObjectFactory)}      * method with a custom implemenation of ObjectFactory.      *      * The default ObjectFactory is typically changed out when running in a specialized container      * enviorment where service discovery needs to be done via the container system.  For example,      * in an OSGi scenario.      */
specifier|public
interface|interface
name|ObjectFactory
block|{
comment|/**          * @param path the full service path           * @return          */
specifier|public
name|Object
name|create
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
function_decl|;
block|}
comment|/**      * The default implementation of Object factory which works well in standalone applications.      */
specifier|protected
specifier|static
class|class
name|StandaloneObjectFactory
implements|implements
name|ObjectFactory
block|{
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|classMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Object
name|create
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
throws|,
name|IOException
block|{
name|Class
name|clazz
init|=
name|classMap
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|clazz
operator|=
name|loadClass
argument_list|(
name|loadProperties
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
specifier|static
specifier|public
name|Class
name|loadClass
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
name|String
name|className
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected property is missing: class"
argument_list|)
throw|;
block|}
name|Class
name|clazz
init|=
literal|null
decl_stmt|;
name|ClassLoader
name|loader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clazz
operator|=
name|loader
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|clazz
operator|=
name|FactoryFinder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
specifier|static
specifier|public
name|Properties
name|loadProperties
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
comment|// lets try the thread context class loader first
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|StandaloneObjectFactory
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
name|InputStream
name|in
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|FactoryFinder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find factory class for resource: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
comment|// lets load the file
name|BufferedInputStream
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                 }
block|}
block|}
block|}
comment|// ================================================================
comment|// Class methods and properties
comment|// ================================================================
specifier|private
specifier|static
name|ObjectFactory
name|objectFactory
init|=
operator|new
name|StandaloneObjectFactory
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|ObjectFactory
name|getObjectFactory
parameter_list|()
block|{
return|return
name|objectFactory
return|;
block|}
specifier|public
specifier|static
name|void
name|setObjectFactory
parameter_list|(
name|ObjectFactory
name|objectFactory
parameter_list|)
block|{
name|FactoryFinder
operator|.
name|objectFactory
operator|=
name|objectFactory
expr_stmt|;
block|}
comment|// ================================================================
comment|// Instance methods and properties
comment|// ================================================================
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|public
name|FactoryFinder
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|/**      * Creates a new instance of the given key      *      * @param key is the key to add to the path to find a text file containing      *                the factory name      * @return a newly created instance      */
specifier|public
name|Object
name|newInstance
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
block|{
return|return
name|objectFactory
operator|.
name|create
argument_list|(
name|path
operator|+
name|key
argument_list|)
return|;
block|}
block|}
end_class

end_unit

