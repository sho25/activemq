begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|socket
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EOSPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|EmptyPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stream
operator|.
name|sync
operator|.
name|socket
operator|.
name|SocketStreamChannel
import|;
end_import

begin_comment
comment|/**  * A {@see org.activeio.SynchChannel} implementation that uses a {@see java.net.Socket}  *  to talk to the network.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|SocketSyncChannel
implements|implements
name|SyncChannel
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|SocketStreamChannel
name|channel
decl_stmt|;
specifier|private
name|Packet
name|inputPacket
decl_stmt|;
specifier|private
specifier|final
name|OutputStream
name|os
decl_stmt|;
specifier|private
specifier|final
name|InputStream
name|is
decl_stmt|;
specifier|protected
name|SocketSyncChannel
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
operator|new
name|SocketStreamChannel
argument_list|(
name|socket
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SocketSyncChannel
parameter_list|(
name|SocketStreamChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|os
operator|=
name|channel
operator|.
name|getOutputStream
argument_list|()
expr_stmt|;
name|is
operator|=
name|channel
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
name|channel
operator|.
name|setReceiveBufferSize
argument_list|(
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
name|channel
operator|.
name|setSendBufferSize
argument_list|(
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.activeio.SynchChannel#read(long)      */
specifier|synchronized
specifier|public
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
name|read
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|timeout
operator|==
name|SyncChannelServer
operator|.
name|WAIT_FOREVER_TIMEOUT
condition|)
name|channel
operator|.
name|setSoTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|timeout
operator|==
name|SyncChannelServer
operator|.
name|NO_WAIT_TIMEOUT
condition|)
name|channel
operator|.
name|setSoTimeout
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|channel
operator|.
name|setSoTimeout
argument_list|(
operator|(
name|int
operator|)
name|timeout
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputPacket
operator|==
literal|null
operator|||
operator|!
name|inputPacket
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|inputPacket
operator|=
name|allocatePacket
argument_list|()
expr_stmt|;
block|}
name|ByteSequence
name|sequence
init|=
name|inputPacket
operator|.
name|asByteSequence
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|is
operator|.
name|read
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
operator|-
literal|1
condition|)
return|return
name|EOSPacket
operator|.
name|EOS_PACKET
return|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
name|EmptyPacket
operator|.
name|EMPTY_PACKET
return|;
name|inputPacket
operator|.
name|position
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|Packet
name|remaining
init|=
name|inputPacket
operator|.
name|slice
argument_list|()
decl_stmt|;
name|inputPacket
operator|.
name|flip
argument_list|()
expr_stmt|;
name|Packet
name|data
init|=
name|inputPacket
operator|.
name|slice
argument_list|()
decl_stmt|;
comment|// Keep the remaining buffer around to fill with data.
name|inputPacket
operator|=
name|remaining
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Packet
name|allocatePacket
parameter_list|()
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|DEFAULT_BUFFER_SIZE
index|]
decl_stmt|;
return|return
operator|new
name|ByteArrayPacket
argument_list|(
name|data
argument_list|)
return|;
block|}
comment|/**      * @see org.activeio.Channel#write(org.activeio.packet.Packet)      */
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|packet
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Channel#flush()      */
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/**      * @see org.activeio.Disposable#dispose()      */
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|channel
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|channel
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|channel
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|channel
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|channel
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

