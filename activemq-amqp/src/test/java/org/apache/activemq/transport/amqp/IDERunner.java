begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_class
specifier|public
class|class
name|IDERunner
block|{
specifier|private
specifier|static
specifier|final
name|String
name|AMQP_TRANSFORMER
init|=
literal|"jms"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|TRANSPORT_TRACE
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|PERSISTENT
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|CLIENT_CONNECT
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|TransportConnector
name|connector
init|=
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"amqp://0.0.0.0:5672?trace="
operator|+
name|TRANSPORT_TRACE
operator|+
literal|"&transport.transformer="
operator|+
name|AMQP_TRANSFORMER
operator|+
literal|"&transport.wireFormat.maxAmqpFrameSize=104857600"
argument_list|)
decl_stmt|;
name|KahaDBStore
name|store
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/activemq-data/kahadb"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PERSISTENT
condition|)
block|{
name|brokerService
operator|.
name|setStoreOpenWireVersion
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPersistenceAdapter
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|CLIENT_CONNECT
condition|)
block|{
name|Connection
name|connection
init|=
name|JMSClientContext
operator|.
name|INSTANCE
operator|.
name|createConnection
argument_list|(
name|connector
operator|.
name|getPublishableConnectURI
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

