begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|MessageIdList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_class
specifier|public
class|class
name|TwoBrokerVirtualDestDinamicallyIncludedDestTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10
decl_stmt|;
name|boolean
name|dynamicOnly
init|=
literal|true
decl_stmt|;
name|int
name|networkTTL
init|=
literal|1
decl_stmt|;
name|boolean
name|conduit
init|=
literal|true
decl_stmt|;
name|boolean
name|suppressDuplicateQueueSubscriptions
init|=
literal|true
decl_stmt|;
name|boolean
name|decreaseNetworkConsumerPriority
init|=
literal|true
decl_stmt|;
comment|/**      * BrokerA -> BrokerB&& BrokerB -> BrokerA      */
specifier|public
name|void
name|testTopicDinamicallyIncludedBehavior
parameter_list|()
throws|throws
name|Exception
block|{
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|MessageConsumer
name|clientA
init|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
comment|// Get message count
name|MessageIdList
name|msgsA
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|clientA
argument_list|)
decl_stmt|;
name|msgsA
operator|.
name|waitForMessagesToArrive
argument_list|(
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE_COUNT
argument_list|,
name|msgsA
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|MessageIdList
name|msgsB
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|clientB
argument_list|)
decl_stmt|;
name|msgsB
operator|.
name|waitForMessagesToArrive
argument_list|(
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|msgsB
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * BrokerA -> BrokerB&& BrokerB -> BrokerA      */
specifier|public
name|void
name|testVirtualDestinationsDinamicallyIncludedBehavior1
parameter_list|()
throws|throws
name|Exception
block|{
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"global.test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|MessageConsumer
name|clientB1
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB2
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.foo-bar.global.test"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|int
name|messageCount
init|=
name|MESSAGE_COUNT
decl_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|messageCount
argument_list|)
expr_stmt|;
comment|// Get message count
name|MessageIdList
name|msgsB1
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|clientB1
argument_list|)
decl_stmt|;
name|msgsB1
operator|.
name|waitForMessagesToArrive
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|messageCount
argument_list|,
name|msgsB1
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|MessageIdList
name|msgsB2
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|clientB2
argument_list|)
decl_stmt|;
name|msgsB2
operator|.
name|waitForMessagesToArrive
argument_list|(
name|messageCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|messageCount
argument_list|,
name|msgsB2
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * BrokerA -> BrokerB&& BrokerB -> BrokerA      */
specifier|public
name|void
name|testVirtualDestinationsDinamicallyIncludedBehavior2
parameter_list|()
throws|throws
name|Exception
block|{
name|startAllBrokers
argument_list|()
expr_stmt|;
comment|// Setup destination
name|Destination
name|dest
init|=
name|createDestination
argument_list|(
literal|"global.test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Setup consumers
comment|//MessageConsumer clientB1 = createConsumer("BrokerB", dest);
name|MessageConsumer
name|clientB2
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|createDestination
argument_list|(
literal|"Consumer.foo-bar.global.test"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|dest
argument_list|,
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
comment|// Get message count
name|MessageIdList
name|msgsB2
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|clientB2
argument_list|)
decl_stmt|;
name|msgsB2
operator|.
name|waitForMessagesToArrive
argument_list|(
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE_COUNT
argument_list|,
name|msgsB2
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * BrokerA -> BrokerB&& BrokerB -> BrokerA      */
specifier|public
name|void
name|testVirtualDestinationsDinamicallyIncludedBehavior3
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|topic
init|=
literal|"global.test"
decl_stmt|;
specifier|final
name|String
name|vq
init|=
literal|"Consumer.foo."
operator|+
name|topic
decl_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
specifier|final
name|int
name|msgs1
init|=
literal|1001
decl_stmt|;
specifier|final
name|int
name|msgs2
init|=
literal|1456
decl_stmt|;
comment|// Setup destination
name|Destination
name|tDest
init|=
name|createDestination
argument_list|(
name|topic
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Destination
name|vqDest
init|=
name|createDestination
argument_list|(
name|vq
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Setup consumers
name|MessageConsumer
name|clientB1t
init|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|tDest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB2t
init|=
name|createConsumer
argument_list|(
literal|"BrokerB"
argument_list|,
name|tDest
argument_list|)
decl_stmt|;
name|MessageConsumer
name|clientB1vq
init|=
name|createConsumer
argument_list|(
literal|"BrokerA"
argument_list|,
name|vqDest
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Send messages
name|sendMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|tDest
argument_list|,
name|msgs1
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|tDest
argument_list|,
name|msgs2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Get message count
name|MessageIdList
name|msgsB1t
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|clientB1t
argument_list|)
decl_stmt|;
name|msgsB1t
operator|.
name|waitForMessagesToArrive
argument_list|(
name|msgs1
operator|+
name|msgs2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msgs1
operator|+
name|msgs2
argument_list|,
name|msgsB1t
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|MessageIdList
name|msgsB2t
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerB"
argument_list|,
name|clientB2t
argument_list|)
decl_stmt|;
name|msgsB2t
operator|.
name|waitForMessagesToArrive
argument_list|(
name|msgs1
operator|+
name|msgs2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msgs1
operator|+
name|msgs2
argument_list|,
name|msgsB2t
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|MessageIdList
name|msgsB1vq
init|=
name|getConsumerMessages
argument_list|(
literal|"BrokerA"
argument_list|,
name|clientB1vq
argument_list|)
decl_stmt|;
name|msgsB1vq
operator|.
name|waitForMessagesToArrive
argument_list|(
name|msgs1
operator|+
name|msgs2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msgs1
operator|+
name|msgs2
argument_list|,
name|msgsB1vq
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getQueueSize
argument_list|(
literal|"BrokerA"
argument_list|,
operator|(
name|ActiveMQDestination
operator|)
name|vqDest
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getQueueSize
argument_list|(
literal|"BrokerB"
argument_list|,
operator|(
name|ActiveMQDestination
operator|)
name|vqDest
argument_list|)
argument_list|)
expr_stmt|;
name|destroyAllBrokers
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getQueueSize
parameter_list|(
name|String
name|broker
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerItem
name|bi
init|=
name|brokers
operator|.
name|get
argument_list|(
name|broker
argument_list|)
decl_stmt|;
return|return
name|bi
operator|.
name|broker
operator|.
name|getDestination
argument_list|(
name|destination
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|options
init|=
operator|new
name|String
argument_list|(
literal|"?useJmx=false&deleteAllMessagesOnStartup=true"
argument_list|)
decl_stmt|;
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/BrokerA"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createAndConfigureBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/BrokerB"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setup broker networks
name|NetworkConnector
name|nc1
init|=
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduit
argument_list|)
decl_stmt|;
name|nc1
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
name|decreaseNetworkConsumerPriority
argument_list|)
expr_stmt|;
name|nc1
operator|.
name|setSuppressDuplicateQueueSubscriptions
argument_list|(
name|suppressDuplicateQueueSubscriptions
argument_list|)
expr_stmt|;
name|nc1
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|nc1
operator|.
name|addExcludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"Consumer.*.global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|nc1
operator|.
name|addDynamicallyIncludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|nc1
operator|.
name|addDynamicallyIncludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|//nc1.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
name|NetworkConnector
name|nc2
init|=
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|,
name|dynamicOnly
argument_list|,
name|networkTTL
argument_list|,
name|conduit
argument_list|)
decl_stmt|;
name|nc2
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
name|decreaseNetworkConsumerPriority
argument_list|)
expr_stmt|;
name|nc2
operator|.
name|setSuppressDuplicateQueueSubscriptions
argument_list|(
name|suppressDuplicateQueueSubscriptions
argument_list|)
expr_stmt|;
name|nc2
operator|.
name|addStaticallyIncludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|nc2
operator|.
name|addExcludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"Consumer.*.global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|nc2
operator|.
name|addDynamicallyIncludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|nc2
operator|.
name|addDynamicallyIncludedDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|"global.>"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|//nc2.addDynamicallyIncludedDestination(ActiveMQDestination.createDestination("Consumer.*.global.>", ActiveMQDestination.QUEUE_TYPE));
block|}
specifier|private
name|BrokerService
name|createAndConfigureBroker
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|createBroker
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|configurePersistenceAdapter
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|// make all topics virtual and consumers use the default prefix
name|VirtualDestinationInterceptor
name|virtualDestinationInterceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|virtualDestinationInterceptor
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
operator|new
name|VirtualTopic
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|DestinationInterceptor
index|[]
name|destinationInterceptors
init|=
operator|new
name|DestinationInterceptor
index|[]
block|{
name|virtualDestinationInterceptor
block|}
decl_stmt|;
name|broker
operator|.
name|setDestinationInterceptors
argument_list|(
name|destinationInterceptors
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|protected
name|void
name|configurePersistenceAdapter
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|dataFileDir
init|=
operator|new
name|File
argument_list|(
literal|"target/test-amq-data/kahadb/"
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
decl_stmt|;
name|KahaDBStore
name|kaha
init|=
operator|new
name|KahaDBStore
argument_list|()
decl_stmt|;
name|kaha
operator|.
name|setDirectory
argument_list|(
name|dataFileDir
argument_list|)
expr_stmt|;
name|kaha
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|kaha
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

