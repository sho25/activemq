begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|junit
operator|.
name|EmbeddedActiveMQBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ6244Test
block|{
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|ORIG_MSG_CONTENT
init|=
name|randomByteArray
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|EmbeddedActiveMQBroker
name|brokerRule
init|=
operator|new
name|EmbeddedActiveMQBroker
argument_list|()
decl_stmt|;
specifier|public
name|AMQ6244Test
parameter_list|()
block|{
name|brokerRule
operator|.
name|setBrokerName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bytesMsgCompressedFlagTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQConnection
name|compressionEnabledConnection
init|=
name|createConnection
argument_list|(
name|brokerRule
operator|.
name|getVmURL
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQConnection
name|compressionDisabledConnection
init|=
name|createConnection
argument_list|(
name|brokerRule
operator|.
name|getVmURL
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Consumer (compression=false)
specifier|final
name|Session
name|consumerSession
init|=
name|compressionDisabledConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Queue
name|destination
init|=
name|consumerSession
operator|.
name|createQueue
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Producer (compression=false)
specifier|final
name|Session
name|compressionDisabledProducerSession
init|=
name|compressionDisabledConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
name|compressionDisabledProducer
init|=
name|compressionDisabledProducerSession
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
comment|// Producer (compression=true)
specifier|final
name|Session
name|compressionEnabledProducerSession
init|=
name|compressionEnabledConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
name|compressionEnabledProducer
init|=
name|compressionEnabledProducerSession
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
try|try
block|{
comment|/*              * Publish a BytesMessage on the compressed connection              */
specifier|final
name|ActiveMQBytesMessage
name|originalCompressedMsg
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|compressionEnabledProducerSession
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|originalCompressedMsg
operator|.
name|writeBytes
argument_list|(
name|ORIG_MSG_CONTENT
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|originalCompressedMsg
operator|.
name|isReadOnlyBody
argument_list|()
argument_list|)
expr_stmt|;
comment|// send first message
name|compressionEnabledProducer
operator|.
name|send
argument_list|(
name|originalCompressedMsg
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Once sent, the Message's 'compressed' flag should match the 'useCompression' flag on the Producer's Connection"
argument_list|,
name|compressionEnabledConnection
operator|.
name|isUseCompression
argument_list|()
argument_list|,
name|originalCompressedMsg
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
comment|/*              * Consume the compressed message and resend it decompressed              */
specifier|final
name|ActiveMQBytesMessage
name|compressedMsg
init|=
name|receiveMsg
argument_list|(
name|consumer
argument_list|,
name|originalCompressedMsg
argument_list|)
decl_stmt|;
name|validateMsgContent
argument_list|(
name|compressedMsg
argument_list|)
expr_stmt|;
comment|// make message writable so the client can reuse it
name|makeWritable
argument_list|(
name|compressedMsg
argument_list|)
expr_stmt|;
name|compressedMsg
operator|.
name|setStringProperty
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|compressionDisabledProducer
operator|.
name|send
argument_list|(
name|compressedMsg
argument_list|)
expr_stmt|;
comment|/*              * AMQ-6244 ERROR STATE 1: Produced Message is marked 'compressed' when its contents are not compressed              */
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"AMQ-6244 Error State Achieved: Produced Message's 'compressed' flag is enabled after message is published on a connection with 'useCompression=false'"
argument_list|,
name|compressionDisabledConnection
operator|.
name|isUseCompression
argument_list|()
argument_list|,
name|compressedMsg
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
comment|/*              * AMQ-6244 ERROR STATE 2: Consumer cannot handle Message marked 'compressed' when its contents are not compressed              */
try|try
block|{
specifier|final
name|ActiveMQBytesMessage
name|uncompressedMsg
init|=
name|receiveMsg
argument_list|(
name|consumer
argument_list|,
name|compressedMsg
argument_list|)
decl_stmt|;
name|validateMsgContent
argument_list|(
name|uncompressedMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmsE
parameter_list|)
block|{
specifier|final
name|Throwable
name|rootCause
init|=
name|Throwables
operator|.
name|getRootCause
argument_list|(
name|jmsE
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootCause
operator|instanceof
name|DataFormatException
operator|||
name|rootCause
operator|instanceof
name|NegativeArraySizeException
condition|)
block|{
specifier|final
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|jmsE
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"AMQ-6244 Error State Achieved: Attempted to decompress BytesMessage contents that are not compressed\n"
operator|+
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|jmsE
throw|;
block|}
block|}
block|}
finally|finally
block|{
name|compressionEnabledProducerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressionEnabledConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressionDisabledProducerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|compressionDisabledConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ActiveMQBytesMessage
name|receiveMsg
parameter_list|(
specifier|final
name|MessageConsumer
name|consumer
parameter_list|,
specifier|final
name|ActiveMQMessage
name|sentMessage
parameter_list|)
throws|throws
name|JMSException
block|{
comment|// receive the message
specifier|final
name|ActiveMQBytesMessage
name|message
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Consumed Message should be read-only"
argument_list|,
name|message
operator|.
name|isReadOnlyBody
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Consumed Message's 'compressed' flag should match the produced Message's 'compressed' flag"
argument_list|,
name|sentMessage
operator|.
name|isCompressed
argument_list|()
argument_list|,
name|message
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|private
name|void
name|validateMsgContent
parameter_list|(
specifier|final
name|ActiveMQBytesMessage
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
comment|// ensure consumed message content matches what was originally set
specifier|final
name|byte
index|[]
name|msgContent
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|message
operator|.
name|getBodyLength
argument_list|()
index|]
decl_stmt|;
name|message
operator|.
name|readBytes
argument_list|(
name|msgContent
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Consumed Message content should match the original Message content"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|ORIG_MSG_CONTENT
argument_list|,
name|msgContent
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|ActiveMQConnection
name|createConnection
parameter_list|(
specifier|final
name|String
name|URL
parameter_list|,
specifier|final
name|boolean
name|useCompression
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|URL
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setUseCompression
argument_list|(
name|useCompression
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
operator|(
name|ActiveMQConnection
operator|)
name|connection
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|randomByteArray
parameter_list|()
block|{
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|byteArray
init|=
operator|new
name|byte
index|[
name|random
operator|.
name|nextInt
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
return|return
name|byteArray
return|;
block|}
specifier|protected
specifier|static
name|void
name|makeWritable
parameter_list|(
specifier|final
name|ActiveMQMessage
name|message
parameter_list|)
block|{
name|message
operator|.
name|setReadOnlyBody
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|message
operator|.
name|setReadOnlyProperties
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

