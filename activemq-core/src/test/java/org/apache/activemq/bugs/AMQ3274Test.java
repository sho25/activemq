begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|AMQ3274Test
block|{
specifier|protected
specifier|static
name|int
name|Next_broker_num
init|=
literal|0
decl_stmt|;
specifier|protected
name|EmbeddedTcpBroker
name|broker1
decl_stmt|;
specifier|protected
name|EmbeddedTcpBroker
name|broker2
decl_stmt|;
specifier|protected
name|int
name|nextEchoId
init|=
literal|0
decl_stmt|;
specifier|protected
name|boolean
name|testError
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|echoResponseFill
init|=
literal|0
decl_stmt|;
comment|// Number of "filler" response messages per request
specifier|protected
specifier|static
name|Log
name|LOG
decl_stmt|;
static|static
block|{
name|LOG
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AMQ3274Test
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AMQ3274Test
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
operator|new
name|EmbeddedTcpBroker
argument_list|()
expr_stmt|;
name|broker2
operator|=
operator|new
name|EmbeddedTcpBroker
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|coreConnectTo
argument_list|(
name|broker2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|coreConnectTo
argument_list|(
name|broker1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|logMessage
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * 	 */
specifier|public
name|void
name|testMessages
parameter_list|(
name|Session
name|sess
parameter_list|,
name|MessageProducer
name|req_prod
parameter_list|,
name|Destination
name|resp_dest
parameter_list|,
name|int
name|num_msg
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageConsumer
name|resp_cons
decl_stmt|;
name|TextMessage
name|msg
decl_stmt|;
name|MessageClient
name|cons_client
decl_stmt|;
name|int
name|cur
decl_stmt|;
name|int
name|tot_expected
decl_stmt|;
name|resp_cons
operator|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|resp_dest
argument_list|)
expr_stmt|;
name|cons_client
operator|=
operator|new
name|MessageClient
argument_list|(
name|resp_cons
argument_list|,
name|num_msg
argument_list|)
expr_stmt|;
name|cons_client
operator|.
name|start
argument_list|()
expr_stmt|;
name|cur
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|cur
operator|<
name|num_msg
operator|)
operator|&&
operator|(
operator|!
name|testError
operator|)
condition|)
block|{
name|msg
operator|=
name|sess
operator|.
name|createTextMessage
argument_list|(
literal|"MSG AAAA "
operator|+
name|cur
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setIntProperty
argument_list|(
literal|"SEQ"
argument_list|,
literal|100
operator|+
name|cur
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setStringProperty
argument_list|(
literal|"TEST"
argument_list|,
literal|"TOPO"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setJMSReplyTo
argument_list|(
name|resp_dest
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|==
operator|(
name|num_msg
operator|-
literal|1
operator|)
condition|)
name|msg
operator|.
name|setBooleanProperty
argument_list|(
literal|"end-of-response"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|req_prod
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|cur
operator|++
expr_stmt|;
block|}
comment|//
comment|// Give the consumer some time to receive the response.
comment|//
name|cons_client
operator|.
name|waitShutdown
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|//
comment|// Now shutdown the consumer if it's still running.
comment|//
if|if
condition|(
name|cons_client
operator|.
name|shutdown
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer client shutdown complete"
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|debug
argument_list|(
literal|"Consumer client shutdown incomplete!!!"
argument_list|)
expr_stmt|;
comment|//
comment|// Check that the correct number of messages was received.
comment|//
name|tot_expected
operator|=
name|num_msg
operator|*
operator|(
name|echoResponseFill
operator|+
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|cons_client
operator|.
name|getNumMsgReceived
argument_list|()
operator|==
name|tot_expected
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Have "
operator|+
name|tot_expected
operator|+
literal|" messages, as-expected"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|testError
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Have "
operator|+
name|cons_client
operator|.
name|getNumMsgReceived
argument_list|()
operator|+
literal|" messages; expected "
operator|+
name|tot_expected
argument_list|)
expr_stmt|;
block|}
name|resp_cons
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Test one destination between the given "producer broker" and "consumer broker" specified. 	 */
specifier|public
name|void
name|testOneDest
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Session
name|sess
parameter_list|,
name|Destination
name|cons_dest
parameter_list|,
name|String
name|prod_broker_url
parameter_list|,
name|String
name|cons_broker_url
parameter_list|,
name|int
name|num_msg
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|echo_id
decl_stmt|;
name|EchoService
name|echo_svc
decl_stmt|;
name|String
name|echo_queue_name
decl_stmt|;
name|Destination
name|prod_dest
decl_stmt|;
name|MessageProducer
name|msg_prod
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|echo_id
operator|=
name|this
operator|.
name|nextEchoId
expr_stmt|;
name|this
operator|.
name|nextEchoId
operator|++
expr_stmt|;
block|}
name|echo_queue_name
operator|=
literal|"echo.queue."
operator|+
name|echo_id
expr_stmt|;
comment|//
comment|// Remove any previously-created echo queue with the same name.
comment|//
name|LOG
operator|.
name|trace
argument_list|(
literal|"destroying the echo queue in case an old one exists"
argument_list|)
expr_stmt|;
name|removeQueue
argument_list|(
name|conn
argument_list|,
name|echo_queue_name
argument_list|)
expr_stmt|;
comment|//
comment|// Now start the echo service with that queue.
comment|//
name|echo_svc
operator|=
operator|new
name|EchoService
argument_list|(
name|echo_queue_name
argument_list|,
name|prod_broker_url
argument_list|)
expr_stmt|;
name|echo_svc
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//
comment|// Create the Producer to the echo request Queue
comment|//
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating echo queue and producer"
argument_list|)
expr_stmt|;
name|prod_dest
operator|=
name|sess
operator|.
name|createQueue
argument_list|(
name|echo_queue_name
argument_list|)
expr_stmt|;
name|msg_prod
operator|=
name|sess
operator|.
name|createProducer
argument_list|(
name|prod_dest
argument_list|)
expr_stmt|;
comment|//
comment|// Pass messages around.
comment|//
name|testMessages
argument_list|(
name|sess
argument_list|,
name|msg_prod
argument_list|,
name|cons_dest
argument_list|,
name|num_msg
argument_list|)
expr_stmt|;
comment|//
comment|//
comment|//
name|echo_svc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|msg_prod
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * TEST TEMPORARY TOPICS 	 */
specifier|public
name|void
name|testTempTopic
parameter_list|(
name|String
name|prod_broker_url
parameter_list|,
name|String
name|cons_broker_url
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
decl_stmt|;
name|Session
name|sess
decl_stmt|;
name|Destination
name|cons_dest
decl_stmt|;
name|int
name|echo_id
decl_stmt|;
name|int
name|num_msg
decl_stmt|;
name|num_msg
operator|=
literal|5
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TESTING TEMP TOPICS "
operator|+
name|prod_broker_url
operator|+
literal|" -> "
operator|+
name|cons_broker_url
operator|+
literal|" ("
operator|+
name|num_msg
operator|+
literal|" messages)"
argument_list|)
expr_stmt|;
comment|//
comment|// Connect to the bus.
comment|//
name|conn
operator|=
name|createConnection
argument_list|(
name|cons_broker_url
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|sess
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|//
comment|// Create the destination on which messages are being tested.
comment|//
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating destination"
argument_list|)
expr_stmt|;
name|cons_dest
operator|=
name|sess
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
name|testOneDest
argument_list|(
name|conn
argument_list|,
name|sess
argument_list|,
name|cons_dest
argument_list|,
name|prod_broker_url
argument_list|,
name|cons_broker_url
argument_list|,
name|num_msg
argument_list|)
expr_stmt|;
comment|//
comment|// Cleanup
comment|//
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * TEST TOPICS 	 */
specifier|public
name|void
name|testTopic
parameter_list|(
name|String
name|prod_broker_url
parameter_list|,
name|String
name|cons_broker_url
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|num_msg
decl_stmt|;
name|Connection
name|conn
decl_stmt|;
name|Session
name|sess
decl_stmt|;
name|String
name|topic_name
decl_stmt|;
name|Destination
name|cons_dest
decl_stmt|;
name|num_msg
operator|=
literal|5
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TESTING TOPICS "
operator|+
name|prod_broker_url
operator|+
literal|" -> "
operator|+
name|cons_broker_url
operator|+
literal|" ("
operator|+
name|num_msg
operator|+
literal|" messages)"
argument_list|)
expr_stmt|;
comment|//
comment|// Connect to the bus.
comment|//
name|conn
operator|=
name|createConnection
argument_list|(
name|cons_broker_url
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|sess
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|//
comment|// Create the destination on which messages are being tested.
comment|//
name|topic_name
operator|=
literal|"topotest2.perm.topic"
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing existing Topic"
argument_list|)
expr_stmt|;
name|removeTopic
argument_list|(
name|conn
argument_list|,
name|topic_name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating Topic, "
operator|+
name|topic_name
argument_list|)
expr_stmt|;
name|cons_dest
operator|=
name|sess
operator|.
name|createTopic
argument_list|(
name|topic_name
argument_list|)
expr_stmt|;
name|testOneDest
argument_list|(
name|conn
argument_list|,
name|sess
argument_list|,
name|cons_dest
argument_list|,
name|prod_broker_url
argument_list|,
name|cons_broker_url
argument_list|,
name|num_msg
argument_list|)
expr_stmt|;
comment|//
comment|// Cleanup
comment|//
name|removeTopic
argument_list|(
name|conn
argument_list|,
name|topic_name
argument_list|)
expr_stmt|;
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * TEST TEMPORARY QUEUES 	 */
specifier|public
name|void
name|testTempQueue
parameter_list|(
name|String
name|prod_broker_url
parameter_list|,
name|String
name|cons_broker_url
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|echo_id
decl_stmt|;
name|int
name|num_msg
decl_stmt|;
name|Connection
name|conn
decl_stmt|;
name|Session
name|sess
decl_stmt|;
name|Destination
name|cons_dest
decl_stmt|;
name|num_msg
operator|=
literal|5
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TESTING TEMP QUEUES "
operator|+
name|prod_broker_url
operator|+
literal|" -> "
operator|+
name|cons_broker_url
operator|+
literal|" ("
operator|+
name|num_msg
operator|+
literal|" messages)"
argument_list|)
expr_stmt|;
comment|//
comment|// Connect to the bus.
comment|//
name|conn
operator|=
name|createConnection
argument_list|(
name|cons_broker_url
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|sess
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|//
comment|// Create the destination on which messages are being tested.
comment|//
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating destination"
argument_list|)
expr_stmt|;
name|cons_dest
operator|=
name|sess
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|testOneDest
argument_list|(
name|conn
argument_list|,
name|sess
argument_list|,
name|cons_dest
argument_list|,
name|prod_broker_url
argument_list|,
name|cons_broker_url
argument_list|,
name|num_msg
argument_list|)
expr_stmt|;
comment|//
comment|// Cleanup
comment|//
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * TEST QUEUES 	 */
specifier|public
name|void
name|testQueue
parameter_list|(
name|String
name|prod_broker_url
parameter_list|,
name|String
name|cons_broker_url
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|num_msg
decl_stmt|;
name|Connection
name|conn
decl_stmt|;
name|Session
name|sess
decl_stmt|;
name|String
name|queue_name
decl_stmt|;
name|Destination
name|cons_dest
decl_stmt|;
name|num_msg
operator|=
literal|5
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"TESTING QUEUES "
operator|+
name|prod_broker_url
operator|+
literal|" -> "
operator|+
name|cons_broker_url
operator|+
literal|" ("
operator|+
name|num_msg
operator|+
literal|" messages)"
argument_list|)
expr_stmt|;
comment|//
comment|// Connect to the bus.
comment|//
name|conn
operator|=
name|createConnection
argument_list|(
name|cons_broker_url
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|sess
operator|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
comment|//
comment|// Create the destination on which messages are being tested.
comment|//
name|queue_name
operator|=
literal|"topotest2.perm.queue"
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Removing existing Queue"
argument_list|)
expr_stmt|;
name|removeQueue
argument_list|(
name|conn
argument_list|,
name|queue_name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Creating Queue, "
operator|+
name|queue_name
argument_list|)
expr_stmt|;
name|cons_dest
operator|=
name|sess
operator|.
name|createQueue
argument_list|(
name|queue_name
argument_list|)
expr_stmt|;
name|testOneDest
argument_list|(
name|conn
argument_list|,
name|sess
argument_list|,
name|cons_dest
argument_list|,
name|prod_broker_url
argument_list|,
name|cons_broker_url
argument_list|,
name|num_msg
argument_list|)
expr_stmt|;
comment|//
comment|// Cleanup
comment|//
name|removeQueue
argument_list|(
name|conn
argument_list|,
name|queue_name
argument_list|)
expr_stmt|;
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|start1
decl_stmt|;
name|Thread
name|start2
decl_stmt|;
name|testError
operator|=
literal|false
expr_stmt|;
comment|// Use threads to avoid startup deadlock since the first broker started waits until
comment|//	it knows the name of the remote broker before finishing its startup, which means
comment|//	the remote must already be running.
name|start1
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|broker1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|start2
operator|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|broker2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|start1
operator|.
name|start
argument_list|()
expr_stmt|;
name|start2
operator|.
name|start
argument_list|()
expr_stmt|;
name|start1
operator|.
name|join
argument_list|()
expr_stmt|;
name|start2
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|testError
condition|)
name|this
operator|.
name|testTempTopic
argument_list|(
name|broker1
operator|.
name|getConnectionUrl
argument_list|()
argument_list|,
name|broker2
operator|.
name|getConnectionUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testError
condition|)
name|this
operator|.
name|testTempQueue
argument_list|(
name|broker1
operator|.
name|getConnectionUrl
argument_list|()
argument_list|,
name|broker2
operator|.
name|getConnectionUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testError
condition|)
name|this
operator|.
name|testTopic
argument_list|(
name|broker1
operator|.
name|getConnectionUrl
argument_list|()
argument_list|,
name|broker2
operator|.
name|getConnectionUrl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|testError
condition|)
name|this
operator|.
name|testQueue
argument_list|(
name|broker1
operator|.
name|getConnectionUrl
argument_list|()
argument_list|,
name|broker2
operator|.
name|getConnectionUrl
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|testError
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @param args the command line arguments 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|AMQ3274Test
name|main_obj
decl_stmt|;
try|try
block|{
name|main_obj
operator|=
operator|new
name|AMQ3274Test
argument_list|()
expr_stmt|;
name|main_obj
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
operator|.
name|makeConnection
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|void
name|removeQueue
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|dest_name
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
name|dest
decl_stmt|;
if|if
condition|(
name|conn
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
condition|)
block|{
name|dest
operator|=
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|dest_name
argument_list|,
operator|(
name|byte
operator|)
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
operator|)
name|conn
operator|)
operator|.
name|destroyDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|void
name|removeTopic
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|String
name|dest_name
parameter_list|)
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
name|dest
decl_stmt|;
if|if
condition|(
name|conn
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
condition|)
block|{
name|dest
operator|=
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|dest_name
argument_list|,
operator|(
name|byte
operator|)
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
operator|)
name|conn
operator|)
operator|.
name|destroyDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|fmtMsgInfo
parameter_list|(
name|Message
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|msg_desc
decl_stmt|;
name|String
name|prop
decl_stmt|;
name|Enumeration
name|prop_enum
decl_stmt|;
name|msg_desc
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|msg_desc
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
if|if
condition|(
name|msg
operator|instanceof
name|TextMessage
condition|)
block|{
name|msg_desc
operator|.
name|append
argument_list|(
operator|(
operator|(
name|TextMessage
operator|)
name|msg
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg_desc
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
name|msg_desc
operator|.
name|append
argument_list|(
name|msg
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|msg_desc
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|prop_enum
operator|=
name|msg
operator|.
name|getPropertyNames
argument_list|()
expr_stmt|;
while|while
condition|(
name|prop_enum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|prop
operator|=
operator|(
name|String
operator|)
name|prop_enum
operator|.
name|nextElement
argument_list|()
expr_stmt|;
name|msg_desc
operator|.
name|append
argument_list|(
literal|"; "
argument_list|)
expr_stmt|;
name|msg_desc
operator|.
name|append
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|msg_desc
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|msg_desc
operator|.
name|append
argument_list|(
name|msg
operator|.
name|getStringProperty
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|msg_desc
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
comment|/////////////////////////////////////////////////  INTERNAL CLASSES  /////////////////////////////////////////////////
comment|//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
specifier|protected
class|class
name|EmbeddedTcpBroker
block|{
specifier|protected
name|BrokerService
name|brokerSvc
decl_stmt|;
specifier|protected
name|int
name|brokerNum
decl_stmt|;
specifier|protected
name|String
name|brokerName
decl_stmt|;
specifier|protected
name|String
name|brokerId
decl_stmt|;
specifier|protected
name|int
name|port
decl_stmt|;
specifier|protected
name|String
name|tcpUrl
decl_stmt|;
specifier|public
name|EmbeddedTcpBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerSvc
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
operator|.
name|getClass
argument_list|()
init|)
block|{
name|brokerNum
operator|=
name|Next_broker_num
expr_stmt|;
name|Next_broker_num
operator|++
expr_stmt|;
block|}
name|brokerName
operator|=
literal|"broker"
operator|+
name|brokerNum
expr_stmt|;
name|brokerId
operator|=
literal|"b"
operator|+
name|brokerNum
expr_stmt|;
name|brokerSvc
operator|.
name|setBrokerName
argument_list|(
name|brokerName
argument_list|)
expr_stmt|;
name|brokerSvc
operator|.
name|setBrokerId
argument_list|(
name|brokerId
argument_list|)
expr_stmt|;
name|brokerSvc
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerSvc
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// TBD
name|port
operator|=
literal|60000
operator|+
operator|(
name|brokerNum
operator|*
literal|10
operator|)
expr_stmt|;
comment|// Configure the transport connector (TCP)
name|tcpUrl
operator|=
literal|"tcp://127.0.0.1:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|brokerSvc
operator|.
name|addConnector
argument_list|(
name|tcpUrl
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Connection
name|createConnection
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|JMSException
block|{
name|Connection
name|result
decl_stmt|;
name|result
operator|=
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
operator|.
name|makeConnection
argument_list|(
name|this
operator|.
name|tcpUrl
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getConnectionUrl
parameter_list|()
block|{
return|return
name|this
operator|.
name|tcpUrl
return|;
block|}
comment|/** 		 * Create network connections to the given broker using the network-connector 		 * configuration of CORE brokers (e.g. core1.bus.dev1.coresys.tmcs) 		 * 		 * @param other 		 * @param duplex_f 		 */
specifier|public
name|void
name|coreConnectTo
parameter_list|(
name|EmbeddedTcpBroker
name|other
parameter_list|,
name|boolean
name|duplex_f
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|makeConnectionTo
argument_list|(
name|other
argument_list|,
name|duplex_f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|makeConnectionTo
argument_list|(
name|other
argument_list|,
name|duplex_f
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerSvc
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//brokerSvc.waitUntilStarted();
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerSvc
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/** 		 * Make one connection to the other embedded broker, of the specified type (queue or topic) 		 * using the standard CORE broker networking. 		 *  		 * @param other 		 * @param duplex_f 		 * @param queue_f 		 * @throws Exception 		 */
specifier|protected
name|void
name|makeConnectionTo
parameter_list|(
name|EmbeddedTcpBroker
name|other
parameter_list|,
name|boolean
name|duplex_f
parameter_list|,
name|boolean
name|queue_f
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|nw_conn
decl_stmt|;
name|String
name|prefix
decl_stmt|;
name|ActiveMQDestination
name|excl_dest
decl_stmt|;
name|ArrayList
name|excludes
decl_stmt|;
name|nw_conn
operator|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
literal|"static:("
operator|+
name|other
operator|.
name|tcpUrl
operator|+
literal|")"
argument_list|)
argument_list|)
expr_stmt|;
name|nw_conn
operator|.
name|setDuplex
argument_list|(
name|duplex_f
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue_f
condition|)
name|nw_conn
operator|.
name|setConduitSubscriptions
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|nw_conn
operator|.
name|setConduitSubscriptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nw_conn
operator|.
name|setNetworkTTL
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|nw_conn
operator|.
name|setSuppressDuplicateQueueSubscriptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nw_conn
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nw_conn
operator|.
name|setBridgeTempDestinations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue_f
condition|)
block|{
name|prefix
operator|=
literal|"queue"
expr_stmt|;
name|excl_dest
operator|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|">"
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|"topic"
expr_stmt|;
name|excl_dest
operator|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
literal|">"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
expr_stmt|;
block|}
name|excludes
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
name|excludes
operator|.
name|add
argument_list|(
name|excl_dest
argument_list|)
expr_stmt|;
name|nw_conn
operator|.
name|setExcludedDestinations
argument_list|(
name|excludes
argument_list|)
expr_stmt|;
if|if
condition|(
name|duplex_f
condition|)
name|nw_conn
operator|.
name|setName
argument_list|(
name|this
operator|.
name|brokerId
operator|+
literal|"<-"
operator|+
name|prefix
operator|+
literal|"->"
operator|+
name|other
operator|.
name|brokerId
argument_list|)
expr_stmt|;
else|else
name|nw_conn
operator|.
name|setName
argument_list|(
name|this
operator|.
name|brokerId
operator|+
literal|"-"
operator|+
name|prefix
operator|+
literal|"->"
operator|+
name|other
operator|.
name|brokerId
argument_list|)
expr_stmt|;
name|brokerSvc
operator|.
name|addNetworkConnector
argument_list|(
name|nw_conn
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|MessageClient
extends|extends
name|java
operator|.
name|lang
operator|.
name|Thread
block|{
specifier|protected
name|MessageConsumer
name|msgCons
decl_stmt|;
specifier|protected
name|boolean
name|shutdownInd
decl_stmt|;
specifier|protected
name|int
name|expectedCount
decl_stmt|;
specifier|protected
name|int
name|lastSeq
init|=
literal|0
decl_stmt|;
specifier|protected
name|int
name|msgCount
init|=
literal|0
decl_stmt|;
specifier|protected
name|boolean
name|haveFirstSeq
decl_stmt|;
specifier|protected
name|CountDownLatch
name|shutdownLatch
decl_stmt|;
specifier|public
name|MessageClient
parameter_list|(
name|MessageConsumer
name|cons
parameter_list|,
name|int
name|num_to_expect
parameter_list|)
block|{
name|msgCons
operator|=
name|cons
expr_stmt|;
name|expectedCount
operator|=
operator|(
name|num_to_expect
operator|*
operator|(
name|echoResponseFill
operator|+
literal|1
operator|)
operator|)
expr_stmt|;
name|shutdownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|CountDownLatch
name|latch
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|latch
operator|=
name|shutdownLatch
expr_stmt|;
block|}
name|shutdownInd
operator|=
literal|false
expr_stmt|;
name|processMessages
argument_list|()
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"message client error"
argument_list|,
name|exc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|waitShutdown
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|CountDownLatch
name|latch
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|latch
operator|=
name|shutdownLatch
expr_stmt|;
block|}
if|if
condition|(
name|latch
operator|!=
literal|null
condition|)
name|latch
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|info
argument_list|(
literal|"echo client shutdown: client does not appear to be active"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|int_exc
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"wait for message client shutdown interrupted"
argument_list|,
name|int_exc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|shutdown
parameter_list|()
block|{
name|boolean
name|down_ind
decl_stmt|;
if|if
condition|(
operator|!
name|shutdownInd
condition|)
block|{
name|shutdownInd
operator|=
literal|true
expr_stmt|;
block|}
name|waitShutdown
argument_list|(
literal|200
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
operator|(
name|shutdownLatch
operator|==
literal|null
operator|)
operator|||
operator|(
name|shutdownLatch
operator|.
name|getCount
argument_list|()
operator|==
literal|0
operator|)
condition|)
name|down_ind
operator|=
literal|true
expr_stmt|;
else|else
name|down_ind
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|down_ind
return|;
block|}
specifier|public
name|int
name|getNumMsgReceived
parameter_list|()
block|{
return|return
name|msgCount
return|;
block|}
specifier|protected
name|void
name|processMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|in_msg
decl_stmt|;
name|haveFirstSeq
operator|=
literal|false
expr_stmt|;
comment|//
comment|// Stop at shutdown time or after any test error is detected.
comment|//
while|while
condition|(
operator|(
operator|!
name|shutdownInd
operator|)
operator|&&
operator|(
operator|!
name|testError
operator|)
condition|)
block|{
name|in_msg
operator|=
name|msgCons
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|in_msg
operator|!=
literal|null
condition|)
block|{
name|msgCount
operator|++
expr_stmt|;
name|checkMessage
argument_list|(
name|in_msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|checkMessage
parameter_list|(
name|Message
name|in_msg
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|seq
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"received message "
operator|+
name|fmtMsgInfo
argument_list|(
name|in_msg
argument_list|)
argument_list|)
expr_stmt|;
comment|//
comment|// Only check messages with a sequence number.
comment|//
if|if
condition|(
name|in_msg
operator|.
name|propertyExists
argument_list|(
literal|"SEQ"
argument_list|)
condition|)
block|{
name|seq
operator|=
name|in_msg
operator|.
name|getIntProperty
argument_list|(
literal|"SEQ"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|haveFirstSeq
operator|)
operator|&&
operator|(
name|seq
operator|!=
operator|(
name|lastSeq
operator|+
literal|1
operator|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"***ERROR*** incorrect sequence number; expected "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|lastSeq
operator|+
literal|1
argument_list|)
operator|+
literal|" but have "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|seq
argument_list|)
argument_list|)
expr_stmt|;
name|testError
operator|=
literal|true
expr_stmt|;
block|}
name|lastSeq
operator|=
name|seq
expr_stmt|;
if|if
condition|(
name|msgCount
operator|>
name|expectedCount
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"*** have more messages than expected; have "
operator|+
name|msgCount
operator|+
literal|"; expect "
operator|+
name|expectedCount
argument_list|)
expr_stmt|;
name|testError
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in_msg
operator|.
name|propertyExists
argument_list|(
literal|"end-of-response"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"received end-of-response message"
argument_list|)
expr_stmt|;
name|shutdownInd
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * 	 */
specifier|protected
class|class
name|EchoService
extends|extends
name|java
operator|.
name|lang
operator|.
name|Thread
block|{
specifier|protected
name|String
name|destName
decl_stmt|;
specifier|protected
name|Connection
name|jmsConn
decl_stmt|;
specifier|protected
name|Session
name|sess
decl_stmt|;
specifier|protected
name|MessageConsumer
name|msg_cons
decl_stmt|;
specifier|protected
name|boolean
name|Shutdown_ind
decl_stmt|;
specifier|protected
name|Destination
name|req_dest
decl_stmt|;
specifier|protected
name|Destination
name|resp_dest
decl_stmt|;
specifier|protected
name|MessageProducer
name|msg_prod
decl_stmt|;
specifier|protected
name|CountDownLatch
name|waitShutdown
decl_stmt|;
specifier|public
name|EchoService
parameter_list|(
name|String
name|dest
parameter_list|,
name|Connection
name|broker_conn
parameter_list|)
throws|throws
name|Exception
block|{
name|destName
operator|=
name|dest
expr_stmt|;
name|jmsConn
operator|=
name|broker_conn
expr_stmt|;
name|Shutdown_ind
operator|=
literal|false
expr_stmt|;
name|sess
operator|=
name|jmsConn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|req_dest
operator|=
name|sess
operator|.
name|createQueue
argument_list|(
name|destName
argument_list|)
expr_stmt|;
name|msg_cons
operator|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|req_dest
argument_list|)
expr_stmt|;
name|jmsConn
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitShutdown
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EchoService
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|broker_url
parameter_list|)
throws|throws
name|Exception
block|{
name|this
argument_list|(
name|dest
argument_list|,
name|ActiveMQConnection
operator|.
name|makeConnection
argument_list|(
name|broker_url
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Message
name|req
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTING ECHO SERVICE"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|Shutdown_ind
condition|)
block|{
name|req
operator|=
name|msg_cons
operator|.
name|receive
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"ECHO request message "
operator|+
name|req
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resp_dest
operator|=
name|req
operator|.
name|getJMSReplyTo
argument_list|()
expr_stmt|;
if|if
condition|(
name|resp_dest
operator|!=
literal|null
condition|)
block|{
name|msg_prod
operator|=
name|sess
operator|.
name|createProducer
argument_list|(
name|resp_dest
argument_list|)
expr_stmt|;
name|msg_prod
operator|.
name|send
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|msg_prod
operator|.
name|close
argument_list|()
expr_stmt|;
name|msg_prod
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"invalid request: no reply-to destination given"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"shutting down test echo service"
argument_list|)
expr_stmt|;
try|try
block|{
name|jmsConn
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jms_exc
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error on shutting down JMS connection"
argument_list|,
name|jms_exc
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|waitShutdown
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** 		 * Shut down the service, waiting up to 3 seconds for the service to terminate. 		 */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|CountDownLatch
name|wait_l
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|wait_l
operator|=
name|waitShutdown
expr_stmt|;
block|}
name|Shutdown_ind
operator|=
literal|true
expr_stmt|;
try|try
block|{
if|if
condition|(
name|wait_l
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|wait_l
operator|.
name|await
argument_list|(
literal|3000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"echo service shutdown complete"
argument_list|)
expr_stmt|;
else|else
name|LOG
operator|.
name|warn
argument_list|(
literal|"timeout waiting for echo service shutdown"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"echo service shutdown: service does not appear to be active"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|int_exc
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"interrupted while waiting for echo service shutdown"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

