begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|jms
operator|.
name|JmsConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_comment
comment|/**  * Test that failed SSL Handshakes don't leave the transport in a bad sate.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JMSMaxConnectionsSSLHandshakeFailsTest
extends|extends
name|JMSClientTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CONNECTIONS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|String
name|connectorScheme
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"amqp+ssl"
block|}
block|,
block|{
literal|"amqp+nio+ssl"
block|}
block|,             }
argument_list|)
return|;
block|}
specifier|public
name|JMSMaxConnectionsSSLHandshakeFailsTest
parameter_list|(
name|String
name|connectorScheme
parameter_list|)
block|{
name|this
operator|.
name|connectorScheme
operator|=
name|connectorScheme
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testFailedSSLConnectionAttemptsDoesNotBreakTransport
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_CONNECTIONS
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|createFailingConnection
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to connect."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection failed as expected"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_CONNECTIONS
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|createNonSslConnection
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
empty_stmt|;
name|fail
argument_list|(
literal|"Should not be able to connect."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection failed as expected"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_CONNECTIONS
condition|;
operator|++
name|i
control|)
block|{
try|try
block|{
name|createGoodConnection
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection created as expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Should be able to connect: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Connection
name|createNonSslConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|JmsConnectionFactory
argument_list|(
name|getGoodClientConnectURI
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|createConnection
argument_list|()
return|;
block|}
specifier|protected
name|Connection
name|createFailingConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|JmsConnectionFactory
argument_list|(
name|getBadClientConnectURI
argument_list|()
argument_list|)
operator|.
name|createConnection
argument_list|()
return|;
block|}
specifier|protected
name|Connection
name|createGoodConnection
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|JmsConnectionFactory
argument_list|(
name|getGoodClientConnectURI
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|createConnection
argument_list|()
return|;
block|}
specifier|protected
name|URI
name|getGoodClientConnectURI
parameter_list|(
name|boolean
name|useSsl
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|brokerURI
init|=
name|getBrokerURI
argument_list|()
decl_stmt|;
name|String
name|amqpURI
init|=
operator|(
name|useSsl
condition|?
literal|"amqps://"
else|:
literal|"amqp://"
operator|)
operator|+
name|brokerURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|brokerURI
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|useSsl
condition|)
block|{
name|amqpURI
operator|=
name|amqpURI
operator|+
literal|"?transport.verifyHost=false"
expr_stmt|;
block|}
return|return
operator|new
name|URI
argument_list|(
name|amqpURI
argument_list|)
return|;
block|}
specifier|protected
name|URI
name|getBadClientConnectURI
parameter_list|()
throws|throws
name|Exception
block|{
name|URI
name|brokerURI
init|=
name|getBrokerURI
argument_list|()
decl_stmt|;
name|String
name|amqpURI
init|=
literal|"amqps://"
operator|+
name|brokerURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|brokerURI
operator|.
name|getPort
argument_list|()
operator|+
literal|"?transport.verifyHost=false"
operator|+
literal|"&transport.keyStoreLocation="
operator|+
name|getUntrustedKeyStoreLocation
argument_list|()
decl_stmt|;
return|return
operator|new
name|URI
argument_list|(
name|amqpURI
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getUntrustedKeyStoreLocation
parameter_list|()
block|{
name|File
name|brokerKeyStore
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|untrustedStore
init|=
operator|new
name|File
argument_list|(
name|brokerKeyStore
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"alternative.keystore"
argument_list|)
decl_stmt|;
return|return
name|untrustedStore
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//----- Configure the test support plumbing for this test ----------------//
annotation|@
name|Override
specifier|protected
name|String
name|getAdditionalConfig
parameter_list|()
block|{
return|return
literal|"&transport.needClientAuth=true&maximumConnections="
operator|+
name|MAX_CONNECTIONS
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseTcpConnector
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseSslConnector
parameter_list|()
block|{
return|return
name|connectorScheme
operator|.
name|equals
argument_list|(
literal|"amqp+ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioPlusSslConnector
parameter_list|()
block|{
return|return
name|connectorScheme
operator|.
name|equals
argument_list|(
literal|"amqp+nio+ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|URI
name|getBrokerURI
parameter_list|()
block|{
if|if
condition|(
name|connectorScheme
operator|.
name|equals
argument_list|(
literal|"amqp+ssl"
argument_list|)
condition|)
block|{
return|return
name|amqpSslURI
return|;
block|}
else|else
block|{
return|return
name|amqpNioPlusSslURI
return|;
block|}
block|}
block|}
end_class

end_unit

