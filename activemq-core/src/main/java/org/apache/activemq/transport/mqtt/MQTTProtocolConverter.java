begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|FrameTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|LegacyFrameTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
operator|.
name|StompSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|FactoryFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|CONNACK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|CONNECT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|DISCONNECT
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|MQTTFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PINGREQ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PINGRESP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PUBLISH
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|MQTTProtocolConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTProtocolConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|CONNECTION_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_VERSION
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MQTTFrame
name|PING_RESP_FRAME
init|=
operator|new
name|PINGRESP
argument_list|()
operator|.
name|encode
argument_list|()
decl_stmt|;
static|static
block|{
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|String
name|version
init|=
literal|"5.6.0"
decl_stmt|;
if|if
condition|(
operator|(
name|in
operator|=
name|MQTTProtocolConverter
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/activemq/version.txt"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|version
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
name|BROKER_VERSION
operator|=
name|version
expr_stmt|;
block|}
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|CONNECTION_ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionId
name|sessionId
init|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
name|sessionId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|transactionIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|tempDestinationGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
name|resposeHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|StompSubscription
argument_list|>
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|StompSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|StompSubscription
argument_list|>
name|subscriptions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|StompSubscription
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ActiveMQDestination
argument_list|>
name|tempDestinations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tempDestinationAmqToStompMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LocalTransactionId
argument_list|>
name|transactions
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|LocalTransactionId
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|UTF8Buffer
argument_list|,
name|ActiveMQTopic
argument_list|>
name|activeMQTopicMap
init|=
operator|new
name|LRUCache
argument_list|<
name|UTF8Buffer
argument_list|,
name|ActiveMQTopic
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Destination
argument_list|,
name|UTF8Buffer
argument_list|>
name|mqttTopicMap
init|=
operator|new
name|LRUCache
argument_list|<
name|Destination
argument_list|,
name|UTF8Buffer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MQTTTransport
name|mqttTransport
decl_stmt|;
specifier|private
specifier|final
name|Object
name|commnadIdMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastCommandId
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|connected
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|FrameTranslator
name|frameTranslator
init|=
operator|new
name|LegacyFrameTranslator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FactoryFinder
name|FRAME_TRANSLATOR_FINDER
init|=
operator|new
name|FactoryFinder
argument_list|(
literal|"META-INF/services/org/apache/activemq/transport/frametranslator/"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BrokerContext
name|brokerContext
decl_stmt|;
specifier|private
name|String
name|version
init|=
literal|"1.0"
decl_stmt|;
name|ConnectionInfo
name|connectionInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
specifier|private
name|CONNECT
name|connect
decl_stmt|;
specifier|private
name|String
name|clientId
decl_stmt|;
specifier|public
name|MQTTProtocolConverter
parameter_list|(
name|MQTTTransport
name|mqttTransport
parameter_list|,
name|BrokerContext
name|brokerContext
parameter_list|)
block|{
name|this
operator|.
name|mqttTransport
operator|=
name|mqttTransport
expr_stmt|;
name|this
operator|.
name|brokerContext
operator|=
name|brokerContext
expr_stmt|;
block|}
specifier|protected
name|int
name|generateCommandId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commnadIdMutex
init|)
block|{
return|return
name|lastCommandId
operator|++
return|;
block|}
block|}
specifier|protected
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|,
name|ResponseHandler
name|handler
parameter_list|)
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|generateCommandId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resposeHandlers
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|mqttTransport
operator|.
name|sendToActiveMQ
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
comment|/**      * Convert a MQTT command      */
specifier|public
name|void
name|onMQTTCommand
parameter_list|(
name|MQTTFrame
name|frame
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
switch|switch
condition|(
name|frame
operator|.
name|messageType
argument_list|()
condition|)
block|{
case|case
name|PINGREQ
operator|.
name|TYPE
case|:
block|{
name|mqttTransport
operator|.
name|sendToMQTT
argument_list|(
name|PING_RESP_FRAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sent Ping Response to "
operator|+
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|CONNECT
operator|.
name|TYPE
case|:
block|{
name|onMQTTConnect
argument_list|(
operator|new
name|CONNECT
argument_list|()
operator|.
name|decode
argument_list|(
name|frame
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DISCONNECT
operator|.
name|TYPE
case|:
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MQTT Client "
operator|+
name|getClientId
argument_list|()
operator|+
literal|" disconnecting"
argument_list|)
expr_stmt|;
name|stopTransport
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
name|handleException
argument_list|(
operator|new
name|MQTTProtocolException
argument_list|(
literal|"Unknown MQTTFrame type: "
operator|+
name|frame
operator|.
name|messageType
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onMQTTConnect
parameter_list|(
specifier|final
name|CONNECT
name|connect
parameter_list|)
throws|throws
name|ProtocolException
block|{
if|if
condition|(
name|connected
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"All ready connected."
argument_list|)
throw|;
block|}
name|this
operator|.
name|connect
operator|=
name|connect
expr_stmt|;
name|String
name|clientId
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|connect
operator|.
name|clientId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clientId
operator|=
name|connect
operator|.
name|clientId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|userName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|connect
operator|.
name|userName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|userName
operator|=
name|connect
operator|.
name|userName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|String
name|passswd
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|connect
operator|.
name|password
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|passswd
operator|=
name|connect
operator|.
name|password
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|configureInactivityMonitor
argument_list|(
name|connect
operator|.
name|keepAlive
argument_list|()
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
operator|&&
name|clientId
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
literal|""
operator|+
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|connectionInfo
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setPassword
argument_list|(
name|passswd
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setTransportContext
argument_list|(
name|mqttTransport
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|connectionInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// If the connection attempt fails we close the socket.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
comment|//let the client know
name|CONNACK
name|ack
init|=
operator|new
name|CONNACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|code
argument_list|(
name|CONNACK
operator|.
name|Code
operator|.
name|CONNECTION_REFUSED_SERVER_UNAVAILABLE
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SessionInfo
name|sessionInfo
init|=
operator|new
name|SessionInfo
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|sessionInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|ProducerInfo
name|producerInfo
init|=
operator|new
name|ProducerInfo
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|producerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
specifier|public
name|void
name|onResponse
parameter_list|(
name|MQTTProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
comment|// If the connection attempt fails we close the socket.
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|CONNACK
name|ack
init|=
operator|new
name|CONNACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|code
argument_list|(
name|CONNACK
operator|.
name|Code
operator|.
name|CONNECTION_REFUSED_BAD_USERNAME_OR_PASSWORD
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CONNACK
name|ack
init|=
operator|new
name|CONNACK
argument_list|()
decl_stmt|;
name|ack
operator|.
name|code
argument_list|(
name|CONNACK
operator|.
name|Code
operator|.
name|CONNECTION_ACCEPTED
argument_list|)
expr_stmt|;
name|getMQTTTransport
argument_list|()
operator|.
name|sendToMQTT
argument_list|(
name|ack
operator|.
name|encode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Dispatch a ActiveMQ command      */
specifier|public
name|void
name|onActiveMQCommand
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|ResponseHandler
name|rh
init|=
name|resposeHandlers
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rh
operator|!=
literal|null
condition|)
block|{
name|rh
operator|.
name|onResponse
argument_list|(
name|this
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pass down any unexpected errors. Should this close the connection?
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|StompSubscription
name|sub
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
comment|//sub.onMessageDispatch(md);
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ConnectionError
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
comment|// Pass down any unexpected async errors. Should this close the connection?
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ConnectionError
operator|)
name|command
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Do not know how to process ActiveMQ Command "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ActiveMQMessage
name|convertMessage
parameter_list|(
name|PUBLISH
name|command
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|ActiveMQBytesMessage
name|msg
init|=
operator|new
name|ActiveMQBytesMessage
argument_list|()
decl_stmt|;
name|StringBuilder
name|msgId
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msgId
operator|.
name|append
argument_list|(
literal|"ID:"
argument_list|)
operator|.
name|append
argument_list|(
name|getClientId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
operator|.
name|append
argument_list|(
name|command
operator|.
name|messageId
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setJMSMessageID
argument_list|(
name|msgId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setJMSPriority
argument_list|(
literal|4
argument_list|)
expr_stmt|;
comment|//ActiveMQTopic topic = new ActiveMQTopic(topicName);
name|ActiveMQTopic
name|topic
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|activeMQTopicMap
init|)
block|{
name|topic
operator|=
name|activeMQTopicMap
operator|.
name|get
argument_list|(
name|command
operator|.
name|topicName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
operator|==
literal|null
condition|)
block|{
name|String
name|topicName
init|=
name|command
operator|.
name|topicName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|topic
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
name|activeMQTopicMap
operator|.
name|put
argument_list|(
name|command
operator|.
name|topicName
argument_list|()
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
block|}
name|msg
operator|.
name|setJMSDestination
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|msg
operator|.
name|writeBytes
argument_list|(
name|command
operator|.
name|payload
argument_list|()
operator|.
name|data
argument_list|,
name|command
operator|.
name|payload
argument_list|()
operator|.
name|offset
argument_list|,
name|command
operator|.
name|payload
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
name|MQTTFrame
name|convertMessage
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|PUBLISH
name|result
init|=
operator|new
name|PUBLISH
argument_list|()
decl_stmt|;
name|String
name|msgId
init|=
name|message
operator|.
name|getJMSMessageID
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|msgId
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|short
name|id
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
condition|)
block|{
name|Short
operator|.
name|parseShort
argument_list|(
name|msgId
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|msgId
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|messageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|UTF8Buffer
name|topicName
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|mqttTopicMap
init|)
block|{
name|topicName
operator|=
name|mqttTopicMap
operator|.
name|get
argument_list|(
name|message
operator|.
name|getJMSDestination
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|topicName
operator|==
literal|null
condition|)
block|{
name|topicName
operator|=
operator|new
name|UTF8Buffer
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|mqttTopicMap
operator|.
name|put
argument_list|(
name|message
operator|.
name|getJMSDestination
argument_list|()
argument_list|,
name|topicName
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|topicName
argument_list|(
name|topicName
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ActiveMQTextMessage
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
if|if
condition|(
operator|!
name|message
operator|.
name|isCompressed
argument_list|()
operator|&&
name|message
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ByteSequence
name|msgContent
init|=
name|message
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|msgContent
operator|.
name|getLength
argument_list|()
operator|>
literal|4
condition|)
block|{
name|byte
index|[]
name|content
init|=
operator|new
name|byte
index|[
name|msgContent
operator|.
name|getLength
argument_list|()
operator|-
literal|4
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|msgContent
operator|.
name|data
argument_list|,
literal|4
argument_list|,
name|content
argument_list|,
literal|0
argument_list|,
name|content
operator|.
name|length
argument_list|)
expr_stmt|;
name|result
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ActiveMQTextMessage
name|msg
init|=
operator|(
name|ActiveMQTextMessage
operator|)
name|message
operator|.
name|copy
argument_list|()
decl_stmt|;
name|String
name|messageText
init|=
name|msg
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageText
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|msg
operator|.
name|getText
argument_list|()
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|message
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ActiveMQBytesMessage
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
name|ActiveMQBytesMessage
name|msg
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|message
operator|.
name|copy
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|msg
operator|.
name|getBodyLength
argument_list|()
index|]
decl_stmt|;
name|msg
operator|.
name|readBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|result
operator|.
name|payload
argument_list|(
operator|new
name|Buffer
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Cannot convert "
operator|+
name|message
operator|+
literal|" to a MQTT PUBLISH"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|encode
argument_list|()
return|;
block|}
specifier|public
name|MQTTTransport
name|getMQTTTransport
parameter_list|()
block|{
return|return
name|mqttTransport
return|;
block|}
specifier|public
name|ActiveMQDestination
name|createTempDestination
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|topic
parameter_list|)
block|{
name|ActiveMQDestination
name|rc
init|=
name|tempDestinations
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|topic
condition|)
block|{
name|rc
operator|=
operator|new
name|ActiveMQTempTopic
argument_list|(
name|connectionId
argument_list|,
name|tempDestinationGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rc
operator|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionId
argument_list|,
name|tempDestinationGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
operator|new
name|DestinationInfo
argument_list|(
name|connectionId
argument_list|,
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|,
name|rc
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tempDestinations
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|rc
argument_list|)
expr_stmt|;
name|tempDestinationAmqToStompMap
operator|.
name|put
argument_list|(
name|rc
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|String
name|getCreatedTempDestinationName
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
name|tempDestinationAmqToStompMap
operator|.
name|get
argument_list|(
name|destination
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|configureInactivityMonitor
parameter_list|(
name|short
name|heartBeat
parameter_list|)
throws|throws
name|ProtocolException
block|{
try|try
block|{
name|int
name|heartBeatMS
init|=
name|heartBeat
operator|*
literal|1000
decl_stmt|;
name|MQTTInactivityMonitor
name|monitor
init|=
name|getMQTTTransport
argument_list|()
operator|.
name|getInactivityMonitor
argument_list|()
decl_stmt|;
name|monitor
operator|.
name|setReadCheckTime
argument_list|(
name|heartBeatMS
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|setInitialDelayTime
argument_list|(
name|heartBeatMS
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|startMonitorThread
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{          }
name|LOG
operator|.
name|debug
argument_list|(
name|getClientId
argument_list|()
operator|+
literal|" MQTT Connection using heart beat of  "
operator|+
name|heartBeat
operator|+
literal|" secs"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|,
name|MQTTFrame
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred processing: \n"
operator|+
name|command
operator|+
literal|": "
operator|+
name|exception
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception detail"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop MQTTT Transport "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getClientId
parameter_list|()
block|{
if|if
condition|(
name|clientId
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|connect
operator|!=
literal|null
operator|&&
name|connect
operator|.
name|clientId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clientId
operator|=
name|connect
operator|.
name|clientId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|clientId
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|clientId
return|;
block|}
specifier|private
name|void
name|stopTransport
parameter_list|()
block|{
try|try
block|{
name|getMQTTTransport
argument_list|()
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to stop MQTT transport "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

