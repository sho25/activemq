begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|AbstractStoreStatTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This test checks that KahaDB properly sets the new storeMessageSize statistic.  *  * AMQ-5748  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractPendingMessageCursorTest
extends|extends
name|AbstractStoreStatTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractPendingMessageCursorTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|URI
name|brokerConnectURI
decl_stmt|;
specifier|protected
name|String
name|defaultQueueName
init|=
literal|"test.queue"
decl_stmt|;
specifier|protected
name|String
name|defaultTopicName
init|=
literal|"test.topic"
decl_stmt|;
specifier|protected
specifier|static
name|int
name|maxMessageSize
init|=
literal|1000
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUpBroker
parameter_list|(
name|boolean
name|clearDataDir
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|this
operator|.
name|initPersistence
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|//set up a transport
name|TransportConnector
name|connector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
operator|new
name|TransportConnector
argument_list|()
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setUri
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setTopicPrefetch
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setDurableTopicPrefetch
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|PolicyMap
name|pMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|pMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|pMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|brokerConnectURI
operator|=
name|broker
operator|.
name|getConnectorByName
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getConnectUri
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|getBroker
parameter_list|()
block|{
return|return
name|this
operator|.
name|broker
return|;
block|}
annotation|@
name|Override
specifier|protected
name|URI
name|getBrokerConnectURI
parameter_list|()
block|{
return|return
name|this
operator|.
name|brokerConnectURI
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|initPersistence
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|testQueueMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|dest
init|=
name|publishTestQueueMessages
argument_list|(
literal|200
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueBrowserMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|dest
init|=
name|publishTestQueueMessages
argument_list|(
literal|200
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
name|browseTestQueueMessages
argument_list|(
name|dest
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueMessageSizeNonPersistent
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|dest
init|=
name|publishTestQueueMessages
argument_list|(
literal|200
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueMessageSizePersistentAndNonPersistent
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedNonPersistentMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|dest
init|=
name|publishTestQueueMessages
argument_list|(
literal|100
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
name|dest
operator|=
name|publishTestQueueMessages
argument_list|(
literal|100
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
name|publishedNonPersistentMessageSize
argument_list|)
expr_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
operator|+
name|publishedNonPersistentMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|100
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueMessageSizeAfterConsumption
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|dest
init|=
name|publishTestQueueMessages
argument_list|(
literal|200
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|consumeTestQueueMessages
argument_list|()
expr_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQueueMessageSizeAfterConsumptionNonPersistent
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|dest
init|=
name|publishTestQueueMessages
argument_list|(
literal|200
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|consumeTestQueueMessages
argument_list|()
expr_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
specifier|public
name|void
name|testTopicMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|this
operator|.
name|defaultTopicName
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestTopicMessages
argument_list|(
literal|200
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
comment|//verify the count and size - there is a prefetch of 100 so only 100 are pending and 100
comment|//are dispatched because we have an active consumer online
comment|//verify that the size is greater than 100 messages times the minimum size of 100
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|100
argument_list|,
literal|100
operator|*
literal|100
argument_list|)
expr_stmt|;
comment|//consume all messages
name|consumeTestMessages
argument_list|(
name|consumer
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|//All messages should now be gone
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
specifier|public
name|void
name|testTopicNonPersistentMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|this
operator|.
name|defaultTopicName
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestTopicMessages
argument_list|(
literal|200
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
comment|//verify the count and size - there is a prefetch of 100 so only 100 are pending and 100
comment|//are dispatched because we have an active consumer online
comment|//verify the size is at least as big as 100 messages times the minimum of 100 size
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|100
argument_list|,
literal|100
operator|*
literal|100
argument_list|)
expr_stmt|;
comment|//consume all messages
name|consumeTestMessages
argument_list|(
name|consumer
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|//All messages should now be gone
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|100000
argument_list|)
specifier|public
name|void
name|testTopicPersistentAndNonPersistentMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|this
operator|.
name|defaultTopicName
argument_list|)
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestTopicMessages
argument_list|(
literal|100
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|,
name|publishedMessageSize
argument_list|)
decl_stmt|;
name|dest
operator|=
name|publishTestTopicMessages
argument_list|(
literal|100
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|publishedMessageSize
argument_list|)
expr_stmt|;
comment|//verify the count and size - there is a prefetch of 100 so only 100 are pending and 100
comment|//are dispatched because we have an active consumer online
comment|//verify the size is at least as big as 100 messages times the minimum of 100 size
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|100
argument_list|,
literal|100
operator|*
literal|100
argument_list|)
expr_stmt|;
comment|//consume all messages
name|consumeTestMessages
argument_list|(
name|consumer
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|//All messages should now be gone
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testMessageSizeOneDurable
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
comment|//verify the count and size - durable is offline so all 200 should be pending since none are in prefetch
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//consume all messages
name|consumeDurableTestMessages
argument_list|(
name|connection
argument_list|,
literal|"sub1"
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|)
expr_stmt|;
comment|//All messages should now be gone
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testMessageSizeOneDurablePartialConsumption
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
comment|//verify the count and size - durable is offline so all 200 should be pending since none are in prefetch
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//consume all messages
name|consumeDurableTestMessages
argument_list|(
name|connection
argument_list|,
literal|"sub1"
argument_list|,
literal|50
argument_list|,
name|publishedMessageSize
argument_list|)
expr_stmt|;
comment|//150 should be left
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|150
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|150
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testMessageSizeTwoDurables
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicLong
name|publishedMessageSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sub1"
block|,
literal|"sub2"
block|}
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
decl_stmt|;
comment|//verify the count and size
name|SubscriptionKey
name|subKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//consume messages just for sub1
name|consumeDurableTestMessages
argument_list|(
name|connection
argument_list|,
literal|"sub1"
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
argument_list|)
expr_stmt|;
comment|//There is still a durable that hasn't consumed so the messages should exist
name|SubscriptionKey
name|subKey2
init|=
operator|new
name|SubscriptionKey
argument_list|(
literal|"clientId"
argument_list|,
literal|"sub2"
argument_list|)
decl_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verifyPendingStats
argument_list|(
name|dest
argument_list|,
name|subKey2
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|verifyStoreStats
argument_list|(
name|dest
argument_list|,
literal|200
argument_list|,
name|publishedMessageSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyPendingStats
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|queue
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|minimumSize
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|verifyPendingStats
argument_list|(
name|queue
argument_list|,
name|count
argument_list|,
name|minimumSize
argument_list|,
name|count
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyPendingStats
parameter_list|(
specifier|final
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|queue
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|minimumSize
parameter_list|,
specifier|final
name|int
name|storeCount
parameter_list|,
specifier|final
name|long
name|minimumStoreSize
parameter_list|)
throws|throws
name|Exception
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|queue
operator|.
name|getPendingMessageCount
argument_list|()
operator|==
name|count
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verifySize
argument_list|(
name|count
argument_list|,
operator|new
name|MessageSizeCalculator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|queue
operator|.
name|getPendingMessageSize
argument_list|()
return|;
block|}
block|}
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
block|}
comment|//For a non-durable there won't necessarily be a message store
specifier|protected
name|void
name|verifyPendingStats
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|topic
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|minimumSize
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|TopicSubscription
name|sub
init|=
operator|(
name|TopicSubscription
operator|)
name|topic
operator|.
name|getConsumers
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sub
operator|.
name|getPendingQueueSize
argument_list|()
operator|==
name|count
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verifySize
argument_list|(
name|count
argument_list|,
operator|new
name|MessageSizeCalculator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
return|;
block|}
block|}
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyPendingStats
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|topic
parameter_list|,
name|SubscriptionKey
name|subKey
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|minimumSize
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|DurableTopicSubscription
name|sub
init|=
name|topic
operator|.
name|getDurableTopicSubs
argument_list|()
operator|.
name|get
argument_list|(
name|subKey
argument_list|)
decl_stmt|;
comment|//verify message count
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sub
operator|.
name|getPendingQueueSize
argument_list|()
operator|==
name|count
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//verify message size
name|verifySize
argument_list|(
name|count
argument_list|,
operator|new
name|MessageSizeCalculator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|sub
operator|.
name|getPendingMessageSize
argument_list|()
return|;
block|}
block|}
argument_list|,
name|minimumSize
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyStoreStats
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
name|dest
parameter_list|,
specifier|final
name|int
name|storeCount
parameter_list|,
specifier|final
name|long
name|minimumStoreSize
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MessageStore
name|messageStore
init|=
name|dest
operator|.
name|getMessageStore
argument_list|()
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|messageStore
operator|.
name|getMessageCount
argument_list|()
operator|==
name|storeCount
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verifySize
argument_list|(
name|storeCount
argument_list|,
operator|new
name|MessageSizeCalculator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getMessageSize
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|messageStore
operator|.
name|getMessageSize
argument_list|()
return|;
block|}
block|}
argument_list|,
name|minimumStoreSize
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifySize
parameter_list|(
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|MessageSizeCalculator
name|messageSizeCalculator
parameter_list|,
specifier|final
name|long
name|minimumSize
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|messageSizeCalculator
operator|.
name|getMessageSize
argument_list|()
operator|>
name|minimumSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|messageSizeCalculator
operator|.
name|getMessageSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
interface|interface
name|MessageSizeCalculator
block|{
name|long
name|getMessageSize
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|protected
name|Destination
name|consumeTestMessages
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|,
name|int
name|size
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|consumeTestMessages
argument_list|(
name|consumer
argument_list|,
name|size
argument_list|,
name|defaultTopicName
argument_list|)
return|;
block|}
specifier|protected
name|Destination
name|consumeTestMessages
parameter_list|(
name|MessageConsumer
name|consumer
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|topicName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create a new queue
specifier|final
name|ActiveMQDestination
name|activeMqTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
name|Destination
name|dest
init|=
name|broker
operator|.
name|getDestination
argument_list|(
name|activeMqTopic
argument_list|)
decl_stmt|;
comment|//Topic topic = session.createTopic(topicName);
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|consumer
operator|.
name|receive
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|//session.close();
block|}
return|return
name|dest
return|;
block|}
specifier|protected
name|Destination
name|consumeDurableTestMessages
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
name|sub
parameter_list|,
name|int
name|size
parameter_list|,
name|AtomicLong
name|publishedMessageSize
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|consumeDurableTestMessages
argument_list|(
name|connection
argument_list|,
name|sub
argument_list|,
name|size
argument_list|,
name|defaultTopicName
argument_list|,
name|publishedMessageSize
argument_list|)
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|publishTestMessagesDurable
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|String
index|[]
name|subNames
parameter_list|,
name|int
name|publishSize
parameter_list|,
name|AtomicLong
name|publishedMessageSize
parameter_list|,
name|int
name|deliveryMode
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|publishTestMessagesDurable
argument_list|(
name|connection
argument_list|,
name|subNames
argument_list|,
name|defaultTopicName
argument_list|,
name|publishSize
argument_list|,
literal|0
argument_list|,
name|AbstractStoreStatTestSupport
operator|.
name|defaultMessageSize
argument_list|,
name|publishedMessageSize
argument_list|,
literal|false
argument_list|,
name|deliveryMode
argument_list|)
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|publishTestTopicMessages
parameter_list|(
name|int
name|publishSize
parameter_list|,
name|AtomicLong
name|publishedMessageSize
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|publishTestTopicMessages
argument_list|(
name|publishSize
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|publishedMessageSize
argument_list|)
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|publishTestTopicMessages
parameter_list|(
name|int
name|publishSize
parameter_list|,
name|int
name|deliveryMode
parameter_list|,
name|AtomicLong
name|publishedMessageSize
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create a new queue
name|Connection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerConnectURI
argument_list|)
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"clientId2"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ActiveMQDestination
name|activeMqTopic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|defaultTopicName
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
name|dest
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
operator|)
name|broker
operator|.
name|getDestination
argument_list|(
name|activeMqTopic
argument_list|)
decl_stmt|;
comment|// Start the connection
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|TopicSession
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|defaultTopicName
argument_list|)
decl_stmt|;
try|try
block|{
comment|// publish a bunch of non-persistent messages to fill up the temp
comment|// store
name|MessageProducer
name|prod
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|prod
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|publishSize
condition|;
name|i
operator|++
control|)
block|{
name|prod
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|session
argument_list|,
name|AbstractPendingMessageCursorTest
operator|.
name|maxMessageSize
argument_list|,
name|publishedMessageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|publishTestQueueMessages
parameter_list|(
name|int
name|count
parameter_list|,
name|AtomicLong
name|publishedMessageSize
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|publishTestQueueMessages
argument_list|(
name|count
argument_list|,
name|defaultQueueName
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|AbstractPendingMessageCursorTest
operator|.
name|maxMessageSize
argument_list|,
name|publishedMessageSize
argument_list|)
return|;
block|}
specifier|protected
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
name|publishTestQueueMessages
parameter_list|(
name|int
name|count
parameter_list|,
name|int
name|deliveryMode
parameter_list|,
name|AtomicLong
name|publishedMessageSize
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|publishTestQueueMessages
argument_list|(
name|count
argument_list|,
name|defaultQueueName
argument_list|,
name|deliveryMode
argument_list|,
name|AbstractPendingMessageCursorTest
operator|.
name|maxMessageSize
argument_list|,
name|publishedMessageSize
argument_list|)
return|;
block|}
specifier|protected
name|Destination
name|consumeTestQueueMessages
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|consumeTestQueueMessages
argument_list|(
name|defaultQueueName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

