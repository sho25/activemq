begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSslConnectionFactoryTest
operator|.
name|getKeyManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSslConnectionFactoryTest
operator|.
name|getTrustManager
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkReconnectSslNioTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NetworkReconnectSslNioTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testForceReconnect
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SslContext
name|sslContext
init|=
operator|new
name|SslContext
argument_list|(
name|getKeyManager
argument_list|()
argument_list|,
name|getTrustManager
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|BrokerService
name|remote
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|remote
operator|.
name|setBrokerName
argument_list|(
literal|"R"
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remote
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|TransportConnector
name|transportConnector
init|=
name|remote
operator|.
name|addConnector
argument_list|(
literal|"nio+ssl://0.0.0.0:0?transport.verifyHostName=false"
argument_list|)
decl_stmt|;
name|remote
operator|.
name|start
argument_list|()
expr_stmt|;
name|BrokerService
name|local
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|local
operator|.
name|setSslContext
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
name|local
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|local
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|NetworkConnector
name|networkConnector
init|=
name|local
operator|.
name|addNetworkConnector
argument_list|(
literal|"static:("
operator|+
name|remote
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"nio+ssl"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"nio+ssl"
argument_list|,
literal|"ssl"
argument_list|)
operator|+
literal|"?socket.verifyHostName=false"
operator|+
literal|")?useExponentialBackOff=false&initialReconnectDelay=10"
argument_list|)
decl_stmt|;
name|local
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Bridge created"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|networkConnector
operator|.
name|activeBridges
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|networkConnector
operator|.
name|activeBridges
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|DurableConduitBridge
index|[]
block|{}
argument_list|)
index|[
literal|0
index|]
operator|.
name|getRemoteBrokerName
argument_list|()
operator|!=
literal|null
operator|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|DurableConduitBridge
argument_list|>
name|bridge
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|(
name|DurableConduitBridge
operator|)
name|networkConnector
operator|.
name|activeBridges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Connected to R"
argument_list|,
name|bridge
operator|.
name|get
argument_list|()
operator|.
name|getRemoteBrokerName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"R"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Forcing error on NC via remote exception, iteration:"
operator|+
name|i
operator|+
literal|",  bridge: "
operator|+
name|bridge
argument_list|)
expr_stmt|;
name|TransportConnection
name|connection
init|=
name|transportConnector
operator|.
name|getConnections
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|connection
operator|.
name|dispatchAsync
argument_list|(
operator|new
name|ConnectionError
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"bridge failed"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|bridge
operator|.
name|get
argument_list|()
operator|.
name|bridgeFailed
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|,
literal|10
operator|*
literal|1000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Bridge recreated: "
operator|+
name|i
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|networkConnector
operator|.
name|activeBridges
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|DurableConduitBridge
name|durableConduitBridge
init|=
operator|(
name|DurableConduitBridge
operator|)
name|networkConnector
operator|.
name|activeBridges
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"R"
operator|.
name|equals
argument_list|(
name|durableConduitBridge
operator|.
name|getRemoteBrokerName
argument_list|()
argument_list|)
condition|)
block|{
name|bridge
operator|.
name|set
argument_list|(
name|durableConduitBridge
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|expectedContention
parameter_list|)
block|{}
block|}
return|return
name|bridge
operator|.
name|get
argument_list|()
operator|!=
literal|null
return|;
block|}
block|}
argument_list|,
literal|10
operator|*
literal|1000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|local
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remote
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

