begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|com
operator|.
name|swiftmq
operator|.
name|amqp
operator|.
name|AMQPContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|swiftmq
operator|.
name|amqp
operator|.
name|v100
operator|.
name|client
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|swiftmq
operator|.
name|amqp
operator|.
name|v100
operator|.
name|generated
operator|.
name|messaging
operator|.
name|message_format
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|swiftmq
operator|.
name|amqp
operator|.
name|v100
operator|.
name|messaging
operator|.
name|AMQPMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|swiftmq
operator|.
name|amqp
operator|.
name|v100
operator|.
name|types
operator|.
name|AMQPString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|swiftmq
operator|.
name|amqp
operator|.
name|v100
operator|.
name|types
operator|.
name|AMQPType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author<a href="http://hiramchirino.com">Hiram Chirino</a>  */
end_comment

begin_class
specifier|public
class|class
name|SwiftMQClientTest
extends|extends
name|AmqpTestSupport
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSendReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queue
init|=
literal|"testqueue"
decl_stmt|;
name|int
name|nMsgs
init|=
literal|1
decl_stmt|;
name|int
name|qos
init|=
name|QoS
operator|.
name|AT_MOST_ONCE
decl_stmt|;
name|AMQPContext
name|ctx
init|=
operator|new
name|AMQPContext
argument_list|(
name|AMQPContext
operator|.
name|CLIENT
argument_list|)
decl_stmt|;
try|try
block|{
name|Connection
name|connection
init|=
operator|new
name|Connection
argument_list|(
name|ctx
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|port
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|connection
operator|.
name|setContainerId
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setIdleTimeout
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setMaxFrameSize
argument_list|(
literal|1024
operator|*
literal|4
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|ExceptionListener
argument_list|()
block|{
specifier|public
name|void
name|onException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Producer
name|p
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|,
name|qos
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nMsgs
condition|;
name|i
operator|++
control|)
block|{
name|AMQPMessage
name|msg
init|=
operator|new
name|AMQPMessage
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sending "
operator|+
name|i
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setAmqpValue
argument_list|(
operator|new
name|AmqpValue
argument_list|(
operator|new
name|AMQPString
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%010d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Consumer
name|c
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|,
literal|100
argument_list|,
name|qos
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Receive messages non-transacted
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nMsgs
condition|;
name|i
operator|++
control|)
block|{
name|AMQPMessage
name|msg
init|=
name|c
operator|.
name|receive
argument_list|()
decl_stmt|;
specifier|final
name|AMQPType
name|value
init|=
name|msg
operator|.
name|getAmqpValue
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|AMQPString
condition|)
block|{
name|String
name|s
init|=
operator|(
operator|(
name|AMQPString
operator|)
name|value
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%010d"
argument_list|,
name|i
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received: "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|msg
operator|.
name|isSettled
argument_list|()
condition|)
name|msg
operator|.
name|accept
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

