begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTCodec
block|{
name|TcpTransport
name|transport
decl_stmt|;
name|DataByteArrayOutputStream
name|currentCommand
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
name|boolean
name|processedHeader
init|=
literal|false
decl_stmt|;
name|String
name|action
decl_stmt|;
name|byte
name|header
decl_stmt|;
name|int
name|contentLength
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|previousByte
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|payLoadRead
init|=
literal|0
decl_stmt|;
specifier|public
name|MQTTCodec
parameter_list|(
name|TcpTransport
name|transport
parameter_list|)
block|{
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
block|}
specifier|public
name|void
name|parse
parameter_list|(
name|DataByteArrayInputStream
name|input
parameter_list|,
name|int
name|readSize
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|byte
name|b
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
name|readSize
condition|)
block|{
name|b
operator|=
name|input
operator|.
name|readByte
argument_list|()
expr_stmt|;
comment|// skip repeating nulls
if|if
condition|(
operator|!
name|processedHeader
operator|&&
name|b
operator|==
literal|0
condition|)
block|{
name|previousByte
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|processedHeader
condition|)
block|{
name|i
operator|+=
name|processHeader
argument_list|(
name|b
argument_list|,
name|input
argument_list|)
expr_stmt|;
if|if
condition|(
name|contentLength
operator|==
literal|0
condition|)
block|{
name|processCommand
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|contentLength
operator|==
operator|-
literal|1
condition|)
block|{
comment|// end of command reached, unmarshal
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
name|processCommand
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|currentCommand
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// read desired content length
if|if
condition|(
name|payLoadRead
operator|==
name|contentLength
condition|)
block|{
name|processCommand
argument_list|()
expr_stmt|;
name|i
operator|+=
name|processHeader
argument_list|(
name|b
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|currentCommand
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|payLoadRead
operator|++
expr_stmt|;
block|}
block|}
block|}
name|previousByte
operator|=
name|b
expr_stmt|;
block|}
if|if
condition|(
name|processedHeader
operator|&&
name|payLoadRead
operator|==
name|contentLength
condition|)
block|{
name|processCommand
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * sets the content length      *      * @return number of bytes read      */
specifier|private
name|int
name|processHeader
parameter_list|(
name|byte
name|header
parameter_list|,
name|DataByteArrayInputStream
name|input
parameter_list|)
block|{
name|this
operator|.
name|header
operator|=
name|header
expr_stmt|;
name|byte
name|digit
decl_stmt|;
name|int
name|multiplier
init|=
literal|1
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
do|do
block|{
name|digit
operator|=
name|input
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|length
operator|+=
operator|(
name|digit
operator|&
literal|0x7F
operator|)
operator|*
name|multiplier
expr_stmt|;
name|multiplier
operator|<<=
literal|7
expr_stmt|;
name|read
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|digit
operator|&
literal|0x80
operator|)
operator|!=
literal|0
condition|)
do|;
name|contentLength
operator|=
name|length
expr_stmt|;
name|processedHeader
operator|=
literal|true
expr_stmt|;
return|return
name|read
return|;
block|}
specifier|private
name|void
name|processCommand
parameter_list|()
throws|throws
name|Exception
block|{
name|MQTTFrame
name|frame
init|=
operator|new
name|MQTTFrame
argument_list|(
name|currentCommand
operator|.
name|toBuffer
argument_list|()
operator|.
name|deepCopy
argument_list|()
argument_list|)
operator|.
name|header
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|transport
operator|.
name|doConsume
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|processedHeader
operator|=
literal|false
expr_stmt|;
name|currentCommand
operator|.
name|reset
argument_list|()
expr_stmt|;
name|contentLength
operator|=
operator|-
literal|1
expr_stmt|;
name|payLoadRead
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|commandType
parameter_list|(
name|byte
name|header
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|byte
name|messageType
init|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|header
operator|&
literal|0xF0
operator|)
operator|>>>
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|messageType
condition|)
block|{
case|case
name|PINGREQ
operator|.
name|TYPE
case|:
block|{
return|return
literal|"PINGREQ"
return|;
block|}
case|case
name|CONNECT
operator|.
name|TYPE
case|:
block|{
return|return
literal|"CONNECT"
return|;
block|}
case|case
name|DISCONNECT
operator|.
name|TYPE
case|:
block|{
return|return
literal|"DISCONNECT"
return|;
block|}
case|case
name|SUBSCRIBE
operator|.
name|TYPE
case|:
block|{
return|return
literal|"SUBSCRIBE"
return|;
block|}
case|case
name|UNSUBSCRIBE
operator|.
name|TYPE
case|:
block|{
return|return
literal|"UNSUBSCRIBE"
return|;
block|}
case|case
name|PUBLISH
operator|.
name|TYPE
case|:
block|{
return|return
literal|"PUBLISH"
return|;
block|}
case|case
name|PUBACK
operator|.
name|TYPE
case|:
block|{
return|return
literal|"PUBACK"
return|;
block|}
case|case
name|PUBREC
operator|.
name|TYPE
case|:
block|{
return|return
literal|"PUBREC"
return|;
block|}
case|case
name|PUBREL
operator|.
name|TYPE
case|:
block|{
return|return
literal|"PUBREL"
return|;
block|}
case|case
name|PUBCOMP
operator|.
name|TYPE
case|:
block|{
return|return
literal|"PUBCOMP"
return|;
block|}
default|default:
return|return
literal|"UNKNOWN"
return|;
block|}
block|}
block|}
end_class

end_unit

