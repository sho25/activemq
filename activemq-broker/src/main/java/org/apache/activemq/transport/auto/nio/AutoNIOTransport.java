begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|auto
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
operator|.
name|NIOTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_comment
comment|/**  *  *  */
end_comment

begin_class
specifier|public
class|class
name|AutoNIOTransport
extends|extends
name|NIOTransport
block|{
specifier|public
name|AutoNIOTransport
parameter_list|(
name|WireFormat
name|format
parameter_list|,
name|Socket
name|socket
parameter_list|,
name|InitBuffer
name|initBuffer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|format
argument_list|,
name|socket
argument_list|,
name|initBuffer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutoNIOTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|Socket
name|socket
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socket
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AutoNIOTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|SocketFactory
name|socketFactory
parameter_list|,
name|URI
name|remoteLocation
parameter_list|,
name|URI
name|localLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|socketFactory
argument_list|,
name|remoteLocation
argument_list|,
name|localLocation
argument_list|)
expr_stmt|;
block|}
name|boolean
name|doneInitBuffer
init|=
literal|false
decl_stmt|;
comment|/**      * Read from the initial buffer if it is set      */
annotation|@
name|Override
specifier|protected
name|int
name|readFromBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|readSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|doneInitBuffer
condition|)
block|{
if|if
condition|(
name|initBuffer
operator|==
literal|null
operator|||
name|initBuffer
operator|.
name|readSize
operator|<
literal|8
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Protocol type could not be determined."
argument_list|)
throw|;
block|}
if|if
condition|(
name|nextFrameSize
operator|==
operator|-
literal|1
condition|)
block|{
name|readSize
operator|=
literal|4
expr_stmt|;
name|this
operator|.
name|initBuffer
operator|.
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|currentBuffer
operator|.
name|put
argument_list|(
name|initBuffer
operator|.
name|buffer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|currentBuffer
operator|.
name|put
argument_list|(
name|initBuffer
operator|.
name|buffer
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|readSize
operator|=
literal|4
expr_stmt|;
name|doneInitBuffer
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|readSize
operator|+=
name|channel
operator|.
name|read
argument_list|(
name|currentBuffer
argument_list|)
expr_stmt|;
block|}
return|return
name|readSize
return|;
block|}
block|}
end_class

end_unit

