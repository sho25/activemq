begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|//Copyright 2003-2005 Arthur van Hoff, Rick Blair
end_comment

begin_comment
comment|//Licensed under Apache License version 2.0
end_comment

begin_comment
comment|//Original license LGPL
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * HostInfo information on the local host to be able to cope with change of addresses.  *  * @version %I%, %G%  * @author	Pierre Frisch, Werner Randelshofer  */
end_comment

begin_class
class|class
name|HostInfo
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|HostInfo
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|name
decl_stmt|;
specifier|protected
name|InetAddress
name|address
decl_stmt|;
specifier|protected
name|NetworkInterface
name|interfaze
decl_stmt|;
comment|/**      * This is used to create a unique name for the host name.      */
specifier|private
name|int
name|hostNameCount
decl_stmt|;
specifier|public
name|HostInfo
parameter_list|(
name|InetAddress
name|address
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|interfaze
operator|=
name|NetworkInterface
operator|.
name|getByInetAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
comment|// FIXME Shouldn't we take an action here?
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"LocalHostInfo() exception "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|InetAddress
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|NetworkInterface
name|getInterface
parameter_list|()
block|{
return|return
name|interfaze
return|;
block|}
specifier|synchronized
name|String
name|incrementHostName
parameter_list|()
block|{
name|hostNameCount
operator|++
expr_stmt|;
name|int
name|plocal
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|".local."
argument_list|)
decl_stmt|;
name|int
name|punder
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
name|punder
operator|==
operator|-
literal|1
condition|?
name|plocal
else|:
name|punder
operator|)
argument_list|)
operator|+
literal|"-"
operator|+
name|hostNameCount
operator|+
literal|".local."
expr_stmt|;
return|return
name|name
return|;
block|}
name|boolean
name|shouldIgnorePacket
parameter_list|(
name|DatagramPacket
name|packet
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|InetAddress
name|from
init|=
name|packet
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|from
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|from
operator|.
name|isLinkLocalAddress
argument_list|()
operator|&&
operator|(
operator|!
name|getAddress
argument_list|()
operator|.
name|isLinkLocalAddress
argument_list|()
operator|)
condition|)
block|{
comment|// Ignore linklocal packets on regular interfaces, unless this is
comment|// also a linklocal interface. This is to avoid duplicates. This is
comment|// a terrible hack caused by the lack of an API to get the address
comment|// of the interface on which the packet was received.
name|result
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|from
operator|.
name|isLoopbackAddress
argument_list|()
operator|&&
operator|(
operator|!
name|getAddress
argument_list|()
operator|.
name|isLoopbackAddress
argument_list|()
operator|)
condition|)
block|{
comment|// Ignore loopback packets on a regular interface unless this is
comment|// also a loopback interface.
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
name|DNSRecord
operator|.
name|Address
name|getDNSAddressRecord
parameter_list|(
name|DNSRecord
operator|.
name|Address
name|address
parameter_list|)
block|{
return|return
operator|(
name|DNSConstants
operator|.
name|TYPE_AAAA
operator|==
name|address
operator|.
name|type
condition|?
name|getDNS6AddressRecord
argument_list|()
else|:
name|getDNS4AddressRecord
argument_list|()
operator|)
return|;
block|}
name|DNSRecord
operator|.
name|Address
name|getDNS4AddressRecord
parameter_list|()
block|{
if|if
condition|(
operator|(
name|getAddress
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|(
name|getAddress
argument_list|()
operator|instanceof
name|Inet4Address
operator|)
operator|||
operator|(
operator|(
name|getAddress
argument_list|()
operator|instanceof
name|Inet6Address
operator|)
operator|&&
operator|(
operator|(
operator|(
name|Inet6Address
operator|)
name|getAddress
argument_list|()
operator|)
operator|.
name|isIPv4CompatibleAddress
argument_list|()
operator|)
operator|)
operator|)
condition|)
block|{
return|return
operator|new
name|DNSRecord
operator|.
name|Address
argument_list|(
name|getName
argument_list|()
argument_list|,
name|DNSConstants
operator|.
name|TYPE_A
argument_list|,
name|DNSConstants
operator|.
name|CLASS_IN
argument_list|,
name|DNSConstants
operator|.
name|DNS_TTL
argument_list|,
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
name|DNSRecord
operator|.
name|Address
name|getDNS6AddressRecord
parameter_list|()
block|{
if|if
condition|(
operator|(
name|getAddress
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|getAddress
argument_list|()
operator|instanceof
name|Inet6Address
operator|)
condition|)
block|{
return|return
operator|new
name|DNSRecord
operator|.
name|Address
argument_list|(
name|getName
argument_list|()
argument_list|,
name|DNSConstants
operator|.
name|TYPE_AAAA
argument_list|,
name|DNSConstants
operator|.
name|CLASS_IN
argument_list|,
name|DNSConstants
operator|.
name|DNS_TTL
argument_list|,
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"local host info["
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getName
argument_list|()
operator|!=
literal|null
condition|?
name|getName
argument_list|()
else|:
literal|"no name"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getInterface
argument_list|()
operator|!=
literal|null
condition|?
name|getInterface
argument_list|()
operator|.
name|getDisplayName
argument_list|()
else|:
literal|"???"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getAddress
argument_list|()
operator|!=
literal|null
condition|?
name|getAddress
argument_list|()
operator|.
name|getHostAddress
argument_list|()
else|:
literal|"no address"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

