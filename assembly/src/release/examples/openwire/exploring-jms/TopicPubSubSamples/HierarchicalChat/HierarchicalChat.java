begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * © 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.   Sample Application  Writing a JMS Application using Publish and Subscribe with Hierarchical Topics  This sample publishes and subscribes to specified topic nodes. Text you enter is published and then received by all subscribers to the that topic on the specified broker.  Usage:   java HierarchicalChat -b<broker:port> -u<username> -p<password> -t<pubTopicname> -s<subTopicname>       -b broker:port        points to a message broker                             Default: tcp://localhost:61616       -u username           must be unique (but is not checked)       -p password           password for user (not checked)       -t pubTopicname     	name of topic to which to publish                             Default: jms.samples.hierarchicalchat       -s subTopicname	    name of topic to which to subscribe                             Default: jms.samples.*  Suggested demonstration:   - In separate console windows with the environment set,     start instances of the application     under unique user names.     For example:        java HierarchicalChat -u SALES -t sales -s sales.*        java HierarchicalChat -u USA -t sales.usa -s sales.usa   - Enter text in the USA console window and then press Enter     to publish the message.   - Note that messages published from the SALES console window     to the sales topic are not seen by the USA user listening     to messages on the sales.usa topic   - Message published to the sales.usa are received by the SALES     user listening to sales.*   - Stop a session by pressing CTRL+C in its console window.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|HierarchicalChat
implements|implements
name|javax
operator|.
name|jms
operator|.
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PUBLISHER_TOPIC
init|=
literal|"jms.samples.hierarchicalchat"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SUBSCRIBER_TOPIC
init|=
literal|"jms.samples.*"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SUBSCRIBER_ROOT
init|=
literal|"jms.samples"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_BROKER_NAME
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connect
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Session
name|pubSession
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Session
name|subSession
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
name|publisher
init|=
literal|null
decl_stmt|;
comment|/** Create JMS client for publishing and subscribing to messages. */
specifier|private
name|void
name|chatter
parameter_list|(
name|String
name|broker
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|pubTopicname
parameter_list|,
name|String
name|subTopicname
parameter_list|)
block|{
comment|// Create a connection.
try|try
block|{
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
name|factory
decl_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|connect
operator|=
name|factory
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|pubSession
operator|=
name|connect
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|subSession
operator|=
name|connect
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: Cannot connect to Broker - "
operator|+
name|broker
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Create Publisher and Subscriber to 'chat' topics
comment|// Note that the publish and subscribe topics are different.
try|try
block|{
name|javax
operator|.
name|jms
operator|.
name|Topic
name|subscriberTopic
init|=
name|pubSession
operator|.
name|createTopic
argument_list|(
name|subTopicname
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
name|subscriber
init|=
name|subSession
operator|.
name|createConsumer
argument_list|(
name|subscriberTopic
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|subscriber
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Topic
name|publisherTopic
init|=
name|pubSession
operator|.
name|createTopic
argument_list|(
name|pubTopicname
argument_list|)
decl_stmt|;
name|publisher
operator|=
name|pubSession
operator|.
name|createProducer
argument_list|(
name|publisherTopic
argument_list|)
expr_stmt|;
comment|// Now that setup is complete, start the Connection
name|connect
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
comment|// Read all standard input and send it as a message.
name|java
operator|.
name|io
operator|.
name|BufferedReader
name|stdin
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedReader
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nHierarchicalChat application:\n"
operator|+
literal|"============================\n"
operator|+
literal|"The application user "
operator|+
name|username
operator|+
literal|" connects to the broker at "
operator|+
name|DEFAULT_BROKER_NAME
operator|+
literal|".\n"
operator|+
literal|"The application will publish messages to the "
operator|+
name|DEFAULT_PUBLISHER_TOPIC
operator|+
literal|" topic."
operator|+
literal|".\n"
operator|+
literal|"The application also subscribes to topics using the wildcard syntax "
operator|+
name|DEFAULT_SUBSCRIBER_TOPIC
operator|+
literal|" so that it can receive all messages to "
operator|+
name|DEFAULT_SUBSCRIBER_ROOT
operator|+
literal|" and its subtopics.\n\n"
operator|+
literal|"Type some text, and then press Enter to publish a TextMesssage from "
operator|+
name|username
operator|+
literal|".\n"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|s
init|=
name|stdin
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|exit
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|javax
operator|.
name|jms
operator|.
name|TextMessage
name|msg
init|=
name|pubSession
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setText
argument_list|(
name|username
operator|+
literal|": "
operator|+
name|s
argument_list|)
expr_stmt|;
name|publisher
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Handle the message      * (as specified in the javax.jms.MessageListener interface).      */
specifier|public
name|void
name|onMessage
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|aMessage
parameter_list|)
block|{
try|try
block|{
comment|// Cast the message as a text message.
name|javax
operator|.
name|jms
operator|.
name|TextMessage
name|textMessage
init|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|TextMessage
operator|)
name|aMessage
decl_stmt|;
comment|// This handler reads a single String from the
comment|// message and prints it to the standard output.
try|try
block|{
name|String
name|string
init|=
name|textMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|RuntimeException
name|rte
parameter_list|)
block|{
name|rte
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Cleanup resources and then exit. */
specifier|private
name|void
name|exit
parameter_list|()
block|{
try|try
block|{
name|connect
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// NOTE: the remainder of this sample deals with reading arguments
comment|// and does not utilize any JMS classes or code.
comment|//
comment|/** Main program entry point. */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
block|{
comment|// Is there anything to do?
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Values to be read from parameters
name|String
name|broker
init|=
name|DEFAULT_BROKER_NAME
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
name|DEFAULT_PASSWORD
decl_stmt|;
name|String
name|pubTopicname
init|=
name|DEFAULT_PUBLISHER_TOPIC
decl_stmt|;
name|String
name|subTopicname
init|=
name|DEFAULT_SUBSCRIBER_TOPIC
decl_stmt|;
comment|// Check parameters
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
comment|// Options
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: unexpected argument - "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-b"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing broker name:port"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|broker
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-u"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing user name"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|username
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-p"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing password"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|password
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-t"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing publisher topic name"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|pubTopicname
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-s"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing subscriber topic name"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|subTopicname
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check values read in.
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: user name must be supplied"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
block|}
comment|// Start the JMS client for the "chat".
name|HierarchicalChat
name|chat
init|=
operator|new
name|HierarchicalChat
argument_list|()
decl_stmt|;
name|chat
operator|.
name|chatter
argument_list|(
name|broker
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|pubTopicname
argument_list|,
name|subTopicname
argument_list|)
expr_stmt|;
block|}
comment|/** Prints the usage. */
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|StringBuffer
name|use
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"usage: java HierarchicalChat (options) ...\n\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"options:\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -b name:port          Specify name:port of broker.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                        Default broker: "
operator|+
name|DEFAULT_BROKER_NAME
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -u name               Specify unique user name. (Required)\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -p password           Specify password for user.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                        Default password: "
operator|+
name|DEFAULT_PASSWORD
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -t pubTopicname       name of topic to which to publish.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                        Default publisher topic name: "
operator|+
name|DEFAULT_PUBLISHER_TOPIC
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -s subTopicname       Specify subscriber topic name.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                        name of topic to which to subscribe: "
operator|+
name|DEFAULT_SUBSCRIBER_TOPIC
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -h                    This help screen.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|use
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

