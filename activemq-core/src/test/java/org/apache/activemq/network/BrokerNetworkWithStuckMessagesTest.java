begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|StubConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class duplicates most of the functionality in {@link NetworkTestSupport}   * and {@link BrokerTestSupport} because more control was needed over how brokers   * and connectors are created. Also, this test asserts message counts via JMX on   * each broker.   *   * @author bsnyder  *  */
end_comment

begin_class
specifier|public
class|class
name|BrokerNetworkWithStuckMessagesTest
extends|extends
name|TestCase
comment|/*NetworkTestSupport*/
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BrokerNetworkWithStuckMessagesTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerService
name|localBroker
decl_stmt|;
specifier|private
name|BrokerService
name|remoteBroker
decl_stmt|;
specifier|private
name|DemandForwardingBridge
name|bridge
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|BrokerService
argument_list|>
name|brokers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|BrokerService
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ArrayList
name|connections
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|TransportConnector
name|connector
decl_stmt|;
specifier|protected
name|TransportConnector
name|remoteConnector
decl_stmt|;
specifier|protected
name|long
name|idGenerator
decl_stmt|;
specifier|protected
name|int
name|msgIdGenerator
decl_stmt|;
specifier|protected
name|int
name|tempDestGenerator
decl_stmt|;
specifier|protected
name|int
name|maxWait
init|=
literal|4000
decl_stmt|;
specifier|protected
name|String
name|queueName
init|=
literal|"TEST"
decl_stmt|;
specifier|protected
name|String
name|amqDomain
init|=
literal|"org.apache.activemq"
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// For those who want visual confirmation:
comment|//   Uncomment the following to enable JMX support on a port number to use
comment|//   Jconsole to view each broker. You will need to add some calls to
comment|//   Thread.sleep() to be able to actually slow things down so that you
comment|//   can manually see JMX attrs.
comment|//        System.setProperty("com.sun.management.jmxremote", "");
comment|//        System.setProperty("com.sun.management.jmxremote.port", "1099");
comment|//        System.setProperty("com.sun.management.jmxremote.authenticate", "false");
comment|//        System.setProperty("com.sun.management.jmxremote.ssl", "false");
comment|// Create the local broker
name|createBroker
argument_list|()
expr_stmt|;
comment|// Create the remote broker
name|createRemoteBroker
argument_list|()
expr_stmt|;
comment|// Remove the activemq-data directory from the creation of the remote broker
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"activemq-data"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a network bridge between the local and remote brokers so that
comment|// demand-based forwarding can take place
name|NetworkBridgeConfiguration
name|config
init|=
operator|new
name|NetworkBridgeConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setBrokerName
argument_list|(
literal|"local"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Transport
name|localTransport
init|=
name|createTransport
argument_list|()
decl_stmt|;
name|Transport
name|remoteTransport
init|=
name|createRemoteTransport
argument_list|()
decl_stmt|;
comment|// Create a network bridge between the two brokers
name|bridge
operator|=
operator|new
name|DemandForwardingBridge
argument_list|(
name|config
argument_list|,
name|localTransport
argument_list|,
name|remoteTransport
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|setBrokerService
argument_list|(
name|localBroker
argument_list|)
expr_stmt|;
name|bridge
operator|.
name|start
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForBridgeFormation
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
specifier|final
name|BrokerService
name|broker
range|:
name|brokers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|broker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Max wait here is 30 secs
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|broker
operator|.
name|getNetworkConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|activeBridges
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|bridge
operator|.
name|stop
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testBrokerNetworkWithStuckMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|sendNumMessages
init|=
literal|10
decl_stmt|;
name|int
name|receiveNumMessages
init|=
literal|5
decl_stmt|;
comment|// Create a producer
name|StubConnection
name|connection1
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|producerInfo
argument_list|)
expr_stmt|;
comment|// Create a destination on the local broker
name|ActiveMQDestination
name|destinationInfo1
init|=
literal|null
decl_stmt|;
comment|// Send a 10 messages to the local broker
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sendNumMessages
condition|;
operator|++
name|i
control|)
block|{
name|destinationInfo1
operator|=
name|createDestinationInfo
argument_list|(
name|connection1
argument_list|,
name|connectionInfo1
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destinationInfo1
argument_list|,
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that there are 10 messages on the local broker
name|Object
index|[]
name|messages
init|=
name|browseQueueWithJmx
argument_list|(
name|localBroker
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|sendNumMessages
argument_list|,
name|messages
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Create a synchronous consumer on the remote broker
specifier|final
name|StubConnection
name|connection2
init|=
name|createRemoteConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|destinationInfo2
init|=
name|createDestinationInfo
argument_list|(
name|connection2
argument_list|,
name|connectionInfo2
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
decl_stmt|;
specifier|final
name|ConsumerInfo
name|consumerInfo2
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destinationInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
argument_list|)
expr_stmt|;
comment|// Consume 5 of the messages from the remote broker and ack them.
comment|// Because the prefetch size is set to 1000 in the createConsumerInfo()
comment|// method, this will cause the messages on the local broker to be
comment|// forwarded to the remote broker.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|receiveNumMessages
condition|;
operator|++
name|i
control|)
block|{
name|Message
name|message1
init|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message1
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo2
argument_list|,
name|message1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|Object
index|[]
name|msgs1
init|=
name|browseQueueWithJmx
argument_list|(
name|remoteBroker
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found ["
operator|+
name|msgs1
operator|.
name|length
operator|+
literal|"] messages with JMX"
argument_list|)
expr_stmt|;
comment|//            assertEquals((sendNumMessages-i), msgs.length);
block|}
comment|// Ensure that there are zero messages on the local broker. This tells
comment|// us that those messages have been prefetched to the remote broker
comment|// where the demand exists.
name|messages
operator|=
name|browseQueueWithJmx
argument_list|(
name|localBroker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|messages
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Close the consumer on the remote broker
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo2
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should now be 5 messages stuck on the remote broker
name|messages
operator|=
name|browseQueueWithJmx
argument_list|(
name|remoteBroker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|messages
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Create a consumer on the local broker just to confirm that it doesn't
comment|// receive any messages
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destinationInfo1
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
name|Message
name|message1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
comment|//////////////////////////////////////////////////////
comment|// An assertNull() is done here because this is currently the correct
comment|// behavior. This is actually the purpose of this test - to prove that
comment|// messages are stuck on the remote broker. AMQ-2324 and AMQ-2484 aim
comment|// to fix this situation so that messages don't get stuck.
name|assertNull
argument_list|(
name|message1
argument_list|)
expr_stmt|;
comment|//////////////////////////////////////////////////////
name|ConsumerInfo
name|consumerInfo3
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo2
argument_list|,
name|destinationInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo3
argument_list|)
expr_stmt|;
comment|// Consume the last 5 messages from the remote broker and ack them just
comment|// to clean up the queue.
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|receiveNumMessages
condition|;
operator|++
name|i
control|)
block|{
name|message1
operator|=
name|receiveMessage
argument_list|(
name|connection2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message1
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo3
argument_list|,
name|message1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|counter
expr_stmt|;
block|}
comment|// Ensure that 5 messages were received
name|assertEquals
argument_list|(
name|receiveNumMessages
argument_list|,
name|counter
argument_list|)
expr_stmt|;
comment|// Let those acks percolate... This stinks but it's the only way currently
comment|// because these types of internal broker actions are non-deterministic.
name|Thread
operator|.
name|sleep
argument_list|(
literal|4000
argument_list|)
expr_stmt|;
comment|// Ensure that the queue on the remote broker is empty
name|messages
operator|=
name|browseQueueWithJmx
argument_list|(
name|remoteBroker
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|messages
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Close the consumer on the remote broker
name|connection2
operator|.
name|send
argument_list|(
name|consumerInfo3
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|localBroker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|setBrokerName
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setPersistenceAdapter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|=
name|createConnector
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|setConnectorPort
argument_list|(
literal|2221
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|put
argument_list|(
name|localBroker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|localBroker
argument_list|)
expr_stmt|;
return|return
name|localBroker
return|;
block|}
specifier|protected
name|BrokerService
name|createRemoteBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|remoteBroker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|setBrokerName
argument_list|(
literal|"remotehost"
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setPersistenceAdapter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|remoteConnector
operator|=
name|createRemoteConnector
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|addConnector
argument_list|(
name|remoteConnector
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|setConnectorPort
argument_list|(
literal|2222
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|put
argument_list|(
name|remoteBroker
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|remoteBroker
argument_list|)
expr_stmt|;
return|return
name|remoteBroker
return|;
block|}
specifier|protected
name|Transport
name|createTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|Transport
name|transport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
name|connector
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|transport
return|;
block|}
specifier|protected
name|Transport
name|createRemoteTransport
parameter_list|()
throws|throws
name|Exception
block|{
name|Transport
name|transport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
name|remoteConnector
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|transport
return|;
block|}
specifier|protected
name|TransportConnector
name|createConnector
parameter_list|()
throws|throws
name|Exception
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
operator|new
name|TransportConnector
argument_list|(
name|TransportFactory
operator|.
name|bind
argument_list|(
operator|new
name|URI
argument_list|(
name|getLocalURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|TransportConnector
name|createRemoteConnector
parameter_list|()
throws|throws
name|Exception
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
operator|new
name|TransportConnector
argument_list|(
name|TransportFactory
operator|.
name|bind
argument_list|(
operator|new
name|URI
argument_list|(
name|getRemoteURI
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getRemoteURI
parameter_list|()
block|{
return|return
literal|"vm://remotehost"
return|;
block|}
specifier|protected
name|String
name|getLocalURI
parameter_list|()
block|{
return|return
literal|"vm://localhost"
return|;
block|}
specifier|protected
name|StubConnection
name|createConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Transport
name|transport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
name|connector
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
argument_list|)
decl_stmt|;
name|StubConnection
name|connection
init|=
operator|new
name|StubConnection
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|protected
name|StubConnection
name|createRemoteConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Transport
name|transport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
name|remoteConnector
operator|.
name|getServer
argument_list|()
operator|.
name|getConnectURI
argument_list|()
argument_list|)
decl_stmt|;
name|StubConnection
name|connection
init|=
operator|new
name|StubConnection
argument_list|(
name|transport
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Object
index|[]
name|browseQueueWithJms
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
index|[]
name|messages
init|=
literal|null
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URI
name|brokerUri
init|=
name|connector
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|connectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerUri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Message
argument_list|>
name|enumn
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
init|;
name|enumn
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|enumn
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|messages
operator|=
name|list
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"+Browsed with JMS: "
operator|+
name|messages
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|messages
return|;
block|}
specifier|private
name|Object
index|[]
name|browseQueueWithJmx
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"BrokerName"
argument_list|,
name|broker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"Type"
argument_list|,
literal|"Queue"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"Destination"
argument_list|,
name|queueName
argument_list|)
expr_stmt|;
name|ObjectName
name|queueObjectName
init|=
name|ObjectName
operator|.
name|getInstance
argument_list|(
name|amqDomain
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|ManagementContext
name|mgmtCtx
init|=
name|broker
operator|.
name|getManagementContext
argument_list|()
decl_stmt|;
name|QueueViewMBean
name|queueView
init|=
operator|(
name|QueueViewMBean
operator|)
name|mgmtCtx
operator|.
name|newProxyInstance
argument_list|(
name|queueObjectName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Object
index|[]
name|messages
init|=
operator|(
name|Object
index|[]
operator|)
name|queueView
operator|.
name|browse
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"+Browsed with JMX: "
operator|+
name|messages
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|messages
return|;
block|}
specifier|protected
name|ConnectionInfo
name|createConnectionInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionInfo
name|info
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
operator|new
name|ConnectionId
argument_list|(
literal|"connection:"
operator|+
operator|(
operator|++
name|idGenerator
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|SessionInfo
name|createSessionInfo
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|SessionInfo
name|info
init|=
operator|new
name|SessionInfo
argument_list|(
name|connectionInfo
argument_list|,
operator|++
name|idGenerator
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|ProducerInfo
name|createProducerInfo
parameter_list|(
name|SessionInfo
name|sessionInfo
parameter_list|)
throws|throws
name|Exception
block|{
name|ProducerInfo
name|info
init|=
operator|new
name|ProducerInfo
argument_list|(
name|sessionInfo
argument_list|,
operator|++
name|idGenerator
argument_list|)
decl_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|ConsumerInfo
name|createConsumerInfo
parameter_list|(
name|SessionInfo
name|sessionInfo
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Exception
block|{
name|ConsumerInfo
name|info
init|=
operator|new
name|ConsumerInfo
argument_list|(
name|sessionInfo
argument_list|,
operator|++
name|idGenerator
argument_list|)
decl_stmt|;
name|info
operator|.
name|setBrowser
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|info
operator|.
name|setPrefetchSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|DestinationInfo
name|createTempDestinationInfo
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|,
name|byte
name|destinationType
parameter_list|)
block|{
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|connectionInfo
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
operator|+
literal|":"
operator|+
operator|(
operator|++
name|tempDestGenerator
operator|)
argument_list|,
name|destinationType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|ActiveMQDestination
name|createDestinationInfo
parameter_list|(
name|StubConnection
name|connection
parameter_list|,
name|ConnectionInfo
name|connectionInfo1
parameter_list|,
name|byte
name|destinationType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|(
name|destinationType
operator|&
name|ActiveMQDestination
operator|.
name|TEMP_MASK
operator|)
operator|!=
literal|0
condition|)
block|{
name|DestinationInfo
name|info
init|=
name|createTempDestinationInfo
argument_list|(
name|connectionInfo1
argument_list|,
name|destinationType
argument_list|)
decl_stmt|;
name|connection
operator|.
name|send
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|info
operator|.
name|getDestination
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|queueName
argument_list|,
name|destinationType
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|ProducerInfo
name|producerInfo
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|int
name|deliveryMode
parameter_list|)
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|producerInfo
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
name|deliveryMode
operator|==
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|ProducerInfo
name|producerInfo
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|ActiveMQTextMessage
name|message
init|=
operator|new
name|ActiveMQTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|producerInfo
argument_list|,
operator|++
name|msgIdGenerator
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|message
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|.
name|setText
argument_list|(
literal|"Test Message Payload."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MessageNotWriteableException
name|e
parameter_list|)
block|{         }
return|return
name|message
return|;
block|}
specifier|protected
name|MessageAck
name|createAck
parameter_list|(
name|ConsumerInfo
name|consumerInfo
parameter_list|,
name|Message
name|msg
parameter_list|,
name|int
name|count
parameter_list|,
name|byte
name|ackType
parameter_list|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
name|ackType
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setConsumerId
argument_list|(
name|consumerInfo
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setDestination
argument_list|(
name|msg
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setLastMessageId
argument_list|(
name|msg
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
return|return
name|ack
return|;
block|}
specifier|public
name|Message
name|receiveMessage
parameter_list|(
name|StubConnection
name|connection
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|receiveMessage
argument_list|(
name|connection
argument_list|,
name|maxWait
argument_list|)
return|;
block|}
specifier|public
name|Message
name|receiveMessage
parameter_list|(
name|StubConnection
name|connection
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Object
name|o
init|=
name|connection
operator|.
name|getDispatchQueue
argument_list|()
operator|.
name|poll
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|MessageDispatch
condition|)
block|{
name|MessageDispatch
name|dispatch
init|=
operator|(
name|MessageDispatch
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|dispatch
operator|.
name|setMessage
argument_list|(
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|.
name|setRedeliveryCounter
argument_list|(
name|dispatch
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dispatch
operator|.
name|getMessage
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

