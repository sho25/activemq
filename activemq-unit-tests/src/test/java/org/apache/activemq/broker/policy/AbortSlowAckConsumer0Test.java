begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|policy
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|AbortSlowAckConsumerStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|BlockJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|BlockJUnit4ClassRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|AbortSlowAckConsumer0Test
extends|extends
name|AbortSlowConsumer0Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbortSlowAckConsumer0Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|maxTimeSinceLastAck
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
name|AbortSlowAckConsumerStrategy
name|strategy
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|AbortSlowAckConsumerStrategy
name|createSlowConsumerStrategy
parameter_list|()
block|{
name|AbortSlowAckConsumerStrategy
name|strategy
init|=
operator|new
name|AbortSlowAckConsumerStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setAbortConnection
argument_list|(
name|abortConnection
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setCheckPeriod
argument_list|(
name|checkPeriod
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setMaxSlowDuration
argument_list|(
name|maxSlowDuration
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setMaxTimeSinceLastAck
argument_list|(
name|maxTimeSinceLastAck
argument_list|)
expr_stmt|;
return|return
name|strategy
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
name|super
operator|.
name|createBroker
argument_list|()
decl_stmt|;
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|strategy
operator|=
name|createSlowConsumerStrategy
argument_list|()
expr_stmt|;
name|underTest
operator|=
name|strategy
expr_stmt|;
name|policy
operator|.
name|setSlowConsumerStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setQueuePrefetch
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setTopicPrefetch
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|PolicyMap
name|pMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|pMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|pMap
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
decl_stmt|;
name|factory
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|setAll
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testSlowConsumerIsAbortedViaJmx
parameter_list|()
throws|throws
name|Exception
block|{
name|strategy
operator|.
name|setMaxTimeSinceLastAck
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// so jmx does the abort
name|super
operator|.
name|testSlowConsumerIsAbortedViaJmx
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZeroPrefetchConsumerIsAborted
parameter_list|()
throws|throws
name|Exception
block|{
name|strategy
operator|.
name|setMaxTimeSinceLastAck
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Make it shorter
name|ActiveMQConnection
name|conn
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setExceptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|startProducers
argument_list|(
name|destination
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|15
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Slow consumer not aborted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIdleConsumerCanBeAbortedNoMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|strategy
operator|.
name|setIgnoreIdleConsumers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setMaxTimeSinceLastAck
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Make it shorter
name|ActiveMQConnection
name|conn
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setExceptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|startProducers
argument_list|(
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Consumer needs to be closed before the reeive call.
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|15
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Idle consumer not aborted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIdleConsumerCanBeAborted
parameter_list|()
throws|throws
name|Exception
block|{
name|AbortSlowAckConsumerStrategy
name|strategy
init|=
name|createSlowConsumerStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setIgnoreIdleConsumers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|strategy
operator|.
name|setMaxTimeSinceLastAck
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Make it shorter
name|ActiveMQConnection
name|conn
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setExceptionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|Session
name|sess
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|MessageConsumer
name|consumer
init|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|startProducers
argument_list|(
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
comment|// Consumer needs to be closed before the reeive call.
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|15
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Idle consumer not aborted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

