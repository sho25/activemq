begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * A {@link DefaultAuthorizationMap} implementation which uses LDAP to initialize and update  *  * @org.apache.xbean.XBean  *  */
end_comment

begin_class
specifier|public
class|class
name|CachedLDAPAuthorizationMap
extends|extends
name|DefaultAuthorizationMap
implements|implements
name|NamespaceChangeListener
implements|,
name|ObjectChangeListener
implements|,
name|InitializingBean
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedLDAPAuthorizationMap
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|initialContextFactory
init|=
literal|"com.sun.jndi.ldap.LdapCtxFactory"
decl_stmt|;
specifier|private
name|String
name|connectionURL
init|=
literal|"ldap://localhost:1024"
decl_stmt|;
specifier|private
name|String
name|connectionUsername
init|=
literal|"uid=admin,ou=system"
decl_stmt|;
specifier|private
name|String
name|connectionPassword
init|=
literal|"secret"
decl_stmt|;
specifier|private
name|String
name|connectionProtocol
init|=
literal|"s"
decl_stmt|;
specifier|private
name|String
name|authentication
init|=
literal|"simple"
decl_stmt|;
specifier|private
name|String
name|baseDn
init|=
literal|"ou=system"
decl_stmt|;
specifier|private
name|int
name|cnsLength
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|refreshInterval
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|lastUpdated
decl_stmt|;
specifier|private
specifier|static
name|String
name|ANY_DESCENDANT
init|=
literal|"\\$"
decl_stmt|;
specifier|private
name|DirContext
name|context
decl_stmt|;
specifier|private
name|EventDirContext
name|eventContext
decl_stmt|;
specifier|protected
name|DirContext
name|open
parameter_list|()
throws|throws
name|NamingException
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
return|return
name|context
return|;
block|}
try|try
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
name|initialContextFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionUsername
operator|!=
literal|null
operator|||
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|connectionUsername
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PRINCIPAL
argument_list|,
name|connectionUsername
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectionPassword
operator|!=
literal|null
operator|||
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|connectionPassword
argument_list|)
condition|)
block|{
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_CREDENTIALS
argument_list|,
name|connectionPassword
argument_list|)
expr_stmt|;
block|}
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_PROTOCOL
argument_list|,
name|connectionProtocol
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|connectionURL
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
name|authentication
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|InitialDirContext
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|refreshInterval
operator|==
operator|-
literal|1
condition|)
block|{
name|eventContext
operator|=
operator|(
operator|(
name|EventDirContext
operator|)
name|context
operator|.
name|lookup
argument_list|(
literal|""
argument_list|)
operator|)
expr_stmt|;
specifier|final
name|SearchControls
name|constraints
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|constraints
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Listening for: "
operator|+
literal|"'ou=Destination,ou=ActiveMQ,"
operator|+
name|baseDn
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|eventContext
operator|.
name|addNamingListener
argument_list|(
literal|"ou=Destination,ou=ActiveMQ,"
operator|+
name|baseDn
argument_list|,
literal|"cn=*"
argument_list|,
name|constraints
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|context
return|;
block|}
name|HashMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|AuthorizationEntry
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|AuthorizationEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|query
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|context
operator|=
name|open
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SearchControls
name|constraints
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|constraints
operator|.
name|setSearchScope
argument_list|(
name|SearchControls
operator|.
name|SUBTREE_SCOPE
argument_list|)
expr_stmt|;
name|NamingEnumeration
name|results
init|=
name|context
operator|.
name|search
argument_list|(
literal|"ou=Destination,ou=ActiveMQ,"
operator|+
name|baseDn
argument_list|,
literal|"(|(cn=admin)(cn=write)(cn=read))"
argument_list|,
name|constraints
argument_list|)
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMore
argument_list|()
condition|)
block|{
name|SearchResult
name|result
init|=
operator|(
name|SearchResult
operator|)
name|results
operator|.
name|next
argument_list|()
decl_stmt|;
name|AuthorizationEntry
name|entry
init|=
name|getEntry
argument_list|(
name|result
operator|.
name|getNameInNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|applyACL
argument_list|(
name|entry
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|setEntries
argument_list|(
operator|new
name|ArrayList
argument_list|(
name|entries
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updated
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|updated
parameter_list|()
block|{
name|lastUpdated
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|AuthorizationEntry
name|getEntry
parameter_list|(
name|String
name|name
parameter_list|)
block|{
empty_stmt|;
name|String
index|[]
name|cns
init|=
name|name
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
comment|// handle temp entry
if|if
condition|(
name|cns
operator|.
name|length
operator|==
name|cnsLength
operator|&&
name|cns
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"ou=Temp"
argument_list|)
condition|)
block|{
name|TempDestinationAuthorizationEntry
name|tempEntry
init|=
name|getTempDestinationAuthorizationEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|tempEntry
operator|==
literal|null
condition|)
block|{
name|tempEntry
operator|=
operator|new
name|TempDestinationAuthorizationEntry
argument_list|()
expr_stmt|;
name|setTempDestinationAuthorizationEntry
argument_list|(
name|tempEntry
argument_list|)
expr_stmt|;
block|}
return|return
name|tempEntry
return|;
block|}
comment|// handle regular destinations
if|if
condition|(
name|cns
operator|.
name|length
operator|!=
operator|(
name|cnsLength
operator|+
literal|1
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Policy not applied! Wrong cn for authorization entry "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
name|ActiveMQDestination
name|dest
init|=
name|formatDestination
argument_list|(
name|cns
index|[
literal|1
index|]
argument_list|,
name|cns
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
name|AuthorizationEntry
name|entry
init|=
name|entries
operator|.
name|get
argument_list|(
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|AuthorizationEntry
argument_list|()
expr_stmt|;
name|entry
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|dest
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|ActiveMQDestination
name|formatDestination
parameter_list|(
name|String
name|destinationName
parameter_list|,
name|String
name|destinationType
parameter_list|)
block|{
name|ActiveMQDestination
name|dest
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|destinationType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ou=queue"
argument_list|)
condition|)
block|{
name|dest
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
name|formatDestinationName
argument_list|(
name|destinationName
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destinationType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ou=topic"
argument_list|)
condition|)
block|{
name|dest
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|formatDestinationName
argument_list|(
name|destinationName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Policy not applied! Unknown destination type "
operator|+
name|destinationType
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
specifier|protected
name|void
name|applyACL
parameter_list|(
name|AuthorizationEntry
name|entry
parameter_list|,
name|SearchResult
name|result
parameter_list|)
throws|throws
name|NamingException
block|{
comment|// find members
name|Attribute
name|cn
init|=
name|result
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"cn"
argument_list|)
decl_stmt|;
name|Attribute
name|member
init|=
name|result
operator|.
name|getAttributes
argument_list|()
operator|.
name|get
argument_list|(
literal|"member"
argument_list|)
decl_stmt|;
name|NamingEnumeration
name|memberEnum
init|=
name|member
operator|.
name|getAll
argument_list|()
decl_stmt|;
name|HashSet
name|members
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|memberEnum
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|elem
init|=
operator|(
name|String
operator|)
name|memberEnum
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|members
operator|.
name|add
argument_list|(
operator|new
name|GroupPrincipal
argument_list|(
name|elem
operator|.
name|replaceAll
argument_list|(
literal|"cn="
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// apply privilege
if|if
condition|(
name|cn
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
literal|"admin"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setAdminACLs
argument_list|(
name|members
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cn
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
literal|"write"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setWriteACLs
argument_list|(
name|members
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cn
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
literal|"read"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setReadACLs
argument_list|(
name|members
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Policy not applied! Unknown privilege "
operator|+
name|result
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|formatDestinationName
parameter_list|(
name|String
name|cn
parameter_list|)
block|{
return|return
name|cn
operator|.
name|replaceFirst
argument_list|(
literal|"cn="
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
name|ANY_DESCENDANT
argument_list|,
literal|">"
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isPriviledge
parameter_list|(
name|Binding
name|binding
parameter_list|)
block|{
name|String
name|name
init|=
name|binding
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"cn=admin"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"cn=write"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"cn=read"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Set
argument_list|<
name|AuthorizationEntry
argument_list|>
name|getAllEntries
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
if|if
condition|(
name|refreshInterval
operator|!=
operator|-
literal|1
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lastUpdated
operator|+
name|refreshInterval
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
name|entries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Updating authorization map!"
argument_list|)
expr_stmt|;
try|try
block|{
name|query
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error updating authorization map"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|getAllEntries
argument_list|(
name|destination
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|objectAdded
parameter_list|(
name|NamingEvent
name|namingEvent
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding object: "
operator|+
name|namingEvent
operator|.
name|getNewBinding
argument_list|()
argument_list|)
expr_stmt|;
name|SearchResult
name|result
init|=
operator|(
name|SearchResult
operator|)
name|namingEvent
operator|.
name|getNewBinding
argument_list|()
decl_stmt|;
name|String
name|cn
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isPriviledge
argument_list|(
name|result
argument_list|)
condition|)
return|return;
name|AuthorizationEntry
name|entry
init|=
name|getEntry
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|applyACL
argument_list|(
name|entry
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|entry
operator|instanceof
name|TempDestinationAuthorizationEntry
operator|)
condition|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getDestination
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|ne
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to add entry"
argument_list|,
name|ne
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|objectRemoved
parameter_list|(
name|NamingEvent
name|namingEvent
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Removing object: "
operator|+
name|namingEvent
operator|.
name|getOldBinding
argument_list|()
argument_list|)
expr_stmt|;
name|Binding
name|result
init|=
name|namingEvent
operator|.
name|getOldBinding
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isPriviledge
argument_list|(
name|result
argument_list|)
condition|)
return|return;
name|AuthorizationEntry
name|entry
init|=
name|getEntry
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|cns
init|=
name|result
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isPriviledge
argument_list|(
name|result
argument_list|)
condition|)
return|return;
if|if
condition|(
name|cns
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cn=admin"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setAdminACLs
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cns
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cn=write"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setWriteACLs
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cns
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cn=read"
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setReadACLs
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Policy not removed! Unknown privilege "
operator|+
name|result
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|objectRenamed
parameter_list|(
name|NamingEvent
name|namingEvent
parameter_list|)
block|{
name|Binding
name|oldBinding
init|=
name|namingEvent
operator|.
name|getOldBinding
argument_list|()
decl_stmt|;
name|Binding
name|newBinding
init|=
name|namingEvent
operator|.
name|getNewBinding
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renaming object: "
operator|+
name|oldBinding
operator|+
literal|" to "
operator|+
name|newBinding
argument_list|)
expr_stmt|;
name|String
index|[]
name|oldCns
init|=
name|oldBinding
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|oldDest
init|=
name|formatDestination
argument_list|(
name|oldCns
index|[
literal|0
index|]
argument_list|,
name|oldCns
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|String
index|[]
name|newCns
init|=
name|newBinding
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|newDest
init|=
name|formatDestination
argument_list|(
name|newCns
index|[
literal|0
index|]
argument_list|,
name|newCns
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldDest
operator|!=
literal|null
operator|&&
name|newDest
operator|!=
literal|null
condition|)
block|{
name|AuthorizationEntry
name|entry
init|=
name|entries
operator|.
name|remove
argument_list|(
name|oldDest
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|setDestination
argument_list|(
name|newDest
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|newDest
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|remove
argument_list|(
name|oldDest
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"No authorization entry for "
operator|+
name|oldDest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|objectChanged
parameter_list|(
name|NamingEvent
name|namingEvent
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Changing object "
operator|+
name|namingEvent
operator|.
name|getOldBinding
argument_list|()
operator|+
literal|" to "
operator|+
name|namingEvent
operator|.
name|getNewBinding
argument_list|()
argument_list|)
expr_stmt|;
name|objectRemoved
argument_list|(
name|namingEvent
argument_list|)
expr_stmt|;
name|objectAdded
argument_list|(
name|namingEvent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|namingExceptionThrown
parameter_list|(
name|NamingExceptionEvent
name|namingExceptionEvent
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Caught Unexpected Exception"
argument_list|,
name|namingExceptionEvent
operator|.
name|getException
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// init
annotation|@
name|Override
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|query
argument_list|()
expr_stmt|;
block|}
comment|// getters and setters
specifier|public
name|String
name|getConnectionURL
parameter_list|()
block|{
return|return
name|connectionURL
return|;
block|}
specifier|public
name|void
name|setConnectionURL
parameter_list|(
name|String
name|connectionURL
parameter_list|)
block|{
name|this
operator|.
name|connectionURL
operator|=
name|connectionURL
expr_stmt|;
block|}
specifier|public
name|String
name|getConnectionUsername
parameter_list|()
block|{
return|return
name|connectionUsername
return|;
block|}
specifier|public
name|void
name|setConnectionUsername
parameter_list|(
name|String
name|connectionUsername
parameter_list|)
block|{
name|this
operator|.
name|connectionUsername
operator|=
name|connectionUsername
expr_stmt|;
block|}
specifier|public
name|String
name|getConnectionPassword
parameter_list|()
block|{
return|return
name|connectionPassword
return|;
block|}
specifier|public
name|void
name|setConnectionPassword
parameter_list|(
name|String
name|connectionPassword
parameter_list|)
block|{
name|this
operator|.
name|connectionPassword
operator|=
name|connectionPassword
expr_stmt|;
block|}
specifier|public
name|String
name|getConnectionProtocol
parameter_list|()
block|{
return|return
name|connectionProtocol
return|;
block|}
specifier|public
name|void
name|setConnectionProtocol
parameter_list|(
name|String
name|connectionProtocol
parameter_list|)
block|{
name|this
operator|.
name|connectionProtocol
operator|=
name|connectionProtocol
expr_stmt|;
block|}
specifier|public
name|String
name|getAuthentication
parameter_list|()
block|{
return|return
name|authentication
return|;
block|}
specifier|public
name|void
name|setAuthentication
parameter_list|(
name|String
name|authentication
parameter_list|)
block|{
name|this
operator|.
name|authentication
operator|=
name|authentication
expr_stmt|;
block|}
specifier|public
name|String
name|getBaseDn
parameter_list|()
block|{
return|return
name|baseDn
return|;
block|}
specifier|public
name|void
name|setBaseDn
parameter_list|(
name|String
name|baseDn
parameter_list|)
block|{
name|this
operator|.
name|baseDn
operator|=
name|baseDn
expr_stmt|;
name|cnsLength
operator|=
name|baseDn
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
operator|+
literal|4
expr_stmt|;
block|}
specifier|public
name|int
name|getRefreshInterval
parameter_list|()
block|{
return|return
name|refreshInterval
return|;
block|}
specifier|public
name|void
name|setRefreshInterval
parameter_list|(
name|int
name|refreshInterval
parameter_list|)
block|{
name|this
operator|.
name|refreshInterval
operator|=
name|refreshInterval
expr_stmt|;
block|}
block|}
end_class

end_unit

