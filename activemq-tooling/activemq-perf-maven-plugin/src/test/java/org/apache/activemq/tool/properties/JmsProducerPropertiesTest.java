begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|JmsProducerPropertiesTest
extends|extends
name|TestCase
block|{
comment|/** 	 * Tests the correct parsing of message headers. 	 * @See JmsProducerProperties.setHeader(String encodedHeader) 	 *  	 */
specifier|public
name|void
name|testMessageHeaders
parameter_list|()
block|{
comment|// first test correct header values
name|String
name|header
init|=
literal|"a=b"
decl_stmt|;
name|JmsProducerProperties
name|props
init|=
operator|new
name|JmsProducerProperties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|props
operator|.
name|getHeaderKeys
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|"a=b:c=d"
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|=
name|props
operator|.
name|getHeaderKeys
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|"a=b:c=d:e=f"
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|=
name|props
operator|.
name|getHeaderKeys
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|"a=b:c=d:e=f:"
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|=
name|props
operator|.
name|getHeaderKeys
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
comment|// test incorrect header values
name|header
operator|=
literal|"a:="
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|"a:=b"
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|"a=:"
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|"a=b::"
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|=
name|props
operator|.
name|getHeaderKeys
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|"a=b:\":"
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|keys
operator|=
name|props
operator|.
name|getHeaderKeys
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|keys
operator|.
name|contains
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|props
operator|.
name|getHeaderValue
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
name|header
operator|=
literal|" :  "
expr_stmt|;
name|props
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|props
operator|.
name|headerMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|clearHeaders
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

