begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|util
operator|.
name|UnmodifiableDelivery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|Proton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Delivery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpMessage
block|{
specifier|private
specifier|final
name|AmqpReceiver
name|receiver
decl_stmt|;
specifier|private
specifier|final
name|Message
name|message
decl_stmt|;
specifier|private
specifier|final
name|Delivery
name|delivery
decl_stmt|;
comment|/**      * Creates a new AmqpMessage that wraps the information necessary to handle      * an outgoing message.      */
specifier|public
name|AmqpMessage
parameter_list|()
block|{
name|receiver
operator|=
literal|null
expr_stmt|;
name|delivery
operator|=
literal|null
expr_stmt|;
name|message
operator|=
name|Proton
operator|.
name|message
argument_list|()
expr_stmt|;
name|message
operator|.
name|setDurable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new AmqpMessage that wraps the information necessary to handle      * an outgoing message.      *      * @param message      *        the Proton message that is to be sent.      */
specifier|public
name|AmqpMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new AmqpMessage that wraps the information necessary to handle      * an incoming delivery.      *      * @param receiver      *        the AmqpReceiver that received this message.      * @param message      *        the Proton message that was received.      * @param delivery      *        the Delivery instance that produced this message.      */
specifier|public
name|AmqpMessage
parameter_list|(
name|AmqpReceiver
name|receiver
parameter_list|,
name|Message
name|message
parameter_list|,
name|Delivery
name|delivery
parameter_list|)
block|{
name|this
operator|.
name|receiver
operator|=
name|receiver
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|delivery
operator|=
name|delivery
expr_stmt|;
block|}
comment|/**      * Accepts the message marking it as consumed on the remote peer.      *      * @throws Exception if an error occurs during the accept.      */
specifier|public
name|void
name|accept
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|receiver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't accept non-received message."
argument_list|)
throw|;
block|}
name|receiver
operator|.
name|accept
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rejects the message, marking it as not deliverable here and failed to deliver.      *      * @throws Exception if an error occurs during the reject.      */
specifier|public
name|void
name|reject
parameter_list|()
throws|throws
name|Exception
block|{
name|reject
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rejects the message, marking it as failed to deliver and applying the given value      * to the undeliverable here tag.      *      * @param undeliverableHere      *        marks the delivery as not being able to be process by link it was sent to.      *      * @throws Exception if an error occurs during the reject.      */
specifier|public
name|void
name|reject
parameter_list|(
name|boolean
name|undeliverableHere
parameter_list|)
throws|throws
name|Exception
block|{
name|reject
argument_list|(
name|undeliverableHere
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Rejects the message, marking it as not deliverable here and failed to deliver.      *      * @param undeliverableHere      *        marks the delivery as not being able to be process by link it was sent to.      * @param deliveryFailed      *        indicates that the delivery failed for some reason.      *      * @throws Exception if an error occurs during the reject.      */
specifier|public
name|void
name|reject
parameter_list|(
name|boolean
name|undeliverableHere
parameter_list|,
name|boolean
name|deliveryFailed
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|receiver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't reject non-received message."
argument_list|)
throw|;
block|}
name|receiver
operator|.
name|reject
argument_list|(
name|delivery
argument_list|,
name|undeliverableHere
argument_list|,
name|deliveryFailed
argument_list|)
expr_stmt|;
block|}
comment|/**      * Release the message, remote can redeliver it elsewhere.      *      * @throws Exception if an error occurs during the reject.      */
specifier|public
name|void
name|release
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|receiver
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can't release non-received message."
argument_list|)
throw|;
block|}
name|receiver
operator|.
name|release
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the AMQP Delivery object linked to a received message.      */
specifier|public
name|Delivery
name|getWrappedDelivery
parameter_list|()
block|{
if|if
condition|(
name|delivery
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|UnmodifiableDelivery
argument_list|(
name|delivery
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @return the AMQP Message that is wrapped by this object.      */
specifier|public
name|Message
name|getWrappedMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
comment|/**      * @return the AmqpReceiver that consumed this message.      */
specifier|public
name|AmqpReceiver
name|getAmqpReceiver
parameter_list|()
block|{
return|return
name|receiver
return|;
block|}
comment|/**      * Sets a String value into the body of an outgoing Message, throws      * an exception if this is an incoming message instance.      *      * @param value      *        the String value to store in the Message body.      *      * @throws IllegalStateException if the message is read only.      */
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|delivery
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Message is read only."
argument_list|)
throw|;
block|}
name|AmqpValue
name|body
init|=
operator|new
name|AmqpValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|getWrappedMessage
argument_list|()
operator|.
name|setBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

