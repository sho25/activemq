begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|SingleConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|listener
operator|.
name|DefaultMessageListenerContainer
import|;
end_import

begin_class
specifier|public
class|class
name|ConsumerThread
extends|extends
name|Thread
block|{
specifier|private
name|DefaultMessageListenerContainer
name|container
decl_stmt|;
specifier|private
name|MessageDrivenPojo
name|messageListener
decl_stmt|;
specifier|private
name|boolean
name|run
decl_stmt|;
specifier|private
name|String
name|destination
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|boolean
name|durable
decl_stmt|;
specifier|private
name|int
name|concurrentConsumers
decl_stmt|;
specifier|private
name|boolean
name|sessionTransacted
decl_stmt|;
specifier|private
name|boolean
name|pubSubDomain
decl_stmt|;
specifier|private
name|boolean
name|running
decl_stmt|;
specifier|private
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ConsumerThread
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|numberOfQueues
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|run
operator|=
literal|true
expr_stmt|;
name|createContainer
argument_list|()
expr_stmt|;
name|container
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|container
operator|.
name|start
argument_list|()
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|run
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|container
operator|.
name|stop
argument_list|()
expr_stmt|;
name|container
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectionFactory
operator|instanceof
name|SingleConnectionFactory
condition|)
block|{
operator|(
operator|(
name|SingleConnectionFactory
operator|)
name|connectionFactory
operator|)
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"ConsumerThread1 closing down"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DefaultMessageListenerContainer
name|createContainer
parameter_list|()
block|{
name|Random
name|generator
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|queueSuffix
init|=
name|generator
operator|.
name|nextInt
argument_list|(
name|numberOfQueues
argument_list|)
decl_stmt|;
name|container
operator|=
operator|new
name|DefaultMessageListenerContainer
argument_list|()
expr_stmt|;
name|container
operator|.
name|setPubSubDomain
argument_list|(
name|pubSubDomain
argument_list|)
expr_stmt|;
name|container
operator|.
name|setDestinationName
argument_list|(
name|destination
operator|+
name|queueSuffix
argument_list|)
expr_stmt|;
name|container
operator|.
name|setMessageListener
argument_list|(
name|messageListener
argument_list|)
expr_stmt|;
name|container
operator|.
name|setConnectionFactory
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
name|container
operator|.
name|setConcurrentConsumers
argument_list|(
name|concurrentConsumers
argument_list|)
expr_stmt|;
name|container
operator|.
name|setSessionTransacted
argument_list|(
name|sessionTransacted
argument_list|)
expr_stmt|;
comment|//container.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER);
comment|//container.setMaxConcurrentConsumers(concurrentConsumers);
comment|//container.setAcceptMessagesWhileStopping(false);
comment|//container.setAutoStartup(false);
comment|//without setting a tx manager, this will use local JMS tx.
comment|/* 		if (durable) { 			container.setSubscriptionDurable(true); 			container.setDurableSubscriptionName("ConsumerThread1" + Thread.currentThread().getId()); 		} 		*/
name|container
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
return|return
name|container
return|;
block|}
comment|/** 	 * @param messageListener the messageListener to set 	 */
specifier|public
name|void
name|setMessageDrivenPojo
parameter_list|(
name|MessageDrivenPojo
name|messageListener
parameter_list|)
block|{
name|this
operator|.
name|messageListener
operator|=
name|messageListener
expr_stmt|;
block|}
comment|/** 	 * @param run the run to set 	 */
specifier|public
name|void
name|setRun
parameter_list|(
name|boolean
name|run
parameter_list|)
block|{
name|this
operator|.
name|run
operator|=
name|run
expr_stmt|;
block|}
comment|/** 	 * @param destination the destination to set 	 */
specifier|public
name|void
name|setDestination
parameter_list|(
name|String
name|destination
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
block|}
specifier|public
name|void
name|setNumberOfQueues
parameter_list|(
name|int
name|no
parameter_list|)
block|{
name|this
operator|.
name|numberOfQueues
operator|=
name|no
expr_stmt|;
block|}
specifier|public
name|int
name|getNumberOfQueues
parameter_list|()
block|{
return|return
name|this
operator|.
name|numberOfQueues
return|;
block|}
comment|/** 	 * @param connectionFactory the connectionFactory to set 	 */
specifier|public
name|void
name|setConnectionFactory
parameter_list|(
name|ConnectionFactory
name|connectionFactory
parameter_list|)
block|{
name|this
operator|.
name|connectionFactory
operator|=
name|connectionFactory
expr_stmt|;
block|}
comment|/** 	 * @param durable the durable to set 	 */
specifier|public
name|void
name|setDurable
parameter_list|(
name|boolean
name|durable
parameter_list|)
block|{
name|this
operator|.
name|durable
operator|=
name|durable
expr_stmt|;
block|}
comment|/** 	 * @param concurrentConsumers the concurrentConsumers to set 	 */
specifier|public
name|void
name|setConcurrentConsumers
parameter_list|(
name|int
name|concurrentConsumers
parameter_list|)
block|{
name|this
operator|.
name|concurrentConsumers
operator|=
name|concurrentConsumers
expr_stmt|;
block|}
comment|/** 	 * @param sessionTransacted the sessionTransacted to set 	 */
specifier|public
name|void
name|setSessionTransacted
parameter_list|(
name|boolean
name|sessionTransacted
parameter_list|)
block|{
name|this
operator|.
name|sessionTransacted
operator|=
name|sessionTransacted
expr_stmt|;
block|}
comment|/** 	 * @param pubSubDomain the pubSubDomain to set 	 */
specifier|public
name|void
name|setPubSubDomain
parameter_list|(
name|boolean
name|pubSubDomain
parameter_list|)
block|{
name|this
operator|.
name|pubSubDomain
operator|=
name|pubSubDomain
expr_stmt|;
block|}
comment|/** 	 * @return the messageListener 	 */
specifier|public
name|MessageDrivenPojo
name|getMessageDrivenPojo
parameter_list|()
block|{
return|return
name|messageListener
return|;
block|}
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|running
return|;
block|}
block|}
end_class

end_unit

