begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TemporaryQueue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQMessageConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|TwoBrokerTempQueueAdvisoryTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TwoBrokerTempQueueAdvisoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|void
name|sendReceiveTempQueueMessage
parameter_list|(
name|String
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|factory
init|=
name|getConnectionFactory
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testTemporaryQueueAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running testTemporaryQueueAdvisory()"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
expr_stmt|;
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
name|waitForMinTopicRegionConsumerCount
argument_list|(
literal|"BrokerB"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForMinTopicRegionConsumerCount
argument_list|(
literal|"BrokerA"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|iterations
init|=
literal|30
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
name|sendReceiveTempQueueMessage
argument_list|(
literal|"BrokerA"
argument_list|)
expr_stmt|;
block|}
name|waitForMinTopicRegionConsumerCount
argument_list|(
literal|"BrokerB"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForMinTopicRegionConsumerCount
argument_list|(
literal|"BrokerA"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|brokerAView
init|=
name|createView
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"ActiveMQ.Advisory.TempQueue"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"exact amount of advisories created on A, one each for creation/deletion"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BrokerA temp advisory enque count: "
operator|+
name|brokerAView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iterations
operator|*
literal|2
operator|==
name|brokerAView
operator|.
name|getEnqueueCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DestinationViewMBean
name|brokerBView
init|=
name|createView
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"ActiveMQ.Advisory.TempQueue"
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"exact amount of advisories created on B, one each for creation/deletion"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"BrokerB temp advisory enque count: "
operator|+
name|brokerBView
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iterations
operator|*
literal|2
operator|==
name|brokerBView
operator|.
name|getEnqueueCount
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|useDuplex
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|initCombosForTestSendToRemovedTemp
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"useDuplex"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
name|Boolean
operator|.
name|FALSE
block|,
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSendToRemovedTemp
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQQueue
name|requestReplyDest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"RequestReply"
argument_list|)
decl_stmt|;
name|NetworkConnector
name|nc
init|=
name|bridgeBrokers
argument_list|(
literal|"BrokerA"
argument_list|,
literal|"BrokerB"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useDuplex
condition|)
block|{
name|nc
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bridgeBrokers
argument_list|(
literal|"BrokerB"
argument_list|,
literal|"BrokerA"
argument_list|)
expr_stmt|;
block|}
comment|// destination advisory can loose the race with message dispatch, so we need to allow replies on network broker
comment|// to work in the absence of an advisory, the destination will be cleaned up in the normal
comment|// way
if|if
condition|(
operator|!
name|useDuplex
condition|)
block|{
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerB"
argument_list|)
operator|.
name|broker
operator|.
name|setAllowTempAutoCreationOnSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|TransportConnector
name|forClient
init|=
name|brokers
operator|.
name|get
argument_list|(
literal|"BrokerA"
argument_list|)
operator|.
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
decl_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|waitForBridgeFormation
argument_list|()
expr_stmt|;
name|waitForMinTopicRegionConsumerCount
argument_list|(
literal|"BrokerB"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|waitForMinTopicRegionConsumerCount
argument_list|(
literal|"BrokerA"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|forClient
operator|.
name|getConnectUri
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|conn
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conn
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|conn
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ConnectionFactory
name|replyFactory
init|=
name|getConnectionFactory
argument_list|(
literal|"BrokerB"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|TemporaryQueue
name|tempDest
init|=
name|session
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|requestReplyDest
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"req-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
name|tempDest
argument_list|)
expr_stmt|;
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|session
operator|.
name|createConsumer
argument_list|(
name|tempDest
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|ActiveMQConnection
name|replyConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|replyFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|replyConnection
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|replyConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|replySession
init|=
name|replyConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|replyConsumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|replySession
operator|.
name|createConsumer
argument_list|(
name|requestReplyDest
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|msg
init|=
name|replyConsumer
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"request message not null: "
operator|+
name|i
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|MessageProducer
name|replyProducer
init|=
name|replySession
operator|.
name|createProducer
argument_list|(
name|msg
operator|.
name|getJMSReplyTo
argument_list|()
argument_list|)
decl_stmt|;
name|replyProducer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"reply-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|replyConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Message
name|reply
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"reply message : "
operator|+
name|i
operator|+
literal|", to: "
operator|+
name|tempDest
operator|+
literal|", by consumer:"
operator|+
name|consumer
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|reply
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|tempDest
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|DestinationViewMBean
name|createView
parameter_list|(
name|String
name|broker
parameter_list|,
name|String
name|destination
parameter_list|,
name|byte
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|domain
init|=
literal|"org.apache.activemq"
decl_stmt|;
name|ObjectName
name|name
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
condition|)
block|{
name|name
operator|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName="
operator|+
name|broker
operator|+
literal|",destinationType=Queue,destinationName="
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName="
operator|+
name|broker
operator|+
literal|",destinationType=Topic,destinationName="
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|DestinationViewMBean
operator|)
name|brokers
operator|.
name|get
argument_list|(
name|broker
argument_list|)
operator|.
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|name
argument_list|,
name|DestinationViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|options
init|=
operator|new
name|String
argument_list|(
literal|"?persistent=false"
argument_list|)
decl_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:0)/BrokerA"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:0)/BrokerB"
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|TwoBrokerTempQueueAdvisoryTest
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

