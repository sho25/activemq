begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|BooleanStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|ByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|Channels
import|;
end_import

begin_comment
comment|/**  * A strategy for reading datagrams and de-fragmenting them together.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|CommandChannel
implements|implements
name|Service
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|CommandChannel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ByteChannel
name|channel
decl_stmt|;
specifier|private
name|OpenWireFormat
name|wireFormat
decl_stmt|;
specifier|private
name|ByteBufferPool
name|bufferPool
decl_stmt|;
specifier|private
name|int
name|datagramSize
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
specifier|private
name|DatagramHeaderMarshaller
name|headerMarshaller
init|=
operator|new
name|DatagramHeaderMarshaller
argument_list|()
decl_stmt|;
comment|// reading
specifier|private
name|ByteBuffer
name|readBuffer
decl_stmt|;
specifier|private
name|DataInputStream
name|dataIn
decl_stmt|;
specifier|private
name|CommandReadBuffer
name|readStack
decl_stmt|;
comment|// writing
specifier|private
name|ByteBuffer
name|writeBuffer
decl_stmt|;
specifier|private
name|BooleanStream
name|bs
init|=
operator|new
name|BooleanStream
argument_list|()
decl_stmt|;
specifier|private
name|DataOutputStream
name|dataOut
decl_stmt|;
specifier|private
name|int
name|largeMessageBufferSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
specifier|private
name|DatagramHeader
name|header
init|=
operator|new
name|DatagramHeader
argument_list|()
decl_stmt|;
specifier|public
name|CommandChannel
parameter_list|(
name|ByteChannel
name|channel
parameter_list|,
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|ByteBufferPool
name|bufferPool
parameter_list|,
name|int
name|datagramSize
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
name|this
operator|.
name|bufferPool
operator|=
name|bufferPool
expr_stmt|;
name|this
operator|.
name|datagramSize
operator|=
name|datagramSize
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|readStack
operator|=
operator|new
name|CommandReadBuffer
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|bufferPool
operator|.
name|setDefaultSize
argument_list|(
name|datagramSize
argument_list|)
expr_stmt|;
name|bufferPool
operator|.
name|start
argument_list|()
expr_stmt|;
name|readBuffer
operator|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|()
expr_stmt|;
name|writeBuffer
operator|=
name|bufferPool
operator|.
name|borrowBuffer
argument_list|()
expr_stmt|;
name|dataIn
operator|=
operator|new
name|DataInputStream
argument_list|(
name|Channels
operator|.
name|newInputStream
argument_list|(
name|channel
argument_list|)
argument_list|)
expr_stmt|;
name|dataOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|Channels
operator|.
name|newOutputStream
argument_list|(
name|channel
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|bufferPool
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Command
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|readBuffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|read
init|=
name|channel
operator|.
name|read
argument_list|(
name|readBuffer
argument_list|)
decl_stmt|;
name|DatagramHeader
name|header
init|=
name|headerMarshaller
operator|.
name|readHeader
argument_list|(
name|readBuffer
argument_list|)
decl_stmt|;
name|int
name|remaining
init|=
name|readBuffer
operator|.
name|remaining
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|header
operator|.
name|getDataSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|remaining
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid command size: "
operator|+
name|size
operator|+
literal|" when there are only: "
operator|+
name|remaining
operator|+
literal|" byte(s) remaining"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|size
operator|<
name|remaining
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Extra bytes in buffer. Expecting: "
operator|+
name|size
operator|+
literal|" but has: "
operator|+
name|remaining
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|header
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|readBuffer
operator|.
name|get
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|header
operator|.
name|setPartialData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
name|dataIn
argument_list|)
decl_stmt|;
name|header
operator|.
name|setCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
return|return
name|readStack
operator|.
name|read
argument_list|(
name|header
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|write
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|header
operator|.
name|incrementCounter
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|wireFormat
operator|.
name|tightMarshalNestedObject1
argument_list|(
name|command
argument_list|,
name|bs
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|<
name|datagramSize
condition|)
block|{
name|header
operator|.
name|setPartial
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|writeBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|command
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|flush
argument_list|()
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|writeBuffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|header
operator|.
name|setPartial
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|header
operator|.
name|setComplete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// lets split the command up into chunks
name|ByteArrayOutputStream
name|largeBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|largeMessageBufferSize
argument_list|)
decl_stmt|;
name|wireFormat
operator|.
name|marshal
argument_list|(
name|command
argument_list|,
operator|new
name|DataOutputStream
argument_list|(
name|largeBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|largeBuffer
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|boolean
name|lastFragment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|fragment
init|=
literal|0
init|,
name|length
init|=
name|data
operator|.
name|length
init|;
operator|!
name|lastFragment
condition|;
name|fragment
operator|++
control|)
block|{
comment|// write the header
name|writeBuffer
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|int
name|chunkSize
init|=
name|writeBuffer
operator|.
name|capacity
argument_list|()
operator|-
name|headerMarshaller
operator|.
name|getHeaderSize
argument_list|(
name|header
argument_list|)
decl_stmt|;
name|lastFragment
operator|=
name|offset
operator|+
name|chunkSize
operator|>=
name|length
expr_stmt|;
name|header
operator|.
name|setComplete
argument_list|(
name|lastFragment
argument_list|)
expr_stmt|;
name|headerMarshaller
operator|.
name|writeHeader
argument_list|(
name|header
argument_list|,
name|writeBuffer
argument_list|)
expr_stmt|;
comment|// now the data
name|writeBuffer
operator|.
name|put
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|chunkSize
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|chunkSize
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
name|writeBuffer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|int
name|getDatagramSize
parameter_list|()
block|{
return|return
name|datagramSize
return|;
block|}
comment|/**      * Sets the default size of a datagram on the network.       */
specifier|public
name|void
name|setDatagramSize
parameter_list|(
name|int
name|datagramSize
parameter_list|)
block|{
name|this
operator|.
name|datagramSize
operator|=
name|datagramSize
expr_stmt|;
block|}
specifier|public
name|ByteBufferPool
name|getBufferPool
parameter_list|()
block|{
return|return
name|bufferPool
return|;
block|}
comment|/**      * Sets the implementation of the byte buffer pool to use      */
specifier|public
name|void
name|setBufferPool
parameter_list|(
name|ByteBufferPool
name|bufferPool
parameter_list|)
block|{
name|this
operator|.
name|bufferPool
operator|=
name|bufferPool
expr_stmt|;
block|}
block|}
end_class

end_unit

