begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|openwire
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|ClassLoading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_class
specifier|abstract
specifier|public
class|class
name|DataStreamMarshaller
block|{
specifier|static
specifier|final
specifier|public
name|Constructor
name|STACK_TRACE_ELEMENT_CONSTRUCTOR
decl_stmt|;
static|static
block|{
name|Constructor
name|constructor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|constructor
operator|=
name|StackTraceElement
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|String
operator|.
name|class
block|,
name|String
operator|.
name|class
block|,
name|int
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{                     }
name|STACK_TRACE_ELEMENT_CONSTRUCTOR
operator|=
name|constructor
expr_stmt|;
block|}
specifier|abstract
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
function_decl|;
specifier|abstract
specifier|public
name|DataStructure
name|createObject
parameter_list|()
function_decl|;
specifier|public
name|int
name|marshal1
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|Object
name|o
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|marshal2
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|Object
name|o
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{             }
specifier|public
name|void
name|unmarshal
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|Object
name|o
parameter_list|,
name|DataInputStream
name|dataIn
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{             }
specifier|public
name|int
name|marshal1Long
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|long
name|o
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|==
literal|0
condition|)
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|o
operator|&
literal|0xFFFFFFFFFFFF0000l
operator|)
operator|==
literal|0
condition|)
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|2
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|o
operator|&
literal|0xFFFFFFFF00000000l
operator|)
operator|==
literal|0
condition|)
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|4
return|;
block|}
else|else
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|8
return|;
block|}
block|}
specifier|public
name|void
name|marshal2Long
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|long
name|o
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|dataOut
operator|.
name|writeLong
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|dataOut
operator|.
name|writeShort
argument_list|(
operator|(
name|int
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|long
name|unmarshalLong
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataInputStream
name|dataIn
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|dataIn
operator|.
name|readLong
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|dataIn
operator|.
name|readInt
argument_list|()
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
return|return
name|dataIn
operator|.
name|readShort
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
specifier|protected
name|DataStructure
name|unmarsalNestedObject
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataInputStream
name|dataIn
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wireFormat
operator|.
name|unmarshalNestedObject
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
return|;
block|}
specifier|protected
name|int
name|marshal1NestedObject
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataStructure
name|o
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wireFormat
operator|.
name|marshal1NestedObject
argument_list|(
name|o
argument_list|,
name|bs
argument_list|)
return|;
block|}
specifier|protected
name|void
name|marshal2NestedObject
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataStructure
name|o
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
name|wireFormat
operator|.
name|marshal2NestedObject
argument_list|(
name|o
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DataStructure
name|unmarsalCachedObject
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataInputStream
name|dataIn
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|wireFormat
operator|.
name|isCacheEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|short
name|index
init|=
name|dataIn
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|DataStructure
name|object
init|=
name|wireFormat
operator|.
name|unmarshalNestedObject
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|wireFormat
operator|.
name|setInUnmarshallCache
argument_list|(
name|index
argument_list|,
name|object
argument_list|)
expr_stmt|;
return|return
name|object
return|;
block|}
else|else
block|{
name|short
name|index
init|=
name|dataIn
operator|.
name|readShort
argument_list|()
decl_stmt|;
return|return
name|wireFormat
operator|.
name|getFromUnmarshallCache
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|wireFormat
operator|.
name|unmarshalNestedObject
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|marshal1CachedObject
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataStructure
name|o
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|wireFormat
operator|.
name|isCacheEnabled
argument_list|()
condition|)
block|{
name|Short
name|index
init|=
name|wireFormat
operator|.
name|getMarshallCacheIndex
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|bs
operator|.
name|writeBoolean
argument_list|(
name|index
operator|==
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|int
name|rc
init|=
name|wireFormat
operator|.
name|marshal1NestedObject
argument_list|(
name|o
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|wireFormat
operator|.
name|addToMarshallCache
argument_list|(
name|o
argument_list|)
expr_stmt|;
return|return
literal|2
operator|+
name|rc
return|;
block|}
else|else
block|{
return|return
literal|2
return|;
block|}
block|}
else|else
block|{
return|return
name|wireFormat
operator|.
name|marshal1NestedObject
argument_list|(
name|o
argument_list|,
name|bs
argument_list|)
return|;
block|}
block|}
specifier|protected
name|void
name|marshal2CachedObject
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataStructure
name|o
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|wireFormat
operator|.
name|isCacheEnabled
argument_list|()
condition|)
block|{
name|Short
name|index
init|=
name|wireFormat
operator|.
name|getMarshallCacheIndex
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|dataOut
operator|.
name|writeShort
argument_list|(
name|index
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
name|wireFormat
operator|.
name|marshal2NestedObject
argument_list|(
name|o
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOut
operator|.
name|writeShort
argument_list|(
name|index
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|wireFormat
operator|.
name|marshal2NestedObject
argument_list|(
name|o
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Throwable
name|unmarsalThrowable
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataInputStream
name|dataIn
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|String
name|clazz
init|=
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|String
name|message
init|=
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|Throwable
name|o
init|=
name|createThrowable
argument_list|(
name|clazz
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|wireFormat
operator|.
name|isStackTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|STACK_TRACE_ELEMENT_CONSTRUCTOR
operator|!=
literal|null
condition|)
block|{
name|StackTraceElement
name|ss
index|[]
init|=
operator|new
name|StackTraceElement
index|[
name|dataIn
operator|.
name|readShort
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ss
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|ss
index|[
name|i
index|]
operator|=
operator|(
name|StackTraceElement
operator|)
name|STACK_TRACE_ELEMENT_CONSTRUCTOR
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
block|,
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
block|,
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{                         }
block|}
name|o
operator|.
name|setStackTrace
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|size
init|=
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|readString
argument_list|(
name|dataIn
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|dataIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
name|o
operator|.
name|initCause
argument_list|(
name|unmarsalThrowable
argument_list|(
name|wireFormat
argument_list|,
name|dataIn
argument_list|,
name|bs
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Throwable
name|createThrowable
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|message
parameter_list|)
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|ClassLoading
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|DataStreamMarshaller
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Constructor
name|constructor
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
return|return
operator|(
name|Throwable
operator|)
name|constructor
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|message
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
return|return
operator|new
name|Throwable
argument_list|(
name|className
operator|+
literal|": "
operator|+
name|message
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|marshalThrowable
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|Throwable
name|o
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
else|else
block|{
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rc
operator|+=
name|writeString
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|rc
operator|+=
name|writeString
argument_list|(
name|o
operator|.
name|getMessage
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
if|if
condition|(
name|wireFormat
operator|.
name|isStackTraceEnabled
argument_list|()
condition|)
block|{
name|rc
operator|+=
literal|2
expr_stmt|;
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|o
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stackTrace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StackTraceElement
name|element
init|=
name|stackTrace
index|[
name|i
index|]
decl_stmt|;
name|rc
operator|+=
name|writeString
argument_list|(
name|element
operator|.
name|getClassName
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|rc
operator|+=
name|writeString
argument_list|(
name|element
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|rc
operator|+=
name|writeString
argument_list|(
name|element
operator|.
name|getFileName
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|rc
operator|+=
literal|4
expr_stmt|;
block|}
name|rc
operator|+=
name|marshalThrowable
argument_list|(
name|wireFormat
argument_list|,
name|o
operator|.
name|getCause
argument_list|()
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
block|}
specifier|protected
name|void
name|marshalThrowable
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|Throwable
name|o
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|writeString
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|o
operator|.
name|getMessage
argument_list|()
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
if|if
condition|(
name|wireFormat
operator|.
name|isStackTraceEnabled
argument_list|()
condition|)
block|{
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|o
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|dataOut
operator|.
name|writeShort
argument_list|(
name|stackTrace
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stackTrace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StackTraceElement
name|element
init|=
name|stackTrace
index|[
name|i
index|]
decl_stmt|;
name|writeString
argument_list|(
name|element
operator|.
name|getClassName
argument_list|()
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|element
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|writeString
argument_list|(
name|element
operator|.
name|getFileName
argument_list|()
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|element
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|marshalThrowable
argument_list|(
name|wireFormat
argument_list|,
name|o
operator|.
name|getCause
argument_list|()
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
name|readString
parameter_list|(
name|DataInputStream
name|dataIn
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|int
name|size
init|=
name|dataIn
operator|.
name|readShort
argument_list|()
decl_stmt|;
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|dataIn
operator|.
name|readFully
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
return|;
comment|// Yes deprecated, but we know what we are doing.
block|}
else|else
block|{
return|return
name|dataIn
operator|.
name|readUTF
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|int
name|writeString
parameter_list|(
name|String
name|value
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
name|value
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|int
name|strlen
init|=
name|value
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|utflen
init|=
literal|0
decl_stmt|;
name|char
index|[]
name|charr
init|=
operator|new
name|char
index|[
name|strlen
index|]
decl_stmt|;
name|int
name|c
decl_stmt|,
name|count
init|=
literal|0
decl_stmt|;
name|boolean
name|isOnlyAscii
init|=
literal|true
decl_stmt|;
name|value
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|strlen
argument_list|,
name|charr
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|strlen
condition|;
name|i
operator|++
control|)
block|{
name|c
operator|=
name|charr
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|0x0001
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|0x007F
operator|)
condition|)
block|{
name|utflen
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|0x07FF
condition|)
block|{
name|utflen
operator|+=
literal|3
expr_stmt|;
name|isOnlyAscii
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|isOnlyAscii
operator|=
literal|false
expr_stmt|;
name|utflen
operator|+=
literal|2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|utflen
operator|>=
name|Short
operator|.
name|MAX_VALUE
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Encountered a String value that is too long to encode."
argument_list|)
throw|;
name|bs
operator|.
name|writeBoolean
argument_list|(
name|isOnlyAscii
argument_list|)
expr_stmt|;
return|return
name|utflen
operator|+
literal|2
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|void
name|writeString
parameter_list|(
name|String
name|value
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
comment|// If we verified it only holds ascii values
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|dataOut
operator|.
name|writeShort
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|writeBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|int
name|marshalObjectArray
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataStructure
index|[]
name|objects
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|objects
operator|!=
literal|null
condition|)
block|{
name|int
name|rc
init|=
literal|0
decl_stmt|;
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rc
operator|+=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rc
operator|+=
name|marshal1NestedObject
argument_list|(
name|wireFormat
argument_list|,
name|objects
index|[
name|i
index|]
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
else|else
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|void
name|marshalObjectArray
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|DataStructure
index|[]
name|objects
parameter_list|,
name|DataOutputStream
name|dataOut
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|dataOut
operator|.
name|writeShort
argument_list|(
name|objects
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|marshal2NestedObject
argument_list|(
name|wireFormat
argument_list|,
name|objects
index|[
name|i
index|]
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

