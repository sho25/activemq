begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|UTF8Buffer
import|;
end_import

begin_comment
comment|/**  * Type conversion support for ActiveMQ.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TypeConversionSupport
block|{
specifier|private
specifier|static
specifier|final
name|Converter
name|IDENTITY_CONVERTER
init|=
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
class|class
name|ConversionKey
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|from
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|to
decl_stmt|;
specifier|final
name|int
name|hashCode
decl_stmt|;
specifier|public
name|ConversionKey
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|from
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|to
parameter_list|)
block|{
name|this
operator|.
name|from
operator|=
name|from
expr_stmt|;
name|this
operator|.
name|to
operator|=
name|to
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|from
operator|.
name|hashCode
argument_list|()
operator|^
operator|(
name|to
operator|.
name|hashCode
argument_list|()
operator|<<
literal|1
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|ConversionKey
name|x
init|=
operator|(
name|ConversionKey
operator|)
name|o
decl_stmt|;
return|return
name|x
operator|.
name|from
operator|==
name|from
operator|&&
name|x
operator|.
name|to
operator|==
name|to
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
block|}
specifier|public
interface|interface
name|Converter
block|{
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|ConversionKey
argument_list|,
name|Converter
argument_list|>
name|CONVERSION_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|ConversionKey
argument_list|,
name|Converter
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|Converter
name|toStringConverter
init|=
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|UTF8Buffer
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|URI
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|toStringConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Float
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Converter
name|longConverter
init|=
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|longConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|longConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|,
name|longConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|value
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Converter
name|intConverter
init|=
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|intConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|intConverter
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|shortValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|ActiveMQDestination
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CONVERSION_MAP
operator|.
name|put
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|URI
operator|.
name|class
argument_list|)
argument_list|,
operator|new
name|Converter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|String
name|text
init|=
name|value
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|TypeConversionSupport
parameter_list|()
block|{     }
specifier|public
specifier|static
name|Object
name|convert
parameter_list|(
name|Object
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|to
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// lets avoid NullPointerException when converting to boolean for null values
if|if
condition|(
name|boolean
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
literal|null
return|;
block|}
comment|// eager same instance type test to avoid the overhead of invoking the type converter
comment|// if already same type
if|if
condition|(
name|to
operator|.
name|isInstance
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|to
operator|.
name|cast
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|// lookup converter
name|Converter
name|c
init|=
name|lookupConverter
argument_list|(
name|value
operator|.
name|getClass
argument_list|()
argument_list|,
name|to
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
return|return
name|c
operator|.
name|convert
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|Converter
name|lookupConverter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|from
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|to
parameter_list|)
block|{
comment|// use wrapped type for primitives
if|if
condition|(
name|from
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|from
operator|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|from
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|to
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|to
operator|=
name|convertPrimitiveTypeToWrapperType
argument_list|(
name|to
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|from
operator|.
name|equals
argument_list|(
name|to
argument_list|)
condition|)
block|{
return|return
name|IDENTITY_CONVERTER
return|;
block|}
return|return
name|CONVERSION_MAP
operator|.
name|get
argument_list|(
operator|new
name|ConversionKey
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Converts primitive types such as int to its wrapper type like      * {@link Integer}      */
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|convertPrimitiveTypeToWrapperType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|rc
init|=
name|type
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
if|if
condition|(
name|type
operator|==
name|int
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|long
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Long
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|double
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Double
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|float
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Float
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|short
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Short
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|byte
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Byte
operator|.
name|class
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
name|rc
operator|=
name|Boolean
operator|.
name|class
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
block|}
end_class

end_unit

