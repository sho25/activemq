begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadaptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|ListContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|MapContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|StoreEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadaptor
operator|.
name|KahaReferenceStoreAdapter
operator|.
name|ReferenceRecord
import|;
end_import

begin_class
specifier|public
class|class
name|KahaReferenceStore
extends|extends
name|KahaMessageStore
implements|implements
name|ReferenceStore
block|{
specifier|private
specifier|final
name|MapContainer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|fileReferences
decl_stmt|;
specifier|public
name|KahaReferenceStore
parameter_list|(
name|ListContainer
name|container
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|int
name|maximumCacheSize
parameter_list|,
name|MapContainer
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|fileReferences
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|container
argument_list|,
name|destination
argument_list|,
name|maximumCacheSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|fileReferences
operator|=
name|fileReferences
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|MessageId
name|getMessageId
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
operator|new
name|MessageId
argument_list|(
operator|(
operator|(
name|ReferenceRecord
operator|)
name|object
operator|)
operator|.
name|messageId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addMessage
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Use addMessageReference instead"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Message
name|getMessage
parameter_list|(
name|MessageId
name|identity
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Use addMessageReference instead"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|recover
parameter_list|(
name|MessageRecoveryListener
name|listener
parameter_list|,
name|Object
name|msg
parameter_list|)
throws|throws
name|Exception
block|{
name|ReferenceRecord
name|record
init|=
operator|(
name|ReferenceRecord
operator|)
name|msg
decl_stmt|;
name|listener
operator|.
name|recoverMessageReference
argument_list|(
operator|new
name|MessageId
argument_list|(
name|record
operator|.
name|messageId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addMessageReference
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageId
name|messageId
parameter_list|,
name|ReferenceData
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|ReferenceRecord
name|record
init|=
operator|new
name|ReferenceRecord
argument_list|(
name|messageId
operator|.
name|toString
argument_list|()
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|StoreEntry
name|item
init|=
name|messageContainer
operator|.
name|placeLast
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|messageId
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ReferenceData
name|getMessageReference
parameter_list|(
name|MessageId
name|identity
parameter_list|)
throws|throws
name|IOException
block|{
name|ReferenceRecord
name|result
init|=
literal|null
decl_stmt|;
name|StoreEntry
name|entry
init|=
name|cache
operator|.
name|get
argument_list|(
name|identity
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|entry
operator|=
name|messageContainer
operator|.
name|refresh
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|result
operator|=
operator|(
name|ReferenceRecord
operator|)
name|messageContainer
operator|.
name|get
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|entry
operator|=
name|messageContainer
operator|.
name|getFirst
argument_list|()
init|;
name|entry
operator|!=
literal|null
condition|;
name|entry
operator|=
name|messageContainer
operator|.
name|getNext
argument_list|(
name|entry
argument_list|)
control|)
block|{
name|ReferenceRecord
name|msg
init|=
operator|(
name|ReferenceRecord
operator|)
name|messageContainer
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|messageId
operator|.
name|equals
argument_list|(
name|identity
argument_list|)
condition|)
block|{
name|result
operator|=
name|msg
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|identity
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|result
operator|.
name|data
return|;
block|}
specifier|public
name|void
name|addReferenceFileIdsInUse
parameter_list|(
name|Set
argument_list|<
name|Integer
argument_list|>
name|rc
parameter_list|)
block|{
for|for
control|(
name|StoreEntry
name|entry
init|=
name|messageContainer
operator|.
name|getFirst
argument_list|()
init|;
name|entry
operator|!=
literal|null
condition|;
name|entry
operator|=
name|messageContainer
operator|.
name|getNext
argument_list|(
name|entry
argument_list|)
control|)
block|{
name|ReferenceRecord
name|msg
init|=
operator|(
name|ReferenceRecord
operator|)
name|messageContainer
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
name|rc
operator|.
name|add
argument_list|(
name|msg
operator|.
name|data
operator|.
name|getFileId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

