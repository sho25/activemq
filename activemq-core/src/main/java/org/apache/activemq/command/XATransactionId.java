begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|HexSupport
import|;
end_import

begin_comment
comment|/**  * @openwire:marshaller code="112"  * @version $Revision: 1.6 $  */
end_comment

begin_class
specifier|public
class|class
name|XATransactionId
extends|extends
name|TransactionId
implements|implements
name|Xid
implements|,
name|Comparable
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|ACTIVEMQ_XA_TRANSACTION_ID
decl_stmt|;
specifier|private
name|int
name|formatId
decl_stmt|;
specifier|private
name|byte
index|[]
name|branchQualifier
decl_stmt|;
specifier|private
name|byte
index|[]
name|globalTransactionId
decl_stmt|;
specifier|private
specifier|transient
name|int
name|hash
decl_stmt|;
specifier|private
specifier|transient
name|String
name|transactionKey
decl_stmt|;
specifier|public
name|XATransactionId
parameter_list|()
block|{             }
specifier|public
name|XATransactionId
parameter_list|(
name|Xid
name|xid
parameter_list|)
block|{
name|this
operator|.
name|formatId
operator|=
name|xid
operator|.
name|getFormatId
argument_list|()
expr_stmt|;
name|this
operator|.
name|globalTransactionId
operator|=
name|xid
operator|.
name|getGlobalTransactionId
argument_list|()
expr_stmt|;
name|this
operator|.
name|branchQualifier
operator|=
name|xid
operator|.
name|getBranchQualifier
argument_list|()
expr_stmt|;
block|}
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
specifier|public
specifier|synchronized
name|String
name|getTransactionKey
parameter_list|()
block|{
if|if
condition|(
name|transactionKey
operator|==
literal|null
condition|)
block|{
name|transactionKey
operator|=
literal|"XID:"
operator|+
name|formatId
operator|+
literal|":"
operator|+
name|HexSupport
operator|.
name|toHexFromBytes
argument_list|(
name|globalTransactionId
argument_list|)
operator|+
literal|":"
operator|+
name|HexSupport
operator|.
name|toHexFromBytes
argument_list|(
name|branchQualifier
argument_list|)
expr_stmt|;
block|}
return|return
name|transactionKey
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getTransactionKey
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isXATransaction
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isLocalTransaction
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
name|formatId
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|globalTransactionId
return|;
block|}
comment|/**      * @openwire:property version=1      */
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|branchQualifier
return|;
block|}
specifier|public
name|void
name|setBranchQualifier
parameter_list|(
name|byte
index|[]
name|branchQualifier
parameter_list|)
block|{
name|this
operator|.
name|branchQualifier
operator|=
name|branchQualifier
expr_stmt|;
name|this
operator|.
name|hash
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|setFormatId
parameter_list|(
name|int
name|formatId
parameter_list|)
block|{
name|this
operator|.
name|formatId
operator|=
name|formatId
expr_stmt|;
name|this
operator|.
name|hash
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|setGlobalTransactionId
parameter_list|(
name|byte
index|[]
name|globalTransactionId
parameter_list|)
block|{
name|this
operator|.
name|globalTransactionId
operator|=
name|globalTransactionId
expr_stmt|;
name|this
operator|.
name|hash
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
name|hash
operator|=
name|formatId
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|globalTransactionId
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|branchQualifier
argument_list|,
name|hash
argument_list|)
expr_stmt|;
if|if
condition|(
name|hash
operator|==
literal|0
condition|)
block|{
name|hash
operator|=
literal|0xaceace
expr_stmt|;
block|}
block|}
return|return
name|hash
return|;
block|}
specifier|private
specifier|static
name|int
name|hash
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|hash
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|bytes
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|hash
operator|^=
name|bytes
index|[
name|i
index|]
operator|<<
operator|(
operator|(
name|i
operator|%
literal|4
operator|)
operator|*
literal|8
operator|)
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|XATransactionId
operator|.
name|class
condition|)
return|return
literal|false
return|;
name|XATransactionId
name|xid
init|=
operator|(
name|XATransactionId
operator|)
name|o
decl_stmt|;
return|return
name|xid
operator|.
name|formatId
operator|==
name|formatId
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|xid
operator|.
name|globalTransactionId
argument_list|,
name|globalTransactionId
argument_list|)
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|xid
operator|.
name|branchQualifier
argument_list|,
name|branchQualifier
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|XATransactionId
operator|.
name|class
condition|)
return|return
operator|-
literal|1
return|;
name|XATransactionId
name|xid
init|=
operator|(
name|XATransactionId
operator|)
name|o
decl_stmt|;
return|return
name|getTransactionKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|xid
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

