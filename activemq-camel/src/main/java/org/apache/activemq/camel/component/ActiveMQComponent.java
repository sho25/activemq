begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EnhancedConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|DestinationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ComponentConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|component
operator|.
name|jms
operator|.
name|JmsConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|spi
operator|.
name|EndpointCompleter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|ObjectHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|connection
operator|.
name|SingleConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_comment
comment|/**  * The<a href="http://activemq.apache.org/camel/activemq.html">ActiveMQ Component</a>  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQComponent
extends|extends
name|JmsComponent
implements|implements
name|EndpointCompleter
block|{
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|SingleConnectionFactory
argument_list|>
name|singleConnectionFactoryList
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|SingleConnectionFactory
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Service
argument_list|>
name|pooledConnectionFactoryServiceList
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Service
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ActiveMQComponent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|exposeAllQueues
decl_stmt|;
specifier|private
name|CamelEndpointLoader
name|endpointLoader
decl_stmt|;
specifier|private
name|EnhancedConnection
name|connection
decl_stmt|;
name|DestinationSource
name|source
decl_stmt|;
name|boolean
name|sourceInitialized
init|=
literal|false
decl_stmt|;
comment|/**      * Creates an<a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>      *      * @return the created component      */
specifier|public
specifier|static
name|ActiveMQComponent
name|activeMQComponent
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQComponent
argument_list|()
return|;
block|}
comment|/**      * Creates an<a href="http://camel.apache.org/activemq.html">ActiveMQ Component</a>      * connecting to the given<a href="http://activemq.apache.org/configuring-transports.html">broker URL</a>      *      * @param brokerURL the URL to connect to      * @return the created component      */
specifier|public
specifier|static
name|ActiveMQComponent
name|activeMQComponent
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
name|ActiveMQComponent
name|answer
init|=
operator|new
name|ActiveMQComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|.
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|answer
operator|.
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setBrokerURL
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|public
name|ActiveMQComponent
parameter_list|()
block|{     }
specifier|public
name|ActiveMQComponent
parameter_list|(
name|CamelContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ActiveMQComponent
parameter_list|(
name|ActiveMQConfiguration
name|configuration
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the broker URL to use to connect to ActiveMQ using the      *<a href="http://activemq.apache.org/configuring-transports.html">ActiveMQ URI format</a>      */
specifier|public
name|void
name|setBrokerURL
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setBrokerURL
argument_list|(
name|brokerURL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @deprecated - use JmsComponent#setUsername(String)      * @see JmsComponent#setUsername(String)      */
specifier|public
name|void
name|setUserName
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
name|setUsername
argument_list|(
name|userName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTrustAllPackages
parameter_list|(
name|boolean
name|trustAllPackages
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setTrustAllPackages
argument_list|(
name|trustAllPackages
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isExposeAllQueues
parameter_list|()
block|{
return|return
name|exposeAllQueues
return|;
block|}
comment|/**      * If enabled this will cause all Queues in the ActiveMQ broker to be eagerly populated into the CamelContext      * so that they can be easily browsed by any Camel tooling. This option is disabled by default.      */
specifier|public
name|void
name|setExposeAllQueues
parameter_list|(
name|boolean
name|exposeAllQueues
parameter_list|)
block|{
name|this
operator|.
name|exposeAllQueues
operator|=
name|exposeAllQueues
expr_stmt|;
block|}
comment|/**      * Enables or disables whether a PooledConnectionFactory will be used so that when      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer      * for each message then close them all down again.      *<p/>      * The default value is true. Note that this requires an extra dependency on commons-pool2.      */
specifier|public
name|void
name|setUsePooledConnection
parameter_list|(
name|boolean
name|usePooledConnection
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setUsePooledConnection
argument_list|(
name|usePooledConnection
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Enables or disables whether a Spring {@link SingleConnectionFactory} will be used so that when      * messages are sent to ActiveMQ from outside of a message consuming thread, pooling will be used rather      * than the default with the Spring {@link JmsTemplate} which will create a new connection, session, producer      * for each message then close them all down again.      *<p/>      * The default value is false and a pooled connection is used by default.      */
specifier|public
name|void
name|setUseSingleConnection
parameter_list|(
name|boolean
name|useSingleConnection
parameter_list|)
block|{
if|if
condition|(
name|getConfiguration
argument_list|()
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|getConfiguration
argument_list|()
operator|)
operator|.
name|setUseSingleConnection
argument_list|(
name|useSingleConnection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addPooledConnectionFactoryService
parameter_list|(
name|Service
name|pooledConnectionFactoryService
parameter_list|)
block|{
name|pooledConnectionFactoryServiceList
operator|.
name|add
argument_list|(
name|pooledConnectionFactoryService
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSingleConnectionFactory
parameter_list|(
name|SingleConnectionFactory
name|singleConnectionFactory
parameter_list|)
block|{
name|singleConnectionFactoryList
operator|.
name|add
argument_list|(
name|singleConnectionFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|String
name|convertPathToActualDestination
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|parameters
parameter_list|)
block|{
comment|// support ActiveMQ destination options using the destination. prefix
comment|// http://activemq.apache.org/destination-options.html
name|Map
name|options
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|parameters
argument_list|,
literal|"destination."
argument_list|)
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|query
operator|=
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|ObjectHelper
operator|.
name|wrapRuntimeCamelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// if we have destination options then append them to the destination name
if|if
condition|(
name|ObjectHelper
operator|.
name|isNotEmpty
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return
name|path
operator|+
literal|"?"
operator|+
name|query
return|;
block|}
else|else
block|{
return|return
name|path
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|isExposeAllQueues
argument_list|()
condition|)
block|{
name|createDestinationSource
argument_list|()
expr_stmt|;
name|endpointLoader
operator|=
operator|new
name|CamelEndpointLoader
argument_list|(
name|getCamelContext
argument_list|()
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|endpointLoader
operator|.
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
comment|// use OriginalDestinationPropagateStrategy by default if no custom stategy has been set
if|if
condition|(
name|getMessageCreatedStrategy
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setMessageCreatedStrategy
argument_list|(
operator|new
name|OriginalDestinationPropagateStrategy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createDestinationSource
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|Connection
name|value
init|=
name|getConfiguration
argument_list|()
operator|.
name|getConnectionFactory
argument_list|()
operator|.
name|createConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|EnhancedConnection
condition|)
block|{
name|connection
operator|=
operator|(
name|EnhancedConnection
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Created JMS Connection is not an EnhancedConnection: "
operator|+
name|value
argument_list|)
throw|;
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|source
operator|=
name|connection
operator|.
name|getDestinationSource
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Can't get destination source, endpoint completer will not work"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|stop
argument_list|()
expr_stmt|;
name|source
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
for|for
control|(
name|Service
name|s
range|:
name|pooledConnectionFactoryServiceList
control|)
block|{
name|s
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|pooledConnectionFactoryServiceList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|SingleConnectionFactory
name|s
range|:
name|singleConnectionFactoryList
control|)
block|{
name|s
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
name|singleConnectionFactoryList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|super
operator|.
name|doStop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConfiguration
parameter_list|(
name|JmsConfiguration
name|configuration
parameter_list|)
block|{
if|if
condition|(
name|configuration
operator|instanceof
name|ActiveMQConfiguration
condition|)
block|{
operator|(
operator|(
name|ActiveMQConfiguration
operator|)
name|configuration
operator|)
operator|.
name|setActiveMQComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|setConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|JmsConfiguration
name|createConfiguration
parameter_list|()
block|{
name|ActiveMQConfiguration
name|answer
init|=
operator|new
name|ActiveMQConfiguration
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setActiveMQComponent
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|completeEndpointPath
parameter_list|(
name|ComponentConfiguration
name|componentConfiguration
parameter_list|,
name|String
name|completionText
parameter_list|)
block|{
comment|// try to initialize destination source only the first time
if|if
condition|(
operator|!
name|sourceInitialized
condition|)
block|{
name|createDestinationSource
argument_list|()
expr_stmt|;
name|sourceInitialized
operator|=
literal|true
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|answer
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|Set
name|candidates
init|=
name|source
operator|.
name|getQueues
argument_list|()
decl_stmt|;
name|String
name|destinationName
init|=
name|completionText
decl_stmt|;
if|if
condition|(
name|completionText
operator|.
name|startsWith
argument_list|(
literal|"topic:"
argument_list|)
condition|)
block|{
name|candidates
operator|=
name|source
operator|.
name|getTopics
argument_list|()
expr_stmt|;
name|destinationName
operator|=
name|completionText
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|completionText
operator|.
name|startsWith
argument_list|(
literal|"queue:"
argument_list|)
condition|)
block|{
name|destinationName
operator|=
name|completionText
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|it
init|=
name|candidates
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ActiveMQDestination
name|destination
init|=
operator|(
name|ActiveMQDestination
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|destinationName
argument_list|)
condition|)
block|{
name|answer
operator|.
name|add
argument_list|(
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

