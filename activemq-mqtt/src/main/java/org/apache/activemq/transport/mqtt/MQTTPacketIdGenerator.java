begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|mqtt
operator|.
name|codec
operator|.
name|PUBLISH
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Manages PUBLISH packet ids for clients.  *  * @author Dhiraj Bokde  */
end_comment

begin_class
specifier|public
class|class
name|MQTTPacketIdGenerator
extends|extends
name|ServiceSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTPacketIdGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|LOCK
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PacketIdMaps
argument_list|>
name|clientIdMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|PacketIdMaps
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NonZeroSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|NonZeroSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
name|MQTTPacketIdGenerator
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|clientIdMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|PacketIdMaps
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|public
name|void
name|startClientSession
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clientIdMap
operator|.
name|containsKey
argument_list|(
name|clientId
argument_list|)
condition|)
block|{
name|clientIdMap
operator|.
name|put
argument_list|(
name|clientId
argument_list|,
operator|new
name|PacketIdMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|stopClientSession
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
return|return
name|clientIdMap
operator|.
name|remove
argument_list|(
name|clientId
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|short
name|setPacketId
parameter_list|(
name|String
name|clientId
parameter_list|,
name|MQTTSubscription
name|subscription
parameter_list|,
name|ActiveMQMessage
name|message
parameter_list|,
name|PUBLISH
name|publish
parameter_list|)
block|{
specifier|final
name|PacketIdMaps
name|idMaps
init|=
name|clientIdMap
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
if|if
condition|(
name|idMaps
operator|==
literal|null
condition|)
block|{
comment|// maybe its a cleansession=true client id, use session less message id
specifier|final
name|short
name|id
init|=
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
decl_stmt|;
name|publish
operator|.
name|messageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
else|else
block|{
return|return
name|idMaps
operator|.
name|setPacketId
argument_list|(
name|subscription
argument_list|,
name|message
argument_list|,
name|publish
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|ackPacketId
parameter_list|(
name|String
name|clientId
parameter_list|,
name|short
name|packetId
parameter_list|)
block|{
specifier|final
name|PacketIdMaps
name|idMaps
init|=
name|clientIdMap
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
if|if
condition|(
name|idMaps
operator|!=
literal|null
condition|)
block|{
name|idMaps
operator|.
name|ackPacketId
argument_list|(
name|packetId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getNextSequenceId
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
specifier|final
name|PacketIdMaps
name|idMaps
init|=
name|clientIdMap
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
return|return
name|idMaps
operator|!=
literal|null
condition|?
name|idMaps
operator|.
name|getNextSequenceId
argument_list|()
else|:
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|MQTTPacketIdGenerator
name|getMQTTPacketIdGenerator
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|MQTTPacketIdGenerator
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|LOCK
init|)
block|{
name|Service
index|[]
name|services
init|=
name|broker
operator|.
name|getServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|services
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Service
name|service
range|:
name|services
control|)
block|{
if|if
condition|(
name|service
operator|instanceof
name|MQTTPacketIdGenerator
condition|)
block|{
return|return
operator|(
name|MQTTPacketIdGenerator
operator|)
name|service
return|;
block|}
block|}
block|}
name|result
operator|=
operator|new
name|MQTTPacketIdGenerator
argument_list|()
expr_stmt|;
name|broker
operator|.
name|addService
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|.
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|result
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't start MQTTPacketIdGenerator"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
class|class
name|PacketIdMaps
block|{
specifier|private
specifier|final
name|NonZeroSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|NonZeroSequenceGenerator
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|activemqToPacketIds
init|=
operator|new
name|LRUCache
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
argument_list|(
name|MQTTProtocolConverter
operator|.
name|DEFAULT_CACHE_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|Short
argument_list|,
name|String
argument_list|>
name|packetIdsToActivemq
init|=
operator|new
name|LRUCache
argument_list|<
name|Short
argument_list|,
name|String
argument_list|>
argument_list|(
name|MQTTProtocolConverter
operator|.
name|DEFAULT_CACHE_SIZE
argument_list|)
decl_stmt|;
name|short
name|setPacketId
parameter_list|(
name|MQTTSubscription
name|subscription
parameter_list|,
name|ActiveMQMessage
name|message
parameter_list|,
name|PUBLISH
name|publish
parameter_list|)
block|{
comment|// subscription key
specifier|final
name|StringBuilder
name|subscriptionKey
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|subscriptionKey
operator|.
name|append
argument_list|(
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|keyStr
init|=
name|subscriptionKey
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Short
name|packetId
decl_stmt|;
synchronized|synchronized
init|(
name|activemqToPacketIds
init|)
block|{
name|packetId
operator|=
name|activemqToPacketIds
operator|.
name|get
argument_list|(
name|keyStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|packetId
operator|==
literal|null
condition|)
block|{
name|packetId
operator|=
name|getNextSequenceId
argument_list|()
expr_stmt|;
name|activemqToPacketIds
operator|.
name|put
argument_list|(
name|keyStr
argument_list|,
name|packetId
argument_list|)
expr_stmt|;
name|packetIdsToActivemq
operator|.
name|put
argument_list|(
name|packetId
argument_list|,
name|keyStr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// mark publish as duplicate!
name|publish
operator|.
name|dup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|publish
operator|.
name|messageId
argument_list|(
name|packetId
argument_list|)
expr_stmt|;
return|return
name|packetId
return|;
block|}
name|void
name|ackPacketId
parameter_list|(
name|short
name|packetId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|activemqToPacketIds
init|)
block|{
specifier|final
name|String
name|subscriptionKey
init|=
name|packetIdsToActivemq
operator|.
name|remove
argument_list|(
name|packetId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subscriptionKey
operator|!=
literal|null
condition|)
block|{
name|activemqToPacketIds
operator|.
name|remove
argument_list|(
name|subscriptionKey
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|short
name|getNextSequenceId
parameter_list|()
block|{
return|return
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|NonZeroSequenceGenerator
block|{
specifier|private
name|short
name|lastSequenceId
decl_stmt|;
specifier|public
specifier|synchronized
name|short
name|getNextSequenceId
parameter_list|()
block|{
specifier|final
name|short
name|val
init|=
operator|++
name|lastSequenceId
decl_stmt|;
return|return
name|val
operator|!=
literal|0
condition|?
name|val
else|:
operator|++
name|lastSequenceId
return|;
block|}
block|}
block|}
end_class

end_unit

