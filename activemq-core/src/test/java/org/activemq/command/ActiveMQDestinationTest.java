begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ActiveMQDestinationTest
extends|extends
name|DataStructureTestSupport
block|{
specifier|public
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|void
name|initCombosForTestDesintaionMarshaling
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTempQueue
argument_list|(
literal|"TEST:1"
argument_list|)
block|,
operator|new
name|ActiveMQTempTopic
argument_list|(
literal|"TEST:1"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST?option=value"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST?option=value"
argument_list|)
block|,
operator|new
name|ActiveMQTempQueue
argument_list|(
literal|"TEST:1?option=value"
argument_list|)
block|,
operator|new
name|ActiveMQTempTopic
argument_list|(
literal|"TEST:1?option=value"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDesintaionMarshaling
parameter_list|()
throws|throws
name|IOException
block|{
name|assertBeanMarshalls
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestDesintaionOptions
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST?k1=v1&k2=v2"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST?k1=v1&k2=v2"
argument_list|)
block|,
operator|new
name|ActiveMQTempQueue
argument_list|(
literal|"TEST:1?k1=v1&k2=v2"
argument_list|)
block|,
operator|new
name|ActiveMQTempTopic
argument_list|(
literal|"TEST:1?k1=v1&k2=v2"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDesintaionOptions
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
name|options
init|=
name|destination
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"k1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|options
operator|.
name|get
argument_list|(
literal|"k2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|ActiveMQDestinationTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

