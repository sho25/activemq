begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|sampler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|reports
operator|.
name|PerformanceReportWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|properties
operator|.
name|AbstractObjectProperties
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractPerformanceSampler
extends|extends
name|AbstractObjectProperties
implements|implements
name|PerformanceSampler
block|{
specifier|protected
name|long
name|rampUpTime
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
comment|// 30 secs
specifier|protected
name|long
name|rampDownTime
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
comment|// 30 secs
specifier|protected
name|long
name|duration
init|=
literal|5
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
comment|// 5 mins
specifier|protected
name|long
name|interval
init|=
literal|1000
decl_stmt|;
comment|// 1 sec
specifier|protected
name|PerformanceReportWriter
name|perfReportWriter
init|=
literal|null
decl_stmt|;
specifier|protected
name|PerformanceEventListener
name|perfEventListener
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|AtomicBoolean
name|isRunning
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|sampleIndex
init|=
literal|0
decl_stmt|;
specifier|public
name|long
name|getRampUpTime
parameter_list|()
block|{
return|return
name|rampUpTime
return|;
block|}
specifier|public
name|void
name|setRampUpTime
parameter_list|(
name|long
name|rampUpTime
parameter_list|)
block|{
name|this
operator|.
name|rampUpTime
operator|=
name|rampUpTime
expr_stmt|;
block|}
specifier|public
name|long
name|getRampDownTime
parameter_list|()
block|{
return|return
name|rampDownTime
return|;
block|}
specifier|public
name|void
name|setRampDownTime
parameter_list|(
name|long
name|rampDownTime
parameter_list|)
block|{
name|this
operator|.
name|rampDownTime
operator|=
name|rampDownTime
expr_stmt|;
block|}
specifier|public
name|long
name|getDuration
parameter_list|()
block|{
return|return
name|duration
return|;
block|}
specifier|public
name|void
name|setDuration
parameter_list|(
name|long
name|duration
parameter_list|)
block|{
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
block|}
specifier|public
name|long
name|getInterval
parameter_list|()
block|{
return|return
name|interval
return|;
block|}
specifier|public
name|void
name|setInterval
parameter_list|(
name|long
name|interval
parameter_list|)
block|{
name|this
operator|.
name|interval
operator|=
name|interval
expr_stmt|;
block|}
specifier|public
name|PerformanceReportWriter
name|getPerfReportWriter
parameter_list|()
block|{
return|return
name|perfReportWriter
return|;
block|}
specifier|public
name|void
name|setPerfReportWriter
parameter_list|(
name|PerformanceReportWriter
name|perfReportWriter
parameter_list|)
block|{
name|this
operator|.
name|perfReportWriter
operator|=
name|perfReportWriter
expr_stmt|;
block|}
specifier|public
name|PerformanceEventListener
name|getPerfEventListener
parameter_list|()
block|{
return|return
name|perfEventListener
return|;
block|}
specifier|public
name|void
name|setPerfEventListener
parameter_list|(
name|PerformanceEventListener
name|perfEventListener
parameter_list|)
block|{
name|this
operator|.
name|perfEventListener
operator|=
name|perfEventListener
expr_stmt|;
block|}
specifier|public
name|void
name|startSampler
parameter_list|()
block|{
name|isRunning
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|onRampUpStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onRampUpStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|rampUpTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|onSamplerStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onSamplerStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|sample
argument_list|()
expr_stmt|;
name|onSamplerEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onSamplerEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|rampDownTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|onRampDownEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|perfEventListener
operator|!=
literal|null
condition|)
block|{
name|perfEventListener
operator|.
name|onRampDownEnd
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|isRunning
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|isRunning
init|)
block|{
name|isRunning
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|sample
parameter_list|()
block|{
comment|// Compute for the actual duration window of the sampler
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|duration
operator|-
name|rampDownTime
operator|-
name|rampUpTime
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|endTime
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|sampleData
argument_list|()
expr_stmt|;
name|sampleIndex
operator|++
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|sampleData
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
return|return
name|isRunning
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|waitUntilDone
parameter_list|()
block|{
while|while
condition|(
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|isRunning
init|)
block|{
name|isRunning
operator|.
name|wait
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Call back functions to customize behavior of thread.
specifier|protected
name|void
name|onRampUpStart
parameter_list|()
block|{}
specifier|protected
name|void
name|onSamplerStart
parameter_list|()
block|{}
specifier|protected
name|void
name|onSamplerEnd
parameter_list|()
block|{}
specifier|protected
name|void
name|onRampDownEnd
parameter_list|()
block|{}
block|}
end_class

end_unit

