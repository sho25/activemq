begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Hiram Chirino  *  *  Licensed under the Apache License, Version 2.0 (the "License");  *  you may not use this file except in compliance with the License.  *  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|FilterAsyncChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Used to synchronize concurrent access to an ASynchChannel.    *   * Uses a {@see edu.emory.mathcs.backport.java.util.concurrent.Sync} object  * for write operations.  All other operations such as {@see #stop(long)}  * and {@see #stop} just do a normal java synchronization against the SynchornizedSynchChannel  * object instance.  It is assumed that the Async message delivery is not   * concurrent and therefore does not require synchronization.  *   */
end_comment

begin_class
specifier|public
class|class
name|SynchornizedAsyncChannel
extends|extends
name|FilterAsyncChannel
block|{
specifier|private
specifier|final
name|Lock
name|writeLock
decl_stmt|;
specifier|public
name|SynchornizedAsyncChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|)
block|{
name|this
argument_list|(
name|next
argument_list|,
operator|new
name|ReentrantLock
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SynchornizedAsyncChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|,
name|Lock
name|writeLock
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeLock
operator|=
name|writeLock
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getNext
argument_list|()
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getNext
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
return|return
name|super
operator|.
name|getAdapter
argument_list|(
name|target
argument_list|)
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Lock
name|getWriteLock
parameter_list|()
block|{
return|return
name|writeLock
return|;
block|}
block|}
end_class

end_unit

