begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A client uses a<CODE>QueueBrowser</CODE> object to look at messages on a  * queue without removing them.  *<p/>  *<P>  * The<CODE>getEnumeration</CODE> method returns a<CODE>  * java.util.Enumeration</CODE> that is used to scan the queue's messages. It  * may be an enumeration of the entire content of a queue, or it may contain  * only the messages matching a message selector.  *<p/>  *<P>  * Messages may be arriving and expiring while the scan is done. The JMS API  * does not require the content of an enumeration to be a static snapshot of  * queue content. Whether these changes are visible or not depends on the JMS  * provider.  *<p/>  *<P>  * A<CODE>QueueBrowser</CODE> can be created from either a<CODE>Session  *</CODE> or a<CODE>QueueSession</CODE>.  *  * @see javax.jms.Session#createBrowser  * @see javax.jms.QueueSession#createBrowser  * @see javax.jms.QueueBrowser  * @see javax.jms.QueueReceiver  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQQueueBrowser
implements|implements
name|QueueBrowser
implements|,
name|Enumeration
block|{
specifier|private
specifier|final
name|ActiveMQSession
name|session
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|private
specifier|final
name|String
name|selector
decl_stmt|;
specifier|private
name|ActiveMQMessageConsumer
name|consumer
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
specifier|final
name|ConsumerId
name|consumerId
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|browseDone
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|dispatchAsync
decl_stmt|;
specifier|private
name|Object
name|semaphore
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
comment|/**      * Constructor for an ActiveMQQueueBrowser - used internally      *      * @param theSession      * @param dest      * @param selector      * @throws JMSException      */
specifier|protected
name|ActiveMQQueueBrowser
parameter_list|(
name|ActiveMQSession
name|session
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|String
name|selector
parameter_list|,
name|boolean
name|dispatchAsync
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|consumerId
operator|=
name|consumerId
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
name|this
operator|.
name|dispatchAsync
operator|=
name|dispatchAsync
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|createConsumer
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param session      * @param originalDestination      * @param selector      * @param cnum      * @return      * @throws JMSException      */
specifier|private
name|ActiveMQMessageConsumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
name|browseDone
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|ActiveMQMessageConsumer
argument_list|(
name|session
argument_list|,
name|consumerId
argument_list|,
name|destination
argument_list|,
literal|null
argument_list|,
name|selector
argument_list|,
name|session
operator|.
name|connection
operator|.
name|getPrefetchPolicy
argument_list|()
operator|.
name|getQueueBrowserPrefetch
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|dispatchAsync
argument_list|)
block|{
specifier|public
name|void
name|dispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
if|if
condition|(
name|md
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|)
block|{
name|browseDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|dispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|notifyMessageAvailable
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|destroyConsumer
parameter_list|()
block|{
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
return|return;
try|try
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumer
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Gets an enumeration for browsing the current queue messages in the order      * they would be received.      *      * @return an enumeration for browsing the messages      * @throws JMSException if the JMS provider fails to get the enumeration for this      *                      browser due to some internal error.      */
specifier|public
name|Enumeration
name|getEnumeration
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
name|consumer
operator|=
name|createConsumer
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The Consumer is closed"
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return true if more messages to process      */
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|consumer
operator|.
name|getMessageSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|browseDone
operator|.
name|get
argument_list|()
operator|||
operator|!
name|session
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|destroyConsumer
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|waitForMessage
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @return the next message      */
specifier|public
name|Object
name|nextElement
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|consumer
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
try|try
block|{
name|Message
name|answer
init|=
name|consumer
operator|.
name|receiveNoWait
argument_list|()
decl_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|this
operator|.
name|session
operator|.
name|connection
operator|.
name|onAsyncException
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|browseDone
operator|.
name|get
argument_list|()
operator|||
operator|!
name|session
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|destroyConsumer
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|waitForMessage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
name|destroyConsumer
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Gets the queue associated with this queue browser.      *      * @return the queue      * @throws JMSException if the JMS provider fails to get the queue associated      *                      with this browser due to some internal error.      */
specifier|public
name|Queue
name|getQueue
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
operator|(
name|Queue
operator|)
name|destination
return|;
block|}
specifier|public
name|String
name|getMessageSelector
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|selector
return|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**       *  Wait on a semaphore for a fixed amount of time for a message to come in.      */
specifier|protected
name|void
name|waitForMessage
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|semaphore
init|)
block|{
name|semaphore
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{         }
block|}
specifier|protected
name|void
name|notifyMessageAvailable
parameter_list|()
block|{
synchronized|synchronized
init|(
name|semaphore
init|)
block|{
name|semaphore
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ActiveMQQueueBrowser { consumerId="
operator|+
name|consumerId
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

