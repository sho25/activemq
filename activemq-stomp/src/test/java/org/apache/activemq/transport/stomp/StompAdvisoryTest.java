begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|ConstantPendingMessageLimitStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|StatisticsBrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|StompAdvisoryTest
extends|extends
name|StompTestSupport
block|{
specifier|static
specifier|final
name|String
name|STATS_DESTINATION_PREFIX
init|=
literal|"ActiveMQ.Statistics.Destination"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StompAdvisoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ActiveMQConnection
name|connection
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addAdditionalPlugins
parameter_list|(
name|List
argument_list|<
name|BrokerPlugin
argument_list|>
name|plugins
parameter_list|)
throws|throws
name|Exception
block|{
name|plugins
operator|.
name|add
argument_list|(
operator|new
name|StatisticsBrokerPlugin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|applyBrokerPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setAdvisoryForFastProducers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForConsumed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDelivery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForDiscardingMessages
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryForSlowConsumers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setAdvisoryWhenFull
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConstantPendingMessageLimitStrategy
name|strategy
init|=
operator|new
name|ConstantPendingMessageLimitStrategy
argument_list|()
decl_stmt|;
name|strategy
operator|.
name|setLimit
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPendingMessageLimitStrategy
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
name|PolicyMap
name|pMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|pMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|pMap
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setAdvisorySupport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConnectionAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Connection"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|f
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Body is not null"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Body should have content"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConnectionAdvisoryJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_JSON
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Connection"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|f
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Body is not null"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Body should have content"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConnectionInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConnectionAdvisoryXML
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Connection"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<ConnectionInfo>"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
name|f
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Body is not null"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Body should have content"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<ConnectionInfo>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testConsumerAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testConsumerAdvisory"
argument_list|)
decl_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Consumer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ConsumerInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testProducerAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testProducerAdvisory"
argument_list|)
decl_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Producer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mess
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ProducerInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testProducerAdvisoryXML
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testProducerAdvisoryXML"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_ADVISORY_XML
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Producer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mess
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"<ProducerInfo>"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testProducerAdvisoryJSON
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|Destination
name|dest
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"testProducerAdvisoryJSON"
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|subheaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|subheaders
operator|.
name|put
argument_list|(
literal|"transformation"
argument_list|,
name|Stomp
operator|.
name|Transformations
operator|.
name|JMS_ADVISORY_JSON
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.Producer.>"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|,
name|subheaders
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|mess
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"ProducerInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStatisticsAdvisory
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|c
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Session
name|session
init|=
name|c
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|Topic
name|replyTo
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
comment|// Dummy Queue used to later gather statistics.
specifier|final
name|ActiveMQQueue
name|testQueue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queueToBeTestedForStats"
argument_list|)
decl_stmt|;
specifier|final
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Message
name|mess
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|testQueue
argument_list|,
name|mess
argument_list|)
expr_stmt|;
comment|// Create a request for Queue statistics
name|Thread
name|child
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|Queue
name|query
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|STATS_DESTINATION_PREFIX
operator|+
name|testQueue
operator|.
name|getQueueName
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
name|session
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setJMSReplyTo
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|query
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|child
operator|.
name|start
argument_list|()
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
comment|// Attempt to gather the statistics response from the previous request.
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/"
operator|+
name|replyTo
operator|.
name|getTopicName
argument_list|()
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|begin
argument_list|(
literal|"TX"
argument_list|)
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|stompConnection
operator|.
name|commit
argument_list|(
literal|"TX"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contains memoryUsage stats"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|contains
argument_list|(
literal|"memoryUsage"
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|stop
argument_list|()
expr_stmt|;
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDestinationAdvisoryTempQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|cf
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.TempQueue"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"DestinationInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDestinationAdvisoryTempTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|cf
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.TempTopic"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"DestinationInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDestinationAdvisoryCompositeTempDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|cf
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|connect
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|subscribe
argument_list|(
literal|"/topic/ActiveMQ.Advisory.TempTopic,/topic/ActiveMQ.Advisory.TempQueue"
argument_list|,
name|Stomp
operator|.
name|Headers
operator|.
name|Subscribe
operator|.
name|AckModeValues
operator|.
name|AUTO
argument_list|)
expr_stmt|;
comment|// Now connect via openwire and check we get the advisory
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
name|session
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
name|ObjectName
index|[]
name|topicSubscribers
init|=
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTopicSubscribers
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectName
name|subscription
range|:
name|topicSubscribers
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Topic Subscription: {}"
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|StompFrame
name|f
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"DestinationInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f
operator|.
name|getAction
argument_list|()
argument_list|,
literal|"MESSAGE"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have a body"
argument_list|,
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getBody
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"{\"DestinationInfo\":"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

