begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_comment
comment|/**  * Keeps track of a message that is flowing through the Broker.  This   * object may hold a hard reference to the message or only hold the  * id of the message if the message has been persisted on in a MessageStore.  *   * @version $Revision: 1.15 $  */
end_comment

begin_class
specifier|public
class|class
name|IndirectMessageReference
implements|implements
name|MessageReference
block|{
specifier|public
specifier|static
specifier|final
name|ActiveMQMessage
name|END_OF_BROWSE_MARKER_MESSAGE
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|IndirectMessageReference
name|END_OF_BROWSE_MARKER
init|=
operator|new
name|IndirectMessageReference
argument_list|(
name|END_OF_BROWSE_MARKER_MESSAGE
argument_list|)
decl_stmt|;
comment|/** The destination that is managing the message */
specifier|private
specifier|final
name|Destination
name|regionDestination
decl_stmt|;
comment|/** The id of the message is always valid */
specifier|private
specifier|final
name|MessageId
name|messageId
decl_stmt|;
comment|/** Is the message persistent? */
specifier|private
specifier|final
name|boolean
name|persistent
decl_stmt|;
specifier|private
specifier|final
name|String
name|groupID
decl_stmt|;
specifier|private
specifier|final
name|int
name|groupSequence
decl_stmt|;
specifier|private
specifier|final
name|ConsumerId
name|targetConsumerId
decl_stmt|;
comment|/** The number of times the message has been delivered.*/
specifier|private
name|short
name|redeliveryCounter
init|=
literal|0
decl_stmt|;
comment|/** The subscription that has locked the message */
specifier|private
name|Subscription
name|lockOwner
decl_stmt|;
comment|/** Has the message been dropped? */
specifier|private
name|boolean
name|dropped
decl_stmt|;
comment|/** Has the message been acked? */
specifier|private
name|boolean
name|acked
decl_stmt|;
comment|/** Direct reference to the message */
specifier|private
name|Message
name|message
decl_stmt|;
comment|/** The number of times the message has requested being hardened */
specifier|private
name|int
name|referenceCount
decl_stmt|;
comment|/**      * Only used by the END_OF_BROWSE_MARKER singleton      */
specifier|private
name|IndirectMessageReference
parameter_list|(
name|ActiveMQMessage
name|message
parameter_list|)
block|{
name|this
operator|.
name|regionDestination
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|messageId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|persistent
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|groupID
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|groupSequence
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|targetConsumerId
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|IndirectMessageReference
parameter_list|(
name|Destination
name|destination
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|regionDestination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|messageId
operator|=
name|message
operator|.
name|getMessageId
argument_list|()
expr_stmt|;
name|this
operator|.
name|persistent
operator|=
name|message
operator|.
name|isPersistent
argument_list|()
operator|&&
name|destination
operator|.
name|getMessageStore
argument_list|()
operator|!=
literal|null
expr_stmt|;
name|this
operator|.
name|groupID
operator|=
name|message
operator|.
name|getGroupID
argument_list|()
expr_stmt|;
name|this
operator|.
name|groupSequence
operator|=
name|message
operator|.
name|getGroupSequence
argument_list|()
expr_stmt|;
name|this
operator|.
name|targetConsumerId
operator|=
name|message
operator|.
name|getTargetConsumerId
argument_list|()
expr_stmt|;
name|this
operator|.
name|referenceCount
operator|=
literal|1
expr_stmt|;
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|Message
name|getMessageHardRef
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|synchronized
specifier|public
name|int
name|getReferenceCount
parameter_list|()
block|{
return|return
name|referenceCount
return|;
block|}
specifier|synchronized
specifier|public
name|int
name|incrementReferenceCount
parameter_list|()
block|{
name|int
name|rc
init|=
operator|++
name|referenceCount
decl_stmt|;
if|if
condition|(
name|persistent
operator|&&
name|rc
operator|==
literal|1
condition|)
block|{
assert|assert
name|message
operator|==
literal|null
assert|;
try|try
block|{
name|message
operator|=
name|regionDestination
operator|.
name|loadMessage
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|dropped
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|message
operator|.
name|incrementReferenceCount
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|rc
return|;
block|}
specifier|synchronized
specifier|public
name|int
name|decrementReferenceCount
parameter_list|()
block|{
name|int
name|rc
init|=
operator|--
name|referenceCount
decl_stmt|;
if|if
condition|(
name|persistent
operator|&&
name|rc
operator|==
literal|0
operator|&&
name|message
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|synchronized
specifier|public
name|Message
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Message "
operator|+
name|messageId
operator|+
literal|" dropped="
operator|+
name|dropped
operator|+
literal|" locked="
operator|+
operator|(
name|lockOwner
operator|!=
literal|null
operator|)
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|incrementRedeliveryCounter
parameter_list|()
block|{
name|this
operator|.
name|redeliveryCounter
operator|++
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|isDropped
parameter_list|()
block|{
return|return
name|dropped
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|drop
parameter_list|()
block|{
name|dropped
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|persistent
operator|&&
name|message
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
name|message
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|lock
parameter_list|(
name|Subscription
name|subscription
parameter_list|)
block|{
if|if
condition|(
operator|!
name|regionDestination
operator|.
name|lock
argument_list|(
name|this
argument_list|,
name|subscription
argument_list|)
condition|)
return|return
literal|false
return|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|lockOwner
operator|!=
literal|null
operator|&&
name|lockOwner
operator|!=
name|subscription
condition|)
return|return
literal|false
return|;
name|lockOwner
operator|=
name|subscription
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|unlock
parameter_list|()
block|{
name|lockOwner
operator|=
literal|null
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|Subscription
name|getLockOwner
parameter_list|()
block|{
return|return
name|lockOwner
return|;
block|}
specifier|synchronized
specifier|public
name|int
name|getRedeliveryCounter
parameter_list|()
block|{
return|return
name|redeliveryCounter
return|;
block|}
specifier|public
name|MessageId
name|getMessageId
parameter_list|()
block|{
return|return
name|messageId
return|;
block|}
specifier|public
name|Destination
name|getRegionDestination
parameter_list|()
block|{
return|return
name|regionDestination
return|;
block|}
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|lockOwner
operator|!=
literal|null
return|;
block|}
specifier|synchronized
specifier|public
name|boolean
name|isAcked
parameter_list|()
block|{
return|return
name|acked
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|setAcked
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|acked
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|String
name|getGroupID
parameter_list|()
block|{
return|return
name|groupID
return|;
block|}
specifier|public
name|int
name|getGroupSequence
parameter_list|()
block|{
return|return
name|groupSequence
return|;
block|}
specifier|public
name|ConsumerId
name|getTargetConsumerId
parameter_list|()
block|{
return|return
name|targetConsumerId
return|;
block|}
block|}
end_class

end_unit

