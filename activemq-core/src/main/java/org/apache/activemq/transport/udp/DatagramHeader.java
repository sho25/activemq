begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_comment
comment|/**  * Represents a header used when sending data grams  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|DatagramHeader
implements|implements
name|Comparable
block|{
specifier|private
name|String
name|producerId
decl_stmt|;
specifier|private
name|long
name|counter
decl_stmt|;
specifier|private
name|boolean
name|partial
decl_stmt|;
specifier|private
name|boolean
name|complete
decl_stmt|;
specifier|private
name|int
name|dataSize
decl_stmt|;
comment|// transient caches
specifier|private
specifier|transient
name|byte
index|[]
name|partialData
decl_stmt|;
specifier|private
specifier|transient
name|Command
name|command
decl_stmt|;
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|PRIME
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|PRIME
operator|*
name|result
operator|+
call|(
name|int
call|)
argument_list|(
name|counter
operator|^
operator|(
name|counter
operator|>>>
literal|32
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|final
name|DatagramHeader
name|other
init|=
operator|(
name|DatagramHeader
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|counter
operator|!=
name|other
operator|.
name|counter
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|DatagramHeader
name|that
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|this
operator|.
name|counter
operator|-
name|that
operator|.
name|counter
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|instanceof
name|DatagramHeader
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|DatagramHeader
operator|)
name|that
argument_list|)
return|;
block|}
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|that
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isComplete
parameter_list|()
block|{
return|return
name|complete
return|;
block|}
specifier|public
name|void
name|setComplete
parameter_list|(
name|boolean
name|complete
parameter_list|)
block|{
name|this
operator|.
name|complete
operator|=
name|complete
expr_stmt|;
block|}
specifier|public
name|long
name|getCounter
parameter_list|()
block|{
return|return
name|counter
return|;
block|}
specifier|public
name|void
name|setCounter
parameter_list|(
name|long
name|counter
parameter_list|)
block|{
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPartial
parameter_list|()
block|{
return|return
name|partial
return|;
block|}
specifier|public
name|void
name|setPartial
parameter_list|(
name|boolean
name|partial
parameter_list|)
block|{
name|this
operator|.
name|partial
operator|=
name|partial
expr_stmt|;
block|}
specifier|public
name|String
name|getProducerId
parameter_list|()
block|{
return|return
name|producerId
return|;
block|}
specifier|public
name|void
name|setProducerId
parameter_list|(
name|String
name|producerId
parameter_list|)
block|{
name|this
operator|.
name|producerId
operator|=
name|producerId
expr_stmt|;
block|}
specifier|public
name|int
name|getDataSize
parameter_list|()
block|{
return|return
name|dataSize
return|;
block|}
specifier|public
name|void
name|setDataSize
parameter_list|(
name|int
name|dataSize
parameter_list|)
block|{
name|this
operator|.
name|dataSize
operator|=
name|dataSize
expr_stmt|;
block|}
specifier|public
name|void
name|incrementCounter
parameter_list|()
block|{
name|counter
operator|++
expr_stmt|;
block|}
specifier|public
name|byte
name|getFlags
parameter_list|()
block|{
name|byte
name|answer
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|partial
condition|)
block|{
name|answer
operator||=
literal|0x1
expr_stmt|;
block|}
if|if
condition|(
name|complete
condition|)
block|{
name|answer
operator||=
literal|0x2
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|public
name|void
name|setFlags
parameter_list|(
name|byte
name|flags
parameter_list|)
block|{
name|partial
operator|=
operator|(
name|flags
operator|&
literal|0x1
operator|)
operator|!=
literal|0
expr_stmt|;
name|complete
operator|=
operator|(
name|flags
operator|&
literal|0x2
operator|)
operator|!=
literal|0
expr_stmt|;
block|}
specifier|public
name|Command
name|getCommand
parameter_list|()
block|{
return|return
name|command
return|;
block|}
specifier|public
name|void
name|setCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|this
operator|.
name|command
operator|=
name|command
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getPartialData
parameter_list|()
block|{
return|return
name|partialData
return|;
block|}
specifier|public
name|void
name|setPartialData
parameter_list|(
name|byte
index|[]
name|partialData
parameter_list|)
block|{
name|this
operator|.
name|partialData
operator|=
name|partialData
expr_stmt|;
block|}
comment|// Transient cached properties
block|}
end_class

end_unit

