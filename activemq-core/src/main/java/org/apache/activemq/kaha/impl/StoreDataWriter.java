begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_comment
comment|/**  * Optimized Store writer  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|final
class|class
name|StoreDataWriter
block|{
specifier|private
name|StoreByteArrayOutputStream
name|buffer
decl_stmt|;
specifier|private
name|DataManager
name|dataManager
decl_stmt|;
comment|/**      * Construct a Store writer      *       * @param file      */
name|StoreDataWriter
parameter_list|(
name|DataManager
name|fileManager
parameter_list|)
block|{
name|this
operator|.
name|dataManager
operator|=
name|fileManager
expr_stmt|;
name|this
operator|.
name|buffer
operator|=
operator|new
name|StoreByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
comment|/**      * @param marshaller      * @param payload      * @param data_item2       * @return      * @throws IOException      * @throws FileNotFoundException      */
name|DataItem
name|storeItem
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Object
name|payload
parameter_list|,
name|byte
name|type
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Write the packet our internal buffer.
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|position
argument_list|(
name|DataManager
operator|.
name|ITEM_HEAD_SIZE
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|writePayload
argument_list|(
name|payload
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|buffer
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|payloadSize
init|=
name|size
operator|-
name|DataManager
operator|.
name|ITEM_HEAD_SIZE
decl_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|writeInt
argument_list|(
name|payloadSize
argument_list|)
expr_stmt|;
comment|// Find the position where this item will land at.
name|DataItem
name|item
init|=
operator|new
name|DataItem
argument_list|()
decl_stmt|;
name|item
operator|.
name|setSize
argument_list|(
name|payloadSize
argument_list|)
expr_stmt|;
name|DataFile
name|dataFile
init|=
name|dataManager
operator|.
name|findSpaceForData
argument_list|(
name|item
argument_list|)
decl_stmt|;
comment|// Now splat the buffer to the file.
name|dataFile
operator|.
name|getRandomAccessFile
argument_list|()
operator|.
name|seek
argument_list|(
name|item
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|dataFile
operator|.
name|getRandomAccessFile
argument_list|()
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|dataFile
operator|.
name|incrementLength
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|dataManager
operator|.
name|addInterestInFile
argument_list|(
name|dataFile
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
block|}
end_class

end_unit

