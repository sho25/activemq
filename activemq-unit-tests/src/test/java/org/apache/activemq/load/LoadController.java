begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|load
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|LoadController
extends|extends
name|LoadClient
block|{
specifier|private
name|int
name|numberOfBatches
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|batchSize
init|=
literal|1000
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|stopped
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|LoadController
parameter_list|(
name|String
name|name
parameter_list|,
name|ConnectionFactory
name|factory
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|awaitTestComplete
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|stopped
operator|.
name|await
argument_list|(
literal|60
operator|*
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
return|return
name|count
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|JMSException
throws|,
name|InterruptedException
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|stopped
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfBatches
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batchSize
condition|;
name|j
operator|++
control|)
block|{
name|String
name|payLoad
init|=
literal|"batch["
operator|+
name|i
operator|+
literal|"]no:"
operator|+
name|j
decl_stmt|;
name|send
argument_list|(
name|payLoad
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|batchSize
condition|;
name|j
operator|++
control|)
block|{
name|String
name|result
init|=
name|consume
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|rate
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopped
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getNumberOfBatches
parameter_list|()
block|{
return|return
name|numberOfBatches
return|;
block|}
specifier|public
name|void
name|setNumberOfBatches
parameter_list|(
name|int
name|numberOfBatches
parameter_list|)
block|{
name|this
operator|.
name|numberOfBatches
operator|=
name|numberOfBatches
expr_stmt|;
block|}
specifier|public
name|int
name|getBatchSize
parameter_list|()
block|{
return|return
name|batchSize
return|;
block|}
specifier|public
name|void
name|setBatchSize
parameter_list|(
name|int
name|batchSize
parameter_list|)
block|{
name|this
operator|.
name|batchSize
operator|=
name|batchSize
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Destination
name|getSendDestination
parameter_list|()
block|{
return|return
name|startDestination
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Destination
name|getConsumeDestination
parameter_list|()
block|{
return|return
name|nextDestination
return|;
block|}
block|}
end_class

end_unit

