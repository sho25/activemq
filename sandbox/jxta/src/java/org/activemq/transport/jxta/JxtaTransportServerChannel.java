begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|jxta
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransportServerChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|p2psockets
operator|.
name|P2PInetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|p2psockets
operator|.
name|P2PServerSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ServerSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_comment
comment|/**  * Binds to a well known port and listens for Sockets ...  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|JxtaTransportServerChannel
extends|extends
name|TcpTransportServerChannel
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JxtaTransportServerChannel
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Default Constructor      *      * @param bindAddr      * @throws JMSException      */
specifier|public
name|JxtaTransportServerChannel
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|URI
name|bindAddr
parameter_list|)
throws|throws
name|JMSException
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|bindAddr
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return pretty print of this      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"P2pTransportServerChannel@"
operator|+
name|getUrl
argument_list|()
return|;
block|}
specifier|protected
name|ServerSocket
name|createServerSocket
parameter_list|(
name|URI
name|bind
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|ServerSocket
name|answer
init|=
literal|null
decl_stmt|;
name|String
name|host
init|=
name|bind
operator|.
name|getHost
argument_list|()
decl_stmt|;
comment|//        host = (host == null || host.length() == 0) ? "localhost" : host;
comment|//
comment|//        System.out.println("About to lookup host: " + host);
if|if
condition|(
name|host
operator|==
literal|null
operator|||
name|host
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|host
operator|.
name|equals
argument_list|(
literal|"localhost"
argument_list|)
condition|)
block|{
name|InetAddress
name|addr
init|=
name|P2PInetAddress
operator|.
name|getLocalHost
argument_list|()
decl_stmt|;
name|answer
operator|=
operator|new
name|P2PServerSocket
argument_list|(
name|bind
operator|.
name|getPort
argument_list|()
argument_list|,
name|getBacklog
argument_list|()
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InetAddress
name|addr
init|=
name|P2PInetAddress
operator|.
name|getByName
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|answer
operator|=
operator|new
name|P2PServerSocket
argument_list|(
name|bind
operator|.
name|getPort
argument_list|()
argument_list|,
name|getBacklog
argument_list|()
argument_list|,
name|addr
argument_list|)
expr_stmt|;
block|}
comment|/*         if (addr.equals(P2PInetAddress.getLocalHost())) {             answer = new P2PServerSocket(bind.getPort(), BACKLOG);         }         else {             answer = new P2PServerSocket(bind.getPort(), BACKLOG, addr);         }         */
comment|//answer = new P2PServerSocket(bind.toString(), BACKLOG);
return|return
name|answer
return|;
block|}
block|}
end_class

end_unit

