begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|// see https://issues.apache.org/activemq/browse/AMQ-2985
end_comment

begin_comment
comment|// this demonstrated receiving old messages eventually along with validating order receipt
end_comment

begin_class
specifier|public
class|class
name|DurableSubProcessTest
extends|extends
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DurableSubProcessTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|RUNTIME
init|=
literal|4
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SERVER_SLEEP
init|=
literal|2
operator|*
literal|1000
decl_stmt|;
comment|// max
specifier|public
specifier|static
specifier|final
name|int
name|CARGO_SIZE
init|=
literal|10
decl_stmt|;
comment|// max
specifier|public
specifier|static
specifier|final
name|int
name|MAX_CLIENTS
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Random
name|CLIENT_LIFETIME
init|=
operator|new
name|Random
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|2
operator|*
literal|60
operator|*
literal|1000
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Random
name|CLIENT_ONLINE
init|=
operator|new
name|Random
argument_list|(
literal|2
operator|*
literal|1000
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Random
name|CLIENT_OFFLINE
init|=
operator|new
name|Random
argument_list|(
literal|1
operator|*
literal|1000
argument_list|,
literal|20
operator|*
literal|1000
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|PERSISTENT_BROKER
init|=
literal|true
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|ALLOW_SUBSCRIPTION_ABANDONMENT
init|=
literal|true
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
specifier|private
name|ActiveMQTopic
name|topic
decl_stmt|;
specifier|private
name|ClientManager
name|clientManager
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
name|HouseKeeper
name|houseKeeper
decl_stmt|;
specifier|static
specifier|final
name|Vector
argument_list|<
name|Throwable
argument_list|>
name|exceptions
init|=
operator|new
name|Vector
argument_list|<
name|Throwable
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testProcess
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|clientManager
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|ALLOW_SUBSCRIPTION_ABANDONMENT
condition|)
name|houseKeeper
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|RUNTIME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"no exceptions: "
operator|+
name|exceptions
argument_list|,
name|exceptions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exit
argument_list|(
literal|"DurableSubProcessTest.testProcess failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"DONE."
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates batch of messages in a transaction periodically.      * The last message in the transaction is always a special      * message what contains info about the whole transaction.      *<p>Notifies the clients about the created messages also.      */
specifier|final
class|class
name|Server
extends|extends
name|Thread
block|{
specifier|final
name|String
name|url
init|=
literal|"vm://"
operator|+
name|DurableSubProcessTest
operator|.
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|"?"
operator|+
literal|"jms.redeliveryPolicy.maximumRedeliveries=2&jms.redeliveryPolicy.initialRedeliveryDelay=500&"
operator|+
literal|"jms.producerWindowSize=20971520&jms.prefetchPolicy.all=100&"
operator|+
literal|"jms.copyMessageOnSend=false&jms.disableTimeStampsByDefault=false&"
operator|+
literal|"jms.alwaysSyncSend=true&jms.dispatchAsync=false&"
operator|+
literal|"jms.watchTopicAdvisories=false&"
operator|+
literal|"waitForStart=200&create=false"
decl_stmt|;
specifier|final
name|ConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|sendMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|cargos
init|=
operator|new
name|String
index|[
literal|500
index|]
decl_stmt|;
name|int
name|transRover
init|=
literal|0
decl_stmt|;
name|int
name|messageRover
init|=
literal|0
decl_stmt|;
specifier|public
name|Server
parameter_list|()
block|{
name|super
argument_list|(
literal|"Server"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|DurableSubProcessTest
operator|.
name|sleepRandom
argument_list|(
name|SERVER_SLEEP
argument_list|)
expr_stmt|;
name|send
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exit
argument_list|(
literal|"Server.run failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|send
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// do not create new clients now
comment|// ToDo: Test this case later.
synchronized|synchronized
init|(
name|sendMutex
init|)
block|{
name|int
name|trans
init|=
operator|++
name|transRover
decl_stmt|;
name|boolean
name|relevantTrans
init|=
name|random
argument_list|(
literal|2
argument_list|)
operator|>
literal|1
decl_stmt|;
name|ClientType
name|clientType
init|=
name|relevantTrans
condition|?
name|ClientType
operator|.
name|randomClientType
argument_list|()
else|:
literal|null
decl_stmt|;
comment|// sends this types
name|int
name|count
init|=
name|random
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending Trans[id="
operator|+
name|trans
operator|+
literal|", count="
operator|+
name|count
operator|+
literal|", clientType="
operator|+
name|clientType
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|sess
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|prod
init|=
name|sess
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|sess
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"ID"
argument_list|,
operator|++
name|messageRover
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|clientType
operator|!=
literal|null
condition|?
name|clientType
operator|.
name|randomMessageType
argument_list|()
else|:
name|ClientType
operator|.
name|randomNonRelevantMessageType
argument_list|()
decl_stmt|;
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"TYPE"
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|CARGO_SIZE
operator|>
literal|0
condition|)
name|message
operator|.
name|setStringProperty
argument_list|(
literal|"CARGO"
argument_list|,
name|getCargo
argument_list|(
name|CARGO_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|prod
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|clientManager
operator|.
name|onServerMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|sess
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"ID"
argument_list|,
operator|++
name|messageRover
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"TRANS"
argument_list|,
name|trans
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"COMMIT"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setBooleanProperty
argument_list|(
literal|"RELEVANT"
argument_list|,
name|relevantTrans
argument_list|)
expr_stmt|;
name|prod
operator|.
name|send
argument_list|(
name|topic
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|clientManager
operator|.
name|onServerMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|sess
operator|.
name|commit
argument_list|()
expr_stmt|;
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getCargo
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|length
operator|<
name|cargos
operator|.
name|length
condition|)
block|{
name|String
name|result
init|=
name|cargos
index|[
name|length
index|]
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|getCargoImpl
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|cargos
index|[
name|length
index|]
operator|=
name|result
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|getCargoImpl
argument_list|(
name|length
argument_list|)
return|;
block|}
specifier|private
name|String
name|getCargoImpl
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|length
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Clients listen on different messages in the topic.      * The 'TYPE' property helps the client to select the      * proper messages.      */
specifier|private
enum|enum
name|ClientType
block|{
name|A
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|)
block|,
name|B
argument_list|(
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
block|,
name|C
argument_list|(
literal|"d"
argument_list|,
literal|"e"
argument_list|,
literal|"f"
argument_list|)
block|,
name|D
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|)
block|;
specifier|public
specifier|final
name|String
index|[]
name|messageTypes
decl_stmt|;
specifier|public
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|messageTypeSet
decl_stmt|;
specifier|public
specifier|final
name|String
name|selector
decl_stmt|;
name|ClientType
parameter_list|(
name|String
modifier|...
name|messageTypes
parameter_list|)
block|{
name|this
operator|.
name|messageTypes
operator|=
name|messageTypes
expr_stmt|;
name|messageTypeSet
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|messageTypes
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"TYPE in ("
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
operator|.
name|append
argument_list|(
name|messageTypes
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|selector
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|ClientType
name|randomClientType
parameter_list|()
block|{
return|return
name|values
argument_list|()
index|[
name|DurableSubProcessTest
operator|.
name|random
argument_list|(
name|values
argument_list|()
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
return|;
block|}
specifier|public
specifier|final
name|String
name|randomMessageType
parameter_list|()
block|{
return|return
name|messageTypes
index|[
name|DurableSubProcessTest
operator|.
name|random
argument_list|(
name|messageTypes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
return|;
block|}
specifier|public
specifier|static
name|String
name|randomNonRelevantMessageType
parameter_list|()
block|{
return|return
name|Integer
operator|.
name|toString
argument_list|(
name|DurableSubProcessTest
operator|.
name|random
argument_list|(
literal|20
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isRelevant
parameter_list|(
name|String
name|messageType
parameter_list|)
block|{
return|return
name|messageTypeSet
operator|.
name|contains
argument_list|(
name|messageType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
argument_list|()
comment|/*+ '[' + selector + ']'*/
return|;
block|}
block|}
comment|/**      * Creates new cliens.      */
specifier|private
specifier|final
class|class
name|ClientManager
extends|extends
name|Thread
block|{
specifier|private
name|int
name|clientRover
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Client
argument_list|>
name|clients
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Client
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ClientManager
parameter_list|()
block|{
name|super
argument_list|(
literal|"ClientManager"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|clients
operator|.
name|size
argument_list|()
operator|<
name|MAX_CLIENTS
condition|)
name|createNewClient
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|clients
operator|.
name|size
argument_list|()
decl_stmt|;
name|sleepRandom
argument_list|(
name|size
operator|*
literal|3
operator|*
literal|1000
argument_list|,
name|size
operator|*
literal|6
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exit
argument_list|(
literal|"ClientManager.run failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createNewClient
parameter_list|()
throws|throws
name|JMSException
block|{
name|ClientType
name|type
init|=
name|ClientType
operator|.
name|randomClientType
argument_list|()
decl_stmt|;
name|Client
name|client
decl_stmt|;
synchronized|synchronized
init|(
name|server
operator|.
name|sendMutex
init|)
block|{
name|client
operator|=
operator|new
name|Client
argument_list|(
operator|++
name|clientRover
argument_list|,
name|type
argument_list|,
name|CLIENT_LIFETIME
argument_list|,
name|CLIENT_ONLINE
argument_list|,
name|CLIENT_OFFLINE
argument_list|)
expr_stmt|;
name|clients
operator|.
name|add
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|client
operator|.
name|toString
argument_list|()
operator|+
literal|" created. "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeClient
parameter_list|(
name|Client
name|client
parameter_list|)
block|{
name|clients
operator|.
name|remove
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onServerMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
for|for
control|(
name|Client
name|client
range|:
name|clients
control|)
block|{
name|client
operator|.
name|onServerMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ClientManager[count="
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", clients="
argument_list|)
expr_stmt|;
name|boolean
name|sep
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Client
name|client
range|:
name|clients
control|)
block|{
if|if
condition|(
name|sep
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
else|else
name|sep
operator|=
literal|true
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|client
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**      * Consumes massages from a durable subscription.      * Goes online/offline periodically. Checks the incoming messages      * against the sent messages of the server.      */
specifier|private
specifier|final
class|class
name|Client
extends|extends
name|Thread
block|{
name|String
name|url
init|=
literal|"failover:(tcp://localhost:61656?wireFormat.maxInactivityDuration=0)?"
operator|+
literal|"jms.watchTopicAdvisories=false&"
operator|+
literal|"jms.alwaysSyncSend=true&jms.dispatchAsync=true&"
operator|+
literal|"jms.producerWindowSize=20971520&"
operator|+
literal|"jms.copyMessageOnSend=false&"
operator|+
literal|"initialReconnectDelay=100&maxReconnectDelay=30000&"
operator|+
literal|"useExponentialBackOff=true"
decl_stmt|;
specifier|final
name|ConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|url
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SUBSCRIPTION_NAME
init|=
literal|"subscription"
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|conClientId
decl_stmt|;
specifier|private
specifier|final
name|Random
name|lifetime
decl_stmt|;
specifier|private
specifier|final
name|Random
name|online
decl_stmt|;
specifier|private
specifier|final
name|Random
name|offline
decl_stmt|;
specifier|private
specifier|final
name|ClientType
name|clientType
decl_stmt|;
specifier|private
specifier|final
name|String
name|selector
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentLinkedQueue
argument_list|<
name|Message
argument_list|>
name|waitingList
init|=
operator|new
name|ConcurrentLinkedQueue
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Client
parameter_list|(
name|int
name|id
parameter_list|,
name|ClientType
name|clientType
parameter_list|,
name|Random
name|lifetime
parameter_list|,
name|Random
name|online
parameter_list|,
name|Random
name|offline
parameter_list|)
throws|throws
name|JMSException
block|{
name|super
argument_list|(
literal|"Client"
operator|+
name|id
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|conClientId
operator|=
literal|"cli"
operator|+
name|id
expr_stmt|;
name|this
operator|.
name|clientType
operator|=
name|clientType
expr_stmt|;
name|selector
operator|=
literal|"(COMMIT = true and RELEVANT = true) or "
operator|+
name|clientType
operator|.
name|selector
expr_stmt|;
name|this
operator|.
name|lifetime
operator|=
name|lifetime
expr_stmt|;
name|this
operator|.
name|online
operator|=
name|online
expr_stmt|;
name|this
operator|.
name|offline
operator|=
name|offline
expr_stmt|;
name|subscribe
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|lifetime
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|sleep
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|max
init|=
name|end
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|max
operator|<=
literal|0
condition|)
break|break;
if|if
condition|(
name|sleep
condition|)
name|offline
operator|.
name|sleepRandom
argument_list|()
expr_stmt|;
else|else
name|sleep
operator|=
literal|true
expr_stmt|;
name|process
argument_list|(
name|online
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ALLOW_SUBSCRIPTION_ABANDONMENT
operator|||
name|random
argument_list|(
literal|1
argument_list|)
operator|>
literal|0
condition|)
name|unsubscribe
argument_list|()
expr_stmt|;
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client abandon the subscription. "
operator|+
name|this
argument_list|)
expr_stmt|;
comment|// housekeeper should sweep these abandoned subscriptions
name|houseKeeper
operator|.
name|abandonedSubscriptions
operator|.
name|add
argument_list|(
name|conClientId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exit
argument_list|(
name|toString
argument_list|()
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|clientManager
operator|.
name|removeClient
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|toString
argument_list|()
operator|+
literal|" DONE."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|process
parameter_list|(
name|long
name|millis
parameter_list|)
throws|throws
name|JMSException
block|{
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|millis
decl_stmt|;
name|long
name|hardEnd
init|=
name|end
operator|+
literal|2000
decl_stmt|;
comment|// wait to finish the transaction.
name|boolean
name|inTransaction
init|=
literal|false
decl_stmt|;
name|int
name|transCount
init|=
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|toString
argument_list|()
operator|+
literal|" ONLINE."
argument_list|)
expr_stmt|;
name|Connection
name|con
init|=
name|openConnection
argument_list|()
decl_stmt|;
name|Session
name|sess
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|sess
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|SUBSCRIPTION_NAME
argument_list|,
name|selector
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
do|do
block|{
name|long
name|max
init|=
name|end
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|max
operator|<=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|inTransaction
condition|)
break|break;
name|max
operator|=
name|hardEnd
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|max
operator|<=
literal|0
condition|)
name|exit
argument_list|(
literal|""
operator|+
name|this
operator|+
literal|" failed: Transaction is not finished."
argument_list|)
expr_stmt|;
block|}
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
continue|continue;
name|onClientMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|propertyExists
argument_list|(
literal|"COMMIT"
argument_list|)
condition|)
block|{
name|message
operator|.
name|acknowledge
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received Trans[id="
operator|+
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"TRANS"
argument_list|)
operator|+
literal|", count="
operator|+
name|transCount
operator|+
literal|"] in "
operator|+
name|this
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|inTransaction
operator|=
literal|false
expr_stmt|;
name|transCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|inTransaction
operator|=
literal|true
expr_stmt|;
name|transCount
operator|++
expr_stmt|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
finally|finally
block|{
name|sess
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|toString
argument_list|()
operator|+
literal|" OFFLINE."
argument_list|)
expr_stmt|;
comment|// Check if the messages are in the waiting
comment|// list for long time.
name|Message
name|topMessage
init|=
name|waitingList
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|topMessage
operator|!=
literal|null
condition|)
name|checkDeliveryTime
argument_list|(
name|topMessage
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onServerMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getObjectProperty
argument_list|(
literal|"COMMIT"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|message
operator|.
name|getObjectProperty
argument_list|(
literal|"RELEVANT"
argument_list|)
argument_list|)
condition|)
name|waitingList
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|messageType
init|=
name|message
operator|.
name|getStringProperty
argument_list|(
literal|"TYPE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clientType
operator|.
name|isRelevant
argument_list|(
name|messageType
argument_list|)
condition|)
name|waitingList
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onClientMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Message
name|serverMessage
init|=
name|waitingList
operator|.
name|poll
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|serverMessage
operator|==
literal|null
condition|)
name|exit
argument_list|(
literal|""
operator|+
name|this
operator|+
literal|" failed: There is no next server message, but received: "
operator|+
name|message
argument_list|)
expr_stmt|;
name|Integer
name|receivedId
init|=
operator|(
name|Integer
operator|)
name|message
operator|.
name|getObjectProperty
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
name|Integer
name|serverId
init|=
operator|(
name|Integer
operator|)
name|serverMessage
operator|.
name|getObjectProperty
argument_list|(
literal|"ID"
argument_list|)
decl_stmt|;
if|if
condition|(
name|receivedId
operator|==
literal|null
operator|||
name|serverId
operator|==
literal|null
condition|)
name|exit
argument_list|(
literal|""
operator|+
name|this
operator|+
literal|" failed: message ID not found.\r\n"
operator|+
literal|" received: "
operator|+
name|message
operator|+
literal|"\r\n"
operator|+
literal|"   server: "
operator|+
name|serverMessage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|serverId
operator|.
name|equals
argument_list|(
name|receivedId
argument_list|)
condition|)
name|exit
argument_list|(
literal|""
operator|+
name|this
operator|+
literal|" failed: Received wrong message.\r\n"
operator|+
literal|" received: "
operator|+
name|message
operator|+
literal|"\r\n"
operator|+
literal|"   server: "
operator|+
name|serverMessage
argument_list|)
expr_stmt|;
name|checkDeliveryTime
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exit
argument_list|(
literal|""
operator|+
name|this
operator|+
literal|".onClientMessage failed.\r\n"
operator|+
literal|" received: "
operator|+
name|message
operator|+
literal|"\r\n"
operator|+
literal|"   server: "
operator|+
name|serverMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**          * Checks if the message was not delivered fast enough.          */
specifier|public
name|void
name|checkDeliveryTime
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|long
name|creation
init|=
name|message
operator|.
name|getJMSTimestamp
argument_list|()
decl_stmt|;
name|long
name|min
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
operator|(
name|offline
operator|.
name|max
operator|+
name|online
operator|.
name|min
operator|)
decl_stmt|;
if|if
condition|(
name|min
operator|>
name|creation
condition|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
name|exit
argument_list|(
literal|""
operator|+
name|this
operator|+
literal|".checkDeliveryTime failed. Message time: "
operator|+
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|creation
argument_list|)
argument_list|)
operator|+
literal|", min: "
operator|+
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|min
argument_list|)
argument_list|)
operator|+
literal|"\r\n"
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Connection
name|openConnection
parameter_list|()
throws|throws
name|JMSException
block|{
name|Connection
name|con
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|con
operator|.
name|setClientID
argument_list|(
name|conClientId
argument_list|)
expr_stmt|;
name|con
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|con
return|;
block|}
specifier|private
name|void
name|subscribe
parameter_list|()
throws|throws
name|JMSException
block|{
name|Connection
name|con
init|=
name|openConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|SUBSCRIPTION_NAME
argument_list|,
name|selector
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|unsubscribe
parameter_list|()
throws|throws
name|JMSException
block|{
name|Connection
name|con
init|=
name|openConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|con
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|unsubscribe
argument_list|(
name|SUBSCRIPTION_NAME
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Client[id="
operator|+
name|id
operator|+
literal|", type="
operator|+
name|clientType
operator|+
literal|"]"
return|;
block|}
block|}
comment|/**      * Sweeps out not-used durable subscriptions.      */
specifier|private
specifier|final
class|class
name|HouseKeeper
extends|extends
name|Thread
block|{
specifier|private
name|HouseKeeper
parameter_list|()
block|{
name|super
argument_list|(
literal|"HouseKeeper"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
name|abandonedSubscriptions
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|sweep
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Exception
name|log
init|=
operator|new
name|Exception
argument_list|(
literal|"HouseKeeper failed."
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|log
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|sweep
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Housekeeper sweeping."
argument_list|)
expr_stmt|;
name|int
name|closed
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|sweeped
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|clientId
range|:
name|abandonedSubscriptions
control|)
block|{
name|sweeped
operator|.
name|add
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sweeping out subscription of "
operator|+
name|clientId
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|destroyDurableSubscriber
argument_list|(
name|clientId
argument_list|,
name|Client
operator|.
name|SUBSCRIPTION_NAME
argument_list|)
expr_stmt|;
name|closed
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|abandonedSubscriptions
operator|.
name|removeAll
argument_list|(
name|sweeped
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Housekeeper sweeped out "
operator|+
name|closed
operator|+
literal|" subscriptions."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|int
name|random
parameter_list|(
name|int
name|max
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
operator|(
name|max
operator|+
literal|1
operator|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|random
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|random
argument_list|(
name|max
operator|-
name|min
argument_list|)
operator|+
name|min
return|;
block|}
specifier|public
specifier|static
name|void
name|sleepRandom
parameter_list|(
name|int
name|maxMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|random
argument_list|(
name|maxMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|sleepRandom
parameter_list|(
name|int
name|minMillis
parameter_list|,
name|int
name|maxMillis
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|random
argument_list|(
name|minMillis
argument_list|,
name|maxMillis
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
class|class
name|Random
block|{
specifier|final
name|int
name|min
decl_stmt|;
specifier|final
name|int
name|max
decl_stmt|;
name|Random
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
specifier|public
name|int
name|next
parameter_list|()
block|{
return|return
name|random
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
specifier|public
name|void
name|sleepRandom
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|DurableSubProcessTest
operator|.
name|sleepRandom
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|exit
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|exit
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|exit
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|log
init|=
operator|new
name|RuntimeException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|log
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|topic
operator|=
operator|(
name|ActiveMQTopic
operator|)
name|createDestination
argument_list|()
expr_stmt|;
name|startBroker
argument_list|()
expr_stmt|;
name|clientManager
operator|=
operator|new
name|ClientManager
argument_list|()
expr_stmt|;
name|server
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|houseKeeper
operator|=
operator|new
name|HouseKeeper
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|destroyBroker
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|startBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startBroker
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
return|return;
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
literal|"broker:(vm://localhost)"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setBrokerName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
if|if
condition|(
name|PERSISTENT_BROKER
condition|)
block|{
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|KahaDBPersistenceAdapter
name|persistenceAdapter
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|persistenceAdapter
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"activemq-data/"
operator|+
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
block|}
else|else
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61656"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|256
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|256
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|256
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|destroyBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
return|return;
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

