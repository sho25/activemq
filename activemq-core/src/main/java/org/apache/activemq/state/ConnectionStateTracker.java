begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TransactionRolledBackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|IntegerResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessagePull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tracks the state of a connection so a newly established transport can be  * re-initialized to the state that was tracked.  *   *   */
end_comment

begin_class
specifier|public
class|class
name|ConnectionStateTracker
extends|extends
name|CommandVisitorAdapter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConnectionStateTracker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Tracked
name|TRACKED_RESPONSE_MARKER
init|=
operator|new
name|Tracked
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionState
argument_list|>
name|connectionStates
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionState
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|trackTransactions
decl_stmt|;
specifier|private
name|boolean
name|restoreSessions
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|restoreConsumers
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|restoreProducers
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|restoreTransaction
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|trackMessages
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|trackTransactionProducers
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxCacheSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
specifier|private
name|int
name|currentCacheSize
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Command
argument_list|>
name|messageCache
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Command
argument_list|>
argument_list|()
block|{
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Command
argument_list|>
name|eldest
parameter_list|)
block|{
name|boolean
name|result
init|=
name|currentCacheSize
operator|>
name|maxCacheSize
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|eldest
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Message
condition|)
block|{
name|currentCacheSize
operator|-=
operator|(
operator|(
name|Message
operator|)
name|eldest
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|eldest
operator|.
name|getValue
argument_list|()
operator|instanceof
name|MessagePull
condition|)
block|{
name|currentCacheSize
operator|-=
literal|400
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
decl_stmt|;
specifier|private
class|class
name|RemoveTransactionAction
implements|implements
name|ResponseHandler
block|{
specifier|private
specifier|final
name|TransactionInfo
name|info
decl_stmt|;
specifier|public
name|RemoveTransactionAction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|void
name|onResponse
parameter_list|(
name|Command
name|response
parameter_list|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
name|cs
operator|.
name|removeTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|PrepareReadonlyTransactionAction
extends|extends
name|RemoveTransactionAction
block|{
specifier|public
name|PrepareReadonlyTransactionAction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onResponse
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|IntegerResponse
name|response
init|=
operator|(
name|IntegerResponse
operator|)
name|command
decl_stmt|;
if|if
condition|(
name|XAResource
operator|.
name|XA_RDONLY
operator|==
name|response
operator|.
name|getResult
argument_list|()
condition|)
block|{
comment|// all done, no commit or rollback from TM
name|super
operator|.
name|onResponse
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *       *       * @param command      * @return null if the command is not state tracked.      * @throws IOException      */
specifier|public
name|Tracked
name|track
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|(
name|Tracked
operator|)
name|command
operator|.
name|visit
argument_list|(
name|this
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|trackBack
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trackMessages
operator|&&
name|command
operator|.
name|isMessage
argument_list|()
condition|)
block|{
name|Message
name|message
init|=
operator|(
name|Message
operator|)
name|command
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getTransactionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|currentCacheSize
operator|=
name|currentCacheSize
operator|+
name|message
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|instanceof
name|MessagePull
condition|)
block|{
comment|// just needs to be a rough estimate of size, ~4 identifiers
name|currentCacheSize
operator|+=
literal|400
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|restore
parameter_list|(
name|Transport
name|transport
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Restore the connections.
for|for
control|(
name|Iterator
argument_list|<
name|ConnectionState
argument_list|>
name|iter
init|=
name|connectionStates
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ConnectionState
name|connectionState
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connectionState
operator|.
name|getInfo
argument_list|()
operator|.
name|setFailoverReconnect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"conn: "
operator|+
name|connectionState
operator|.
name|getInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|connectionState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
name|restoreTempDestinations
argument_list|(
name|transport
argument_list|,
name|connectionState
argument_list|)
expr_stmt|;
if|if
condition|(
name|restoreSessions
condition|)
block|{
name|restoreSessions
argument_list|(
name|transport
argument_list|,
name|connectionState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restoreTransaction
condition|)
block|{
name|restoreTransactions
argument_list|(
name|transport
argument_list|,
name|connectionState
argument_list|)
expr_stmt|;
block|}
block|}
comment|//now flush messages
for|for
control|(
name|Command
name|msg
range|:
name|messageCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"command: "
operator|+
name|msg
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|restoreTransactions
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|ConnectionState
name|connectionState
parameter_list|)
throws|throws
name|IOException
block|{
name|Vector
argument_list|<
name|TransactionInfo
argument_list|>
name|toRollback
init|=
operator|new
name|Vector
argument_list|<
name|TransactionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TransactionState
name|transactionState
range|:
name|connectionState
operator|.
name|getTransactionStates
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"tx: "
operator|+
name|transactionState
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// rollback any completed transactions - no way to know if commit got there
comment|// or if reply went missing
comment|//
if|if
condition|(
operator|!
name|transactionState
operator|.
name|getCommands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Command
name|lastCommand
init|=
name|transactionState
operator|.
name|getCommands
argument_list|()
operator|.
name|get
argument_list|(
name|transactionState
operator|.
name|getCommands
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastCommand
operator|instanceof
name|TransactionInfo
condition|)
block|{
name|TransactionInfo
name|transactionInfo
init|=
operator|(
name|TransactionInfo
operator|)
name|lastCommand
decl_stmt|;
if|if
condition|(
name|transactionInfo
operator|.
name|getType
argument_list|()
operator|==
name|TransactionInfo
operator|.
name|COMMIT_ONE_PHASE
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"rolling back potentially completed tx: "
operator|+
name|transactionState
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|toRollback
operator|.
name|add
argument_list|(
name|transactionInfo
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
comment|// replay short lived producers that may have been involved in the transaction
for|for
control|(
name|ProducerState
name|producerState
range|:
name|transactionState
operator|.
name|getProducerStates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"tx replay producer :"
operator|+
name|producerState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|producerState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Command
name|command
range|:
name|transactionState
operator|.
name|getCommands
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"tx replay: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ProducerState
name|producerState
range|:
name|transactionState
operator|.
name|getProducerStates
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"tx remove replayed producer :"
operator|+
name|producerState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|producerState
operator|.
name|getInfo
argument_list|()
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TransactionInfo
name|command
range|:
name|toRollback
control|)
block|{
comment|// respond to the outstanding commit
name|ExceptionResponse
name|response
init|=
operator|new
name|ExceptionResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|setException
argument_list|(
operator|new
name|TransactionRolledBackException
argument_list|(
literal|"Transaction completion in doubt due to failover. Forcing rollback of "
operator|+
name|command
operator|.
name|getTransactionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|.
name|getTransportListener
argument_list|()
operator|.
name|onCommand
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param transport      * @param connectionState      * @throws IOException      */
specifier|protected
name|void
name|restoreSessions
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|ConnectionState
name|connectionState
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Restore the connection's sessions
for|for
control|(
name|Iterator
name|iter2
init|=
name|connectionState
operator|.
name|getSessionStates
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SessionState
name|sessionState
init|=
operator|(
name|SessionState
operator|)
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"session: "
operator|+
name|sessionState
operator|.
name|getInfo
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|sessionState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|restoreProducers
condition|)
block|{
name|restoreProducers
argument_list|(
name|transport
argument_list|,
name|sessionState
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|restoreConsumers
condition|)
block|{
name|restoreConsumers
argument_list|(
name|transport
argument_list|,
name|sessionState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param transport      * @param sessionState      * @throws IOException      */
specifier|protected
name|void
name|restoreConsumers
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|SessionState
name|sessionState
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Restore the session's consumers but possibly in pull only (prefetch 0 state) till recovery complete
specifier|final
name|ConnectionState
name|connectionState
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|sessionState
operator|.
name|getInfo
argument_list|()
operator|.
name|getSessionId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|connectionInterruptionProcessingComplete
init|=
name|connectionState
operator|.
name|isConnectionInterruptProcessingComplete
argument_list|()
decl_stmt|;
for|for
control|(
name|ConsumerState
name|consumerState
range|:
name|sessionState
operator|.
name|getConsumerStates
argument_list|()
control|)
block|{
name|ConsumerInfo
name|infoToSend
init|=
name|consumerState
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connectionInterruptionProcessingComplete
operator|&&
name|infoToSend
operator|.
name|getPrefetchSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|infoToSend
operator|=
name|consumerState
operator|.
name|getInfo
argument_list|()
operator|.
name|copy
argument_list|()
expr_stmt|;
name|connectionState
operator|.
name|getRecoveringPullConsumers
argument_list|()
operator|.
name|put
argument_list|(
name|infoToSend
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|consumerState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
name|infoToSend
operator|.
name|setPrefetchSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"restore consumer: "
operator|+
name|infoToSend
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|" in pull mode pending recovery, overriding prefetch: "
operator|+
name|consumerState
operator|.
name|getInfo
argument_list|()
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"restore consumer: "
operator|+
name|infoToSend
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|infoToSend
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param transport      * @param sessionState      * @throws IOException      */
specifier|protected
name|void
name|restoreProducers
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|SessionState
name|sessionState
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Restore the session's producers
for|for
control|(
name|Iterator
name|iter3
init|=
name|sessionState
operator|.
name|getProducerStates
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProducerState
name|producerState
init|=
operator|(
name|ProducerState
operator|)
name|iter3
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"producer: "
operator|+
name|producerState
operator|.
name|getInfo
argument_list|()
operator|.
name|getProducerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|producerState
operator|.
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param transport      * @param connectionState      * @throws IOException      */
specifier|protected
name|void
name|restoreTempDestinations
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|ConnectionState
name|connectionState
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Restore the connection's temp destinations.
for|for
control|(
name|Iterator
name|iter2
init|=
name|connectionState
operator|.
name|getTempDestinations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|transport
operator|.
name|oneway
argument_list|(
operator|(
name|DestinationInfo
operator|)
name|iter2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Response
name|processAddDestination
parameter_list|(
name|DestinationInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|cs
operator|.
name|addTempDestination
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processRemoveDestination
parameter_list|(
name|DestinationInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|cs
operator|.
name|removeTempDestination
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processAddProducer
parameter_list|(
name|ProducerInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getProducerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SessionId
name|sessionId
init|=
name|info
operator|.
name|getProducerId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|addProducer
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processRemoveProducer
parameter_list|(
name|ProducerId
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|SessionId
name|sessionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|removeProducer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processAddConsumer
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|SessionId
name|sessionId
init|=
name|info
operator|.
name|getConsumerId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|addConsumer
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processRemoveConsumer
parameter_list|(
name|ConsumerId
name|id
parameter_list|,
name|long
name|lastDeliveredSequenceId
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|SessionId
name|sessionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|sessionId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|removeConsumer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processAddSession
parameter_list|(
name|SessionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getSessionId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|addSession
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processRemoveSession
parameter_list|(
name|SessionId
name|id
parameter_list|,
name|long
name|lastDeliveredSequenceId
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|id
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|removeSession
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processAddConnection
parameter_list|(
name|ConnectionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|connectionStates
operator|.
name|put
argument_list|(
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|,
operator|new
name|ConnectionState
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processRemoveConnection
parameter_list|(
name|ConnectionId
name|id
parameter_list|,
name|long
name|lastDeliveredSequenceId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|connectionStates
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
specifier|public
name|Response
name|processMessage
parameter_list|(
name|Message
name|send
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|send
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|trackTransactions
operator|&&
name|send
operator|.
name|getTransactionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ProducerId
name|producerId
init|=
name|send
operator|.
name|getProducerId
argument_list|()
decl_stmt|;
name|ConnectionId
name|connectionId
init|=
name|producerId
operator|.
name|getParentId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|TransactionState
name|transactionState
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|send
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionState
operator|!=
literal|null
condition|)
block|{
name|transactionState
operator|.
name|addCommand
argument_list|(
name|send
argument_list|)
expr_stmt|;
if|if
condition|(
name|trackTransactionProducers
condition|)
block|{
comment|// for jmstemplate, track the producer in case it is closed before commit
comment|// and needs to be replayed
name|SessionState
name|ss
init|=
name|cs
operator|.
name|getSessionState
argument_list|(
name|producerId
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
name|ProducerState
name|producerState
init|=
name|ss
operator|.
name|getProducerState
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
name|producerState
operator|.
name|setTransactionState
argument_list|(
name|transactionState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
elseif|else
if|if
condition|(
name|trackMessages
condition|)
block|{
name|messageCache
operator|.
name|put
argument_list|(
name|send
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|send
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processBeginTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|trackTransactions
operator|&&
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getTransactionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|cs
operator|.
name|addTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|TransactionState
name|state
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
name|state
operator|.
name|addCommand
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processPrepareTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|trackTransactions
operator|&&
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|TransactionState
name|transactionState
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionState
operator|!=
literal|null
condition|)
block|{
name|transactionState
operator|.
name|addCommand
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tracked
argument_list|(
operator|new
name|PrepareReadonlyTransactionAction
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processCommitTransactionOnePhase
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|trackTransactions
operator|&&
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|TransactionState
name|transactionState
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionState
operator|!=
literal|null
condition|)
block|{
name|transactionState
operator|.
name|addCommand
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tracked
argument_list|(
operator|new
name|RemoveTransactionAction
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processCommitTransactionTwoPhase
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|trackTransactions
operator|&&
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|TransactionState
name|transactionState
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionState
operator|!=
literal|null
condition|)
block|{
name|transactionState
operator|.
name|addCommand
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tracked
argument_list|(
operator|new
name|RemoveTransactionAction
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processRollbackTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|trackTransactions
operator|&&
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|TransactionState
name|transactionState
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionState
operator|!=
literal|null
condition|)
block|{
name|transactionState
operator|.
name|addCommand
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tracked
argument_list|(
operator|new
name|RemoveTransactionAction
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Response
name|processEndTransaction
parameter_list|(
name|TransactionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|trackTransactions
operator|&&
name|info
operator|!=
literal|null
condition|)
block|{
name|ConnectionId
name|connectionId
init|=
name|info
operator|.
name|getConnectionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectionId
operator|!=
literal|null
condition|)
block|{
name|ConnectionState
name|cs
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cs
operator|!=
literal|null
condition|)
block|{
name|TransactionState
name|transactionState
init|=
name|cs
operator|.
name|getTransactionState
argument_list|(
name|info
operator|.
name|getTransactionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|transactionState
operator|!=
literal|null
condition|)
block|{
name|transactionState
operator|.
name|addCommand
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|TRACKED_RESPONSE_MARKER
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|processMessagePull
parameter_list|(
name|MessagePull
name|pull
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|pull
operator|!=
literal|null
condition|)
block|{
comment|// leave a single instance in the cache
specifier|final
name|String
name|id
init|=
name|pull
operator|.
name|getDestination
argument_list|()
operator|+
literal|"::"
operator|+
name|pull
operator|.
name|getConsumerId
argument_list|()
decl_stmt|;
name|messageCache
operator|.
name|put
argument_list|(
name|id
operator|.
name|intern
argument_list|()
argument_list|,
name|pull
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isRestoreConsumers
parameter_list|()
block|{
return|return
name|restoreConsumers
return|;
block|}
specifier|public
name|void
name|setRestoreConsumers
parameter_list|(
name|boolean
name|restoreConsumers
parameter_list|)
block|{
name|this
operator|.
name|restoreConsumers
operator|=
name|restoreConsumers
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRestoreProducers
parameter_list|()
block|{
return|return
name|restoreProducers
return|;
block|}
specifier|public
name|void
name|setRestoreProducers
parameter_list|(
name|boolean
name|restoreProducers
parameter_list|)
block|{
name|this
operator|.
name|restoreProducers
operator|=
name|restoreProducers
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRestoreSessions
parameter_list|()
block|{
return|return
name|restoreSessions
return|;
block|}
specifier|public
name|void
name|setRestoreSessions
parameter_list|(
name|boolean
name|restoreSessions
parameter_list|)
block|{
name|this
operator|.
name|restoreSessions
operator|=
name|restoreSessions
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTrackTransactions
parameter_list|()
block|{
return|return
name|trackTransactions
return|;
block|}
specifier|public
name|void
name|setTrackTransactions
parameter_list|(
name|boolean
name|trackTransactions
parameter_list|)
block|{
name|this
operator|.
name|trackTransactions
operator|=
name|trackTransactions
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTrackTransactionProducers
parameter_list|()
block|{
return|return
name|this
operator|.
name|trackTransactionProducers
return|;
block|}
specifier|public
name|void
name|setTrackTransactionProducers
parameter_list|(
name|boolean
name|trackTransactionProducers
parameter_list|)
block|{
name|this
operator|.
name|trackTransactionProducers
operator|=
name|trackTransactionProducers
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRestoreTransaction
parameter_list|()
block|{
return|return
name|restoreTransaction
return|;
block|}
specifier|public
name|void
name|setRestoreTransaction
parameter_list|(
name|boolean
name|restoreTransaction
parameter_list|)
block|{
name|this
operator|.
name|restoreTransaction
operator|=
name|restoreTransaction
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTrackMessages
parameter_list|()
block|{
return|return
name|trackMessages
return|;
block|}
specifier|public
name|void
name|setTrackMessages
parameter_list|(
name|boolean
name|trackMessages
parameter_list|)
block|{
name|this
operator|.
name|trackMessages
operator|=
name|trackMessages
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxCacheSize
parameter_list|()
block|{
return|return
name|maxCacheSize
return|;
block|}
specifier|public
name|void
name|setMaxCacheSize
parameter_list|(
name|int
name|maxCacheSize
parameter_list|)
block|{
name|this
operator|.
name|maxCacheSize
operator|=
name|maxCacheSize
expr_stmt|;
block|}
specifier|public
name|void
name|connectionInterruptProcessingComplete
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|ConnectionId
name|connectionId
parameter_list|)
block|{
name|ConnectionState
name|connectionState
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionState
operator|!=
literal|null
condition|)
block|{
name|connectionState
operator|.
name|setConnectionInterruptProcessingComplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerInfo
argument_list|>
name|stalledConsumers
init|=
name|connectionState
operator|.
name|getRecoveringPullConsumers
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerInfo
argument_list|>
name|entry
range|:
name|stalledConsumers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ConsumerControl
name|control
init|=
operator|new
name|ConsumerControl
argument_list|()
decl_stmt|;
name|control
operator|.
name|setConsumerId
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|setPrefetch
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getPrefetchSize
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|setDestination
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"restored recovering consumer: "
operator|+
name|control
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|" with: "
operator|+
name|control
operator|.
name|getPrefetch
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transport
operator|.
name|oneway
argument_list|(
name|control
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to submit control for consumer: "
operator|+
name|control
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|" with: "
operator|+
name|control
operator|.
name|getPrefetch
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|stalledConsumers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportInterrupted
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|)
block|{
name|ConnectionState
name|connectionState
init|=
name|connectionStates
operator|.
name|get
argument_list|(
name|connectionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectionState
operator|!=
literal|null
condition|)
block|{
name|connectionState
operator|.
name|setConnectionInterruptProcessingComplete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

