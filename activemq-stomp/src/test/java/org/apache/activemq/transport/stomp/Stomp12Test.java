begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Stomp12Test
extends|extends
name|StompTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Stomp12Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Socket
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|this
operator|.
name|port
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getQueueName
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTelnetStyleSends
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"CONNECT\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|String
name|send
init|=
literal|"SUBSCRIBE\r\n"
operator|+
literal|"id:1\r\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\r\n"
operator|+
literal|"receipt:1\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|send
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testClientAckWithoutAckId
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"activemq.prefetchSize=1\n"
operator|+
literal|"ack:client\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"1"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ackId
init|=
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
decl_stmt|;
comment|// Put ACK ID in wrong header
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"message-id:"
operator|+
name|ackId
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|received
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|received
argument_list|)
expr_stmt|;
comment|// Now place it in the correct location and check it still works.
name|frame
operator|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|ackId
operator|+
literal|"\n"
operator|+
literal|"receipt:2\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testClientAck
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"ack:client\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"1"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"2"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stomp Message: {}"
argument_list|,
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|received
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stomp Message: {}"
argument_list|,
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconnect and send some messages to the offline subscribers and then try to get
comment|// them after subscribing again.
name|stompConnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"3"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stomp Message: {}"
argument_list|,
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testClientAckMultipleMessagesWithSingleAck
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10
decl_stmt|;
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// Send some messages
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"ack:client\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE_COUNT
argument_list|,
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|lastAckId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|lastAckId
operator|=
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
expr_stmt|;
block|}
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|lastAckId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testClientIndividualAck
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"ack:client-individual\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"1"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"2"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|received
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|<=
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
comment|// reconnect and send some messages to the offline subscribers and then try to get
comment|// them after subscribing again.
name|stompConnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|message
operator|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"3"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|received
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message1AckId
init|=
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
decl_stmt|;
name|frame
operator|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|message1AckId
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|received
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|message3AckId
init|=
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
decl_stmt|;
name|frame
operator|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|message3AckId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRepeatedClientIndividualAckInMultipleTransactions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|50
decl_stmt|;
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// Send some messages
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Subscribe to the queue
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"activemq.prefetchSize:1\n"
operator|+
literal|"ack:client-individual\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
comment|// Receive all messages, each in their own transaction
comment|// Ensure we don't have any errors
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ack& Commit the first message
name|String
name|begin
init|=
literal|"BEGIN\n"
operator|+
literal|"transaction:tx"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|begin
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"transaction:tx"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
literal|"\n"
operator|+
literal|"id:"
operator|+
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|String
name|commit
init|=
literal|"COMMIT\n"
operator|+
literal|"transaction:tx"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|String
name|frame
init|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|<=
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testQueueBrowerSubscription
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MSG_COUNT
init|=
literal|10
decl_stmt|;
name|String
name|connectFrame
init|=
literal|"STOMP\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n"
operator|+
literal|"accept-version:1.2\n"
operator|+
literal|"host:localhost\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:0\n"
operator|+
literal|"\n"
operator|+
literal|"Hello World {"
operator|+
name|i
operator|+
literal|"}"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|StompFrame
name|repsonse
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|repsonse
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"id:12345\n"
operator|+
literal|"browser:true\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|StompFrame
name|message
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|,
name|message
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// We should now get a browse done message
name|StompFrame
name|browseDone
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Browse Done: "
operator|+
name|browseDone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|,
name|browseDone
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
name|browseDone
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"end"
argument_list|,
name|browseDone
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|BROWSER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|browseDone
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|DESTINATION
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|unsub
init|=
literal|"UNSUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"id:12345\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|unsub
argument_list|)
expr_stmt|;
name|StompFrame
name|stompFrame
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|stompFrame
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|subscribe
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"id:12345\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|StompFrame
name|message
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|,
name|message
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|unsub
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testQueueBrowerNotInAutoAckMode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|connectFrame
init|=
literal|"STOMP\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n"
operator|+
literal|"accept-version:1.2\n"
operator|+
literal|"host:localhost\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:client\n"
operator|+
literal|"id:12345\n"
operator|+
literal|"browser:true\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
comment|// We should now get a browse done message
name|StompFrame
name|browseDone
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Browse Done: "
operator|+
name|browseDone
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|,
name|browseDone
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
name|browseDone
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"end"
argument_list|,
name|browseDone
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|BROWSER
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|browseDone
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|DESTINATION
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|String
name|unsub
init|=
literal|"UNSUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"id:12345\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|unsub
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDurableSubAndUnSub
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerViewMBean
name|view
init|=
name|getProxyToBroker
argument_list|()
decl_stmt|;
name|String
name|connectFrame
init|=
literal|"STOMP\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n"
operator|+
literal|"accept-version:1.2\n"
operator|+
literal|"host:localhost\n"
operator|+
literal|"client-id:durableSubTest\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// subscribe to destination durably
name|frame
operator|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/topic/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"1"
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"id:durablesub-1\n"
operator|+
literal|"activemq.subscriptionName:test1\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\nclient-id:test\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|stompConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|<=
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// unsubscribe from topic
name|frame
operator|=
literal|"UNSUBSCRIBE\n"
operator|+
literal|"destination:/topic/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"1\n"
operator|+
literal|"id:durablesub-1\n"
operator|+
literal|"receipt:3\n"
operator|+
literal|"activemq.subscriptionName:test1\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|view
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSubscribeWithNoId
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|connectFrame
init|=
literal|"STOMP\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n"
operator|+
literal|"accept-version:1.2\n"
operator|+
literal|"host:localhost\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"ack:auto\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"ERROR"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSizeAndBrokerUsage
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MSG_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numK
init|=
literal|4
decl_stmt|;
specifier|final
name|byte
index|[]
name|bigPropContent
init|=
operator|new
name|byte
index|[
name|numK
operator|*
literal|1024
index|]
decl_stmt|;
comment|// fill so we don't fall foul to trimming in v<earlier than 1.2>
name|Arrays
operator|.
name|fill
argument_list|(
name|bigPropContent
argument_list|,
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|bigProp
init|=
operator|new
name|String
argument_list|(
name|bigPropContent
argument_list|)
decl_stmt|;
name|String
name|connectFrame
init|=
literal|"STOMP\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n"
operator|+
literal|"accept-version:1.2\n"
operator|+
literal|"host:localhost\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|usageStart
init|=
name|brokerService
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:0\n"
operator|+
literal|"myXkProp:"
operator|+
name|bigProp
operator|+
literal|"\n"
operator|+
literal|"\n"
operator|+
literal|"Hello World {"
operator|+
name|i
operator|+
literal|"}"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|StompFrame
name|repsonse
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"response:"
operator|+
name|repsonse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|repsonse
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify usage accounts for our numK
name|long
name|usageEnd
init|=
name|brokerService
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|long
name|usageDiff
init|=
name|usageEnd
operator|-
name|usageStart
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"usageDiff:"
operator|+
name|usageDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|usageDiff
operator|>
name|MSG_COUNT
operator|*
name|numK
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"id:12345\n"
operator|+
literal|"browser:true\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MSG_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|StompFrame
name|message
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|,
name|message
operator|.
name|getAction
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
name|message
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|SUBSCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAckMessagesAfterTransactionAbortClientIndividualAckMode
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMessagesRetirementAfterTransactionAbortClientIndividualAckMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNackMessagesAfterTransactionAbortClientIndividualAckMode
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMessagesRetirementAfterTransactionAbortClientIndividualAckMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestMessagesRetirementAfterTransactionAbortClientIndividualAckMode
parameter_list|(
name|boolean
name|nack
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10
decl_stmt|;
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// Send some messages
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Subscribe to the queue
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"activemq.prefetchSize:1\n"
operator|+
literal|"ack:client-individual\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
comment|// Start a TX that will later be aborted.
name|String
name|begin
init|=
literal|"BEGIN\n"
operator|+
literal|"transaction:tx1"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|begin
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ackIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|MESSAGE_COUNT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ackIds
operator|.
name|add
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"transaction:tx1"
operator|+
literal|"\n"
operator|+
literal|"id:"
operator|+
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
name|String
name|commit
init|=
literal|"ABORT\n"
operator|+
literal|"transaction:tx1"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
name|MESSAGE_COUNT
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ackId
range|:
name|ackIds
control|)
block|{
if|if
condition|(
name|nack
condition|)
block|{
name|String
name|frame
init|=
literal|"NACK\n"
operator|+
literal|"id:"
operator|+
name|ackId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|ackId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|<=
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAckMessagesAfterTransactionAbortClientAckMode
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMessagesRetirementAfterTransactionAbortClientAckMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testNackMessagesAfterTransactionAbortClientAckMode
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMessagesRetirementAfterTransactionAbortClientAckMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTestMessagesRetirementAfterTransactionAbortClientAckMode
parameter_list|(
name|boolean
name|nack
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10
decl_stmt|;
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// Send some messages
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Subscribe to the queue
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"activemq.prefetchSize:"
operator|+
name|MESSAGE_COUNT
operator|+
literal|"\n"
operator|+
literal|"ack:client\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
comment|// Start a TX that will later be aborted.
name|String
name|begin
init|=
literal|"BEGIN\n"
operator|+
literal|"transaction:tx1"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|begin
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ackIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|MESSAGE_COUNT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ackIds
operator|.
name|add
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Client ACK that enlists all messages in the TX
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"transaction:tx1"
operator|+
literal|"\n"
operator|+
literal|"id:"
operator|+
name|ackIds
operator|.
name|get
argument_list|(
name|MESSAGE_COUNT
operator|-
literal|1
argument_list|)
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
name|MESSAGE_COUNT
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|commit
init|=
literal|"ABORT\n"
operator|+
literal|"transaction:tx1"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
name|MESSAGE_COUNT
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|ackId
range|:
name|ackIds
control|)
block|{
if|if
condition|(
name|nack
condition|)
block|{
name|frame
operator|=
literal|"NACK\n"
operator|+
literal|"id:"
operator|+
name|ackId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|ackId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
expr_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|<=
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMixedAckNackWithMessageAckIdsClientAck
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMixedAckNackWithMessageAckIds
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMixedAckNackWithMessageAckIdsClientIndividualAck
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestMixedAckNackWithMessageAckIds
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestMixedAckNackWithMessageAckIds
parameter_list|(
name|boolean
name|individual
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|20
decl_stmt|;
name|stompConnection
operator|.
name|setVersion
argument_list|(
name|Stomp
operator|.
name|V1_2
argument_list|)
expr_stmt|;
name|String
name|connect
init|=
literal|"STOMP\r\n"
operator|+
literal|"accept-version:1.2\r\n"
operator|+
literal|"login:system\r\n"
operator|+
literal|"passcode:manager\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"\u0000\r\n"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connect
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|f
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"version:1.2"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|indexOf
argument_list|(
literal|"session:"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
comment|// Send some messages
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|String
name|message
init|=
literal|"SEND\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
comment|// Subscribe to the queue
name|String
name|subscribe
init|=
literal|"SUBSCRIBE\n"
operator|+
literal|"id:1\n"
operator|+
literal|"activemq.prefetchSize:"
operator|+
name|MESSAGE_COUNT
operator|+
literal|"\n"
operator|+
literal|"ack:"
operator|+
operator|(
name|individual
condition|?
literal|"client-individual"
else|:
literal|"client"
operator|)
operator|+
literal|"\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n"
operator|+
literal|"receipt:1\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|subscribe
argument_list|)
expr_stmt|;
name|StompFrame
name|receipt
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|receiptId
init|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ackIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|MESSAGE_COUNT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|MESSAGE_COUNT
condition|;
name|n
operator|++
control|)
block|{
name|StompFrame
name|received
init|=
name|stompConnection
operator|.
name|receive
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getAction
argument_list|()
operator|.
name|equals
argument_list|(
literal|"MESSAGE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%d"
argument_list|,
name|n
argument_list|)
argument_list|,
name|received
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
name|ackIds
operator|.
name|add
argument_list|(
name|received
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Message
operator|.
name|ACK_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
name|MESSAGE_COUNT
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|nack
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|ackId
range|:
name|ackIds
control|)
block|{
if|if
condition|(
name|nack
condition|)
block|{
name|String
name|frame
init|=
literal|"NACK\n"
operator|+
literal|"id:"
operator|+
name|ackId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|nack
operator|=
operator|!
name|nack
expr_stmt|;
block|}
else|else
block|{
name|String
name|frame
init|=
literal|"ACK\n"
operator|+
literal|"id:"
operator|+
name|ackId
operator|+
literal|"\n"
operator|+
literal|"receipt:2"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|nack
operator|=
operator|!
name|nack
expr_stmt|;
block|}
name|receipt
operator|=
name|stompConnection
operator|.
name|receive
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent: "
operator|+
name|receipt
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|receipt
operator|.
name|getAction
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
name|receiptId
operator|=
name|receipt
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"receipt-id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|receiptId
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
operator|.
name|getQueueSize
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|frame
init|=
literal|"DISCONNECT\n"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getProxyToBroker
argument_list|()
operator|.
name|getCurrentConnectionsCount
argument_list|()
operator|<=
literal|1
return|;
block|}
block|}
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toMillis
argument_list|(
literal|5
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toMillis
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

