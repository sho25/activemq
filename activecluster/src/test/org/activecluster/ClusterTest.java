begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2005 LogicBlaze, Inc. (http://www.logicblaze.com)  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activecluster
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.4 $  */
end_comment

begin_class
specifier|public
class|class
name|ClusterTest
extends|extends
name|ClusterTestSupport
block|{
specifier|protected
name|int
name|count
init|=
literal|2
decl_stmt|;
specifier|public
name|void
name|xtestCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|createCluster
argument_list|()
expr_stmt|;
name|subscribeToCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|destination
init|=
name|cluster
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|cluster
operator|.
name|createTextMessage
argument_list|(
literal|"abcdef"
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|//clusterListener.waitForMessageToArrive();
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|List
name|list
init|=
name|clusterListener
operator|.
name|flushMessages
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have received a message: "
operator|+
name|list
argument_list|,
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Received message: "
operator|+
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMembershipCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|Cluster
index|[]
name|clusters
init|=
operator|new
name|Cluster
index|[
name|count
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Cluster
name|cluster
init|=
name|createCluster
argument_list|(
literal|"node:"
operator|+
name|i
argument_list|)
decl_stmt|;
name|clusters
index|[
name|i
index|]
operator|=
name|cluster
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|cluster
operator|.
name|addClusterListener
argument_list|(
operator|new
name|TestingClusterListener
argument_list|(
name|cluster
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|start
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"started "
operator|+
name|clusters
index|[
name|i
index|]
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"waiting to complete ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|count
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Cluster
name|cluster
init|=
name|clusters
index|[
name|i
index|]
decl_stmt|;
name|String
name|localName
init|=
name|cluster
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|completed
init|=
name|cluster
operator|.
name|waitForClusterToComplete
argument_list|(
name|count
operator|-
literal|1
argument_list|,
literal|5000
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Node: "
operator|+
name|i
operator|+
literal|" with contents: "
operator|+
name|dumpConnectedNodes
argument_list|(
name|cluster
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|,
name|completed
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|localName
operator|+
literal|" completed = "
operator|+
name|completed
operator|+
literal|" nodes = "
operator|+
name|dumpConnectedNodes
argument_list|(
name|cluster
operator|.
name|getNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertClusterMembership
argument_list|(
name|clusters
argument_list|)
expr_stmt|;
comment|// lets wait for a while to see if things fail
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000L
argument_list|)
expr_stmt|;
name|assertClusterMembership
argument_list|(
name|clusters
argument_list|)
expr_stmt|;
name|Cluster
name|testCluster
init|=
name|clusters
index|[
literal|0
index|]
decl_stmt|;
name|LocalNode
name|testNode
init|=
name|testCluster
operator|.
name|getLocalNode
argument_list|()
decl_stmt|;
name|String
name|key
init|=
literal|"key"
decl_stmt|;
name|String
name|value
init|=
literal|"value"
decl_stmt|;
name|Map
name|map
init|=
name|testNode
operator|.
name|getState
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|setState
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|clusters
index|[
name|i
index|]
operator|.
name|getNodes
argument_list|()
operator|.
name|get
argument_list|(
name|testNode
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The current test node should be in the cluster: "
operator|+
name|i
argument_list|,
name|node
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|node
operator|.
name|getState
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|equals
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|clusters
index|[
name|i
index|]
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Is coordinator = "
operator|+
name|clusters
index|[
name|i
index|]
operator|.
name|getLocalNode
argument_list|()
operator|.
name|isCoordinator
argument_list|()
argument_list|)
expr_stmt|;
name|clusters
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertClusterMembership
parameter_list|(
name|Cluster
index|[]
name|clusters
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cluster: "
operator|+
name|i
operator|+
literal|" = "
operator|+
name|clusters
index|[
name|i
index|]
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Size of clusters for cluster: "
operator|+
name|i
argument_list|,
name|count
operator|-
literal|1
argument_list|,
name|clusters
index|[
name|i
index|]
operator|.
name|getNodes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|clusters
index|[
name|i
index|]
operator|.
name|getLocalNode
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Is coordinator = "
operator|+
name|clusters
index|[
name|i
index|]
operator|.
name|getLocalNode
argument_list|()
operator|.
name|isCoordinator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

