begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authz
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|AnyDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authz
operator|.
name|permission
operator|.
name|WildcardPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|DestinationActionPermissionResolverTest
block|{
specifier|private
name|DestinationActionPermissionResolver
name|resolver
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|this
operator|.
name|resolver
operator|=
operator|new
name|DestinationActionPermissionResolver
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaults
parameter_list|()
block|{
name|assertNull
argument_list|(
name|resolver
operator|.
name|getPermissionStringPrefix
argument_list|()
argument_list|)
expr_stmt|;
comment|//default is true to reflect ActiveMQ's case-sensitive destination names:
name|assertTrue
argument_list|(
name|resolver
operator|.
name|isPermissionStringCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermissionStringPrefixProp
parameter_list|()
block|{
name|String
name|prefix
init|=
literal|"foo"
decl_stmt|;
name|resolver
operator|.
name|setPermissionStringPrefix
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prefix
argument_list|,
name|resolver
operator|.
name|getPermissionStringPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCaseSensitiveProp
parameter_list|()
block|{
name|resolver
operator|.
name|setPermissionStringCaseSensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resolver
operator|.
name|isPermissionStringCaseSensitive
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPermissionsWithNonDestinationActionInstance
parameter_list|()
block|{
name|resolver
operator|.
name|getPermissions
argument_list|(
operator|new
name|Action
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"foo"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetPermissionsWithNullArgument
parameter_list|()
block|{
name|resolver
operator|.
name|getPermissions
argument_list|(
operator|(
name|Action
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|assertPermString
parameter_list|(
name|String
name|perm
parameter_list|,
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|perm
argument_list|,
name|perms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsWithTopic
parameter_list|()
block|{
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"myTopic"
argument_list|)
decl_stmt|;
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|topic
argument_list|,
literal|"create"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|resolver
operator|.
name|getPermissions
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertPermString
argument_list|(
literal|"topic:myTopic:create"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsWithTemporaryTopic
parameter_list|()
block|{
name|ActiveMQTempTopic
name|topic
init|=
operator|new
name|ActiveMQTempTopic
argument_list|(
literal|"myTempTopic"
argument_list|)
decl_stmt|;
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|topic
argument_list|,
literal|"remove"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|resolver
operator|.
name|getPermissions
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertPermString
argument_list|(
literal|"temp-topic:myTempTopic:remove"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsWithQueue
parameter_list|()
block|{
name|ActiveMQQueue
name|queue
init|=
operator|new
name|ActiveMQQueue
argument_list|(
literal|"myQueue"
argument_list|)
decl_stmt|;
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|queue
argument_list|,
literal|"write"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|resolver
operator|.
name|getPermissions
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertPermString
argument_list|(
literal|"queue:myQueue:write"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsWithTemporaryQueue
parameter_list|()
block|{
name|ActiveMQTempQueue
name|queue
init|=
operator|new
name|ActiveMQTempQueue
argument_list|(
literal|"myTempQueue"
argument_list|)
decl_stmt|;
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|queue
argument_list|,
literal|"read"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|resolver
operator|.
name|getPermissions
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertPermString
argument_list|(
literal|"temp-queue:myTempQueue:read"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermissionWithPrefix
parameter_list|()
block|{
name|resolver
operator|.
name|setPermissionStringPrefix
argument_list|(
literal|"activeMQ"
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"myTopic"
argument_list|)
decl_stmt|;
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|topic
argument_list|,
literal|"create"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|resolver
operator|.
name|getPermissions
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertPermString
argument_list|(
literal|"activeMQ:topic:myTopic:create"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
comment|//Ensures if they explicitly set a prefix with a colon suffix that we don't add another one
annotation|@
name|Test
specifier|public
name|void
name|testPermissionWithPrefixAndExplicitColon
parameter_list|()
block|{
name|resolver
operator|.
name|setPermissionStringPrefix
argument_list|(
literal|"activeMQ:"
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"myTopic"
argument_list|)
decl_stmt|;
name|DestinationAction
name|action
init|=
operator|new
name|DestinationAction
argument_list|(
operator|new
name|ConnectionContext
argument_list|()
argument_list|,
name|topic
argument_list|,
literal|"create"
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Permission
argument_list|>
name|perms
init|=
name|resolver
operator|.
name|getPermissions
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|assertPermString
argument_list|(
literal|"activeMQ:topic:myTopic:create"
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAlternateWildcardPermissionToStringWithMultipleActions
parameter_list|()
block|{
name|Permission
name|perm
init|=
name|resolver
operator|.
name|createPermission
argument_list|(
literal|"foo:bar:action1,action2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|perm
operator|instanceof
name|WildcardPermission
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:bar:action1,action2"
argument_list|,
name|perm
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreatePermissionStringWithCompositeDestination
parameter_list|()
block|{
name|ActiveMQTopic
name|topicA
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topicB
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"B"
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|composite
init|=
operator|new
name|AnyDestination
argument_list|(
operator|new
name|ActiveMQDestination
index|[]
block|{
name|topicA
block|,
name|topicB
block|}
argument_list|)
decl_stmt|;
name|resolver
operator|.
name|createPermissionString
argument_list|(
name|composite
argument_list|,
literal|"read"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

