begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Tests for conversion capabilities of LegacyFrameTranslator  */
end_comment

begin_class
specifier|public
class|class
name|LegacyFrameTranslatorTest
block|{
specifier|private
name|ProtocolConverter
name|converter
decl_stmt|;
specifier|private
name|LegacyFrameTranslator
name|translator
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|converter
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ProtocolConverter
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Stub out a temp destination creation
name|Mockito
operator|.
name|when
argument_list|(
name|converter
operator|.
name|createTempDestination
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ActiveMQDestination
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|String
name|name
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|topic
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|1
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
name|name
operator|=
literal|"temp-"
operator|+
operator|(
name|topic
condition|?
literal|"topic://"
else|:
literal|"queue://X:"
operator|)
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|name
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|translator
operator|=
operator|new
name|LegacyFrameTranslator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
literal|"/queue/test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
literal|"/topic/test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertTemporaryQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
literal|"/temp-queue/test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertTemporaryTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
literal|"/temp-topic/test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertRemoteTempQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
literal|"/remote-temp-queue/test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertRemoteTempTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
literal|"/remote-temp-topic/test"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertCompositeQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|destinationA
init|=
literal|"destinationA"
decl_stmt|;
name|String
name|destinationB
init|=
literal|"destinationB"
decl_stmt|;
name|String
name|composite
init|=
literal|"/queue/"
operator|+
name|destinationA
operator|+
literal|",/queue/"
operator|+
name|destinationB
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
name|composite
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
index|[]
name|composites
init|=
name|destination
operator|.
name|getCompositeDestinations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|composites
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|composites
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|,
name|composites
index|[
literal|0
index|]
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|,
name|composites
index|[
literal|1
index|]
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|destinationA
argument_list|,
name|composites
index|[
literal|0
index|]
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|destinationB
argument_list|,
name|composites
index|[
literal|1
index|]
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertCompositeTopics
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|destinationA
init|=
literal|"destinationA"
decl_stmt|;
name|String
name|destinationB
init|=
literal|"destinationB"
decl_stmt|;
name|String
name|composite
init|=
literal|"/topic/"
operator|+
name|destinationA
operator|+
literal|",/topic/"
operator|+
name|destinationB
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
name|composite
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
index|[]
name|composites
init|=
name|destination
operator|.
name|getCompositeDestinations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|composites
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|composites
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|,
name|composites
index|[
literal|0
index|]
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|,
name|composites
index|[
literal|1
index|]
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|destinationA
argument_list|,
name|composites
index|[
literal|0
index|]
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|destinationB
argument_list|,
name|composites
index|[
literal|1
index|]
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertCompositeQueueAndTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|destinationA
init|=
literal|"destinationA"
decl_stmt|;
name|String
name|destinationB
init|=
literal|"destinationB"
decl_stmt|;
name|String
name|composite
init|=
literal|"/queue/"
operator|+
name|destinationA
operator|+
literal|",/topic/"
operator|+
name|destinationB
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
name|composite
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
index|[]
name|composites
init|=
name|destination
operator|.
name|getCompositeDestinations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|composites
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|composites
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|,
name|composites
index|[
literal|0
index|]
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|,
name|composites
index|[
literal|1
index|]
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|destinationA
argument_list|,
name|composites
index|[
literal|0
index|]
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|destinationB
argument_list|,
name|composites
index|[
literal|1
index|]
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConvertCompositeMixture
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|destinationA
init|=
literal|"destinationA"
decl_stmt|;
name|String
name|destinationB
init|=
literal|"destinationB"
decl_stmt|;
name|String
name|destinationC
init|=
literal|"destinationC"
decl_stmt|;
name|String
name|destinationD
init|=
literal|"destinationD"
decl_stmt|;
name|String
name|composite
init|=
literal|"/queue/"
operator|+
name|destinationA
operator|+
literal|",/topic/"
operator|+
name|destinationB
operator|+
literal|",/temp-queue/"
operator|+
name|destinationC
operator|+
literal|",/temp-topic/"
operator|+
name|destinationD
decl_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|translator
operator|.
name|convertDestination
argument_list|(
name|converter
argument_list|,
name|composite
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|,
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|destination
operator|.
name|isComposite
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
index|[]
name|composites
init|=
name|destination
operator|.
name|getCompositeDestinations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|composites
operator|.
name|length
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|composites
argument_list|)
expr_stmt|;
name|boolean
name|foundQueue
init|=
literal|false
decl_stmt|;
name|boolean
name|foundTopic
init|=
literal|false
decl_stmt|;
name|boolean
name|foundTempTopic
init|=
literal|false
decl_stmt|;
name|boolean
name|foundTempQueue
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|composites
control|)
block|{
if|if
condition|(
name|dest
operator|.
name|getDestinationType
argument_list|()
operator|==
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
condition|)
block|{
name|foundQueue
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|.
name|getDestinationType
argument_list|()
operator|==
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
condition|)
block|{
name|foundTopic
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|.
name|getDestinationType
argument_list|()
operator|==
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
condition|)
block|{
name|foundTempTopic
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|.
name|getDestinationType
argument_list|()
operator|==
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
condition|)
block|{
name|foundTempQueue
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|foundQueue
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundTopic
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundTempTopic
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundTempQueue
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

