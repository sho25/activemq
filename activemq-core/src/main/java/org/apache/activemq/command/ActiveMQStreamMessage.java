begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DeflaterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|InflaterInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageEOFException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotReadableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|StreamMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_comment
comment|/**  * A<CODE>StreamMessage</CODE> object is used to send a stream of primitive  * types in the Java programming language. It is filled and read sequentially.  * It inherits from the<CODE>Message</CODE> interface and adds a stream  * message body. Its methods are based largely on those found in<CODE>java.io.DataInputStream</CODE>  * and<CODE>java.io.DataOutputStream</CODE>.<p/>  *<P>  * The primitive types can be read or written explicitly using methods for each  * type. They may also be read or written generically as objects. For instance,  * a call to<CODE>StreamMessage.writeInt(6)</CODE> is equivalent to<CODE>StreamMessage.writeObject(new  * Integer(6))</CODE>. Both forms are provided, because the explicit form is  * convenient for static programming, and the object form is needed when types  * are not known at compile time.<p/>  *<P>  * When the message is first created, and when<CODE>clearBody</CODE> is  * called, the body of the message is in write-only mode. After the first call  * to<CODE>reset</CODE> has been made, the message body is in read-only mode.  * After a message has been sent, the client that sent it can retain and modify  * it without affecting the message that has been sent. The same message object  * can be sent multiple times. When a message has been received, the provider  * has called<CODE>reset</CODE> so that the message body is in read-only mode  * for the client.<p/>  *<P>  * If<CODE>clearBody</CODE> is called on a message in read-only mode, the  * message body is cleared and the message body is in write-only mode.<p/>  *<P>  * If a client attempts to read a message in write-only mode, a<CODE>MessageNotReadableException</CODE>  * is thrown.<p/>  *<P>  * If a client attempts to write a message in read-only mode, a<CODE>MessageNotWriteableException</CODE>  * is thrown.<p/>  *<P>  *<CODE>StreamMessage</CODE> objects support the following conversion table.  * The marked cases must be supported. The unmarked cases must throw a<CODE>JMSException</CODE>.  * The<CODE>String</CODE>-to-primitive conversions may throw a runtime  * exception if the primitive's<CODE>valueOf()</CODE> method does not accept  * it as a valid<CODE>String</CODE> representation of the primitive.<p/>  *<P>  * A value written as the row type can be read as the column type.<p/>  *   *<PRE> | | boolean byte short char int long float double String byte[]  * |----------------------------------------------------------------------  * |boolean | X X |byte | X X X X X |short | X X X X |char | X X |int | X X X  * |long | X X |float | X X X |double | X X |String | X X X X X X X X |byte[] |  * X |----------------------------------------------------------------------  *   *</PRE>  *   *<p/>  *<P>  * Attempting to read a null value as a primitive type must be treated as  * calling the primitive's corresponding<code>valueOf(String)</code>  * conversion method with a null value. Since<code>char</code> does not  * support a<code>String</code> conversion, attempting to read a null value  * as a<code>char</code> must throw a<code>NullPointerException</code>.  *   * @openwire:marshaller code="27"  * @see javax.jms.Session#createStreamMessage()  * @see javax.jms.BytesMessage  * @see javax.jms.MapMessage  * @see javax.jms.Message  * @see javax.jms.ObjectMessage  * @see javax.jms.TextMessage  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQStreamMessage
extends|extends
name|ActiveMQMessage
implements|implements
name|StreamMessage
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|ACTIVEMQ_STREAM_MESSAGE
decl_stmt|;
comment|/**      * message property types      */
specifier|private
specifier|final
specifier|static
name|byte
name|BYTES
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|STRING
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|BOOLEAN
init|=
literal|5
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|CHAR
init|=
literal|6
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|BYTE
init|=
literal|7
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|SHORT
init|=
literal|8
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|INT
init|=
literal|9
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|LONG
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|FLOAT
init|=
literal|11
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|DOUBLE
init|=
literal|12
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
name|NULL
init|=
literal|13
decl_stmt|;
specifier|transient
specifier|protected
name|DataOutputStream
name|dataOut
decl_stmt|;
specifier|transient
specifier|protected
name|ByteArrayOutputStream
name|bytesOut
decl_stmt|;
specifier|transient
specifier|protected
name|DataInputStream
name|dataIn
decl_stmt|;
specifier|transient
specifier|protected
name|int
name|remainingBytes
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Message
name|copy
parameter_list|()
block|{
name|ActiveMQStreamMessage
name|copy
init|=
operator|new
name|ActiveMQStreamMessage
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|ActiveMQStreamMessage
name|copy
parameter_list|)
block|{
name|storeContent
argument_list|()
expr_stmt|;
name|super
operator|.
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|copy
operator|.
name|dataOut
operator|=
literal|null
expr_stmt|;
name|copy
operator|.
name|bytesOut
operator|=
literal|null
expr_stmt|;
name|copy
operator|.
name|dataIn
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|onSend
parameter_list|()
block|{
name|super
operator|.
name|onSend
argument_list|()
expr_stmt|;
name|storeContent
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|storeContent
parameter_list|()
block|{
if|if
condition|(
name|dataOut
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dataOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|setContent
argument_list|(
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
argument_list|)
expr_stmt|;
name|bytesOut
operator|=
literal|null
expr_stmt|;
name|dataOut
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
comment|/**      * Clears out the message body. Clearing a message's body does not clear its      * header values or property entries.<p/>      *<P>      * If this message body was read-only, calling this method leaves the      * message body in the same state as an empty body in a newly created      * message.      *       * @throws JMSException      *             if the JMS provider fails to clear the message body due to      *             some internal error.      */
specifier|public
name|void
name|clearBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|super
operator|.
name|clearBody
argument_list|()
expr_stmt|;
name|this
operator|.
name|dataOut
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataIn
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bytesOut
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|remainingBytes
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**      * Reads a<code>boolean</code> from the stream message.      *       * @return the<code>boolean</code> value read      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|BOOLEAN
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readBoolean
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to boolean."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a boolean type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a<code>byte</code> value from the stream message.      *       * @return the next byte from the stream message as a 8-bit      *<code>byte</code>      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|BYTE
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readByte
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to byte."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a byte type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a 16-bit integer from the stream message.      *       * @return a 16-bit integer from the stream message      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|SHORT
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readShort
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BYTE
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readByte
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|)
operator|.
name|shortValue
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to short."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a short type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a Unicode character value from the stream message.      *       * @return a Unicode character from the stream message      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|char
name|readChar
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|CHAR
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readChar
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to char."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a char type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a 32-bit integer from the stream message.      *       * @return a 32-bit integer value from the stream message, interpreted as an      *<code>int</code>      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|33
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|INT
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readInt
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|SHORT
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readShort
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BYTE
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readByte
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to int."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not an int type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a 64-bit integer from the stream message.      *       * @return a 64-bit integer value from the stream message, interpreted as a      *<code>long</code>      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|LONG
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readLong
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|INT
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readInt
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|SHORT
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readShort
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BYTE
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readByte
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to long."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a long type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a<code>float</code> from the stream message.      *       * @return a<code>float</code> value from the stream message      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|33
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|FLOAT
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readFloat
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|)
operator|.
name|floatValue
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to float."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a float type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a<code>double</code> from the stream message.      *       * @return a<code>double</code> value from the stream message      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|DOUBLE
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readDouble
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|FLOAT
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readFloat
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
argument_list|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Cannot convert NULL value to double."
argument_list|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a double type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a<CODE>String</CODE> from the stream message.      *       * @return a Unicode string from the stream message      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      */
specifier|public
name|String
name|readString
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|LONG
condition|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|INT
condition|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|SHORT
condition|)
block|{
return|return
operator|new
name|Short
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readShort
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BYTE
condition|)
block|{
return|return
operator|new
name|Byte
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readByte
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|FLOAT
condition|)
block|{
return|return
operator|new
name|Float
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readFloat
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|DOUBLE
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readDouble
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BOOLEAN
condition|)
block|{
return|return
operator|(
name|this
operator|.
name|dataIn
operator|.
name|readBoolean
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
operator|)
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|CHAR
condition|)
block|{
return|return
operator|new
name|Character
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readChar
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|" not a String type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageEOFException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|createMessageFormatException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Reads a byte array field from the stream message into the specified      *<CODE>byte[]</CODE> object (the read buffer).<p/>      *<P>      * To read the field value,<CODE>readBytes</CODE> should be successively      * called until it returns a value less than the length of the read buffer.      * The value of the bytes in the buffer following the last byte read is      * undefined.<p/>      *<P>      * If<CODE>readBytes</CODE> returns a value equal to the length of the      * buffer, a subsequent<CODE>readBytes</CODE> call must be made. If there      * are no more bytes to be read, this call returns -1.<p/>      *<P>      * If the byte array field value is null,<CODE>readBytes</CODE> returns      * -1.<p/>      *<P>      * If the byte array field value is empty,<CODE>readBytes</CODE> returns      * 0.<p/>      *<P>      * Once the first<CODE>readBytes</CODE> call on a<CODE>byte[]</CODE>      * field value has been made, the full value of the field must be read      * before it is valid to read the next field. An attempt to read the next      * field before that has been done will throw a<CODE>MessageFormatException</CODE>.      *<p/>      *<P>      * To read the byte field value into a new<CODE>byte[]</CODE> object, use      * the<CODE>readObject</CODE> method.      *       * @param value      *            the buffer into which the data is read      * @return the total number of bytes read into the buffer, or -1 if there is      *         no more data because the end of the byte field has been reached      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      * @see #readObject()      */
specifier|public
name|int
name|readBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|if
condition|(
name|remainingBytes
operator|==
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
name|value
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|!=
name|BYTES
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Not a byte array"
argument_list|)
throw|;
block|}
name|remainingBytes
operator|=
name|this
operator|.
name|dataIn
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remainingBytes
operator|==
literal|0
condition|)
block|{
name|remainingBytes
operator|=
operator|-
literal|1
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
if|if
condition|(
name|value
operator|.
name|length
operator|<=
name|remainingBytes
condition|)
block|{
comment|// small buffer
name|remainingBytes
operator|-=
name|value
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|dataIn
operator|.
name|readFully
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|value
operator|.
name|length
return|;
block|}
else|else
block|{
comment|// big buffer
name|int
name|rc
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|remainingBytes
argument_list|)
decl_stmt|;
name|remainingBytes
operator|=
literal|0
expr_stmt|;
return|return
name|rc
return|;
block|}
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|JMSException
name|jmsEx
init|=
operator|new
name|MessageEOFException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|jmsEx
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|JMSException
name|jmsEx
init|=
operator|new
name|MessageFormatException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|jmsEx
throw|;
block|}
block|}
comment|/**      * Reads an object from the stream message.<p/>      *<P>      * This method can be used to return, in objectified format, an object in      * the Java programming language ("Java object") that has been written to      * the stream with the equivalent<CODE>writeObject</CODE> method call, or      * its equivalent primitive<CODE>write<I>type</I></CODE> method.<p/>      *<P>      * Note that byte values are returned as<CODE>byte[]</CODE>, not<CODE>Byte[]</CODE>.      *<p/>      *<P>      * An attempt to call<CODE>readObject</CODE> to read a byte field value      * into a new<CODE>byte[]</CODE> object before the full value of the byte      * field has been read will throw a<CODE>MessageFormatException</CODE>.      *       * @return a Java object from the stream message, in objectified format (for      *         example, if the object was written as an<CODE>int</CODE>, an      *<CODE>Integer</CODE> is returned)      * @throws JMSException      *             if the JMS provider fails to read the message due to some      *             internal error.      * @throws MessageEOFException      *             if unexpected end of message stream has been reached.      * @throws MessageFormatException      *             if this type conversion is invalid.      * @throws MessageNotReadableException      *             if the message is in write-only mode.      * @see #readBytes(byte[] value)      */
specifier|public
name|Object
name|readObject
parameter_list|()
throws|throws
name|JMSException
block|{
name|initializeReading
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|mark
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|int
name|type
init|=
name|this
operator|.
name|dataIn
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MessageEOFException
argument_list|(
literal|"reached end of data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
name|NULL
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|type
operator|==
name|STRING
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readUTF
argument_list|()
return|;
block|}
if|if
condition|(
name|type
operator|==
name|LONG
condition|)
block|{
return|return
operator|new
name|Long
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readLong
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|INT
condition|)
block|{
return|return
operator|new
name|Integer
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readInt
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|SHORT
condition|)
block|{
return|return
operator|new
name|Short
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readShort
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BYTE
condition|)
block|{
return|return
operator|new
name|Byte
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readByte
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|FLOAT
condition|)
block|{
return|return
operator|new
name|Float
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readFloat
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|DOUBLE
condition|)
block|{
return|return
operator|new
name|Double
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readDouble
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BOOLEAN
condition|)
block|{
return|return
name|this
operator|.
name|dataIn
operator|.
name|readBoolean
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
if|if
condition|(
name|type
operator|==
name|CHAR
condition|)
block|{
return|return
operator|new
name|Character
argument_list|(
name|this
operator|.
name|dataIn
operator|.
name|readChar
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|type
operator|==
name|BYTES
condition|)
block|{
name|int
name|len
init|=
name|this
operator|.
name|dataIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|this
operator|.
name|dataIn
operator|.
name|readFully
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|value
return|;
block|}
else|else
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"unknown type"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|mfe
parameter_list|)
block|{
try|try
block|{
name|this
operator|.
name|dataIn
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
throw|throw
name|mfe
throw|;
block|}
catch|catch
parameter_list|(
name|EOFException
name|e
parameter_list|)
block|{
name|JMSException
name|jmsEx
init|=
operator|new
name|MessageEOFException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|jmsEx
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|JMSException
name|jmsEx
init|=
operator|new
name|MessageFormatException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|jmsEx
throw|;
block|}
block|}
comment|/**      * Writes a<code>boolean</code> to the stream message. The value      *<code>true</code> is written as the value<code>(byte)1</code>; the      * value<code>false</code> is written as the value<code>(byte)0</code>.      *       * @param value      *            the<code>boolean</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|BOOLEAN
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>byte</code> to the stream message.      *       * @param value      *            the<code>byte</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|BYTE
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeByte
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>short</code> to the stream message.      *       * @param value      *            the<code>short</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeShort
parameter_list|(
name|short
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|SHORT
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeShort
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>char</code> to the stream message.      *       * @param value      *            the<code>char</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeChar
parameter_list|(
name|char
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|CHAR
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeChar
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes an<code>int</code> to the stream message.      *       * @param value      *            the<code>int</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|INT
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>long</code> to the stream message.      *       * @param value      *            the<code>long</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>float</code> to the stream message.      *       * @param value      *            the<code>float</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeFloat
parameter_list|(
name|float
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|FLOAT
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeFloat
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>double</code> to the stream message.      *       * @param value      *            the<code>double</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeDouble
parameter_list|(
name|double
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|DOUBLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a<code>String</code> to the stream message.      *       * @param value      *            the<code>String</code> value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeString
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeUTF
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes a byte array field to the stream message.<p/>      *<P>      * The byte array<code>value</code> is written to the message as a byte      * array field. Consecutively written byte array fields are treated as two      * distinct fields when the fields are read.      *       * @param value      *            the byte array value to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|writeBytes
argument_list|(
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a portion of a byte array as a byte array field to the stream      * message.<p/>      *<P>      * The a portion of the byte array<code>value</code> is written to the      * message as a byte array field. Consecutively written byte array fields      * are treated as two distinct fields when the fields are read.      *       * @param value      *            the byte array value to be written      * @param offset      *            the initial offset within the byte array      * @param length      *            the number of bytes to use      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeBytes
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|BYTES
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|writeInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**      * Writes an object to the stream message.<p/>      *<P>      * This method works only for the objectified primitive object types (<code>Integer</code>,      *<code>Double</code>,<code>Long</code>&nbsp;...),      *<code>String</code> objects, and byte arrays.      *       * @param value      *            the Java object to be written      * @throws JMSException      *             if the JMS provider fails to write the message due to some      *             internal error.      * @throws MessageFormatException      *             if the object is invalid.      * @throws MessageNotWriteableException      *             if the message is in read-only mode.      */
specifier|public
name|void
name|writeObject
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|initializeWriting
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|dataOut
operator|.
name|write
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|writeString
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Character
condition|)
block|{
name|writeChar
argument_list|(
operator|(
operator|(
name|Character
operator|)
name|value
operator|)
operator|.
name|charValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Boolean
condition|)
block|{
name|writeBoolean
argument_list|(
operator|(
operator|(
name|Boolean
operator|)
name|value
operator|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Byte
condition|)
block|{
name|writeByte
argument_list|(
operator|(
operator|(
name|Byte
operator|)
name|value
operator|)
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Short
condition|)
block|{
name|writeShort
argument_list|(
operator|(
operator|(
name|Short
operator|)
name|value
operator|)
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|writeInt
argument_list|(
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|writeFloat
argument_list|(
operator|(
operator|(
name|Float
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|writeDouble
argument_list|(
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|writeBytes
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Puts the message body in read-only mode and repositions the stream of      * bytes to the beginning.      *       * @throws JMSException      *             if an internal error occurs      */
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|JMSException
block|{
name|storeContent
argument_list|()
expr_stmt|;
name|this
operator|.
name|bytesOut
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataIn
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dataOut
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|remainingBytes
operator|=
operator|-
literal|1
expr_stmt|;
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeWriting
parameter_list|()
throws|throws
name|MessageNotWriteableException
block|{
name|checkReadOnlyBody
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dataOut
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bytesOut
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|OutputStream
name|os
init|=
name|bytesOut
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
name|getConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
operator|&&
name|connection
operator|.
name|isUseCompression
argument_list|()
condition|)
block|{
name|compressed
operator|=
literal|true
expr_stmt|;
name|os
operator|=
operator|new
name|DeflaterOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dataOut
operator|=
operator|new
name|DataOutputStream
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|checkWriteOnlyBody
parameter_list|()
throws|throws
name|MessageNotReadableException
block|{
if|if
condition|(
operator|!
name|readOnlyBody
condition|)
block|{
throw|throw
operator|new
name|MessageNotReadableException
argument_list|(
literal|"Message body is write-only"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|initializeReading
parameter_list|()
throws|throws
name|MessageNotReadableException
block|{
name|checkWriteOnlyBody
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dataIn
operator|==
literal|null
condition|)
block|{
name|ByteSequence
name|data
init|=
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
name|data
operator|=
operator|new
name|ByteSequence
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCompressed
argument_list|()
condition|)
block|{
name|is
operator|=
operator|new
name|InflaterInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|dataIn
operator|=
operator|new
name|DataInputStream
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" ActiveMQStreamMessage{ "
operator|+
literal|"bytesOut = "
operator|+
name|bytesOut
operator|+
literal|", dataOut = "
operator|+
name|dataOut
operator|+
literal|", dataIn = "
operator|+
name|dataIn
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

