begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|StubConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkTestSupport
import|;
end_import

begin_comment
comment|/**  * Pretend to be an abusive client that sends multiple  * identical ConsumerInfo commands and make sure the  * broker doesn't stall because of it.  */
end_comment

begin_class
specifier|public
class|class
name|DoubleSubscriptionTest
extends|extends
name|NetworkTestSupport
block|{
specifier|public
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|int
name|deliveryMode
decl_stmt|;
specifier|private
name|String
name|remoteURI
init|=
literal|"tcp://localhost:0?wireFormat.tcpNoDelayEnabled=true"
decl_stmt|;
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|DoubleSubscriptionTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestDoubleSubscription
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|, }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDoubleSubscription
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start a normal consumer on the remote broker
name|StubConnection
name|connection1
init|=
name|createRemoteConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo1
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo1
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo1
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo1
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo1
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// Start a normal producer on a remote broker
name|StubConnection
name|connection2
init|=
name|createRemoteConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo2
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo2
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo2
argument_list|)
decl_stmt|;
name|ProducerInfo
name|producerInfo2
init|=
name|createProducerInfo
argument_list|(
name|sessionInfo2
argument_list|)
decl_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|connectionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|send
argument_list|(
name|sessionInfo2
argument_list|)
expr_stmt|;
name|connection2
operator|.
name|request
argument_list|(
name|producerInfo2
argument_list|)
expr_stmt|;
comment|// Send a message to make sure the basics are working
name|connection2
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
name|Message
name|m1
init|=
name|receiveMessage
argument_list|(
name|connection1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|createAck
argument_list|(
name|consumerInfo1
argument_list|,
name|m1
argument_list|,
literal|1
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Send a message to sit on the broker while we mess with it
name|connection2
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now we're going to resend the same consumer commands again and see if the broker
comment|// can handle it.
name|connection1
operator|.
name|send
argument_list|(
name|connectionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|send
argument_list|(
name|sessionInfo1
argument_list|)
expr_stmt|;
name|connection1
operator|.
name|request
argument_list|(
name|consumerInfo1
argument_list|)
expr_stmt|;
comment|// After this there should be 2 messages on the broker...
name|connection2
operator|.
name|request
argument_list|(
name|createMessage
argument_list|(
name|producerInfo2
argument_list|,
name|destination
argument_list|,
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... let's start a fresh consumer...
name|connection1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|StubConnection
name|connection3
init|=
name|createRemoteConnection
argument_list|()
decl_stmt|;
name|ConnectionInfo
name|connectionInfo3
init|=
name|createConnectionInfo
argument_list|()
decl_stmt|;
name|SessionInfo
name|sessionInfo3
init|=
name|createSessionInfo
argument_list|(
name|connectionInfo3
argument_list|)
decl_stmt|;
name|ConsumerInfo
name|consumerInfo3
init|=
name|createConsumerInfo
argument_list|(
name|sessionInfo3
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|connection3
operator|.
name|send
argument_list|(
name|connectionInfo3
argument_list|)
expr_stmt|;
name|connection3
operator|.
name|send
argument_list|(
name|sessionInfo3
argument_list|)
expr_stmt|;
name|connection3
operator|.
name|request
argument_list|(
name|consumerInfo3
argument_list|)
expr_stmt|;
comment|// ... and then grab the 2 that should be there.
name|assertNotNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|receiveMessage
argument_list|(
name|connection3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNoMessagesLeft
argument_list|(
name|connection3
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|getRemoteURI
parameter_list|()
block|{
return|return
name|remoteURI
return|;
block|}
block|}
end_class

end_unit

