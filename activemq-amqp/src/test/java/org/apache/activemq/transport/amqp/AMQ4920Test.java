begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|amqp_1_0
operator|.
name|jms
operator|.
name|impl
operator|.
name|ConnectionFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ4920Test
extends|extends
name|AmqpTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4920Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Integer
name|ITERATIONS
init|=
literal|500
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Integer
name|CONSUMER_COUNT
init|=
literal|4
decl_stmt|;
comment|// At least 2 consumers are
comment|// required to reproduce
comment|// the original issue
specifier|public
specifier|static
specifier|final
name|String
name|TEXT_MESSAGE
init|=
literal|"TextMessage: "
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|CONSUMER_COUNT
operator|*
name|ITERATIONS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|initLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|CONSUMER_COUNT
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSendWithMultipleConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactoryImpl
name|connectionFactory
init|=
operator|new
name|ConnectionFactoryImpl
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|,
literal|"admin"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|connectionFactory
operator|.
name|setSyncPublish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|String
name|destinationName
init|=
literal|"topic://AMQ4920Test"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSUMER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|AMQ4930ConsumerTask
name|consumerTask
init|=
operator|new
name|AMQ4930ConsumerTask
argument_list|(
name|initLatch
argument_list|,
name|destinationName
argument_list|,
name|port
argument_list|,
literal|"Consumer-"
operator|+
name|i
argument_list|,
name|latch
argument_list|,
name|ITERATIONS
argument_list|)
decl_stmt|;
name|executor
operator|.
name|submit
argument_list|(
name|consumerTask
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Make sure at least Topic consumers are subscribed before the first send.
name|initLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"At start latch is "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
name|connection
argument_list|,
name|destination
argument_list|,
name|ITERATIONS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"After send latch is "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|await
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"After await latch is "
operator|+
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|latch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sendMessages
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|sleepInterval
parameter_list|)
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setText
argument_list|(
name|TEXT_MESSAGE
operator|+
name|i
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending message ["
operator|+
name|i
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleepInterval
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
block|}
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_class
class|class
name|AMQ4930ConsumerTask
implements|implements
name|Callable
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ4930ConsumerTask
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|destinationName
decl_stmt|;
specifier|private
specifier|final
name|String
name|consumerName
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|messagesReceived
decl_stmt|;
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
specifier|private
specifier|final
name|int
name|expectedMessageCount
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|started
decl_stmt|;
specifier|public
name|AMQ4930ConsumerTask
parameter_list|(
name|CountDownLatch
name|started
parameter_list|,
name|String
name|destinationName
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|consumerName
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|int
name|expectedMessageCount
parameter_list|)
block|{
name|this
operator|.
name|started
operator|=
name|started
expr_stmt|;
name|this
operator|.
name|destinationName
operator|=
name|destinationName
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|consumerName
operator|=
name|consumerName
expr_stmt|;
name|this
operator|.
name|messagesReceived
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|expectedMessageCount
operator|=
name|expectedMessageCount
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|consumerName
operator|+
literal|" starting"
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ConnectionFactory
name|connectionFactory
init|=
operator|new
name|ConnectionFactoryImpl
argument_list|(
literal|"localhost"
argument_list|,
name|port
argument_list|,
literal|"admin"
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|destinationName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|started
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|int
name|receivedCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|receivedCount
operator|<
name|expectedMessageCount
condition|)
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"consumer {} got null message on iteration {}"
argument_list|,
name|consumerName
argument_list|,
name|receivedCount
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|message
operator|instanceof
name|TextMessage
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"consumer {} expected text message on iteration {} but got {}"
argument_list|,
name|consumerName
argument_list|,
name|receivedCount
argument_list|,
name|message
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|TextMessage
name|tm
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
if|if
condition|(
operator|!
name|tm
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|AMQ4920Test
operator|.
name|TEXT_MESSAGE
operator|+
name|receivedCount
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"consumer {} expected {} got message [{}]"
argument_list|,
name|consumerName
argument_list|,
name|receivedCount
argument_list|,
name|tm
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"consumer {} expected {} got message [{}]"
argument_list|,
name|consumerName
argument_list|,
name|receivedCount
argument_list|,
name|tm
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|messagesReceived
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|receivedCount
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"UnexpectedException in "
operator|+
name|consumerName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ignoreMe
parameter_list|)
block|{             }
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

