begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_class
specifier|public
class|class
name|HttpTransportUtils
block|{
specifier|public
specifier|static
name|String
name|generateWsRemoteAddress
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"HttpServletRequest must not be null."
argument_list|)
throw|;
block|}
name|StringBuilder
name|remoteAddress
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|request
operator|.
name|getScheme
argument_list|()
decl_stmt|;
name|remoteAddress
operator|.
name|append
argument_list|(
name|scheme
operator|!=
literal|null
operator|&&
name|scheme
operator|.
name|toLowerCase
argument_list|()
operator|.
name|equals
argument_list|(
literal|"https"
argument_list|)
condition|?
literal|"wss://"
else|:
literal|"ws://"
argument_list|)
expr_stmt|;
name|remoteAddress
operator|.
name|append
argument_list|(
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
name|remoteAddress
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|remoteAddress
operator|.
name|append
argument_list|(
name|request
operator|.
name|getRemotePort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|remoteAddress
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|generateWsRemoteAddress
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|schemePrefix
parameter_list|)
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"HttpServletRequest must not be null."
argument_list|)
throw|;
block|}
name|StringBuilder
name|remoteAddress
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|request
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|scheme
operator|!=
literal|null
operator|&&
name|scheme
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"https"
argument_list|)
condition|)
block|{
name|scheme
operator|=
name|schemePrefix
operator|+
literal|"+wss://"
expr_stmt|;
block|}
else|else
block|{
name|scheme
operator|=
name|schemePrefix
operator|+
literal|"+ws://"
expr_stmt|;
block|}
name|remoteAddress
operator|.
name|append
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
name|remoteAddress
operator|.
name|append
argument_list|(
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
name|remoteAddress
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|remoteAddress
operator|.
name|append
argument_list|(
name|request
operator|.
name|getRemotePort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|remoteAddress
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

