begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisoryBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ft
operator|.
name|MasterConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|BrokerViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ConnectorViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|FTConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|JmsConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagedRegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagementContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|NetworkConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|NetworkConnectorViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ProxyConnectorView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|ConnectionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|jms
operator|.
name|JmsConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|proxy
operator|.
name|ProxyConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|MessageAuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|DefaultPersistenceAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
operator|.
name|VMTransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * Represents a running broker service which consists of a number of transport  * connectors, network connectors and a bunch of properties which can be used to  * configure the broker as its lazily created.  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|BrokerService
implements|implements
name|Service
implements|,
name|Serializable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_PORT
init|=
literal|"61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BrokerService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7353129142305630237L
decl_stmt|;
specifier|private
name|boolean
name|useJmx
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|persistent
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|populateJMSXUserID
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useShutdownHook
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|useLoggingForShutdownErrors
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|shutdownOnMasterFailure
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|brokerName
init|=
literal|"localhost"
decl_stmt|;
specifier|private
name|File
name|dataDirectory
decl_stmt|;
specifier|private
name|Broker
name|broker
decl_stmt|;
specifier|private
name|ManagementContext
name|managementContext
decl_stmt|;
specifier|private
name|ObjectName
name|brokerObjectName
decl_stmt|;
specifier|private
name|TaskRunnerFactory
name|taskRunnerFactory
decl_stmt|;
specifier|private
name|UsageManager
name|memoryManager
decl_stmt|;
specifier|private
name|PersistenceAdapter
name|persistenceAdapter
decl_stmt|;
specifier|private
name|PersistenceAdapterFactory
name|persistenceFactory
decl_stmt|;
specifier|private
name|MessageAuthorizationPolicy
name|messageAuthorizationPolicy
decl_stmt|;
specifier|private
name|List
name|transportConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|networkConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|proxyConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|registeredMBeanNames
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|jmsConnectors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|MasterConnector
name|masterConnector
decl_stmt|;
specifier|private
specifier|transient
name|Thread
name|shutdownHook
decl_stmt|;
specifier|private
name|String
index|[]
name|transportConnectorURIs
decl_stmt|;
specifier|private
name|String
index|[]
name|networkConnectorURIs
decl_stmt|;
specifier|private
name|String
index|[]
name|proxyConnectorURIs
decl_stmt|;
specifier|private
name|String
name|masterConnectorURI
decl_stmt|;
specifier|private
name|JmsConnector
index|[]
name|jmsBridgeConnectors
decl_stmt|;
comment|//these are Jms to Jms bridges to other jms messaging systems
specifier|private
name|boolean
name|deleteAllMessagesOnStartup
decl_stmt|;
specifier|private
name|URI
name|vmConnectorURI
decl_stmt|;
specifier|private
name|PolicyMap
name|destinationPolicy
decl_stmt|;
specifier|private
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|BrokerPlugin
index|[]
name|plugins
decl_stmt|;
specifier|private
name|boolean
name|keepDurableSubsActive
init|=
literal|true
decl_stmt|;
specifier|private
name|BrokerId
name|brokerId
decl_stmt|;
comment|/**      * Adds a new transport connector for the given bind address      *      * @return the newly created and added transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|String
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|bindAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new transport connector for the given bind address      *      * @return the newly created and added transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|URI
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addConnector
argument_list|(
name|createTransportConnector
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|bindAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new transport connector for the given TransportServer transport      *      * @return the newly created and added transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|TransportServer
name|transport
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addConnector
argument_list|(
operator|new
name|TransportConnector
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|transport
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new transport connector      *      * @return the transport connector      * @throws Exception      */
specifier|public
name|TransportConnector
name|addConnector
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|transportConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
comment|/**      * Adds a new network connector using the given discovery address      *      * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|NetworkConnector
name|addNetworkConnector
parameter_list|(
name|String
name|discoveryAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|discoveryAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new proxy connector using the given bind address      *      * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|ProxyConnector
name|addProxyConnector
parameter_list|(
name|String
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|addProxyConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|bindAddress
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Adds a new network connector using the given discovery address      *      * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|NetworkConnector
name|addNetworkConnector
parameter_list|(
name|URI
name|discoveryAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
name|discoveryAddress
argument_list|)
decl_stmt|;
return|return
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
return|;
block|}
comment|/**      * Adds a new proxy connector using the given bind address      *      * @return the newly created and added network connector      * @throws Exception      */
specifier|public
name|ProxyConnector
name|addProxyConnector
parameter_list|(
name|URI
name|bindAddress
parameter_list|)
throws|throws
name|Exception
block|{
name|ProxyConnector
name|connector
init|=
operator|new
name|ProxyConnector
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setBind
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setRemote
argument_list|(
operator|new
name|URI
argument_list|(
literal|"fanout:multicast://default"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|addProxyConnector
argument_list|(
name|connector
argument_list|)
return|;
block|}
comment|/**      * Adds a new network connector to connect this broker to a federated      * network      */
specifier|public
name|NetworkConnector
name|addNetworkConnector
parameter_list|(
name|NetworkConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|(
name|URISupport
operator|.
name|parseParamters
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"network"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|uri
operator|=
name|URISupport
operator|.
name|createURIWithQuery
argument_list|(
name|uri
argument_list|,
name|URISupport
operator|.
name|createQueryString
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setLocalUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
comment|// Set a connection filter so that the connector does not establish loop back connections.
name|connector
operator|.
name|setConnectionFilter
argument_list|(
operator|new
name|ConnectionFilter
argument_list|()
block|{
specifier|public
name|boolean
name|connectTo
parameter_list|(
name|URI
name|location
parameter_list|)
block|{
name|List
name|transportConnectors
init|=
name|getTransportConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|transportConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|TransportConnector
name|tc
init|=
operator|(
name|TransportConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|equals
argument_list|(
name|tc
operator|.
name|getConnectUri
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{                     }
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|networkConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|registerNetworkConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
specifier|public
name|ProxyConnector
name|addProxyConnector
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|URI
name|uri
init|=
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setLocalUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|proxyConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|registerProxyConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
specifier|public
name|JmsConnector
name|addJmsConnector
parameter_list|(
name|JmsConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|connector
operator|.
name|setBrokerService
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|jmsConnectors
operator|.
name|add
argument_list|(
name|connector
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|registerJmsConnectorMBean
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
return|return
name|connector
return|;
block|}
specifier|public
name|JmsConnector
name|removeJmsConnector
parameter_list|(
name|JmsConnector
name|connector
parameter_list|)
block|{
if|if
condition|(
name|jmsConnectors
operator|.
name|remove
argument_list|(
name|connector
argument_list|)
condition|)
block|{
return|return
name|connector
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|initializeMasterConnector
parameter_list|(
name|URI
name|remoteURI
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|masterConnector
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Can only be the Slave to one Master"
argument_list|)
throw|;
block|}
name|URI
name|localURI
init|=
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|TransportConnector
name|connector
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|transportConnectors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connector
operator|=
operator|(
name|TransportConnector
operator|)
name|transportConnectors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|masterConnector
operator|=
operator|new
name|MasterConnector
argument_list|(
name|this
argument_list|,
name|connector
argument_list|)
expr_stmt|;
name|masterConnector
operator|.
name|setLocalURI
argument_list|(
name|localURI
argument_list|)
expr_stmt|;
name|masterConnector
operator|.
name|setRemoteURI
argument_list|(
name|remoteURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|registerFTConnectorMBean
argument_list|(
name|masterConnector
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return Returns the masterConnectorURI.      */
specifier|public
name|String
name|getMasterConnectorURI
parameter_list|()
block|{
return|return
name|masterConnectorURI
return|;
block|}
comment|/**      * @param masterConnectorURI The masterConnectorURI to set.      */
specifier|public
name|void
name|setMasterConnectorURI
parameter_list|(
name|String
name|masterConnectorURI
parameter_list|)
block|{
name|this
operator|.
name|masterConnectorURI
operator|=
name|masterConnectorURI
expr_stmt|;
block|}
comment|/**      * @return true if this Broker is a slave to a Master      */
specifier|public
name|boolean
name|isSlave
parameter_list|()
block|{
return|return
name|masterConnector
operator|!=
literal|null
operator|&&
name|masterConnector
operator|.
name|isSlave
argument_list|()
return|;
block|}
specifier|public
name|void
name|masterFailed
parameter_list|()
block|{
if|if
condition|(
name|shutdownOnMasterFailure
condition|)
block|{
name|log
operator|.
name|fatal
argument_list|(
literal|"The Master has failed ... shutting down"
argument_list|)
expr_stmt|;
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to stop for master failure"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Master Failed - starting all connectors"
argument_list|)
expr_stmt|;
try|try
block|{
name|startAllConnectors
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to startAllConnectors"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
operator|.
name|get
argument_list|()
return|;
block|}
comment|// Service interface
comment|// -------------------------------------------------------------------------
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// lets just ignore redundant start() calls
comment|// as its way too easy to not be completely sure if start() has been
comment|// called or not with the gazillion of different configuration mechanisms
comment|//throw new IllegalStateException("Allready started.");
return|return;
block|}
try|try
block|{
name|processHelperProperties
argument_list|()
expr_stmt|;
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|bind
argument_list|(
name|getBrokerName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|addShutdownHook
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteAllMessagesOnStartup
condition|)
block|{
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|getManagementContext
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|getBroker
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|masterConnectorURI
operator|!=
literal|null
condition|)
block|{
name|initializeMasterConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|masterConnectorURI
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|masterConnector
operator|!=
literal|null
condition|)
block|{
name|masterConnector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
name|startAllConnectors
argument_list|()
expr_stmt|;
name|brokerId
operator|=
name|broker
operator|.
name|getBrokerId
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"ActiveMQ JMS Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|brokerId
operator|+
literal|") started"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to start ActiveMQ JMS Message Broker. Reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"ActiveMQ Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|brokerId
operator|+
literal|") is shutting down"
argument_list|)
expr_stmt|;
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|unbind
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|removeShutdownHook
argument_list|()
expr_stmt|;
name|ServiceStopper
name|stopper
init|=
operator|new
name|ServiceStopper
argument_list|()
decl_stmt|;
if|if
condition|(
name|masterConnector
operator|!=
literal|null
condition|)
block|{
name|masterConnector
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|getNetworkConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NetworkConnector
name|connector
init|=
operator|(
name|NetworkConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|getProxyConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProxyConnector
name|connector
init|=
operator|(
name|ProxyConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|jmsConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JmsConnector
name|connector
init|=
operator|(
name|JmsConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|getTransportConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TransportConnector
name|connector
init|=
operator|(
name|TransportConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
comment|//remove any VMTransports connected
name|VMTransportFactory
operator|.
name|stopped
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
name|persistenceAdapter
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|stopper
operator|.
name|stop
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|registeredMBeanNames
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
operator|(
name|ObjectName
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|mbeanServer
operator|.
name|unregisterMBean
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|mbeanServer
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|stopper
operator|.
name|stop
argument_list|(
name|getManagementContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"ActiveMQ JMS Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|", "
operator|+
name|brokerId
operator|+
literal|") stopped"
argument_list|)
expr_stmt|;
name|stopper
operator|.
name|throwFirstException
argument_list|()
expr_stmt|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|Broker
name|getBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"ActiveMQ "
operator|+
name|ActiveMQConnectionMetaData
operator|.
name|PROVIDER_VERSION
operator|+
literal|" JMS Message Broker ("
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|") is starting"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"For help or more information please see: http://incubator.apache.org/activemq/"
argument_list|)
expr_stmt|;
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
return|return
name|broker
return|;
block|}
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
return|return
name|brokerName
return|;
block|}
comment|/**      * Sets the name of this broker; which must be unique in the network      */
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|this
operator|.
name|brokerName
operator|=
name|brokerName
expr_stmt|;
block|}
specifier|public
name|PersistenceAdapterFactory
name|getPersistenceFactory
parameter_list|()
block|{
if|if
condition|(
name|persistenceFactory
operator|==
literal|null
condition|)
block|{
name|persistenceFactory
operator|=
name|createPersistenceFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|persistenceFactory
return|;
block|}
specifier|public
name|File
name|getDataDirectory
parameter_list|()
block|{
if|if
condition|(
name|dataDirectory
operator|==
literal|null
condition|)
block|{
name|dataDirectory
operator|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"activemq-data"
argument_list|)
argument_list|,
name|getBrokerName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[^a-zA-Z0-9\\.\\_\\-]"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dataDirectory
return|;
block|}
comment|/**      * Sets the directory in which the data files will be stored by default for      * the JDBC and Journal persistence adaptors.      *      * @param dataDirectory      *            the directory to store data files      */
specifier|public
name|void
name|setDataDirectory
parameter_list|(
name|File
name|dataDirectory
parameter_list|)
block|{
name|this
operator|.
name|dataDirectory
operator|=
name|dataDirectory
expr_stmt|;
block|}
specifier|public
name|void
name|setPersistenceFactory
parameter_list|(
name|PersistenceAdapterFactory
name|persistenceFactory
parameter_list|)
block|{
name|this
operator|.
name|persistenceFactory
operator|=
name|persistenceFactory
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|persistent
return|;
block|}
comment|/**      * Sets whether or not persistence is enabled or disabled.      */
specifier|public
name|void
name|setPersistent
parameter_list|(
name|boolean
name|persistent
parameter_list|)
block|{
name|this
operator|.
name|persistent
operator|=
name|persistent
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPopulateJMSXUserID
parameter_list|()
block|{
return|return
name|populateJMSXUserID
return|;
block|}
comment|/**      * Sets whether or not the broker should populate the JMSXUserID header.      */
specifier|public
name|void
name|setPopulateJMSXUserID
parameter_list|(
name|boolean
name|populateJMSXUserID
parameter_list|)
block|{
name|this
operator|.
name|populateJMSXUserID
operator|=
name|populateJMSXUserID
expr_stmt|;
block|}
specifier|public
name|UsageManager
name|getMemoryManager
parameter_list|()
block|{
if|if
condition|(
name|memoryManager
operator|==
literal|null
condition|)
block|{
name|memoryManager
operator|=
operator|new
name|UsageManager
argument_list|()
expr_stmt|;
name|memoryManager
operator|.
name|setLimit
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
comment|// Default to 20 Meg
comment|// limit
block|}
return|return
name|memoryManager
return|;
block|}
specifier|public
name|void
name|setMemoryManager
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|)
block|{
name|this
operator|.
name|memoryManager
operator|=
name|memoryManager
expr_stmt|;
block|}
specifier|public
name|PersistenceAdapter
name|getPersistenceAdapter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|persistenceAdapter
operator|==
literal|null
condition|)
block|{
name|persistenceAdapter
operator|=
name|createPersistenceAdapter
argument_list|()
expr_stmt|;
block|}
return|return
name|persistenceAdapter
return|;
block|}
comment|/**      * Sets the persistence adaptor implementation to use for this broker      */
specifier|public
name|void
name|setPersistenceAdapter
parameter_list|(
name|PersistenceAdapter
name|persistenceAdapter
parameter_list|)
block|{
name|this
operator|.
name|persistenceAdapter
operator|=
name|persistenceAdapter
expr_stmt|;
block|}
specifier|public
name|TaskRunnerFactory
name|getTaskRunnerFactory
parameter_list|()
block|{
if|if
condition|(
name|taskRunnerFactory
operator|==
literal|null
condition|)
block|{
name|taskRunnerFactory
operator|=
operator|new
name|TaskRunnerFactory
argument_list|()
expr_stmt|;
block|}
return|return
name|taskRunnerFactory
return|;
block|}
specifier|public
name|void
name|setTaskRunnerFactory
parameter_list|(
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
name|this
operator|.
name|taskRunnerFactory
operator|=
name|taskRunnerFactory
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseJmx
parameter_list|()
block|{
return|return
name|useJmx
return|;
block|}
comment|/**      * Sets whether or not the Broker's services should be exposed into JMX or      * not.      */
specifier|public
name|void
name|setUseJmx
parameter_list|(
name|boolean
name|useJmx
parameter_list|)
block|{
name|this
operator|.
name|useJmx
operator|=
name|useJmx
expr_stmt|;
block|}
specifier|public
name|ObjectName
name|getBrokerObjectName
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|brokerObjectName
operator|==
literal|null
condition|)
block|{
name|brokerObjectName
operator|=
name|createBrokerObjectName
argument_list|()
expr_stmt|;
block|}
return|return
name|brokerObjectName
return|;
block|}
comment|/**      * Sets the JMX ObjectName for this broker      */
specifier|public
name|void
name|setBrokerObjectName
parameter_list|(
name|ObjectName
name|brokerObjectName
parameter_list|)
block|{
name|this
operator|.
name|brokerObjectName
operator|=
name|brokerObjectName
expr_stmt|;
block|}
specifier|public
name|ManagementContext
name|getManagementContext
parameter_list|()
block|{
if|if
condition|(
name|managementContext
operator|==
literal|null
condition|)
block|{
name|managementContext
operator|=
operator|new
name|ManagementContext
argument_list|()
expr_stmt|;
block|}
return|return
name|managementContext
return|;
block|}
specifier|public
name|void
name|setManagementContext
parameter_list|(
name|ManagementContext
name|managementContext
parameter_list|)
block|{
name|this
operator|.
name|managementContext
operator|=
name|managementContext
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getNetworkConnectorURIs
parameter_list|()
block|{
return|return
name|networkConnectorURIs
return|;
block|}
specifier|public
name|void
name|setNetworkConnectorURIs
parameter_list|(
name|String
index|[]
name|networkConnectorURIs
parameter_list|)
block|{
name|this
operator|.
name|networkConnectorURIs
operator|=
name|networkConnectorURIs
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getTransportConnectorURIs
parameter_list|()
block|{
return|return
name|transportConnectorURIs
return|;
block|}
specifier|public
name|void
name|setTransportConnectorURIs
parameter_list|(
name|String
index|[]
name|transportConnectorURIs
parameter_list|)
block|{
name|this
operator|.
name|transportConnectorURIs
operator|=
name|transportConnectorURIs
expr_stmt|;
block|}
comment|/**      * @return Returns the jmsBridgeConnectors.      */
specifier|public
name|JmsConnector
index|[]
name|getJmsBridgeConnectors
parameter_list|()
block|{
return|return
name|jmsBridgeConnectors
return|;
block|}
comment|/**      * @param jmsBridgeConnectors The jmsBridgeConnectors to set.      */
specifier|public
name|void
name|setJmsBridgeConnectors
parameter_list|(
name|JmsConnector
index|[]
name|jmsConnectors
parameter_list|)
block|{
name|this
operator|.
name|jmsBridgeConnectors
operator|=
name|jmsConnectors
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseLoggingForShutdownErrors
parameter_list|()
block|{
return|return
name|useLoggingForShutdownErrors
return|;
block|}
comment|/**      * Sets whether or not we should use commons-logging when reporting errors      * when shutting down the broker      */
specifier|public
name|void
name|setUseLoggingForShutdownErrors
parameter_list|(
name|boolean
name|useLoggingForShutdownErrors
parameter_list|)
block|{
name|this
operator|.
name|useLoggingForShutdownErrors
operator|=
name|useLoggingForShutdownErrors
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseShutdownHook
parameter_list|()
block|{
return|return
name|useShutdownHook
return|;
block|}
comment|/**      * Sets whether or not we should use a shutdown handler to close down the      * broker cleanly if the JVM is terminated. It is recommended you leave this      * enabled.      */
specifier|public
name|void
name|setUseShutdownHook
parameter_list|(
name|boolean
name|useShutdownHook
parameter_list|)
block|{
name|this
operator|.
name|useShutdownHook
operator|=
name|useShutdownHook
expr_stmt|;
block|}
specifier|public
name|List
name|getTransportConnectors
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|transportConnectors
argument_list|)
return|;
block|}
comment|/**      * Sets the transport connectors which this broker will listen on for new      * clients      */
specifier|public
name|void
name|setTransportConnectors
parameter_list|(
name|List
name|transportConnectors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|transportConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TransportConnector
name|connector
init|=
operator|(
name|TransportConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
name|getNetworkConnectors
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|networkConnectors
argument_list|)
return|;
block|}
specifier|public
name|List
name|getProxyConnectors
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|(
name|proxyConnectors
argument_list|)
return|;
block|}
comment|/**      * Sets the network connectors which this broker will use to connect to      * other brokers in a federated network      */
specifier|public
name|void
name|setNetworkConnectors
parameter_list|(
name|List
name|networkConnectors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|networkConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NetworkConnector
name|connector
init|=
operator|(
name|NetworkConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the network connectors which this broker will use to connect to      * other brokers in a federated network      */
specifier|public
name|void
name|setProxyConnectors
parameter_list|(
name|List
name|proxyConnectors
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|proxyConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProxyConnector
name|connector
init|=
operator|(
name|ProxyConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|addProxyConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|PolicyMap
name|getDestinationPolicy
parameter_list|()
block|{
return|return
name|destinationPolicy
return|;
block|}
comment|/**      * Sets the destination specific policies available either for exact      * destinations or for wildcard areas of destinations.      */
specifier|public
name|void
name|setDestinationPolicy
parameter_list|(
name|PolicyMap
name|policyMap
parameter_list|)
block|{
name|this
operator|.
name|destinationPolicy
operator|=
name|policyMap
expr_stmt|;
block|}
specifier|public
name|BrokerPlugin
index|[]
name|getPlugins
parameter_list|()
block|{
return|return
name|plugins
return|;
block|}
comment|/**      * Sets a number of broker plugins to install such as for security authentication or authorization      */
specifier|public
name|void
name|setPlugins
parameter_list|(
name|BrokerPlugin
index|[]
name|plugins
parameter_list|)
block|{
name|this
operator|.
name|plugins
operator|=
name|plugins
expr_stmt|;
block|}
specifier|public
name|MessageAuthorizationPolicy
name|getMessageAuthorizationPolicy
parameter_list|()
block|{
return|return
name|messageAuthorizationPolicy
return|;
block|}
comment|/**      * Sets the policy used to decide if the current connection is authorized to consume      * a given message      */
specifier|public
name|void
name|setMessageAuthorizationPolicy
parameter_list|(
name|MessageAuthorizationPolicy
name|messageAuthorizationPolicy
parameter_list|)
block|{
name|this
operator|.
name|messageAuthorizationPolicy
operator|=
name|messageAuthorizationPolicy
expr_stmt|;
block|}
comment|/**      * Delete all messages from the persistent store      * @throws IOException      */
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|getPersistenceAdapter
argument_list|()
operator|.
name|deleteAllMessages
argument_list|()
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
comment|/**      * Handles any lazy-creation helper properties which are added to make      * things easier to configure inside environments such as Spring      *      * @throws Exception      */
specifier|protected
name|void
name|processHelperProperties
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|transportConnectorURIs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|transportConnectorURIs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
name|transportConnectorURIs
index|[
name|i
index|]
decl_stmt|;
name|addConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|networkConnectorURIs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|networkConnectorURIs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
name|networkConnectorURIs
index|[
name|i
index|]
decl_stmt|;
name|addNetworkConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|proxyConnectorURIs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|proxyConnectorURIs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|uri
init|=
name|proxyConnectorURIs
index|[
name|i
index|]
decl_stmt|;
name|addProxyConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jmsBridgeConnectors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jmsBridgeConnectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|addJmsConnector
argument_list|(
name|jmsBridgeConnectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|registerConnectorMBean
parameter_list|(
name|TransportConnector
name|connector
parameter_list|,
name|ObjectName
name|objectName
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ConnectorViewMBean
name|view
init|=
operator|new
name|ConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|registerNetworkConnectorMBean
parameter_list|(
name|NetworkConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|NetworkConnectorViewMBean
name|view
init|=
operator|new
name|NetworkConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=NetworkConnector,"
operator|+
literal|"NetworkConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|registerProxyConnectorMBean
parameter_list|(
name|ProxyConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ProxyConnectorView
name|view
init|=
operator|new
name|ProxyConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=ProxyConnector,"
operator|+
literal|"ProxyConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|registerFTConnectorMBean
parameter_list|(
name|MasterConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|FTConnectorView
name|view
init|=
operator|new
name|FTConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=MasterConnector"
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|registerJmsConnectorMBean
parameter_list|(
name|JmsConnector
name|connector
parameter_list|)
throws|throws
name|IOException
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|JmsConnectorView
name|view
init|=
operator|new
name|JmsConnectorView
argument_list|(
name|connector
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=JmsConnector,"
operator|+
literal|"JmsConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Broker could not be registered in JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Factory method to create a new broker      *      * @throws Exception      *      * @throws      * @throws      */
specifier|protected
name|Broker
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|Broker
name|regionBroker
init|=
name|createRegionBroker
argument_list|()
decl_stmt|;
name|Broker
name|broker
init|=
name|addInterceptors
argument_list|(
name|regionBroker
argument_list|)
decl_stmt|;
comment|// Add a filter that will stop access to the broker once stopped
name|broker
operator|=
operator|new
name|MutableBrokerFilter
argument_list|(
name|broker
argument_list|)
block|{
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
name|setNext
argument_list|(
operator|new
name|ErrorBroker
argument_list|(
literal|"Broker has been stopped: "
operator|+
name|this
argument_list|)
block|{
comment|// Just ignore additional stop actions.
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{                     }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|ManagedRegionBroker
name|managedBroker
init|=
operator|(
name|ManagedRegionBroker
operator|)
name|regionBroker
decl_stmt|;
name|managedBroker
operator|.
name|setContextBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|BrokerViewMBean
name|view
init|=
operator|new
name|BrokerView
argument_list|(
name|this
argument_list|,
name|managedBroker
argument_list|)
decl_stmt|;
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|ObjectName
name|objectName
init|=
name|getBrokerObjectName
argument_list|()
decl_stmt|;
name|mbeanServer
operator|.
name|registerMBean
argument_list|(
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeanNames
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
return|return
name|broker
return|;
block|}
comment|/**      * Factory method to create the core region broker onto which interceptors      * are added      *      * @throws Exception      */
specifier|protected
name|Broker
name|createRegionBroker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we must start the persistence adaptor before we can create the region
comment|// broker
name|getPersistenceAdapter
argument_list|()
operator|.
name|setUsageManager
argument_list|(
name|getMemoryManager
argument_list|()
argument_list|)
expr_stmt|;
name|getPersistenceAdapter
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
name|RegionBroker
name|regionBroker
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|MBeanServer
name|mbeanServer
init|=
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
decl_stmt|;
name|regionBroker
operator|=
operator|new
name|ManagedRegionBroker
argument_list|(
name|this
argument_list|,
name|mbeanServer
argument_list|,
name|getBrokerObjectName
argument_list|()
argument_list|,
name|getTaskRunnerFactory
argument_list|()
argument_list|,
name|getMemoryManager
argument_list|()
argument_list|,
name|getPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regionBroker
operator|=
operator|new
name|RegionBroker
argument_list|(
name|this
argument_list|,
name|getTaskRunnerFactory
argument_list|()
argument_list|,
name|getMemoryManager
argument_list|()
argument_list|,
name|getPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionBroker
operator|.
name|setKeepDurableSubsActive
argument_list|(
name|keepDurableSubsActive
argument_list|)
expr_stmt|;
name|regionBroker
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regionBroker
return|;
block|}
comment|/**      * Strategy method to add interceptors to the broker      *      * @throws IOException      */
specifier|protected
name|Broker
name|addInterceptors
parameter_list|(
name|Broker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|TransactionBroker
argument_list|(
name|broker
argument_list|,
name|getPersistenceAdapter
argument_list|()
operator|.
name|createTransactionStore
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|=
operator|new
name|AdvisoryBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|=
operator|new
name|CompositeDestinationBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPopulateJMSXUserID
argument_list|()
condition|)
block|{
name|broker
operator|=
operator|new
name|UserIDBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|plugins
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|plugins
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BrokerPlugin
name|plugin
init|=
name|plugins
index|[
name|i
index|]
decl_stmt|;
name|broker
operator|=
name|plugin
operator|.
name|installPlugin
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|broker
return|;
block|}
specifier|protected
name|PersistenceAdapter
name|createPersistenceAdapter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isPersistent
argument_list|()
condition|)
block|{
return|return
name|getPersistenceFactory
argument_list|()
operator|.
name|createPersistenceAdapter
argument_list|()
return|;
block|}
else|else
block|{
return|return
operator|new
name|MemoryPersistenceAdapter
argument_list|()
return|;
block|}
block|}
specifier|protected
name|DefaultPersistenceAdapterFactory
name|createPersistenceFactory
parameter_list|()
block|{
name|DefaultPersistenceAdapterFactory
name|factory
init|=
operator|new
name|DefaultPersistenceAdapterFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setDataDirectory
argument_list|(
name|getDataDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTaskRunnerFactory
argument_list|(
name|getTaskRunnerFactory
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
specifier|protected
name|ObjectName
name|createBrokerObjectName
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|ObjectName
argument_list|(
name|getManagementContext
argument_list|()
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Broker"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
literal|"Invalid JMX broker name: "
operator|+
name|brokerName
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|TransportConnector
name|createTransportConnector
parameter_list|(
name|Broker
name|broker
parameter_list|,
name|URI
name|brokerURI
parameter_list|)
throws|throws
name|Exception
block|{
name|TransportServer
name|transport
init|=
name|TransportFactory
operator|.
name|bind
argument_list|(
name|getBrokerName
argument_list|()
argument_list|,
name|brokerURI
argument_list|)
decl_stmt|;
return|return
operator|new
name|TransportConnector
argument_list|(
name|broker
argument_list|,
name|transport
argument_list|)
return|;
block|}
comment|/**      * Extracts the port from the options      */
specifier|protected
name|Object
name|getPort
parameter_list|(
name|Map
name|options
parameter_list|)
block|{
name|Object
name|port
init|=
name|options
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
decl_stmt|;
if|if
condition|(
name|port
operator|==
literal|null
condition|)
block|{
name|port
operator|=
name|DEFAULT_PORT
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"No port specified so defaulting to: "
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
return|return
name|port
return|;
block|}
specifier|protected
name|void
name|addShutdownHook
parameter_list|()
block|{
if|if
condition|(
name|useShutdownHook
condition|)
block|{
name|shutdownHook
operator|=
operator|new
name|Thread
argument_list|(
literal|"ActiveMQ ShutdownHook"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|containerShutdown
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|removeShutdownHook
parameter_list|()
block|{
if|if
condition|(
name|shutdownHook
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|removeShutdownHook
argument_list|(
name|shutdownHook
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Caught exception, must be shutting down: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Causes a clean shutdown of the container when the VM is being shut down      */
specifier|protected
name|void
name|containerShutdown
parameter_list|()
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Throwable
name|linkedException
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|linkedException
operator|!=
literal|null
condition|)
block|{
name|logError
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
operator|+
literal|". Reason: "
operator|+
name|linkedException
argument_list|,
name|linkedException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logError
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|useLoggingForShutdownErrors
condition|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logError
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|logError
parameter_list|(
name|String
name|message
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|useLoggingForShutdownErrors
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to shut down: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Start all transport and network connections, proxies and bridges      * @throws Exception      */
specifier|protected
name|void
name|startAllConnectors
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|isSlave
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|iter
init|=
name|getTransportConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TransportConnector
name|connector
init|=
operator|(
name|TransportConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|startTransportConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|getNetworkConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NetworkConnector
name|connector
init|=
operator|(
name|NetworkConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connector
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDurableDestinations
argument_list|(
name|getBroker
argument_list|()
operator|.
name|getDurableDestinations
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|getProxyConnectors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ProxyConnector
name|connector
init|=
operator|(
name|ProxyConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|jmsConnectors
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JmsConnector
name|connector
init|=
operator|(
name|JmsConnector
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|startTransportConnector
parameter_list|(
name|TransportConnector
name|connector
parameter_list|)
throws|throws
name|Exception
block|{
name|connector
operator|.
name|setBroker
argument_list|(
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setBrokerName
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setTaskRunnerFactory
argument_list|(
name|getTaskRunnerFactory
argument_list|()
argument_list|)
expr_stmt|;
name|MessageAuthorizationPolicy
name|policy
init|=
name|getMessageAuthorizationPolicy
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|connector
operator|.
name|setMessageAuthorizationPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isUseJmx
argument_list|()
condition|)
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|managementContext
operator|.
name|getJmxDomainName
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|getBrokerName
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Connector,"
operator|+
literal|"ConnectorName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connector
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|=
name|connector
operator|.
name|asManagedConnector
argument_list|(
name|getManagementContext
argument_list|()
operator|.
name|getMBeanServer
argument_list|()
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registerConnectorMBean
argument_list|(
name|connector
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDeleteAllMessagesOnStartup
parameter_list|()
block|{
return|return
name|deleteAllMessagesOnStartup
return|;
block|}
comment|/**      * Sets whether or not all messages are deleted on startup - mostly only      * useful for testing.      */
specifier|public
name|void
name|setDeleteAllMessagesOnStartup
parameter_list|(
name|boolean
name|deletePersistentMessagesOnStartup
parameter_list|)
block|{
name|this
operator|.
name|deleteAllMessagesOnStartup
operator|=
name|deletePersistentMessagesOnStartup
expr_stmt|;
block|}
specifier|public
name|URI
name|getVmConnectorURI
parameter_list|()
block|{
if|if
condition|(
name|vmConnectorURI
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|vmConnectorURI
operator|=
operator|new
name|URI
argument_list|(
literal|"vm://"
operator|+
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{             }
block|}
return|return
name|vmConnectorURI
return|;
block|}
specifier|public
name|void
name|setVmConnectorURI
parameter_list|(
name|URI
name|vmConnectorURI
parameter_list|)
block|{
name|this
operator|.
name|vmConnectorURI
operator|=
name|vmConnectorURI
expr_stmt|;
block|}
comment|/**      * @return Returns the shutdownOnMasterFailure.      */
specifier|public
name|boolean
name|isShutdownOnMasterFailure
parameter_list|()
block|{
return|return
name|shutdownOnMasterFailure
return|;
block|}
comment|/**      * @param shutdownOnMasterFailure The shutdownOnMasterFailure to set.      */
specifier|public
name|void
name|setShutdownOnMasterFailure
parameter_list|(
name|boolean
name|shutdownOnMasterFailure
parameter_list|)
block|{
name|this
operator|.
name|shutdownOnMasterFailure
operator|=
name|shutdownOnMasterFailure
expr_stmt|;
block|}
specifier|public
name|boolean
name|isKeepDurableSubsActive
parameter_list|()
block|{
return|return
name|keepDurableSubsActive
return|;
block|}
specifier|public
name|void
name|setKeepDurableSubsActive
parameter_list|(
name|boolean
name|keepDurableSubsActive
parameter_list|)
block|{
name|this
operator|.
name|keepDurableSubsActive
operator|=
name|keepDurableSubsActive
expr_stmt|;
block|}
block|}
end_class

end_unit

