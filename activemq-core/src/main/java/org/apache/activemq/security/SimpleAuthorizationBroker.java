begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|BooleanExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Verifies if a authenticated user can do an operation against the broker.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|SimpleAuthorizationBroker
extends|extends
name|BrokerFilter
implements|implements
name|SecurityAdminMBean
block|{
specifier|private
specifier|final
name|DestinationMap
name|writeACLs
decl_stmt|;
specifier|private
specifier|final
name|DestinationMap
name|readACLs
decl_stmt|;
specifier|private
specifier|final
name|DestinationMap
name|adminACLs
decl_stmt|;
specifier|private
name|boolean
name|filterReads
init|=
literal|true
decl_stmt|;
specifier|public
name|SimpleAuthorizationBroker
parameter_list|(
name|Broker
name|next
parameter_list|,
name|DestinationMap
name|writeACLs
parameter_list|,
name|DestinationMap
name|readACLs
parameter_list|,
name|DestinationMap
name|adminACLs
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|writeACLs
operator|=
name|writeACLs
expr_stmt|;
name|this
operator|.
name|readACLs
operator|=
name|readACLs
expr_stmt|;
name|this
operator|.
name|adminACLs
operator|=
name|adminACLs
expr_stmt|;
block|}
specifier|public
name|Destination
name|addDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|SecurityContext
name|securityContext
init|=
operator|(
name|SecurityContext
operator|)
name|context
operator|.
name|getSecurityContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|securityContext
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User is not authenticated."
argument_list|)
throw|;
comment|// You don't need to be an admin to create temp destinations.
if|if
condition|(
operator|!
name|destination
operator|.
name|isTemporary
argument_list|()
operator|||
operator|!
operator|(
operator|(
name|ActiveMQTempDestination
operator|)
name|destination
operator|)
operator|.
name|getConnectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getConnectionId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
condition|)
block|{
name|Set
name|allowedACLs
init|=
name|adminACLs
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedACLs
operator|!=
literal|null
operator|&&
operator|!
name|securityContext
operator|.
name|isInOneOf
argument_list|(
name|allowedACLs
argument_list|)
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User "
operator|+
name|securityContext
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to create: "
operator|+
name|destination
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
return|;
block|}
specifier|public
name|void
name|removeDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|SecurityContext
name|securityContext
init|=
operator|(
name|SecurityContext
operator|)
name|context
operator|.
name|getSecurityContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|securityContext
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User is not authenticated."
argument_list|)
throw|;
comment|// You don't need to be an admin to remove temp destinations.
if|if
condition|(
operator|!
name|destination
operator|.
name|isTemporary
argument_list|()
operator|||
operator|!
operator|(
operator|(
name|ActiveMQTempDestination
operator|)
name|destination
operator|)
operator|.
name|getConnectionId
argument_list|()
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getConnectionId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
condition|)
block|{
name|Set
name|allowedACLs
init|=
name|adminACLs
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedACLs
operator|!=
literal|null
operator|&&
operator|!
name|securityContext
operator|.
name|isInOneOf
argument_list|(
name|allowedACLs
argument_list|)
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User "
operator|+
name|securityContext
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to remove: "
operator|+
name|destination
argument_list|)
throw|;
block|}
name|super
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
specifier|final
name|SecurityContext
name|subject
init|=
operator|(
name|SecurityContext
operator|)
name|context
operator|.
name|getSecurityContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User is not authenticated."
argument_list|)
throw|;
name|Set
name|allowedACLs
init|=
name|readACLs
operator|.
name|get
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedACLs
operator|!=
literal|null
operator|&&
operator|!
name|subject
operator|.
name|isInOneOf
argument_list|(
name|allowedACLs
argument_list|)
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User "
operator|+
name|subject
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to read from: "
operator|+
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
throw|;
name|subject
operator|.
name|getAuthorizedReadDests
argument_list|()
operator|.
name|put
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should we install a additional predicate on the consumer?
comment|// This adds a little more overhead, but is more secure.
if|if
condition|(
name|filterReads
condition|)
block|{
name|info
operator|.
name|setAdditionalPredicate
argument_list|(
operator|new
name|BooleanExpression
argument_list|()
block|{
specifier|public
name|boolean
name|matches
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
operator|!
name|subject
operator|.
name|getAuthorizedReadDests
argument_list|()
operator|.
name|contains
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|Set
name|allowedACLs
init|=
name|readACLs
operator|.
name|get
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedACLs
operator|!=
literal|null
operator|&&
operator|!
name|subject
operator|.
name|isInOneOf
argument_list|(
name|allowedACLs
argument_list|)
condition|)
return|return
literal|false
return|;
name|subject
operator|.
name|getAuthorizedReadDests
argument_list|()
operator|.
name|put
argument_list|(
name|message
operator|.
name|getDestination
argument_list|()
argument_list|,
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Object
name|evaluate
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|matches
argument_list|(
name|message
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|SecurityContext
name|subject
init|=
operator|(
name|SecurityContext
operator|)
name|context
operator|.
name|getSecurityContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User is not authenticated."
argument_list|)
throw|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
name|allowedACLs
init|=
name|writeACLs
operator|.
name|get
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedACLs
operator|!=
literal|null
operator|&&
operator|!
name|subject
operator|.
name|isInOneOf
argument_list|(
name|allowedACLs
argument_list|)
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User "
operator|+
name|subject
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to write to: "
operator|+
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
throw|;
name|subject
operator|.
name|getAuthorizedWriteDests
argument_list|()
operator|.
name|put
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Throwable
block|{
name|SecurityContext
name|subject
init|=
operator|(
name|SecurityContext
operator|)
name|context
operator|.
name|getSecurityContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User is not authenticated."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|subject
operator|.
name|getAuthorizedWriteDests
argument_list|()
operator|.
name|contains
argument_list|(
name|messageSend
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|Set
name|allowedACLs
init|=
name|writeACLs
operator|.
name|get
argument_list|(
name|messageSend
operator|.
name|getDestination
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowedACLs
operator|!=
literal|null
operator|&&
operator|!
name|subject
operator|.
name|isInOneOf
argument_list|(
name|allowedACLs
argument_list|)
condition|)
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"User "
operator|+
name|subject
operator|.
name|getUserName
argument_list|()
operator|+
literal|" is not authorized to write to: "
operator|+
name|messageSend
operator|.
name|getDestination
argument_list|()
argument_list|)
throw|;
name|subject
operator|.
name|getAuthorizedWriteDests
argument_list|()
operator|.
name|put
argument_list|(
name|messageSend
operator|.
name|getDestination
argument_list|()
argument_list|,
name|messageSend
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
comment|// SecurityAdminMBean interface
comment|// -------------------------------------------------------------------------
specifier|public
name|void
name|addQueueRole
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|addDestinationRole
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|queue
argument_list|)
argument_list|,
name|operation
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addTopicRole
parameter_list|(
name|String
name|topic
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|addDestinationRole
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|topic
argument_list|)
argument_list|,
name|operation
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeQueueRole
parameter_list|(
name|String
name|queue
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|removeDestinationRole
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|queue
argument_list|)
argument_list|,
name|operation
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeTopicRole
parameter_list|(
name|String
name|topic
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|role
parameter_list|)
block|{
name|removeDestinationRole
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|topic
argument_list|)
argument_list|,
name|operation
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addDestinationRole
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Destination
name|destination
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|role
parameter_list|)
block|{     }
specifier|public
name|void
name|removeDestinationRole
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Destination
name|destination
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
name|role
parameter_list|)
block|{     }
specifier|public
name|void
name|addRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{     }
specifier|public
name|void
name|addUserRole
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|role
parameter_list|)
block|{     }
specifier|public
name|void
name|removeRole
parameter_list|(
name|String
name|role
parameter_list|)
block|{     }
specifier|public
name|void
name|removeUserRole
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|role
parameter_list|)
block|{     }
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|boolean
name|isFilterReads
parameter_list|()
block|{
return|return
name|filterReads
return|;
block|}
specifier|public
name|void
name|setFilterReads
parameter_list|(
name|boolean
name|filterReads
parameter_list|)
block|{
name|this
operator|.
name|filterReads
operator|=
name|filterReads
expr_stmt|;
block|}
block|}
end_class

end_unit

