begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2004 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|j2ee
operator|.
name|statistics
operator|.
name|TimeStatistic
import|;
end_import

begin_comment
comment|/**  * Shamelessly taken from the ActiveMQ project ( http://activemq.com )  * A time statistic implementation  *  * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|TimeStatisticImpl
extends|extends
name|StatisticImpl
implements|implements
name|TimeStatistic
block|{
specifier|private
name|long
name|count
decl_stmt|;
specifier|private
name|long
name|maxTime
decl_stmt|;
specifier|private
name|long
name|minTime
decl_stmt|;
specifier|private
name|long
name|totalTime
decl_stmt|;
specifier|private
name|TimeStatisticImpl
name|parent
decl_stmt|;
specifier|public
name|TimeStatisticImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|"millis"
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeStatisticImpl
parameter_list|(
name|TimeStatisticImpl
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|TimeStatisticImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|unit
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|unit
argument_list|,
name|description
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|maxTime
operator|=
literal|0
expr_stmt|;
name|minTime
operator|=
literal|0
expr_stmt|;
name|totalTime
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|long
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|addTime
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|count
operator|++
expr_stmt|;
name|totalTime
operator|+=
name|time
expr_stmt|;
if|if
condition|(
name|time
operator|>
name|maxTime
condition|)
block|{
name|maxTime
operator|=
name|time
expr_stmt|;
block|}
if|if
condition|(
name|time
operator|<
name|minTime
operator|||
name|minTime
operator|==
literal|0
condition|)
block|{
name|minTime
operator|=
name|time
expr_stmt|;
block|}
name|updateSampleTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|addTime
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return the maximum time of any step      */
specifier|public
name|long
name|getMaxTime
parameter_list|()
block|{
return|return
name|maxTime
return|;
block|}
comment|/**      * @return the minimum time of any step      */
specifier|public
specifier|synchronized
name|long
name|getMinTime
parameter_list|()
block|{
return|return
name|minTime
return|;
block|}
comment|/**      * @return the total time of all the steps added together      */
specifier|public
specifier|synchronized
name|long
name|getTotalTime
parameter_list|()
block|{
return|return
name|totalTime
return|;
block|}
comment|/**      * @return the average time calculated by dividing the      *         total time by the number of counts      */
specifier|public
specifier|synchronized
name|double
name|getAverageTime
parameter_list|()
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|double
name|d
init|=
name|totalTime
decl_stmt|;
return|return
name|d
operator|/
name|count
return|;
block|}
comment|/**      * @return the average time calculated by dividing the      *         total time by the number of counts but excluding the      *         minimum and maximum times.      */
specifier|public
specifier|synchronized
name|double
name|getAverageTimeExcludingMinMax
parameter_list|()
block|{
if|if
condition|(
name|count
operator|<=
literal|2
condition|)
block|{
return|return
literal|0
return|;
block|}
name|double
name|d
init|=
name|totalTime
operator|-
name|minTime
operator|-
name|maxTime
decl_stmt|;
return|return
name|d
operator|/
operator|(
name|count
operator|-
literal|2
operator|)
return|;
block|}
comment|/**      * @return the average number of steps per second      */
specifier|public
name|double
name|getAveragePerSecond
parameter_list|()
block|{
name|double
name|d
init|=
literal|1000
decl_stmt|;
name|double
name|averageTime
init|=
name|getAverageTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|averageTime
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|d
operator|/
name|averageTime
return|;
block|}
comment|/**      * @return the average number of steps per second excluding the min& max values      */
specifier|public
name|double
name|getAveragePerSecondExcludingMinMax
parameter_list|()
block|{
name|double
name|d
init|=
literal|1000
decl_stmt|;
name|double
name|average
init|=
name|getAverageTimeExcludingMinMax
argument_list|()
decl_stmt|;
if|if
condition|(
name|average
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|d
operator|/
name|average
return|;
block|}
specifier|public
name|TimeStatisticImpl
name|getParent
parameter_list|()
block|{
return|return
name|parent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|TimeStatisticImpl
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
specifier|protected
specifier|synchronized
name|void
name|appendFieldDescription
parameter_list|(
name|StringBuffer
name|buffer
parameter_list|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" count: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" maxTime: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|maxTime
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" minTime: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|minTime
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" totalTime: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|totalTime
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" averageTime: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|getAverageTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" averageTimeExMinMax: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|getAverageTimeExcludingMinMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" averagePerSecond: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|getAveragePerSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|" averagePerSecondExMinMax: "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|getAveragePerSecondExcludingMinMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|appendFieldDescription
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

