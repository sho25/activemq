begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|aio
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteBufferPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|filter
operator|.
name|WriteBufferedAsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannelServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|io
operator|.
name|async
operator|.
name|AsyncServerSocketChannel
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|AIOSyncChannelServer
implements|implements
name|SyncChannelServer
block|{
specifier|private
specifier|final
name|AsyncServerSocketChannel
name|serverSocket
decl_stmt|;
specifier|private
specifier|final
name|URI
name|bindURI
decl_stmt|;
specifier|private
specifier|final
name|URI
name|connectURI
decl_stmt|;
specifier|private
name|int
name|curentSoTimeout
decl_stmt|;
specifier|public
name|AIOSyncChannelServer
parameter_list|(
name|AsyncServerSocketChannel
name|serverSocket
parameter_list|,
name|URI
name|bindURI
parameter_list|,
name|URI
name|connectURI
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|serverSocket
operator|=
name|serverSocket
expr_stmt|;
name|this
operator|.
name|bindURI
operator|=
name|bindURI
expr_stmt|;
name|this
operator|.
name|connectURI
operator|=
name|connectURI
expr_stmt|;
name|this
operator|.
name|curentSoTimeout
operator|=
name|serverSocket
operator|.
name|socket
argument_list|()
operator|.
name|getSoTimeout
argument_list|()
expr_stmt|;
block|}
specifier|public
name|URI
name|getBindURI
parameter_list|()
block|{
return|return
name|bindURI
return|;
block|}
specifier|public
name|URI
name|getConnectURI
parameter_list|()
block|{
return|return
name|this
operator|.
name|connectURI
return|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
try|try
block|{
name|serverSocket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{         }
block|}
specifier|synchronized
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{     }
specifier|synchronized
specifier|public
name|void
name|stop
parameter_list|()
block|{     }
specifier|public
name|Channel
name|accept
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|timeout
operator|==
name|SyncChannelServer
operator|.
name|WAIT_FOREVER_TIMEOUT
condition|)
name|setSoTimeout
argument_list|(
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|timeout
operator|==
name|SyncChannelServer
operator|.
name|NO_WAIT_TIMEOUT
condition|)
name|setSoTimeout
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|setSoTimeout
argument_list|(
operator|(
name|int
operator|)
name|timeout
argument_list|)
expr_stmt|;
name|AsyncChannel
name|channel
init|=
operator|new
name|AIOAsyncChannel
argument_list|(
name|serverSocket
operator|.
name|accept
argument_list|()
argument_list|)
decl_stmt|;
name|channel
operator|=
operator|new
name|WriteBufferedAsyncChannel
argument_list|(
name|channel
argument_list|,
name|ByteBufferPacket
operator|.
name|createDefaultBuffer
argument_list|(
literal|true
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|channel
return|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|ignore
parameter_list|)
block|{         }
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|setSoTimeout
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|SocketException
block|{
if|if
condition|(
name|curentSoTimeout
operator|!=
name|i
condition|)
block|{
name|serverSocket
operator|.
name|socket
argument_list|()
operator|.
name|setSoTimeout
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|curentSoTimeout
operator|=
name|i
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|getAdapter
parameter_list|(
name|Class
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AIO Server: "
operator|+
name|getConnectURI
argument_list|()
return|;
block|}
block|}
end_class

end_unit

