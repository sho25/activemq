begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|CombinationTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportAcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_class
specifier|public
class|class
name|WireformatNegociationTest
extends|extends
name|CombinationTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|WireformatNegociationTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TransportServer
name|server
decl_stmt|;
specifier|private
name|Transport
name|clientTransport
decl_stmt|;
specifier|private
name|Transport
name|serverTransport
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|WireFormatInfo
argument_list|>
name|clientWF
init|=
operator|new
name|AtomicReference
argument_list|<
name|WireFormatInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|WireFormatInfo
argument_list|>
name|serverWF
init|=
operator|new
name|AtomicReference
argument_list|<
name|WireFormatInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|asyncError
init|=
operator|new
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|ignoreAsycError
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|negociationCounter
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws Exception      * @throws URISyntaxException      */
specifier|private
name|void
name|startClient
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
throws|,
name|URISyntaxException
block|{
name|clientTransport
operator|=
name|TransportFactory
operator|.
name|connect
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|instanceof
name|WireFormatInfo
condition|)
block|{
name|clientWF
operator|.
name|set
argument_list|(
operator|(
name|WireFormatInfo
operator|)
name|command
argument_list|)
expr_stmt|;
name|negociationCounter
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreAsycError
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Client transport error: "
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|asyncError
operator|.
name|set
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|negociationCounter
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{             }
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{             }
block|}
argument_list|)
expr_stmt|;
name|clientTransport
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws IOException      * @throws URISyntaxException      * @throws Exception      */
specifier|private
name|void
name|startServer
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|Exception
block|{
name|server
operator|=
name|TransportFactory
operator|.
name|bind
argument_list|(
literal|"localhost"
argument_list|,
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
name|server
operator|.
name|setAcceptListener
argument_list|(
operator|new
name|TransportAcceptListener
argument_list|()
block|{
specifier|public
name|void
name|onAccept
parameter_list|(
name|Transport
name|transport
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|getName
argument_list|()
operator|+
literal|"] Server Accepted a Connection"
argument_list|)
expr_stmt|;
name|serverTransport
operator|=
name|transport
expr_stmt|;
name|serverTransport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|instanceof
name|WireFormatInfo
condition|)
block|{
name|serverWF
operator|.
name|set
argument_list|(
operator|(
name|WireFormatInfo
operator|)
name|command
argument_list|)
expr_stmt|;
name|negociationCounter
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreAsycError
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Server transport error: "
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|asyncError
operator|.
name|set
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|negociationCounter
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{                         }
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{                         }
block|}
argument_list|)
expr_stmt|;
name|serverTransport
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onAcceptError
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
name|error
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ignoreAsycError
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|clientTransport
operator|!=
literal|null
condition|)
block|{
name|clientTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serverTransport
operator|!=
literal|null
condition|)
block|{
name|serverTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testWireFomatInfoSeverVersion1
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"tcp://localhost:61616?wireFormat.version=1"
argument_list|)
expr_stmt|;
name|startClient
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connect timeout"
argument_list|,
name|negociationCounter
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Async error: "
operator|+
name|asyncError
argument_list|,
name|asyncError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientWF
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clientWF
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serverWF
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serverWF
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testWireFomatInfoClientVersion1
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|startClient
argument_list|(
literal|"tcp://localhost:61616?wireFormat.version=1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connect timeout"
argument_list|,
name|negociationCounter
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Async error: "
operator|+
name|asyncError
argument_list|,
name|asyncError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientWF
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|clientWF
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serverWF
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|serverWF
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws Exception      */
specifier|public
name|void
name|testWireFomatInfoCurrentVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|startServer
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|startClient
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Connect timeout"
argument_list|,
name|negociationCounter
operator|.
name|await
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Async error: "
operator|+
name|asyncError
argument_list|,
name|asyncError
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|clientWF
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CommandTypes
operator|.
name|PROTOCOL_VERSION
argument_list|,
name|clientWF
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|serverWF
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CommandTypes
operator|.
name|PROTOCOL_VERSION
argument_list|,
name|serverWF
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

