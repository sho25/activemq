begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|tool
operator|.
name|reports
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PerformanceStatisticsUtil
block|{
specifier|private
name|PerformanceStatisticsUtil
parameter_list|()
block|{     }
specifier|public
specifier|static
name|long
name|getTotalThroughput
parameter_list|(
name|List
name|totalTPList
parameter_list|)
block|{
name|long
name|totalTP
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|totalTPList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|totalTPList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|totalTP
operator|+=
operator|(
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|totalTP
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|totalTP
return|;
block|}
specifier|public
specifier|static
name|long
name|getMinThroughput
parameter_list|(
name|List
name|totalTPList
parameter_list|)
block|{
name|long
name|minTP
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|totalTPList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|totalTPList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|minTP
operator|=
name|Math
operator|.
name|min
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|minTP
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|minTP
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|minTP
return|;
block|}
specifier|public
specifier|static
name|long
name|getMaxThroughput
parameter_list|(
name|List
name|totalTPList
parameter_list|)
block|{
name|long
name|maxTP
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
if|if
condition|(
name|totalTPList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|totalTPList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|maxTP
operator|=
name|Math
operator|.
name|max
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|maxTP
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|maxTP
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|maxTP
return|;
block|}
specifier|public
specifier|static
name|double
name|getAveThroughput
parameter_list|(
name|List
name|totalTPList
parameter_list|)
block|{
name|double
name|aveTP
decl_stmt|;
if|if
condition|(
name|totalTPList
operator|!=
literal|null
condition|)
block|{
name|int
name|sampleCount
init|=
literal|0
decl_stmt|;
name|long
name|totalTP
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|totalTPList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sampleCount
operator|++
expr_stmt|;
name|totalTP
operator|+=
operator|(
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|double
operator|)
name|totalTP
operator|/
operator|(
name|double
operator|)
name|sampleCount
return|;
block|}
else|else
block|{
name|aveTP
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|aveTP
return|;
block|}
specifier|public
specifier|static
name|double
name|getAveThroughputExcludingMinMax
parameter_list|(
name|List
name|totalTPList
parameter_list|)
block|{
name|double
name|aveTP
decl_stmt|;
name|long
name|minTP
init|=
name|getMinThroughput
argument_list|(
name|totalTPList
argument_list|)
decl_stmt|;
name|long
name|maxTP
init|=
name|getMaxThroughput
argument_list|(
name|totalTPList
argument_list|)
decl_stmt|;
if|if
condition|(
name|totalTPList
operator|!=
literal|null
condition|)
block|{
name|int
name|sampleCount
init|=
literal|0
decl_stmt|;
name|long
name|totalTP
init|=
literal|0
decl_stmt|;
name|long
name|sampleTP
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|totalTPList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sampleCount
operator|++
expr_stmt|;
name|sampleTP
operator|=
operator|(
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|sampleTP
operator|!=
name|minTP
operator|&&
name|sampleTP
operator|!=
name|maxTP
condition|)
block|{
name|totalTP
operator|+=
name|sampleTP
expr_stmt|;
block|}
block|}
return|return
operator|(
name|double
operator|)
name|totalTP
operator|/
operator|(
name|double
operator|)
name|sampleCount
return|;
block|}
else|else
block|{
name|aveTP
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|aveTP
return|;
block|}
block|}
end_class

end_unit

