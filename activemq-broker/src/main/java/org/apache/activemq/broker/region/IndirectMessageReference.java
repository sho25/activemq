begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_comment
comment|/**  * Keeps track of a message that is flowing through the Broker. This object may  * hold a hard reference to the message or only hold the id of the message if  * the message has been persisted on in a MessageStore.  *  *  */
end_comment

begin_class
specifier|public
class|class
name|IndirectMessageReference
implements|implements
name|QueueMessageReference
block|{
comment|/** The subscription that has locked the message */
specifier|private
name|LockOwner
name|lockOwner
decl_stmt|;
comment|/** Has the message been dropped? */
specifier|private
name|boolean
name|dropped
decl_stmt|;
comment|/** Has the message been acked? */
specifier|private
name|boolean
name|acked
decl_stmt|;
comment|/** Direct reference to the message */
specifier|private
specifier|final
name|Message
name|message
decl_stmt|;
specifier|private
specifier|final
name|MessageId
name|messageId
decl_stmt|;
comment|/**      * @param message      */
specifier|public
name|IndirectMessageReference
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
name|this
operator|.
name|message
operator|=
name|message
expr_stmt|;
name|this
operator|.
name|messageId
operator|=
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|copy
argument_list|()
expr_stmt|;
name|message
operator|.
name|getMessageId
argument_list|()
expr_stmt|;
name|message
operator|.
name|getGroupID
argument_list|()
expr_stmt|;
name|message
operator|.
name|getGroupSequence
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getMessageHardRef
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReferenceCount
parameter_list|()
block|{
return|return
name|message
operator|.
name|getReferenceCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|incrementReferenceCount
parameter_list|()
block|{
return|return
name|message
operator|.
name|incrementReferenceCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|decrementReferenceCount
parameter_list|()
block|{
return|return
name|message
operator|.
name|decrementReferenceCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getMessage
parameter_list|()
block|{
return|return
name|message
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Message "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" dropped="
operator|+
name|dropped
operator|+
literal|" acked="
operator|+
name|acked
operator|+
literal|" locked="
operator|+
operator|(
name|lockOwner
operator|!=
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|incrementRedeliveryCounter
parameter_list|()
block|{
name|message
operator|.
name|incrementRedeliveryCounter
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|isDropped
parameter_list|()
block|{
return|return
name|dropped
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|drop
parameter_list|()
block|{
name|dropped
operator|=
literal|true
expr_stmt|;
name|lockOwner
operator|=
literal|null
expr_stmt|;
name|message
operator|.
name|decrementReferenceCount
argument_list|()
expr_stmt|;
block|}
comment|/**      * Check if the message has already been dropped before      * dropping. Return true if dropped, else false.      * This method exists so that this can be done atomically      * under the intrinisic lock      */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|dropIfLive
parameter_list|()
block|{
if|if
condition|(
name|isDropped
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|drop
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|lock
parameter_list|(
name|LockOwner
name|subscription
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|dropped
operator|||
name|lockOwner
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|lockOwner
operator|=
name|subscription
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|unlock
parameter_list|()
block|{
name|boolean
name|result
init|=
name|lockOwner
operator|!=
literal|null
decl_stmt|;
name|lockOwner
operator|=
literal|null
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|LockOwner
name|getLockOwner
parameter_list|()
block|{
return|return
name|lockOwner
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRedeliveryCounter
parameter_list|()
block|{
return|return
name|message
operator|.
name|getRedeliveryCounter
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|MessageId
name|getMessageId
parameter_list|()
block|{
return|return
name|messageId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
operator|.
name|MessageDestination
name|getRegionDestination
parameter_list|()
block|{
return|return
name|message
operator|.
name|getRegionDestination
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistent
parameter_list|()
block|{
return|return
name|message
operator|.
name|isPersistent
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|lockOwner
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|isAcked
parameter_list|()
block|{
return|return
name|acked
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|setAcked
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|acked
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getGroupID
parameter_list|()
block|{
return|return
name|message
operator|.
name|getGroupID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getGroupSequence
parameter_list|()
block|{
return|return
name|message
operator|.
name|getGroupSequence
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConsumerId
name|getTargetConsumerId
parameter_list|()
block|{
return|return
name|message
operator|.
name|getTargetConsumerId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getExpiration
parameter_list|()
block|{
return|return
name|message
operator|.
name|getExpiration
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
name|message
operator|.
name|isExpired
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|int
name|getSize
parameter_list|()
block|{
return|return
name|message
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAdvisory
parameter_list|()
block|{
return|return
name|message
operator|.
name|isAdvisory
argument_list|()
return|;
block|}
block|}
end_class

end_unit

