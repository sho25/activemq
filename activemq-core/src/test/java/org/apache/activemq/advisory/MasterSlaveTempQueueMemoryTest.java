begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MasterSlaveTempQueueMemoryTest
extends|extends
name|TempQueueMemoryTest
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MasterSlaveTempQueueMemoryTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|slave
decl_stmt|;
comment|/*      * add a slave broker      * @see org.apache.activemq.EmbeddedBrokerTestSupport#createBroker()      */
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// bindAddress is used by super.createBroker
name|bindAddress
operator|=
literal|"tcp://localhost:0"
expr_stmt|;
name|BrokerService
name|master
init|=
name|super
operator|.
name|createBroker
argument_list|()
decl_stmt|;
name|master
operator|.
name|setBrokerName
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|configureBroker
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|slave
operator|=
name|super
operator|.
name|createBroker
argument_list|()
expr_stmt|;
name|slave
operator|.
name|setBrokerName
argument_list|(
literal|"slave"
argument_list|)
expr_stmt|;
name|slave
operator|.
name|setMasterConnectorURI
argument_list|(
name|master
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
expr_stmt|;
name|configureBroker
argument_list|(
name|slave
argument_list|)
expr_stmt|;
name|bindAddress
operator|=
name|master
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
return|return
name|master
return|;
block|}
specifier|private
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setOptimizedDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
comment|// optimized dispatch does not effect the determinism of inflight between
comment|// master and slave in this test
comment|//broker.setDestinationPolicy(policyMap);
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
comment|// because master will wait for slave to connect it needs
comment|// to be in a separate thread
name|Thread
name|starterThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|broker
operator|.
name|setWaitForSlave
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed to start broker, reason:"
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|starterThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|slave
operator|.
name|start
argument_list|()
expr_stmt|;
name|starterThread
operator|.
name|join
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"slave is indeed a slave"
argument_list|,
name|slave
operator|.
name|isSlave
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|slave
operator|.
name|stop
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testLoadRequestReply
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|testLoadRequestReply
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// some checks on the slave
name|AdvisoryBroker
name|ab
init|=
operator|(
name|AdvisoryBroker
operator|)
name|slave
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AdvisoryBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the temp queues should not be visible as they are removed"
argument_list|,
literal|1
argument_list|,
name|ab
operator|.
name|getAdvisoryDestinations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RegionBroker
name|rb
init|=
operator|(
name|RegionBroker
operator|)
name|slave
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//serverDestination +
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|rb
operator|.
name|getDestinationMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RegionBroker
name|masterRb
init|=
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"enqueues "
operator|+
name|rb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"enqueues match"
argument_list|,
name|rb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dequeues "
operator|+
name|rb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dequeues match"
argument_list|,
name|rb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"inflight, slave "
operator|+
name|rb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|", master "
operator|+
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// not totally deterministic for this test - maybe due to async send
comment|//assertEquals("inflight match", rb.getDestinationStatistics().getInflight().getCount(), masterRb.getDestinationStatistics().getInflight().getCount());
comment|// slave does not actually dispatch any messages, so no request/reply(2) pair per iteration(COUNT)
comment|// slave estimate must be>= actual master value
comment|// master does not always reach expected total, should be assertEquals.., why?
name|assertTrue
argument_list|(
literal|"dispatched to slave is as good as master, master="
operator|+
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|rb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|+
literal|2
operator|*
name|messagesToSend
operator|>=
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMoreThanPageSizeUnacked
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|messageCount
init|=
name|Queue
operator|.
name|MAX_PAGE_SIZE
operator|+
literal|10
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|serverSession
operator|=
name|serverConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|ActiveMQSession
name|s
init|=
operator|(
name|ActiveMQSession
operator|)
name|serverSession
decl_stmt|;
name|s
operator|.
name|setSessionAsyncDispatch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MessageConsumer
name|serverConsumer
init|=
name|serverSession
operator|.
name|createConsumer
argument_list|(
name|serverDestination
argument_list|)
decl_stmt|;
name|serverConsumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|(
literal|30L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|clientSession
operator|.
name|createProducer
argument_list|(
name|serverDestination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|clientSession
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|RegionBroker
name|slaveRb
init|=
operator|(
name|RegionBroker
operator|)
name|slave
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|RegionBroker
name|masterRb
init|=
operator|(
name|RegionBroker
operator|)
name|broker
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"inflight match expected"
argument_list|,
name|messageCount
argument_list|,
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight match on slave and master"
argument_list|,
name|slaveRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight match expected"
argument_list|,
literal|0
argument_list|,
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inflight match on slave and master"
argument_list|,
name|slaveRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|,
name|masterRb
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLoadRequestReplyWithNoTempQueueDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTempQueue
operator|=
literal|false
expr_stmt|;
name|messagesToSend
operator|=
literal|10
expr_stmt|;
name|testLoadRequestReply
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testLoadRequestReplyWithTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|serverTransactional
operator|=
name|clientTransactional
operator|=
literal|true
expr_stmt|;
name|messagesToSend
operator|=
literal|100
expr_stmt|;
name|reInitialiseSessions
argument_list|()
expr_stmt|;
name|testLoadRequestReply
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testConcurrentConsumerLoadRequestReplyWithTransactions
parameter_list|()
throws|throws
name|Exception
block|{
name|serverTransactional
operator|=
literal|true
expr_stmt|;
name|numConsumers
operator|=
name|numProducers
operator|=
literal|10
expr_stmt|;
name|messagesToSend
operator|=
literal|100
expr_stmt|;
name|reInitialiseSessions
argument_list|()
expr_stmt|;
name|testLoadRequestReply
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|reInitialiseSessions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// reinitialize so they can respect the transactional flags
name|serverSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|serverSession
operator|=
name|serverConnection
operator|.
name|createSession
argument_list|(
name|serverTransactional
argument_list|,
name|serverTransactional
condition|?
name|Session
operator|.
name|SESSION_TRANSACTED
else|:
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|clientSession
operator|=
name|clientConnection
operator|.
name|createSession
argument_list|(
name|clientTransactional
argument_list|,
name|clientTransactional
condition|?
name|Session
operator|.
name|SESSION_TRANSACTED
else|:
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

