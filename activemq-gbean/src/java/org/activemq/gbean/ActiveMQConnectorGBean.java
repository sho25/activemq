begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Protique Ltd  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|gbean
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GBeanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GBeanInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GBeanLifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|gbean
operator|.
name|GConstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|geronimo
operator|.
name|kernel
operator|.
name|Kernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|impl
operator|.
name|BrokerConnectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|impl
operator|.
name|DefaultWireFormat
import|;
end_import

begin_comment
comment|/**  * Default implementation of the ActiveMQ connector  *  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQConnectorGBean
implements|implements
name|GBeanLifecycle
implements|,
name|ActiveMQConnector
block|{
specifier|private
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|BrokerConnector
name|brokerConnector
decl_stmt|;
specifier|private
name|ActiveMQContainer
name|container
decl_stmt|;
specifier|private
name|WireFormat
name|wireFormat
init|=
operator|new
name|DefaultWireFormat
argument_list|()
decl_stmt|;
specifier|private
name|String
name|protocol
decl_stmt|;
specifier|private
name|String
name|host
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|String
name|query
decl_stmt|;
specifier|private
name|String
name|urlAsStarted
decl_stmt|;
specifier|public
name|ActiveMQConnectorGBean
parameter_list|(
name|ActiveMQContainer
name|container
parameter_list|,
name|String
name|protocol
parameter_list|,
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|protocol
return|;
block|}
specifier|public
name|void
name|setProtocol
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|this
operator|.
name|protocol
operator|=
name|protocol
expr_stmt|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
name|host
return|;
block|}
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|void
name|setPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
specifier|public
name|String
name|getUrl
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|protocol
argument_list|,
literal|null
argument_list|,
name|host
argument_list|,
name|port
argument_list|,
name|path
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Attributes don't form a valid URI: "
operator|+
name|protocol
operator|+
literal|"://"
operator|+
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|"/"
operator|+
name|path
operator|+
literal|"?"
operator|+
name|query
argument_list|)
throw|;
block|}
block|}
specifier|public
name|WireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|wireFormat
return|;
block|}
specifier|public
name|void
name|setWireFormat
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|InetSocketAddress
name|getListenAddress
parameter_list|()
block|{
return|return
name|brokerConnector
operator|==
literal|null
condition|?
literal|null
else|:
name|brokerConnector
operator|.
name|getServerChannel
argument_list|()
operator|.
name|getSocketAddress
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|old
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|ActiveMQContainerGBean
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|brokerConnector
operator|==
literal|null
condition|)
block|{
name|urlAsStarted
operator|=
name|getUrl
argument_list|()
expr_stmt|;
name|brokerConnector
operator|=
name|createBrokerConnector
argument_list|(
name|urlAsStarted
argument_list|)
expr_stmt|;
name|brokerConnector
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
operator|.
name|registerBroker
argument_list|(
name|urlAsStarted
argument_list|,
name|brokerConnector
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|old
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|brokerConnector
operator|!=
literal|null
condition|)
block|{
name|ActiveMQConnectionFactory
operator|.
name|unregisterBroker
argument_list|(
name|urlAsStarted
argument_list|)
expr_stmt|;
name|BrokerConnector
name|temp
init|=
name|brokerConnector
decl_stmt|;
name|brokerConnector
operator|=
literal|null
expr_stmt|;
name|temp
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|doFail
parameter_list|()
block|{
if|if
condition|(
name|brokerConnector
operator|!=
literal|null
condition|)
block|{
name|BrokerConnector
name|temp
init|=
name|brokerConnector
decl_stmt|;
name|brokerConnector
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|temp
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Caught while closing due to failure: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|BrokerConnector
name|createBrokerConnector
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|BrokerConnectorImpl
argument_list|(
name|container
operator|.
name|getBrokerContainer
argument_list|()
argument_list|,
name|url
argument_list|,
name|wireFormat
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|final
name|GBeanInfo
name|GBEAN_INFO
decl_stmt|;
static|static
block|{
name|GBeanInfoBuilder
name|infoFactory
init|=
operator|new
name|GBeanInfoBuilder
argument_list|(
literal|"ActiveMQ Message Broker Connector"
argument_list|,
name|ActiveMQConnectorGBean
operator|.
name|class
argument_list|,
name|CONNECTOR_J2EE_TYPE
argument_list|)
decl_stmt|;
name|infoFactory
operator|.
name|addAttribute
argument_list|(
literal|"url"
argument_list|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|infoFactory
operator|.
name|addAttribute
argument_list|(
literal|"wireFormat"
argument_list|,
name|WireFormat
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|infoFactory
operator|.
name|addReference
argument_list|(
literal|"activeMQContainer"
argument_list|,
name|ActiveMQContainer
operator|.
name|class
argument_list|)
expr_stmt|;
name|infoFactory
operator|.
name|addInterface
argument_list|(
name|ActiveMQConnector
operator|.
name|class
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"host"
block|,
literal|"port"
block|,
literal|"protocol"
block|,
literal|"path"
block|,
literal|"query"
block|}
argument_list|)
expr_stmt|;
name|infoFactory
operator|.
name|setConstructor
argument_list|(
operator|new
name|GConstructorInfo
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"activeMQContainer"
block|,
literal|"protocol"
block|,
literal|"host"
block|,
literal|"port"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|GBEAN_INFO
operator|=
name|infoFactory
operator|.
name|getBeanInfo
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|GBeanInfo
name|getGBeanInfo
parameter_list|()
block|{
return|return
name|GBEAN_INFO
return|;
block|}
block|}
end_class

end_unit

