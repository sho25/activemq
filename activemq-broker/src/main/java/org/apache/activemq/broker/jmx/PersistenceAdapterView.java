begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_class
specifier|public
class|class
name|PersistenceAdapterView
implements|implements
name|PersistenceAdapterViewMBean
block|{
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|PersistenceAdapter
name|persistenceAdapter
decl_stmt|;
specifier|private
name|Callable
argument_list|<
name|String
argument_list|>
name|inflightTransactionViewCallable
decl_stmt|;
specifier|private
name|Callable
argument_list|<
name|String
argument_list|>
name|dataViewCallable
decl_stmt|;
specifier|public
name|PersistenceAdapterView
parameter_list|(
name|PersistenceAdapter
name|adapter
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|adapter
operator|.
name|toString
argument_list|()
expr_stmt|;
name|this
operator|.
name|persistenceAdapter
operator|=
name|adapter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTransactions
parameter_list|()
block|{
return|return
name|invoke
argument_list|(
name|inflightTransactionViewCallable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getData
parameter_list|()
block|{
return|return
name|invoke
argument_list|(
name|dataViewCallable
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|persistenceAdapter
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|String
name|invoke
parameter_list|(
name|Callable
argument_list|<
name|String
argument_list|>
name|callable
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|callable
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|result
operator|=
name|callable
operator|.
name|call
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|result
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|setDataViewCallable
parameter_list|(
name|Callable
argument_list|<
name|String
argument_list|>
name|dataViewCallable
parameter_list|)
block|{
name|this
operator|.
name|dataViewCallable
operator|=
name|dataViewCallable
expr_stmt|;
block|}
specifier|public
name|void
name|setInflightTransactionViewCallable
parameter_list|(
name|Callable
argument_list|<
name|String
argument_list|>
name|inflightTransactionViewCallable
parameter_list|)
block|{
name|this
operator|.
name|inflightTransactionViewCallable
operator|=
name|inflightTransactionViewCallable
expr_stmt|;
block|}
block|}
end_class

end_unit

