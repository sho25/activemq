begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|sampler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jorphan
operator|.
name|logging
operator|.
name|LoggingManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jmeter
operator|.
name|util
operator|.
name|JMeterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jmeter
operator|.
name|samplers
operator|.
name|SampleResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jmeter
operator|.
name|samplers
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|connection
operator|.
name|ServerConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|EDU
operator|.
name|oswego
operator|.
name|cs
operator|.
name|dl
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_class
specifier|public
class|class
name|ConsumerSysTest
extends|extends
name|Sampler
implements|implements
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggingManager
operator|.
name|getLoggerForClass
argument_list|()
decl_stmt|;
comment|// Otherwise, the response is scanned for these strings
specifier|private
specifier|static
specifier|final
name|String
name|STATUS_PREFIX
init|=
name|JMeterUtils
operator|.
name|getPropDefault
argument_list|(
literal|"tcp.status.prefix"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STATUS_SUFFIX
init|=
name|JMeterUtils
operator|.
name|getPropDefault
argument_list|(
literal|"tcp.status.suffix"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|STATUS_PROPERTIES
init|=
name|JMeterUtils
operator|.
name|getPropDefault
argument_list|(
literal|"tcp.status.properties"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Properties
name|statusProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|msgCounter
decl_stmt|;
specifier|public
specifier|static
name|int
name|noOfMessages
decl_stmt|;
specifier|public
specifier|static
name|int
name|ConsumerCount
decl_stmt|;
specifier|public
specifier|static
name|Map
name|ProducerMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Map
name|CopyProducerMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|destination
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|resetMap
init|=
literal|false
decl_stmt|;
specifier|private
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
static|static
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Protocol Handler name="
operator|+
name|getClassname
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Status prefix="
operator|+
name|STATUS_PREFIX
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Status suffix="
operator|+
name|STATUS_SUFFIX
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Status properties="
operator|+
name|STATUS_PROPERTIES
argument_list|)
expr_stmt|;
if|if
condition|(
name|STATUS_PROPERTIES
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|STATUS_PROPERTIES
argument_list|)
decl_stmt|;
try|try
block|{
name|statusProps
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully loaded properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Property file not found"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Property file error "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      *  Constructor for ConsumerSampler object.      */
specifier|public
name|ConsumerSysTest
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Created "
operator|+
name|this
argument_list|)
expr_stmt|;
name|protocolHandler
operator|=
name|getProtocol
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Using Protocol Handler: "
operator|+
name|protocolHandler
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Subscribe to the config message.      *      * @throws JMSException      */
specifier|protected
name|void
name|suscribeConfigMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|boolean
name|topic
init|=
literal|false
decl_stmt|;
name|Connection
name|connection
init|=
name|ServerConnectionFactory
operator|.
name|createConnectionFactory
argument_list|(
name|this
operator|.
name|getURL
argument_list|()
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|topic
argument_list|,
name|this
operator|.
name|getEmbeddedBroker
argument_list|()
argument_list|)
decl_stmt|;
comment|// Start connection before receiving messages.
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|ServerConnectionFactory
operator|.
name|createSession
argument_list|(
name|connection
argument_list|,
name|TRANSACTED_FALSE
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|ServerConnectionFactory
operator|.
name|createDestination
argument_list|(
name|session
argument_list|,
name|CONFIG_SUBJECT
argument_list|,
name|this
operator|.
name|getURL
argument_list|()
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|topic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
name|TextMessage
name|txtMsg
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|String
name|configMsg
init|=
name|txtMsg
operator|.
name|getText
argument_list|()
decl_stmt|;
name|noOfMessages
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|configMsg
operator|.
name|substring
argument_list|(
name|configMsg
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
operator|+
literal|1
argument_list|,
name|configMsg
operator|.
name|lastIndexOf
argument_list|(
literal|"#"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ServerConnectionFactory
operator|.
name|close
argument_list|(
name|connection
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Create the subscriber/s then subscribe.      *      * @throws JMSException      */
specifier|protected
name|void
name|subscribe
parameter_list|()
throws|throws
name|JMSException
block|{
name|String
name|subjects
index|[]
init|=
name|getSubjects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|getNoConsumer
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subject
init|=
name|subjects
index|[
name|i
operator|%
name|getNoSubject
argument_list|()
index|]
decl_stmt|;
name|subscribe
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
name|ConsumerCount
operator|=
name|getNoConsumer
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Subscribe to the subject.      *      * @param subject      * @throws JMSException      */
specifier|protected
name|void
name|subscribe
parameter_list|(
name|String
name|subject
parameter_list|)
throws|throws
name|JMSException
block|{
name|destination
argument_list|(
name|this
operator|.
name|getTopic
argument_list|()
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ServerConnectionFactory
operator|.
name|createConnectionFactory
argument_list|(
name|this
operator|.
name|getURL
argument_list|()
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|this
operator|.
name|getTopic
argument_list|()
argument_list|,
name|this
operator|.
name|getEmbeddedBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getDurable
argument_list|()
condition|)
block|{
name|IdGenerator
name|idGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Start connection before receiving messages.
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|ServerConnectionFactory
operator|.
name|createSession
argument_list|(
name|connection
argument_list|,
name|TRANSACTED_FALSE
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|this
operator|.
name|getTopic
argument_list|()
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|ServerConnectionFactory
operator|.
name|createDestination
argument_list|(
name|session
argument_list|,
name|subject
argument_list|,
name|this
operator|.
name|getURL
argument_list|()
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|this
operator|.
name|getTopic
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getDurable
argument_list|()
operator|&&
name|this
operator|.
name|getTopic
argument_list|()
condition|)
block|{
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addResource
argument_list|(
name|consumer
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Create the publisher then send the confirmation message.      *      * @throws JMSException      */
specifier|protected
name|void
name|publishConfirmMessage
parameter_list|()
throws|throws
name|JMSException
block|{
name|MessageProducer
name|publisher
init|=
literal|null
decl_stmt|;
name|String
name|text
init|=
name|PUBLISH_MSG
decl_stmt|;
name|Connection
name|connection
init|=
name|ServerConnectionFactory
operator|.
name|createConnectionFactory
argument_list|(
name|this
operator|.
name|getURL
argument_list|()
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|this
operator|.
name|getTopic
argument_list|()
argument_list|,
name|this
operator|.
name|getEmbeddedBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|getDurable
argument_list|()
condition|)
block|{
name|IdGenerator
name|idGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|idGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Session
name|session
init|=
name|ServerConnectionFactory
operator|.
name|createSession
argument_list|(
name|connection
argument_list|,
name|this
operator|.
name|getTransacted
argument_list|()
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|this
operator|.
name|getTopic
argument_list|()
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|ServerConnectionFactory
operator|.
name|createDestination
argument_list|(
name|session
argument_list|,
name|CONFIRM_SUBJECT
argument_list|,
name|this
operator|.
name|getURL
argument_list|()
argument_list|,
name|ACTIVEMQ_SERVER
argument_list|,
name|this
operator|.
name|getTopic
argument_list|()
argument_list|)
decl_stmt|;
name|publisher
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|getDurable
argument_list|()
condition|)
block|{
name|publisher
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|publisher
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
block|}
name|publishConfirmMessage
argument_list|(
name|connection
argument_list|,
name|session
argument_list|,
name|publisher
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * publish the confirmation message.      *      * @param connection      * @param session      * @param publisher      * @param text      * @throws JMSException      */
specifier|protected
name|void
name|publishConfirmMessage
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|Session
name|session
parameter_list|,
name|MessageProducer
name|publisher
parameter_list|,
name|String
name|text
parameter_list|)
throws|throws
name|JMSException
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
comment|// Close the connection and session after sending the config message
name|ServerConnectionFactory
operator|.
name|close
argument_list|(
name|connection
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs and subscribes to messages.      *      * @throws JMSException      */
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// Receives the config message
name|suscribeConfigMessage
argument_list|()
expr_stmt|;
comment|// Create subscriber
name|subscribe
argument_list|()
expr_stmt|;
comment|// Publish confirm messages
name|publishConfirmMessage
argument_list|()
expr_stmt|;
block|}
comment|/**      * Retrieves the sample as SampleResult object. There are times that this      * is ignored.      *      * @param e - Entry object.      * @return Returns the sample result.      */
specifier|public
name|SampleResult
name|sample
parameter_list|(
name|Entry
name|e
parameter_list|)
block|{
comment|// Entry tends to be ignored ...
name|SampleResult
name|res
init|=
operator|new
name|SampleResult
argument_list|()
decl_stmt|;
name|res
operator|.
name|setSampleLabel
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|setSamplerData
argument_list|(
name|getURL
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|sampleStart
argument_list|()
expr_stmt|;
try|try
block|{
name|this
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|ex
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error running consumer "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|res
operator|.
name|setResponseCode
argument_list|(
literal|"500"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setResponseMessage
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Calculate response time
name|res
operator|.
name|sampleEnd
argument_list|()
expr_stmt|;
comment|// Set if we were successful or not
name|res
operator|.
name|setSuccessful
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|ActiveMQMessage
name|amsg
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
decl_stmt|;
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|amsg
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|addToMap
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to force deserialize the content"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *      * @param text Add the message to a Producer hash map.      */
specifier|private
specifier|synchronized
name|void
name|addToMap
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|msgCounter
operator|++
expr_stmt|;
name|String
name|strMsgCounter
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|msgCounter
argument_list|)
decl_stmt|;
name|ProducerMap
operator|.
name|put
argument_list|(
name|strMsgCounter
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      *      * @return Resets the Producer map.      */
specifier|public
specifier|synchronized
name|Map
name|resetProducerMap
parameter_list|()
block|{
name|Map
name|copy
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|ConcurrentHashMap
argument_list|(
name|ProducerMap
argument_list|)
argument_list|)
decl_stmt|;
name|ProducerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|msgCounter
operator|=
literal|0
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|/**      *      * @param dest      */
specifier|private
name|void
name|destination
parameter_list|(
name|boolean
name|dest
parameter_list|)
block|{
name|destination
operator|=
name|dest
expr_stmt|;
block|}
block|}
end_class

end_unit

