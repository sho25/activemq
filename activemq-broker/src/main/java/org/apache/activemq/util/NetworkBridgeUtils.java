begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisoryBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkBridgeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkBridgeUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NetworkBridgeUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Generate the BrokerSubscriptionInfo which is used to tell the broker on the other      * side of the network bridge which NC durable subscriptions are still needed for demand.      * @param brokerService      * @param config      * @return      */
specifier|public
specifier|static
name|BrokerSubscriptionInfo
name|getBrokerSubscriptionInfo
parameter_list|(
specifier|final
name|BrokerService
name|brokerService
parameter_list|,
specifier|final
name|NetworkBridgeConfiguration
name|config
parameter_list|)
block|{
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|TopicRegion
name|topicRegion
init|=
operator|(
name|TopicRegion
operator|)
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ConsumerInfo
argument_list|>
name|subscriptionInfos
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|//Add all durable subscriptions to the set that match the network config
comment|//which currently is just the dynamicallyIncludedDestinations list
for|for
control|(
name|SubscriptionKey
name|key
range|:
name|topicRegion
operator|.
name|getDurableSubscriptions
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|DurableTopicSubscription
name|sub
init|=
name|topicRegion
operator|.
name|getDurableSubscriptions
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
operator|&&
name|NetworkBridgeUtils
operator|.
name|matchesNetworkConfig
argument_list|(
name|config
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
condition|)
block|{
name|ConsumerInfo
name|ci
init|=
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|copy
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setClientId
argument_list|(
name|key
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionInfos
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
comment|//We also need to iterate over all normal subscriptions and check if they are part of
comment|//any dynamicallyIncludedDestination that is configured with forceDurable to be true
comment|//over the network bridge.  If forceDurable is true then we want to add the consumer to the set
for|for
control|(
name|Subscription
name|sub
range|:
name|topicRegion
operator|.
name|getSubscriptions
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sub
operator|!=
literal|null
operator|&&
name|NetworkBridgeUtils
operator|.
name|isForcedDurable
argument_list|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
argument_list|,
name|config
operator|.
name|getDynamicallyIncludedDestinations
argument_list|()
argument_list|)
condition|)
block|{
name|subscriptionInfos
operator|.
name|add
argument_list|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
comment|//Lastly, if isUseVirtualDestSubs is configured on this broker (to fire advisories) and
comment|//configured on the network connector (to listen to advisories) then also add any virtual
comment|//dest subscription to the set if forceDurable is true for its destination
name|AdvisoryBroker
name|ab
init|=
operator|(
name|AdvisoryBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AdvisoryBroker
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ab
operator|!=
literal|null
operator|&&
name|brokerService
operator|.
name|isUseVirtualDestSubs
argument_list|()
operator|&&
name|config
operator|.
name|isUseVirtualDestSubs
argument_list|()
condition|)
block|{
for|for
control|(
name|ConsumerInfo
name|info
range|:
name|ab
operator|.
name|getVirtualDestinationConsumers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|NetworkBridgeUtils
operator|.
name|isForcedDurable
argument_list|(
name|info
argument_list|,
name|config
operator|.
name|getDynamicallyIncludedDestinations
argument_list|()
argument_list|)
condition|)
block|{
name|subscriptionInfos
operator|.
name|add
argument_list|(
name|info
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error processing virtualDestinationSubs for BrokerSubscriptionInfo"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error processing virtualDestinationSubs for BrokerSubscriptionInfo"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|BrokerSubscriptionInfo
name|bsi
init|=
operator|new
name|BrokerSubscriptionInfo
argument_list|(
name|brokerService
operator|.
name|getBrokerName
argument_list|()
argument_list|)
decl_stmt|;
name|bsi
operator|.
name|setSubscriptionInfos
argument_list|(
name|subscriptionInfos
operator|.
name|toArray
argument_list|(
operator|new
name|ConsumerInfo
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bsi
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isForcedDurable
parameter_list|(
specifier|final
name|ConsumerInfo
name|info
parameter_list|,
specifier|final
name|List
argument_list|<
name|ActiveMQDestination
argument_list|>
name|dynamicallyIncludedDestinations
parameter_list|)
block|{
return|return
name|dynamicallyIncludedDestinations
operator|!=
literal|null
condition|?
name|isForcedDurable
argument_list|(
name|info
argument_list|,
name|dynamicallyIncludedDestinations
operator|.
name|toArray
argument_list|(
operator|new
name|ActiveMQDestination
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|null
argument_list|)
else|:
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isForcedDurable
parameter_list|(
specifier|final
name|ConsumerInfo
name|info
parameter_list|,
specifier|final
name|ActiveMQDestination
index|[]
name|dynamicallyIncludedDestinations
parameter_list|,
specifier|final
name|ActiveMQDestination
index|[]
name|staticallyIncludedDestinations
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|isDurable
argument_list|()
operator|||
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|isQueue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|AdvisorySupport
operator|.
name|isAdvisoryTopic
argument_list|(
name|destination
argument_list|)
operator|||
name|destination
operator|.
name|isTemporary
argument_list|()
operator|||
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ActiveMQDestination
name|matching
init|=
name|findMatchingDestination
argument_list|(
name|dynamicallyIncludedDestinations
argument_list|,
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|matching
operator|!=
literal|null
condition|)
block|{
return|return
name|isDestForcedDurable
argument_list|(
name|matching
argument_list|)
return|;
block|}
name|matching
operator|=
name|findMatchingDestination
argument_list|(
name|staticallyIncludedDestinations
argument_list|,
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|matching
operator|!=
literal|null
condition|)
block|{
return|return
name|isDestForcedDurable
argument_list|(
name|matching
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchesNetworkConfig
parameter_list|(
specifier|final
name|NetworkBridgeConfiguration
name|config
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|List
argument_list|<
name|ActiveMQDestination
argument_list|>
name|includedDests
init|=
name|config
operator|.
name|getDynamicallyIncludedDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|includedDests
operator|!=
literal|null
operator|&&
name|includedDests
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|includedDests
control|)
block|{
name|DestinationFilter
name|inclusionFilter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
operator|&&
name|inclusionFilter
operator|.
name|matches
argument_list|(
name|destination
argument_list|)
operator|&&
name|dest
operator|.
name|getDestinationType
argument_list|()
operator|==
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|matchesDestinations
parameter_list|(
name|ActiveMQDestination
index|[]
name|dests
parameter_list|,
specifier|final
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
if|if
condition|(
name|dests
operator|!=
literal|null
operator|&&
name|dests
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|dests
control|)
block|{
name|DestinationFilter
name|inclusionFilter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
operator|&&
name|inclusionFilter
operator|.
name|matches
argument_list|(
name|destination
argument_list|)
operator|&&
name|dest
operator|.
name|getDestinationType
argument_list|()
operator|==
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|ActiveMQDestination
name|findMatchingDestination
parameter_list|(
name|ActiveMQDestination
index|[]
name|dests
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
if|if
condition|(
name|dests
operator|!=
literal|null
operator|&&
name|dests
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|dests
control|)
block|{
name|DestinationFilter
name|inclusionFilter
init|=
name|DestinationFilter
operator|.
name|parseFilter
argument_list|(
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
operator|&&
name|inclusionFilter
operator|.
name|matches
argument_list|(
name|destination
argument_list|)
operator|&&
name|dest
operator|.
name|getDestinationType
argument_list|()
operator|==
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
return|return
name|dest
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDestForcedDurable
parameter_list|(
specifier|final
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
name|boolean
name|isForceDurable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
name|destination
operator|.
name|getOptions
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|isForceDurable
operator|=
operator|(
name|boolean
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|options
operator|.
name|get
argument_list|(
literal|"forceDurable"
argument_list|)
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|isForceDurable
return|;
block|}
block|}
end_class

end_unit

