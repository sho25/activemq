begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE  * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file  * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the  * License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
operator|.
name|index
operator|.
name|hash
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_comment
comment|/**  * Key and index for DiskBased Hash Index  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
class|class
name|HashEntry
implements|implements
name|Comparable
block|{
specifier|static
specifier|final
name|int
name|NOT_SET
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Comparable
name|key
decl_stmt|;
specifier|private
name|long
name|indexOffset
decl_stmt|;
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|HashEntry
condition|)
block|{
name|HashEntry
name|other
init|=
operator|(
name|HashEntry
operator|)
name|o
decl_stmt|;
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|key
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|key
operator|.
name|compareTo
argument_list|(
name|o
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
name|int
name|hasCode
parameter_list|()
block|{
return|return
name|key
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HashEntry("
operator|+
name|key
operator|+
literal|","
operator|+
name|indexOffset
operator|+
literal|")"
return|;
block|}
name|HashEntry
name|copy
parameter_list|()
block|{
name|HashEntry
name|copy
init|=
operator|new
name|HashEntry
argument_list|()
decl_stmt|;
name|copy
operator|.
name|key
operator|=
name|this
operator|.
name|key
expr_stmt|;
name|copy
operator|.
name|indexOffset
operator|=
name|this
operator|.
name|indexOffset
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|/**      * @return the key      */
name|Comparable
name|getKey
parameter_list|()
block|{
return|return
name|this
operator|.
name|key
return|;
block|}
comment|/**      * @param key the key to set      */
name|void
name|setKey
parameter_list|(
name|Comparable
name|key
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
comment|/**      * @return the indexOffset      */
name|long
name|getIndexOffset
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexOffset
return|;
block|}
comment|/**      * @param indexOffset the indexOffset to set      */
name|void
name|setIndexOffset
parameter_list|(
name|long
name|indexOffset
parameter_list|)
block|{
name|this
operator|.
name|indexOffset
operator|=
name|indexOffset
expr_stmt|;
block|}
name|void
name|write
parameter_list|(
name|Marshaller
name|keyMarshaller
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeLong
argument_list|(
name|indexOffset
argument_list|)
expr_stmt|;
name|keyMarshaller
operator|.
name|writePayload
argument_list|(
name|key
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
name|void
name|read
parameter_list|(
name|Marshaller
name|keyMarshaller
parameter_list|,
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|indexOffset
operator|=
name|dataIn
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|key
operator|=
operator|(
name|Comparable
operator|)
name|keyMarshaller
operator|.
name|readPayload
argument_list|(
name|dataIn
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

