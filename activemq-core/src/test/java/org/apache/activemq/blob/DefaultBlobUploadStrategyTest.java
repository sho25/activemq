begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultBlobUploadStrategyTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FILESERVER_URL
init|=
literal|"http://localhost:8080/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|URI
init|=
literal|"vm://localhost?jms.blobTransferPolicy.defaultUploadUrl=http://localhost:8080/"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|DefaultBlobUploadStrategyTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDummy
parameter_list|()
throws|throws
name|Exception
block|{      }
comment|// DISABLED UNTIL WE EMBED JETTY
specifier|public
name|void
name|xtestUploadViaDefaultBlobUploadStrategy
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 0. Initialise
name|File
name|file
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"amq-data-file-"
argument_list|,
literal|".dat"
argument_list|)
decl_stmt|;
comment|// lets write some data
name|BufferedWriter
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|FileWriter
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"Hello World!"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|URI
argument_list|)
decl_stmt|;
name|BlobTransferPolicy
name|policy
init|=
name|factory
operator|.
name|getBlobTransferPolicy
argument_list|()
decl_stmt|;
name|ActiveMQBlobMessage
name|msg
init|=
operator|new
name|ActiveMQBlobMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1. Upload
name|DefaultBlobUploadStrategy
name|strategy
init|=
operator|new
name|DefaultBlobUploadStrategy
argument_list|(
name|policy
argument_list|)
decl_stmt|;
name|strategy
operator|.
name|uploadFile
argument_list|(
name|msg
argument_list|,
name|file
argument_list|)
expr_stmt|;
comment|// 2. Download
name|msg
operator|.
name|setURL
argument_list|(
operator|new
name|URL
argument_list|(
name|FILESERVER_URL
operator|+
name|msg
operator|.
name|getMessageId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|msg
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|long
name|bytesRead
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|c
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|bytesRead
operator|+=
name|c
expr_stmt|;
block|}
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
name|bytesRead
operator|==
name|file
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3. Delete
comment|//strategy.deleteFile(msg);
block|}
block|}
end_class

end_unit

