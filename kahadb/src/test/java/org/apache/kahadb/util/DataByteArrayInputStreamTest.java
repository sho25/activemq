begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|DataByteArrayInputStreamTest
extends|extends
name|TestCase
block|{
comment|/**      * https://issues.apache.org/activemq/browse/AMQ-1911      */
specifier|public
name|void
name|testNonAscii
parameter_list|()
throws|throws
name|Exception
block|{
name|doMarshallUnMarshallValidation
argument_list|(
literal|"mei√üen"
argument_list|)
expr_stmt|;
name|String
name|accumulator
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
name|int
name|test
init|=
literal|0
decl_stmt|;
comment|// int to get Supplementary chars
while|while
condition|(
name|Character
operator|.
name|isDefined
argument_list|(
name|test
argument_list|)
condition|)
block|{
name|String
name|toTest
init|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|test
argument_list|)
decl_stmt|;
name|accumulator
operator|+=
name|toTest
expr_stmt|;
name|doMarshallUnMarshallValidation
argument_list|(
name|toTest
argument_list|)
expr_stmt|;
name|test
operator|++
expr_stmt|;
block|}
name|int
name|massiveThreeByteCharValue
init|=
literal|0x0FFF
decl_stmt|;
name|String
name|toTest
init|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|massiveThreeByteCharValue
argument_list|)
decl_stmt|;
name|accumulator
operator|+=
name|toTest
expr_stmt|;
name|doMarshallUnMarshallValidation
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
name|massiveThreeByteCharValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// Altogether
name|doMarshallUnMarshallValidation
argument_list|(
name|accumulator
argument_list|)
expr_stmt|;
comment|// the three byte values
name|char
name|t
init|=
literal|'\u0800'
decl_stmt|;
specifier|final
name|char
name|max
init|=
literal|'\uffff'
decl_stmt|;
name|accumulator
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|t
argument_list|)
expr_stmt|;
while|while
condition|(
name|t
operator|<
name|max
condition|)
block|{
name|String
name|val
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|accumulator
operator|+=
name|val
expr_stmt|;
name|doMarshallUnMarshallValidation
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|t
operator|++
expr_stmt|;
block|}
comment|// Altogether so long as it is not too big
while|while
condition|(
name|accumulator
operator|.
name|length
argument_list|()
operator|>
literal|20000
condition|)
block|{
name|accumulator
operator|=
name|accumulator
operator|.
name|substring
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
block|}
name|doMarshallUnMarshallValidation
argument_list|(
name|accumulator
argument_list|)
expr_stmt|;
block|}
name|void
name|doMarshallUnMarshallValidation
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|DataByteArrayOutputStream
name|out
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeUTF
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|DataByteArrayInputStream
name|in
init|=
operator|new
name|DataByteArrayInputStream
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|in
operator|.
name|readBoolean
argument_list|()
expr_stmt|;
name|String
name|readBack
init|=
name|in
operator|.
name|readUTF
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|readBack
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

