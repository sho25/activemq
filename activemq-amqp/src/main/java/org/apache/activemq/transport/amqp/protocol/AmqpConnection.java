begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|protocol
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|ANONYMOUS_RELAY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|CONNECTION_OPEN_FAILED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|CONTAINER_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|INVALID_FIELD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|PLATFORM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|PRODUCT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|QUEUE_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|TEMP_QUEUE_CAPABILITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|TEMP_TOPIC_CAPABILITY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|TOPIC_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpSupport
operator|.
name|contains
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidClientIDException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DurableTopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ExceptionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ShutdownInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|InactivityIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpInactivityMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpProtocolConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpTransportFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|ResponseHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|sasl
operator|.
name|AmqpAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|Proton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Coordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|AmqpError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ErrorCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Delivery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|EndpointState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|CollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|ProtocolTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|TransportImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|framing
operator|.
name|TransportFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Implements the mechanics of managing a single remote peer connection.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpConnection
implements|implements
name|AmqpProtocolConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|TRACE_FRAMES
init|=
name|AmqpTransportFilter
operator|.
name|TRACE_FRAMES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpConnection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHANNEL_MAX
init|=
literal|32767
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_VERSION
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_PLATFORM
decl_stmt|;
static|static
block|{
name|String
name|javaVersion
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
decl_stmt|;
name|BROKER_PLATFORM
operator|=
literal|"Java/"
operator|+
operator|(
name|javaVersion
operator|==
literal|null
condition|?
literal|"unknown"
else|:
name|javaVersion
operator|)
expr_stmt|;
name|InputStream
name|in
init|=
literal|null
decl_stmt|;
name|String
name|version
init|=
literal|"5.12.0"
decl_stmt|;
if|if
condition|(
operator|(
name|in
operator|=
name|AmqpConnection
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/org/apache/activemq/version.txt"
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|version
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
name|BROKER_VERSION
operator|=
name|version
expr_stmt|;
block|}
specifier|private
specifier|final
name|Transport
name|protonTransport
init|=
name|Proton
operator|.
name|transport
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Connection
name|protonConnection
init|=
name|Proton
operator|.
name|connection
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Collector
name|eventCollector
init|=
operator|new
name|CollectorImpl
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AmqpTransport
name|amqpTransport
decl_stmt|;
specifier|private
specifier|final
name|AmqpWireFormat
name|amqpWireFormat
decl_stmt|;
specifier|private
specifier|final
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|CONNECTION_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|lastCommandId
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|CONNECTION_ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConnectionInfo
name|connectionInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
specifier|private
name|long
name|nextSessionId
decl_stmt|;
specifier|private
name|long
name|nextTempDestinationId
decl_stmt|;
specifier|private
name|long
name|nextTransactionId
decl_stmt|;
specifier|private
name|boolean
name|closing
decl_stmt|;
specifier|private
name|boolean
name|closedSocket
decl_stmt|;
specifier|private
name|AmqpAuthenticator
name|authenticator
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|TransactionId
argument_list|,
name|AmqpTransactionCoordinator
argument_list|>
name|transactions
init|=
operator|new
name|HashMap
argument_list|<
name|TransactionId
argument_list|,
name|AmqpTransactionCoordinator
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
name|resposeHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|ConsumerId
argument_list|,
name|AmqpSender
argument_list|>
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|AmqpSender
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AmqpConnection
parameter_list|(
name|AmqpTransport
name|transport
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|amqpTransport
operator|=
name|transport
expr_stmt|;
name|AmqpInactivityMonitor
name|monitor
init|=
name|transport
operator|.
name|getInactivityMonitor
argument_list|()
decl_stmt|;
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|setAmqpTransport
argument_list|(
name|amqpTransport
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|amqpWireFormat
operator|=
name|transport
operator|.
name|getWireFormat
argument_list|()
expr_stmt|;
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
comment|// the configured maxFrameSize on the URI.
name|int
name|maxFrameSize
init|=
name|amqpWireFormat
operator|.
name|getMaxAmqpFrameSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxFrameSize
operator|>
name|AmqpWireFormat
operator|.
name|NO_AMQP_MAX_FRAME_SIZE
condition|)
block|{
name|this
operator|.
name|protonTransport
operator|.
name|setMaxFrameSize
argument_list|(
name|maxFrameSize
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|protonTransport
operator|.
name|bind
argument_list|(
name|this
operator|.
name|protonConnection
argument_list|)
expr_stmt|;
name|this
operator|.
name|protonTransport
operator|.
name|setChannelMax
argument_list|(
name|CHANNEL_MAX
argument_list|)
expr_stmt|;
name|this
operator|.
name|protonConnection
operator|.
name|collect
argument_list|(
name|eventCollector
argument_list|)
expr_stmt|;
name|updateTracer
argument_list|()
expr_stmt|;
block|}
comment|/**      * Load and return a<code>[]Symbol</code> that contains the connection capabilities      * offered to new connections      *      * @return the capabilities that are offered to new clients on connect.      */
specifier|protected
name|Symbol
index|[]
name|getConnectionCapabilitiesOffered
parameter_list|()
block|{
return|return
operator|new
name|Symbol
index|[]
block|{
name|ANONYMOUS_RELAY
block|}
return|;
block|}
comment|/**      * Load and return a<code>Map<Symbol, Object></code> that contains the properties      * that this connection supplies to incoming connections.      *      * @return the properties that are offered to the incoming connection.      */
specifier|protected
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|getConnetionProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|QUEUE_PREFIX
argument_list|,
literal|"queue://"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|TOPIC_PREFIX
argument_list|,
literal|"topic://"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PRODUCT
argument_list|,
literal|"ActiveMQ"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|VERSION
argument_list|,
name|BROKER_VERSION
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|PLATFORM
argument_list|,
name|BROKER_PLATFORM
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|/**      * Load and return a<code>Map<Symbol, Object></code> that contains the properties      * that this connection supplies to incoming connections when the open has failed      * and the remote should expect a close to follow.      *      * @return the properties that are offered to the incoming connection.      */
specifier|protected
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|getFailedConnetionProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|CONNECTION_OPEN_FAILED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTracer
parameter_list|()
block|{
if|if
condition|(
name|amqpTransport
operator|.
name|isTrace
argument_list|()
condition|)
block|{
operator|(
operator|(
name|TransportImpl
operator|)
name|protonTransport
operator|)
operator|.
name|setProtocolTracer
argument_list|(
operator|new
name|ProtocolTracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|receivedFrame
parameter_list|(
name|TransportFrame
name|transportFrame
parameter_list|)
block|{
name|TRACE_FRAMES
operator|.
name|trace
argument_list|(
literal|"{} | RECV: {}"
argument_list|,
name|AmqpConnection
operator|.
name|this
operator|.
name|amqpTransport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|transportFrame
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sentFrame
parameter_list|(
name|TransportFrame
name|transportFrame
parameter_list|)
block|{
name|TRACE_FRAMES
operator|.
name|trace
argument_list|(
literal|"{} | SENT: {}"
argument_list|,
name|AmqpConnection
operator|.
name|this
operator|.
name|amqpTransport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|transportFrame
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|keepAlive
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|rescheduleAt
init|=
literal|0l
decl_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Performing connection:{} keep-alive processing"
argument_list|,
name|amqpTransport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protonConnection
operator|.
name|getLocalState
argument_list|()
operator|!=
name|EndpointState
operator|.
name|CLOSED
condition|)
block|{
name|rescheduleAt
operator|=
name|protonTransport
operator|.
name|tick
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
if|if
condition|(
name|protonTransport
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|rescheduleAt
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transport closed after inactivity check."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InactivityIOException
argument_list|(
literal|"Channel was inactive for to long"
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection:{} keep alive processing done, next update in {} milliseconds."
argument_list|,
name|amqpTransport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|rescheduleAt
argument_list|)
expr_stmt|;
return|return
name|rescheduleAt
return|;
block|}
comment|//----- Connection Properties Accessors ----------------------------------//
comment|/**      * @return the amount of credit assigned to AMQP receiver links created from      *         sender links on the remote peer.      */
specifier|public
name|int
name|getConfiguredReceiverCredit
parameter_list|()
block|{
return|return
name|amqpWireFormat
operator|.
name|getProducerCredit
argument_list|()
return|;
block|}
comment|/**      * @return the transformer type that was configured for this AMQP transport.      */
specifier|public
name|String
name|getConfiguredTransformer
parameter_list|()
block|{
return|return
name|amqpWireFormat
operator|.
name|getTransformer
argument_list|()
return|;
block|}
comment|/**      * @return the ActiveMQ ConnectionId that identifies this AMQP Connection.      */
specifier|public
name|ConnectionId
name|getConnectionId
parameter_list|()
block|{
return|return
name|connectionId
return|;
block|}
comment|/**      * @return the Client ID used to create the connection with ActiveMQ      */
specifier|public
name|String
name|getClientId
parameter_list|()
block|{
return|return
name|connectionInfo
operator|.
name|getClientId
argument_list|()
return|;
block|}
comment|/**      * @return the configured max frame size allowed for incoming messages.      */
specifier|public
name|long
name|getMaxFrameSize
parameter_list|()
block|{
return|return
name|amqpWireFormat
operator|.
name|getMaxFrameSize
argument_list|()
return|;
block|}
comment|//----- Proton Event handling and IO support -----------------------------//
name|void
name|pumpProtonToSocket
parameter_list|()
block|{
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|ByteBuffer
name|toWrite
init|=
name|protonTransport
operator|.
name|getOutputBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|toWrite
operator|!=
literal|null
operator|&&
name|toWrite
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending {} bytes out"
argument_list|,
name|toWrite
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|amqpTransport
operator|.
name|sendToAmqp
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|protonTransport
operator|.
name|outputConsumed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|amqpTransport
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAMQPData
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|Buffer
name|frame
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|==
name|AmqpHeader
operator|.
name|class
condition|)
block|{
name|AmqpHeader
name|header
init|=
operator|(
name|AmqpHeader
operator|)
name|command
decl_stmt|;
if|if
condition|(
name|amqpWireFormat
operator|.
name|isHeaderValid
argument_list|(
name|header
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection from an AMQP v1.0 client initiated. {}"
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Connection attempt from non AMQP v1.0 client. {}"
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|AmqpHeader
name|reply
init|=
name|amqpWireFormat
operator|.
name|getMinimallySupportedHeader
argument_list|()
decl_stmt|;
name|amqpTransport
operator|.
name|sendToAmqp
argument_list|(
name|reply
operator|.
name|getBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|handleException
argument_list|(
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Connection from client using unsupported AMQP attempted"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|header
operator|.
name|getProtocolId
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|authenticator
operator|=
literal|null
expr_stmt|;
break|break;
comment|// nothing to do..
case|case
literal|3
case|:
comment|// Client will be using SASL for auth..
name|authenticator
operator|=
operator|new
name|AmqpAuthenticator
argument_list|(
name|amqpTransport
argument_list|,
name|protonTransport
operator|.
name|sasl
argument_list|()
argument_list|,
name|brokerService
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
name|frame
operator|=
name|header
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|=
operator|(
name|Buffer
operator|)
name|command
expr_stmt|;
block|}
if|if
condition|(
name|protonTransport
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Ignoring incoming AMQP data, transport is closed."
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|frame
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|int
name|count
init|=
name|protonTransport
operator|.
name|input
argument_list|(
name|frame
operator|.
name|data
argument_list|,
name|frame
operator|.
name|offset
argument_list|,
name|frame
operator|.
name|length
argument_list|)
decl_stmt|;
name|frame
operator|.
name|moveHead
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Could not decode AMQP frame: "
operator|+
name|frame
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|authenticator
operator|!=
literal|null
condition|)
block|{
name|processSaslExchange
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|processProtonEvents
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processSaslExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|authenticator
operator|.
name|processSaslExchange
argument_list|(
name|connectionInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|authenticator
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|amqpTransport
operator|.
name|getWireFormat
argument_list|()
operator|.
name|resetMagicRead
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|processProtonEvents
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Event
name|event
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|event
operator|=
name|eventCollector
operator|.
name|peek
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|amqpTransport
operator|.
name|isTrace
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Processing event: {}"
argument_list|,
name|event
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CONNECTION_REMOTE_OPEN
case|:
name|processConnectionOpen
argument_list|(
name|event
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CONNECTION_REMOTE_CLOSE
case|:
name|processConnectionClose
argument_list|(
name|event
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SESSION_REMOTE_OPEN
case|:
name|processSessionOpen
argument_list|(
name|event
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SESSION_REMOTE_CLOSE
case|:
name|processSessionClose
argument_list|(
name|event
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_REMOTE_OPEN
case|:
name|processLinkOpen
argument_list|(
name|event
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_REMOTE_DETACH
case|:
name|processLinkDetach
argument_list|(
name|event
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_REMOTE_CLOSE
case|:
name|processLinkClose
argument_list|(
name|event
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_FLOW
case|:
name|processLinkFlow
argument_list|(
name|event
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELIVERY
case|:
name|processDelivery
argument_list|(
name|event
operator|.
name|getDelivery
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|eventCollector
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Could not process AMQP commands"
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|processConnectionOpen
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|stopConnectionTimeoutChecker
argument_list|()
expr_stmt|;
name|connectionInfo
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|String
name|clientId
init|=
name|protonConnection
operator|.
name|getRemoteContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
operator|&&
operator|!
name|clientId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
name|connectionInfo
operator|.
name|setTransportContext
argument_list|(
name|amqpTransport
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|.
name|getTransport
argument_list|()
operator|.
name|getRemoteIdleTimeout
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|amqpTransport
operator|.
name|isUseInactivityMonitor
argument_list|()
condition|)
block|{
comment|// We cannot meet the requested Idle processing because the inactivity monitor is
comment|// disabled so we won't send idle frames to match the request.
name|protonConnection
operator|.
name|setProperties
argument_list|(
name|getFailedConnetionProperties
argument_list|()
argument_list|)
expr_stmt|;
name|protonConnection
operator|.
name|open
argument_list|()
expr_stmt|;
name|protonConnection
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|PRECONDITION_FAILED
argument_list|,
literal|"Cannot send idle frames"
argument_list|)
argument_list|)
expr_stmt|;
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
name|amqpTransport
operator|.
name|onException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Connection failed, remote requested idle processing but inactivity monitoring is disbaled."
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|sendToActiveMQ
argument_list|(
name|connectionInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|Throwable
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|protonConnection
operator|.
name|setProperties
argument_list|(
name|getFailedConnetionProperties
argument_list|()
argument_list|)
expr_stmt|;
name|protonConnection
operator|.
name|open
argument_list|()
expr_stmt|;
name|exception
operator|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
expr_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|SecurityException
condition|)
block|{
name|protonConnection
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|UNAUTHORIZED_ACCESS
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|InvalidClientIDException
condition|)
block|{
name|ErrorCondition
name|condition
init|=
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|infoMap
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|infoMap
operator|.
name|put
argument_list|(
name|INVALID_FIELD
argument_list|,
name|CONTAINER_ID
argument_list|)
expr_stmt|;
name|condition
operator|.
name|setInfo
argument_list|(
name|infoMap
argument_list|)
expr_stmt|;
name|protonConnection
operator|.
name|setCondition
argument_list|(
name|condition
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|protonConnection
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|ILLEGAL_STATE
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|amqpTransport
operator|.
name|isUseInactivityMonitor
argument_list|()
operator|&&
name|amqpWireFormat
operator|.
name|getIdleTimeout
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection requesting Idle timeout of: {} mills"
argument_list|,
name|amqpWireFormat
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|protonTransport
operator|.
name|setIdleTimeout
argument_list|(
name|amqpWireFormat
operator|.
name|getIdleTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|protonConnection
operator|.
name|setOfferedCapabilities
argument_list|(
name|getConnectionCapabilitiesOffered
argument_list|()
argument_list|)
expr_stmt|;
name|protonConnection
operator|.
name|setProperties
argument_list|(
name|getConnetionProperties
argument_list|()
argument_list|)
expr_stmt|;
name|protonConnection
operator|.
name|open
argument_list|()
expr_stmt|;
name|configureInactivityMonitor
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|amqpTransport
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|processConnectionClose
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|closing
operator|=
literal|true
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|connectionId
argument_list|)
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|protonConnection
operator|.
name|free
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|closedSocket
condition|)
block|{
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processSessionOpen
parameter_list|(
name|Session
name|protonSession
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|AmqpSession
argument_list|(
name|this
argument_list|,
name|getNextSessionId
argument_list|()
argument_list|,
name|protonSession
argument_list|)
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|processSessionClose
parameter_list|(
name|Session
name|protonSession
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|protonSession
operator|.
name|getContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|AmqpResource
operator|)
name|protonSession
operator|.
name|getContext
argument_list|()
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|protonSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|protonSession
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processLinkOpen
parameter_list|(
name|Link
name|link
parameter_list|)
throws|throws
name|Exception
block|{
name|link
operator|.
name|setSource
argument_list|(
name|link
operator|.
name|getRemoteSource
argument_list|()
argument_list|)
expr_stmt|;
name|link
operator|.
name|setTarget
argument_list|(
name|link
operator|.
name|getRemoteTarget
argument_list|()
argument_list|)
expr_stmt|;
name|AmqpSession
name|session
init|=
operator|(
name|AmqpSession
operator|)
name|link
operator|.
name|getSession
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
operator|instanceof
name|Receiver
condition|)
block|{
if|if
condition|(
name|link
operator|.
name|getRemoteTarget
argument_list|()
operator|instanceof
name|Coordinator
condition|)
block|{
name|session
operator|.
name|createCoordinator
argument_list|(
operator|(
name|Receiver
operator|)
name|link
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|session
operator|.
name|createReceiver
argument_list|(
operator|(
name|Receiver
operator|)
name|link
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|session
operator|.
name|createSender
argument_list|(
operator|(
name|Sender
operator|)
name|link
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processLinkDetach
parameter_list|(
name|Link
name|link
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|context
init|=
name|link
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|instanceof
name|AmqpLink
condition|)
block|{
operator|(
operator|(
name|AmqpLink
operator|)
name|context
operator|)
operator|.
name|detach
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|link
operator|.
name|detach
argument_list|()
expr_stmt|;
name|link
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processLinkClose
parameter_list|(
name|Link
name|link
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|context
init|=
name|link
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|instanceof
name|AmqpLink
condition|)
block|{
operator|(
operator|(
name|AmqpLink
operator|)
name|context
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
name|link
operator|.
name|close
argument_list|()
expr_stmt|;
name|link
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processLinkFlow
parameter_list|(
name|Link
name|link
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|context
init|=
name|link
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|instanceof
name|AmqpLink
condition|)
block|{
operator|(
operator|(
name|AmqpLink
operator|)
name|context
operator|)
operator|.
name|flow
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|delivery
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|Object
name|context
init|=
name|delivery
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|instanceof
name|AmqpLink
condition|)
block|{
name|AmqpLink
name|amqpLink
init|=
operator|(
name|AmqpLink
operator|)
name|context
decl_stmt|;
name|amqpLink
operator|.
name|delivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//----- Event entry points for ActiveMQ commands and errors --------------//
annotation|@
name|Override
specifier|public
name|void
name|onAMQPException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|closedSocket
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|closing
condition|)
block|{
try|try
block|{
name|closing
operator|=
literal|true
expr_stmt|;
comment|// Attempt to inform the other end that we are going to close
comment|// so that the client doesn't wait around forever.
name|protonConnection
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|DECODE_ERROR
argument_list|,
name|error
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
name|amqpTransport
operator|.
name|sendToActiveMQ
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|amqpTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onActiveMQCommand
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|ResponseHandler
name|rh
init|=
name|resposeHandlers
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rh
operator|!=
literal|null
condition|)
block|{
name|rh
operator|.
name|onResponse
argument_list|(
name|this
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pass down any unexpected errors. Should this close the connection?
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|dispatch
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|AmqpSender
name|sender
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|dispatch
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sender
operator|!=
literal|null
condition|)
block|{
comment|// End of Queue Browse will have no Message object.
if|if
condition|(
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Dispatching MessageId: {} to consumer"
argument_list|,
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Dispatching End of Browse Command to consumer {}"
argument_list|,
name|dispatch
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sender
operator|.
name|onMessageDispatch
argument_list|(
name|dispatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finished Dispatch of MessageId: {} to consumer"
argument_list|,
name|dispatch
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ConnectionError
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
comment|// Pass down any unexpected async errors. Should this close the connection?
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ConnectionError
operator|)
name|command
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isConsumerControl
argument_list|()
condition|)
block|{
name|ConsumerControl
name|control
init|=
operator|(
name|ConsumerControl
operator|)
name|command
decl_stmt|;
name|AmqpSender
name|sender
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|control
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sender
operator|!=
literal|null
condition|)
block|{
name|sender
operator|.
name|onConsumerControl
argument_list|(
name|control
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
comment|// ignore
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Do not know how to process ActiveMQ Command {}"
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
comment|//----- Utility methods for connection resources to use ------------------//
name|void
name|registerSender
parameter_list|(
name|ConsumerId
name|consumerId
parameter_list|,
name|AmqpSender
name|sender
parameter_list|)
block|{
name|subscriptionsByConsumerId
operator|.
name|put
argument_list|(
name|consumerId
argument_list|,
name|sender
argument_list|)
expr_stmt|;
block|}
name|void
name|unregisterSender
parameter_list|(
name|ConsumerId
name|consumerId
parameter_list|)
block|{
name|subscriptionsByConsumerId
operator|.
name|remove
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
block|}
name|void
name|registerTransaction
parameter_list|(
name|TransactionId
name|txId
parameter_list|,
name|AmqpTransactionCoordinator
name|coordinator
parameter_list|)
block|{
name|transactions
operator|.
name|put
argument_list|(
name|txId
argument_list|,
name|coordinator
argument_list|)
expr_stmt|;
block|}
name|void
name|unregisterTransaction
parameter_list|(
name|TransactionId
name|txId
parameter_list|)
block|{
name|transactions
operator|.
name|remove
argument_list|(
name|txId
argument_list|)
expr_stmt|;
block|}
name|AmqpTransactionCoordinator
name|getTxCoordinator
parameter_list|(
name|TransactionId
name|txId
parameter_list|)
block|{
return|return
name|transactions
operator|.
name|get
argument_list|(
name|txId
argument_list|)
return|;
block|}
name|LocalTransactionId
name|getNextTransactionId
parameter_list|()
block|{
return|return
operator|new
name|LocalTransactionId
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
operator|++
name|nextTransactionId
argument_list|)
return|;
block|}
name|ConsumerInfo
name|lookupSubscription
parameter_list|(
name|String
name|subscriptionName
parameter_list|)
throws|throws
name|AmqpProtocolException
block|{
name|ConsumerInfo
name|result
init|=
literal|null
decl_stmt|;
name|RegionBroker
name|regionBroker
decl_stmt|;
try|try
block|{
name|regionBroker
operator|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Error finding subscription: "
operator|+
name|subscriptionName
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|TopicRegion
name|topicRegion
init|=
operator|(
name|TopicRegion
operator|)
name|regionBroker
operator|.
name|getTopicRegion
argument_list|()
decl_stmt|;
name|DurableTopicSubscription
name|subscription
init|=
name|topicRegion
operator|.
name|lookupSubscription
argument_list|(
name|subscriptionName
argument_list|,
name|connectionInfo
operator|.
name|getClientId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subscription
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|ActiveMQDestination
name|createTemporaryDestination
parameter_list|(
specifier|final
name|Link
name|link
parameter_list|,
name|Symbol
index|[]
name|capabilities
parameter_list|)
block|{
name|ActiveMQDestination
name|rc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|capabilities
argument_list|,
name|TEMP_TOPIC_CAPABILITY
argument_list|)
condition|)
block|{
name|rc
operator|=
operator|new
name|ActiveMQTempTopic
argument_list|(
name|connectionId
argument_list|,
name|nextTempDestinationId
operator|++
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|contains
argument_list|(
name|capabilities
argument_list|,
name|TEMP_QUEUE_CAPABILITY
argument_list|)
condition|)
block|{
name|rc
operator|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionId
argument_list|,
name|nextTempDestinationId
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dynamic link request with no type capability, defaults to Temporary Queue"
argument_list|)
expr_stmt|;
name|rc
operator|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionId
argument_list|,
name|nextTempDestinationId
operator|++
argument_list|)
expr_stmt|;
block|}
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|info
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|link
operator|.
name|setSource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|SecurityException
condition|)
block|{
name|link
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|UNAUTHORIZED_ACCESS
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|link
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INTERNAL_ERROR
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|link
operator|.
name|close
argument_list|()
expr_stmt|;
name|link
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
name|void
name|deleteTemporaryDestination
parameter_list|(
name|ActiveMQTempDestination
name|destination
parameter_list|)
block|{
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|REMOVE_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|info
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|AmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Error during temp destination removeal: {}"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
name|sendToActiveMQ
argument_list|(
name|command
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|,
name|ResponseHandler
name|handler
parameter_list|)
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|lastCommandId
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resposeHandlers
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|amqpTransport
operator|.
name|sendToActiveMQ
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception detail"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|AmqpProtocolException
condition|)
block|{
name|onAMQPException
argument_list|(
operator|(
name|IOException
operator|)
name|exception
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// Must ensure that the broker removes Connection resources.
name|sendToActiveMQ
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|)
expr_stmt|;
name|amqpTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop AMQP Transport "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//----- Internal implementation ------------------------------------------//
specifier|private
name|SessionId
name|getNextSessionId
parameter_list|()
block|{
return|return
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
name|nextSessionId
operator|++
argument_list|)
return|;
block|}
specifier|private
name|void
name|stopConnectionTimeoutChecker
parameter_list|()
block|{
name|AmqpInactivityMonitor
name|monitor
init|=
name|amqpTransport
operator|.
name|getInactivityMonitor
argument_list|()
decl_stmt|;
if|if
condition|(
name|monitor
operator|!=
literal|null
condition|)
block|{
name|monitor
operator|.
name|stopConnectionTimeoutChecker
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|configureInactivityMonitor
parameter_list|()
block|{
name|AmqpInactivityMonitor
name|monitor
init|=
name|amqpTransport
operator|.
name|getInactivityMonitor
argument_list|()
decl_stmt|;
if|if
condition|(
name|monitor
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// If either end has idle timeout requirements then the tick method
comment|// will give us a deadline on the next time we need to tick() in order
comment|// to meet those obligations.
name|long
name|nextIdleCheck
init|=
name|protonTransport
operator|.
name|tick
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextIdleCheck
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection keep-alive processing starts at: {}"
argument_list|,
operator|new
name|Date
argument_list|(
name|nextIdleCheck
argument_list|)
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|startKeepAliveTask
argument_list|(
name|nextIdleCheck
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Connection does not require keep-alive processing"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

