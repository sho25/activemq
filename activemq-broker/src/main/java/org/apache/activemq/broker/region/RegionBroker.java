begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidClientIDException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConsumerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|EmptyBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|DeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DestinationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatchNotification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessagePull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConnectionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PListStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransmitCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|BrokerSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|InetAddressUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Routes Broker operations to the correct messaging regions for processing.  */
end_comment

begin_class
specifier|public
class|class
name|RegionBroker
extends|extends
name|EmptyBroker
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ORIGINAL_EXPIRATION
init|=
literal|"originalExpiration"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|BROKER_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
operator|new
name|DestinationStatistics
argument_list|()
decl_stmt|;
specifier|protected
name|DestinationFactory
name|destinationFactory
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionState
argument_list|>
name|connectionStates
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionState
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Region
name|queueRegion
decl_stmt|;
specifier|private
specifier|final
name|Region
name|topicRegion
decl_stmt|;
specifier|private
specifier|final
name|Region
name|tempQueueRegion
decl_stmt|;
specifier|private
specifier|final
name|Region
name|tempTopicRegion
decl_stmt|;
specifier|protected
specifier|final
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
specifier|private
name|boolean
name|keepDurableSubsActive
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|Connection
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|ActiveMQDestination
argument_list|>
name|destinationGate
init|=
operator|new
name|HashMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
name|destinations
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|BrokerId
argument_list|,
name|BrokerInfo
argument_list|>
name|brokerInfos
init|=
operator|new
name|HashMap
argument_list|<
name|BrokerId
argument_list|,
name|BrokerInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|sequenceGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
name|BrokerId
name|brokerId
decl_stmt|;
specifier|private
name|String
name|brokerName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ConnectionContext
argument_list|>
name|clientIdSet
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ConnectionContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DestinationInterceptor
name|destinationInterceptor
decl_stmt|;
specifier|private
name|ConnectionContext
name|adminConnectionContext
decl_stmt|;
specifier|private
specifier|final
name|Scheduler
name|scheduler
decl_stmt|;
specifier|private
specifier|final
name|ThreadPoolExecutor
name|executor
decl_stmt|;
specifier|private
name|boolean
name|allowTempAutoCreationOnSend
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|inactiveDestinationsPurgeLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|purgeInactiveDestinationsTask
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|purgeInactiveDestinations
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|public
name|RegionBroker
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|SystemUsage
name|memoryManager
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|,
name|DestinationInterceptor
name|destinationInterceptor
parameter_list|,
name|Scheduler
name|scheduler
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|scheduler
expr_stmt|;
if|if
condition|(
name|destinationFactory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null destinationFactory"
argument_list|)
throw|;
block|}
name|this
operator|.
name|sequenceGenerator
operator|.
name|setLastSequenceId
argument_list|(
name|destinationFactory
operator|.
name|getLastMessageBrokerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|destinationFactory
operator|=
name|destinationFactory
expr_stmt|;
name|queueRegion
operator|=
name|createQueueRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
expr_stmt|;
name|topicRegion
operator|=
name|createTopicRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
expr_stmt|;
name|this
operator|.
name|destinationInterceptor
operator|=
name|destinationInterceptor
expr_stmt|;
name|tempQueueRegion
operator|=
name|createTempQueueRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
expr_stmt|;
name|tempTopicRegion
operator|=
name|createTempTopicRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
name|getDestinationMap
parameter_list|()
block|{
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
name|answer
init|=
operator|new
name|HashMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
argument_list|(
name|getQueueRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
argument_list|)
decl_stmt|;
name|answer
operator|.
name|putAll
argument_list|(
name|getTopicRegion
argument_list|()
operator|.
name|getDestinationMap
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
name|getDestinationMap
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
try|try
block|{
return|return
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|getDestinationMap
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmse
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Destination
argument_list|>
name|getDestinations
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
try|try
block|{
return|return
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|getDestinations
argument_list|(
name|destination
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmse
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Broker
name|getAdaptor
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Region
name|getQueueRegion
parameter_list|()
block|{
return|return
name|queueRegion
return|;
block|}
specifier|public
name|Region
name|getTempQueueRegion
parameter_list|()
block|{
return|return
name|tempQueueRegion
return|;
block|}
specifier|public
name|Region
name|getTempTopicRegion
parameter_list|()
block|{
return|return
name|tempTopicRegion
return|;
block|}
specifier|public
name|Region
name|getTopicRegion
parameter_list|()
block|{
return|return
name|topicRegion
return|;
block|}
specifier|protected
name|Region
name|createTempTopicRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|TempTopicRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createTempQueueRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|TempQueueRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createTopicRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|TopicRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createQueueRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|QueueRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|started
operator|=
literal|true
expr_stmt|;
name|queueRegion
operator|.
name|start
argument_list|()
expr_stmt|;
name|topicRegion
operator|.
name|start
argument_list|()
expr_stmt|;
name|tempQueueRegion
operator|.
name|start
argument_list|()
expr_stmt|;
name|tempTopicRegion
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|period
init|=
name|this
operator|.
name|brokerService
operator|.
name|getSchedulePeriodForDestinationPurge
argument_list|()
decl_stmt|;
if|if
condition|(
name|period
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|scheduler
operator|.
name|executePeriodically
argument_list|(
name|purgeInactiveDestinationsTask
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|started
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|cancel
argument_list|(
name|purgeInactiveDestinationsTask
argument_list|)
expr_stmt|;
name|ServiceStopper
name|ss
init|=
operator|new
name|ServiceStopper
argument_list|()
decl_stmt|;
name|doStop
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|throwFirstException
argument_list|()
expr_stmt|;
comment|// clear the state
name|clientIdSet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connections
operator|.
name|clear
argument_list|()
expr_stmt|;
name|destinations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|brokerInfos
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PolicyMap
name|getDestinationPolicy
parameter_list|()
block|{
return|return
name|brokerService
operator|!=
literal|null
condition|?
name|brokerService
operator|.
name|getDestinationPolicy
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
name|ConnectionContext
name|getConnectionContext
parameter_list|(
name|String
name|clientId
parameter_list|)
block|{
return|return
name|clientIdSet
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|clientId
init|=
name|info
operator|.
name|getClientId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidClientIDException
argument_list|(
literal|"No clientID specified for connection request"
argument_list|)
throw|;
block|}
name|ConnectionContext
name|oldContext
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|clientIdSet
init|)
block|{
name|oldContext
operator|=
name|clientIdSet
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|isAllowLinkStealing
argument_list|()
condition|)
block|{
name|clientIdSet
operator|.
name|put
argument_list|(
name|clientId
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidClientIDException
argument_list|(
literal|"Broker: "
operator|+
name|getBrokerName
argument_list|()
operator|+
literal|" - Client: "
operator|+
name|clientId
operator|+
literal|" already connected from "
operator|+
name|oldContext
operator|.
name|getConnection
argument_list|()
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|clientIdSet
operator|.
name|put
argument_list|(
name|clientId
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|oldContext
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|oldContext
operator|.
name|getConnection
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Connection
name|connection
init|=
name|oldContext
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stealing link for clientId {} From Connection {}"
argument_list|,
name|clientId
argument_list|,
name|oldContext
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|connection
operator|instanceof
name|TransportConnection
condition|)
block|{
name|TransportConnection
name|transportConnection
init|=
operator|(
name|TransportConnection
operator|)
name|connection
decl_stmt|;
name|transportConnection
operator|.
name|stopAsync
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No Connection found for {}"
argument_list|,
name|oldContext
argument_list|)
expr_stmt|;
block|}
block|}
name|connections
operator|.
name|add
argument_list|(
name|context
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|clientId
init|=
name|info
operator|.
name|getClientId
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidClientIDException
argument_list|(
literal|"No clientID specified for connection disconnect request"
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|clientIdSet
init|)
block|{
name|ConnectionContext
name|oldValue
init|=
name|clientIdSet
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
decl_stmt|;
comment|// we may be removing the duplicate connection, not the first connection to be created
comment|// so lets check that their connection IDs are the same
if|if
condition|(
name|oldValue
operator|==
name|context
condition|)
block|{
if|if
condition|(
name|isEqual
argument_list|(
name|oldValue
operator|.
name|getConnectionId
argument_list|()
argument_list|,
name|info
operator|.
name|getConnectionId
argument_list|()
argument_list|)
condition|)
block|{
name|clientIdSet
operator|.
name|remove
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|connections
operator|.
name|remove
argument_list|(
name|context
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isEqual
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|,
name|ConnectionId
name|connectionId2
parameter_list|)
block|{
return|return
name|connectionId
operator|==
name|connectionId2
operator|||
operator|(
name|connectionId
operator|!=
literal|null
operator|&&
name|connectionId
operator|.
name|equals
argument_list|(
name|connectionId2
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
index|[]
name|getClients
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|Connection
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Connection
argument_list|>
argument_list|(
name|connections
argument_list|)
decl_stmt|;
name|Connection
name|rc
index|[]
init|=
operator|new
name|Connection
index|[
name|l
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|l
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|Destination
name|addDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|boolean
name|createIfTemp
parameter_list|)
throws|throws
name|Exception
block|{
name|Destination
name|answer
decl_stmt|;
name|answer
operator|=
name|destinations
operator|.
name|get
argument_list|(
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
synchronized|synchronized
init|(
name|destinationGate
init|)
block|{
name|answer
operator|=
name|destinations
operator|.
name|get
argument_list|(
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
if|if
condition|(
name|destinationGate
operator|.
name|get
argument_list|(
name|destination
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Guard against spurious wakeup.
while|while
condition|(
name|destinationGate
operator|.
name|containsKey
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|destinationGate
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
name|answer
operator|=
name|destinations
operator|.
name|get
argument_list|(
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|answer
operator|!=
literal|null
condition|)
block|{
return|return
name|answer
return|;
block|}
else|else
block|{
comment|// In case of intermediate remove or add failure
name|destinationGate
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|boolean
name|create
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|destination
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|create
operator|=
name|createIfTemp
expr_stmt|;
block|}
name|answer
operator|=
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|create
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|answer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|destinationGate
init|)
block|{
name|destinationGate
operator|.
name|remove
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|destinationGate
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|destinations
operator|.
name|containsKey
argument_list|(
name|destination
argument_list|)
condition|)
block|{
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|remove
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|addDestination
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|removeDestination
argument_list|(
name|context
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|info
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveMQDestination
index|[]
name|getDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|ActiveMQDestination
argument_list|>
name|l
decl_stmt|;
name|l
operator|=
operator|new
name|ArrayList
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|(
name|getDestinationMap
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|rc
index|[]
init|=
operator|new
name|ActiveMQDestination
index|[
name|l
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|l
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// This seems to cause the destination to be added but without
comment|// advisories firing...
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|isAllowTempAutoCreationOnSend
argument_list|()
argument_list|)
expr_stmt|;
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|removeProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destinationInterceptor
operator|!=
literal|null
condition|)
block|{
name|destinationInterceptor
operator|.
name|create
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
return|;
block|}
finally|finally
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|RemoveSubscriptionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|topicRegion
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|message
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBrokerInTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|producerExchange
operator|.
name|isMutable
argument_list|()
operator|||
name|producerExchange
operator|.
name|getRegion
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|producerExchange
operator|.
name|getRegionDestination
argument_list|()
operator|!=
literal|null
operator|&&
name|producerExchange
operator|.
name|getRegionDestination
argument_list|()
operator|.
name|isDisposed
argument_list|()
operator|)
condition|)
block|{
comment|// ensure the destination is registered with the RegionBroker
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
operator|.
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
argument_list|,
name|destination
argument_list|,
name|isAllowTempAutoCreationOnSend
argument_list|()
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setRegion
argument_list|(
name|getRegion
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setRegionDestination
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|producerExchange
operator|.
name|getRegion
argument_list|()
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// clean up so these references aren't kept (possible leak) in the producer exchange
comment|// especially since temps are transitory
if|if
condition|(
name|producerExchange
operator|.
name|isMutable
argument_list|()
condition|)
block|{
name|producerExchange
operator|.
name|setRegionDestination
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setRegion
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConsumerBrokerExchange
name|consumerExchange
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|consumerExchange
operator|.
name|isWildcard
argument_list|()
operator|||
name|consumerExchange
operator|.
name|getRegion
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ActiveMQDestination
name|destination
init|=
name|ack
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|consumerExchange
operator|.
name|setRegion
argument_list|(
name|getRegion
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|consumerExchange
operator|.
name|getRegion
argument_list|()
operator|.
name|acknowledge
argument_list|(
name|consumerExchange
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Region
name|getRegion
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
switch|switch
condition|(
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
return|return
name|queueRegion
return|;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
return|return
name|topicRegion
return|;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
return|return
name|tempQueueRegion
return|;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
return|return
name|tempTopicRegion
return|;
default|default:
throw|throw
name|createUnknownDestinationTypeException
argument_list|(
name|destination
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Response
name|messagePull
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessagePull
name|pull
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|pull
operator|.
name|getDestination
argument_list|()
decl_stmt|;
return|return
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|messagePull
argument_list|(
name|context
argument_list|,
name|pull
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TransactionId
index|[]
name|getPreparedTransactions
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|prepareTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|forgetTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|transactionId
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|gc
parameter_list|()
block|{
name|queueRegion
operator|.
name|gc
argument_list|()
expr_stmt|;
name|topicRegion
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BrokerId
name|getBrokerId
parameter_list|()
block|{
if|if
condition|(
name|brokerId
operator|==
literal|null
condition|)
block|{
name|brokerId
operator|=
operator|new
name|BrokerId
argument_list|(
name|BROKER_ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|brokerId
return|;
block|}
specifier|public
name|void
name|setBrokerId
parameter_list|(
name|BrokerId
name|brokerId
parameter_list|)
block|{
name|this
operator|.
name|brokerId
operator|=
name|brokerId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
if|if
condition|(
name|brokerName
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|brokerName
operator|=
name|InetAddressUtil
operator|.
name|getLocalHostName
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|brokerName
operator|=
literal|"localhost"
expr_stmt|;
block|}
block|}
return|return
name|brokerName
return|;
block|}
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|this
operator|.
name|brokerName
operator|=
name|brokerName
expr_stmt|;
block|}
specifier|public
name|DestinationStatistics
name|getDestinationStatistics
parameter_list|()
block|{
return|return
name|destinationStatistics
return|;
block|}
specifier|protected
name|JMSException
name|createUnknownDestinationTypeException
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
operator|new
name|JMSException
argument_list|(
literal|"Unknown destination type: "
operator|+
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|addBroker
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|BrokerInfo
name|info
parameter_list|)
block|{
name|BrokerInfo
name|existing
init|=
name|brokerInfos
operator|.
name|get
argument_list|(
name|info
operator|.
name|getBrokerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|existing
operator|=
name|info
operator|.
name|copy
argument_list|()
expr_stmt|;
name|existing
operator|.
name|setPeerBrokerInfos
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|brokerInfos
operator|.
name|put
argument_list|(
name|info
operator|.
name|getBrokerId
argument_list|()
argument_list|,
name|existing
argument_list|)
expr_stmt|;
block|}
name|existing
operator|.
name|incrementRefCount
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} addBroker: {} brokerInfo size: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getBrokerName
argument_list|()
block|,
name|info
operator|.
name|getBrokerName
argument_list|()
block|,
name|brokerInfos
operator|.
name|size
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|addBrokerInClusterUpdate
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|void
name|removeBroker
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|BrokerInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|BrokerInfo
name|existing
init|=
name|brokerInfos
operator|.
name|get
argument_list|(
name|info
operator|.
name|getBrokerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
operator|&&
name|existing
operator|.
name|decrementRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|brokerInfos
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getBrokerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"{} removeBroker: {} brokerInfo size: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getBrokerName
argument_list|()
block|,
name|info
operator|.
name|getBrokerName
argument_list|()
block|,
name|brokerInfos
operator|.
name|size
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|// When stopping don't send cluster updates since we are the one's tearing down
comment|// our own bridges.
if|if
condition|(
operator|!
name|brokerService
operator|.
name|isStopping
argument_list|()
condition|)
block|{
name|removeBrokerInClusterUpdate
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|BrokerInfo
index|[]
name|getPeerBrokerInfos
parameter_list|()
block|{
name|BrokerInfo
index|[]
name|result
init|=
operator|new
name|BrokerInfo
index|[
name|brokerInfos
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|result
operator|=
name|brokerInfos
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preProcessDispatch
parameter_list|(
specifier|final
name|MessageDispatch
name|messageDispatch
parameter_list|)
block|{
specifier|final
name|Message
name|message
init|=
name|messageDispatch
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|message
operator|.
name|setBrokerOutTime
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|getBrokerService
argument_list|()
operator|.
name|isEnableStatistics
argument_list|()
condition|)
block|{
name|long
name|totalTime
init|=
name|endTime
operator|-
name|message
operator|.
name|getBrokerInTime
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Destination
operator|)
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getDestinationStatistics
argument_list|()
operator|.
name|getProcessTime
argument_list|()
operator|.
name|addTime
argument_list|(
name|totalTime
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
name|BaseDestination
operator|)
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|isPersistJMSRedelivered
argument_list|()
operator|&&
operator|!
name|message
operator|.
name|isRedelivered
argument_list|()
condition|)
block|{
specifier|final
name|int
name|originalValue
init|=
name|message
operator|.
name|getRedeliveryCounter
argument_list|()
decl_stmt|;
name|message
operator|.
name|incrementRedeliveryCounter
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|message
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
operator|(
operator|(
name|BaseDestination
operator|)
name|message
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getMessageStore
argument_list|()
operator|.
name|updateMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|messageDispatch
operator|.
name|setTransmitCallback
argument_list|(
operator|new
name|TransmitCallback
argument_list|()
block|{
comment|// dispatch is considered a delivery, so update sub state post dispatch otherwise
comment|// on a disconnect/reconnect cached messages will not reflect initial delivery attempt
specifier|final
name|TransmitCallback
name|delegate
init|=
name|messageDispatch
operator|.
name|getTransmitCallback
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|message
operator|.
name|incrementRedeliveryCounter
argument_list|()
expr_stmt|;
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|()
block|{
if|if
condition|(
name|delegate
operator|!=
literal|null
condition|)
block|{
name|delegate
operator|.
name|onFailure
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|RuntimeException
name|runtimeException
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to persist JMSRedeliveryFlag on "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|+
literal|" in "
operator|+
name|message
operator|.
name|getDestination
argument_list|()
argument_list|,
name|error
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|runtimeException
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|runtimeException
argument_list|)
expr_stmt|;
throw|throw
name|runtimeException
throw|;
block|}
finally|finally
block|{
name|message
operator|.
name|setRedeliveryCounter
argument_list|(
name|originalValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postProcessDispatch
parameter_list|(
name|MessageDispatch
name|messageDispatch
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|processDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|messageDispatchNotification
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|destination
init|=
name|messageDispatchNotification
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|processDispatchNotification
argument_list|(
name|messageDispatchNotification
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
operator|!
name|started
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|getDurableDestinations
parameter_list|()
block|{
return|return
name|destinationFactory
operator|.
name|getDestinations
argument_list|()
return|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|ss
parameter_list|)
block|{
name|ss
operator|.
name|stop
argument_list|(
name|queueRegion
argument_list|)
expr_stmt|;
name|ss
operator|.
name|stop
argument_list|(
name|topicRegion
argument_list|)
expr_stmt|;
name|ss
operator|.
name|stop
argument_list|(
name|tempQueueRegion
argument_list|)
expr_stmt|;
name|ss
operator|.
name|stop
argument_list|(
name|tempTopicRegion
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isKeepDurableSubsActive
parameter_list|()
block|{
return|return
name|keepDurableSubsActive
return|;
block|}
specifier|public
name|void
name|setKeepDurableSubsActive
parameter_list|(
name|boolean
name|keepDurableSubsActive
parameter_list|)
block|{
name|this
operator|.
name|keepDurableSubsActive
operator|=
name|keepDurableSubsActive
expr_stmt|;
operator|(
operator|(
name|TopicRegion
operator|)
name|topicRegion
operator|)
operator|.
name|setKeepDurableSubsActive
argument_list|(
name|keepDurableSubsActive
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DestinationInterceptor
name|getDestinationInterceptor
parameter_list|()
block|{
return|return
name|destinationInterceptor
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConnectionContext
name|getAdminConnectionContext
parameter_list|()
block|{
return|return
name|adminConnectionContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAdminConnectionContext
parameter_list|(
name|ConnectionContext
name|adminConnectionContext
parameter_list|)
block|{
name|this
operator|.
name|adminConnectionContext
operator|=
name|adminConnectionContext
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|ConnectionId
argument_list|,
name|ConnectionState
argument_list|>
name|getConnectionStates
parameter_list|()
block|{
return|return
name|connectionStates
return|;
block|}
annotation|@
name|Override
specifier|public
name|PListStore
name|getTempDataStore
parameter_list|()
block|{
return|return
name|brokerService
operator|.
name|getTempDataStore
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|URI
name|getVmConnectorURI
parameter_list|()
block|{
return|return
name|brokerService
operator|.
name|getVmConnectorURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|brokerServiceStarted
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|BrokerService
name|getBrokerService
parameter_list|()
block|{
return|return
name|brokerService
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExpired
parameter_list|(
name|MessageReference
name|messageReference
parameter_list|)
block|{
name|boolean
name|expired
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|messageReference
operator|.
name|isExpired
argument_list|()
condition|)
block|{
try|try
block|{
comment|// prevent duplicate expiry processing
name|Message
name|message
init|=
name|messageReference
operator|.
name|getMessage
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|message
init|)
block|{
name|expired
operator|=
name|stampAsExpired
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unexpected exception on message expiry determination for: {}"
argument_list|,
name|messageReference
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|expired
return|;
block|}
specifier|private
name|boolean
name|stampAsExpired
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|stamped
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|getProperty
argument_list|(
name|ORIGINAL_EXPIRATION
argument_list|)
operator|==
literal|null
condition|)
block|{
name|long
name|expiration
init|=
name|message
operator|.
name|getExpiration
argument_list|()
decl_stmt|;
name|message
operator|.
name|setProperty
argument_list|(
name|ORIGINAL_EXPIRATION
argument_list|,
operator|new
name|Long
argument_list|(
name|expiration
argument_list|)
argument_list|)
expr_stmt|;
name|stamped
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|stamped
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageExpired
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|node
parameter_list|,
name|Subscription
name|subscription
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Message expired {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|getRoot
argument_list|()
operator|.
name|sendToDeadLetterQueue
argument_list|(
name|context
argument_list|,
name|node
argument_list|,
name|subscription
argument_list|,
operator|new
name|Throwable
argument_list|(
literal|"Message Expired. Expiration:"
operator|+
name|node
operator|.
name|getExpiration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sendToDeadLetterQueue
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|node
parameter_list|,
name|Subscription
name|subscription
parameter_list|,
name|Throwable
name|poisonCause
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|Message
name|message
init|=
name|node
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DeadLetterStrategy
name|deadLetterStrategy
init|=
operator|(
operator|(
name|Destination
operator|)
name|node
operator|.
name|getRegionDestination
argument_list|()
operator|)
operator|.
name|getDeadLetterStrategy
argument_list|()
decl_stmt|;
if|if
condition|(
name|deadLetterStrategy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|deadLetterStrategy
operator|.
name|isSendToDeadLetterQueue
argument_list|(
name|message
argument_list|)
condition|)
block|{
comment|// message may be inflight to other subscriptions so do not modify
name|message
operator|=
name|message
operator|.
name|copy
argument_list|()
expr_stmt|;
name|stampAsExpired
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|message
operator|.
name|setExpiration
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|message
operator|.
name|isPersistent
argument_list|()
condition|)
block|{
name|message
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|message
operator|.
name|setProperty
argument_list|(
literal|"originalDeliveryMode"
argument_list|,
literal|"NON_PERSISTENT"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|poisonCause
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setProperty
argument_list|(
name|ActiveMQMessage
operator|.
name|DLQ_DELIVERY_FAILURE_CAUSE_PROPERTY
argument_list|,
name|poisonCause
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The original destination and transaction id do
comment|// not get filled when the message is first sent,
comment|// it is only populated if the message is routed to
comment|// another destination like the DLQ
name|ActiveMQDestination
name|deadLetterDestination
init|=
name|deadLetterStrategy
operator|.
name|getDeadLetterQueueFor
argument_list|(
name|message
argument_list|,
name|subscription
argument_list|)
decl_stmt|;
name|ConnectionContext
name|adminContext
init|=
name|context
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getSecurityContext
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|context
operator|.
name|getSecurityContext
argument_list|()
operator|.
name|isBrokerContext
argument_list|()
condition|)
block|{
name|adminContext
operator|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|addDestination
argument_list|(
name|adminContext
argument_list|,
name|deadLetterDestination
argument_list|,
literal|false
argument_list|)
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|setDLQ
argument_list|()
expr_stmt|;
name|BrokerSupport
operator|.
name|resendNoCopy
argument_list|(
name|adminContext
argument_list|,
name|message
argument_list|,
name|deadLetterDestination
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dead Letter message with no DLQ strategy in place, message id: {}, destination: {}"
argument_list|,
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|message
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught an exception sending to DLQ: {}"
argument_list|,
name|node
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Broker
name|getRoot
parameter_list|()
block|{
try|try
block|{
return|return
name|getBrokerService
argument_list|()
operator|.
name|getBroker
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Trying to get Root Broker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The broker from the BrokerService should not throw an exception"
argument_list|)
throw|;
block|}
block|}
comment|/**      * @return the broker sequence id      */
annotation|@
name|Override
specifier|public
name|long
name|getBrokerSequenceId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|sequenceGenerator
init|)
block|{
return|return
name|sequenceGenerator
operator|.
name|getNextSequenceId
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Scheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|this
operator|.
name|scheduler
return|;
block|}
annotation|@
name|Override
specifier|public
name|ThreadPoolExecutor
name|getExecutor
parameter_list|()
block|{
return|return
name|this
operator|.
name|executor
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processConsumerControl
parameter_list|(
name|ConsumerBrokerExchange
name|consumerExchange
parameter_list|,
name|ConsumerControl
name|control
parameter_list|)
block|{
name|ActiveMQDestination
name|destination
init|=
name|control
operator|.
name|getDestination
argument_list|()
decl_stmt|;
try|try
block|{
name|getRegion
argument_list|(
name|destination
argument_list|)
operator|.
name|processConsumerControl
argument_list|(
name|consumerExchange
argument_list|,
name|control
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|jmse
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"unmatched destination: {}, in consumerControl: {}"
argument_list|,
name|destination
argument_list|,
name|control
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addBrokerInClusterUpdate
parameter_list|(
name|BrokerInfo
name|info
parameter_list|)
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|connectors
init|=
name|this
operator|.
name|brokerService
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|TransportConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isUpdateClusterClients
argument_list|()
condition|)
block|{
name|connector
operator|.
name|addPeerBroker
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|connector
operator|.
name|updateClientClusterInfo
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|removeBrokerInClusterUpdate
parameter_list|(
name|BrokerInfo
name|info
parameter_list|)
block|{
name|List
argument_list|<
name|TransportConnector
argument_list|>
name|connectors
init|=
name|this
operator|.
name|brokerService
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
for|for
control|(
name|TransportConnector
name|connector
range|:
name|connectors
control|)
block|{
if|if
condition|(
name|connector
operator|.
name|isUpdateClusterClients
argument_list|()
operator|&&
name|connector
operator|.
name|isUpdateClusterClientsOnRemove
argument_list|()
condition|)
block|{
name|connector
operator|.
name|removePeerBroker
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|connector
operator|.
name|updateClientClusterInfo
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|purgeInactiveDestinations
parameter_list|()
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Destination
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Destination
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ActiveMQDestination
argument_list|,
name|Destination
argument_list|>
name|map
init|=
name|getDestinationMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAllowTempAutoCreationOnSend
argument_list|()
condition|)
block|{
name|map
operator|.
name|putAll
argument_list|(
name|tempQueueRegion
operator|.
name|getDestinationMap
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|tempTopicRegion
operator|.
name|getDestinationMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|maxPurgedDests
init|=
name|this
operator|.
name|brokerService
operator|.
name|getMaxPurgedDestinationsPerSweep
argument_list|()
decl_stmt|;
name|long
name|timeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Destination
name|d
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|d
operator|.
name|markForGC
argument_list|(
name|timeStamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|canGC
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxPurgedDests
operator|>
literal|0
operator|&&
name|list
operator|.
name|size
argument_list|()
operator|==
name|maxPurgedDests
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ConnectionContext
name|context
init|=
name|BrokerSupport
operator|.
name|getConnectionContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|context
operator|.
name|setBroker
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Destination
name|dest
range|:
name|list
control|)
block|{
name|Logger
name|log
init|=
name|LOG
decl_stmt|;
if|if
condition|(
name|dest
operator|instanceof
name|BaseDestination
condition|)
block|{
name|log
operator|=
operator|(
operator|(
name|BaseDestination
operator|)
name|dest
operator|)
operator|.
name|getLog
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"{} Inactive for longer than {} ms - removing ..."
argument_list|,
name|dest
operator|.
name|getName
argument_list|()
argument_list|,
name|dest
operator|.
name|getInactiveTimeoutBeforeGC
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|getRoot
argument_list|()
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|dest
operator|.
name|getActiveMQDestination
argument_list|()
argument_list|,
name|isAllowTempAutoCreationOnSend
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to remove inactive destination {}"
argument_list|,
name|dest
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|inactiveDestinationsPurgeLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isAllowTempAutoCreationOnSend
parameter_list|()
block|{
return|return
name|allowTempAutoCreationOnSend
return|;
block|}
specifier|public
name|void
name|setAllowTempAutoCreationOnSend
parameter_list|(
name|boolean
name|allowTempAutoCreationOnSend
parameter_list|)
block|{
name|this
operator|.
name|allowTempAutoCreationOnSend
operator|=
name|allowTempAutoCreationOnSend
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reapplyInterceptor
parameter_list|()
block|{
name|queueRegion
operator|.
name|reapplyInterceptor
argument_list|()
expr_stmt|;
name|topicRegion
operator|.
name|reapplyInterceptor
argument_list|()
expr_stmt|;
name|tempQueueRegion
operator|.
name|reapplyInterceptor
argument_list|()
expr_stmt|;
name|tempTopicRegion
operator|.
name|reapplyInterceptor
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

