begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|ResourceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|BootstrapContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|ConnectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|UnavailableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|XATerminator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|resource
operator|.
name|spi
operator|.
name|work
operator|.
name|WorkManager
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
operator|.
name|ActiveMQManagedConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
operator|.
name|ActiveMQManagedConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
operator|.
name|ActiveMQResourceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ra
operator|.
name|ManagedConnectionProxy
import|;
end_import

begin_comment
comment|/**  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ManagedConnectionTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_HOST
init|=
literal|"vm://localhost"
decl_stmt|;
specifier|private
name|ConnectionManagerAdapter
name|connectionManager
init|=
operator|new
name|ConnectionManagerAdapter
argument_list|()
decl_stmt|;
specifier|private
name|ActiveMQManagedConnectionFactory
name|managedConnectionFactory
decl_stmt|;
specifier|private
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|ManagedConnectionProxy
name|connection
decl_stmt|;
specifier|private
name|ActiveMQManagedConnection
name|managedConnection
decl_stmt|;
comment|/**      * @see junit.framework.TestCase#setUp()      */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQResourceAdapter
name|adapter
init|=
operator|new
name|ActiveMQResourceAdapter
argument_list|()
decl_stmt|;
name|adapter
operator|.
name|setServerUrl
argument_list|(
name|DEFAULT_HOST
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setUserName
argument_list|(
name|ActiveMQConnectionFactory
operator|.
name|DEFAULT_USER
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|setPassword
argument_list|(
name|ActiveMQConnectionFactory
operator|.
name|DEFAULT_PASSWORD
argument_list|)
expr_stmt|;
name|adapter
operator|.
name|start
argument_list|(
operator|new
name|BootstrapContext
argument_list|()
block|{
specifier|public
name|WorkManager
name|getWorkManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|XATerminator
name|getXATerminator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Timer
name|createTimer
parameter_list|()
throws|throws
name|UnavailableException
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|managedConnectionFactory
operator|=
operator|new
name|ActiveMQManagedConnectionFactory
argument_list|()
expr_stmt|;
name|managedConnectionFactory
operator|.
name|setResourceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|connectionFactory
operator|=
operator|(
name|ConnectionFactory
operator|)
name|managedConnectionFactory
operator|.
name|createConnectionFactory
argument_list|(
name|connectionManager
argument_list|)
expr_stmt|;
name|connection
operator|=
operator|(
name|ManagedConnectionProxy
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|managedConnection
operator|=
name|connection
operator|.
name|getManagedConnection
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectionCloseEvent
parameter_list|()
throws|throws
name|ResourceException
throws|,
name|JMSException
block|{
specifier|final
name|boolean
name|test
index|[]
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|connectionManager
operator|.
name|addConnectionEventListener
argument_list|(
operator|new
name|ConnectionEventListenerAdapter
argument_list|()
block|{
specifier|public
name|void
name|connectionClosed
parameter_list|(
name|ConnectionEvent
name|arg0
parameter_list|)
block|{
name|test
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLocalTransactionCommittedEvent
parameter_list|()
throws|throws
name|ResourceException
throws|,
name|JMSException
block|{
specifier|final
name|boolean
name|test
index|[]
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|connectionManager
operator|.
name|addConnectionEventListener
argument_list|(
operator|new
name|ConnectionEventListenerAdapter
argument_list|()
block|{
specifier|public
name|void
name|localTransactionCommitted
parameter_list|(
name|ConnectionEvent
name|arg0
parameter_list|)
block|{
name|test
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|managedConnection
operator|.
name|getLocalTransaction
argument_list|()
operator|.
name|begin
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doWork
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLocalTransactionRollbackEvent
parameter_list|()
throws|throws
name|ResourceException
throws|,
name|JMSException
block|{
specifier|final
name|boolean
name|test
index|[]
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|connectionManager
operator|.
name|addConnectionEventListener
argument_list|(
operator|new
name|ConnectionEventListenerAdapter
argument_list|()
block|{
specifier|public
name|void
name|localTransactionRolledback
parameter_list|(
name|ConnectionEvent
name|arg0
parameter_list|)
block|{
name|test
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|managedConnection
operator|.
name|getLocalTransaction
argument_list|()
operator|.
name|begin
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doWork
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testLocalTransactionStartedEvent
parameter_list|()
throws|throws
name|ResourceException
throws|,
name|JMSException
block|{
specifier|final
name|boolean
name|test
index|[]
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|}
decl_stmt|;
name|connectionManager
operator|.
name|addConnectionEventListener
argument_list|(
operator|new
name|ConnectionEventListenerAdapter
argument_list|()
block|{
specifier|public
name|void
name|localTransactionStarted
parameter_list|(
name|ConnectionEvent
name|arg0
parameter_list|)
block|{
name|test
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Begin the transaction...  that should kick off the event.
name|managedConnection
operator|.
name|getLocalTransaction
argument_list|()
operator|.
name|begin
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doWork
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**      * A managed connection that has been clean up should throw exceptions      * when it used.      */
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|ResourceException
throws|,
name|JMSException
block|{
comment|// Do some work and close it...
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|doWork
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
comment|// This should throw expection
name|doWork
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Using a session after the connection is closed should throw exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|testSessionCloseIndependance
parameter_list|()
throws|throws
name|ResourceException
throws|,
name|JMSException
block|{
name|Session
name|session1
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Session
name|session2
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|session1
operator|!=
name|session2
argument_list|)
expr_stmt|;
name|doWork
argument_list|(
name|session1
argument_list|)
expr_stmt|;
name|session1
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
comment|// This should throw expection
name|doWork
argument_list|(
name|session1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Using a session after the connection is closed should throw exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
comment|// Make sure that closing session 1 does not close session 2
name|doWork
argument_list|(
name|session2
argument_list|)
expr_stmt|;
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
comment|// This should throw expection
name|doWork
argument_list|(
name|session2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Using a session after the connection is closed should throw exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
block|}
comment|/**      * Does some work so that we can test commit/rollback etc.      * @throws JMSException      */
specifier|public
name|void
name|doWork
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|Queue
name|t
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test message."
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testImplementsQueueAndTopicConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|QueueConnection
name|qc
init|=
operator|(
operator|(
name|QueueConnectionFactory
operator|)
name|connectionFactory
operator|)
operator|.
name|createQueueConnection
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|qc
argument_list|)
expr_stmt|;
name|TopicConnection
name|tc
init|=
operator|(
operator|(
name|TopicConnectionFactory
operator|)
name|connectionFactory
operator|)
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSelfEquality
parameter_list|()
block|{
name|assertEquality
argument_list|(
name|managedConnection
argument_list|,
name|managedConnection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSamePropertiesButNotEqual
parameter_list|()
throws|throws
name|Exception
block|{
name|ManagedConnectionProxy
name|newConnection
init|=
operator|(
name|ManagedConnectionProxy
operator|)
name|connectionFactory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|assertNonEquality
argument_list|(
name|managedConnection
argument_list|,
name|newConnection
operator|.
name|getManagedConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEquality
parameter_list|(
name|ActiveMQManagedConnection
name|leftCon
parameter_list|,
name|ActiveMQManagedConnection
name|rightCon
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"ActiveMQManagedConnection are not equal"
argument_list|,
name|leftCon
operator|.
name|equals
argument_list|(
name|rightCon
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"ActiveMQManagedConnection are not equal"
argument_list|,
name|rightCon
operator|.
name|equals
argument_list|(
name|leftCon
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"HashCodes are not equal"
argument_list|,
name|leftCon
operator|.
name|hashCode
argument_list|()
operator|==
name|rightCon
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNonEquality
parameter_list|(
name|ActiveMQManagedConnection
name|leftCon
parameter_list|,
name|ActiveMQManagedConnection
name|rightCon
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"ActiveMQManagedConnection are equal"
argument_list|,
name|leftCon
operator|.
name|equals
argument_list|(
name|rightCon
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"ActiveMQManagedConnection are equal"
argument_list|,
name|rightCon
operator|.
name|equals
argument_list|(
name|leftCon
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HashCodes are equal"
argument_list|,
name|leftCon
operator|.
name|hashCode
argument_list|()
operator|==
name|rightCon
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

