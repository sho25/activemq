begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingDeque
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|FilterAsyncChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncWriteAsyncChannel
extends|extends
name|FilterAsyncChannel
block|{
specifier|static
specifier|public
class|class
name|ObjectDispatcherX
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Executor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
name|queue
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|size
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncWriteAsyncChannel
name|objectListener
decl_stmt|;
specifier|private
name|long
name|pollDelay
init|=
literal|10
decl_stmt|;
specifier|public
name|ObjectDispatcherX
parameter_list|(
name|AsyncWriteAsyncChannel
name|objectListener
parameter_list|)
block|{
name|this
argument_list|(
name|objectListener
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjectDispatcherX
parameter_list|(
name|AsyncWriteAsyncChannel
name|objectListener
parameter_list|,
name|int
name|queueSize
parameter_list|)
block|{
name|this
argument_list|(
name|objectListener
argument_list|,
name|ChannelFactory
operator|.
name|DEFAULT_EXECUTOR
argument_list|,
operator|new
name|LinkedBlockingDeque
argument_list|(
name|queueSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjectDispatcherX
parameter_list|(
name|AsyncWriteAsyncChannel
name|objectListener
parameter_list|,
name|Executor
name|executor
parameter_list|,
name|BlockingQueue
name|queue
parameter_list|)
block|{
name|this
operator|.
name|objectListener
operator|=
name|objectListener
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|executor
expr_stmt|;
name|this
operator|.
name|queue
operator|=
name|queue
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|t
init|=
name|size
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|queue
operator|.
name|put
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|1
condition|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|t
init|=
name|size
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
name|t
operator|>
literal|0
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Object
name|o
decl_stmt|;
while|while
condition|(
operator|(
name|o
operator|=
name|queue
operator|.
name|poll
argument_list|(
name|pollDelay
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|objectListener
operator|.
name|onObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|t
operator|=
name|size
operator|.
name|addAndGet
argument_list|(
operator|-
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|static
specifier|public
class|class
name|ObjectDispatcher
block|{
specifier|private
specifier|final
name|ThreadPoolExecutor
name|executor
decl_stmt|;
specifier|private
specifier|final
name|AsyncWriteAsyncChannel
name|objectListener
decl_stmt|;
specifier|public
name|ObjectDispatcher
parameter_list|(
name|AsyncWriteAsyncChannel
name|objectListener
parameter_list|)
block|{
name|this
argument_list|(
name|objectListener
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ObjectDispatcher
parameter_list|(
name|AsyncWriteAsyncChannel
name|objectListener
parameter_list|,
name|int
name|queueSize
parameter_list|)
block|{
name|this
operator|.
name|objectListener
operator|=
name|objectListener
expr_stmt|;
name|executor
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|LinkedBlockingDeque
argument_list|(
name|queueSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// executor.waitWhenBlocked();
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|objectListener
operator|.
name|onObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
name|ObjectDispatcher
name|dispatcher
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|FLUSH_COMMAND
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
name|AsyncWriteAsyncChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|)
block|{
name|this
argument_list|(
name|next
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AsyncWriteAsyncChannel
parameter_list|(
name|AsyncChannel
name|next
parameter_list|,
name|int
name|queueSize
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|dispatcher
operator|=
operator|new
name|ObjectDispatcher
argument_list|(
name|this
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onObject
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|o
operator|==
name|FLUSH_COMMAND
condition|)
block|{
name|next
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|==
name|CountDownLatch
operator|.
name|class
condition|)
block|{
name|next
operator|.
name|flush
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CountDownLatch
operator|)
name|o
operator|)
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return;
block|}
name|next
operator|.
name|write
argument_list|(
operator|(
name|Packet
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|channelListener
operator|.
name|onPacketError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|dispatcher
operator|.
name|add
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|(
name|NO_WAIT_TIMEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|IOException
block|{
name|flush
argument_list|(
name|WAIT_FOREVER_TIMEOUT
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param timeout      * @throws InterruptedIOException      */
specifier|private
name|void
name|flush
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|InterruptedIOException
block|{
try|try
block|{
if|if
condition|(
name|timeout
operator|==
name|NO_WAIT_TIMEOUT
condition|)
block|{
name|dispatcher
operator|.
name|add
argument_list|(
name|FLUSH_COMMAND
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|timeout
operator|==
name|WAIT_FOREVER_TIMEOUT
condition|)
block|{
name|CountDownLatch
name|l
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|l
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|CountDownLatch
name|l
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|dispatcher
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|l
operator|.
name|await
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

