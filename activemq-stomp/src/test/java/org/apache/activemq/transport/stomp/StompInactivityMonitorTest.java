begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test that the inactivity monitor works as expected.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|StompInactivityMonitorTest
extends|extends
name|StompTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StompInactivityMonitorTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|transportScheme
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"stomp"
block|}
block|,
block|{
literal|"stomp+ssl"
block|}
block|,
block|{
literal|"stomp+nio"
block|}
block|,
block|{
literal|"stomp+nio+ssl"
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|StompInactivityMonitorTest
parameter_list|(
name|String
name|transportScheme
parameter_list|)
block|{
name|this
operator|.
name|transportScheme
operator|=
name|transportScheme
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|stompConnect
argument_list|()
expr_stmt|;
name|String
name|connectFrame
init|=
literal|"STOMP\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n"
operator|+
literal|"accept-version:1.1\n"
operator|+
literal|"heart-beat:1000,0\n"
operator|+
literal|"host:localhost\n"
operator|+
literal|"\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|connectFrame
argument_list|)
expr_stmt|;
name|String
name|response
init|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker sent response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|messageHead
init|=
literal|"SEND\n"
operator|+
literal|"receipt:1"
operator|+
literal|"\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
operator|+
literal|"AAAA"
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|messageHead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|stompConnection
operator|.
name|sendFrame
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|Stomp
operator|.
name|NULL
argument_list|)
expr_stmt|;
name|response
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|startsWith
argument_list|(
literal|"RECEIPT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseTcpConnector
parameter_list|()
block|{
return|return
operator|!
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"nio"
argument_list|)
operator|&&
operator|!
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseSslConnector
parameter_list|()
block|{
return|return
operator|!
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"nio"
argument_list|)
operator|&&
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioConnector
parameter_list|()
block|{
return|return
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"nio"
argument_list|)
operator|&&
operator|!
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioPlusSslConnector
parameter_list|()
block|{
return|return
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"nio"
argument_list|)
operator|&&
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"ssl"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|port
init|=
literal|0
decl_stmt|;
name|boolean
name|useSSL
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"ssl"
argument_list|)
condition|)
block|{
if|if
condition|(
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"nio"
argument_list|)
condition|)
block|{
name|port
operator|=
name|this
operator|.
name|nioSslPort
expr_stmt|;
block|}
else|else
block|{
name|port
operator|=
name|this
operator|.
name|sslPort
expr_stmt|;
block|}
name|useSSL
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|transportScheme
operator|.
name|contains
argument_list|(
literal|"nio"
argument_list|)
condition|)
block|{
name|port
operator|=
name|this
operator|.
name|nioPort
expr_stmt|;
block|}
else|else
block|{
name|port
operator|=
name|this
operator|.
name|port
expr_stmt|;
block|}
block|}
name|SocketFactory
name|factory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useSSL
condition|)
block|{
name|factory
operator|=
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|factory
operator|=
name|SocketFactory
operator|.
name|getDefault
argument_list|()
expr_stmt|;
block|}
return|return
name|factory
operator|.
name|createSocket
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
end_class

end_unit

