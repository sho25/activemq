begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** *<a href="http://activemq.org">ActiveMQ: The Open Source Message Fabric</a> * * Copyright 2005 (C) LogicBlaze, Inc. http://www.logicblaze.com * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|management
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_comment
comment|/**  * Statistics for a {@link javax.jms.Queue}  *  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|JMSQueueStatsImpl
extends|extends
name|JMSEndpointStatsImpl
implements|implements
name|JMSDestinationStats
block|{
specifier|protected
name|TimeStatisticImpl
name|sendMessageRateTime
decl_stmt|;
specifier|public
name|JMSQueueStatsImpl
parameter_list|()
block|{
name|this
operator|.
name|sendMessageRateTime
operator|=
operator|new
name|TimeStatisticImpl
argument_list|(
literal|"sendMessageRateTime"
argument_list|,
literal|"Time taken to send a message (publish thoughtput rate)"
argument_list|)
expr_stmt|;
name|addStatistic
argument_list|(
literal|"sendMessageRateTime"
argument_list|,
name|sendMessageRateTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JMSQueueStatsImpl
parameter_list|(
name|CountStatisticImpl
name|messageCount
parameter_list|,
name|CountStatisticImpl
name|pendingMessageCount
parameter_list|,
name|CountStatisticImpl
name|expiredMessageCount
parameter_list|,
name|TimeStatisticImpl
name|messageWaitTime
parameter_list|,
name|TimeStatisticImpl
name|messageRateTime
parameter_list|,
name|TimeStatisticImpl
name|sendMessageRateTime
parameter_list|)
block|{
name|super
argument_list|(
name|messageCount
argument_list|,
name|pendingMessageCount
argument_list|,
name|expiredMessageCount
argument_list|,
name|messageWaitTime
argument_list|,
name|messageRateTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|sendMessageRateTime
operator|=
name|sendMessageRateTime
expr_stmt|;
name|addStatistic
argument_list|(
literal|"sendMessageRateTime"
argument_list|,
name|sendMessageRateTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPendingMessageCountOnStartup
parameter_list|(
name|long
name|count
parameter_list|)
block|{
name|CountStatisticImpl
name|messageCount
init|=
operator|(
name|CountStatisticImpl
operator|)
name|getPendingMessageCount
argument_list|()
decl_stmt|;
name|messageCount
operator|.
name|setCount
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMessageSend
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|long
name|start
init|=
name|pendingMessageCount
operator|.
name|getLastSampleTime
argument_list|()
decl_stmt|;
name|pendingMessageCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|pendingMessageCount
operator|.
name|getLastSampleTime
argument_list|()
decl_stmt|;
name|sendMessageRateTime
operator|.
name|addTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onMessageAck
parameter_list|()
block|{
name|long
name|start
init|=
name|messageCount
operator|.
name|getLastSampleTime
argument_list|()
decl_stmt|;
name|messageCount
operator|.
name|increment
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|messageCount
operator|.
name|getLastSampleTime
argument_list|()
decl_stmt|;
name|messageRateTime
operator|.
name|addTime
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

