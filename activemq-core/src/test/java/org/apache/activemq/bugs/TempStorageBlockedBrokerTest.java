begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQPrefetchPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|amq
operator|.
name|AMQPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|plist
operator|.
name|PListStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|StoreUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|TempUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TempStorageBlockedBrokerTest
block|{
specifier|public
name|boolean
name|consumeAll
init|=
literal|false
decl_stmt|;
specifier|public
name|int
name|deliveryMode
init|=
name|DeliveryMode
operator|.
name|PERSISTENT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TempStorageBlockedBrokerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGES_COUNT
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
index|]
decl_stmt|;
specifier|private
name|BrokerService
name|broker
decl_stmt|;
name|AtomicInteger
name|messagesSent
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicInteger
name|messagesConsumed
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|protected
name|long
name|messageReceiveTimeout
init|=
literal|10L
decl_stmt|;
name|Destination
name|destination
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"FooTwo"
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|runProducerWithHungConsumer
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|origTempUsage
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"tcp://localhost:61618"
argument_list|)
decl_stmt|;
comment|// ensure messages are spooled to disk for this consumer
name|ActiveMQPrefetchPolicy
name|prefetch
init|=
operator|new
name|ActiveMQPrefetchPolicy
argument_list|()
decl_stmt|;
name|prefetch
operator|.
name|setTopicPrefetch
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setPrefetchPolicy
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|Connection
name|consumerConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|consumerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|producerConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|CountDownLatch
name|producerHasSentTenMessages
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Thread
name|producingThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Producing thread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Session
name|session
init|=
name|producerConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|deliveryMode
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|MESSAGES_COUNT
condition|;
operator|++
name|idx
control|)
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
operator|new
name|String
argument_list|(
name|buf
argument_list|)
operator|+
name|idx
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|messagesSent
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|producerHasSentTenMessages
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|!=
literal|0
operator|&&
name|idx
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent Message "
operator|+
name|idx
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Temp Store Usage "
operator|+
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|producingThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"producer has sent 10 in a reasonable time"
argument_list|,
name|producerHasSentTenMessages
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Message
name|m
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|m
operator|=
name|consumer
operator|.
name|receive
argument_list|(
name|messageReceiveTimeout
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
operator|&&
name|count
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recieved Message ("
operator|+
name|count
operator|+
literal|"):"
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
name|messagesConsumed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"error sleeping"
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Connection Timeout: Retrying.. count: "
operator|+
name|count
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|m
operator|=
name|consumer
operator|.
name|receive
argument_list|(
name|messageReceiveTimeout
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|!=
literal|0
operator|&&
name|count
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Recieved Message ("
operator|+
name|count
operator|+
literal|"):"
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
name|messagesConsumed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"error sleeping"
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"consumer session closing: consumed count: "
operator|+
name|count
argument_list|)
expr_stmt|;
name|consumerSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|producingThread
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|long
name|tempUsageBySubscription
init|=
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Orig Usage: "
operator|+
name|origTempUsage
operator|+
literal|", currentUsage: "
operator|+
name|tempUsageBySubscription
argument_list|)
expr_stmt|;
comment|// assertTrue("some temp store has been used", tempUsageBySubscription
comment|// != origTempUsage);
name|producerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Subscrition Usage: "
operator|+
name|tempUsageBySubscription
operator|+
literal|", endUsage: "
operator|+
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of Messages Sent: "
operator|+
name|messagesSent
operator|.
name|get
argument_list|()
argument_list|,
name|messagesSent
operator|.
name|get
argument_list|()
argument_list|,
name|MESSAGES_COUNT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Incorrect number of Messages Consumed: "
operator|+
name|messagesConsumed
operator|.
name|get
argument_list|()
argument_list|,
name|messagesConsumed
operator|.
name|get
argument_list|()
argument_list|,
name|MESSAGES_COUNT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setDataDirectory
argument_list|(
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"activemq-data"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AMQPersistenceAdapter
name|persistence
init|=
operator|new
name|AMQPersistenceAdapter
argument_list|()
decl_stmt|;
name|persistence
operator|.
name|setSyncOnWrite
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
literal|"target"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"activemq-data"
argument_list|)
decl_stmt|;
name|persistence
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|File
name|tmpDir
init|=
operator|new
name|File
argument_list|(
name|directory
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|PListStore
name|tempStore
init|=
operator|new
name|PListStore
argument_list|()
decl_stmt|;
name|tempStore
operator|.
name|setDirectory
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|tempStore
operator|.
name|start
argument_list|()
expr_stmt|;
name|SystemUsage
name|sysUsage
init|=
operator|new
name|SystemUsage
argument_list|(
literal|"mySysUsage"
argument_list|,
name|persistence
argument_list|,
name|tempStore
argument_list|)
decl_stmt|;
name|MemoryUsage
name|memUsage
init|=
operator|new
name|MemoryUsage
argument_list|()
decl_stmt|;
name|memUsage
operator|.
name|setLimit
argument_list|(
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
name|StoreUsage
name|storeUsage
init|=
operator|new
name|StoreUsage
argument_list|()
decl_stmt|;
name|storeUsage
operator|.
name|setLimit
argument_list|(
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|*
literal|38
argument_list|)
expr_stmt|;
name|TempUsage
name|tmpUsage
init|=
operator|new
name|TempUsage
argument_list|()
decl_stmt|;
name|tmpUsage
operator|.
name|setLimit
argument_list|(
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|*
literal|38
argument_list|)
expr_stmt|;
name|PolicyEntry
name|defaultPolicy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
comment|// defaultPolicy.setTopic("FooTwo");
name|defaultPolicy
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|defaultPolicy
operator|.
name|setMemoryLimit
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultPolicy
argument_list|)
expr_stmt|;
name|sysUsage
operator|.
name|setMemoryUsage
argument_list|(
name|memUsage
argument_list|)
expr_stmt|;
name|sysUsage
operator|.
name|setStoreUsage
argument_list|(
name|storeUsage
argument_list|)
expr_stmt|;
name|sysUsage
operator|.
name|setTempUsage
argument_list|(
name|tmpUsage
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setSystemUsage
argument_list|(
name|sysUsage
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setTempDataStore
argument_list|(
name|tempStore
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|persistence
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61618"
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Default"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

