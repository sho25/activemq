begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_comment
comment|/**  * A linked list used by IndexItems  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|final
class|class
name|IndexLinkedList
implements|implements
name|Cloneable
block|{
specifier|private
specifier|transient
name|IndexItem
name|root
decl_stmt|;
specifier|private
specifier|transient
name|int
name|size
init|=
literal|0
decl_stmt|;
comment|/**      * Constructs an empty list.      */
name|IndexLinkedList
parameter_list|(
name|IndexItem
name|header
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|header
expr_stmt|;
name|this
operator|.
name|root
operator|.
name|next
operator|=
name|root
operator|.
name|prev
operator|=
name|root
expr_stmt|;
block|}
name|IndexItem
name|getRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
comment|/**      * Returns the first element in this list.      *       * @return the first element in this list.      */
name|IndexItem
name|getFirst
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|root
operator|.
name|next
return|;
block|}
comment|/**      * Returns the last element in this list.      *       * @return the last element in this list.      */
name|IndexItem
name|getLast
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|root
operator|.
name|prev
return|;
block|}
comment|/**      * Removes and returns the first element from this list.      *       * @return the first element from this list.      */
name|IndexItem
name|removeFirst
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|IndexItem
name|result
init|=
name|root
operator|.
name|next
decl_stmt|;
name|remove
argument_list|(
name|root
operator|.
name|next
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Removes and returns the last element from this list.      *       * @return the last element from this list.      */
name|Object
name|removeLast
parameter_list|()
block|{
if|if
condition|(
name|size
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|IndexItem
name|result
init|=
name|root
operator|.
name|prev
decl_stmt|;
name|remove
argument_list|(
name|root
operator|.
name|prev
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Inserts the given element at the beginning of this list.      *       * @param o the element to be inserted at the beginning of this list.      */
name|void
name|addFirst
parameter_list|(
name|IndexItem
name|item
parameter_list|)
block|{
name|addBefore
argument_list|(
name|item
argument_list|,
name|root
operator|.
name|next
argument_list|)
expr_stmt|;
block|}
comment|/**      * Appends the given element to the end of this list. (Identical in function to the<tt>add</tt> method; included      * only for consistency.)      *       * @param o the element to be inserted at the end of this list.      */
name|void
name|addLast
parameter_list|(
name|IndexItem
name|item
parameter_list|)
block|{
name|addBefore
argument_list|(
name|item
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the number of elements in this list.      *       * @return the number of elements in this list.      */
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
comment|/**      * is the list empty?      *       * @return true if there are no elements in the list      */
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
comment|/**      * Appends the specified element to the end of this list.      *       * @param o element to be appended to this list.      * @return<tt>true</tt> (as per the general contract of<tt>Collection.add</tt>).      */
name|boolean
name|add
parameter_list|(
name|IndexItem
name|item
parameter_list|)
block|{
name|addBefore
argument_list|(
name|item
argument_list|,
name|root
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Removes all of the elements from this list.      */
name|void
name|clear
parameter_list|()
block|{
name|root
operator|.
name|next
operator|=
name|root
operator|.
name|prev
operator|=
name|root
expr_stmt|;
name|size
operator|=
literal|0
expr_stmt|;
block|}
comment|// Positional Access Operations
comment|/**      * Returns the element at the specified position in this list.      *       * @param index index of element to return.      * @return the element at the specified position in this list.      *       * @throws IndexOutOfBoundsException if the specified index is is out of range (<tt>index&lt; 0 || index&gt;= size()</tt>).      */
name|IndexItem
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|entry
argument_list|(
name|index
argument_list|)
return|;
block|}
comment|/**      * Inserts the specified element at the specified position in this list. Shifts the element currently at that      * position (if any) and any subsequent elements to the right (adds one to their indices).      *       * @param index index at which the specified element is to be inserted.      * @param element element to be inserted.      *       * @throws IndexOutOfBoundsException if the specified index is out of range (<tt>index&lt; 0 || index&gt; size()</tt>).      */
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|IndexItem
name|element
parameter_list|)
block|{
name|addBefore
argument_list|(
name|element
argument_list|,
operator|(
name|index
operator|==
name|size
condition|?
name|root
else|:
name|entry
argument_list|(
name|index
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes the element at the specified position in this list. Shifts any subsequent elements to the left (subtracts      * one from their indices). Returns the element that was removed from the list.      *       * @param index the index of the element to removed.      * @return the element previously at the specified position.      *       * @throws IndexOutOfBoundsException if the specified index is out of range (<tt>index&lt; 0 || index&gt;= size()</tt>).      */
name|Object
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|IndexItem
name|e
init|=
name|entry
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|remove
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
comment|/**      * Return the indexed entry.      */
specifier|private
name|IndexItem
name|entry
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|size
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Index: "
operator|+
name|index
operator|+
literal|", Size: "
operator|+
name|size
argument_list|)
throw|;
name|IndexItem
name|e
init|=
name|root
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|size
operator|/
literal|2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|index
condition|;
name|i
operator|++
control|)
name|e
operator|=
name|e
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|size
init|;
name|i
operator|>
name|index
condition|;
name|i
operator|--
control|)
name|e
operator|=
name|e
operator|.
name|prev
expr_stmt|;
block|}
return|return
name|e
return|;
block|}
comment|// Search Operations
comment|/**      * Returns the index in this list of the first occurrence of the specified element, or -1 if the List does not      * contain this element. More formally, returns the lowest index i such that      *<tt>(o==null ? get(i)==null : o.equals(get(i)))</tt>, or -1 if there is no such index.      *       * @param o element to search for.      * @return the index in this list of the first occurrence of the specified element, or -1 if the list does not      *         contain this element.      */
name|int
name|indexOf
parameter_list|(
name|IndexItem
name|o
parameter_list|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|IndexItem
name|e
init|=
name|root
operator|.
name|next
init|;
name|e
operator|!=
name|root
condition|;
name|e
operator|=
name|e
operator|.
name|next
control|)
block|{
if|if
condition|(
name|o
operator|==
name|e
condition|)
block|{
return|return
name|index
return|;
block|}
name|index
operator|++
expr_stmt|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Retrieve the next entry after this entry      *       * @param entry      * @return next entry      */
name|IndexItem
name|getNextEntry
parameter_list|(
name|IndexItem
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|next
operator|!=
name|root
condition|?
name|entry
operator|.
name|next
else|:
literal|null
return|;
block|}
comment|/**      * Retrive the prev entry after this entry      *       * @param entry      * @return prev entry      */
name|IndexItem
name|getPrevEntry
parameter_list|(
name|IndexItem
name|entry
parameter_list|)
block|{
return|return
name|entry
operator|.
name|prev
operator|!=
name|root
condition|?
name|entry
operator|.
name|prev
else|:
literal|null
return|;
block|}
comment|/**      * Insert an Entry before this entry      *       * @param o the elment to insert      * @param e the Entry to insert the object before      *       */
name|void
name|addBefore
parameter_list|(
name|IndexItem
name|insert
parameter_list|,
name|IndexItem
name|e
parameter_list|)
block|{
name|insert
operator|.
name|next
operator|=
name|e
expr_stmt|;
name|insert
operator|.
name|prev
operator|=
name|e
operator|.
name|prev
expr_stmt|;
name|insert
operator|.
name|prev
operator|.
name|next
operator|=
name|insert
expr_stmt|;
name|insert
operator|.
name|next
operator|.
name|prev
operator|=
name|insert
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
name|void
name|remove
parameter_list|(
name|IndexItem
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
name|root
condition|)
return|return;
name|e
operator|.
name|prev
operator|.
name|next
operator|=
name|e
operator|.
name|next
expr_stmt|;
name|e
operator|.
name|next
operator|.
name|prev
operator|=
name|e
operator|.
name|prev
expr_stmt|;
name|size
operator|--
expr_stmt|;
block|}
comment|/**      *@return clone      */
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|IndexLinkedList
name|clone
init|=
operator|new
name|IndexLinkedList
argument_list|(
name|this
operator|.
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexItem
name|e
init|=
name|root
operator|.
name|next
init|;
name|e
operator|!=
name|root
condition|;
name|e
operator|=
name|e
operator|.
name|next
control|)
name|clone
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
block|}
end_class

end_unit

