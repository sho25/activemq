begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|AbstractMessageStoreSizeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|LocationMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|TrueFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|filefilter
operator|.
name|WildcardFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * This test is for AMQ-5748 to verify that {@link MessageStore} implements correctly  * compute the size of the messages in the store.  *  * For KahaDB specifically, the size was not being stored in in the index ({@link LocationMarshaller}).  LocationMarshaller  * has been updated to include an option to include the size in the serialized value.  This way the message  * size will be persisted in the index and be available between broker restarts without needing to rebuild the index.  * Note that the KahaDB version has been incremented from 5 to 6 because the index will need to be rebuild when a version  * 5 index is detected since it will be detected as corrupt.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractKahaDBMessageStoreSizeTest
extends|extends
name|AbstractMessageStoreSizeTest
block|{
name|MessageStore
name|messageStore
decl_stmt|;
name|PersistenceAdapter
name|store
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initStore
parameter_list|()
throws|throws
name|Exception
block|{
name|createStore
argument_list|(
literal|true
argument_list|,
name|dataDirectory
argument_list|)
expr_stmt|;
block|}
specifier|abstract
specifier|protected
name|void
name|createStore
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|,
name|String
name|directory
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|abstract
specifier|protected
name|String
name|getVersion5Dir
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|destroyStore
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * This method tests that the message sizes exist for all messages that exist after messages are recovered      * off of disk.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testMessageSizeStoreRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|writeMessages
argument_list|()
expr_stmt|;
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
name|createStore
argument_list|(
literal|false
argument_list|,
name|dataDirectory
argument_list|)
expr_stmt|;
name|writeMessages
argument_list|()
expr_stmt|;
name|long
name|messageSize
init|=
name|messageStore
operator|.
name|getMessageSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|messageStore
operator|.
name|getMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|messageSize
operator|>
literal|40
operator|*
name|testMessageSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method tests that a version 5 store with an old index still works but returns 0 for messgage sizes.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testMessageSizeStoreRecoveryVersion5
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//Copy over an existing version 5 store with messages
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|dataDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|.
name|exists
argument_list|()
condition|)
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|dataDirectory
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|getVersion5Dir
argument_list|()
argument_list|)
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
comment|//reload store
name|createStore
argument_list|(
literal|false
argument_list|,
name|dataDirectory
argument_list|)
expr_stmt|;
comment|//make sure size is 0
name|long
name|messageSize
init|=
name|messageStore
operator|.
name|getMessageSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|messageStore
operator|.
name|getMessageCount
argument_list|()
operator|==
literal|20
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|messageSize
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * This method tests that a version 5 store with existing messages will correctly be recovered and converted      * to version 6.  After index deletion, the index will be rebuilt and will include message sizes.      *      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testMessageSizeStoreRecoveryVersion5RebuildIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//Copy over an existing version 5 store with messages
name|File
name|dataDir
init|=
operator|new
name|File
argument_list|(
name|dataDirectory
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|.
name|exists
argument_list|()
condition|)
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|dataDirectory
argument_list|)
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|getVersion5Dir
argument_list|()
argument_list|)
argument_list|,
name|dataDir
argument_list|)
expr_stmt|;
for|for
control|(
name|File
name|index
range|:
name|FileUtils
operator|.
name|listFiles
argument_list|(
operator|new
name|File
argument_list|(
name|dataDirectory
argument_list|)
argument_list|,
operator|new
name|WildcardFileFilter
argument_list|(
literal|"*.data"
argument_list|)
argument_list|,
name|TrueFileFilter
operator|.
name|INSTANCE
argument_list|)
control|)
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|//append more messages...at this point the index should be rebuilt
name|createStore
argument_list|(
literal|false
argument_list|,
name|dataDirectory
argument_list|)
expr_stmt|;
name|writeMessages
argument_list|()
expr_stmt|;
comment|//after writing new messages to the existing store, make sure the index is rebuilt and size is correct
name|long
name|messageSize
init|=
name|messageStore
operator|.
name|getMessageSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|messageStore
operator|.
name|getMessageCount
argument_list|()
operator|==
literal|40
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|messageSize
operator|>
literal|40
operator|*
name|testMessageSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|MessageStore
name|getMessageStore
parameter_list|()
block|{
return|return
name|messageStore
return|;
block|}
block|}
end_class

end_unit

