begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|ManagedTransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|SslTransportServer
import|;
end_import

begin_comment
comment|/**  * A JAAS Authentication Broker that uses different JAAS domain configurations  * depending if the connection is over an SSL enabled Connector or not.  *  * This allows you to, for instance, do DN based authentication for SSL connections  * and use a mixture of username/passwords and simple guest authentication for  * non-SSL connections.  *<p>  * An example<code>login.config</code> to do do this is:  *<pre>  * activemq-domain {  *   org.apache.activemq.jaas.PropertiesLoginModule sufficient  *       debug=true  *       org.apache.activemq.jaas.properties.user="users.properties"  *       org.apache.activemq.jaas.properties.group="groups.properties";  *   org.apache.activemq.jaas.GuestLoginModule sufficient  *       debug=true  *       org.apache.activemq.jaas.guest.user="guest"  *       org.apache.activemq.jaas.guest.group="guests";  * };  *  * activemq-ssl-domain {  *   org.apache.activemq.jaas.TextFileCertificateLoginModule required  *       debug=true  *       org.apache.activemq.jaas.textfiledn.user="dns.properties"  *       org.apache.activemq.jaas.textfiledn.group="groups.properties";  * };  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|JaasDualAuthenticationBroker
extends|extends
name|BrokerFilter
block|{
specifier|private
specifier|final
name|JaasCertificateAuthenticationBroker
name|sslBroker
decl_stmt|;
specifier|private
specifier|final
name|JaasAuthenticationBroker
name|nonSslBroker
decl_stmt|;
comment|/*** Simple constructor. Leaves everything to superclass.      *      * @param next The Broker that does the actual work for this Filter.      * @param jaasConfiguration The JAAS domain configuration name for      *                non-SSL connections (refer to JAAS documentation).      * @param jaasSslConfiguration The JAAS domain configuration name for      *                SSL connections (refer to JAAS documentation).      */
specifier|public
name|JaasDualAuthenticationBroker
parameter_list|(
name|Broker
name|next
parameter_list|,
name|String
name|jaasConfiguration
parameter_list|,
name|String
name|jaasSslConfiguration
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|nonSslBroker
operator|=
operator|new
name|JaasAuthenticationBroker
argument_list|(
operator|new
name|EmptyBroker
argument_list|()
argument_list|,
name|jaasConfiguration
argument_list|)
expr_stmt|;
name|this
operator|.
name|sslBroker
operator|=
operator|new
name|JaasCertificateAuthenticationBroker
argument_list|(
operator|new
name|EmptyBroker
argument_list|()
argument_list|,
name|jaasSslConfiguration
argument_list|)
expr_stmt|;
block|}
comment|/**      * Overridden to allow for authentication using different Jaas      * configurations depending on if the connection is SSL or not.      *      * @param context The context for the incoming Connection.      * @param info The ConnectionInfo Command representing the incoming      *                connection.      */
specifier|public
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|context
operator|.
name|getSecurityContext
argument_list|()
operator|==
literal|null
condition|)
block|{
name|boolean
name|isSSL
decl_stmt|;
name|Connector
name|connector
init|=
name|context
operator|.
name|getConnector
argument_list|()
decl_stmt|;
if|if
condition|(
name|connector
operator|instanceof
name|TransportConnector
condition|)
block|{
name|TransportConnector
name|transportConnector
init|=
operator|(
name|TransportConnector
operator|)
name|connector
decl_stmt|;
name|isSSL
operator|=
operator|(
name|transportConnector
operator|.
name|getServer
argument_list|()
operator|instanceof
name|SslTransportServer
operator|)
expr_stmt|;
block|}
else|else
block|{
name|isSSL
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSSL
condition|)
block|{
name|this
operator|.
name|sslBroker
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nonSslBroker
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Overriding removeConnection to make sure the security context is cleaned.      */
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isSSL
decl_stmt|;
name|Connector
name|connector
init|=
name|context
operator|.
name|getConnector
argument_list|()
decl_stmt|;
if|if
condition|(
name|connector
operator|instanceof
name|ManagedTransportConnector
condition|)
block|{
name|ManagedTransportConnector
name|managedTransportConnector
init|=
operator|(
name|ManagedTransportConnector
operator|)
name|connector
decl_stmt|;
name|isSSL
operator|=
operator|(
name|managedTransportConnector
operator|.
name|getServer
argument_list|()
operator|instanceof
name|SslTransportServer
operator|)
expr_stmt|;
block|}
else|else
block|{
name|isSSL
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSSL
condition|)
block|{
name|this
operator|.
name|sslBroker
operator|.
name|removeConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|nonSslBroker
operator|.
name|removeConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

