begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|SequenceSetTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAddLong
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRangeSize
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsEmpty
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClear
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testContains
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|21
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|47
argument_list|,
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|142
argument_list|,
literal|512
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|49
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|153
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|43
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|contains
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|101
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|remove
argument_list|(
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|set
operator|.
name|remove
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set
operator|.
name|remove
argument_list|(
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|98
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|97
argument_list|,
name|set
operator|.
name|rangeSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIterator
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
operator|new
name|Sequence
argument_list|(
literal|20
argument_list|,
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|expected
index|[]
init|=
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|4
block|,
literal|5
block|,
literal|7
block|,
literal|20
block|,
literal|21
block|}
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iterator
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|index
operator|++
index|]
argument_list|,
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIteratorEmptySequenceSet
parameter_list|()
block|{
name|SequenceSet
name|set
init|=
operator|new
name|SequenceSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iterator
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Should not have any elements"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

