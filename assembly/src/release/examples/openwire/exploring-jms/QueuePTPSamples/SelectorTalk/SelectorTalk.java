begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * © 2001-2009, Progress Software Corporation and/or its subsidiaries or affiliates.  All rights reserved.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.   Sample Application  Writing a Basic JMS Application using Point-to-Point (Queues) with a Message Selector  This sample starts up with a username, and the queues you are sending on, and receiving on.  When messages are sent to a queue a property is set in the message header to a property value supplied on the command line. A separate command line value is used as a message selector for messages in the receive queue. In this sample we choose to create a property named "Department"  Writing a line and pressing enter will send the message only to the indicated 'Talk' partner (or QueueReceiver).  Usage:   java SelectorTalk -b<broker:port> -u<username> -p<password> -qs<queue> -qr<queue>             -s<selection>       -b broker:port points to your message broker                      Default: tcp://localhost:61616       -u username    must be unique (but is not checked)       -p password    password for user (not checked)       -qr queue      name of queue to receive       -qs queue      name of queue to send       -s selector    the message selection value  You must specify either a queue for sending or receiving (or both) as well as a value with which to select received messages.   Suggested demonstration:   - In separate console windows with the environment set,     start instances of the application under unique user names.     For example:        java SelectorTalk -u BOB -s SALES -qr  Q1 -qs  Q2        java SelectorTalk -u SALLY -s SALES -qr  Q2 -qs   Q1   - Enter text and then press Enter to send the message.   - See messages appear under the user's indicated name.   - Try changing the message selector on one console and note that it will     no longer receive messages.   - Stop a session by pressing CTRL+C in its console window.  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|SelectorTalk
implements|implements
name|javax
operator|.
name|jms
operator|.
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_BROKER_NAME
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_NAME
init|=
literal|"Department"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGE_LIFESPAN
init|=
literal|1800000
decl_stmt|;
comment|// milliseconds (30 minutes)
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connect
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Session
name|sendSession
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|Session
name|receiveSession
init|=
literal|null
decl_stmt|;
specifier|private
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
name|sender
init|=
literal|null
decl_stmt|;
comment|/** Create JMS client for sending and receiving messages. */
specifier|private
name|void
name|talker
parameter_list|(
name|String
name|broker
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|rQueue
parameter_list|,
name|String
name|sQueue
parameter_list|,
name|String
name|selection
parameter_list|)
block|{
comment|// Create a connection.
try|try
block|{
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
name|factory
decl_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|broker
argument_list|)
expr_stmt|;
name|connect
operator|=
name|factory
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|sendSession
operator|=
name|connect
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|receiveSession
operator|=
name|connect
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: Cannot connect to Broker - "
operator|+
name|broker
argument_list|)
expr_stmt|;
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Create Sender and Receiver 'Talk' queues
try|try
block|{
if|if
condition|(
name|sQueue
operator|!=
literal|null
condition|)
block|{
name|javax
operator|.
name|jms
operator|.
name|Queue
name|sendQueue
init|=
name|sendSession
operator|.
name|createQueue
argument_list|(
name|sQueue
argument_list|)
decl_stmt|;
name|sender
operator|=
name|sendSession
operator|.
name|createProducer
argument_list|(
name|sendQueue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rQueue
operator|!=
literal|null
condition|)
block|{
comment|//NOTE: the Queue Receiver is set up with the Message Selector:
name|javax
operator|.
name|jms
operator|.
name|Queue
name|receiveQueue
init|=
name|receiveSession
operator|.
name|createQueue
argument_list|(
name|rQueue
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
name|qReceiver
init|=
name|receiveSession
operator|.
name|createConsumer
argument_list|(
name|receiveQueue
argument_list|,
name|PROPERTY_NAME
operator|+
literal|" = \'"
operator|+
name|selection
operator|+
literal|"\'"
argument_list|)
decl_stmt|;
name|qReceiver
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|exit
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|rQueue
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nNo receiving queue specified.\n"
argument_list|)
expr_stmt|;
comment|// Read all standard input and send it as a message.
name|java
operator|.
name|io
operator|.
name|BufferedReader
name|stdin
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedReader
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sQueue
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SelectorTalk application:\n"
operator|+
literal|"=========================\n"
operator|+
literal|"The application user "
operator|+
name|username
operator|+
literal|" connects to the broker at "
operator|+
name|DEFAULT_BROKER_NAME
operator|+
literal|".\n"
operator|+
literal|"The application will send messages with "
operator|+
name|PROPERTY_NAME
operator|+
literal|" set to "
operator|+
name|selection
operator|+
literal|" to the "
operator|+
name|sQueue
operator|+
literal|" queue.\n"
operator|+
literal|"The application creates a receiver on the "
operator|+
name|rQueue
operator|+
literal|" queue selecting only messages where "
operator|+
name|PROPERTY_NAME
operator|+
literal|" is "
operator|+
name|selection
operator|+
literal|".\n\n"
operator|+
literal|"Type some text, and then press Enter to publish it as a TextMesssage from "
operator|+
name|username
operator|+
literal|".\n"
argument_list|)
expr_stmt|;
else|else
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\nPress CTRL-C to exit.\n"
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|s
init|=
name|stdin
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
name|exit
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|sQueue
operator|!=
literal|null
condition|)
block|{
name|javax
operator|.
name|jms
operator|.
name|TextMessage
name|msg
init|=
name|sendSession
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|msg
operator|.
name|setText
argument_list|(
name|username
operator|+
literal|": "
operator|+
name|s
argument_list|)
expr_stmt|;
comment|// NOTE: here we set the property for each sent message.
name|msg
operator|.
name|setStringProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|selection
argument_list|)
expr_stmt|;
name|sender
operator|.
name|send
argument_list|(
name|msg
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|,
name|javax
operator|.
name|jms
operator|.
name|Message
operator|.
name|DEFAULT_PRIORITY
argument_list|,
name|MESSAGE_LIFESPAN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|IOException
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// Close the connection.
name|exit
argument_list|()
expr_stmt|;
block|}
comment|/**      * Handle the message      * (as specified in the javax.jms.MessageListener interface).      */
specifier|public
name|void
name|onMessage
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|Message
name|aMessage
parameter_list|)
block|{
try|try
block|{
comment|// Cast the message as a text message.
name|javax
operator|.
name|jms
operator|.
name|TextMessage
name|textMessage
init|=
operator|(
name|javax
operator|.
name|jms
operator|.
name|TextMessage
operator|)
name|aMessage
decl_stmt|;
comment|// This handler reads a single String from the
comment|// message and prints it to the standard output.
try|try
block|{
name|String
name|string
init|=
name|textMessage
operator|.
name|getText
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|RuntimeException
name|rte
parameter_list|)
block|{
name|rte
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Cleanup resources and then exit. */
specifier|private
name|void
name|exit
parameter_list|()
block|{
try|try
block|{
name|connect
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|jmse
parameter_list|)
block|{
name|jmse
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// NOTE: the remainder of this sample deals with reading arguments
comment|// and does not utilize any JMS classes or code.
comment|//
comment|/** Main program entry point. */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|argv
index|[]
parameter_list|)
block|{
comment|// Is there anything to do?
if|if
condition|(
name|argv
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Values to be read from parameters
name|String
name|broker
init|=
name|DEFAULT_BROKER_NAME
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
name|DEFAULT_PASSWORD
decl_stmt|;
name|String
name|qSender
init|=
literal|null
decl_stmt|;
name|String
name|qReceiver
init|=
literal|null
decl_stmt|;
name|String
name|selection
init|=
literal|null
decl_stmt|;
comment|// Check parameters
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|argv
index|[
name|i
index|]
decl_stmt|;
comment|// Options
if|if
condition|(
operator|!
name|arg
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: unexpected argument - "
operator|+
name|arg
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-b"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing broker name:port"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|broker
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-u"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing user name"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|username
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-p"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing password"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|password
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-qr"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing receive queue parameter"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|qReceiver
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-qs"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing send queue parameter"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|qSender
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-s"
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|argv
operator|.
name|length
operator|-
literal|1
operator|||
name|argv
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: missing selectiion"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|selection
operator|=
name|argv
index|[
operator|++
name|i
index|]
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Check values read in.
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: user name must be supplied"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qReceiver
operator|==
literal|null
operator|&&
name|qSender
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: receive queue, or send queue, must be supplied"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|selection
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: selection must be supplied (e.g. -s SALES)\n"
argument_list|)
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Start the JMS client for the "Talk".
name|SelectorTalk
name|talk
init|=
operator|new
name|SelectorTalk
argument_list|()
decl_stmt|;
name|talk
operator|.
name|talker
argument_list|(
name|broker
argument_list|,
name|username
argument_list|,
name|password
argument_list|,
name|qReceiver
argument_list|,
name|qSender
argument_list|,
name|selection
argument_list|)
expr_stmt|;
block|}
comment|/** Prints the usage. */
specifier|private
specifier|static
name|void
name|printUsage
parameter_list|()
block|{
name|StringBuffer
name|use
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"usage: java SelectorTalk (options) ...\n\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"options:\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -b  name:port Specify name:port of broker.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                Default broker: "
operator|+
name|DEFAULT_BROKER_NAME
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -u  name      Specify unique user name. (Required)\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -p  password  Specify password for user.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"                Default password: "
operator|+
name|DEFAULT_PASSWORD
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -qr queue     Specify queue for receiving messages.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -qs queue     Specify queue for sending messages.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -s  selection required, selection used to receive messages.\n"
argument_list|)
expr_stmt|;
name|use
operator|.
name|append
argument_list|(
literal|"  -h            This help screen.\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|use
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

