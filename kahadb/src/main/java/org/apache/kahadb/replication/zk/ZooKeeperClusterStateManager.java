begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|zk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|ClusterListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|ClusterStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|ReplicationSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBClusterConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBClusterNodeStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|WatchedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|Watcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NoNodeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
operator|.
name|NodeExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_comment
comment|/**  *   * @author chirino  * @org.apache.xbean.XBean element="zookeeperCluster"  */
end_comment

begin_class
specifier|public
class|class
name|ZooKeeperClusterStateManager
implements|implements
name|ClusterStateManager
implements|,
name|Watcher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ZooKeeperClusterStateManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
specifier|private
name|ArrayList
argument_list|<
name|ClusterListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|ClusterListener
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|startCounter
decl_stmt|;
specifier|private
name|String
name|uri
init|=
literal|"zk://localhost:2181/activemq/ha-cluster/default"
decl_stmt|;
name|String
name|userid
init|=
literal|"activemq"
decl_stmt|;
name|String
name|password
init|=
literal|""
decl_stmt|;
specifier|private
name|ZooKeeper
name|zk
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|ClusterState
name|clusterState
decl_stmt|;
specifier|private
name|String
name|statusPath
decl_stmt|;
specifier|private
name|PBClusterNodeStatus
name|memberStatus
decl_stmt|;
specifier|private
name|Thread
name|takoverTask
decl_stmt|;
specifier|private
name|boolean
name|areWeTheBestMaster
decl_stmt|;
specifier|synchronized
specifier|public
name|void
name|addListener
parameter_list|(
name|ClusterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|fireClusterChange
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|public
name|void
name|removeListener
parameter_list|(
name|ClusterListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
specifier|private
name|void
name|updateClusterState
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|)
block|{
name|this
operator|.
name|clusterState
operator|=
name|clusterState
expr_stmt|;
name|fireClusterChange
argument_list|()
expr_stmt|;
block|}
specifier|synchronized
specifier|private
name|void
name|fireClusterChange
parameter_list|()
block|{
if|if
condition|(
name|startCounter
operator|>
literal|0
operator|&&
operator|!
name|listeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|ClusterListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onClusterChange
argument_list|(
name|clusterState
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|synchronized
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|startCounter
operator|++
expr_stmt|;
if|if
condition|(
name|startCounter
operator|==
literal|1
condition|)
block|{
comment|// Make sure the path is set..
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
comment|// Create a ZooKeeper connection..
name|zk
operator|=
name|createZooKeeperConnection
argument_list|()
expr_stmt|;
while|while
condition|(
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|mkParentDirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
name|zk
operator|.
name|create
argument_list|(
name|path
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|ignore
parameter_list|)
block|{                     }
name|processClusterStateChange
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleZKError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|synchronized
specifier|private
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|startCounter
operator|>
literal|0
return|;
block|}
specifier|synchronized
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|startCounter
operator|--
expr_stmt|;
if|if
condition|(
name|startCounter
operator|==
literal|0
condition|)
block|{
name|zk
operator|.
name|close
argument_list|()
expr_stmt|;
name|zk
operator|=
literal|null
expr_stmt|;
name|path
operator|=
literal|null
expr_stmt|;
name|clusterState
operator|=
literal|null
expr_stmt|;
name|statusPath
operator|=
literal|null
expr_stmt|;
name|memberStatus
operator|=
literal|null
expr_stmt|;
name|takoverTask
operator|=
literal|null
expr_stmt|;
name|areWeTheBestMaster
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|this
operator|.
name|uri
argument_list|)
decl_stmt|;
name|path
operator|=
name|uri
operator|.
name|getPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid uri '"
operator|+
name|uri
operator|+
literal|"', path to cluster configuration not specified"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid uri '"
operator|+
name|uri
operator|+
literal|"': "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|path
return|;
block|}
name|ZooKeeper
name|createZooKeeperConnection
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|IOException
block|{
comment|// Parse out the configuration URI.
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|this
operator|.
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|equals
argument_list|(
literal|"zk"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid uri '"
operator|+
name|uri
operator|+
literal|"', expected it to start with zk://"
argument_list|)
throw|;
block|}
name|String
name|host
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid uri '"
operator|+
name|uri
operator|+
literal|"', host not specified"
argument_list|)
throw|;
block|}
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
name|port
operator|=
literal|2181
expr_stmt|;
block|}
name|ZooKeeper
name|zk
init|=
operator|new
name|ZooKeeper
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|zk
operator|.
name|addAuthInfo
argument_list|(
literal|"digest"
argument_list|,
operator|(
name|userid
operator|+
literal|":"
operator|+
name|password
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|zk
return|;
block|}
specifier|private
name|void
name|processClusterStateChange
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|zk
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|byte
index|[]
name|data
init|=
name|zk
operator|.
name|getData
argument_list|(
name|path
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|processClusterStateChange
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|)
decl_stmt|;
name|PBClusterConfiguration
name|config
init|=
operator|new
name|PBClusterConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|mergeUnframed
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
operator|new
name|ClusterState
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|slaves
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|config
operator|.
name|getMembersList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|hasMaster
argument_list|()
condition|)
block|{
name|state
operator|.
name|setMaster
argument_list|(
name|config
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|slaves
operator|.
name|remove
argument_list|(
name|config
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|state
operator|.
name|setSlaves
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|slaves
argument_list|)
argument_list|)
expr_stmt|;
name|updateClusterState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got: "
operator|+
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMemberStatus
parameter_list|(
specifier|final
name|PBClusterNodeStatus
name|status
parameter_list|)
block|{
while|while
condition|(
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|memberStatus
operator|=
name|status
expr_stmt|;
if|if
condition|(
name|statusPath
operator|==
literal|null
condition|)
block|{
name|mkdirs
argument_list|(
name|path
operator|+
literal|"/election"
argument_list|)
expr_stmt|;
name|statusPath
operator|=
name|zk
operator|.
name|create
argument_list|(
name|path
operator|+
literal|"/election/n_"
argument_list|,
name|status
operator|.
name|toUnframedByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Stat
name|stat
init|=
name|zk
operator|.
name|exists
argument_list|(
name|statusPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|zk
operator|.
name|delete
argument_list|(
name|statusPath
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|statusPath
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|zk
operator|.
name|setData
argument_list|(
name|statusPath
argument_list|,
name|status
operator|.
name|toUnframedByteArray
argument_list|()
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|processElectionChange
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|handleZKError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|synchronized
specifier|private
name|void
name|processElectionChange
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|zk
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|zkNodes
init|=
name|zk
operator|.
name|getChildren
argument_list|(
name|path
operator|+
literal|"/election"
argument_list|,
operator|new
name|Watcher
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|WatchedEvent
name|event
parameter_list|)
block|{
name|processElectionChange
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PBClusterNodeStatus
argument_list|>
name|children
init|=
name|processNodeStatus
argument_list|(
name|zkNodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|firstNodeId
init|=
name|children
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// If we are the first child?
if|if
condition|(
name|firstNodeId
operator|.
name|equals
argument_list|(
name|statusPath
argument_list|)
condition|)
block|{
comment|// If we are master already no need to do anything else
if|if
condition|(
name|memberStatus
operator|.
name|getConnectUri
argument_list|()
operator|.
name|equals
argument_list|(
name|clusterState
operator|.
name|getMaster
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// We may need to wait till a little to figure out if we are
comment|// actually the best pick to be the master.
switch|switch
condition|(
name|memberStatus
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|MASTER
case|:
case|case
name|SLAVE_ONLINE
case|:
comment|// Can transition to master immediately
name|LOG
operator|.
name|info
argument_list|(
literal|"Online salve taking over as master."
argument_list|)
expr_stmt|;
name|setMaster
argument_list|(
name|memberStatus
operator|.
name|getConnectUri
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|SLAVE_SYNCRONIZING
case|:
case|case
name|SLAVE_UNCONNECTED
case|:
comment|// If it looks like we are the best master.. lets wait 5 secs to
comment|// let other slaves
comment|// join the cluster and get a chance to take over..
if|if
condition|(
name|areWeTheBestMaster
argument_list|(
name|children
argument_list|)
condition|)
block|{
name|areWeTheBestMaster
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|takoverTask
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|memberStatus
operator|.
name|getConnectUri
argument_list|()
operator|+
literal|" looks like the best offline slave that can take over as master.. waiting 5 secs to allow another slave to take over."
argument_list|)
expr_stmt|;
name|takoverTask
operator|=
operator|new
name|Thread
argument_list|(
literal|"Slave takeover.."
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|takoverAttempt
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|takoverTask
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|takoverTask
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
block|{
if|if
condition|(
name|areWeTheBestMaster
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|memberStatus
operator|.
name|getConnectUri
argument_list|()
operator|+
literal|" no longer looks like the best offline slave that can take over as master."
argument_list|)
expr_stmt|;
block|}
name|areWeTheBestMaster
operator|=
literal|false
expr_stmt|;
comment|// If we get here we need to yield our top position in the node
comment|// sequence list so that the better
comment|// slave can become the master.
name|Stat
name|stat
init|=
name|zk
operator|.
name|exists
argument_list|(
name|statusPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|zk
operator|.
name|delete
argument_list|(
name|statusPath
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|statusPath
operator|=
name|zk
operator|.
name|create
argument_list|(
name|path
operator|+
literal|"/election/n_"
argument_list|,
name|memberStatus
operator|.
name|toUnframedByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL_SEQUENTIAL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|takoverAttempt
parameter_list|()
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
return|return;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
if|if
condition|(
name|areWeTheBestMaster
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|memberStatus
operator|.
name|getConnectUri
argument_list|()
operator|+
literal|" is taking over as master."
argument_list|)
expr_stmt|;
name|setMaster
argument_list|(
name|memberStatus
operator|.
name|getConnectUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// We want to make sure we set takoverTask to null in the same mutex as we set the master.
name|takoverTask
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
finally|finally
block|{
comment|// sleep might error out..
synchronized|synchronized
init|(
name|this
init|)
block|{
name|takoverTask
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|areWeTheBestMaster
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|PBClusterNodeStatus
argument_list|>
name|children
parameter_list|)
block|{
name|Location
name|ourLocation
init|=
name|ReplicationSupport
operator|.
name|convert
argument_list|(
name|memberStatus
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|PBClusterNodeStatus
argument_list|>
name|entry
range|:
name|children
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PBClusterNodeStatus
name|status
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|status
operator|.
name|getState
argument_list|()
condition|)
block|{
case|case
name|MASTER
case|:
case|case
name|SLAVE_ONLINE
case|:
return|return
literal|false
return|;
case|case
name|SLAVE_SYNCRONIZING
case|:
case|case
name|SLAVE_UNCONNECTED
case|:
if|if
condition|(
name|ourLocation
operator|.
name|compareTo
argument_list|(
name|ReplicationSupport
operator|.
name|convert
argument_list|(
name|status
operator|.
name|getLastUpdate
argument_list|()
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PBClusterNodeStatus
argument_list|>
name|processNodeStatus
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|children
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|InvalidProtocolBufferException
block|{
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|String
argument_list|,
name|PBClusterNodeStatus
argument_list|>
name|rc
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|TreeMap
argument_list|<
name|String
argument_list|,
name|PBClusterNodeStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|nodeId
range|:
name|children
control|)
block|{
try|try
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|zk
operator|.
name|getData
argument_list|(
name|path
operator|+
literal|"/election/"
operator|+
name|nodeId
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|PBClusterNodeStatus
name|status
init|=
operator|new
name|PBClusterNodeStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|mergeUnframed
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|rc
operator|.
name|put
argument_list|(
name|path
operator|+
literal|"/election/"
operator|+
name|nodeId
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoNodeException
name|ignore
parameter_list|)
block|{             }
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|addMember
parameter_list|(
specifier|final
name|String
name|node
parameter_list|)
block|{
while|while
condition|(
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|mkParentDirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|path
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
operator|new
name|Updater
argument_list|<
name|InvalidProtocolBufferException
argument_list|>
argument_list|()
block|{
specifier|public
name|byte
index|[]
name|update
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|PBClusterConfiguration
name|config
init|=
operator|new
name|PBClusterConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|mergeUnframed
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|getMembersList
argument_list|()
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|config
operator|.
name|addMembers
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
return|return
name|config
operator|.
name|toFramedByteArray
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleZKError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|removeMember
parameter_list|(
specifier|final
name|String
name|node
parameter_list|)
block|{
while|while
condition|(
name|isStarted
argument_list|()
condition|)
block|{
try|try
block|{
name|mkParentDirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|path
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
operator|new
name|Updater
argument_list|<
name|InvalidProtocolBufferException
argument_list|>
argument_list|()
block|{
specifier|public
name|byte
index|[]
name|update
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|PBClusterConfiguration
name|config
init|=
operator|new
name|PBClusterConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|mergeUnframed
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|getMembersList
argument_list|()
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|config
operator|.
name|toFramedByteArray
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|handleZKError
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setMaster
parameter_list|(
specifier|final
name|String
name|node
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|mkParentDirs
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|path
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
operator|new
name|Updater
argument_list|<
name|InvalidProtocolBufferException
argument_list|>
argument_list|()
block|{
specifier|public
name|byte
index|[]
name|update
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|PBClusterConfiguration
name|config
init|=
operator|new
name|PBClusterConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|mergeUnframed
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setMaster
argument_list|(
name|node
argument_list|)
expr_stmt|;
return|return
name|config
operator|.
name|toFramedByteArray
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
interface|interface
name|Updater
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
block|{
name|byte
index|[]
name|update
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|T
function_decl|;
block|}
specifier|private
parameter_list|<
name|T
extends|extends
name|Throwable
parameter_list|>
name|void
name|update
parameter_list|(
name|String
name|path
parameter_list|,
name|CreateMode
name|persistent
parameter_list|,
name|Updater
argument_list|<
name|T
argument_list|>
name|updater
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
throws|,
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|T
block|{
name|Stat
name|stat
init|=
name|zk
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|stat
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|zk
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|data
operator|=
name|updater
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|zk
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
index|[]
name|update
init|=
name|updater
operator|.
name|update
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|zk
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|update
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|persistent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|ignore
parameter_list|)
block|{
name|stat
operator|=
name|zk
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|zk
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|data
operator|=
name|updater
operator|.
name|update
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|zk
operator|.
name|setData
argument_list|(
name|path
argument_list|,
name|data
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mkParentDirs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|int
name|lastIndexOf
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastIndexOf
operator|>=
literal|0
condition|)
block|{
name|mkdirs
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastIndexOf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|mkdirs
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|zk
operator|.
name|exists
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
comment|// Remove the leading /
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|split
init|=
name|path
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|String
name|cur
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|split
control|)
block|{
name|cur
operator|+=
literal|"/"
operator|+
name|node
expr_stmt|;
try|try
block|{
name|zk
operator|.
name|create
argument_list|(
name|cur
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NodeExistsException
name|ignore
parameter_list|)
block|{             }
block|}
block|}
specifier|public
name|String
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|void
name|setUri
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|String
name|getUserid
parameter_list|()
block|{
return|return
name|userid
return|;
block|}
specifier|public
name|void
name|setUserid
parameter_list|(
name|String
name|userid
parameter_list|)
block|{
name|this
operator|.
name|userid
operator|=
name|userid
expr_stmt|;
block|}
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
specifier|public
name|void
name|setPassword
parameter_list|(
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
block|}
specifier|private
name|void
name|handleZKError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ZooKeeper error.  Will retry operation in 1 seconds"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"The error was: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isStarted
argument_list|()
condition|)
return|return;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
block|}
end_class

end_unit

