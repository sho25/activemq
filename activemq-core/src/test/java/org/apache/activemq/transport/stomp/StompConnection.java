begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_class
specifier|public
class|class
name|StompConnection
block|{
specifier|public
specifier|static
specifier|final
name|long
name|RECEIVE_TIMEOUT
init|=
literal|10000
decl_stmt|;
specifier|private
name|Socket
name|stompSocket
decl_stmt|;
specifier|private
name|ByteArrayOutputStream
name|inputBuffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|public
name|void
name|open
parameter_list|(
name|String
name|host
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|IOException
throws|,
name|UnknownHostException
block|{
name|stompSocket
operator|=
operator|new
name|Socket
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|stompSocket
operator|!=
literal|null
condition|)
block|{
name|stompSocket
operator|.
name|close
argument_list|()
expr_stmt|;
name|stompSocket
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|sendFrame
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|bytes
init|=
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|OutputStream
name|outputStream
init|=
name|stompSocket
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|outputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|receiveFrame
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|receiveFrame
argument_list|(
name|RECEIVE_TIMEOUT
argument_list|)
return|;
block|}
specifier|private
name|String
name|receiveFrame
parameter_list|(
name|long
name|timeOut
parameter_list|)
throws|throws
name|Exception
block|{
name|stompSocket
operator|.
name|setSoTimeout
argument_list|(
operator|(
name|int
operator|)
name|timeOut
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
name|stompSocket
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"socket closed."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|'\n'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expecting stomp frame to terminate with \0\n"
argument_list|)
throw|;
block|}
name|byte
index|[]
name|ba
init|=
name|inputBuffer
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|inputBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|ba
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
else|else
block|{
name|inputBuffer
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

