begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageNotWriteableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|PropertyExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|CommandVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TypeConversionSupport
import|;
end_import

begin_comment
comment|/**  * @openwire:marshaller code="23"  *   * @version $Revision:$  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQMessage
extends|extends
name|Message
implements|implements
name|javax
operator|.
name|jms
operator|.
name|Message
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|DATA_STRUCTURE_TYPE
init|=
name|CommandTypes
operator|.
name|ACTIVEMQ_MESSAGE
decl_stmt|;
specifier|public
name|byte
name|getDataStructureType
parameter_list|()
block|{
return|return
name|DATA_STRUCTURE_TYPE
return|;
block|}
specifier|transient
specifier|protected
name|Callback
name|acknowledgeCallback
decl_stmt|;
specifier|public
name|Message
name|copy
parameter_list|()
block|{
name|ActiveMQMessage
name|copy
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
specifier|protected
name|void
name|copy
parameter_list|(
name|ActiveMQMessage
name|copy
parameter_list|)
block|{
name|super
operator|.
name|copy
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|copy
operator|.
name|acknowledgeCallback
operator|=
name|acknowledgeCallback
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|this
operator|.
name|getMessageId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|ActiveMQMessage
name|msg
init|=
operator|(
name|ActiveMQMessage
operator|)
name|o
decl_stmt|;
name|MessageId
name|oMsg
init|=
name|msg
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
name|MessageId
name|thisMsg
init|=
name|this
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
return|return
name|thisMsg
operator|!=
literal|null
operator|&&
name|oMsg
operator|!=
literal|null
operator|&&
name|oMsg
operator|.
name|equals
argument_list|(
name|thisMsg
argument_list|)
return|;
block|}
specifier|public
name|void
name|acknowledge
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|acknowledgeCallback
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|acknowledgeCallback
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|clearBody
parameter_list|()
throws|throws
name|JMSException
block|{
name|setContent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|readOnlyBody
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getJMSMessageID
parameter_list|()
block|{
name|MessageId
name|messageId
init|=
name|this
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|messageId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|messageId
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Seems to be invalid because the parameter doesn't initialize MessageId instance variables ProducerId and      * ProducerSequenceId      *      * @param value      * @throws JMSException      */
specifier|public
name|void
name|setJMSMessageID
parameter_list|(
name|String
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|MessageId
name|id
init|=
operator|new
name|MessageId
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|this
operator|.
name|setMessageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
literal|"Invalid message id '"
operator|+
name|value
operator|+
literal|"', reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|setMessageId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This will create an object of MessageId. For it to be valid, the instance variable ProducerId and      * producerSequenceId must be initialized.      *      * @param producerId      * @param producerSequenceId      * @throws JMSException      */
specifier|public
name|void
name|setJMSMessageID
parameter_list|(
name|ProducerId
name|producerId
parameter_list|,
name|long
name|producerSequenceId
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageId
name|id
init|=
literal|null
decl_stmt|;
try|try
block|{
name|id
operator|=
operator|new
name|MessageId
argument_list|(
name|producerId
argument_list|,
name|producerSequenceId
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMessageId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
literal|"Invalid message id '"
operator|+
name|id
operator|+
literal|"', reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getJMSTimestamp
parameter_list|()
block|{
return|return
name|this
operator|.
name|getTimestamp
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSTimestamp
parameter_list|(
name|long
name|timestamp
parameter_list|)
block|{
name|this
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getJMSCorrelationID
parameter_list|()
block|{
return|return
name|this
operator|.
name|getCorrelationId
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSCorrelationID
parameter_list|(
name|String
name|correlationId
parameter_list|)
block|{
name|this
operator|.
name|setCorrelationId
argument_list|(
name|correlationId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getJMSCorrelationIDAsBytes
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|encodeString
argument_list|(
name|this
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setJMSCorrelationIDAsBytes
parameter_list|(
name|byte
index|[]
name|correlationId
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|setCorrelationId
argument_list|(
name|decodeString
argument_list|(
name|correlationId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|protected
name|String
name|decodeString
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Invalid UTF-8 encoding: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|static
specifier|protected
name|byte
index|[]
name|encodeString
parameter_list|(
name|String
name|data
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|data
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Invalid UTF-8 encoding: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Destination
name|getJMSReplyTo
parameter_list|()
block|{
return|return
name|this
operator|.
name|getReplyTo
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSReplyTo
parameter_list|(
name|Destination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|setReplyTo
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Destination
name|getJMSDestination
parameter_list|()
block|{
return|return
name|this
operator|.
name|getDestination
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSDestination
parameter_list|(
name|Destination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|setDestination
argument_list|(
name|ActiveMQDestination
operator|.
name|transform
argument_list|(
name|destination
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getJMSDeliveryMode
parameter_list|()
block|{
return|return
name|this
operator|.
name|isPersistent
argument_list|()
condition|?
name|DeliveryMode
operator|.
name|PERSISTENT
else|:
name|DeliveryMode
operator|.
name|NON_PERSISTENT
return|;
block|}
specifier|public
name|void
name|setJMSDeliveryMode
parameter_list|(
name|int
name|mode
parameter_list|)
block|{
name|this
operator|.
name|setPersistent
argument_list|(
name|mode
operator|==
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getJMSRedelivered
parameter_list|()
block|{
return|return
name|this
operator|.
name|isRedelivered
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSRedelivered
parameter_list|(
name|boolean
name|redelivered
parameter_list|)
block|{
name|this
operator|.
name|setRedelivered
argument_list|(
name|redelivered
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getJMSType
parameter_list|()
block|{
return|return
name|this
operator|.
name|getType
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getJMSExpiration
parameter_list|()
block|{
return|return
name|this
operator|.
name|getExpiration
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSExpiration
parameter_list|(
name|long
name|expiration
parameter_list|)
block|{
name|this
operator|.
name|setExpiration
argument_list|(
name|expiration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getJMSPriority
parameter_list|()
block|{
return|return
name|this
operator|.
name|getPriority
argument_list|()
return|;
block|}
specifier|public
name|void
name|setJMSPriority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
name|this
operator|.
name|setPriority
argument_list|(
operator|(
name|byte
operator|)
name|priority
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearProperties
parameter_list|()
block|{
name|super
operator|.
name|clearProperties
argument_list|()
expr_stmt|;
name|readOnlyProperties
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|propertyExists
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
return|return
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Enumeration
name|getPropertyNames
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
return|return
operator|new
name|Vector
argument_list|(
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
operator|.
name|elements
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
interface|interface
name|PropertySetter
block|{
specifier|public
name|void
name|set
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|MessageFormatException
function_decl|;
block|}
specifier|static
specifier|final
specifier|private
name|HashMap
name|JMS_PROPERTY_SETERS
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
static|static
block|{
name|JMS_PROPERTY_SETERS
operator|.
name|put
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|,
operator|new
name|PropertySetter
argument_list|()
block|{
specifier|public
name|void
name|set
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|MessageFormatException
block|{
name|Integer
name|rc
init|=
operator|(
name|Integer
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property JMSXDeliveryCount cannot be set from a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|message
operator|.
name|setRedeliveryCounter
argument_list|(
name|rc
operator|.
name|intValue
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_SETERS
operator|.
name|put
argument_list|(
literal|"JMSXGroupID"
argument_list|,
operator|new
name|PropertySetter
argument_list|()
block|{
specifier|public
name|void
name|set
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|MessageFormatException
block|{
name|String
name|rc
init|=
operator|(
name|String
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property JMSXGroupID cannot be set from a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|message
operator|.
name|setGroupID
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JMS_PROPERTY_SETERS
operator|.
name|put
argument_list|(
literal|"JMSXGroupSeq"
argument_list|,
operator|new
name|PropertySetter
argument_list|()
block|{
specifier|public
name|void
name|set
parameter_list|(
name|Message
name|message
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|MessageFormatException
block|{
name|Integer
name|rc
init|=
operator|(
name|Integer
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property JMSXGroupSeq cannot be set from a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
block|}
name|message
operator|.
name|setGroupSequence
argument_list|(
name|rc
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setObjectProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|checkReadOnlyProperties
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Property name cannot be empty or null"
argument_list|)
throw|;
block|}
name|checkValidObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|PropertySetter
name|setter
init|=
operator|(
name|PropertySetter
operator|)
name|JMS_PROPERTY_SETERS
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|setter
operator|!=
literal|null
condition|)
block|{
name|setter
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|this
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|checkValidObject
parameter_list|(
name|Object
name|value
parameter_list|)
throws|throws
name|MessageFormatException
block|{
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Boolean
operator|||
name|value
operator|instanceof
name|Byte
operator|||
name|value
operator|instanceof
name|Short
operator|||
name|value
operator|instanceof
name|Integer
operator|||
name|value
operator|instanceof
name|Long
operator|||
name|value
operator|instanceof
name|Float
operator|||
name|value
operator|instanceof
name|Double
operator|||
name|value
operator|instanceof
name|String
operator|||
name|value
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Only objectified primitive objects and String types are allowed"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getObjectProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Property name cannot be null"
argument_list|)
throw|;
block|}
comment|// PropertyExpression handles converting message headers to properties.
name|PropertyExpression
name|expression
init|=
operator|new
name|PropertyExpression
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|expression
operator|.
name|evaluate
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getBooleanProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Boolean
name|rc
init|=
operator|(
name|Boolean
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as a boolean"
argument_list|)
throw|;
block|}
return|return
name|rc
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|byte
name|getByteProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"property "
operator|+
name|name
operator|+
literal|" was null"
argument_list|)
throw|;
name|Byte
name|rc
init|=
operator|(
name|Byte
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as a byte"
argument_list|)
throw|;
block|}
return|return
name|rc
operator|.
name|byteValue
argument_list|()
return|;
block|}
specifier|public
name|short
name|getShortProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"property "
operator|+
name|name
operator|+
literal|" was null"
argument_list|)
throw|;
name|Short
name|rc
init|=
operator|(
name|Short
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Short
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as a short"
argument_list|)
throw|;
block|}
return|return
name|rc
operator|.
name|shortValue
argument_list|()
return|;
block|}
specifier|public
name|int
name|getIntProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"property "
operator|+
name|name
operator|+
literal|" was null"
argument_list|)
throw|;
name|Integer
name|rc
init|=
operator|(
name|Integer
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as an integer"
argument_list|)
throw|;
block|}
return|return
name|rc
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|long
name|getLongProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NumberFormatException
argument_list|(
literal|"property "
operator|+
name|name
operator|+
literal|" was null"
argument_list|)
throw|;
name|Long
name|rc
init|=
operator|(
name|Long
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Long
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as a long"
argument_list|)
throw|;
block|}
return|return
name|rc
operator|.
name|longValue
argument_list|()
return|;
block|}
specifier|public
name|float
name|getFloatProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"property "
operator|+
name|name
operator|+
literal|" was null"
argument_list|)
throw|;
name|Float
name|rc
init|=
operator|(
name|Float
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Float
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as a float"
argument_list|)
throw|;
block|}
return|return
name|rc
operator|.
name|floatValue
argument_list|()
return|;
block|}
specifier|public
name|double
name|getDoubleProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"property "
operator|+
name|name
operator|+
literal|" was null"
argument_list|)
throw|;
name|Double
name|rc
init|=
operator|(
name|Double
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|Double
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as a double"
argument_list|)
throw|;
block|}
return|return
name|rc
operator|.
name|doubleValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getStringProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|value
init|=
name|getObjectProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"JMSXUserID"
argument_list|)
condition|)
block|{
name|value
operator|=
name|getUserID
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|value
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|rc
init|=
operator|(
name|String
operator|)
name|TypeConversionSupport
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MessageFormatException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" was a "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" and cannot be read as a String"
argument_list|)
throw|;
block|}
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|setBooleanProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
name|value
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setByteProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
operator|new
name|Byte
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setShortProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|short
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
operator|new
name|Short
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setIntProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
operator|new
name|Integer
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLongProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
operator|new
name|Long
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFloatProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
operator|new
name|Float
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDoubleProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
operator|new
name|Double
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setStringProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|JMSException
block|{
name|setObjectProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkReadOnlyProperties
parameter_list|()
throws|throws
name|MessageNotWriteableException
block|{
if|if
condition|(
name|readOnlyProperties
condition|)
block|{
throw|throw
operator|new
name|MessageNotWriteableException
argument_list|(
literal|"Message properties are read-only"
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkReadOnlyBody
parameter_list|()
throws|throws
name|MessageNotWriteableException
block|{
if|if
condition|(
name|readOnlyBody
condition|)
block|{
throw|throw
operator|new
name|MessageNotWriteableException
argument_list|(
literal|"Message body is read-only"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
name|long
name|expireTime
init|=
name|this
operator|.
name|getExpiration
argument_list|()
decl_stmt|;
if|if
condition|(
name|expireTime
operator|>
literal|0
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|expireTime
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Callback
name|getAcknowledgeCallback
parameter_list|()
block|{
return|return
name|acknowledgeCallback
return|;
block|}
specifier|public
name|void
name|setAcknowledgeCallback
parameter_list|(
name|Callback
name|acknowledgeCallback
parameter_list|)
block|{
name|this
operator|.
name|acknowledgeCallback
operator|=
name|acknowledgeCallback
expr_stmt|;
block|}
comment|/**      * Send operation event listener.  Used to get the message ready to be sent.       */
specifier|public
name|void
name|onSend
parameter_list|()
block|{
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setReadOnlyProperties
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Response
name|visit
parameter_list|(
name|CommandVisitor
name|visitor
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|visitor
operator|.
name|processMessage
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

