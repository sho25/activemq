begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|DataStructure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|WireFormatInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequenceData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DataByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_comment
comment|/**  *   *   */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|OpenWireFormat
implements|implements
name|WireFormat
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_VERSION
init|=
name|CommandTypes
operator|.
name|PROTOCOL_STORE_VERSION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_WIRE_VERSION
init|=
name|CommandTypes
operator|.
name|PROTOCOL_VERSION
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_FRAME_SIZE
init|=
literal|100
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|//100 MB
specifier|static
specifier|final
name|byte
name|NULL_TYPE
init|=
name|CommandTypes
operator|.
name|NULL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MARSHAL_CACHE_SIZE
init|=
name|Short
operator|.
name|MAX_VALUE
operator|/
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MARSHAL_CACHE_FREE_SPACE
init|=
literal|100
decl_stmt|;
specifier|private
name|DataStreamMarshaller
name|dataMarshallers
index|[]
decl_stmt|;
specifier|private
name|int
name|version
decl_stmt|;
specifier|private
name|boolean
name|stackTraceEnabled
decl_stmt|;
specifier|private
name|boolean
name|tcpNoDelayEnabled
decl_stmt|;
specifier|private
name|boolean
name|cacheEnabled
decl_stmt|;
specifier|private
name|boolean
name|tightEncodingEnabled
decl_stmt|;
specifier|private
name|boolean
name|sizePrefixDisabled
decl_stmt|;
specifier|private
name|long
name|maxFrameSize
init|=
name|DEFAULT_MAX_FRAME_SIZE
decl_stmt|;
comment|// The following fields are used for value caching
specifier|private
name|short
name|nextMarshallCacheIndex
decl_stmt|;
specifier|private
name|short
name|nextMarshallCacheEvictionIndex
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|DataStructure
argument_list|,
name|Short
argument_list|>
name|marshallCacheMap
init|=
operator|new
name|HashMap
argument_list|<
name|DataStructure
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|DataStructure
name|marshallCache
index|[]
init|=
operator|new
name|DataStructure
index|[
name|MARSHAL_CACHE_SIZE
index|]
decl_stmt|;
specifier|private
name|DataStructure
name|unmarshallCache
index|[]
init|=
operator|new
name|DataStructure
index|[
name|MARSHAL_CACHE_SIZE
index|]
decl_stmt|;
specifier|private
name|DataByteArrayOutputStream
name|bytesOut
init|=
operator|new
name|DataByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|private
name|DataByteArrayInputStream
name|bytesIn
init|=
operator|new
name|DataByteArrayInputStream
argument_list|()
decl_stmt|;
specifier|private
name|WireFormatInfo
name|preferedWireFormatInfo
decl_stmt|;
specifier|public
name|OpenWireFormat
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_VERSION
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OpenWireFormat
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|setVersion
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|version
operator|^
operator|(
name|cacheEnabled
condition|?
literal|0x10000000
else|:
literal|0x20000000
operator|)
operator|^
operator|(
name|stackTraceEnabled
condition|?
literal|0x01000000
else|:
literal|0x02000000
operator|)
operator|^
operator|(
name|tightEncodingEnabled
condition|?
literal|0x00100000
else|:
literal|0x00200000
operator|)
operator|^
operator|(
name|sizePrefixDisabled
condition|?
literal|0x00010000
else|:
literal|0x00020000
operator|)
return|;
block|}
specifier|public
name|OpenWireFormat
name|copy
parameter_list|()
block|{
name|OpenWireFormat
name|answer
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|answer
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|answer
operator|.
name|stackTraceEnabled
operator|=
name|stackTraceEnabled
expr_stmt|;
name|answer
operator|.
name|tcpNoDelayEnabled
operator|=
name|tcpNoDelayEnabled
expr_stmt|;
name|answer
operator|.
name|cacheEnabled
operator|=
name|cacheEnabled
expr_stmt|;
name|answer
operator|.
name|tightEncodingEnabled
operator|=
name|tightEncodingEnabled
expr_stmt|;
name|answer
operator|.
name|sizePrefixDisabled
operator|=
name|sizePrefixDisabled
expr_stmt|;
name|answer
operator|.
name|preferedWireFormatInfo
operator|=
name|preferedWireFormatInfo
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OpenWireFormat
name|o
init|=
operator|(
name|OpenWireFormat
operator|)
name|object
decl_stmt|;
return|return
name|o
operator|.
name|stackTraceEnabled
operator|==
name|stackTraceEnabled
operator|&&
name|o
operator|.
name|cacheEnabled
operator|==
name|cacheEnabled
operator|&&
name|o
operator|.
name|version
operator|==
name|version
operator|&&
name|o
operator|.
name|tightEncodingEnabled
operator|==
name|tightEncodingEnabled
operator|&&
name|o
operator|.
name|sizePrefixDisabled
operator|==
name|sizePrefixDisabled
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OpenWireFormat{version="
operator|+
name|version
operator|+
literal|", cacheEnabled="
operator|+
name|cacheEnabled
operator|+
literal|", stackTraceEnabled="
operator|+
name|stackTraceEnabled
operator|+
literal|", tightEncodingEnabled="
operator|+
name|tightEncodingEnabled
operator|+
literal|", sizePrefixDisabled="
operator|+
name|sizePrefixDisabled
operator|+
literal|", maxFrameSize="
operator|+
name|maxFrameSize
operator|+
literal|"}"
return|;
comment|// return "OpenWireFormat{id="+id+",
comment|// tightEncodingEnabled="+tightEncodingEnabled+"}";
block|}
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
specifier|synchronized
name|ByteSequence
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|runMarshallCacheEvictionSweep
argument_list|()
expr_stmt|;
block|}
comment|//        MarshallAware ma = null;
comment|//        // If not using value caching, then the marshaled form is always the
comment|//        // same
comment|//        if (!cacheEnabled&& ((DataStructure)command).isMarshallAware()) {
comment|//            ma = (MarshallAware)command;
comment|//        }
name|ByteSequence
name|sequence
init|=
literal|null
decl_stmt|;
comment|// if( ma!=null ) {
comment|// sequence = ma.getCachedMarshalledForm(this);
comment|// }
if|if
condition|(
name|sequence
operator|==
literal|null
condition|)
block|{
name|int
name|size
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
name|DataStructure
name|c
init|=
operator|(
name|DataStructure
operator|)
name|command
decl_stmt|;
name|byte
name|type
init|=
name|c
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|type
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
argument_list|)
throw|;
block|}
if|if
condition|(
name|tightEncodingEnabled
condition|)
block|{
name|BooleanStream
name|bs
init|=
operator|new
name|BooleanStream
argument_list|()
decl_stmt|;
name|size
operator|+=
name|dsm
operator|.
name|tightMarshal1
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|size
operator|+=
name|bs
operator|.
name|marshalledSize
argument_list|()
expr_stmt|;
name|bytesOut
operator|.
name|restart
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|bytesOut
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|bytesOut
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|bs
operator|.
name|marshal
argument_list|(
name|bytesOut
argument_list|)
expr_stmt|;
name|dsm
operator|.
name|tightMarshal2
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|bytesOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|sequence
operator|=
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bytesOut
operator|.
name|restart
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|bytesOut
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// we don't know the final size
comment|// yet but write this here for
comment|// now.
block|}
name|bytesOut
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|dsm
operator|.
name|looseMarshal
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|bytesOut
argument_list|)
expr_stmt|;
name|sequence
operator|=
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|size
operator|=
name|sequence
operator|.
name|getLength
argument_list|()
operator|-
literal|4
expr_stmt|;
name|int
name|pos
init|=
name|sequence
operator|.
name|offset
decl_stmt|;
name|ByteSequenceData
operator|.
name|writeIntBig
argument_list|(
name|sequence
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|sequence
operator|.
name|offset
operator|=
name|pos
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|bytesOut
operator|.
name|restart
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bytesOut
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|bytesOut
operator|.
name|writeByte
argument_list|(
name|NULL_TYPE
argument_list|)
expr_stmt|;
name|sequence
operator|=
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
expr_stmt|;
block|}
comment|// if( ma!=null ) {
comment|// ma.setCachedMarshalledForm(this, sequence);
comment|// }
block|}
return|return
name|sequence
return|;
block|}
specifier|public
specifier|synchronized
name|Object
name|unmarshal
parameter_list|(
name|ByteSequence
name|sequence
parameter_list|)
throws|throws
name|IOException
block|{
name|bytesIn
operator|.
name|restart
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
comment|// DataInputStream dis = new DataInputStream(new
comment|// ByteArrayInputStream(sequence));
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|int
name|size
init|=
name|bytesIn
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sequence
operator|.
name|getLength
argument_list|()
operator|-
literal|4
operator|!=
name|size
condition|)
block|{
comment|// throw new IOException("Packet size does not match marshaled
comment|// size");
block|}
block|}
name|Object
name|command
init|=
name|doUnmarshal
argument_list|(
name|bytesIn
argument_list|)
decl_stmt|;
comment|// if( !cacheEnabled&& ((DataStructure)command).isMarshallAware() ) {
comment|// ((MarshallAware) command).setCachedMarshalledForm(this, sequence);
comment|// }
return|return
name|command
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|marshal
parameter_list|(
name|Object
name|o
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|runMarshallCacheEvictionSweep
argument_list|()
expr_stmt|;
block|}
name|int
name|size
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|DataStructure
name|c
init|=
operator|(
name|DataStructure
operator|)
name|o
decl_stmt|;
name|byte
name|type
init|=
name|c
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|type
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
argument_list|)
throw|;
block|}
if|if
condition|(
name|tightEncodingEnabled
condition|)
block|{
name|BooleanStream
name|bs
init|=
operator|new
name|BooleanStream
argument_list|()
decl_stmt|;
name|size
operator|+=
name|dsm
operator|.
name|tightMarshal1
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|size
operator|+=
name|bs
operator|.
name|marshalledSize
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|dataOut
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|bs
operator|.
name|marshal
argument_list|(
name|dataOut
argument_list|)
expr_stmt|;
name|dsm
operator|.
name|tightMarshal2
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|dataOut
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DataOutput
name|looseOut
init|=
name|dataOut
decl_stmt|;
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|bytesOut
operator|.
name|restart
argument_list|()
expr_stmt|;
name|looseOut
operator|=
name|bytesOut
expr_stmt|;
block|}
name|looseOut
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|dsm
operator|.
name|looseMarshal
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|looseOut
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|ByteSequence
name|sequence
init|=
name|bytesOut
operator|.
name|toByteSequence
argument_list|()
decl_stmt|;
name|dataOut
operator|.
name|writeInt
argument_list|(
name|sequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|dataOut
operator|.
name|write
argument_list|(
name|sequence
operator|.
name|getData
argument_list|()
argument_list|,
name|sequence
operator|.
name|getOffset
argument_list|()
argument_list|,
name|sequence
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|dataOut
operator|.
name|writeInt
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|dataOut
operator|.
name|writeByte
argument_list|(
name|NULL_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|DataInput
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInput
name|dataIn
init|=
name|dis
decl_stmt|;
if|if
condition|(
operator|!
name|sizePrefixDisabled
condition|)
block|{
name|int
name|size
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|maxFrameSize
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Frame size of "
operator|+
operator|(
name|size
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|)
operator|+
literal|" MB larger than max allowed "
operator|+
operator|(
name|maxFrameSize
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|)
operator|+
literal|" MB"
argument_list|)
throw|;
block|}
comment|// int size = dis.readInt();
comment|// byte[] data = new byte[size];
comment|// dis.readFully(data);
comment|// bytesIn.restart(data);
comment|// dataIn = bytesIn;
block|}
return|return
name|doUnmarshal
argument_list|(
name|dataIn
argument_list|)
return|;
block|}
comment|/**      * Used by NIO or AIO transports      */
specifier|public
name|int
name|tightMarshal1
parameter_list|(
name|Object
name|o
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|size
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|DataStructure
name|c
init|=
operator|(
name|DataStructure
operator|)
name|o
decl_stmt|;
name|byte
name|type
init|=
name|c
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|type
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|size
operator|+=
name|dsm
operator|.
name|tightMarshal1
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|bs
argument_list|)
expr_stmt|;
name|size
operator|+=
name|bs
operator|.
name|marshalledSize
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
comment|/**      * Used by NIO or AIO transports; note that the size is not written as part      * of this method.      */
specifier|public
name|void
name|tightMarshal2
parameter_list|(
name|Object
name|o
parameter_list|,
name|DataOutput
name|ds
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|runMarshallCacheEvictionSweep
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|DataStructure
name|c
init|=
operator|(
name|DataStructure
operator|)
name|o
decl_stmt|;
name|byte
name|type
init|=
name|c
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|type
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|ds
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|bs
operator|.
name|marshal
argument_list|(
name|ds
argument_list|)
expr_stmt|;
name|dsm
operator|.
name|tightMarshal2
argument_list|(
name|this
argument_list|,
name|c
argument_list|,
name|ds
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Allows you to dynamically switch the version of the openwire protocol      * being used.      *       * @param version      */
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|String
name|mfName
init|=
literal|"org.apache.activemq.openwire.v"
operator|+
name|version
operator|+
literal|".MarshallerFactory"
decl_stmt|;
name|Class
name|mfClass
decl_stmt|;
try|try
block|{
name|mfClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|mfName
argument_list|,
literal|false
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IllegalArgumentException
operator|)
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid version: "
operator|+
name|version
operator|+
literal|", could not load "
operator|+
name|mfName
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|Method
name|method
init|=
name|mfClass
operator|.
name|getMethod
argument_list|(
literal|"createMarshallerMap"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|OpenWireFormat
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|dataMarshallers
operator|=
operator|(
name|DataStreamMarshaller
index|[]
operator|)
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
name|this
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IllegalArgumentException
operator|)
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid version: "
operator|+
name|version
operator|+
literal|", "
operator|+
name|mfName
operator|+
literal|" does not properly implement the createMarshallerMap method."
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|Object
name|doUnmarshal
parameter_list|(
name|DataInput
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|dataType
init|=
name|dis
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|dataType
operator|!=
name|NULL_TYPE
condition|)
block|{
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|dataType
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|dataType
argument_list|)
throw|;
block|}
name|Object
name|data
init|=
name|dsm
operator|.
name|createObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tightEncodingEnabled
condition|)
block|{
name|BooleanStream
name|bs
init|=
operator|new
name|BooleanStream
argument_list|()
decl_stmt|;
name|bs
operator|.
name|unmarshal
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dsm
operator|.
name|tightUnmarshal
argument_list|(
name|this
argument_list|,
name|data
argument_list|,
name|dis
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dsm
operator|.
name|looseUnmarshal
argument_list|(
name|this
argument_list|,
name|data
argument_list|,
name|dis
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// public void debug(String msg) {
comment|// String t = (Thread.currentThread().getName()+" ").substring(0, 40);
comment|// System.out.println(t+": "+msg);
comment|// }
specifier|public
name|int
name|tightMarshalNestedObject1
parameter_list|(
name|DataStructure
name|o
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
name|bs
operator|.
name|writeBoolean
argument_list|(
name|o
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|o
operator|.
name|isMarshallAware
argument_list|()
condition|)
block|{
comment|// MarshallAware ma = (MarshallAware)o;
name|ByteSequence
name|sequence
init|=
literal|null
decl_stmt|;
comment|// sequence=ma.getCachedMarshalledForm(this);
name|bs
operator|.
name|writeBoolean
argument_list|(
name|sequence
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|sequence
operator|!=
literal|null
condition|)
block|{
return|return
literal|1
operator|+
name|sequence
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
name|byte
name|type
init|=
name|o
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|type
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
literal|1
operator|+
name|dsm
operator|.
name|tightMarshal1
argument_list|(
name|this
argument_list|,
name|o
argument_list|,
name|bs
argument_list|)
return|;
block|}
specifier|public
name|void
name|tightMarshalNestedObject2
parameter_list|(
name|DataStructure
name|o
parameter_list|,
name|DataOutput
name|ds
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
return|return;
block|}
name|byte
name|type
init|=
name|o
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
name|ds
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|isMarshallAware
argument_list|()
operator|&&
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
comment|// We should not be doing any caching
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Corrupted stream"
argument_list|)
throw|;
comment|// MarshallAware ma = (MarshallAware) o;
comment|// ByteSequence sequence=ma.getCachedMarshalledForm(this);
comment|// ds.write(sequence.getData(), sequence.getOffset(),
comment|// sequence.getLength());
block|}
else|else
block|{
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|type
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|dsm
operator|.
name|tightMarshal2
argument_list|(
name|this
argument_list|,
name|o
argument_list|,
name|ds
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DataStructure
name|tightUnmarshalNestedObject
parameter_list|(
name|DataInput
name|dis
parameter_list|,
name|BooleanStream
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|byte
name|dataType
init|=
name|dis
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|dataType
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|dataType
argument_list|)
throw|;
block|}
name|DataStructure
name|data
init|=
name|dsm
operator|.
name|createObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|isMarshallAware
argument_list|()
operator|&&
name|bs
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|dis
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|BooleanStream
name|bs2
init|=
operator|new
name|BooleanStream
argument_list|()
decl_stmt|;
name|bs2
operator|.
name|unmarshal
argument_list|(
name|dis
argument_list|)
expr_stmt|;
name|dsm
operator|.
name|tightUnmarshal
argument_list|(
name|this
argument_list|,
name|data
argument_list|,
name|dis
argument_list|,
name|bs2
argument_list|)
expr_stmt|;
comment|// TODO: extract the sequence from the dis and associate it.
comment|// MarshallAware ma = (MarshallAware)data
comment|// ma.setCachedMarshalledForm(this, sequence);
block|}
else|else
block|{
name|dsm
operator|.
name|tightUnmarshal
argument_list|(
name|this
argument_list|,
name|data
argument_list|,
name|dis
argument_list|,
name|bs
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|DataStructure
name|looseUnmarshalNestedObject
parameter_list|(
name|DataInput
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dis
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|byte
name|dataType
init|=
name|dis
operator|.
name|readByte
argument_list|()
decl_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|dataType
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|dataType
argument_list|)
throw|;
block|}
name|DataStructure
name|data
init|=
name|dsm
operator|.
name|createObject
argument_list|()
decl_stmt|;
name|dsm
operator|.
name|looseUnmarshal
argument_list|(
name|this
argument_list|,
name|data
argument_list|,
name|dis
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|looseMarshalNestedObject
parameter_list|(
name|DataStructure
name|o
parameter_list|,
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
name|dataOut
operator|.
name|writeBoolean
argument_list|(
name|o
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|byte
name|type
init|=
name|o
operator|.
name|getDataStructureType
argument_list|()
decl_stmt|;
name|dataOut
operator|.
name|writeByte
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|DataStreamMarshaller
name|dsm
init|=
operator|(
name|DataStreamMarshaller
operator|)
name|dataMarshallers
index|[
name|type
operator|&
literal|0xFF
index|]
decl_stmt|;
if|if
condition|(
name|dsm
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown data type: "
operator|+
name|type
argument_list|)
throw|;
block|}
name|dsm
operator|.
name|looseMarshal
argument_list|(
name|this
argument_list|,
name|o
argument_list|,
name|dataOut
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|runMarshallCacheEvictionSweep
parameter_list|()
block|{
comment|// Do we need to start evicting??
while|while
condition|(
name|marshallCacheMap
operator|.
name|size
argument_list|()
operator|>
name|marshallCache
operator|.
name|length
operator|-
name|MARSHAL_CACHE_FREE_SPACE
condition|)
block|{
name|marshallCacheMap
operator|.
name|remove
argument_list|(
name|marshallCache
index|[
name|nextMarshallCacheEvictionIndex
index|]
argument_list|)
expr_stmt|;
name|marshallCache
index|[
name|nextMarshallCacheEvictionIndex
index|]
operator|=
literal|null
expr_stmt|;
name|nextMarshallCacheEvictionIndex
operator|++
expr_stmt|;
if|if
condition|(
name|nextMarshallCacheEvictionIndex
operator|>=
name|marshallCache
operator|.
name|length
condition|)
block|{
name|nextMarshallCacheEvictionIndex
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Short
name|getMarshallCacheIndex
parameter_list|(
name|DataStructure
name|o
parameter_list|)
block|{
return|return
name|marshallCacheMap
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
block|}
specifier|public
name|Short
name|addToMarshallCache
parameter_list|(
name|DataStructure
name|o
parameter_list|)
block|{
name|short
name|i
init|=
name|nextMarshallCacheIndex
operator|++
decl_stmt|;
if|if
condition|(
name|nextMarshallCacheIndex
operator|>=
name|marshallCache
operator|.
name|length
condition|)
block|{
name|nextMarshallCacheIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|// We can only cache that item if there is space left.
if|if
condition|(
name|marshallCacheMap
operator|.
name|size
argument_list|()
operator|<
name|marshallCache
operator|.
name|length
condition|)
block|{
name|marshallCache
index|[
name|i
index|]
operator|=
name|o
expr_stmt|;
name|Short
name|index
init|=
operator|new
name|Short
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|marshallCacheMap
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|index
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
else|else
block|{
comment|// Use -1 to indicate that the value was not cached due to cache
comment|// being full.
return|return
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|setInUnmarshallCache
parameter_list|(
name|short
name|index
parameter_list|,
name|DataStructure
name|o
parameter_list|)
block|{
comment|// There was no space left in the cache, so we can't
comment|// put this in the cache.
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
name|unmarshallCache
index|[
name|index
index|]
operator|=
name|o
expr_stmt|;
block|}
specifier|public
name|DataStructure
name|getFromUnmarshallCache
parameter_list|(
name|short
name|index
parameter_list|)
block|{
return|return
name|unmarshallCache
index|[
name|index
index|]
return|;
block|}
specifier|public
name|void
name|setStackTraceEnabled
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|stackTraceEnabled
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStackTraceEnabled
parameter_list|()
block|{
return|return
name|stackTraceEnabled
return|;
block|}
specifier|public
name|boolean
name|isTcpNoDelayEnabled
parameter_list|()
block|{
return|return
name|tcpNoDelayEnabled
return|;
block|}
specifier|public
name|void
name|setTcpNoDelayEnabled
parameter_list|(
name|boolean
name|tcpNoDelayEnabled
parameter_list|)
block|{
name|this
operator|.
name|tcpNoDelayEnabled
operator|=
name|tcpNoDelayEnabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCacheEnabled
parameter_list|()
block|{
return|return
name|cacheEnabled
return|;
block|}
specifier|public
name|void
name|setCacheEnabled
parameter_list|(
name|boolean
name|cacheEnabled
parameter_list|)
block|{
name|this
operator|.
name|cacheEnabled
operator|=
name|cacheEnabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTightEncodingEnabled
parameter_list|()
block|{
return|return
name|tightEncodingEnabled
return|;
block|}
specifier|public
name|void
name|setTightEncodingEnabled
parameter_list|(
name|boolean
name|tightEncodingEnabled
parameter_list|)
block|{
name|this
operator|.
name|tightEncodingEnabled
operator|=
name|tightEncodingEnabled
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSizePrefixDisabled
parameter_list|()
block|{
return|return
name|sizePrefixDisabled
return|;
block|}
specifier|public
name|void
name|setSizePrefixDisabled
parameter_list|(
name|boolean
name|prefixPacketSize
parameter_list|)
block|{
name|this
operator|.
name|sizePrefixDisabled
operator|=
name|prefixPacketSize
expr_stmt|;
block|}
specifier|public
name|void
name|setPreferedWireFormatInfo
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|preferedWireFormatInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|WireFormatInfo
name|getPreferedWireFormatInfo
parameter_list|()
block|{
return|return
name|preferedWireFormatInfo
return|;
block|}
specifier|public
name|long
name|getMaxFrameSize
parameter_list|()
block|{
return|return
name|maxFrameSize
return|;
block|}
specifier|public
name|void
name|setMaxFrameSize
parameter_list|(
name|long
name|maxFrameSize
parameter_list|)
block|{
name|this
operator|.
name|maxFrameSize
operator|=
name|maxFrameSize
expr_stmt|;
block|}
specifier|public
name|void
name|renegotiateWireFormat
parameter_list|(
name|WireFormatInfo
name|info
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|preferedWireFormatInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Wireformat cannot not be renegotiated."
argument_list|)
throw|;
block|}
name|this
operator|.
name|setVersion
argument_list|(
name|min
argument_list|(
name|preferedWireFormatInfo
operator|.
name|getVersion
argument_list|()
argument_list|,
name|info
operator|.
name|getVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setVersion
argument_list|(
name|this
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|setMaxFrameSize
argument_list|(
name|min
argument_list|(
name|preferedWireFormatInfo
operator|.
name|getMaxFrameSize
argument_list|()
argument_list|,
name|info
operator|.
name|getMaxFrameSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMaxFrameSize
argument_list|(
name|this
operator|.
name|getMaxFrameSize
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|stackTraceEnabled
operator|=
name|info
operator|.
name|isStackTraceEnabled
argument_list|()
operator|&&
name|preferedWireFormatInfo
operator|.
name|isStackTraceEnabled
argument_list|()
expr_stmt|;
name|info
operator|.
name|setStackTraceEnabled
argument_list|(
name|this
operator|.
name|stackTraceEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|tcpNoDelayEnabled
operator|=
name|info
operator|.
name|isTcpNoDelayEnabled
argument_list|()
operator|&&
name|preferedWireFormatInfo
operator|.
name|isTcpNoDelayEnabled
argument_list|()
expr_stmt|;
name|info
operator|.
name|setTcpNoDelayEnabled
argument_list|(
name|this
operator|.
name|tcpNoDelayEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|cacheEnabled
operator|=
name|info
operator|.
name|isCacheEnabled
argument_list|()
operator|&&
name|preferedWireFormatInfo
operator|.
name|isCacheEnabled
argument_list|()
expr_stmt|;
name|info
operator|.
name|setCacheEnabled
argument_list|(
name|this
operator|.
name|cacheEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|tightEncodingEnabled
operator|=
name|info
operator|.
name|isTightEncodingEnabled
argument_list|()
operator|&&
name|preferedWireFormatInfo
operator|.
name|isTightEncodingEnabled
argument_list|()
expr_stmt|;
name|info
operator|.
name|setTightEncodingEnabled
argument_list|(
name|this
operator|.
name|tightEncodingEnabled
argument_list|)
expr_stmt|;
name|this
operator|.
name|sizePrefixDisabled
operator|=
name|info
operator|.
name|isSizePrefixDisabled
argument_list|()
operator|&&
name|preferedWireFormatInfo
operator|.
name|isSizePrefixDisabled
argument_list|()
expr_stmt|;
name|info
operator|.
name|setSizePrefixDisabled
argument_list|(
name|this
operator|.
name|sizePrefixDisabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheEnabled
condition|)
block|{
name|int
name|size
init|=
name|Math
operator|.
name|min
argument_list|(
name|preferedWireFormatInfo
operator|.
name|getCacheSize
argument_list|()
argument_list|,
name|info
operator|.
name|getCacheSize
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setCacheSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
name|size
operator|=
name|MARSHAL_CACHE_SIZE
expr_stmt|;
block|}
name|marshallCache
operator|=
operator|new
name|DataStructure
index|[
name|size
index|]
expr_stmt|;
name|unmarshallCache
operator|=
operator|new
name|DataStructure
index|[
name|size
index|]
expr_stmt|;
name|nextMarshallCacheIndex
operator|=
literal|0
expr_stmt|;
name|nextMarshallCacheEvictionIndex
operator|=
literal|0
expr_stmt|;
name|marshallCacheMap
operator|=
operator|new
name|HashMap
argument_list|<
name|DataStructure
argument_list|,
name|Short
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|marshallCache
operator|=
literal|null
expr_stmt|;
name|unmarshallCache
operator|=
literal|null
expr_stmt|;
name|nextMarshallCacheIndex
operator|=
literal|0
expr_stmt|;
name|nextMarshallCacheEvictionIndex
operator|=
literal|0
expr_stmt|;
name|marshallCacheMap
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|int
name|min
parameter_list|(
name|int
name|version1
parameter_list|,
name|int
name|version2
parameter_list|)
block|{
if|if
condition|(
name|version1
argument_list|<
name|version2
operator|&&
name|version1
argument_list|>
literal|0
operator|||
name|version2
operator|<=
literal|0
condition|)
block|{
return|return
name|version1
return|;
block|}
return|return
name|version2
return|;
block|}
specifier|protected
name|long
name|min
parameter_list|(
name|long
name|version1
parameter_list|,
name|long
name|version2
parameter_list|)
block|{
if|if
condition|(
name|version1
argument_list|<
name|version2
operator|&&
name|version1
argument_list|>
literal|0
operator|||
name|version2
operator|<=
literal|0
condition|)
block|{
return|return
name|version1
return|;
block|}
return|return
name|version2
return|;
block|}
block|}
end_class

end_unit

