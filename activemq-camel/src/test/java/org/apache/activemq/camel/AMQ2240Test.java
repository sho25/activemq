begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|AMQ2611Test
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
operator|.
name|component
operator|.
name|ActiveMQComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|CamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|ProducerTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|builder
operator|.
name|RouteBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|impl
operator|.
name|DefaultCamelContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ2240Test
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AMQ2240Test
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CamelContext
name|camelContext
init|=
literal|null
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|destroyCamelContext
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|camelContext
operator|!=
literal|null
condition|)
block|{
name|camelContext
operator|.
name|stop
argument_list|()
expr_stmt|;
name|camelContext
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadVMTransportOptionsJMSPrefix
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|String
name|vmUri
init|=
literal|"vm://localhost?"
operator|+
literal|"jms.redeliveryPolicy.maximumRedeliveries=0&"
operator|+
literal|"jms.redeliveryPolicy.initialRedeliveryDelay=500&"
operator|+
literal|"jms.useAsyncSend=false&jms.sendTimeout=ABC&"
operator|+
literal|"jms.maxXXXXReconnectAttempts=1&jms.timeout=3000"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"creating context with bad URI: "
operator|+
name|vmUri
argument_list|)
expr_stmt|;
name|ActiveMQComponent
name|amq
init|=
name|ActiveMQComponent
operator|.
name|activeMQComponent
argument_list|(
name|vmUri
argument_list|)
decl_stmt|;
name|amq
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getConnectionFactory
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should have received an exception from the bad URI."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadVMTransportOptionsBrokerPrefix
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|String
name|vmUri
init|=
literal|"vm://localhost?"
operator|+
literal|"broker.XXX=foo&broker.persistent=XXX&broker.useJmx=false"
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"creating context with bad URI: "
operator|+
name|vmUri
argument_list|)
expr_stmt|;
name|ActiveMQComponent
name|amq
init|=
name|ActiveMQComponent
operator|.
name|activeMQComponent
argument_list|(
name|vmUri
argument_list|)
decl_stmt|;
name|camelContext
operator|=
operator|new
name|DefaultCamelContext
argument_list|()
expr_stmt|;
name|camelContext
operator|.
name|addComponent
argument_list|(
literal|"activemq"
argument_list|,
name|amq
argument_list|)
expr_stmt|;
specifier|final
name|String
name|queueEndpointName
init|=
literal|"activemq:queuetest.Queue"
decl_stmt|;
name|camelContext
operator|.
name|addRoutes
argument_list|(
operator|new
name|RouteBuilder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
throws|throws
name|Exception
block|{
name|from
argument_list|(
name|queueEndpointName
argument_list|)
operator|.
name|bean
argument_list|(
name|Consumer
operator|.
name|class
argument_list|,
literal|"consume"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|camelContext
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|ProducerTemplate
name|producerTemplate
init|=
name|camelContext
operator|.
name|createProducerTemplate
argument_list|()
decl_stmt|;
name|producerTemplate
operator|.
name|sendBody
argument_list|(
name|queueEndpointName
argument_list|,
literal|"message"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have received an exception from the bad URI."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
block|}
end_class

end_unit

