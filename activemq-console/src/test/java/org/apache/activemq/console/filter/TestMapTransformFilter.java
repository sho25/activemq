begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|util
operator|.
name|AmqMessagesUtil
import|;
end_import

begin_class
specifier|public
class|class
name|TestMapTransformFilter
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|Object
index|[]
index|[]
name|testData
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
block|}
block|,
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
block|}
block|,
block|{
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
block|}
block|,
block|{
operator|new
name|double
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
block|}
block|,
block|{
operator|new
name|float
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
block|}
block|,
block|{
operator|new
name|char
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|}
block|}
block|,
block|{
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
block|}
block|,
block|{
operator|new
name|Byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|}
block|}
block|,
block|{
operator|new
name|Long
index|[]
block|{
literal|1L
block|,
literal|2L
block|,
literal|3L
block|,
literal|4L
block|}
block|}
block|,
block|{
operator|new
name|Double
index|[]
block|{
literal|1d
block|,
literal|2d
block|,
literal|3d
block|,
literal|4d
block|}
block|}
block|,
block|{
operator|new
name|Float
index|[]
block|{
literal|1f
block|,
literal|2f
block|,
literal|3f
block|,
literal|4f
block|}
block|}
block|,
block|{
operator|new
name|Character
index|[]
block|{
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|}
block|}
block|,
block|{
operator|new
name|String
index|[]
block|{
literal|"abc"
block|,
literal|"def"
block|}
block|}
block|,
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|, }
block|}
block|,
block|{
operator|new
name|int
index|[]
block|{,}
block|}
block|,
block|{
literal|"abc"
block|}
block|,
block|{
operator|(
name|byte
operator|)
literal|1
block|}
block|,
block|{
operator|(
name|int
operator|)
literal|1
block|}
block|,
block|{
operator|(
name|long
operator|)
literal|1
block|}
block|,
block|{
operator|(
name|double
operator|)
literal|1d
block|}
block|,
block|{
operator|(
name|float
operator|)
literal|1f
block|}
block|,
block|{
operator|(
name|char
operator|)
literal|'1'
block|}
block|,      }
decl_stmt|;
specifier|public
name|void
name|testFetDisplayString
parameter_list|()
block|{
name|MapTransformFilter
name|filter
init|=
operator|new
name|MapTransformFilter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|objectArray
range|:
name|testData
control|)
block|{
name|filter
operator|.
name|getDisplayString
argument_list|(
name|objectArray
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testOriginaDest
parameter_list|()
throws|throws
name|Exception
block|{
name|MapTransformFilter
name|filter
init|=
operator|new
name|MapTransformFilter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ActiveMQMessage
name|mqMessage
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|mqMessage
operator|.
name|setOriginalDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"O"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|transformToMap
argument_list|(
name|mqMessage
argument_list|)
operator|.
name|containsKey
argument_list|(
name|AmqMessagesUtil
operator|.
name|JMS_MESSAGE_CUSTOM_PREFIX
operator|+
literal|"OriginalDestination"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

