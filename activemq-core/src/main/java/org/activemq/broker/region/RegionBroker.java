begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveSubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|memory
operator|.
name|UsageManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|store
operator|.
name|memory
operator|.
name|MemoryPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_comment
comment|/**  * Routes Broker operations to the correct messaging regions for processing.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|RegionBroker
implements|implements
name|Broker
block|{
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|brokerIdGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Region
name|queueRegion
decl_stmt|;
specifier|private
specifier|final
name|Region
name|topicRegion
decl_stmt|;
specifier|private
specifier|final
name|Region
name|tempQueueRegion
decl_stmt|;
specifier|private
specifier|final
name|Region
name|tempTopicRegion
decl_stmt|;
specifier|protected
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
operator|new
name|DestinationStatistics
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
name|connections
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArraySet
name|destinations
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|sequenceGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
name|BrokerId
name|brokerId
decl_stmt|;
specifier|private
name|String
name|brokerName
decl_stmt|;
specifier|public
name|RegionBroker
parameter_list|(
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|UsageManager
name|memoryManager
parameter_list|,
name|PersistenceAdapter
name|adapter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|taskRunnerFactory
argument_list|,
name|memoryManager
argument_list|,
name|createDefaultPersistenceAdapter
argument_list|(
name|memoryManager
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RegionBroker
parameter_list|(
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|UsageManager
name|memoryManager
parameter_list|,
name|PersistenceAdapter
name|adapter
parameter_list|,
name|PolicyMap
name|policyMap
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|sequenceGenerator
operator|.
name|setLastSequenceId
argument_list|(
name|adapter
operator|.
name|getLastMessageBrokerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|queueRegion
operator|=
name|createQueueRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|adapter
argument_list|,
name|policyMap
argument_list|)
expr_stmt|;
name|topicRegion
operator|=
name|createTopicRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|adapter
argument_list|,
name|policyMap
argument_list|)
expr_stmt|;
name|tempQueueRegion
operator|=
name|createTempQueueRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|)
expr_stmt|;
name|tempTopicRegion
operator|=
name|createTempTopicRegion
argument_list|(
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Region
name|createTempTopicRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
return|return
operator|new
name|TempTopicRegion
argument_list|(
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createTempQueueRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|)
block|{
return|return
operator|new
name|TempQueueRegion
argument_list|(
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createTopicRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|PersistenceAdapter
name|adapter
parameter_list|,
name|PolicyMap
name|policyMap
parameter_list|)
block|{
return|return
operator|new
name|TopicRegion
argument_list|(
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|adapter
argument_list|,
name|policyMap
argument_list|)
return|;
block|}
specifier|protected
name|Region
name|createQueueRegion
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|PersistenceAdapter
name|adapter
parameter_list|,
name|PolicyMap
name|policyMap
parameter_list|)
block|{
return|return
operator|new
name|QueueRegion
argument_list|(
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|adapter
argument_list|,
name|policyMap
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|PersistenceAdapter
name|createDefaultPersistenceAdapter
parameter_list|(
name|UsageManager
name|memoryManager
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MemoryPersistenceAdapter
argument_list|()
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{     }
specifier|public
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|connections
operator|.
name|add
argument_list|(
name|context
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Throwable
block|{
name|connections
operator|.
name|remove
argument_list|(
name|context
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Connection
index|[]
name|getClients
parameter_list|()
throws|throws
name|Throwable
block|{
name|ArrayList
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|connections
argument_list|)
decl_stmt|;
name|Connection
name|rc
index|[]
init|=
operator|new
name|Connection
index|[
name|l
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|l
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|Destination
name|addDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|destinations
operator|.
name|contains
argument_list|(
name|destination
argument_list|)
condition|)
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Destination already exists: "
operator|+
name|destination
argument_list|)
throw|;
name|Destination
name|answer
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|answer
operator|=
name|queueRegion
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|answer
operator|=
name|topicRegion
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|answer
operator|=
name|tempQueueRegion
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|answer
operator|=
name|tempTopicRegion
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|)
expr_stmt|;
break|break;
default|default:
name|throwUnknownDestinationType
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|destinations
operator|.
name|add
argument_list|(
name|destination
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|public
name|void
name|removeDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
operator|!
name|destinations
operator|.
name|contains
argument_list|(
name|destination
argument_list|)
condition|)
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Destination does not exist: "
operator|+
name|destination
argument_list|)
throw|;
switch|switch
condition|(
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|queueRegion
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|topicRegion
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|tempQueueRegion
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|tempTopicRegion
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
break|break;
default|default:
name|throwUnknownDestinationType
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
name|destinations
operator|.
name|remove
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ActiveMQDestination
index|[]
name|getDestinations
parameter_list|()
throws|throws
name|Throwable
block|{
name|ArrayList
name|l
init|=
operator|new
name|ArrayList
argument_list|(
name|destinations
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|rc
index|[]
init|=
operator|new
name|ActiveMQDestination
index|[
name|l
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|l
operator|.
name|toArray
argument_list|(
name|rc
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|addSession
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|SessionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{     }
specifier|public
name|void
name|removeSession
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|SessionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{     }
specifier|public
name|void
name|addProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{     }
specifier|public
name|void
name|removeProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{     }
specifier|public
name|void
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|queueRegion
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|topicRegion
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|tempQueueRegion
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|tempTopicRegion
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
default|default:
name|throwUnknownDestinationType
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|ActiveMQDestination
name|destination
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|queueRegion
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|topicRegion
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|tempQueueRegion
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|tempTopicRegion
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
break|break;
default|default:
name|throwUnknownDestinationType
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|RemoveSubscriptionInfo
name|info
parameter_list|)
throws|throws
name|Throwable
block|{
name|topicRegion
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|send
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Throwable
block|{
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|setBrokerSequenceId
argument_list|(
name|sequenceGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveMQDestination
name|destination
init|=
name|message
operator|.
name|getDestination
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|queueRegion
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|topicRegion
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|tempQueueRegion
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|tempTopicRegion
operator|.
name|send
argument_list|(
name|context
argument_list|,
name|message
argument_list|)
expr_stmt|;
break|break;
default|default:
name|throwUnknownDestinationType
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Throwable
block|{
name|ActiveMQDestination
name|destination
init|=
name|ack
operator|.
name|getDestination
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|destination
operator|.
name|getDestinationType
argument_list|()
condition|)
block|{
case|case
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
case|:
name|queueRegion
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
case|:
name|topicRegion
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_QUEUE_TYPE
case|:
name|tempQueueRegion
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
break|break;
case|case
name|ActiveMQDestination
operator|.
name|TEMP_TOPIC_TYPE
case|:
name|tempTopicRegion
operator|.
name|acknowledge
argument_list|(
name|context
argument_list|,
name|ack
argument_list|)
expr_stmt|;
break|break;
default|default:
name|throwUnknownDestinationType
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TransactionId
index|[]
name|getPreparedTransactions
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
specifier|public
name|int
name|prepareTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|forgetTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|transactionId
parameter_list|)
throws|throws
name|Throwable
block|{
throw|throw
operator|new
name|IllegalAccessException
argument_list|(
literal|"Transaction operation not implemented by this broker."
argument_list|)
throw|;
block|}
specifier|public
name|void
name|gc
parameter_list|()
block|{
name|queueRegion
operator|.
name|gc
argument_list|()
expr_stmt|;
name|topicRegion
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BrokerId
name|getBrokerId
parameter_list|()
block|{
if|if
condition|(
name|brokerId
operator|==
literal|null
condition|)
block|{
comment|// TODO: this should persist the broker id so that subsequent startup
comment|// uses the same broker id.
name|brokerId
operator|=
operator|new
name|BrokerId
argument_list|(
name|brokerIdGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|brokerId
return|;
block|}
specifier|public
name|void
name|setBrokerId
parameter_list|(
name|BrokerId
name|brokerId
parameter_list|)
block|{
name|this
operator|.
name|brokerId
operator|=
name|brokerId
expr_stmt|;
block|}
specifier|public
name|String
name|getBrokerName
parameter_list|()
block|{
if|if
condition|(
name|brokerName
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|brokerName
operator|=
name|java
operator|.
name|net
operator|.
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|brokerName
operator|=
literal|"localhost"
expr_stmt|;
block|}
block|}
return|return
name|brokerName
return|;
block|}
specifier|public
name|void
name|setBrokerName
parameter_list|(
name|String
name|brokerName
parameter_list|)
block|{
name|this
operator|.
name|brokerName
operator|=
name|brokerName
expr_stmt|;
block|}
specifier|public
name|DestinationStatistics
name|getDestinationStatistics
parameter_list|()
block|{
return|return
name|destinationStatistics
return|;
block|}
specifier|protected
name|void
name|throwUnknownDestinationType
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
throw|throw
operator|new
name|JMSException
argument_list|(
literal|"Unknown destination type: "
operator|+
name|destination
operator|.
name|getDestinationType
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

