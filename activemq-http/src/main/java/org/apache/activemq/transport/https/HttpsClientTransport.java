begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * * Licensed to the Apache Software Foundation (ASF) under one or more * contributor license agreements.  See the NOTICE file distributed with * this work for additional information regarding copyright ownership. * The ASF licenses this file to You under the Apache License, Version 2.0 * (the "License"); you may not use this file except in compliance with * the License.  You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|https
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|http
operator|.
name|HttpClientTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|util
operator|.
name|TextWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|scheme
operator|.
name|Scheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|scheme
operator|.
name|SchemeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|conn
operator|.
name|PoolingClientConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_class
specifier|public
class|class
name|HttpsClientTransport
extends|extends
name|HttpClientTransport
block|{
specifier|public
name|HttpsClientTransport
parameter_list|(
name|TextWireFormat
name|wireFormat
parameter_list|,
name|URI
name|remoteUrl
parameter_list|)
block|{
name|super
argument_list|(
name|wireFormat
argument_list|,
name|remoteUrl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ClientConnectionManager
name|createClientConnectionManager
parameter_list|()
block|{
name|PoolingClientConnectionManager
name|connectionManager
init|=
operator|new
name|PoolingClientConnectionManager
argument_list|(
name|createSchemeRegistry
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|connectionManager
return|;
block|}
specifier|private
name|SchemeRegistry
name|createSchemeRegistry
parameter_list|()
block|{
name|SchemeRegistry
name|schemeRegistry
init|=
operator|new
name|SchemeRegistry
argument_list|()
decl_stmt|;
try|try
block|{
comment|// register the default socket factory so that it looks at the javax.net.ssl.keyStore,
comment|// javax.net.ssl.trustStore, etc, properties by default
name|SSLSocketFactory
name|sslSocketFactory
init|=
operator|new
name|SSLSocketFactory
argument_list|(
operator|(
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
operator|)
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
argument_list|,
name|SSLSocketFactory
operator|.
name|BROWSER_COMPATIBLE_HOSTNAME_VERIFIER
argument_list|)
decl_stmt|;
name|schemeRegistry
operator|.
name|register
argument_list|(
operator|new
name|Scheme
argument_list|(
literal|"https"
argument_list|,
name|getRemoteUrl
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|sslSocketFactory
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|schemeRegistry
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failure trying to create scheme registry"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

