begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerInvocationHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|BlobMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|EmbeddedBrokerTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|BaseDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|SharedDeadLetterStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTempQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A test case of the various MBeans in ActiveMQ. If you want to look at the  * various MBeans after the test has been run then run this test case as a  * command line application.  */
end_comment

begin_class
specifier|public
class|class
name|MBeanTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MBeanTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|waitForKeyPress
decl_stmt|;
specifier|protected
name|MBeanServer
name|mbeanServer
decl_stmt|;
specifier|protected
name|String
name|domain
init|=
literal|"org.apache.activemq"
decl_stmt|;
specifier|protected
name|String
name|clientID
init|=
literal|"foo"
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|boolean
name|transacted
decl_stmt|;
specifier|protected
name|int
name|authMode
init|=
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|2
operator|*
name|BaseDestination
operator|.
name|MAX_PAGE_SIZE
decl_stmt|;
specifier|final
specifier|static
name|String
name|QUEUE_WITH_OPTIONS
init|=
literal|"QueueWithOptions"
decl_stmt|;
comment|/**      * When you run this test case from the command line it will pause before      * terminating so that you can look at the MBeans state for debugging      * purposes.      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|waitForKeyPress
operator|=
literal|true
expr_stmt|;
name|TestRunner
operator|.
name|run
argument_list|(
name|MBeanTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectors
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"openwire URL port doesn't equal bind Address"
argument_list|,
operator|new
name|URI
argument_list|(
name|broker
operator|.
name|getTransportConnectorByType
argument_list|(
literal|"tcp"
argument_list|)
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|,
operator|new
name|URI
argument_list|(
name|this
operator|.
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMBeans
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
comment|// test all the various MBeans now we have a producer, consumer and
comment|// messages on a queue
name|assertSendViaMBean
argument_list|()
expr_stmt|;
name|assertSendCsnvViaMBean
argument_list|()
expr_stmt|;
name|assertQueueBrowseWorks
argument_list|()
expr_stmt|;
name|assertCreateAndDestroyDurableSubscriptions
argument_list|()
expr_stmt|;
name|assertConsumerCounts
argument_list|()
expr_stmt|;
name|assertProducerCounts
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testMoveMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeData
index|[]
name|compdatalist
init|=
name|queue
operator|.
name|browse
argument_list|()
decl_stmt|;
name|int
name|initialQueueSize
init|=
name|compdatalist
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|initialQueueSize
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"There is no message in the queue:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|echo
argument_list|(
literal|"Current queue size: "
operator|+
name|initialQueueSize
argument_list|)
expr_stmt|;
block|}
name|int
name|messageCount
init|=
name|initialQueueSize
decl_stmt|;
name|String
index|[]
name|messageIDs
init|=
operator|new
name|String
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|CompositeData
name|cdata
init|=
name|compdatalist
index|[
name|i
index|]
decl_stmt|;
name|String
name|messageID
init|=
operator|(
name|String
operator|)
name|cdata
operator|.
name|get
argument_list|(
literal|"JMSMessageID"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have a message ID for message "
operator|+
name|i
argument_list|,
name|messageID
argument_list|)
expr_stmt|;
name|messageIDs
index|[
name|i
index|]
operator|=
name|messageID
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"dest has some memory usage"
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|echo
argument_list|(
literal|"About to move "
operator|+
name|messageCount
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
name|String
name|newDestination
init|=
name|getSecondDestinationString
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|messageID
range|:
name|messageIDs
control|)
block|{
comment|//echo("Moving message: " + messageID);
name|queue
operator|.
name|moveMessageTo
argument_list|(
name|messageID
argument_list|,
name|newDestination
argument_list|)
expr_stmt|;
block|}
name|echo
argument_list|(
literal|"Now browsing the queue"
argument_list|)
expr_stmt|;
name|compdatalist
operator|=
name|queue
operator|.
name|browse
argument_list|()
expr_stmt|;
name|int
name|actualCount
init|=
name|compdatalist
operator|.
name|length
decl_stmt|;
name|echo
argument_list|(
literal|"Current queue size: "
operator|+
name|actualCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should now have empty queue but was"
argument_list|,
name|initialQueueSize
operator|-
name|messageCount
argument_list|,
name|actualCount
argument_list|)
expr_stmt|;
name|echo
argument_list|(
literal|"Now browsing the second queue"
argument_list|)
expr_stmt|;
name|queueViewMBeanName
operator|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|newDestination
argument_list|)
expr_stmt|;
name|QueueViewMBean
name|queueNew
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|newQueuesize
init|=
name|queueNew
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|echo
argument_list|(
literal|"Second queue size: "
operator|+
name|newQueuesize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of messages "
argument_list|,
name|messageCount
argument_list|,
name|newQueuesize
argument_list|)
expr_stmt|;
comment|// check memory usage migration
name|assertTrue
argument_list|(
literal|"new dest has some memory usage"
argument_list|,
name|queueNew
operator|.
name|getMemoryPercentUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"old dest has no memory usage"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"use cache"
argument_list|,
name|queueNew
operator|.
name|isUseCache
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"cache enabled"
argument_list|,
name|queueNew
operator|.
name|isCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"no forwards"
argument_list|,
literal|0
argument_list|,
name|queueNew
operator|.
name|getForwardCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addQueue
argument_list|(
name|getDestinationString
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|msg1
init|=
name|queue
operator|.
name|sendTextMessage
argument_list|(
literal|"message 1"
argument_list|)
decl_stmt|;
name|String
name|msg2
init|=
name|queue
operator|.
name|sendTextMessage
argument_list|(
literal|"message 2"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|removeMessage
argument_list|(
name|msg2
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
name|createDestination
argument_list|()
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg1
argument_list|,
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|msg3
init|=
name|queue
operator|.
name|sendTextMessage
argument_list|(
literal|"message 3"
argument_list|)
decl_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg3
argument_list|,
name|message
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queueName
init|=
literal|"TEST"
decl_stmt|;
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|queueName
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|queue
operator|.
name|sendTextMessage
argument_list|(
literal|"message 1"
argument_list|)
expr_stmt|;
name|queue
operator|.
name|sendTextMessage
argument_list|(
literal|"message 2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|broker
operator|.
name|getTotalMessageCount
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker
operator|.
name|getTotalMessageCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRetryMessages
parameter_list|()
throws|throws
name|Exception
block|{
comment|// lets speed up redelivery
name|ActiveMQConnectionFactory
name|factory
init|=
operator|(
name|ActiveMQConnectionFactory
operator|)
name|connectionFactory
decl_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setCollisionAvoidancePercent
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setMaximumRedeliveries
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setInitialRedeliveryDelay
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setUseCollisionAvoidance
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setUseExponentialBackOff
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getRedeliveryPolicy
argument_list|()
operator|.
name|setBackOffMultiplier
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|initialQueueSize
init|=
name|queue
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|echo
argument_list|(
literal|"current queue size: "
operator|+
name|initialQueueSize
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"dest has some memory usage"
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// lets create a duff consumer which keeps rolling back...
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|SESSION_TRANSACTED
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|getDestinationString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
while|while
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|echo
argument_list|(
literal|"Message: "
operator|+
name|message
operator|.
name|getJMSMessageID
argument_list|()
operator|+
literal|" redelivered "
operator|+
name|message
operator|.
name|getJMSRedelivered
argument_list|()
operator|+
literal|" counter "
operator|+
name|message
operator|.
name|getObjectProperty
argument_list|(
literal|"JMSXDeliveryCount"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// now lets get the dead letter queue
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ObjectName
name|dlqQueueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|SharedDeadLetterStrategy
operator|.
name|DEFAULT_DEAD_LETTER_QUEUE_NAME
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|dlq
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|dlqQueueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|initialDlqSize
init|=
name|dlq
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|CompositeData
index|[]
name|compdatalist
init|=
name|dlq
operator|.
name|browse
argument_list|()
decl_stmt|;
name|int
name|dlqQueueSize
init|=
name|compdatalist
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|dlqQueueSize
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"There are no messages in the queue:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|echo
argument_list|(
literal|"Current DLQ queue size: "
operator|+
name|dlqQueueSize
argument_list|)
expr_stmt|;
block|}
name|int
name|messageCount
init|=
name|dlqQueueSize
decl_stmt|;
name|String
index|[]
name|messageIDs
init|=
operator|new
name|String
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|CompositeData
name|cdata
init|=
name|compdatalist
index|[
name|i
index|]
decl_stmt|;
name|String
name|messageID
init|=
operator|(
name|String
operator|)
name|cdata
operator|.
name|get
argument_list|(
literal|"JMSMessageID"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have a message ID for message "
operator|+
name|i
argument_list|,
name|messageID
argument_list|)
expr_stmt|;
name|messageIDs
index|[
name|i
index|]
operator|=
name|messageID
expr_stmt|;
block|}
name|int
name|dlqMemUsage
init|=
name|dlq
operator|.
name|getMemoryPercentUsage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"dlq has some memory usage"
argument_list|,
name|dlqMemUsage
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dest has no memory usage"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|echo
argument_list|(
literal|"About to retry "
operator|+
name|messageCount
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|messageID
range|:
name|messageIDs
control|)
block|{
name|echo
argument_list|(
literal|"Retrying message: "
operator|+
name|messageID
argument_list|)
expr_stmt|;
name|dlq
operator|.
name|retryMessage
argument_list|(
name|messageID
argument_list|)
expr_stmt|;
block|}
name|long
name|queueSize
init|=
name|queue
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|compdatalist
operator|=
name|queue
operator|.
name|browse
argument_list|()
expr_stmt|;
name|int
name|actualCount
init|=
name|compdatalist
operator|.
name|length
decl_stmt|;
name|echo
argument_list|(
literal|"Orginal queue size is now "
operator|+
name|queueSize
argument_list|)
expr_stmt|;
name|echo
argument_list|(
literal|"Original browse queue size: "
operator|+
name|actualCount
argument_list|)
expr_stmt|;
name|long
name|dlqSize
init|=
name|dlq
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|echo
argument_list|(
literal|"DLQ size: "
operator|+
name|dlqSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DLQ size"
argument_list|,
name|initialDlqSize
operator|-
name|messageCount
argument_list|,
name|dlqSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"queue size"
argument_list|,
name|initialQueueSize
argument_list|,
name|queueSize
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"browse queue size"
argument_list|,
name|initialQueueSize
argument_list|,
name|actualCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dest has some memory usage"
argument_list|,
name|dlqMemUsage
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMoveMessagesBySelector
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|newDestination
init|=
name|getSecondDestinationString
argument_list|()
decl_stmt|;
name|queue
operator|.
name|moveMatchingMessagesTo
argument_list|(
literal|"counter> 2"
argument_list|,
name|newDestination
argument_list|)
expr_stmt|;
name|queueViewMBeanName
operator|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|newDestination
argument_list|)
expr_stmt|;
name|queue
operator|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|movedSize
init|=
name|MESSAGE_COUNT
operator|-
literal|3
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of messages "
argument_list|,
name|movedSize
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lets remove them by selector
name|queue
operator|.
name|removeMatchingMessages
argument_list|(
literal|"counter> 2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have no more messages in the queue: "
operator|+
name|queueViewMBeanName
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dest has no memory usage"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCopyMessagesBySelector
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|newDestination
init|=
name|getSecondDestinationString
argument_list|()
decl_stmt|;
name|long
name|queueSize
init|=
name|queue
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|queueSize
operator|>
literal|0
argument_list|)
expr_stmt|;
name|queue
operator|.
name|copyMatchingMessagesTo
argument_list|(
literal|"counter> 2"
argument_list|,
name|newDestination
argument_list|)
expr_stmt|;
name|queueViewMBeanName
operator|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|newDestination
argument_list|)
expr_stmt|;
name|queue
operator|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Queue: "
operator|+
name|queueViewMBeanName
operator|+
literal|" now has: "
operator|+
name|queue
operator|.
name|getQueueSize
argument_list|()
operator|+
literal|" message(s)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected messages in a queue: "
operator|+
name|queueViewMBeanName
argument_list|,
name|MESSAGE_COUNT
operator|-
literal|3
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// now lets remove them by selector
name|queue
operator|.
name|removeMatchingMessages
argument_list|(
literal|"counter> 2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have no more messages in the queue: "
operator|+
name|queueViewMBeanName
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dest has no memory usage"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateDestinationWithSpacesAtEnds
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"broker is not a slave"
argument_list|,
operator|!
name|broker
operator|.
name|isSlave
argument_list|()
argument_list|)
expr_stmt|;
comment|// create 2 topics
name|broker
operator|.
name|addTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|"1 "
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addTopic
argument_list|(
literal|" "
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addTopic
argument_list|(
literal|" "
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"3 "
argument_list|)
expr_stmt|;
name|assertNotRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"1 "
argument_list|)
expr_stmt|;
name|assertNotRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName= "
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|assertNotRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName= "
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"3 "
argument_list|)
expr_stmt|;
name|ObjectName
name|topicObjName1
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|ObjectName
name|topicObjName2
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|ObjectName
name|topicObjName3
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"3"
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|topic1
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|topicObjName1
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|topic2
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|topicObjName2
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|topic3
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|topicObjName3
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic3 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic3
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|topicName
init|=
name|getDestinationString
argument_list|()
decl_stmt|;
name|String
name|selector
init|=
literal|null
decl_stmt|;
comment|// create 1 subscriber for each topic
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic1.subscriber1"
argument_list|,
name|topicName
operator|+
literal|"1"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic2.subscriber1"
argument_list|,
name|topicName
operator|+
literal|"2"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic3.subscriber1"
argument_list|,
name|topicName
operator|+
literal|"3"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic3 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic3
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertSendViaMBean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queueName
init|=
name|getDestinationString
argument_list|()
operator|+
literal|".SendMBBean"
decl_stmt|;
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|echo
argument_list|(
literal|"Create QueueView MBean..."
argument_list|)
expr_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|queueName
argument_list|)
decl_stmt|;
name|echo
argument_list|(
literal|"Create QueueView MBean..."
argument_list|)
expr_stmt|;
name|QueueViewMBean
name|proxy
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|purge
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|body
init|=
literal|"message:"
operator|+
name|i
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"JMSCorrelationID"
argument_list|,
literal|"MyCorrId"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"JMSDeliveryMode"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"JMSXGroupID"
argument_list|,
literal|"MyGroupID"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"JMSXGroupSeq"
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"JMSPriority"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"JMSType"
argument_list|,
literal|"MyType"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"MyHeader"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"MyStringHeader"
argument_list|,
literal|"StringHeader"
operator|+
name|i
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|sendTextMessage
argument_list|(
name|headers
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
name|browseAndVerify
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|browseAndVerify
parameter_list|(
name|QueueViewMBean
name|proxy
parameter_list|)
throws|throws
name|Exception
block|{
name|browseAndVerifyTypes
argument_list|(
name|proxy
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
name|void
name|browseAndVerifyTypes
parameter_list|(
name|QueueViewMBean
name|proxy
parameter_list|,
name|boolean
name|allStrings
parameter_list|)
throws|throws
name|Exception
block|{
name|CompositeData
index|[]
name|compdatalist
init|=
name|proxy
operator|.
name|browse
argument_list|()
decl_stmt|;
if|if
condition|(
name|compdatalist
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"There is no message in the queue:"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compdatalist
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CompositeData
name|cdata
init|=
name|compdatalist
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|echo
argument_list|(
literal|"Columns: "
operator|+
name|cdata
operator|.
name|getCompositeType
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"JMSCorrelationID"
argument_list|,
literal|"MyCorrId"
argument_list|)
expr_stmt|;
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"JMSPriority"
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"JMSType"
argument_list|,
literal|"MyType"
argument_list|)
expr_stmt|;
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"JMSCorrelationID"
argument_list|,
literal|"MyCorrId"
argument_list|)
expr_stmt|;
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"JMSDeliveryMode"
argument_list|,
literal|"NON-PERSISTENT"
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"{MyStringHeader=StringHeader"
operator|+
name|i
operator|+
literal|", MyHeader="
operator|+
name|i
operator|+
literal|"}"
decl_stmt|;
comment|// The order of the properties is different when using the ibm jdk.
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"IBM Corporation"
argument_list|)
condition|)
block|{
name|expected
operator|=
literal|"{MyHeader="
operator|+
name|i
operator|+
literal|", MyStringHeader=StringHeader"
operator|+
name|i
operator|+
literal|"}"
expr_stmt|;
block|}
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"PropertiesText"
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
name|allStrings
condition|)
block|{
name|Map
name|stringProperties
init|=
name|CompositeDataHelper
operator|.
name|getTabularMap
argument_list|(
name|cdata
argument_list|,
name|CompositeDataConstants
operator|.
name|STRING_PROPERTIES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"stringProperties size()"
argument_list|,
literal|2
argument_list|,
name|stringProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringProperties.MyHeader"
argument_list|,
literal|"StringHeader"
operator|+
name|i
argument_list|,
name|stringProperties
operator|.
name|get
argument_list|(
literal|"MyStringHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringProperties.MyHeader"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
name|stringProperties
operator|.
name|get
argument_list|(
literal|"MyHeader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
name|intProperties
init|=
name|CompositeDataHelper
operator|.
name|getTabularMap
argument_list|(
name|cdata
argument_list|,
name|CompositeDataConstants
operator|.
name|INT_PROPERTIES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"intProperties size()"
argument_list|,
literal|1
argument_list|,
name|intProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"intProperties.MyHeader"
argument_list|,
name|i
argument_list|,
name|intProperties
operator|.
name|get
argument_list|(
literal|"MyHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|stringProperties
init|=
name|CompositeDataHelper
operator|.
name|getTabularMap
argument_list|(
name|cdata
argument_list|,
name|CompositeDataConstants
operator|.
name|STRING_PROPERTIES
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"stringProperties size()"
argument_list|,
literal|1
argument_list|,
name|stringProperties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"stringProperties.MyHeader"
argument_list|,
literal|"StringHeader"
operator|+
name|i
argument_list|,
name|stringProperties
operator|.
name|get
argument_list|(
literal|"MyStringHeader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
name|properties
init|=
name|CompositeDataHelper
operator|.
name|getMessageUserProperties
argument_list|(
name|cdata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"properties size()"
argument_list|,
literal|2
argument_list|,
name|properties
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"properties.MyHeader"
argument_list|,
name|allStrings
condition|?
literal|""
operator|+
name|i
else|:
name|i
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"MyHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"properties.MyHeader"
argument_list|,
literal|"StringHeader"
operator|+
name|i
argument_list|,
name|properties
operator|.
name|get
argument_list|(
literal|"MyStringHeader"
argument_list|)
argument_list|)
expr_stmt|;
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"JMSXGroupSeq"
argument_list|,
literal|1234
argument_list|)
expr_stmt|;
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"JMSXGroupID"
argument_list|,
literal|"MyGroupID"
argument_list|)
expr_stmt|;
name|assertComplexData
argument_list|(
name|i
argument_list|,
name|cdata
argument_list|,
literal|"Text"
argument_list|,
literal|"message:"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|assertSendCsnvViaMBean
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|queueName
init|=
name|getDestinationString
argument_list|()
operator|+
literal|".SendMBBean"
decl_stmt|;
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|echo
argument_list|(
literal|"Create QueueView MBean..."
argument_list|)
expr_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addQueue
argument_list|(
name|queueName
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|queueName
argument_list|)
decl_stmt|;
name|echo
argument_list|(
literal|"Create QueueView MBean..."
argument_list|)
expr_stmt|;
name|QueueViewMBean
name|proxy
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|purge
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|String
name|props
init|=
literal|"body=message:"
operator|+
name|i
decl_stmt|;
name|props
operator|+=
literal|",JMSCorrelationID=MyCorrId"
expr_stmt|;
name|props
operator|+=
literal|",JMSDeliveryMode=1"
expr_stmt|;
name|props
operator|+=
literal|",JMSXGroupID=MyGroupID"
expr_stmt|;
name|props
operator|+=
literal|",JMSXGroupSeq=1234"
expr_stmt|;
name|props
operator|+=
literal|",JMSPriority="
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
expr_stmt|;
name|props
operator|+=
literal|",JMSType=MyType"
expr_stmt|;
name|props
operator|+=
literal|",MyHeader="
operator|+
name|i
expr_stmt|;
name|props
operator|+=
literal|",MyStringHeader=StringHeader"
operator|+
name|i
expr_stmt|;
name|proxy
operator|.
name|sendTextMessageWithProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
name|browseAndVerifyTypes
argument_list|(
name|proxy
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertComplexData
parameter_list|(
name|int
name|messageIndex
parameter_list|,
name|CompositeData
name|cdata
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|expected
parameter_list|)
block|{
name|Object
name|value
init|=
name|cdata
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Message "
operator|+
name|messageIndex
operator|+
literal|" CData field: "
operator|+
name|name
argument_list|,
name|expected
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertQueueBrowseWorks
parameter_list|()
throws|throws
name|Exception
block|{
name|Integer
name|mbeancnt
init|=
name|mbeanServer
operator|.
name|getMBeanCount
argument_list|()
decl_stmt|;
name|echo
argument_list|(
literal|"Mbean count :"
operator|+
name|mbeancnt
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|echo
argument_list|(
literal|"Create QueueView MBean..."
argument_list|)
expr_stmt|;
name|QueueViewMBean
name|proxy
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|long
name|concount
init|=
name|proxy
operator|.
name|getConsumerCount
argument_list|()
decl_stmt|;
name|echo
argument_list|(
literal|"Consumer Count :"
operator|+
name|concount
argument_list|)
expr_stmt|;
name|long
name|messcount
init|=
name|proxy
operator|.
name|getQueueSize
argument_list|()
decl_stmt|;
name|echo
argument_list|(
literal|"current number of messages in the queue :"
operator|+
name|messcount
argument_list|)
expr_stmt|;
comment|// lets browse
name|CompositeData
index|[]
name|compdatalist
init|=
name|proxy
operator|.
name|browse
argument_list|()
decl_stmt|;
if|if
condition|(
name|compdatalist
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"There is no message in the queue:"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|messageIDs
init|=
operator|new
name|String
index|[
name|compdatalist
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compdatalist
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CompositeData
name|cdata
init|=
name|compdatalist
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|echo
argument_list|(
literal|"Columns: "
operator|+
name|cdata
operator|.
name|getCompositeType
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|messageIDs
index|[
name|i
index|]
operator|=
operator|(
name|String
operator|)
name|cdata
operator|.
name|get
argument_list|(
literal|"JMSMessageID"
argument_list|)
expr_stmt|;
name|echo
argument_list|(
literal|"message "
operator|+
name|i
operator|+
literal|" : "
operator|+
name|cdata
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TabularData
name|table
init|=
name|proxy
operator|.
name|browseAsTable
argument_list|()
decl_stmt|;
name|echo
argument_list|(
literal|"Found tabular data: "
operator|+
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table should not be empty!"
argument_list|,
name|table
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue size"
argument_list|,
name|MESSAGE_COUNT
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|messageID
init|=
name|messageIDs
index|[
literal|0
index|]
decl_stmt|;
name|String
name|newDestinationName
init|=
literal|"queue://dummy.test.cheese"
decl_stmt|;
name|echo
argument_list|(
literal|"Attempting to copy: "
operator|+
name|messageID
operator|+
literal|" to destination: "
operator|+
name|newDestinationName
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|copyMessageTo
argument_list|(
name|messageID
argument_list|,
name|newDestinationName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue size"
argument_list|,
name|MESSAGE_COUNT
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|messageID
operator|=
name|messageIDs
index|[
literal|1
index|]
expr_stmt|;
name|echo
argument_list|(
literal|"Attempting to remove: "
operator|+
name|messageID
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|removeMessage
argument_list|(
name|messageID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue size"
argument_list|,
name|MESSAGE_COUNT
operator|-
literal|1
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|echo
argument_list|(
literal|"Worked!"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertCreateAndDestroyDurableSubscriptions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// lets create a new topic
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|echo
argument_list|(
literal|"Create QueueView MBean..."
argument_list|)
expr_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|broker
operator|.
name|addTopic
argument_list|(
name|getDestinationString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|topicName
init|=
name|getDestinationString
argument_list|()
decl_stmt|;
name|String
name|selector
init|=
literal|null
decl_stmt|;
name|ObjectName
name|name1
init|=
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"subscriber1"
argument_list|,
name|topicName
argument_list|,
name|selector
argument_list|)
decl_stmt|;
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"subscriber2"
argument_list|,
name|topicName
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|2
argument_list|,
name|broker
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have created an mbean name for the durable subscriber!"
argument_list|,
name|name1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created durable subscriber with name: "
operator|+
name|name1
argument_list|)
expr_stmt|;
comment|// now lets try destroy it
name|broker
operator|.
name|destroyDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"subscriber1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|broker
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertConsumerCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"broker is not a slave"
argument_list|,
operator|!
name|broker
operator|.
name|isSlave
argument_list|()
argument_list|)
expr_stmt|;
comment|// create 2 topics
name|broker
operator|.
name|addTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|ObjectName
name|topicObjName1
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|ObjectName
name|topicObjName2
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|topic1
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|topicObjName1
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|topic2
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|topicObjName2
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|topicName
init|=
name|getDestinationString
argument_list|()
decl_stmt|;
name|String
name|selector
init|=
literal|null
decl_stmt|;
comment|// create 1 subscriber for each topic
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic1.subscriber1"
argument_list|,
name|topicName
operator|+
literal|"1"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic2.subscriber1"
argument_list|,
name|topicName
operator|+
literal|"2"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// create 1 more subscriber for topic1
name|broker
operator|.
name|createDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic1.subscriber2"
argument_list|,
name|topicName
operator|+
literal|"1"
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|2
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// destroy topic1 subscriber
name|broker
operator|.
name|destroyDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic1.subscriber1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// destroy topic2 subscriber
name|broker
operator|.
name|destroyDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic2.subscriber1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// destroy remaining topic1 subscriber
name|broker
operator|.
name|destroyDurableSubscriber
argument_list|(
name|clientID
argument_list|,
literal|"topic1.subscriber2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic1
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|topic2
operator|.
name|getConsumerCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertProducerCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"broker is not a slave"
argument_list|,
operator|!
name|broker
operator|.
name|isSlave
argument_list|()
argument_list|)
expr_stmt|;
comment|// create 2 topics
name|broker
operator|.
name|addTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|"1"
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
expr_stmt|;
name|ObjectName
name|topicObjName1
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|ObjectName
name|topicObjName2
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName="
operator|+
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|topic1
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|topicObjName1
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopicViewMBean
name|topic2
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|topicObjName2
argument_list|,
name|TopicViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Producer count"
argument_list|,
literal|0
argument_list|,
name|topic1
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Producer count"
argument_list|,
literal|0
argument_list|,
name|topic2
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker Topic Producer count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getTopicProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// create 1 producer for each topic
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|dest1
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|Destination
name|dest2
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer1
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest1
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer2
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest2
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Producer count"
argument_list|,
literal|1
argument_list|,
name|topic1
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Producer count"
argument_list|,
literal|1
argument_list|,
name|topic2
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker Topic Producer count"
argument_list|,
literal|2
argument_list|,
name|broker
operator|.
name|getTopicProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// create 1 more producer for topic1
name|MessageProducer
name|producer3
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|dest1
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Producer count"
argument_list|,
literal|2
argument_list|,
name|topic1
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Producer count"
argument_list|,
literal|1
argument_list|,
name|topic2
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker Topic Producer count"
argument_list|,
literal|3
argument_list|,
name|broker
operator|.
name|getTopicProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// destroy topic1 producer
name|producer1
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Producer count"
argument_list|,
literal|1
argument_list|,
name|topic1
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Producer count"
argument_list|,
literal|1
argument_list|,
name|topic2
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker Topic Producer count"
argument_list|,
literal|2
argument_list|,
name|broker
operator|.
name|getTopicProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// destroy topic2 producer
name|producer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Producer count"
argument_list|,
literal|1
argument_list|,
name|topic1
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Producer count"
argument_list|,
literal|0
argument_list|,
name|topic2
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker Topic Producer count"
argument_list|,
literal|1
argument_list|,
name|broker
operator|.
name|getTopicProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// destroy remaining topic1 producer
name|producer3
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic1 Producer count"
argument_list|,
literal|0
argument_list|,
name|topic1
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"topic2 Producer count"
argument_list|,
literal|0
argument_list|,
name|topic2
operator|.
name|getProducerCount
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer4
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|broker
operator|.
name|getDynamicDestinationProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|producer4
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker Topic Producer count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getTopicProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ObjectName
name|assertRegisteredObjectName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|NullPointerException
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|echo
argument_list|(
literal|"Bean Registered: "
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Could not find MBean!: "
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
return|return
name|objectName
return|;
block|}
specifier|protected
name|ObjectName
name|assertNotRegisteredObjectName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|NullPointerException
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|mbeanServer
operator|.
name|isRegistered
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Found the MBean!: "
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|echo
argument_list|(
literal|"Bean not registered Registered: "
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
return|return
name|objectName
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|bindAddress
operator|=
literal|"tcp://localhost:0"
expr_stmt|;
name|useTopic
operator|=
literal|false
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|ManagementContext
name|managementContext
init|=
name|broker
operator|.
name|getManagementContext
argument_list|()
decl_stmt|;
name|mbeanServer
operator|=
name|managementContext
operator|.
name|getMBeanServer
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|waitForKeyPress
condition|)
block|{
comment|// We are running from the command line so let folks browse the
comment|// mbeans...
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Press enter to terminate the program."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"In the meantime you can use your JMX console to view the current MBeans"
argument_list|)
expr_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|answer
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// apply memory limit so that %usage is visible
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setMemoryLimit
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|4
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
comment|// allow options to be visible via jmx
name|answer
operator|.
name|setDestinations
argument_list|(
operator|new
name|ActiveMQDestination
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
name|QUEUE_WITH_OPTIONS
operator|+
literal|"?topQueue=true&hasOptions=2"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|useConnection
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|authMode
argument_list|)
decl_stmt|;
name|destination
operator|=
name|createDestination
argument_list|()
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Message: "
operator|+
name|i
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"counter"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSCorrelationID
argument_list|(
literal|"MyCorrelationID"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"MyReplyTo"
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSType
argument_list|(
literal|"MyType"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|useConnectionWithBlobMessage
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQSession
name|session
init|=
operator|(
name|ActiveMQSession
operator|)
name|connection
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|authMode
argument_list|)
decl_stmt|;
name|destination
operator|=
name|createDestination
argument_list|()
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|BlobMessage
name|message
init|=
name|session
operator|.
name|createBlobMessage
argument_list|(
operator|new
name|URL
argument_list|(
literal|"http://foo.bar/test"
argument_list|)
argument_list|)
decl_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"counter"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSCorrelationID
argument_list|(
literal|"MyCorrelationID"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"MyReplyTo"
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSType
argument_list|(
literal|"MyType"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|useConnectionWithByteMessage
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|ActiveMQSession
name|session
init|=
operator|(
name|ActiveMQSession
operator|)
name|connection
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|authMode
argument_list|)
decl_stmt|;
name|destination
operator|=
name|createDestination
argument_list|()
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|BytesMessage
name|message
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|writeBytes
argument_list|(
operator|(
literal|"Message: "
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setIntProperty
argument_list|(
literal|"counter"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSCorrelationID
argument_list|(
literal|"MyCorrelationID"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"MyReplyTo"
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSType
argument_list|(
literal|"MyType"
argument_list|)
expr_stmt|;
name|message
operator|.
name|setJMSPriority
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|echo
parameter_list|(
name|String
name|text
parameter_list|)
block|{
comment|//LOG.info(text);
block|}
specifier|protected
name|String
name|getSecondDestinationString
parameter_list|()
block|{
return|return
literal|"test.new.destination."
operator|+
name|getClass
argument_list|()
operator|+
literal|"."
operator|+
name|getName
argument_list|()
return|;
block|}
specifier|public
name|void
name|testDynamicProducerView
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker
operator|.
name|getDynamicDestinationProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Destination
name|dest1
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"DynamicDest-1"
argument_list|)
decl_stmt|;
name|Destination
name|dest2
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"DynamicDest-2"
argument_list|)
decl_stmt|;
name|Destination
name|dest3
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"DynamicDest-3"
argument_list|)
decl_stmt|;
comment|// Wait a bit to let the producer get registered.
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|broker
operator|.
name|getDynamicDestinationProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|ObjectName
name|viewName
init|=
name|broker
operator|.
name|getDynamicDestinationProducers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertNotNull
argument_list|(
name|viewName
argument_list|)
expr_stmt|;
name|ProducerViewMBean
name|view
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|viewName
argument_list|,
name|ProducerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NOTSET"
argument_list|,
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|dest1
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Test Message 1"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|dest1
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|isDestinationTopic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|isDestinationQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|isDestinationTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|dest2
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Test Message 2"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|dest2
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|isDestinationTopic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|isDestinationQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|isDestinationTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|dest3
argument_list|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Test Message 3"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|ActiveMQDestination
operator|)
name|dest3
operator|)
operator|.
name|getPhysicalName
argument_list|()
argument_list|,
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|view
operator|.
name|isDestinationQueue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|isDestinationTopic
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|view
operator|.
name|isDestinationTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker
operator|.
name|getDynamicDestinationProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testTempQueueJMXDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
name|clientID
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
name|transacted
argument_list|,
name|authMode
argument_list|)
decl_stmt|;
name|ActiveMQTempQueue
name|tQueue
init|=
operator|(
name|ActiveMQTempQueue
operator|)
name|session
operator|.
name|createTemporaryQueue
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|tQueue
operator|.
name|getDestinationTypeAsString
argument_list|()
argument_list|)
operator|+
literal|",destinationName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|tQueue
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// should not throw an exception
name|mbeanServer
operator|.
name|getObjectInstance
argument_list|(
name|queueViewMBeanName
argument_list|)
expr_stmt|;
name|tQueue
operator|.
name|delete
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
comment|// should throw an exception
name|mbeanServer
operator|.
name|getObjectInstance
argument_list|(
name|queueViewMBeanName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should be deleted already!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected!
block|}
block|}
comment|// Test for AMQ-3029
specifier|public
name|void
name|testBrowseBlobMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnectionWithBlobMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeData
index|[]
name|compdatalist
init|=
name|queue
operator|.
name|browse
argument_list|()
decl_stmt|;
name|int
name|initialQueueSize
init|=
name|compdatalist
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|initialQueueSize
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"There is no message in the queue:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|echo
argument_list|(
literal|"Current queue size: "
operator|+
name|initialQueueSize
argument_list|)
expr_stmt|;
block|}
name|int
name|messageCount
init|=
name|initialQueueSize
decl_stmt|;
name|String
index|[]
name|messageIDs
init|=
operator|new
name|String
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|CompositeData
name|cdata
init|=
name|compdatalist
index|[
name|i
index|]
decl_stmt|;
name|String
name|messageID
init|=
operator|(
name|String
operator|)
name|cdata
operator|.
name|get
argument_list|(
literal|"JMSMessageID"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have a message ID for message "
operator|+
name|i
argument_list|,
name|messageID
argument_list|)
expr_stmt|;
name|messageIDs
index|[
name|i
index|]
operator|=
name|messageID
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"dest has some memory usage"
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testDestinationOptionsAreVisible
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|QUEUE_WITH_OPTIONS
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"name match"
argument_list|,
name|QUEUE_WITH_OPTIONS
argument_list|,
name|queue
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|options
init|=
name|queue
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got options: "
operator|+
name|options
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|optionsMap
init|=
name|URISupport
operator|.
name|parseQuery
argument_list|(
name|options
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got a map"
argument_list|,
literal|2
argument_list|,
name|optionsMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"matches our options"
argument_list|,
name|optionsMap
operator|.
name|containsKey
argument_list|(
literal|"hasOptions"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"matches our options"
argument_list|,
name|optionsMap
operator|.
name|containsKey
argument_list|(
literal|"topQueue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"matches our options"
argument_list|,
name|optionsMap
operator|.
name|containsValue
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"matches our options"
argument_list|,
name|optionsMap
operator|.
name|containsValue
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSubscriptionViewToConnectionMBean
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"MBeanTest"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|".Queue"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|queueConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ObjectName
name|subscriptionName
init|=
name|broker
operator|.
name|getQueueSubscribers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Looking for Subscription: "
operator|+
name|subscriptionName
argument_list|)
expr_stmt|;
name|SubscriptionViewMBean
name|subscriberView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|subscriptionName
argument_list|,
name|SubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|subscriberView
argument_list|)
expr_stmt|;
name|ObjectName
name|connectionName
init|=
name|subscriberView
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Looking for Connection: "
operator|+
name|connectionName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|connectionName
argument_list|)
expr_stmt|;
name|ConnectionViewMBean
name|connectionView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|connectionName
argument_list|,
name|ConnectionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connectionView
argument_list|)
expr_stmt|;
comment|// Our consumer plus one advisory consumer.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|connectionView
operator|.
name|getConsumers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"client id match"
argument_list|,
literal|"MBeanTest"
argument_list|,
name|connectionView
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the subscription view we found earlier is in this list.
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ObjectName
name|name
range|:
name|connectionView
operator|.
name|getConsumers
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|subscriptionName
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"We should have found: "
operator|+
name|subscriptionName
argument_list|,
name|found
argument_list|)
expr_stmt|;
comment|// Our producer and no others.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|connectionView
operator|.
name|getProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Bean should detect the updates.
name|queueConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// Only an advisory consumers now.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|connectionView
operator|.
name|getConsumers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|connectionView
operator|.
name|getProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCreateAndUnsubscribeDurableSubscriptions
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"MBeanTest"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|String
name|topicName
init|=
name|getDestinationString
argument_list|()
operator|+
literal|".DurableTopic"
decl_stmt|;
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|topicName
argument_list|)
decl_stmt|;
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|echo
argument_list|(
literal|"Create QueueView MBean..."
argument_list|)
expr_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|MessageConsumer
name|durableConsumer1
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"subscription1"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|durableConsumer2
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"subscription2"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|2
argument_list|,
name|broker
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|durableConsumer1
operator|.
name|close
argument_list|()
expr_stmt|;
name|durableConsumer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Durable subscriber count"
argument_list|,
literal|2
argument_list|,
name|broker
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|session
operator|.
name|unsubscribe
argument_list|(
literal|"subscription1"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Inactive Durable subscriber count"
argument_list|,
literal|1
argument_list|,
name|broker
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|session
operator|.
name|unsubscribe
argument_list|(
literal|"subscription2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Inactive Durable subscriber count"
argument_list|,
literal|0
argument_list|,
name|broker
operator|.
name|getInactiveDurableTopicSubscribers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserNamePopulated
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestUserNameInMBeans
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserNameNotPopulated
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestUserNameInMBeans
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|doTestUserNameInMBeans
parameter_list|(
name|boolean
name|expect
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|.
name|setPopulateUserNameInMBeans
argument_list|(
name|expect
argument_list|)
expr_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"MBeanTest"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|".Queue"
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
name|getDestinationString
argument_list|()
operator|+
literal|".Topic"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|queueConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|topicConsumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|durable
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"Durable"
argument_list|)
decl_stmt|;
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker
operator|.
name|getQueueProducers
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker
operator|.
name|getTopicSubscribers
argument_list|()
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|broker
operator|.
name|getQueueSubscribers
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|ObjectName
name|producerName
init|=
name|broker
operator|.
name|getQueueProducers
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|ProducerViewMBean
name|producerView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|producerName
argument_list|,
name|ProducerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|producerView
argument_list|)
expr_stmt|;
if|if
condition|(
name|expect
condition|)
block|{
name|assertEquals
argument_list|(
literal|"admin"
argument_list|,
name|producerView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|producerView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ObjectName
name|name
range|:
name|broker
operator|.
name|getTopicSubscribers
argument_list|()
control|)
block|{
name|SubscriptionViewMBean
name|subscriberView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|name
argument_list|,
name|SubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|expect
condition|)
block|{
name|assertEquals
argument_list|(
literal|"admin"
argument_list|,
name|subscriberView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|subscriberView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjectName
name|name
range|:
name|broker
operator|.
name|getQueueSubscribers
argument_list|()
control|)
block|{
name|SubscriptionViewMBean
name|subscriberView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|name
argument_list|,
name|SubscriptionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|expect
condition|)
block|{
name|assertEquals
argument_list|(
literal|"admin"
argument_list|,
name|subscriberView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|subscriberView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ObjectName
name|query
init|=
comment|//new ObjectName(domain + ":type=Broker,brokerName=localhost,connector=*," + "connectorName=*,connectionName=MBeanTest");
name|BrokerMBeanSupport
operator|.
name|createConnectionQuery
argument_list|(
name|domain
argument_list|,
literal|"localhost"
argument_list|,
name|connection
operator|.
name|getClientID
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|names
init|=
name|mbeanServer
operator|.
name|queryNames
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ObjectName
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
name|name
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"connectionName=MBeanTest"
argument_list|)
condition|)
block|{
name|ConnectionViewMBean
name|connectionView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|name
argument_list|,
name|ConnectionViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connectionView
argument_list|)
expr_stmt|;
if|if
condition|(
name|expect
condition|)
block|{
name|assertEquals
argument_list|(
literal|"admin"
argument_list|,
name|connectionView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|connectionView
operator|.
name|getUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Should find the connection's ManagedTransportConnection"
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testMoveMessagesToRetainOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|newDestination
init|=
name|getSecondDestinationString
argument_list|()
decl_stmt|;
name|queue
operator|.
name|moveMatchingMessagesTo
argument_list|(
literal|""
argument_list|,
name|newDestination
argument_list|)
expr_stmt|;
name|queueViewMBeanName
operator|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|newDestination
argument_list|)
expr_stmt|;
name|queue
operator|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|movedSize
init|=
name|MESSAGE_COUNT
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of messages "
argument_list|,
name|movedSize
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|newDestination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|current
init|=
operator|-
literal|1
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|propertyExists
argument_list|(
literal|"counter"
argument_list|)
condition|)
block|{
name|current
operator|=
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"counter"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|last
argument_list|,
name|current
operator|-
literal|1
argument_list|)
expr_stmt|;
name|last
operator|=
name|current
expr_stmt|;
block|}
block|}
comment|// now lets remove them by selector
name|queue
operator|.
name|removeMatchingMessages
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have no more messages in the queue: "
operator|+
name|queueViewMBeanName
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dest has no memory usage"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectionCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|broker
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|broker
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|broker
operator|.
name|getCurrentConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|broker
operator|.
name|getTotalConnectionsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCopyMessagesToRetainOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|newDestination
init|=
name|getSecondDestinationString
argument_list|()
decl_stmt|;
name|queue
operator|.
name|copyMatchingMessagesTo
argument_list|(
literal|""
argument_list|,
name|newDestination
argument_list|)
expr_stmt|;
name|queueViewMBeanName
operator|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|newDestination
argument_list|)
expr_stmt|;
name|queue
operator|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|movedSize
init|=
name|MESSAGE_COUNT
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of messages "
argument_list|,
name|movedSize
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|newDestination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|int
name|last
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|current
init|=
operator|-
literal|1
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|propertyExists
argument_list|(
literal|"counter"
argument_list|)
condition|)
block|{
name|current
operator|=
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"counter"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|last
argument_list|,
name|current
operator|-
literal|1
argument_list|)
expr_stmt|;
name|last
operator|=
name|current
expr_stmt|;
block|}
block|}
comment|// now lets remove them by selector
name|queue
operator|.
name|removeMatchingMessages
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have no more messages in the queue: "
operator|+
name|queueViewMBeanName
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dest has no memory usage"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveMatchingMessageRetainOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|queueName
init|=
name|getDestinationString
argument_list|()
decl_stmt|;
name|queue
operator|.
name|removeMatchingMessages
argument_list|(
literal|"counter< 10"
argument_list|)
expr_stmt|;
name|int
name|newSize
init|=
name|MESSAGE_COUNT
operator|-
literal|10
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of messages "
argument_list|,
name|newSize
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|queueName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|int
name|last
init|=
literal|9
decl_stmt|;
name|int
name|current
init|=
literal|0
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|message
operator|.
name|propertyExists
argument_list|(
literal|"counter"
argument_list|)
condition|)
block|{
name|current
operator|=
name|message
operator|.
name|getIntProperty
argument_list|(
literal|"counter"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|last
argument_list|,
name|current
operator|-
literal|1
argument_list|)
expr_stmt|;
name|last
operator|=
name|current
expr_stmt|;
block|}
block|}
comment|// now lets remove them by selector
name|queue
operator|.
name|removeMatchingMessages
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have no more messages in the queue: "
operator|+
name|queueViewMBeanName
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dest has no memory usage"
argument_list|,
literal|0
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testBrowseBytesMessages
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|useConnectionWithByteMessage
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Queue,destinationName="
operator|+
name|getDestinationString
argument_list|()
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|queue
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|CompositeData
index|[]
name|compdatalist
init|=
name|queue
operator|.
name|browse
argument_list|()
decl_stmt|;
name|int
name|initialQueueSize
init|=
name|compdatalist
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|initialQueueSize
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"There is no message in the queue:"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|echo
argument_list|(
literal|"Current queue size: "
operator|+
name|initialQueueSize
argument_list|)
expr_stmt|;
block|}
name|int
name|messageCount
init|=
name|initialQueueSize
decl_stmt|;
name|String
index|[]
name|messageIDs
init|=
operator|new
name|String
index|[
name|messageCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messageCount
condition|;
name|i
operator|++
control|)
block|{
name|CompositeData
name|cdata
init|=
name|compdatalist
index|[
name|i
index|]
decl_stmt|;
name|String
name|messageID
init|=
operator|(
name|String
operator|)
name|cdata
operator|.
name|get
argument_list|(
literal|"JMSMessageID"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have a message ID for message "
operator|+
name|i
argument_list|,
name|messageID
argument_list|)
expr_stmt|;
name|messageIDs
index|[
name|i
index|]
operator|=
name|messageID
expr_stmt|;
name|Byte
index|[]
name|preview
init|=
operator|(
name|Byte
index|[]
operator|)
name|cdata
operator|.
name|get
argument_list|(
name|CompositeDataConstants
operator|.
name|BODY_PREVIEW
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"should be a preview"
argument_list|,
name|preview
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not empty"
argument_list|,
name|preview
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"dest has some memory usage"
argument_list|,
name|queue
operator|.
name|getMemoryPercentUsage
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// consume all the messages
name|echo
argument_list|(
literal|"Attempting to consume all bytes messages from: "
operator|+
name|destination
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
operator|instanceof
name|BytesMessage
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testAddRemoveConnectorBrokerView
parameter_list|()
throws|throws
name|Exception
block|{
name|ObjectName
name|brokerName
init|=
name|assertRegisteredObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost"
argument_list|)
decl_stmt|;
name|BrokerViewMBean
name|brokerView
init|=
name|MBeanServerInvocationHandler
operator|.
name|newProxyInstance
argument_list|(
name|mbeanServer
argument_list|,
name|brokerName
argument_list|,
name|BrokerViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
name|connectors
init|=
name|brokerView
operator|.
name|getTransportConnectors
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connectors: "
operator|+
name|connectors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one connector"
argument_list|,
literal|1
argument_list|,
name|connectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ConnectorViewMBean
name|connector
init|=
name|getProxyToConnectionView
argument_list|(
literal|"tcp"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|connectors
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|brokerView
operator|.
name|removeConnector
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|connectors
operator|=
name|brokerView
operator|.
name|getTransportConnectors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"empty"
argument_list|,
literal|0
argument_list|,
name|connectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|brokerView
operator|.
name|addConnector
argument_list|(
literal|"tcp://0.0.0.0:0"
argument_list|)
expr_stmt|;
name|connector
operator|=
name|getProxyToConnectionView
argument_list|(
literal|"tcp"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connectors
operator|=
name|brokerView
operator|.
name|getTransportConnectors
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connectors: "
operator|+
name|connectors
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one connector"
argument_list|,
literal|1
argument_list|,
name|connectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"name is in map: "
operator|+
name|connectors
operator|.
name|keySet
argument_list|()
argument_list|,
name|connectors
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testConnectorView
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectorViewMBean
name|connector
init|=
name|getProxyToConnectionView
argument_list|(
literal|"tcp"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connector
operator|.
name|isRebalanceClusterClients
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connector
operator|.
name|isUpdateClusterClientsOnRemove
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connector
operator|.
name|isUpdateClusterClients
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|connector
operator|.
name|isAllowLinkStealingEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ConnectorViewMBean
name|getProxyToConnectionView
parameter_list|(
name|String
name|connectionType
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|connectorQuery
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,connector=clientConnectors,connectorName="
operator|+
name|connectionType
operator|+
literal|"_//*"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|results
init|=
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|queryNames
argument_list|(
name|connectorQuery
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|isEmpty
argument_list|()
operator|||
name|results
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Unable to find the exact Connector instance."
argument_list|)
throw|;
block|}
name|ConnectorViewMBean
name|proxy
init|=
operator|(
name|ConnectorViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|ConnectorViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
specifier|public
name|void
name|testDynamicProducers
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|ObjectName
name|query
init|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,endpoint=dynamicProducer,*"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectInstance
argument_list|>
name|mbeans
init|=
name|mbeanServer
operator|.
name|queryMBeans
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mbeans
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDurableSubQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|=
name|connectionFactory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|TopicSubscriber
name|sub
init|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
literal|"test.topic"
argument_list|)
argument_list|,
literal|"test.consumer"
argument_list|)
decl_stmt|;
name|ObjectName
name|query
init|=
operator|new
name|ObjectName
argument_list|(
name|domain
operator|+
literal|":type=Broker,brokerName=localhost,destinationType=Topic,destinationName=test.topic,endpoint=Consumer,consumerId=Durable(*),*"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectInstance
argument_list|>
name|mbeans
init|=
name|mbeanServer
operator|.
name|queryMBeans
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mbeans
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sub
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

