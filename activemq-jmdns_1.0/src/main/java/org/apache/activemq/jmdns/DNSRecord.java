begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2003-2005 Arthur van Hoff, Rick Blair  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * DNS record  *  * @version %I%, %G%  * @author	Arthur van Hoff, Rick Blair, Werner Randelshofer, Pierre Frisch  */
end_comment

begin_class
specifier|abstract
class|class
name|DNSRecord
extends|extends
name|DNSEntry
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DNSRecord
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ttl
decl_stmt|;
specifier|private
name|long
name|created
decl_stmt|;
comment|/**      * Create a DNSRecord with a name, type, clazz, and ttl.      */
name|DNSRecord
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|,
name|int
name|ttl
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|this
operator|.
name|ttl
operator|=
name|ttl
expr_stmt|;
name|this
operator|.
name|created
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * True if this record is the same as some other record.      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
operator|(
name|other
operator|instanceof
name|DNSRecord
operator|)
operator|&&
name|sameAs
argument_list|(
operator|(
name|DNSRecord
operator|)
name|other
argument_list|)
return|;
block|}
comment|/**      * True if this record is the same as some other record.      */
name|boolean
name|sameAs
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|other
argument_list|)
operator|&&
name|sameValue
argument_list|(
operator|(
name|DNSRecord
operator|)
name|other
argument_list|)
return|;
block|}
comment|/**      * True if this record has the same value as some other record.      */
specifier|abstract
name|boolean
name|sameValue
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
function_decl|;
comment|/**      * True if this record has the same type as some other record.      */
name|boolean
name|sameType
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
return|return
name|type
operator|==
name|other
operator|.
name|type
return|;
block|}
comment|/**      * Handles a query represented by this record.      *      * @return Returns true if a conflict with one of the services registered      *         with JmDNS or with the hostname occured.      */
specifier|abstract
name|boolean
name|handleQuery
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|long
name|expirationTime
parameter_list|)
function_decl|;
comment|/**      * Handles a responserepresented by this record.      *      * @return Returns true if a conflict with one of the services registered      *         with JmDNS or with the hostname occured.      */
specifier|abstract
name|boolean
name|handleResponse
parameter_list|(
name|JmDNS
name|dns
parameter_list|)
function_decl|;
comment|/**      * Adds this as an answer to the provided outgoing datagram.      */
specifier|abstract
name|DNSOutgoing
name|addAnswer
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|DNSIncoming
name|in
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|int
name|port
parameter_list|,
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * True if this record is suppressed by the answers in a message.      */
name|boolean
name|suppressedBy
parameter_list|(
name|DNSIncoming
name|msg
parameter_list|)
block|{
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|msg
operator|.
name|numAnswers
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|suppressedBy
argument_list|(
operator|(
name|DNSRecord
operator|)
name|msg
operator|.
name|answers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ArrayIndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"suppressedBy() message "
operator|+
name|msg
operator|+
literal|" exception "
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|// msg.print(true);
return|return
literal|false
return|;
block|}
block|}
comment|/**      * True if this record would be supressed by an answer.      * This is the case if this record would not have a      * significantly longer TTL.      */
name|boolean
name|suppressedBy
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
if|if
condition|(
name|sameAs
argument_list|(
name|other
argument_list|)
operator|&&
operator|(
name|other
operator|.
name|ttl
operator|>
name|ttl
operator|/
literal|2
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Get the expiration time of this record.      */
name|long
name|getExpirationTime
parameter_list|(
name|int
name|percent
parameter_list|)
block|{
return|return
name|created
operator|+
operator|(
name|percent
operator|*
name|ttl
operator|*
literal|10L
operator|)
return|;
block|}
comment|/**      * Get the remaining TTL for this record.      */
name|int
name|getRemainingTTL
parameter_list|(
name|long
name|now
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|getExpirationTime
argument_list|(
literal|100
argument_list|)
operator|-
name|now
operator|)
operator|/
literal|1000
argument_list|)
return|;
block|}
comment|/**      * Check if the record is expired.      */
name|boolean
name|isExpired
parameter_list|(
name|long
name|now
parameter_list|)
block|{
return|return
name|getExpirationTime
argument_list|(
literal|100
argument_list|)
operator|<=
name|now
return|;
block|}
comment|/**      * Check if the record is stale, ie it has outlived      * more than half of its TTL.      */
name|boolean
name|isStale
parameter_list|(
name|long
name|now
parameter_list|)
block|{
return|return
name|getExpirationTime
argument_list|(
literal|50
argument_list|)
operator|<=
name|now
return|;
block|}
comment|/**      * Reset the TTL of a record. This avoids having to      * update the entire record in the cache.      */
name|void
name|resetTTL
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
name|created
operator|=
name|other
operator|.
name|created
expr_stmt|;
name|ttl
operator|=
name|other
operator|.
name|ttl
expr_stmt|;
block|}
comment|/**      * Write this record into an outgoing message.      */
specifier|abstract
name|void
name|write
parameter_list|(
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Address record.      */
specifier|static
class|class
name|Address
extends|extends
name|DNSRecord
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Address
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|InetAddress
name|addr
decl_stmt|;
name|Address
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|,
name|int
name|ttl
parameter_list|,
name|InetAddress
name|addr
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
name|this
operator|.
name|addr
operator|=
name|addr
expr_stmt|;
block|}
name|Address
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|,
name|int
name|ttl
parameter_list|,
name|byte
index|[]
name|rawAddress
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|addr
operator|=
name|InetAddress
operator|.
name|getByAddress
argument_list|(
name|rawAddress
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|exception
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Address() exception "
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|write
parameter_list|(
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|addr
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
name|addr
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|DNSConstants
operator|.
name|TYPE_A
operator|==
name|type
condition|)
block|{
comment|// If we have a type A records we should answer with a IPv4 address
if|if
condition|(
name|addr
operator|instanceof
name|Inet4Address
condition|)
block|{
comment|// All is good
block|}
else|else
block|{
comment|// Get the last four bytes
name|byte
index|[]
name|tempbuffer
init|=
name|buffer
decl_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
literal|4
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tempbuffer
argument_list|,
literal|12
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// If we have a type AAAA records we should answer with a IPv6 address
if|if
condition|(
name|addr
operator|instanceof
name|Inet4Address
condition|)
block|{
name|byte
index|[]
name|tempbuffer
init|=
name|buffer
decl_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
literal|16
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
literal|11
condition|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
name|tempbuffer
index|[
name|i
operator|-
literal|12
index|]
expr_stmt|;
block|}
else|else
block|{
name|buffer
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|length
init|=
name|buffer
operator|.
name|length
decl_stmt|;
name|out
operator|.
name|writeBytes
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|same
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
return|return
operator|(
operator|(
name|sameName
argument_list|(
name|other
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|sameValue
argument_list|(
name|other
argument_list|)
operator|)
operator|)
operator|)
return|;
block|}
name|boolean
name|sameName
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
operator|(
name|Address
operator|)
name|other
operator|)
operator|.
name|name
argument_list|)
return|;
block|}
name|boolean
name|sameValue
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
return|return
name|addr
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Address
operator|)
name|other
operator|)
operator|.
name|getAddress
argument_list|()
argument_list|)
return|;
block|}
name|InetAddress
name|getAddress
parameter_list|()
block|{
return|return
name|addr
return|;
block|}
comment|/**          * Creates a byte array representation of this record.          * This is needed for tie-break tests according to          * draft-cheshire-dnsext-multicastdns-04.txt chapter 9.2.          */
specifier|private
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
try|try
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dout
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
decl_stmt|;
name|dout
operator|.
name|write
argument_list|(
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|dout
operator|.
name|writeShort
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|dout
operator|.
name|writeShort
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
comment|//dout.writeInt(len);
name|byte
index|[]
name|buffer
init|=
name|addr
operator|.
name|getAddress
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dout
operator|.
name|writeByte
argument_list|(
name|buffer
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|dout
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bout
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InternalError
argument_list|()
throw|;
block|}
block|}
comment|/**          * Does a lexicographic comparison of the byte array representation          * of this record and that record.          * This is needed for tie-break tests according to          * draft-cheshire-dnsext-multicastdns-04.txt chapter 9.2.          */
specifier|private
name|int
name|lexCompare
parameter_list|(
name|DNSRecord
operator|.
name|Address
name|that
parameter_list|)
block|{
name|byte
index|[]
name|thisBytes
init|=
name|this
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|thatBytes
init|=
name|that
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|thisBytes
operator|.
name|length
argument_list|,
name|thatBytes
operator|.
name|length
argument_list|)
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|thisBytes
index|[
name|i
index|]
operator|>
name|thatBytes
index|[
name|i
index|]
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
if|if
condition|(
name|thisBytes
index|[
name|i
index|]
operator|<
name|thatBytes
index|[
name|i
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
return|return
name|thisBytes
operator|.
name|length
operator|-
name|thatBytes
operator|.
name|length
return|;
block|}
comment|/**          * Does the necessary actions, when this as a query.          */
name|boolean
name|handleQuery
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|long
name|expirationTime
parameter_list|)
block|{
name|DNSRecord
operator|.
name|Address
name|dnsAddress
init|=
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getDNSAddressRecord
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnsAddress
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dnsAddress
operator|.
name|sameType
argument_list|(
name|this
argument_list|)
operator|&&
name|dnsAddress
operator|.
name|sameName
argument_list|(
name|this
argument_list|)
operator|&&
operator|(
operator|!
name|dnsAddress
operator|.
name|sameValue
argument_list|(
name|this
argument_list|)
operator|)
condition|)
block|{
name|logger
operator|.
name|finer
argument_list|(
literal|"handleQuery() Conflicting probe detected. dns state "
operator|+
name|dns
operator|.
name|getState
argument_list|()
operator|+
literal|" lex compare "
operator|+
name|lexCompare
argument_list|(
name|dnsAddress
argument_list|)
argument_list|)
expr_stmt|;
comment|// Tie-breaker test
if|if
condition|(
name|dns
operator|.
name|getState
argument_list|()
operator|.
name|isProbing
argument_list|()
operator|&&
name|lexCompare
argument_list|(
name|dnsAddress
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// We lost the tie-break. We have to choose a different name.
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|incrementHostName
argument_list|()
expr_stmt|;
name|dns
operator|.
name|getCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dns
operator|.
name|services
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ServiceInfo
name|info
init|=
operator|(
name|ServiceInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|info
operator|.
name|revertState
argument_list|()
expr_stmt|;
block|}
block|}
name|dns
operator|.
name|revertState
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**          * Does the necessary actions, when this as a response.          */
name|boolean
name|handleResponse
parameter_list|(
name|JmDNS
name|dns
parameter_list|)
block|{
name|DNSRecord
operator|.
name|Address
name|dnsAddress
init|=
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getDNSAddressRecord
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|dnsAddress
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dnsAddress
operator|.
name|sameType
argument_list|(
name|this
argument_list|)
operator|&&
name|dnsAddress
operator|.
name|sameName
argument_list|(
name|this
argument_list|)
operator|&&
operator|(
operator|!
name|dnsAddress
operator|.
name|sameValue
argument_list|(
name|this
argument_list|)
operator|)
condition|)
block|{
name|logger
operator|.
name|finer
argument_list|(
literal|"handleResponse() Denial detected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dns
operator|.
name|getState
argument_list|()
operator|.
name|isProbing
argument_list|()
condition|)
block|{
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|incrementHostName
argument_list|()
expr_stmt|;
name|dns
operator|.
name|getCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dns
operator|.
name|services
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ServiceInfo
name|info
init|=
operator|(
name|ServiceInfo
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|info
operator|.
name|revertState
argument_list|()
expr_stmt|;
block|}
block|}
name|dns
operator|.
name|revertState
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
name|DNSOutgoing
name|addAnswer
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|DNSIncoming
name|in
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|int
name|port
parameter_list|,
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|out
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|" address '"
operator|+
operator|(
name|addr
operator|!=
literal|null
condition|?
name|addr
operator|.
name|getHostAddress
argument_list|()
else|:
literal|"null"
operator|)
operator|+
literal|"'"
argument_list|)
return|;
block|}
block|}
comment|/**      * Pointer record.      */
specifier|static
class|class
name|Pointer
extends|extends
name|DNSRecord
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Pointer
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|alias
decl_stmt|;
name|Pointer
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|,
name|int
name|ttl
parameter_list|,
name|String
name|alias
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
name|void
name|write
parameter_list|(
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeName
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
name|boolean
name|sameValue
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
return|return
name|alias
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Pointer
operator|)
name|other
operator|)
operator|.
name|alias
argument_list|)
return|;
block|}
name|boolean
name|handleQuery
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|long
name|expirationTime
parameter_list|)
block|{
comment|// Nothing to do (?)
comment|// I think there is no possibility for conflicts for this record type?
return|return
literal|false
return|;
block|}
name|boolean
name|handleResponse
parameter_list|(
name|JmDNS
name|dns
parameter_list|)
block|{
comment|// Nothing to do (?)
comment|// I think there is no possibility for conflicts for this record type?
return|return
literal|false
return|;
block|}
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
name|DNSOutgoing
name|addAnswer
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|DNSIncoming
name|in
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|int
name|port
parameter_list|,
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|out
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|alias
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|Text
extends|extends
name|DNSRecord
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Text
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|byte
name|text
index|[]
decl_stmt|;
name|Text
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|,
name|int
name|ttl
parameter_list|,
name|byte
name|text
index|[]
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
name|void
name|write
parameter_list|(
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeBytes
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|boolean
name|sameValue
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
name|Text
name|txt
init|=
operator|(
name|Text
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|txt
operator|.
name|text
operator|.
name|length
operator|!=
name|text
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|text
operator|.
name|length
init|;
name|i
operator|--
operator|>
literal|0
condition|;
control|)
block|{
if|if
condition|(
name|txt
operator|.
name|text
index|[
name|i
index|]
operator|!=
name|text
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
name|boolean
name|handleQuery
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|long
name|expirationTime
parameter_list|)
block|{
comment|// Nothing to do (?)
comment|// I think there is no possibility for conflicts for this record type?
return|return
literal|false
return|;
block|}
name|boolean
name|handleResponse
parameter_list|(
name|JmDNS
name|dns
parameter_list|)
block|{
comment|// Nothing to do (?)
comment|// Shouldn't we care if we get a conflict at this level?
comment|/*                          ServiceInfo info = (ServiceInfo) dns.services.get(name.toLowerCase());                          if (info != null) {                                  if (! Arrays.equals(text,info.text)) {                                          info.revertState();                                          return true;                                  }                          }*/
return|return
literal|false
return|;
block|}
name|DNSOutgoing
name|addAnswer
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|DNSIncoming
name|in
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|int
name|port
parameter_list|,
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|out
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
operator|(
name|text
operator|.
name|length
operator|>
literal|10
operator|)
condition|?
operator|new
name|String
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
operator|+
literal|"..."
else|:
operator|new
name|String
argument_list|(
name|text
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Service record.      */
specifier|static
class|class
name|Service
extends|extends
name|DNSRecord
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Service
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|priority
decl_stmt|;
name|int
name|weight
decl_stmt|;
name|int
name|port
decl_stmt|;
name|String
name|server
decl_stmt|;
name|Service
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|,
name|int
name|ttl
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|weight
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|server
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|clazz
argument_list|,
name|ttl
argument_list|)
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
name|void
name|write
parameter_list|(
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|writeShort
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeName
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
try|try
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dout
init|=
operator|new
name|DataOutputStream
argument_list|(
name|bout
argument_list|)
decl_stmt|;
name|dout
operator|.
name|write
argument_list|(
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|dout
operator|.
name|writeShort
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|dout
operator|.
name|writeShort
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
comment|//dout.writeInt(len);
name|dout
operator|.
name|writeShort
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|dout
operator|.
name|writeShort
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|dout
operator|.
name|writeShort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|dout
operator|.
name|write
argument_list|(
name|server
operator|.
name|getBytes
argument_list|(
literal|"UTF8"
argument_list|)
argument_list|)
expr_stmt|;
name|dout
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|bout
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InternalError
argument_list|()
throw|;
block|}
block|}
specifier|private
name|int
name|lexCompare
parameter_list|(
name|DNSRecord
operator|.
name|Service
name|that
parameter_list|)
block|{
name|byte
index|[]
name|thisBytes
init|=
name|this
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|byte
index|[]
name|thatBytes
init|=
name|that
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|thisBytes
operator|.
name|length
argument_list|,
name|thatBytes
operator|.
name|length
argument_list|)
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|thisBytes
index|[
name|i
index|]
operator|>
name|thatBytes
index|[
name|i
index|]
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
if|if
condition|(
name|thisBytes
index|[
name|i
index|]
operator|<
name|thatBytes
index|[
name|i
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
return|return
name|thisBytes
operator|.
name|length
operator|-
name|thatBytes
operator|.
name|length
return|;
block|}
name|boolean
name|sameValue
parameter_list|(
name|DNSRecord
name|other
parameter_list|)
block|{
name|Service
name|s
init|=
operator|(
name|Service
operator|)
name|other
decl_stmt|;
return|return
operator|(
name|priority
operator|==
name|s
operator|.
name|priority
operator|)
operator|&&
operator|(
name|weight
operator|==
name|s
operator|.
name|weight
operator|)
operator|&&
operator|(
name|port
operator|==
name|s
operator|.
name|port
operator|)
operator|&&
name|server
operator|.
name|equals
argument_list|(
name|s
operator|.
name|server
argument_list|)
return|;
block|}
name|boolean
name|handleQuery
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|long
name|expirationTime
parameter_list|)
block|{
name|ServiceInfo
name|info
init|=
operator|(
name|ServiceInfo
operator|)
name|dns
operator|.
name|services
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
operator|(
name|port
operator|!=
name|info
operator|.
name|port
operator|||
operator|!
name|server
operator|.
name|equalsIgnoreCase
argument_list|(
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|logger
operator|.
name|finer
argument_list|(
literal|"handleQuery() Conflicting probe detected"
argument_list|)
expr_stmt|;
comment|// Tie breaker test
if|if
condition|(
name|info
operator|.
name|getState
argument_list|()
operator|.
name|isProbing
argument_list|()
operator|&&
name|lexCompare
argument_list|(
operator|new
name|DNSRecord
operator|.
name|Service
argument_list|(
name|info
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|DNSConstants
operator|.
name|TYPE_SRV
argument_list|,
name|DNSConstants
operator|.
name|CLASS_IN
operator||
name|DNSConstants
operator|.
name|CLASS_UNIQUE
argument_list|,
name|DNSConstants
operator|.
name|DNS_TTL
argument_list|,
name|info
operator|.
name|priority
argument_list|,
name|info
operator|.
name|weight
argument_list|,
name|info
operator|.
name|port
argument_list|,
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// We lost the tie break
name|String
name|oldName
init|=
name|info
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|info
operator|.
name|setName
argument_list|(
name|dns
operator|.
name|incrementName
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dns
operator|.
name|services
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|dns
operator|.
name|services
operator|.
name|put
argument_list|(
name|info
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|logger
operator|.
name|finer
argument_list|(
literal|"handleQuery() Lost tie break: new unique name chosen:"
operator|+
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|revertState
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|boolean
name|handleResponse
parameter_list|(
name|JmDNS
name|dns
parameter_list|)
block|{
name|ServiceInfo
name|info
init|=
operator|(
name|ServiceInfo
operator|)
name|dns
operator|.
name|services
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
operator|(
name|port
operator|!=
name|info
operator|.
name|port
operator|||
operator|!
name|server
operator|.
name|equalsIgnoreCase
argument_list|(
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|logger
operator|.
name|finer
argument_list|(
literal|"handleResponse() Denial detected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getState
argument_list|()
operator|.
name|isProbing
argument_list|()
condition|)
block|{
name|String
name|oldName
init|=
name|info
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|info
operator|.
name|setName
argument_list|(
name|dns
operator|.
name|incrementName
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dns
operator|.
name|services
operator|.
name|remove
argument_list|(
name|oldName
argument_list|)
expr_stmt|;
name|dns
operator|.
name|services
operator|.
name|put
argument_list|(
name|info
operator|.
name|getQualifiedName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|logger
operator|.
name|finer
argument_list|(
literal|"handleResponse() New unique name chose:"
operator|+
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|revertState
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
name|DNSOutgoing
name|addAnswer
parameter_list|(
name|JmDNS
name|dns
parameter_list|,
name|DNSIncoming
name|in
parameter_list|,
name|InetAddress
name|addr
parameter_list|,
name|int
name|port
parameter_list|,
name|DNSOutgoing
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|ServiceInfo
name|info
init|=
operator|(
name|ServiceInfo
operator|)
name|dns
operator|.
name|services
operator|.
name|get
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|port
operator|==
name|info
operator|.
name|port
operator|!=
name|server
operator|.
name|equals
argument_list|(
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|dns
operator|.
name|addAnswer
argument_list|(
name|in
argument_list|,
name|addr
argument_list|,
name|port
argument_list|,
name|out
argument_list|,
operator|new
name|DNSRecord
operator|.
name|Service
argument_list|(
name|info
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|DNSConstants
operator|.
name|TYPE_SRV
argument_list|,
name|DNSConstants
operator|.
name|CLASS_IN
operator||
name|DNSConstants
operator|.
name|CLASS_UNIQUE
argument_list|,
name|DNSConstants
operator|.
name|DNS_TTL
argument_list|,
name|info
operator|.
name|priority
argument_list|,
name|info
operator|.
name|weight
argument_list|,
name|info
operator|.
name|port
argument_list|,
name|dns
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
name|out
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
name|server
operator|+
literal|":"
operator|+
name|port
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|other
parameter_list|)
block|{
return|return
name|toString
argument_list|(
literal|"record"
argument_list|,
name|ttl
operator|+
literal|"/"
operator|+
name|getRemainingTTL
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
name|other
argument_list|)
return|;
block|}
block|}
end_class

end_unit

