begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|JmsResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|JmsQueueTransactionTest
extends|extends
name|JmsTransactionTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JmsQueueTransactionTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * @see org.apache.activemq.JmsTransactionTestSupport#getJmsResourceProvider()      */
specifier|protected
name|JmsResourceProvider
name|getJmsResourceProvider
parameter_list|()
block|{
name|JmsResourceProvider
name|p
init|=
operator|new
name|JmsResourceProvider
argument_list|()
decl_stmt|;
name|p
operator|.
name|setTopic
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**      * Tests if the the connection gets reset, the messages will still be      * received.      *       * @throws Exception      */
specifier|public
name|void
name|testReceiveTwoThenCloseConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|}
decl_stmt|;
comment|// lets consume any outstanding messages from previous test runs
while|while
condition|(
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
operator|!=
literal|null
condition|)
block|{         }
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent 0: "
operator|+
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent 1: "
operator|+
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Message
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
comment|// Close and reopen connection.
name|reconnect
argument_list|()
expr_stmt|;
comment|// Consume again.. the previous message should
comment|// get redelivered.
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have re-received the first message again!"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have re-received the second message again!"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|messages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Message
name|inbound
index|[]
init|=
operator|new
name|Message
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|messages
operator|.
name|toArray
argument_list|(
name|inbound
argument_list|)
expr_stmt|;
name|assertTextMessagesEqual
argument_list|(
literal|"Rollback did not work"
argument_list|,
name|outbound
argument_list|,
name|inbound
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tests sending and receiving messages with two sessions(one for producing      * and another for consuming).      *       * @throws Exception      */
specifier|public
name|void
name|testSendReceiveInSeperateSessionTest
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|batchCount
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|batchCount
condition|;
name|i
operator|++
control|)
block|{
comment|// Session that sends messages
block|{
name|Session
name|session
init|=
name|resourceProvider
operator|.
name|createSession
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|resourceProvider
operator|.
name|createProducer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
decl_stmt|;
comment|// consumer = resourceProvider.createConsumer(session,
comment|// destination);
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Test Message: "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Session that consumes messages
block|{
name|Session
name|session
init|=
name|resourceProvider
operator|.
name|createSession
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|resourceProvider
operator|.
name|createConsumer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
operator|(
name|TextMessage
operator|)
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
operator|*
literal|5
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Received only "
operator|+
name|i
operator|+
literal|" messages in batch "
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test Message: "
operator|+
name|i
argument_list|,
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Tests the queue browser. Browses the messages then the consumer tries to      * receive them. The messages should still be in the queue even when it was      * browsed.      *       * @throws Exception      */
specifier|public
name|void
name|testReceiveBrowseReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
index|[]
name|outbound
init|=
operator|new
name|Message
index|[]
block|{
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"First Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Second Message"
argument_list|)
block|,
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Third Message"
argument_list|)
block|}
decl_stmt|;
comment|// lets consume any outstanding messages from previous test runs
while|while
condition|(
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
operator|!=
literal|null
condition|)
block|{         }
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|outbound
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Get the first.
name|assertEquals
argument_list|(
name|outbound
index|[
literal|0
index|]
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
operator|(
name|Queue
operator|)
name|destination
argument_list|)
decl_stmt|;
name|Enumeration
name|enumeration
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
decl_stmt|;
comment|// browse the second
name|assertTrue
argument_list|(
literal|"should have received the second message"
argument_list|,
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|,
operator|(
name|Message
operator|)
name|enumeration
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
comment|// browse the third.
name|assertTrue
argument_list|(
literal|"Should have received the third message"
argument_list|,
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|outbound
index|[
literal|2
index|]
argument_list|,
operator|(
name|Message
operator|)
name|enumeration
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should be no more.
name|boolean
name|tooMany
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|enumeration
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got extra message: "
operator|+
operator|(
operator|(
name|TextMessage
operator|)
name|enumeration
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|tooMany
operator|=
literal|true
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|tooMany
argument_list|)
expr_stmt|;
name|browser
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Re-open the consumer.
name|consumer
operator|=
name|resourceProvider
operator|.
name|createConsumer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
comment|// Receive the second.
name|assertEquals
argument_list|(
name|outbound
index|[
literal|1
index|]
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Receive the third.
name|assertEquals
argument_list|(
name|outbound
index|[
literal|2
index|]
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

