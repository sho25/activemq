begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|vm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerRegistry
import|;
end_import

begin_class
specifier|public
class|class
name|VMTransportBrokerNameTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MY_BROKER
init|=
literal|"myBroker"
decl_stmt|;
specifier|final
name|String
name|vmUrl
init|=
literal|"vm:(broker:(tcp://localhost:61616)/"
operator|+
name|MY_BROKER
operator|+
literal|"?persistent=false)"
decl_stmt|;
specifier|public
name|void
name|testBrokerName
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
operator|new
name|URI
argument_list|(
name|vmUrl
argument_list|)
argument_list|)
decl_stmt|;
name|ActiveMQConnection
name|c1
init|=
operator|(
name|ActiveMQConnection
operator|)
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Transport has name in it: "
operator|+
name|c1
operator|.
name|getTransport
argument_list|()
argument_list|,
name|c1
operator|.
name|getTransport
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|MY_BROKER
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify Broker is there with name
name|ActiveMQConnectionFactory
name|cfbyName
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
operator|new
name|URI
argument_list|(
literal|"vm://"
operator|+
name|MY_BROKER
operator|+
literal|"?create=false"
argument_list|)
argument_list|)
decl_stmt|;
name|Connection
name|c2
init|=
name|cfbyName
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|lookup
argument_list|(
name|MY_BROKER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|findFirst
argument_list|()
operator|.
name|getBrokerName
argument_list|()
argument_list|,
name|MY_BROKER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BrokerRegistry
operator|.
name|getInstance
argument_list|()
operator|.
name|getBrokers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|c1
operator|.
name|close
argument_list|()
expr_stmt|;
name|c2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

