begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2005 Your Corporation. All Rights Reserved.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import

begin_class
class|class
name|CommandParser
block|{
specifier|private
specifier|final
name|StompWireFormat
name|format
decl_stmt|;
name|CommandParser
parameter_list|(
name|StompWireFormat
name|wireFormat
parameter_list|)
block|{
name|format
operator|=
name|wireFormat
expr_stmt|;
block|}
name|Command
name|parse
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|String
name|line
decl_stmt|;
comment|// skip white space to next real line
try|try
block|{
while|while
condition|(
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{             }
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"connection was closed"
argument_list|)
throw|;
block|}
comment|// figure correct command and return it
name|StompCommand
name|command
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|CONNECT
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Connect
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|SUBSCRIBE
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Subscribe
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|SEND
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Send
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|DISCONNECT
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Disconnect
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|BEGIN
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Begin
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|COMMIT
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Commit
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|ABORT
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Abort
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|UNSUBSCRIBE
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Unsubscribe
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|Stomp
operator|.
name|Commands
operator|.
name|ACK
argument_list|)
condition|)
name|command
operator|=
operator|new
name|Ack
argument_list|(
name|format
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|in
operator|.
name|readByte
argument_list|()
operator|==
literal|0
condition|)
block|{             }
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Unknown command ["
operator|+
name|line
operator|+
literal|"]"
argument_list|)
throw|;
block|}
specifier|final
name|CommandEnvelope
name|envelope
init|=
name|command
operator|.
name|build
argument_list|(
name|line
argument_list|,
name|in
argument_list|)
decl_stmt|;
specifier|final
name|short
name|commandId
init|=
name|format
operator|.
name|generateCommandId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|client_packet_key
init|=
name|envelope
operator|.
name|getHeaders
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|RECEIPT_REQUESTED
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|receiptRequested
init|=
name|client_packet_key
operator|!=
literal|null
decl_stmt|;
name|envelope
operator|.
name|getCommand
argument_list|()
operator|.
name|setCommandId
argument_list|(
name|commandId
argument_list|)
expr_stmt|;
if|if
condition|(
name|receiptRequested
operator|||
name|envelope
operator|.
name|getResponseListener
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|envelope
operator|.
name|getCommand
argument_list|()
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|envelope
operator|.
name|getResponseListener
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|format
operator|.
name|addResponseListener
argument_list|(
name|envelope
operator|.
name|getResponseListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|format
operator|.
name|addResponseListener
argument_list|(
operator|new
name|ResponseListener
argument_list|()
block|{
specifier|public
name|boolean
name|onResponse
parameter_list|(
name|Response
name|receipt
parameter_list|,
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|receipt
operator|.
name|getCorrelationId
argument_list|()
operator|!=
name|commandId
condition|)
return|return
literal|false
return|;
name|out
operator|.
name|write
argument_list|(
operator|new
name|FrameBuilder
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|RECEIPT
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Response
operator|.
name|RECEIPT_ID
argument_list|,
name|client_packet_key
argument_list|)
operator|.
name|toFrame
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|envelope
operator|.
name|getCommand
argument_list|()
return|;
block|}
block|}
end_class

end_unit

