begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpContentTypeSupportTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeWithOnlyType
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"type"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeEndsWithSlash
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"type/"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeMissingSubtype
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"type/;"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeEmptyString
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeNullString
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeNoParamsAfterSeparatorNonTextual
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Expect null as this is not a textual type
name|doParseContentTypeTestImpl
argument_list|(
literal|"type/subtype;"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeNoParamsAfterSeparatorTextualType
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeEmptyParamsAfterSeparator
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;;"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeNoParams
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithCharsetUtf8
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithCharsetAscii
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithMultipleParams
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain; param=value; charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithCharsetQuoted
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=\"us-ascii\""
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeWithCharsetQuotedEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=\"\""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeWithCharsetQuoteNotClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=\"unclosed"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeWithCharsetQuoteNotClosedEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=\""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|InvalidContentTypeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testParseContentTypeWithNoCharsetValue
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset="
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithTextPlain
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/plain"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithTextJson
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/json;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/json;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/json;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/json"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithTextHtml
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/html;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/html;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/html;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/html"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithTextFoo
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/foo;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/foo;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/foo;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"text/foo"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationJson
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/json;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/json;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/json;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/json"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationJsonVariant
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+json;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+json;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+json;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+json"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationJavascript
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/javascript;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/javascript;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/javascript;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/javascript"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationEcmascript
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/ecmascript;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/ecmascript;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/ecmascript;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/ecmascript"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationXml
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationXmlVariant
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+xml;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+xml;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+xml;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/something+xml"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationXmlDtd
parameter_list|()
throws|throws
name|Exception
block|{
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd;charset=iso-8859-1"
argument_list|,
name|StandardCharsets
operator|.
name|ISO_8859_1
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd;charset=us-ascii"
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd;charset=utf-8"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/xml-dtd"
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationOtherNotTextual
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Expect null as this is not a textual type
name|doParseContentTypeTestImpl
argument_list|(
literal|"application/other"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationOctetStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Expect null as this is not a textual type
name|doParseContentTypeTestImpl
argument_list|(
name|AmqpMessageSupport
operator|.
name|OCTET_STREAM_CONTENT_TYPE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseContentTypeWithApplicationJavaSerialized
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Expect null as this is not a textual type
name|doParseContentTypeTestImpl
argument_list|(
name|AmqpMessageSupport
operator|.
name|SERIALIZED_JAVA_OBJECT_CONTENT_TYPE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doParseContentTypeTestImpl
parameter_list|(
name|String
name|contentType
parameter_list|,
name|Charset
name|expected
parameter_list|)
throws|throws
name|InvalidContentTypeException
block|{
name|Charset
name|charset
init|=
name|AmqpContentTypeSupport
operator|.
name|parseContentTypeForTextualCharset
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
literal|"Expected no charset, but got:"
operator|+
name|charset
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Charset not as expected"
argument_list|,
name|expected
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

