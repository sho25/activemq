begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|SchedulerTimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|AbstractInactivityMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|InactivityIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ThreadPoolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpInactivityMonitor
extends|extends
name|TransportFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpInactivityMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ThreadPoolExecutor
name|ASYNC_TASKS
decl_stmt|;
specifier|private
specifier|static
name|int
name|CHECKER_COUNTER
decl_stmt|;
specifier|private
specifier|static
name|Timer
name|ACTIVITY_CHECK_TIMER
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
name|IAmqpProtocolConverter
name|protocolConverter
decl_stmt|;
specifier|private
name|long
name|connectionTimeout
init|=
name|AmqpWireFormat
operator|.
name|DEFAULT_CONNECTION_TIMEOUT
decl_stmt|;
specifier|private
name|SchedulerTimerTask
name|connectCheckerTask
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|connectChecker
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|private
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|now
operator|-
name|startTime
operator|)
operator|>=
name|connectionTimeout
operator|&&
name|connectCheckerTask
operator|!=
literal|null
operator|&&
operator|!
name|ASYNC_TASKS
operator|.
name|isTerminating
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No connection attempt made in time for "
operator|+
name|AmqpInactivityMonitor
operator|.
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"! Throwing InactivityIOException."
argument_list|)
expr_stmt|;
block|}
name|ASYNC_TASKS
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|onException
argument_list|(
operator|new
name|InactivityIOException
argument_list|(
literal|"Channel was inactive for too (>"
operator|+
operator|(
name|connectionTimeout
operator|)
operator|+
literal|") long: "
operator|+
name|next
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
specifier|public
name|AmqpInactivityMonitor
parameter_list|(
name|Transport
name|next
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|next
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopConnectChecker
argument_list|()
expr_stmt|;
name|next
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
name|failed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|stopConnectChecker
argument_list|()
expr_stmt|;
if|if
condition|(
name|protocolConverter
operator|!=
literal|null
condition|)
block|{
name|protocolConverter
operator|.
name|onAMQPException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
name|transportListener
operator|.
name|onException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setProtocolConverter
parameter_list|(
name|IAmqpProtocolConverter
name|protocolConverter
parameter_list|)
block|{
name|this
operator|.
name|protocolConverter
operator|=
name|protocolConverter
expr_stmt|;
block|}
specifier|public
name|IAmqpProtocolConverter
name|getProtocolConverter
parameter_list|()
block|{
return|return
name|protocolConverter
return|;
block|}
specifier|synchronized
name|void
name|startConnectChecker
parameter_list|(
name|long
name|connectionTimeout
parameter_list|)
block|{
name|this
operator|.
name|connectionTimeout
operator|=
name|connectionTimeout
expr_stmt|;
if|if
condition|(
name|connectionTimeout
operator|>
literal|0
operator|&&
name|connectCheckerTask
operator|==
literal|null
condition|)
block|{
name|connectCheckerTask
operator|=
operator|new
name|SchedulerTimerTask
argument_list|(
name|connectChecker
argument_list|)
expr_stmt|;
name|long
name|connectionCheckInterval
init|=
name|Math
operator|.
name|min
argument_list|(
name|connectionTimeout
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|AbstractInactivityMonitor
operator|.
name|class
init|)
block|{
if|if
condition|(
name|CHECKER_COUNTER
operator|==
literal|0
condition|)
block|{
name|ASYNC_TASKS
operator|=
name|createExecutor
argument_list|()
expr_stmt|;
name|ACTIVITY_CHECK_TIMER
operator|=
operator|new
name|Timer
argument_list|(
literal|"AMQP InactivityMonitor State Check"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|CHECKER_COUNTER
operator|++
expr_stmt|;
name|ACTIVITY_CHECK_TIMER
operator|.
name|schedule
argument_list|(
name|connectCheckerTask
argument_list|,
name|connectionCheckInterval
argument_list|,
name|connectionCheckInterval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|synchronized
name|void
name|stopConnectChecker
parameter_list|()
block|{
if|if
condition|(
name|connectCheckerTask
operator|!=
literal|null
condition|)
block|{
name|connectCheckerTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|connectCheckerTask
operator|=
literal|null
expr_stmt|;
synchronized|synchronized
init|(
name|AbstractInactivityMonitor
operator|.
name|class
init|)
block|{
name|ACTIVITY_CHECK_TIMER
operator|.
name|purge
argument_list|()
expr_stmt|;
name|CHECKER_COUNTER
operator|--
expr_stmt|;
if|if
condition|(
name|CHECKER_COUNTER
operator|==
literal|0
condition|)
block|{
name|ACTIVITY_CHECK_TIMER
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|ACTIVITY_CHECK_TIMER
operator|=
literal|null
expr_stmt|;
name|ThreadPoolUtils
operator|.
name|shutdown
argument_list|(
name|ASYNC_TASKS
argument_list|)
expr_stmt|;
name|ASYNC_TASKS
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|final
name|ThreadFactory
name|factory
init|=
operator|new
name|ThreadFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"AmqpInactivityMonitor Async Task: "
operator|+
name|runnable
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|createExecutor
parameter_list|()
block|{
name|ThreadPoolExecutor
name|exec
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|exec
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|exec
return|;
block|}
block|}
end_class

end_unit

