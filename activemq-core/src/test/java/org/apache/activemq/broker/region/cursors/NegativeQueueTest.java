begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|cursors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|StorePendingQueueMessageStoragePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|MemoryUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|StoreUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|TempUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_comment
comment|/**  * Modified CursorSupport Unit test to reproduce the negative queue issue.  *   * Keys to reproducing:  * 1) Consecutive queues with listener on first sending to second queue  * 2) Push each queue to the memory limit  *      This seems to help reproduce the issue more consistently, but  *      we have seen times in our production environment where the  *      negative queue can occur without. Our memory limits are  *      very high in production and it still happens in varying   *      frequency.  * 3) Prefetch  *      Lowering the prefetch down to 10 and below seems to help   *      reduce occurrences.   * 4) # of consumers per queue  *      The issue occurs less with fewer consumers  *   * Things that do not affect reproduction:  * 1) Spring - we use spring in our production applications, but this test case works  *      with or without it.  * 2) transacted  *   */
end_comment

begin_class
specifier|public
class|class
name|NegativeQueueTest
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd,hh:mm:ss:SSS"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_1_NAME
init|=
literal|"conn.test.queue.1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_2_NAME
init|=
literal|"conn.test.queue.2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|QUEUE_MEMORY_LIMIT
init|=
literal|2097152
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MEMORY_USAGE
init|=
literal|400000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|TEMP_USAGE
init|=
literal|200000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|STORE_USAGE
init|=
literal|1000000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|2000
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|TRANSACTED
init|=
literal|true
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|boolean
name|DEBUG
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
name|int
name|NUM_CONSUMERS
init|=
literal|20
decl_stmt|;
specifier|protected
specifier|static
name|int
name|PREFETCH_SIZE
init|=
literal|1000
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|String
name|bindAddress
init|=
literal|"tcp://localhost:60706"
decl_stmt|;
specifier|public
name|void
name|testWithDefaultPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
name|PREFETCH_SIZE
operator|=
literal|1000
expr_stmt|;
name|NUM_CONSUMERS
operator|=
literal|20
expr_stmt|;
name|blastAndConsume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testWithDefaultPrefetchFiveConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|PREFETCH_SIZE
operator|=
literal|1000
expr_stmt|;
name|NUM_CONSUMERS
operator|=
literal|5
expr_stmt|;
name|blastAndConsume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testWithDefaultPrefetchTwoConsumers
parameter_list|()
throws|throws
name|Exception
block|{
name|PREFETCH_SIZE
operator|=
literal|1000
expr_stmt|;
name|NUM_CONSUMERS
operator|=
literal|2
expr_stmt|;
name|blastAndConsume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testWithDefaultPrefetchOneConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|PREFETCH_SIZE
operator|=
literal|1000
expr_stmt|;
name|NUM_CONSUMERS
operator|=
literal|1
expr_stmt|;
name|blastAndConsume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testWithMediumPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
name|PREFETCH_SIZE
operator|=
literal|50
expr_stmt|;
name|NUM_CONSUMERS
operator|=
literal|20
expr_stmt|;
name|blastAndConsume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testWithSmallPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
name|PREFETCH_SIZE
operator|=
literal|10
expr_stmt|;
name|NUM_CONSUMERS
operator|=
literal|20
expr_stmt|;
name|blastAndConsume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testWithNoPrefetch
parameter_list|()
throws|throws
name|Exception
block|{
name|PREFETCH_SIZE
operator|=
literal|1
expr_stmt|;
name|NUM_CONSUMERS
operator|=
literal|20
expr_stmt|;
name|blastAndConsume
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|blastAndConsume
parameter_list|()
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
comment|//get proxy queues for statistics lookups
name|Connection
name|proxyConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|proxyConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|proxySession
init|=
name|proxyConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|QueueViewMBean
name|proxyQueue1
init|=
name|getProxyToQueueViewMBean
argument_list|(
operator|(
name|Queue
operator|)
name|proxySession
operator|.
name|createQueue
argument_list|(
name|QUEUE_1_NAME
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|QueueViewMBean
name|proxyQueue2
init|=
name|getProxyToQueueViewMBean
argument_list|(
operator|(
name|Queue
operator|)
name|proxySession
operator|.
name|createQueue
argument_list|(
name|QUEUE_2_NAME
argument_list|)
argument_list|)
decl_stmt|;
comment|// LOAD THE QUEUE
name|Connection
name|producerConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|producerConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|producerConnection
operator|.
name|createSession
argument_list|(
name|TRANSACTED
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_1_NAME
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TextMessage
argument_list|>
name|senderList
init|=
operator|new
name|ArrayList
argument_list|<
name|TextMessage
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|TextMessage
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|i
operator|+
literal|" "
operator|+
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|senderList
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|TRANSACTED
condition|)
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|DEBUG
operator|&&
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|int
name|index
init|=
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|index
operator|-
operator|(
operator|(
name|index
operator|/
literal|10
operator|)
operator|*
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//get access to the Queue info
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue1 Size = "
operator|+
name|proxyQueue1
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue1 Memory % Used = "
operator|+
name|proxyQueue1
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue1 Memory Available = "
operator|+
name|proxyQueue1
operator|.
name|getMemoryLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// FLUSH THE QUEUE
specifier|final
name|CountDownLatch
name|latch1
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch2
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Connection
index|[]
name|consumerConnections1
init|=
operator|new
name|Connection
index|[
name|NUM_CONSUMERS
index|]
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|consumerList1
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
name|Connection
index|[]
name|consumerConnections2
init|=
operator|new
name|Connection
index|[
name|NUM_CONSUMERS
index|]
decl_stmt|;
name|Connection
index|[]
name|producerConnections2
init|=
operator|new
name|Connection
index|[
name|NUM_CONSUMERS
index|]
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|consumerList2
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ix
init|=
literal|0
init|;
name|ix
operator|<
name|NUM_CONSUMERS
condition|;
name|ix
operator|++
control|)
block|{
name|producerConnections2
index|[
name|ix
index|]
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|producerConnections2
index|[
name|ix
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumerConnections1
index|[
name|ix
index|]
operator|=
name|getConsumerConnection
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConnections1
index|[
name|ix
index|]
operator|.
name|createSession
argument_list|(
name|TRANSACTED
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_1_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|SessionAwareMessageListener
argument_list|(
name|producerConnections2
index|[
name|ix
index|]
argument_list|,
name|consumerSession
argument_list|,
name|QUEUE_2_NAME
argument_list|,
name|latch1
argument_list|,
name|consumerList1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch1
operator|.
name|await
argument_list|(
literal|200000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue2 Size = "
operator|+
name|proxyQueue2
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue2 Memory % Used = "
operator|+
name|proxyQueue2
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue2 Memory Available = "
operator|+
name|proxyQueue2
operator|.
name|getMemoryLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|ix
init|=
literal|0
init|;
name|ix
operator|<
name|NUM_CONSUMERS
condition|;
name|ix
operator|++
control|)
block|{
name|consumerConnections2
index|[
name|ix
index|]
operator|=
name|getConsumerConnection
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|Session
name|consumerSession
init|=
name|consumerConnections2
index|[
name|ix
index|]
operator|.
name|createSession
argument_list|(
name|TRANSACTED
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_2_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
operator|new
name|SessionAwareMessageListener
argument_list|(
name|consumerSession
argument_list|,
name|latch2
argument_list|,
name|consumerList2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|latch2
operator|.
name|await
argument_list|(
literal|300000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|producerConnection
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|ix
init|=
literal|0
init|;
name|ix
operator|<
name|NUM_CONSUMERS
condition|;
name|ix
operator|++
control|)
block|{
name|consumerConnections1
index|[
name|ix
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerConnections2
index|[
name|ix
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|producerConnections2
index|[
name|ix
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//let the consumer statistics on queue2 have time to update
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue1 Size = "
operator|+
name|proxyQueue1
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue1 Memory % Used = "
operator|+
name|proxyQueue1
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue2 Size = "
operator|+
name|proxyQueue2
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Queue2 Memory % Used = "
operator|+
name|proxyQueue2
operator|.
name|getMemoryPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|0
operator|==
name|proxyQueue1
operator|.
name|getQueueSize
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue1 has gone negative,"
argument_list|,
literal|0
argument_list|,
name|proxyQueue1
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|0
operator|==
name|proxyQueue2
operator|.
name|getQueueSize
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Queue2 has gone negative,"
argument_list|,
literal|0
argument_list|,
name|proxyQueue2
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|proxyConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|QueueViewMBean
name|getProxyToQueueViewMBean
parameter_list|(
name|Queue
name|queue
parameter_list|)
throws|throws
name|MalformedObjectNameException
throws|,
name|JMSException
block|{
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq"
operator|+
literal|":Type=Queue,Destination="
operator|+
name|queue
operator|.
name|getQueueName
argument_list|()
operator|+
literal|",BrokerName=localhost"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|proxy
return|;
block|}
specifier|protected
name|Connection
name|getConsumerConnection
parameter_list|(
name|ConnectionFactory
name|fac
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|connection
init|=
name|fac
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|==
literal|null
condition|)
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|bindAddress
argument_list|)
decl_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"prefetchPolicy.durableTopicPrefetch"
argument_list|,
literal|""
operator|+
name|PREFETCH_SIZE
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"prefetchPolicy.optimizeDurableTopicPrefetch"
argument_list|,
literal|""
operator|+
name|PREFETCH_SIZE
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
literal|"prefetchPolicy.queuePrefetch"
argument_list|,
literal|""
operator|+
name|PREFETCH_SIZE
argument_list|)
expr_stmt|;
name|cf
operator|.
name|setProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
return|return
name|cf
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|configureBroker
argument_list|(
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
name|answer
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|answer
parameter_list|)
throws|throws
name|Exception
block|{
name|PolicyEntry
name|policy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policy
operator|.
name|setMemoryLimit
argument_list|(
name|QUEUE_MEMORY_LIMIT
argument_list|)
expr_stmt|;
name|policy
operator|.
name|setPendingQueuePolicy
argument_list|(
operator|new
name|StorePendingQueueMessageStoragePolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable the cache to be sure setBatch is the problem
comment|// will get lots of duplicates
comment|// policy.setUseCache(false);
name|PolicyMap
name|pMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|pMap
operator|.
name|setDefaultEntry
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDestinationPolicy
argument_list|(
name|pMap
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|answer
operator|.
name|addConnector
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|MemoryUsage
name|memoryUsage
init|=
operator|new
name|MemoryUsage
argument_list|()
decl_stmt|;
name|memoryUsage
operator|.
name|setLimit
argument_list|(
name|MEMORY_USAGE
argument_list|)
expr_stmt|;
name|memoryUsage
operator|.
name|setPercentUsageMinDelta
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|TempUsage
name|tempUsage
init|=
operator|new
name|TempUsage
argument_list|()
decl_stmt|;
name|tempUsage
operator|.
name|setLimit
argument_list|(
name|TEMP_USAGE
argument_list|)
expr_stmt|;
name|StoreUsage
name|storeUsage
init|=
operator|new
name|StoreUsage
argument_list|()
decl_stmt|;
name|storeUsage
operator|.
name|setLimit
argument_list|(
name|STORE_USAGE
argument_list|)
expr_stmt|;
name|SystemUsage
name|systemUsage
init|=
operator|new
name|SystemUsage
argument_list|()
decl_stmt|;
name|systemUsage
operator|.
name|setMemoryUsage
argument_list|(
name|memoryUsage
argument_list|)
expr_stmt|;
name|systemUsage
operator|.
name|setTempUsage
argument_list|(
name|tempUsage
argument_list|)
expr_stmt|;
name|systemUsage
operator|.
name|setStoreUsage
argument_list|(
name|storeUsage
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setSystemUsage
argument_list|(
name|systemUsage
argument_list|)
expr_stmt|;
block|}
comment|/**      * Message listener that is given the Session for transacted consumers      */
class|class
name|SessionAwareMessageListener
implements|implements
name|MessageListener
block|{
specifier|private
name|List
argument_list|<
name|Message
argument_list|>
name|consumerList
decl_stmt|;
specifier|private
name|CountDownLatch
name|latch
decl_stmt|;
specifier|private
name|Session
name|consumerSession
decl_stmt|;
specifier|private
name|Session
name|producerSession
decl_stmt|;
specifier|private
name|MessageProducer
name|producer
decl_stmt|;
specifier|public
name|SessionAwareMessageListener
parameter_list|(
name|Session
name|consumerSession
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|List
argument_list|<
name|Message
argument_list|>
name|consumerList
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|consumerSession
argument_list|,
literal|null
argument_list|,
name|latch
argument_list|,
name|consumerList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionAwareMessageListener
parameter_list|(
name|Connection
name|producerConnection
parameter_list|,
name|Session
name|consumerSession
parameter_list|,
name|String
name|outQueueName
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|List
argument_list|<
name|Message
argument_list|>
name|consumerList
parameter_list|)
block|{
name|this
operator|.
name|consumerList
operator|=
name|consumerList
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|consumerSession
operator|=
name|consumerSession
expr_stmt|;
if|if
condition|(
name|producerConnection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|producerSession
operator|=
name|producerConnection
operator|.
name|createSession
argument_list|(
name|TRANSACTED
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Destination
name|queue
init|=
name|producerSession
operator|.
name|createQueue
argument_list|(
name|outQueueName
argument_list|)
decl_stmt|;
name|producer
operator|=
name|producerSession
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|msg
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|producer
operator|==
literal|null
condition|)
block|{
comment|// sleep to act as a slow consumer
comment|// which will force a mix of direct and polled dispatching
comment|// using the cursor on the broker
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|TRANSACTED
condition|)
name|producerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|consumerList
init|)
block|{
name|consumerList
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEBUG
operator|&&
name|consumerList
operator|.
name|size
argument_list|()
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|int
name|index
init|=
name|consumerList
operator|.
name|size
argument_list|()
operator|/
literal|100
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|index
operator|-
operator|(
operator|(
name|index
operator|/
literal|10
operator|)
operator|*
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|consumerList
operator|.
name|size
argument_list|()
operator|==
name|MESSAGE_COUNT
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|TRANSACTED
condition|)
block|{
try|try
block|{
name|consumerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

