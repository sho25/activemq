begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FailoverTransportBackupsTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FailoverTransportBackupsTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|Transport
name|transport
decl_stmt|;
specifier|protected
name|FailoverTransport
name|failoverTransport
decl_stmt|;
specifier|private
name|int
name|commandsReceived
decl_stmt|;
specifier|private
name|int
name|exceptionReceived
decl_stmt|;
specifier|private
name|int
name|transportInterruptions
decl_stmt|;
specifier|private
name|int
name|transportResumptions
decl_stmt|;
name|BrokerService
name|broker1
decl_stmt|;
name|BrokerService
name|broker2
decl_stmt|;
name|BrokerService
name|broker3
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker1
operator|=
name|createBroker
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|broker2
operator|=
name|createBroker
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|broker3
operator|=
name|createBroker
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker3
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|broker3
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
comment|// Reset stats
name|commandsReceived
operator|=
literal|0
expr_stmt|;
name|exceptionReceived
operator|=
literal|0
expr_stmt|;
name|transportInterruptions
operator|=
literal|0
expr_stmt|;
name|transportResumptions
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker1
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker2
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|broker3
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker3
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackupsAreCreated
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|transport
operator|=
name|createTransport
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|failoverTransport
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failoverTransport
operator|.
name|isBackup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|failoverTransport
operator|.
name|getBackupPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timed out waiting for Backups to connect."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Backup Count = "
operator|+
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverToBackups
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|transport
operator|=
name|createTransport
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|failoverTransport
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failoverTransport
operator|.
name|isBackup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|failoverTransport
operator|.
name|getBackupPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timed out waiting for Backups to connect."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Backup Count = "
operator|+
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
operator|==
literal|2
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timed out waiting for Backups to connect."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Backup Count = "
operator|+
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect number of Transport interruptions"
argument_list|,
name|transportInterruptions
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect number of Transport resumptions"
argument_list|,
name|transportResumptions
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timed out waiting for Backups to connect."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Backup Count = "
operator|+
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect number of Transport interruptions"
argument_list|,
name|transportInterruptions
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Incorrect number of Transport resumptions"
argument_list|,
name|transportResumptions
operator|>=
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackupsRefilled
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|transport
operator|=
name|createTransport
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|failoverTransport
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|failoverTransport
operator|.
name|isBackup
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|failoverTransport
operator|.
name|getBackupPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timed out waiting for Backups to connect."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Backup Count = "
operator|+
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timed out waiting for Backups to connect."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Backup Count = "
operator|+
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|stop
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timed out waiting for Backups to connect."
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current Backup Count = "
operator|+
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|failoverTransport
operator|.
name|getCurrentBackups
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|BrokerService
name|createBroker
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|bs
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|bs
operator|.
name|setBrokerName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|bs
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bs
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bs
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
expr_stmt|;
return|return
name|bs
return|;
block|}
specifier|protected
name|Transport
name|createTransport
parameter_list|(
name|int
name|backups
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|connectionUri
init|=
literal|"failover://("
operator|+
name|broker1
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|","
operator|+
name|broker2
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|","
operator|+
name|broker3
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|")"
decl_stmt|;
if|if
condition|(
name|backups
operator|>
literal|0
condition|)
block|{
name|connectionUri
operator|+=
literal|"?randomize=false&backup=true&backupPoolSize="
operator|+
name|backups
expr_stmt|;
block|}
name|Transport
name|transport
init|=
name|TransportFactory
operator|.
name|connect
argument_list|(
operator|new
name|URI
argument_list|(
name|connectionUri
argument_list|)
argument_list|)
decl_stmt|;
name|transport
operator|.
name|setTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test Transport Listener received Command: "
operator|+
name|command
argument_list|)
expr_stmt|;
name|commandsReceived
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test Transport Listener received Exception: "
operator|+
name|error
argument_list|)
expr_stmt|;
name|exceptionReceived
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{
name|transportInterruptions
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test Transport Listener records transport Interrupted: "
operator|+
name|transportInterruptions
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{
name|transportResumptions
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Test Transport Listener records transport Resumed: "
operator|+
name|transportResumptions
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
name|this
operator|.
name|failoverTransport
operator|=
name|transport
operator|.
name|narrow
argument_list|(
name|FailoverTransport
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|transport
return|;
block|}
block|}
end_class

end_unit

