begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|PacketInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|command
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|FlushCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|LocalTransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|SessionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * Implements the<a href="http://stomp.codehaus.org/">Stomp</a> protocol.  */
end_comment

begin_class
specifier|public
class|class
name|StompWireFormat
implements|implements
name|WireFormat
block|{
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|connectionIdGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|transactionIdCounter
decl_stmt|;
specifier|private
name|int
name|version
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|CommandParser
name|commandParser
init|=
operator|new
name|CommandParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HeaderParser
name|headerParser
init|=
operator|new
name|HeaderParser
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
name|pendingReadCommands
init|=
operator|new
name|LinkedBlockingQueue
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|BlockingQueue
name|pendingWriteFrames
init|=
operator|new
name|LinkedBlockingQueue
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
name|receiptListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|subscriptionsByName
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|DestinationMap
name|subscriptionsByDestination
init|=
operator|new
name|DestinationMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|transactions
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
name|dispachedMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
specifier|private
name|short
name|lastCommandId
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|connectionIdGenerator
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SessionId
name|sessionId
init|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
name|sessionId
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|consumerIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
name|void
name|addResponseListener
parameter_list|(
name|ResponseListener
name|listener
parameter_list|)
block|{
name|receiptListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
name|boolean
name|connected
init|=
literal|false
decl_stmt|;
specifier|public
name|Command
name|readCommand
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|Command
name|pending
init|=
operator|(
name|Command
operator|)
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|HelperWithReturn
argument_list|()
block|{
specifier|public
name|Object
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
return|return
name|pendingReadCommands
operator|.
name|poll
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|pending
operator|!=
literal|null
condition|)
block|{
return|return
name|pending
return|;
block|}
try|try
block|{
name|Command
name|command
init|=
name|commandParser
operator|.
name|parse
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|connected
condition|)
block|{
if|if
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
operator|!=
name|ConnectionInfo
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Not yet connected."
argument_list|)
throw|;
block|}
return|return
name|command
return|;
block|}
catch|catch
parameter_list|(
name|ProtocolException
name|e
parameter_list|)
block|{
name|sendError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|FlushCommand
operator|.
name|COMMAND
return|;
block|}
block|}
specifier|public
name|Command
name|writeCommand
parameter_list|(
specifier|final
name|Command
name|packet
parameter_list|,
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|flushPendingFrames
argument_list|(
name|out
argument_list|)
expr_stmt|;
comment|// It may have just been a flush request.
if|if
condition|(
name|packet
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|packet
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|CommandTypes
operator|.
name|RESPONSE
condition|)
block|{
assert|assert
operator|(
name|packet
operator|instanceof
name|Response
operator|)
assert|;
name|Response
name|receipt
init|=
operator|(
name|Response
operator|)
name|packet
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|receiptListeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ResponseListener
name|listener
init|=
operator|(
name|ResponseListener
operator|)
name|receiptListeners
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|.
name|onResponse
argument_list|(
name|receipt
argument_list|,
name|out
argument_list|)
condition|)
block|{
name|receiptListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
if|if
condition|(
name|packet
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|packet
decl_stmt|;
name|Message
name|message
init|=
name|md
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Subscription
name|sub
init|=
operator|(
name|Subscription
operator|)
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
name|sub
operator|.
name|receive
argument_list|(
name|md
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|flushPendingFrames
parameter_list|(
specifier|final
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|interrupted
init|=
literal|false
decl_stmt|;
do|do
block|{
try|try
block|{
name|byte
index|[]
name|frame
init|=
operator|(
name|byte
index|[]
operator|)
name|pendingWriteFrames
operator|.
name|poll
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|frame
operator|==
literal|null
condition|)
return|return;
name|out
operator|.
name|write
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|interrupted
operator|=
literal|true
expr_stmt|;
block|}
block|}
do|while
condition|(
name|interrupted
condition|)
do|;
block|}
specifier|private
name|void
name|sendError
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
comment|// System.err.println("sending error [" + message + "]");
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|Helper
argument_list|()
block|{
specifier|public
name|void
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pendingWriteFrames
operator|.
name|put
argument_list|(
operator|new
name|FrameBuilder
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|ERROR
argument_list|)
operator|.
name|addHeader
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|Error
operator|.
name|MESSAGE
argument_list|,
name|message
argument_list|)
operator|.
name|toFrame
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFullyConnected
parameter_list|()
block|{
name|connected
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|addToPendingReadCommands
parameter_list|(
specifier|final
name|Command
name|info
parameter_list|)
block|{
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|Helper
argument_list|()
block|{
specifier|public
name|void
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pendingReadCommands
operator|.
name|put
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|void
name|clearTransactionId
parameter_list|(
name|String
name|user_tx_id
parameter_list|)
block|{
name|this
operator|.
name|transactions
operator|.
name|remove
argument_list|(
name|user_tx_id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SessionId
name|getSessionId
parameter_list|()
block|{
return|return
name|sessionId
return|;
block|}
specifier|public
name|ProducerId
name|getProducerId
parameter_list|()
block|{
return|return
name|producerId
return|;
block|}
specifier|public
name|Subscription
name|getSubcription
parameter_list|(
name|ConsumerId
name|consumerId
parameter_list|)
block|{
return|return
operator|(
name|Subscription
operator|)
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|consumerId
argument_list|)
return|;
block|}
specifier|public
name|Set
name|getSubcriptions
parameter_list|(
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
return|return
name|subscriptionsByDestination
operator|.
name|get
argument_list|(
name|destination
argument_list|)
return|;
block|}
specifier|public
name|Subscription
name|getSubcription
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|Subscription
operator|)
name|subscriptionsByName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|addSubscription
parameter_list|(
name|Subscription
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|getSubscriptionId
argument_list|()
operator|!=
literal|null
operator|&&
name|subscriptionsByName
operator|.
name|containsKey
argument_list|(
name|s
operator|.
name|getSubscriptionId
argument_list|()
argument_list|)
condition|)
block|{
name|Subscription
name|old
init|=
operator|(
name|Subscription
operator|)
name|subscriptionsByName
operator|.
name|get
argument_list|(
name|s
operator|.
name|getSubscriptionId
argument_list|()
argument_list|)
decl_stmt|;
name|removeSubscription
argument_list|(
name|old
argument_list|)
expr_stmt|;
name|enqueueCommand
argument_list|(
name|old
operator|.
name|close
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|getSubscriptionId
argument_list|()
operator|!=
literal|null
condition|)
name|subscriptionsByName
operator|.
name|put
argument_list|(
name|s
operator|.
name|getSubscriptionId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|subscriptionsByConsumerId
operator|.
name|put
argument_list|(
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|subscriptionsByDestination
operator|.
name|put
argument_list|(
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|Subscription
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|getSubscriptionId
argument_list|()
operator|!=
literal|null
condition|)
name|subscriptionsByName
operator|.
name|remove
argument_list|(
name|s
operator|.
name|getSubscriptionId
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionsByConsumerId
operator|.
name|remove
argument_list|(
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|subscriptionsByDestination
operator|.
name|remove
argument_list|(
name|s
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enqueueCommand
parameter_list|(
specifier|final
name|Command
name|ack
parameter_list|)
block|{
name|AsyncHelper
operator|.
name|tryUntilNotInterrupted
argument_list|(
operator|new
name|AsyncHelper
operator|.
name|Helper
argument_list|()
block|{
specifier|public
name|void
name|cycle
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|pendingReadCommands
operator|.
name|put
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TransactionId
name|getTransactionId
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|TransactionId
operator|)
name|transactions
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|TransactionId
name|registerTransactionId
parameter_list|(
name|String
name|user_tx_id
parameter_list|,
name|int
name|tx_id
parameter_list|)
block|{
name|LocalTransactionId
name|transactionId
init|=
operator|new
name|LocalTransactionId
argument_list|(
name|getConnectionId
argument_list|()
argument_list|,
name|tx_id
argument_list|)
decl_stmt|;
name|transactions
operator|.
name|put
argument_list|(
name|user_tx_id
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
return|return
name|transactionId
return|;
block|}
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
name|version
return|;
block|}
specifier|public
name|void
name|setVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
block|}
specifier|public
name|ConnectionId
name|getConnectionId
parameter_list|()
block|{
return|return
name|connectionId
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|int
name|generateTransactionId
parameter_list|()
block|{
return|return
operator|++
name|transactionIdCounter
return|;
block|}
specifier|public
name|ConsumerId
name|createConsumerId
parameter_list|()
block|{
return|return
operator|new
name|ConsumerId
argument_list|(
name|sessionId
argument_list|,
name|consumerIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|MessageId
name|createMessageId
parameter_list|()
block|{
return|return
operator|new
name|MessageId
argument_list|(
name|producerId
argument_list|,
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
return|;
block|}
specifier|synchronized
specifier|public
name|short
name|generateCommandId
parameter_list|()
block|{
return|return
name|lastCommandId
operator|++
return|;
block|}
specifier|public
name|SessionId
name|generateSessionId
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TODO!!"
argument_list|)
throw|;
block|}
specifier|public
name|Packet
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|marshal
argument_list|(
name|command
argument_list|,
name|dos
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|ByteArrayPacket
argument_list|(
name|baos
operator|.
name|toByteSequence
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|PacketInputStream
name|stream
init|=
operator|new
name|PacketInputStream
argument_list|(
name|packet
argument_list|)
decl_stmt|;
name|DataInputStream
name|dis
init|=
operator|new
name|DataInputStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
return|return
name|unmarshal
argument_list|(
name|dis
argument_list|)
return|;
block|}
specifier|public
name|void
name|marshal
parameter_list|(
name|Object
name|command
parameter_list|,
name|DataOutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writeCommand
argument_list|(
operator|(
name|Command
operator|)
name|command
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|unmarshal
parameter_list|(
name|DataInputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|readCommand
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Map
name|getDispachedMap
parameter_list|()
block|{
return|return
name|dispachedMap
return|;
block|}
block|}
end_class

end_unit

