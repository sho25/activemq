begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|DefaultTestAppender
import|;
end_import

begin_comment
comment|/**  * Testcase for AMQ-6526.  * Checks if the \<Unknown\> in the Stomp ProtocolException is replaced  * with the proper Stomp operation.  *  */
end_comment

begin_class
specifier|public
class|class
name|StompNIOSSLLargeMessageTest
extends|extends
name|StompTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|StompNIOSSLLargeMessageTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Session
name|session
decl_stmt|;
specifier|private
name|ActiveMQQueue
name|queue
decl_stmt|;
comment|// flag to control if the bug in AMQ-XXXX got reproduced.
specifier|private
name|boolean
name|gotUnknownOperationInLog
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|stompFrameSize
init|=
literal|110000000
decl_stmt|;
comment|//slightly over 105 MB
comment|// custom Log4J appender so we can filter the logging output in this test.
specifier|protected
name|Appender
name|appender
init|=
operator|new
name|DefaultTestAppender
argument_list|()
block|{
comment|//@Override
specifier|public
name|void
name|doAppend
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"<Unknown>"
argument_list|)
operator|&&
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"The maximum data length was exceeded"
argument_list|)
condition|)
block|{
name|gotUnknownOperationInLog
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseTcpConnector
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseNioPlusSslConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Socket
name|createSocket
parameter_list|()
throws|throws
name|IOException
block|{
name|SocketFactory
name|factory
init|=
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
decl_stmt|;
return|return
name|factory
operator|.
name|createSocket
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|this
operator|.
name|nioSslPort
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
comment|// register custom Log4J Appender
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|stompConnect
argument_list|()
expr_stmt|;
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|queue
operator|=
operator|new
name|ActiveMQQueue
argument_list|(
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// unregister Log4J appender
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getRootLogger
argument_list|()
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a Stomp message larger than maxDataLength bytes.      * Expects to receive an exception from the broker.      * The broker will throw an Stomp ProtocolException of type      * "Exception occurred processing: SEND ->       * org.apache.activemq.transport.stomp.ProtocolException:       * The maximum data length was exceeded"      *       * Before bug AMQ-6526 this exception would contain \<Unkown\> for the       * operation name. With the fix it should print the Stomp operation.      *       * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|6000000
argument_list|)
specifier|public
name|void
name|testSendMessageBytes
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|frame
init|=
literal|"CONNECT\n"
operator|+
literal|"login:system\n"
operator|+
literal|"passcode:manager\n"
operator|+
literal|"accept-version:1.1"
operator|+
literal|"\n\n"
operator|+
name|Stomp
operator|.
name|NULL
decl_stmt|;
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
name|frame
operator|=
name|stompConnection
operator|.
name|receiveFrame
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|frame
operator|.
name|startsWith
argument_list|(
literal|"CONNECTED"
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|=
literal|"SEND\n"
operator|+
literal|"value:newest"
operator|+
literal|"\n"
operator|+
literal|"value:older"
operator|+
literal|"\n"
operator|+
literal|"value:oldest"
operator|+
literal|"\n"
operator|+
literal|"destination:/queue/"
operator|+
name|getQueueName
argument_list|()
operator|+
literal|"\n\n"
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
name|createLargeByteBuffer
argument_list|(
name|stompFrameSize
argument_list|)
decl_stmt|;
try|try
block|{
name|stompConnection
operator|.
name|sendFrame
argument_list|(
name|frame
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Stomp ProtocolException still contains<Unknown> operation."
argument_list|,
name|gotUnknownOperationInLog
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a large byte buffer and fills it with char 'X' except for the       * last byte, it gets value 0x0 assigned.      *       * @param size - the size of the array to be created.      * @return     */
specifier|protected
name|byte
index|[]
name|createLargeByteBuffer
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|buffer
index|[
name|i
index|]
operator|=
operator|(
name|char
operator|)
literal|'X'
expr_stmt|;
block|}
comment|//insert trailing 0x0
name|buffer
index|[
name|size
operator|-
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created byte buffer of size {} starting with content {}"
argument_list|,
name|size
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
block|}
end_class

end_unit

