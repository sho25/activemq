begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|BrokerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|NetworkBridgeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_comment
comment|/**  * Forwards messages from the local broker to the remote broker based on demand.  *   * @org.apache.xbean.XBean  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|DemandForwardingBridge
extends|extends
name|DemandForwardingBridgeSupport
block|{
specifier|protected
specifier|final
name|BrokerId
name|remoteBrokerPath
index|[]
init|=
operator|new
name|BrokerId
index|[]
block|{
literal|null
block|}
decl_stmt|;
specifier|protected
name|Object
name|brokerInfoMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
name|BrokerId
name|remoteBrokerId
decl_stmt|;
specifier|public
name|DemandForwardingBridge
parameter_list|(
name|Transport
name|localBroker
parameter_list|,
name|Transport
name|remoteBroker
parameter_list|)
block|{
name|super
argument_list|(
name|localBroker
argument_list|,
name|remoteBroker
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|serviceRemoteBrokerInfo
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|brokerInfoMutex
init|)
block|{
name|BrokerInfo
name|remoteBrokerInfo
init|=
operator|(
name|BrokerInfo
operator|)
name|command
decl_stmt|;
name|remoteBrokerId
operator|=
name|remoteBrokerInfo
operator|.
name|getBrokerId
argument_list|()
expr_stmt|;
name|remoteBrokerPath
index|[
literal|0
index|]
operator|=
name|remoteBrokerId
expr_stmt|;
name|remoteBrokerName
operator|=
name|remoteBrokerInfo
operator|.
name|getBrokerName
argument_list|()
expr_stmt|;
if|if
condition|(
name|localBrokerId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|localBrokerId
operator|.
name|equals
argument_list|(
name|remoteBrokerId
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Disconnecting loop back connection."
argument_list|)
expr_stmt|;
comment|//waitStarted();
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
name|triggerLocalStartBridge
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addRemoteBrokerToBrokerPath
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|)
block|{
name|info
operator|.
name|setBrokerPath
argument_list|(
name|appendToBrokerPath
argument_list|(
name|info
operator|.
name|getBrokerPath
argument_list|()
argument_list|,
name|remoteBrokerPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|serviceLocalBrokerInfo
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|InterruptedException
block|{
synchronized|synchronized
init|(
name|brokerInfoMutex
init|)
block|{
name|localBrokerId
operator|=
operator|(
operator|(
name|BrokerInfo
operator|)
name|command
operator|)
operator|.
name|getBrokerId
argument_list|()
expr_stmt|;
name|localBrokerPath
index|[
literal|0
index|]
operator|=
name|localBrokerId
expr_stmt|;
if|if
condition|(
name|remoteBrokerId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|remoteBrokerId
operator|.
name|equals
argument_list|(
name|localBrokerId
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Disconnecting loop back connection."
argument_list|)
expr_stmt|;
name|waitStarted
argument_list|()
expr_stmt|;
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|NetworkBridgeFilter
name|createNetworkBridgeFilter
parameter_list|()
block|{
return|return
operator|new
name|NetworkBridgeFilter
argument_list|(
name|remoteBrokerPath
index|[
literal|0
index|]
argument_list|,
name|networkTTL
argument_list|)
return|;
block|}
block|}
end_class

end_unit

