begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activecluster
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|DestinationMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activecluster
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Default implementation of a remote Node  *  * @version $Revision: 1.3 $  */
end_comment

begin_class
specifier|public
class|class
name|NodeImpl
implements|implements
name|Node
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3909792803360045064L
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Destination
name|destination
decl_stmt|;
specifier|protected
name|Map
name|state
decl_stmt|;
specifier|protected
name|boolean
name|coordinator
decl_stmt|;
comment|/**      * Construct an Node from a NodeState      * @param nodeState      * @param marshaller      */
specifier|public
name|NodeImpl
parameter_list|(
name|NodeState
name|nodeState
parameter_list|,
name|DestinationMarshaller
name|marshaller
parameter_list|)
block|{
name|this
argument_list|(
name|nodeState
operator|.
name|getName
argument_list|()
argument_list|,
name|marshaller
operator|.
name|getDestination
argument_list|(
name|nodeState
operator|.
name|getDestinationName
argument_list|()
argument_list|)
argument_list|,
name|nodeState
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Allow a node to be copied for sending it as a message      *      * @param node      */
specifier|public
name|NodeImpl
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|this
argument_list|(
name|node
operator|.
name|getName
argument_list|()
argument_list|,
name|node
operator|.
name|getDestination
argument_list|()
argument_list|,
name|node
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a Node      * @param name       * @param destination      */
specifier|public
name|NodeImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|Destination
name|destination
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|destination
argument_list|,
operator|new
name|HashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create A Node      * @param name      * @param destination      * @param state      */
specifier|public
name|NodeImpl
parameter_list|(
name|String
name|name
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|Map
name|state
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
comment|/**      * @return the name of the node      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * @return pretty print of the node      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Node[<"
operator|+
name|name
operator|+
literal|">destination: "
operator|+
name|destination
operator|+
literal|" state: "
operator|+
name|state
operator|+
literal|"]"
return|;
block|}
comment|/**      * @return the destination of the node      */
specifier|public
name|Destination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
comment|/**      * Get the State      * @return the State of the Node      */
specifier|public
specifier|synchronized
name|Map
name|getState
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|(
name|state
argument_list|)
return|;
block|}
comment|/**      * @return true if this node has been elected as coordinator      */
specifier|public
name|boolean
name|isCoordinator
parameter_list|()
block|{
return|return
name|coordinator
return|;
block|}
comment|/**      * Get the zone      * @return the Zone      */
specifier|public
name|Object
name|getZone
parameter_list|()
block|{
return|return
name|state
operator|.
name|get
argument_list|(
literal|"zone"
argument_list|)
return|;
block|}
comment|// Implementation methods
comment|//-------------------------------------------------------------------------
specifier|protected
specifier|synchronized
name|void
name|setState
parameter_list|(
name|Map
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
specifier|protected
name|void
name|setCoordinator
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|coordinator
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|writeExternal
parameter_list|(
name|ObjectOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
name|void
name|readExternal
parameter_list|(
name|ObjectInput
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

