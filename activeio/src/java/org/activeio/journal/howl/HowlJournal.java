begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 Hiram Chirino  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|howl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|InvalidRecordLocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|JournalEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|RecordLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|InvalidFileSetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|InvalidLogBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|InvalidLogKeyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|LogConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|LogEventListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|howl
operator|.
name|log
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * An implementation of the Journal interface using a HOWL logger.  This is is a thin  * wrapper around a HOWL logger.  *   * This implementation can be used to write records but not to retreive them  * yet. Once the HOWL logger implements the methods needed to retreive  * previously stored records, this class can be completed.  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
class|class
name|HowlJournal
implements|implements
name|Journal
block|{
specifier|private
specifier|final
name|Logger
name|logger
decl_stmt|;
specifier|private
name|RecordLocation
name|lastMark
decl_stmt|;
specifier|public
name|HowlJournal
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|InvalidFileSetException
throws|,
name|LogConfigurationException
throws|,
name|InvalidLogBufferException
throws|,
name|ClassNotFoundException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|logger
operator|=
operator|new
name|Logger
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|logger
operator|.
name|open
argument_list|()
expr_stmt|;
name|lastMark
operator|=
operator|new
name|LongRecordLocation
argument_list|(
name|logger
operator|.
name|getActiveMark
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.activeio.journal.Journal#write(byte[], boolean) 	 */
specifier|public
name|RecordLocation
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|,
name|boolean
name|sync
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
return|return
operator|new
name|LongRecordLocation
argument_list|(
name|logger
operator|.
name|put
argument_list|(
name|packet
operator|.
name|sliceAsBytes
argument_list|()
argument_list|,
name|sync
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Journal write failed: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @see org.activeio.journal.Journal#setMark(org.codehaus.activemq.journal.RecordLocation, boolean) 	 */
specifier|public
name|void
name|setMark
parameter_list|(
name|RecordLocation
name|recordLocator
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|InvalidRecordLocationException
throws|,
name|IOException
block|{
try|try
block|{
name|long
name|location
init|=
name|toLong
argument_list|(
name|recordLocator
argument_list|)
decl_stmt|;
name|logger
operator|.
name|mark
argument_list|(
name|location
argument_list|,
name|force
argument_list|)
expr_stmt|;
name|lastMark
operator|=
name|recordLocator
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidLogKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRecordLocationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Journal write failed: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param recordLocator      * @return      * @throws InvalidRecordLocationException      */
specifier|private
name|long
name|toLong
parameter_list|(
name|RecordLocation
name|recordLocator
parameter_list|)
throws|throws
name|InvalidRecordLocationException
block|{
if|if
condition|(
name|recordLocator
operator|==
literal|null
operator|||
name|recordLocator
operator|.
name|getClass
argument_list|()
operator|!=
name|LongRecordLocation
operator|.
name|class
condition|)
throw|throw
operator|new
name|InvalidRecordLocationException
argument_list|()
throw|;
name|long
name|location
init|=
operator|(
operator|(
name|LongRecordLocation
operator|)
name|recordLocator
operator|)
operator|.
name|getLongLocation
argument_list|()
decl_stmt|;
return|return
name|location
return|;
block|}
comment|/** 	 * @see org.activeio.journal.Journal#getMark() 	 */
specifier|public
name|RecordLocation
name|getMark
parameter_list|()
block|{
return|return
name|lastMark
return|;
block|}
comment|/** 	 * @see org.activeio.journal.Journal#close() 	 */
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|logger
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InterruptedIOException
operator|)
operator|new
name|InterruptedIOException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Journal close failed: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @see org.activeio.journal.Journal#setJournalEventListener(org.codehaus.activemq.journal.JournalEventListener) 	 */
specifier|public
name|void
name|setJournalEventListener
parameter_list|(
specifier|final
name|JournalEventListener
name|eventListener
parameter_list|)
block|{
name|logger
operator|.
name|setLogEventListener
argument_list|(
operator|new
name|LogEventListener
argument_list|()
block|{
specifier|public
name|void
name|logOverflowNotification
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|eventListener
operator|.
name|overflowNotification
argument_list|(
operator|new
name|LongRecordLocation
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.activeio.journal.Journal#getNextRecordLocation(org.codehaus.activemq.journal.RecordLocation) 	 */
specifier|public
name|RecordLocation
name|getNextRecordLocation
parameter_list|(
name|RecordLocation
name|lastLocation
parameter_list|)
throws|throws
name|InvalidRecordLocationException
block|{
if|if
condition|(
name|lastLocation
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|lastMark
operator|!=
literal|null
condition|)
block|{
name|lastLocation
operator|=
name|lastMark
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|LogRecord
name|record
init|=
name|logger
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|toLong
argument_list|(
name|lastLocation
argument_list|)
argument_list|)
decl_stmt|;
comment|// I assume getNext will return null if there is no next record.
name|LogRecord
name|next
init|=
name|logger
operator|.
name|getNext
argument_list|(
name|record
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
operator|||
name|next
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|lastLocation
operator|=
operator|new
name|LongRecordLocation
argument_list|(
name|next
operator|.
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|next
operator|.
name|isCTRL
argument_list|()
condition|)
return|return
name|lastLocation
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|InvalidRecordLocationException
operator|)
operator|new
name|InvalidRecordLocationException
argument_list|()
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @see org.activeio.journal.Journal#read(org.codehaus.activemq.journal.RecordLocation) 	 */
specifier|public
name|Packet
name|read
parameter_list|(
name|RecordLocation
name|location
parameter_list|)
throws|throws
name|InvalidRecordLocationException
throws|,
name|IOException
block|{
try|try
block|{
name|LogRecord
name|record
init|=
name|logger
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|toLong
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ByteArrayPacket
argument_list|(
name|record
operator|.
name|data
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidLogKeyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidRecordLocationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|IOException
operator|)
operator|new
name|IOException
argument_list|(
literal|"Journal write failed: "
operator|+
name|e
argument_list|)
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

