begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|ListContainerTest
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|COUNT
init|=
literal|10
decl_stmt|;
specifier|protected
name|String
name|name
init|=
literal|"test"
decl_stmt|;
specifier|protected
name|Store
name|store
decl_stmt|;
specifier|protected
name|ListContainer
argument_list|<
name|Object
argument_list|>
name|container
decl_stmt|;
specifier|protected
name|LinkedList
argument_list|<
name|Object
argument_list|>
name|testList
decl_stmt|;
comment|/*      * Test method for 'org.apache.activemq.kaha.ListContainer.size()'      */
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.activemq.kaha.ListContainer.addFirst(Object)'      */
specifier|public
name|void
name|testAddFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|first
init|=
literal|"first"
decl_stmt|;
name|container
operator|.
name|addFirst
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|container
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.activemq.kaha.ListContainer.addLast(Object)'      */
specifier|public
name|void
name|testAddLast
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|last
init|=
literal|"last"
decl_stmt|;
name|container
operator|.
name|addLast
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|last
argument_list|,
name|container
operator|.
name|get
argument_list|(
name|testList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.activemq.kaha.ListContainer.removeFirst()'      */
specifier|public
name|void
name|testRemoveFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|container
operator|.
name|removeFirst
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|testList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|testList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|container
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'org.apache.activemq.kaha.ListContainer.removeLast()'      */
specifier|public
name|void
name|testRemoveLast
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
operator|.
name|get
argument_list|(
name|testList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|container
operator|.
name|removeLast
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|testList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|container
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'java.util.List.iterator()'      */
specifier|public
name|void
name|testIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Object
argument_list|>
name|j
init|=
name|container
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|testList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertEquals
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|j
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|container
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
assert|assert
name|container
operator|.
name|isEmpty
argument_list|()
assert|;
block|}
comment|/*      * Test method for 'java.util.List.isEmpty()'      */
specifier|public
name|void
name|testIsEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|container
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.contains(Object)'      */
specifier|public
name|void
name|testContains
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|testList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|assertTrue
argument_list|(
name|container
operator|.
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'java.util.List.toArray()'      */
specifier|public
name|void
name|testToArray
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|Object
index|[]
name|a
init|=
name|testList
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|Object
index|[]
name|b
init|=
name|container
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|length
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|a
index|[
name|i
index|]
argument_list|,
name|b
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'java.util.List.remove(Object)'      */
specifier|public
name|void
name|testRemoveObject
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|container
operator|.
name|remove
argument_list|(
name|testList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|container
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.containsAll(Collection<?>)'      */
specifier|public
name|void
name|testContainsAll
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|containsAll
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.removeAll(Collection<?>)'      */
specifier|public
name|void
name|testRemoveAll
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
operator|.
name|size
argument_list|()
argument_list|,
name|container
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|removeAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.retainAll(Collection<?>)'      */
specifier|public
name|void
name|testRetainAll
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
operator|.
name|size
argument_list|()
argument_list|,
name|container
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|testList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|container
operator|.
name|retainAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
operator|.
name|size
argument_list|()
argument_list|,
name|container
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.clear()'      */
specifier|public
name|void
name|testClear
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
operator|.
name|size
argument_list|()
argument_list|,
name|container
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|container
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.get(int)'      */
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|container
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|testList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'java.util.List.set(int, E)'      */
specifier|public
name|void
name|testSet
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.add(int, E)'      */
specifier|public
name|void
name|testAddIntE
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|equals
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|testObj
init|=
literal|"testObj"
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|testList
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|testObj
argument_list|)
expr_stmt|;
name|container
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|testObj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|equals
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|=
name|testList
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
name|testList
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|testObj
argument_list|)
expr_stmt|;
name|container
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|testObj
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|equals
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.remove(int)'      */
specifier|public
name|void
name|testRemoveInt
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|equals
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|testList
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|container
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|equals
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pos
init|=
name|testList
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|testList
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|container
operator|.
name|remove
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|equals
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.indexOf(Object)'      */
specifier|public
name|void
name|testIndexOf
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|equals
argument_list|(
name|testList
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o
init|=
name|testList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|container
operator|.
name|indexOf
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'java.util.List.listIterator()'      */
specifier|public
name|void
name|testListIterator
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|ListIterator
argument_list|<
name|Object
argument_list|>
name|containerIter
init|=
name|container
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|ListIterator
argument_list|<
name|Object
argument_list|>
name|testIter
init|=
name|testList
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containerIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|testIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|o1
init|=
name|testIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|o2
init|=
name|containerIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
name|testIter
operator|.
name|remove
argument_list|()
expr_stmt|;
name|containerIter
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|testList
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|container
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'java.util.List.listIterator(int)'      */
specifier|public
name|void
name|testListIteratorInt
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|testList
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|ListIterator
argument_list|<
name|Object
argument_list|>
name|containerIter
init|=
name|container
operator|.
name|listIterator
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|Object
argument_list|>
name|testIter
init|=
name|testList
operator|.
name|listIterator
argument_list|(
name|start
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containerIter
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|testIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|o1
init|=
name|testIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|o2
init|=
name|containerIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'java.util.List.subList(int, int)'      */
specifier|public
name|void
name|testSubList
parameter_list|()
throws|throws
name|Exception
block|{
name|container
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|testList
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|l1
init|=
name|testList
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|l2
init|=
name|container
operator|.
name|subList
argument_list|(
name|start
argument_list|,
name|testList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|l1
operator|.
name|size
argument_list|()
argument_list|,
name|l2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Store
name|getStore
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|StoreFactory
operator|.
name|open
argument_list|(
name|name
argument_list|,
literal|"rw"
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|name
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"basedir"
argument_list|,
literal|"."
argument_list|)
operator|+
literal|"/target/activemq-data/list-container.db"
expr_stmt|;
name|StoreFactory
operator|.
name|delete
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|store
operator|=
name|getStore
argument_list|()
expr_stmt|;
name|store
operator|.
name|deleteListContainer
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|container
operator|=
name|store
operator|.
name|getListContainer
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|container
operator|.
name|load
argument_list|()
expr_stmt|;
name|testList
operator|=
operator|new
name|LinkedList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
literal|"value:"
operator|+
name|i
decl_stmt|;
name|testList
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|StoreFactory
operator|.
name|delete
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

