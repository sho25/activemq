begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|VirtualDestTest
extends|extends
name|RuntimeConfigTestSupport
block|{
name|String
name|configurationSeed
init|=
literal|"virtualDestTest"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNew
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-new-no-vd-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|RuntimeConfigTestSupport
operator|.
name|EMPTY_UPDATABLE_CONFIG
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
comment|// default config has support for VirtualTopic.>
name|DestinationInterceptor
index|[]
name|interceptors
init|=
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"one interceptor"
argument_list|,
literal|1
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it is virtual topic interceptor"
argument_list|,
name|interceptors
index|[
literal|0
index|]
operator|instanceof
name|VirtualDestinationInterceptor
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|defaultValue
init|=
operator|(
name|VirtualDestinationInterceptor
operator|)
name|interceptors
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"default names in place"
argument_list|,
literal|"VirtualTopic.>"
argument_list|,
name|defaultValue
operator|.
name|getVirtualDestinations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getVirtualDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|exerciseVirtualTopic
argument_list|(
literal|"VirtualTopic.Default"
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one interceptor"
argument_list|,
literal|1
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it is virtual topic interceptor"
argument_list|,
name|interceptors
index|[
literal|0
index|]
operator|instanceof
name|VirtualDestinationInterceptor
argument_list|)
expr_stmt|;
comment|// update will happen on addDestination
name|exerciseVirtualTopic
argument_list|(
literal|"A.Default"
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|newValue
init|=
operator|(
name|VirtualDestinationInterceptor
operator|)
name|interceptors
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"new names in place"
argument_list|,
literal|"A.>"
argument_list|,
name|defaultValue
operator|.
name|getVirtualDestinations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getVirtualDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// apply again - ensure no change
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"same instance"
argument_list|,
name|newValue
argument_list|,
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewComposite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-new-composite-vd-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|RuntimeConfigTestSupport
operator|.
name|EMPTY_UPDATABLE_CONFIG
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-add-composite-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
name|exerciseCompositeQueue
argument_list|(
literal|"VirtualDestination.CompositeQueue"
argument_list|,
literal|"VirtualDestination.QueueConsumer"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModComposite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-mod-composite-vd-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-add-composite-vd"
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|exerciseCompositeQueue
argument_list|(
literal|"VirtualDestination.CompositeQueue"
argument_list|,
literal|"VirtualDestination.QueueConsumer"
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-mod-composite-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
name|exerciseCompositeQueue
argument_list|(
literal|"VirtualDestination.CompositeQueue"
argument_list|,
literal|"VirtualDestination.QueueConsumer"
argument_list|)
expr_stmt|;
name|exerciseCompositeQueue
argument_list|(
literal|"VirtualDestination.CompositeQueue"
argument_list|,
literal|"VirtualDestination.CompositeQueue"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewNoDefaultVirtualTopicSupport
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-no-vd-vt-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|RuntimeConfigTestSupport
operator|.
name|EMPTY_UPDATABLE_CONFIG
argument_list|)
expr_stmt|;
name|brokerService
operator|=
name|createBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualTopics
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
name|SLEEP
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|DestinationInterceptor
index|[]
name|interceptors
init|=
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"one interceptor"
argument_list|,
literal|0
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
comment|// update will happen on addDestination
name|exerciseVirtualTopic
argument_list|(
literal|"A.Default"
argument_list|)
expr_stmt|;
name|interceptors
operator|=
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one interceptor"
argument_list|,
literal|1
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it is virtual topic interceptor"
argument_list|,
name|interceptors
index|[
literal|0
index|]
operator|instanceof
name|VirtualDestinationInterceptor
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|newValue
init|=
operator|(
name|VirtualDestinationInterceptor
operator|)
name|interceptors
index|[
literal|0
index|]
decl_stmt|;
comment|// apply again - ensure no change
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"same instance"
argument_list|,
name|newValue
argument_list|,
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewWithMirrorQueueSupport
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-no-vd-mq-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|RuntimeConfigTestSupport
operator|.
name|EMPTY_UPDATABLE_CONFIG
argument_list|)
expr_stmt|;
name|brokerService
operator|=
name|createBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseMirroredQueues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
name|SLEEP
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|DestinationInterceptor
index|[]
name|interceptors
init|=
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected interceptor"
argument_list|,
literal|2
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
comment|// update will happen on addDestination
name|exerciseVirtualTopic
argument_list|(
literal|"A.Default"
argument_list|)
expr_stmt|;
name|interceptors
operator|=
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected interceptor"
argument_list|,
literal|2
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it is virtual topic interceptor"
argument_list|,
name|interceptors
index|[
literal|0
index|]
operator|instanceof
name|VirtualDestinationInterceptor
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|newValue
init|=
operator|(
name|VirtualDestinationInterceptor
operator|)
name|interceptors
index|[
literal|0
index|]
decl_stmt|;
comment|// apply again - ensure no change
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"same instance"
argument_list|,
name|newValue
argument_list|,
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-one-vd-rm-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|DestinationInterceptor
index|[]
name|interceptors
init|=
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"one interceptor"
argument_list|,
literal|1
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it is virtual topic interceptor"
argument_list|,
name|interceptors
index|[
literal|0
index|]
operator|instanceof
name|VirtualDestinationInterceptor
argument_list|)
expr_stmt|;
name|VirtualDestinationInterceptor
name|defaultValue
init|=
operator|(
name|VirtualDestinationInterceptor
operator|)
name|interceptors
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|"configured names in place"
argument_list|,
literal|"A.>"
argument_list|,
name|defaultValue
operator|.
name|getVirtualDestinations
argument_list|()
index|[
literal|0
index|]
operator|.
name|getVirtualDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
name|exerciseVirtualTopic
argument_list|(
literal|"A.Default"
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|RuntimeConfigTestSupport
operator|.
name|EMPTY_UPDATABLE_CONFIG
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
comment|// update will happen on addDestination
name|forceAddDestination
argument_list|(
literal|"AnyDest"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"getDestinationInterceptors empty on time"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
specifier|public
name|boolean
name|isSatisified
parameter_list|()
block|{
return|return
literal|0
operator|==
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
operator|.
name|length
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
comment|// reverse the remove, add again
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
comment|// update will happen on addDestination
name|exerciseVirtualTopic
argument_list|(
literal|"A.NewOne"
argument_list|)
expr_stmt|;
name|interceptors
operator|=
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"expected interceptor"
argument_list|,
literal|1
argument_list|,
name|interceptors
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"it is virtual topic interceptor"
argument_list|,
name|interceptors
index|[
literal|0
index|]
operator|instanceof
name|VirtualDestinationInterceptor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMod
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-one-vd-mod-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one interceptor"
argument_list|,
literal|1
argument_list|,
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|exerciseVirtualTopic
argument_list|(
literal|"A.Default"
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-mod-one-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
name|exerciseVirtualTopic
argument_list|(
literal|"B.Default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"still one interceptor"
argument_list|,
literal|1
argument_list|,
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModWithMirroredQueue
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-one-vd-mq-mod-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-one-vd"
argument_list|)
expr_stmt|;
name|brokerService
operator|=
name|createBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseMirroredQueues
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
name|SLEEP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one interceptor"
argument_list|,
literal|1
argument_list|,
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|exerciseVirtualTopic
argument_list|(
literal|"A.Default"
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-mod-one-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
name|exerciseVirtualTopic
argument_list|(
literal|"B.Default"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"still one interceptor"
argument_list|,
literal|1
argument_list|,
name|brokerService
operator|.
name|getDestinationInterceptors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewFilteredComposite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-new-filtered-composite-vd-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|RuntimeConfigTestSupport
operator|.
name|EMPTY_UPDATABLE_CONFIG
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-add-filtered-composite-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
name|exerciseFilteredCompositeQueue
argument_list|(
literal|"VirtualDestination.FilteredCompositeQueue"
argument_list|,
literal|"VirtualDestination.QueueConsumer"
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModFilteredComposite
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|brokerConfig
init|=
name|configurationSeed
operator|+
literal|"-mod-filtered-composite-vd-broker"
decl_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-add-filtered-composite-vd"
argument_list|)
expr_stmt|;
name|startBroker
argument_list|(
name|brokerConfig
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"broker alive"
argument_list|,
name|brokerService
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|exerciseFilteredCompositeQueue
argument_list|(
literal|"VirtualDestination.FilteredCompositeQueue"
argument_list|,
literal|"VirtualDestination.QueueConsumer"
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|applyNewConfig
argument_list|(
name|brokerConfig
argument_list|,
name|configurationSeed
operator|+
literal|"-mod-filtered-composite-vd"
argument_list|,
name|SLEEP
argument_list|)
expr_stmt|;
name|exerciseFilteredCompositeQueue
argument_list|(
literal|"VirtualDestination.FilteredCompositeQueue"
argument_list|,
literal|"VirtualDestination.QueueConsumer"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|exerciseFilteredCompositeQueue
argument_list|(
literal|"VirtualDestination.FilteredCompositeQueue"
argument_list|,
literal|"VirtualDestination.QueueConsumer"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|forceAddDestination
parameter_list|(
name|String
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
literal|"Consumer.A."
operator|+
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|exerciseVirtualTopic
parameter_list|(
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|exerciseVirtualTopic
argument_list|(
literal|"Consumer.A."
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exerciseVirtualTopic
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|prefix
operator|+
name|topic
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for: "
operator|+
name|consumer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
name|topic
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
literal|"To vt:"
operator|+
name|topic
decl_stmt|;
name|Message
name|message
init|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got expected message"
argument_list|,
name|body
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|exerciseCompositeQueue
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|consumerQ
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|consumerQ
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for: "
operator|+
name|consumer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|dest
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
literal|"To cq:"
operator|+
name|dest
decl_stmt|;
name|Message
name|message
init|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got expected message"
argument_list|,
name|body
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|exerciseFilteredCompositeQueue
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|consumerDestination
parameter_list|,
name|String
name|acceptedHeaderValue
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|consumerDestination
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for: "
operator|+
name|consumer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|dest
argument_list|)
argument_list|)
decl_stmt|;
comment|// positive test
name|String
name|body
init|=
literal|"To filtered cq:"
operator|+
name|dest
decl_stmt|;
name|Message
name|message
init|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|body
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"odd"
argument_list|,
name|acceptedHeaderValue
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The message did not reach the destination even though it should pass through the filter."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not get expected message"
argument_list|,
name|body
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// negative test
name|message
operator|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
literal|"Not to filtered cq:"
operator|+
name|dest
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"odd"
argument_list|,
literal|"somethingElse"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"The message reached the destination, but it should have been removed by the filter."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Message
name|sendAndReceiveMessage
parameter_list|(
name|Session
name|session
parameter_list|,
name|ActiveMQMessageConsumer
name|consumer
parameter_list|,
name|MessageProducer
name|producer
parameter_list|,
specifier|final
name|String
name|messageBody
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|messageBody
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Message
name|sendAndReceiveMessage
parameter_list|(
name|Session
name|session
parameter_list|,
name|ActiveMQMessageConsumer
name|consumer
parameter_list|,
name|MessageProducer
name|producer
parameter_list|,
specifier|final
name|String
name|messageBody
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertiesMap
parameter_list|)
throws|throws
name|Exception
block|{
name|TextMessage
name|messageToSend
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|messageBody
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertiesMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|headerKey
range|:
name|propertiesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|messageToSend
operator|.
name|setStringProperty
argument_list|(
name|headerKey
argument_list|,
name|propertiesMap
operator|.
name|get
argument_list|(
name|headerKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|producer
operator|.
name|send
argument_list|(
name|messageToSend
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sent to: "
operator|+
name|producer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|&&
name|message
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

