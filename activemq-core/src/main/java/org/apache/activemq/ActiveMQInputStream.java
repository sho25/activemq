begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidDestinationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|CommandTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageDispatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|selector
operator|.
name|SelectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_comment
comment|/**  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|ActiveMQInputStream
extends|extends
name|InputStream
implements|implements
name|ActiveMQDispatcher
block|{
specifier|private
specifier|final
name|ActiveMQConnection
name|connection
decl_stmt|;
specifier|private
specifier|final
name|ConsumerInfo
name|info
decl_stmt|;
comment|// These are the messages waiting to be delivered to the client
specifier|private
specifier|final
name|MessageDispatchChannel
name|unconsumedMessages
init|=
operator|new
name|MessageDispatchChannel
argument_list|()
decl_stmt|;
specifier|private
name|int
name|deliveredCounter
init|=
literal|0
decl_stmt|;
specifier|private
name|MessageDispatch
name|lastDelivered
decl_stmt|;
specifier|private
name|boolean
name|eosReached
decl_stmt|;
specifier|private
name|byte
name|buffer
index|[]
decl_stmt|;
specifier|private
name|int
name|pos
decl_stmt|;
specifier|private
name|ProducerId
name|producerId
decl_stmt|;
specifier|private
name|long
name|nextSequenceId
init|=
literal|0
decl_stmt|;
specifier|public
name|ActiveMQInputStream
parameter_list|(
name|ActiveMQConnection
name|connection
parameter_list|,
name|ConsumerId
name|consumerId
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|String
name|selector
parameter_list|,
name|boolean
name|noLocal
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|prefetch
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidDestinationException
argument_list|(
literal|"Don't understand null destinations"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|String
name|physicalName
init|=
name|dest
operator|.
name|getPhysicalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|physicalName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Physical name of Destination should be valid: "
operator|+
name|dest
argument_list|)
throw|;
block|}
name|String
name|connectionID
init|=
name|connection
operator|.
name|getConnectionInfo
argument_list|()
operator|.
name|getConnectionId
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|physicalName
operator|.
name|indexOf
argument_list|(
name|connectionID
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|InvalidDestinationException
argument_list|(
literal|"Cannot use a Temporary destination from another Connection"
argument_list|)
throw|;
block|}
if|if
condition|(
name|connection
operator|.
name|isDeleted
argument_list|(
name|dest
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidDestinationException
argument_list|(
literal|"Cannot use a Temporary destination that has been deleted"
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|info
operator|=
operator|new
name|ConsumerInfo
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setSubcriptionName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|selector
operator|!=
literal|null
operator|&&
name|selector
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|selector
operator|=
literal|"JMSType='org.apache.activemq.Stream' AND ( "
operator|+
name|selector
operator|+
literal|" ) "
expr_stmt|;
block|}
else|else
block|{
name|selector
operator|=
literal|"JMSType='org.apache.activemq.Stream'"
expr_stmt|;
block|}
operator|new
name|SelectorParser
argument_list|()
operator|.
name|parse
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setPrefetchSize
argument_list|(
name|prefetch
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setNoLocal
argument_list|(
name|noLocal
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setBrowser
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Allows the options on the destination to configure the consumerInfo
if|if
condition|(
name|dest
operator|.
name|getOptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HashMap
name|options
init|=
operator|new
name|HashMap
argument_list|(
name|dest
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|this
operator|.
name|info
argument_list|,
name|options
argument_list|,
literal|"consumer."
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|info
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|addInputStream
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|addDispatcher
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|syncSendPacket
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|unconsumedMessages
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|lastDelivered
operator|!=
literal|null
condition|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|lastDelivered
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
name|deliveredCounter
argument_list|)
decl_stmt|;
name|connection
operator|.
name|asyncSendPacket
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
name|dispose
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|syncSendPacket
argument_list|(
name|info
operator|.
name|createRemoveCommand
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|unconsumedMessages
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|removeDispatcher
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|.
name|removeInputStream
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ActiveMQMessage
name|receive
parameter_list|()
throws|throws
name|JMSException
block|{
name|checkClosed
argument_list|()
expr_stmt|;
name|MessageDispatch
name|md
decl_stmt|;
try|try
block|{
name|md
operator|=
name|unconsumedMessages
operator|.
name|dequeue
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|md
operator|==
literal|null
operator|||
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
operator|||
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|isExpired
argument_list|()
condition|)
return|return
literal|null
return|;
name|deliveredCounter
operator|++
expr_stmt|;
if|if
condition|(
operator|(
literal|0.75
operator|*
name|info
operator|.
name|getPrefetchSize
argument_list|()
operator|)
operator|<=
name|deliveredCounter
condition|)
block|{
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
name|deliveredCounter
argument_list|)
decl_stmt|;
name|connection
operator|.
name|asyncSendPacket
argument_list|(
name|ack
argument_list|)
expr_stmt|;
name|deliveredCounter
operator|=
literal|0
expr_stmt|;
name|lastDelivered
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|lastDelivered
operator|=
name|md
expr_stmt|;
block|}
return|return
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
return|;
block|}
comment|/**      * @throws IllegalStateException      */
specifier|protected
name|void
name|checkClosed
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
name|unconsumedMessages
operator|.
name|isClosed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The Consumer is closed"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|fillBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|eosReached
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|buffer
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|fillBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|eosReached
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|max
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
argument_list|,
name|buffer
operator|.
name|length
operator|-
name|pos
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|pos
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|max
expr_stmt|;
return|return
name|max
return|;
block|}
specifier|private
name|void
name|fillBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|eosReached
operator|||
operator|(
name|buffer
operator|!=
literal|null
operator|&&
name|buffer
operator|.
name|length
operator|>
name|pos
operator|)
condition|)
return|return;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|ActiveMQMessage
name|m
init|=
name|receive
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|CommandTypes
operator|.
name|ACTIVEMQ_BYTES_MESSAGE
condition|)
block|{
comment|// First message.
name|long
name|producerSequenceId
init|=
name|m
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerSequenceId
argument_list|()
decl_stmt|;
if|if
condition|(
name|producerId
operator|==
literal|null
condition|)
block|{
comment|// We have to start a stream at sequence id = 0
if|if
condition|(
name|producerSequenceId
operator|!=
literal|0
condition|)
block|{
continue|continue;
block|}
name|nextSequenceId
operator|++
expr_stmt|;
name|producerId
operator|=
name|m
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Verify it's the next message of the sequence.
if|if
condition|(
operator|!
name|m
operator|.
name|getMessageId
argument_list|()
operator|.
name|getProducerId
argument_list|()
operator|.
name|equals
argument_list|(
name|producerId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Received an unexpected message: invalid producer: "
operator|+
name|m
argument_list|)
throw|;
block|}
if|if
condition|(
name|producerSequenceId
operator|!=
name|nextSequenceId
operator|++
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Received an unexpected message: expected ID: "
operator|+
operator|(
name|nextSequenceId
operator|-
literal|1
operator|)
operator|+
literal|" but was: "
operator|+
name|producerSequenceId
operator|+
literal|" for message: "
operator|+
name|m
argument_list|)
throw|;
block|}
block|}
comment|// Read the buffer in.
name|ActiveMQBytesMessage
name|bm
init|=
operator|(
name|ActiveMQBytesMessage
operator|)
name|m
decl_stmt|;
name|buffer
operator|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|bm
operator|.
name|getBodyLength
argument_list|()
index|]
expr_stmt|;
name|bm
operator|.
name|readBytes
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|pos
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|eosReached
operator|=
literal|true
expr_stmt|;
block|}
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|eosReached
operator|=
literal|true
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|dispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
block|{
name|unconsumedMessages
operator|.
name|enqueue
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ActiveMQInputStream { value="
operator|+
name|info
operator|.
name|getConsumerId
argument_list|()
operator|+
literal|", producerId="
operator|+
name|producerId
operator|+
literal|" }"
return|;
block|}
block|}
end_class

end_unit

