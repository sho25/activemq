begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SimpleAuthenticationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SimpleAuthenticationPlugin
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleAuthenticationPluginProcessor
extends|extends
name|DefaultConfigurationProcessor
block|{
specifier|public
name|SimpleAuthenticationPluginProcessor
parameter_list|(
name|RuntimeConfigurationBroker
name|plugin
parameter_list|,
name|Class
name|configurationClass
parameter_list|)
block|{
name|super
argument_list|(
name|plugin
argument_list|,
name|configurationClass
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Object
name|existing
parameter_list|,
name|Object
name|candidate
parameter_list|)
block|{
try|try
block|{
specifier|final
name|SimpleAuthenticationPlugin
name|updatedPlugin
init|=
name|fromDto
argument_list|(
name|candidate
argument_list|,
operator|new
name|SimpleAuthenticationPlugin
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SimpleAuthenticationBroker
name|authenticationBroker
init|=
operator|(
name|SimpleAuthenticationBroker
operator|)
name|plugin
operator|.
name|getBrokerService
argument_list|()
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|SimpleAuthenticationBroker
operator|.
name|class
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|addConnectionWork
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|authenticationBroker
operator|.
name|setUserGroups
argument_list|(
name|updatedPlugin
operator|.
name|getUserGroups
argument_list|()
argument_list|)
expr_stmt|;
name|authenticationBroker
operator|.
name|setUserPasswords
argument_list|(
name|updatedPlugin
operator|.
name|getUserPasswords
argument_list|()
argument_list|)
expr_stmt|;
name|authenticationBroker
operator|.
name|setAnonymousAccessAllowed
argument_list|(
name|updatedPlugin
operator|.
name|isAnonymousAccessAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|authenticationBroker
operator|.
name|setAnonymousUser
argument_list|(
name|updatedPlugin
operator|.
name|getAnonymousUser
argument_list|()
argument_list|)
expr_stmt|;
name|authenticationBroker
operator|.
name|setAnonymousGroup
argument_list|(
name|updatedPlugin
operator|.
name|getAnonymousGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|plugin
operator|.
name|info
argument_list|(
literal|"failed to apply SimpleAuthenticationPlugin modifications to SimpleAuthenticationBroker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

