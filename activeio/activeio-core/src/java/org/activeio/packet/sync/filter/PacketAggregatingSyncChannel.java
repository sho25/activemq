begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|FilterSyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|util
operator|.
name|PacketAggregator
import|;
end_import

begin_comment
comment|/**  * This PacketAggregatingSynchChannel can be used when the client is sending a  * 'record' style packet down the channel stack and needs receiving end to  * receive the same 'record' packets.  *   * This is very usefull since in general, a channel does not garantee that a  * Packet that is sent down will not be fragmented or combined with other Packet  * objects.  *   * This {@see org.activeio.SynchChannel} adds a 4 byte header  * to each packet that is sent down.  *   * @version $Revision$  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|PacketAggregatingSyncChannel
extends|extends
name|FilterSyncChannel
block|{
specifier|private
specifier|final
name|LinkedList
name|assembledPackets
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PacketAggregator
name|aggregator
init|=
operator|new
name|PacketAggregator
argument_list|()
block|{
specifier|protected
name|void
name|packetAssembled
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
name|assembledPackets
operator|.
name|addLast
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/**      * @param next      */
specifier|public
name|PacketAggregatingSyncChannel
parameter_list|(
name|SyncChannel
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Packet
name|read
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|assembledPackets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Packet
name|packet
init|=
name|getNext
argument_list|()
operator|.
name|read
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|packet
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|aggregator
operator|.
name|addRawPacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
comment|// Should we try to get more packets?
if|if
condition|(
name|assembledPackets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|timeout
operator|==
name|WAIT_FOREVER_TIMEOUT
condition|)
continue|continue;
name|timeout
operator|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|timeout
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
operator|!=
literal|0
condition|)
continue|continue;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|(
name|Packet
operator|)
name|assembledPackets
operator|.
name|removeFirst
argument_list|()
return|;
block|}
block|}
block|}
else|else
block|{
return|return
operator|(
name|Packet
operator|)
name|assembledPackets
operator|.
name|removeFirst
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
block|{
name|getNext
argument_list|()
operator|.
name|write
argument_list|(
name|aggregator
operator|.
name|getHeader
argument_list|(
name|packet
argument_list|)
argument_list|)
expr_stmt|;
name|getNext
argument_list|()
operator|.
name|write
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

