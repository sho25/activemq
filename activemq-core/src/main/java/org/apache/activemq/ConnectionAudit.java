begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_comment
comment|/**  * An auditor class for a Connection that looks for duplicates  */
end_comment

begin_class
class|class
name|ConnectionAudit
block|{
specifier|private
name|boolean
name|checkForDuplicates
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|ActiveMQDestination
argument_list|,
name|ActiveMQMessageAudit
argument_list|>
name|queues
init|=
operator|new
name|LRUCache
argument_list|<
name|ActiveMQDestination
argument_list|,
name|ActiveMQMessageAudit
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|private
name|LinkedHashMap
argument_list|<
name|ActiveMQDispatcher
argument_list|,
name|ActiveMQMessageAudit
argument_list|>
name|dispatchers
init|=
operator|new
name|LRUCache
argument_list|<
name|ActiveMQDispatcher
argument_list|,
name|ActiveMQMessageAudit
argument_list|>
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|synchronized
name|void
name|removeDispatcher
parameter_list|(
name|ActiveMQDispatcher
name|dispatcher
parameter_list|)
block|{
name|dispatchers
operator|.
name|remove
argument_list|(
name|dispatcher
argument_list|)
expr_stmt|;
block|}
specifier|synchronized
name|boolean
name|isDuplicate
parameter_list|(
name|ActiveMQDispatcher
name|dispatcher
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|checkForDuplicates
operator|&&
name|message
operator|!=
literal|null
condition|)
block|{
name|ActiveMQDestination
name|destination
init|=
name|message
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|ActiveMQMessageAudit
name|audit
init|=
name|queues
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|audit
operator|==
literal|null
condition|)
block|{
name|audit
operator|=
operator|new
name|ActiveMQMessageAudit
argument_list|()
expr_stmt|;
name|queues
operator|.
name|put
argument_list|(
name|destination
argument_list|,
name|audit
argument_list|)
expr_stmt|;
block|}
name|boolean
name|result
init|=
name|audit
operator|.
name|isDuplicateMessageReference
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
name|ActiveMQMessageAudit
name|audit
init|=
name|dispatchers
operator|.
name|get
argument_list|(
name|dispatcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|audit
operator|==
literal|null
condition|)
block|{
name|audit
operator|=
operator|new
name|ActiveMQMessageAudit
argument_list|()
expr_stmt|;
name|dispatchers
operator|.
name|put
argument_list|(
name|dispatcher
argument_list|,
name|audit
argument_list|)
expr_stmt|;
block|}
name|boolean
name|result
init|=
name|audit
operator|.
name|isDuplicateMessageReference
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|rollbackDuplicate
parameter_list|(
name|ActiveMQDispatcher
name|dispatcher
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|checkForDuplicates
operator|&&
name|message
operator|!=
literal|null
condition|)
block|{
name|ActiveMQDestination
name|destination
init|=
name|message
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|destination
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|ActiveMQMessageAudit
name|audit
init|=
name|queues
operator|.
name|get
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|audit
operator|!=
literal|null
condition|)
block|{
name|audit
operator|.
name|rollbackMessageReference
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ActiveMQMessageAudit
name|audit
init|=
name|dispatchers
operator|.
name|get
argument_list|(
name|dispatcher
argument_list|)
decl_stmt|;
if|if
condition|(
name|audit
operator|!=
literal|null
condition|)
block|{
name|audit
operator|.
name|rollbackMessageReference
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * @return the checkForDuplicates      */
name|boolean
name|isCheckForDuplicates
parameter_list|()
block|{
return|return
name|this
operator|.
name|checkForDuplicates
return|;
block|}
comment|/**      * @param checkForDuplicates the checkForDuplicates to set      */
name|void
name|setCheckForDuplicates
parameter_list|(
name|boolean
name|checkForDuplicates
parameter_list|)
block|{
name|this
operator|.
name|checkForDuplicates
operator|=
name|checkForDuplicates
expr_stmt|;
block|}
block|}
end_class

end_unit

