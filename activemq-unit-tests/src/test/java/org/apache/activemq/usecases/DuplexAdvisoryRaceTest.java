begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DemandForwardingBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|DiscoveryNetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|// https://issues.apache.org/jira/browse/AMQ-6640
end_comment

begin_class
specifier|public
class|class
name|DuplexAdvisoryRaceTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|DuplexAdvisoryRaceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|hostName
decl_stmt|;
specifier|final
name|AtomicLong
name|responseReceived
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BrokerService
name|brokerA
decl_stmt|,
name|brokerB
decl_stmt|;
name|String
name|networkConnectorUrlString
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initIp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// attempt to bypass loopback - not vital but it helps to reproduce
name|hostName
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostAddress
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|createBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|networkConnectorUrlString
operator|=
literal|"tcp://"
operator|+
name|hostName
operator|+
literal|":"
operator|+
name|TestUtils
operator|.
name|findOpenPort
argument_list|()
expr_stmt|;
name|brokerA
operator|=
name|newBroker
argument_list|(
literal|"A"
argument_list|)
expr_stmt|;
name|brokerB
operator|=
name|newBroker
argument_list|(
literal|"B"
argument_list|)
expr_stmt|;
name|responseReceived
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerB
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|// to be sure to be sure
specifier|public
name|void
name|repeatTestHang
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|testHang
argument_list|()
expr_stmt|;
name|stopBrokers
argument_list|()
expr_stmt|;
name|createBrokers
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHang
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerA
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|Subscription
name|subscription
init|=
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
decl_stmt|;
comment|// delay return to allow dispatch to interleave
if|if
condition|(
name|context
operator|.
name|isNetworkConnection
argument_list|()
condition|)
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
block|}
return|return
name|subscription
return|;
block|}
empty_stmt|;
block|}
end_class

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_comment
comment|// bridge
end_comment

begin_decl_stmt
name|NetworkConnector
name|networkConnector
init|=
name|bridgeBrokers
argument_list|(
name|brokerA
argument_list|,
name|brokerB
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|brokerA
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|brokerB
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ActiveMQConnectionFactory
name|brokerAFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerA
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ActiveMQConnectionFactory
name|brokerBFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerB
operator|.
name|getTransportConnectorByScheme
argument_list|(
literal|"tcp"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
operator|+
literal|"?jms.watchTopicAdvisories=false"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// populate dests
end_comment

begin_decl_stmt
specifier|final
name|int
name|numDests
init|=
literal|800
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|int
name|numMessagesPerDest
init|=
literal|50
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|int
name|numConsumersPerDest
init|=
literal|5
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|populate
argument_list|(
name|brokerAFactory
argument_list|,
literal|0
argument_list|,
name|numDests
operator|/
literal|2
argument_list|,
name|numMessagesPerDest
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|populate
argument_list|(
name|brokerBFactory
argument_list|,
name|numDests
operator|/
literal|2
argument_list|,
name|numDests
argument_list|,
name|numMessagesPerDest
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// demand
end_comment

begin_decl_stmt
name|List
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connections
operator|.
name|add
argument_list|(
name|demand
argument_list|(
name|brokerBFactory
argument_list|,
literal|0
argument_list|,
name|numDests
operator|/
literal|2
argument_list|,
name|numConsumersPerDest
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connections
operator|.
name|add
argument_list|(
name|demand
argument_list|(
name|brokerAFactory
argument_list|,
name|numDests
operator|/
literal|2
argument_list|,
name|numDests
argument_list|,
name|numConsumersPerDest
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Allow duplex bridge to connect...."
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// allow bridge to start
end_comment

begin_expr_stmt
name|brokerB
operator|.
name|startTransportConnector
argument_list|(
name|brokerB
operator|.
name|addConnector
argument_list|(
name|networkConnectorUrlString
operator|+
literal|"?transport.socketBufferSize=1024"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"received: "
operator|+
name|responseReceived
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|responseReceived
operator|.
name|get
argument_list|()
operator|>=
name|numMessagesPerDest
operator|*
name|numDests
return|;
block|}
block|}
end_if

begin_operator
operator|,
end_operator

begin_expr_stmt
literal|5
operator|*
literal|60
operator|*
literal|1000
end_expr_stmt

begin_block
unit|))
block|{
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
operator|.
name|dumpAllThreads
argument_list|(
literal|"DD"
argument_list|)
expr_stmt|;
comment|// when hung close will also hang!
for|for
control|(
name|NetworkBridge
name|networkBridge
range|:
name|networkConnector
operator|.
name|activeBridges
argument_list|()
control|)
block|{
if|if
condition|(
name|networkBridge
operator|instanceof
name|DemandForwardingBridge
condition|)
block|{
name|DemandForwardingBridge
name|demandForwardingBridge
init|=
operator|(
name|DemandForwardingBridge
operator|)
name|networkBridge
decl_stmt|;
name|Socket
name|socket
init|=
name|demandForwardingBridge
operator|.
name|getRemoteBroker
argument_list|()
operator|.
name|narrow
argument_list|(
name|Socket
operator|.
name|class
argument_list|)
decl_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_block

begin_expr_stmt
name|networkConnector
operator|.
name|stop
argument_list|()
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|Connection
name|connection
range|:
name|connections
control|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{}
block|}
end_for

begin_expr_stmt
name|assertTrue
argument_list|(
literal|"received all sent: "
operator|+
name|responseReceived
operator|.
name|get
argument_list|()
argument_list|,
name|responseReceived
operator|.
name|get
argument_list|()
operator|>=
name|numMessagesPerDest
operator|*
name|numDests
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}       private
name|void
name|populate
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|,
name|int
name|minDest
parameter_list|,
name|int
name|maxDest
parameter_list|,
name|int
name|numMessages
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|BytesMessage
name|message
init|=
name|session
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|i
init|=
name|minDest
init|;
name|i
operator|<
name|maxDest
condition|;
name|i
operator|++
control|)
block|{
name|Destination
name|destination
init|=
name|qFromInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numMessages
condition|;
name|j
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|destination
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|Connection
name|demand
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|,
name|int
name|minDest
parameter_list|,
name|int
name|maxDest
parameter_list|,
name|int
name|numConsumers
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|minDest
init|;
name|i
operator|<
name|maxDest
condition|;
name|i
operator|++
control|)
block|{
name|Destination
name|destination
init|=
name|qFromInt
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numConsumers
condition|;
name|j
operator|++
control|)
block|{
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
operator|.
name|setMessageListener
argument_list|(
operator|new
name|MessageListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|responseReceived
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
end_function

begin_function
specifier|private
name|Destination
name|qFromInt
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|digits
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|val
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|digits
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|2
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Test."
operator|+
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|BrokerService
name|newBroker
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://"
operator|+
name|hostName
operator|+
literal|":0?transport.socketBufferSize=1024"
argument_list|)
expr_stmt|;
name|PolicyMap
name|map
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|defaultEntry
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|map
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationPolicy
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
end_function

begin_function
specifier|protected
name|NetworkConnector
name|bridgeBrokers
parameter_list|(
name|BrokerService
name|localBroker
parameter_list|,
name|BrokerService
name|remoteBroker
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uri
init|=
literal|"static:(failover:("
operator|+
name|networkConnectorUrlString
operator|+
literal|"?socketBufferSize=1024&trace=false)?maxReconnectAttempts=0)"
decl_stmt|;
name|NetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setName
argument_list|(
name|localBroker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|"-to-"
operator|+
name|remoteBroker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
return|return
name|connector
return|;
block|}
end_function

unit|}
end_unit

