begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2003-2005 Arthur van Hoff, Rick Blair  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * DNS entry with a name, type, and class. This is the base  * class for questions and records.  *  * @version %I%, %G%  * @author	Arthur van Hoff, Pierre Frisch, Rick Blair  */
end_comment

begin_class
class|class
name|DNSEntry
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DNSEntry
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|key
decl_stmt|;
name|String
name|name
decl_stmt|;
name|int
name|type
decl_stmt|;
name|int
name|clazz
decl_stmt|;
name|boolean
name|unique
decl_stmt|;
comment|/**      * Create an entry.      */
name|DNSEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|int
name|clazz
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|clazz
operator|=
name|clazz
operator|&
name|DNSConstants
operator|.
name|CLASS_MASK
expr_stmt|;
name|this
operator|.
name|unique
operator|=
operator|(
name|clazz
operator|&
name|DNSConstants
operator|.
name|CLASS_UNIQUE
operator|)
operator|!=
literal|0
expr_stmt|;
block|}
comment|/**      * Check if two entries have exactly the same name, type, and class.      */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|DNSEntry
condition|)
block|{
name|DNSEntry
name|other
init|=
operator|(
name|DNSEntry
operator|)
name|obj
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
operator|&&
name|type
operator|==
name|other
operator|.
name|type
operator|&&
name|clazz
operator|==
name|other
operator|.
name|clazz
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Overriden, to return a value which is consistent with the value returned      * by equals(Object).      */
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
operator|+
name|type
operator|+
name|clazz
return|;
block|}
comment|/**      * Get a string given a clazz.      */
specifier|static
name|String
name|getClazz
parameter_list|(
name|int
name|clazz
parameter_list|)
block|{
switch|switch
condition|(
name|clazz
operator|&
name|DNSConstants
operator|.
name|CLASS_MASK
condition|)
block|{
case|case
name|DNSConstants
operator|.
name|CLASS_IN
case|:
return|return
literal|"in"
return|;
case|case
name|DNSConstants
operator|.
name|CLASS_CS
case|:
return|return
literal|"cs"
return|;
case|case
name|DNSConstants
operator|.
name|CLASS_CH
case|:
return|return
literal|"ch"
return|;
case|case
name|DNSConstants
operator|.
name|CLASS_HS
case|:
return|return
literal|"hs"
return|;
case|case
name|DNSConstants
operator|.
name|CLASS_NONE
case|:
return|return
literal|"none"
return|;
case|case
name|DNSConstants
operator|.
name|CLASS_ANY
case|:
return|return
literal|"any"
return|;
default|default:
return|return
literal|"?"
return|;
block|}
block|}
comment|/**      * Get a string given a type.      */
specifier|static
name|String
name|getType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|DNSConstants
operator|.
name|TYPE_A
case|:
return|return
literal|"a"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_AAAA
case|:
return|return
literal|"aaaa"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_NS
case|:
return|return
literal|"ns"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_MD
case|:
return|return
literal|"md"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_MF
case|:
return|return
literal|"mf"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_CNAME
case|:
return|return
literal|"cname"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_SOA
case|:
return|return
literal|"soa"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_MB
case|:
return|return
literal|"mb"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_MG
case|:
return|return
literal|"mg"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_MR
case|:
return|return
literal|"mr"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_NULL
case|:
return|return
literal|"null"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_WKS
case|:
return|return
literal|"wks"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_PTR
case|:
return|return
literal|"ptr"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_HINFO
case|:
return|return
literal|"hinfo"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_MINFO
case|:
return|return
literal|"minfo"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_MX
case|:
return|return
literal|"mx"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_TXT
case|:
return|return
literal|"txt"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_SRV
case|:
return|return
literal|"srv"
return|;
case|case
name|DNSConstants
operator|.
name|TYPE_ANY
case|:
return|return
literal|"any"
return|;
default|default:
return|return
literal|"?"
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|hdr
parameter_list|,
name|String
name|other
parameter_list|)
block|{
return|return
name|hdr
operator|+
literal|"["
operator|+
name|getType
argument_list|(
name|type
argument_list|)
operator|+
literal|","
operator|+
name|getClazz
argument_list|(
name|clazz
argument_list|)
operator|+
operator|(
name|unique
condition|?
literal|"-unique,"
else|:
literal|","
operator|)
operator|+
name|name
operator|+
operator|(
operator|(
name|other
operator|!=
literal|null
operator|)
condition|?
literal|","
operator|+
name|other
operator|+
literal|"]"
else|:
literal|"]"
operator|)
return|;
block|}
block|}
end_class

end_unit

