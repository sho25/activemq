begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConsumerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|MessageReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|Usage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A simple Broker intercepter which allows you to enable/disable logging.  *  * @org.apache.xbean.XBean  */
end_comment

begin_class
specifier|public
class|class
name|LoggingBrokerPlugin
extends|extends
name|BrokerPluginSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LoggingBrokerPlugin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|logAll
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|logConnectionEvents
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|logSessionEvents
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|logTransactionEvents
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|logConsumerEvents
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|logProducerEvents
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|logInternalEvents
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|perDestinationLogger
init|=
literal|false
decl_stmt|;
comment|/**      * JSR-250 callback wrapper; converts checked exceptions to runtime exceptions      *      * delegates to afterPropertiesSet, done to prevent backwards incompatible signature change      */
annotation|@
name|PostConstruct
specifier|private
name|void
name|postConstruct
parameter_list|()
block|{
try|try
block|{
name|afterPropertiesSet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
comment|/**      * @throws Exception      * @org.apache.xbean.InitMethod      */
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Created LoggingBrokerPlugin: {}"
argument_list|,
name|this
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLogAll
parameter_list|()
block|{
return|return
name|logAll
return|;
block|}
comment|/**      * Logger all Events that go through the Plugin      */
specifier|public
name|void
name|setLogAll
parameter_list|(
name|boolean
name|logAll
parameter_list|)
block|{
name|this
operator|.
name|logAll
operator|=
name|logAll
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLogConnectionEvents
parameter_list|()
block|{
return|return
name|logConnectionEvents
return|;
block|}
comment|/**      * Logger Events that are related to connections      */
specifier|public
name|void
name|setLogConnectionEvents
parameter_list|(
name|boolean
name|logConnectionEvents
parameter_list|)
block|{
name|this
operator|.
name|logConnectionEvents
operator|=
name|logConnectionEvents
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLogSessionEvents
parameter_list|()
block|{
return|return
name|logSessionEvents
return|;
block|}
comment|/**      * Logger Events that are related to sessions      */
specifier|public
name|void
name|setLogSessionEvents
parameter_list|(
name|boolean
name|logSessionEvents
parameter_list|)
block|{
name|this
operator|.
name|logSessionEvents
operator|=
name|logSessionEvents
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLogTransactionEvents
parameter_list|()
block|{
return|return
name|logTransactionEvents
return|;
block|}
comment|/**      * Logger Events that are related to transaction processing      */
specifier|public
name|void
name|setLogTransactionEvents
parameter_list|(
name|boolean
name|logTransactionEvents
parameter_list|)
block|{
name|this
operator|.
name|logTransactionEvents
operator|=
name|logTransactionEvents
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLogConsumerEvents
parameter_list|()
block|{
return|return
name|logConsumerEvents
return|;
block|}
comment|/**      * Logger Events that are related to Consumers      */
specifier|public
name|void
name|setLogConsumerEvents
parameter_list|(
name|boolean
name|logConsumerEvents
parameter_list|)
block|{
name|this
operator|.
name|logConsumerEvents
operator|=
name|logConsumerEvents
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLogProducerEvents
parameter_list|()
block|{
return|return
name|logProducerEvents
return|;
block|}
comment|/**      * Logger Events that are related to Producers      */
specifier|public
name|void
name|setLogProducerEvents
parameter_list|(
name|boolean
name|logProducerEvents
parameter_list|)
block|{
name|this
operator|.
name|logProducerEvents
operator|=
name|logProducerEvents
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLogInternalEvents
parameter_list|()
block|{
return|return
name|logInternalEvents
return|;
block|}
comment|/**      * Logger Events that are normally internal to the broker      */
specifier|public
name|void
name|setLogInternalEvents
parameter_list|(
name|boolean
name|logInternalEvents
parameter_list|)
block|{
name|this
operator|.
name|logInternalEvents
operator|=
name|logInternalEvents
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConsumerBrokerExchange
name|consumerExchange
parameter_list|,
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Acknowledging message for client ID: {}{}"
argument_list|,
name|consumerExchange
operator|.
name|getConnectionContext
argument_list|()
operator|.
name|getClientId
argument_list|()
argument_list|,
operator|(
name|ack
operator|.
name|getMessageCount
argument_list|()
operator|==
literal|1
condition|?
literal|", "
operator|+
name|ack
operator|.
name|getLastMessageId
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ack
operator|.
name|getMessageCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Message count: {}, First Message Id: {}, Last Message Id: {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|ack
operator|.
name|getMessageCount
argument_list|()
block|,
name|ack
operator|.
name|getFirstMessageId
argument_list|()
block|,
name|ack
operator|.
name|getLastMessageId
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|acknowledge
argument_list|(
name|consumerExchange
argument_list|,
name|ack
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Response
name|messagePull
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessagePull
name|pull
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Message Pull from: {} on {}"
argument_list|,
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|pull
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|messagePull
argument_list|(
name|context
argument_list|,
name|pull
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConnectionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding Connection: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding Consumer: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogProducerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding Producer: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogTransactionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Committing transaction: {}"
argument_list|,
name|xid
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|,
name|onePhase
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|RemoveSubscriptionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing subscription: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeSubscription
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TransactionId
index|[]
name|getPreparedTransactions
parameter_list|(
name|ConnectionContext
name|context
parameter_list|)
throws|throws
name|Exception
block|{
name|TransactionId
index|[]
name|result
init|=
name|super
operator|.
name|getPreparedTransactions
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|isLogAll
argument_list|()
operator|||
name|isLogTransactionEvents
argument_list|()
operator|)
operator|&&
name|result
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|tids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|TransactionId
name|tid
range|:
name|result
control|)
block|{
if|if
condition|(
name|tids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tids
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|tids
operator|.
name|append
argument_list|(
name|tid
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Prepared transactions: {}"
argument_list|,
name|tids
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|prepareTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogTransactionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Preparing transaction: {}"
argument_list|,
name|xid
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|prepareTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConnection
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConnectionInfo
name|info
parameter_list|,
name|Throwable
name|error
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConnectionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing Connection: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeConnection
argument_list|(
name|context
argument_list|,
name|info
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing Consumer: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogProducerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing Producer: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogTransactionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling back Transaction: {}"
argument_list|,
name|xid
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|rollbackTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogProducerEvents
argument_list|()
condition|)
block|{
name|logSend
argument_list|(
name|messageSend
operator|.
name|copy
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logSend
parameter_list|(
name|Message
name|copy
parameter_list|)
block|{
name|copy
operator|.
name|getSize
argument_list|()
expr_stmt|;
name|Logger
name|perDestinationsLogger
init|=
name|LOG
decl_stmt|;
if|if
condition|(
name|isPerDestinationLogger
argument_list|()
condition|)
block|{
name|ActiveMQDestination
name|destination
init|=
name|copy
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|perDestinationsLogger
operator|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LOG
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|destination
operator|.
name|getDestinationTypeAsString
argument_list|()
operator|+
literal|"."
operator|+
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|perDestinationsLogger
operator|.
name|info
argument_list|(
literal|"Sending message: {}"
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogTransactionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Beginning transaction: {}"
argument_list|,
name|xid
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|beginTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|forgetTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|transactionId
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogTransactionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Forgetting transaction: {}"
argument_list|,
name|transactionId
operator|.
name|getTransactionKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|forgetTransaction
argument_list|(
name|context
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
index|[]
name|getClients
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
index|[]
name|result
init|=
name|super
operator|.
name|getClients
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get Clients returned empty list."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|cids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Connection
name|c
range|:
name|result
control|)
block|{
name|cids
operator|.
name|append
argument_list|(
name|cids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
argument_list|)
expr_stmt|;
name|cids
operator|.
name|append
argument_list|(
name|c
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected clients: {}"
argument_list|,
name|cids
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|getClients
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
name|addDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|boolean
name|create
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding destination: {}:{}"
argument_list|,
name|destination
operator|.
name|getDestinationTypeAsString
argument_list|()
argument_list|,
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|addDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|create
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestination
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|long
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing destination: {}:{}"
argument_list|,
name|destination
operator|.
name|getDestinationTypeAsString
argument_list|()
argument_list|,
name|destination
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeDestination
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ActiveMQDestination
index|[]
name|getDestinations
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQDestination
index|[]
name|result
init|=
name|super
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get Destinations returned empty list."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|destinations
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|result
control|)
block|{
name|destinations
operator|.
name|append
argument_list|(
name|destinations
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|append
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Get Destinations: {}"
argument_list|,
name|destinations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting {}"
argument_list|,
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping {}"
argument_list|,
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addSession
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|SessionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogSessionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding Session: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addSession
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSession
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|SessionInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogSessionEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing Session: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeSession
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addBroker
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|BrokerInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding Broker {}"
argument_list|,
name|info
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addBroker
argument_list|(
name|connection
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeBroker
parameter_list|(
name|Connection
name|connection
parameter_list|,
name|BrokerInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing Broker {}"
argument_list|,
name|info
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeBroker
argument_list|(
name|connection
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BrokerInfo
index|[]
name|getPeerBrokerInfos
parameter_list|()
block|{
name|BrokerInfo
index|[]
name|result
init|=
name|super
operator|.
name|getPeerBrokerInfos
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get Peer Broker Infos returned empty list."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|peers
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|BrokerInfo
name|bi
range|:
name|result
control|)
block|{
name|peers
operator|.
name|append
argument_list|(
name|peers
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
argument_list|)
expr_stmt|;
name|peers
operator|.
name|append
argument_list|(
name|bi
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Get Peer Broker Infos: {}"
argument_list|,
name|peers
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preProcessDispatch
parameter_list|(
name|MessageDispatch
name|messageDispatch
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"preProcessDispatch: {}"
argument_list|,
name|messageDispatch
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|preProcessDispatch
argument_list|(
name|messageDispatch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postProcessDispatch
parameter_list|(
name|MessageDispatch
name|messageDispatch
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"postProcessDispatch: {}"
argument_list|,
name|messageDispatch
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|postProcessDispatch
argument_list|(
name|messageDispatch
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processDispatchNotification
parameter_list|(
name|MessageDispatchNotification
name|messageDispatchNotification
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ProcessDispatchNotification: {}"
argument_list|,
name|messageDispatchNotification
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|processDispatchNotification
argument_list|(
name|messageDispatchNotification
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|getDurableDestinations
parameter_list|()
block|{
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|result
init|=
name|super
operator|.
name|getDurableDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Get Durable Destinations returned empty list."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|destinations
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|result
control|)
block|{
name|destinations
operator|.
name|append
argument_list|(
name|destinations
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
literal|", "
else|:
literal|""
argument_list|)
expr_stmt|;
name|destinations
operator|.
name|append
argument_list|(
name|dest
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Get Durable Destinations: {}"
argument_list|,
name|destinations
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding destination info: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|addDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDestinationInfo
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|DestinationInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing destination info: {}"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|removeDestinationInfo
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageExpired
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|message
parameter_list|,
name|Subscription
name|subscription
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to display message."
decl_stmt|;
name|msg
operator|=
name|message
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message has expired: {}"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|messageExpired
argument_list|(
name|context
argument_list|,
name|message
argument_list|,
name|subscription
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|sendToDeadLetterQueue
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|,
name|Subscription
name|subscription
parameter_list|,
name|Throwable
name|poisonCause
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to display message."
decl_stmt|;
name|msg
operator|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending to DLQ: {}"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|sendToDeadLetterQueue
argument_list|(
name|context
argument_list|,
name|messageReference
argument_list|,
name|subscription
argument_list|,
name|poisonCause
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|fastProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|producerInfo
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogProducerEvents
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fast Producer: {}"
argument_list|,
name|producerInfo
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|fastProducer
argument_list|(
name|context
argument_list|,
name|producerInfo
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|isFull
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|Usage
argument_list|<
name|?
argument_list|>
name|usage
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogProducerEvents
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Destination is full: {}"
argument_list|,
name|destination
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|isFull
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|usage
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageConsumed
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to display message."
decl_stmt|;
name|msg
operator|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message consumed: {}"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|messageConsumed
argument_list|(
name|context
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageDelivered
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to display message."
decl_stmt|;
name|msg
operator|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message delivered: {}"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|messageDelivered
argument_list|(
name|context
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|messageDiscarded
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|,
name|MessageReference
name|messageReference
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to display message."
decl_stmt|;
name|msg
operator|=
name|messageReference
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Message discarded: {}"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|messageDiscarded
argument_list|(
name|context
argument_list|,
name|sub
argument_list|,
name|messageReference
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|slowConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Destination
name|destination
parameter_list|,
name|Subscription
name|subs
parameter_list|)
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogConsumerEvents
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Detected slow consumer on {}"
argument_list|,
name|destination
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"Connection("
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|subs
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|") Session("
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|subs
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|slowConsumer
argument_list|(
name|context
argument_list|,
name|destination
argument_list|,
name|subs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nowMasterBroker
parameter_list|()
block|{
if|if
condition|(
name|isLogAll
argument_list|()
operator|||
name|isLogInternalEvents
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Is now the master broker: {}"
argument_list|,
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|nowMasterBroker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"LoggingBrokerPlugin("
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"logAll="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isLogAll
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", logConnectionEvents="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isLogConnectionEvents
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", logSessionEvents="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isLogSessionEvents
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", logConsumerEvents="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isLogConsumerEvents
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", logProducerEvents="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isLogProducerEvents
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", logTransactionEvents="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isLogTransactionEvents
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", logInternalEvents="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|isLogInternalEvents
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPerDestinationLogger
parameter_list|(
name|boolean
name|perDestinationLogger
parameter_list|)
block|{
name|this
operator|.
name|perDestinationLogger
operator|=
name|perDestinationLogger
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPerDestinationLogger
parameter_list|()
block|{
return|return
name|perDestinationLogger
return|;
block|}
block|}
end_class

end_unit

