begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQXAConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQXAConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|QueueViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|XATransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ByteSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|QueueBrowser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|XASession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|XAResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|transaction
operator|.
name|xa
operator|.
name|Xid
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|TestUtils
operator|.
name|createXid
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|value
operator|=
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XACompletionTest
extends|extends
name|TestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|XACompletionTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ActiveMQXAConnectionFactory
name|factory
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|messagesExpected
init|=
literal|1
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|String
name|connectionUri
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|TestSupport
operator|.
name|PersistenceAdapterChoice
name|persistenceAdapterChoice
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"store={0}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|getTestParameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|TestSupport
operator|.
name|PersistenceAdapterChoice
operator|.
name|KahaDB
block|}
block|,
block|{
name|PersistenceAdapterChoice
operator|.
name|JDBC
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopAll
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatsAndRedispatchAfterAckPreparedClosed
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="
operator|+
literal|0
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|xaSession
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|xaSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|XAResource
name|resource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
expr_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|activeMQXAConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try jmx browse... after commit"
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|1
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try receive... after rollback"
argument_list|)
expr_stmt|;
name|message
operator|=
name|regularReceive
argument_list|(
literal|"TEST"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"message gone"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatsAndBrowseAfterAckPreparedCommitted
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
name|messagesExpected
argument_list|)
expr_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|xaSession
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|xaSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|XAResource
name|resource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
expr_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|int
name|messagesReceived
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesExpected
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Receiving message "
operator|+
operator|(
name|messagesReceived
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
name|messagesReceived
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|prepare
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try jmx browse... after commit"
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|proxy
operator|.
name|browseMessages
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prefetch 0"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 0"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try browse... after commit"
argument_list|)
expr_stmt|;
name|Message
name|browsed
init|=
name|regularBrowseFirst
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"message gone"
argument_list|,
name|browsed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try receive... after commit"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|regularReceive
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"message gone"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatsAndBrowseAfterAckPreparedRolledback
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|xaSession
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|xaSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|XAResource
name|resource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
expr_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prefetch 0"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 0"
argument_list|,
literal|10
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 0"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|cursorSize
argument_list|()
argument_list|)
expr_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|prepare
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|proxy
operator|.
name|getInFlightCount
argument_list|()
operator|==
literal|0l
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prefetch"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|10
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cursor size"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|cursorSize
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|rollback
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try jmx browse... after rollback"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|proxy
operator|.
name|browseMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prefetch"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|10
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cursor size"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|cursorSize
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try browse... after"
argument_list|)
expr_stmt|;
name|Message
name|browsed
init|=
name|regularBrowseFirst
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"message gone"
argument_list|,
name|browsed
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try receive... after"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|regularReceive
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"message gone"
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatsAndConsumeAfterAckPreparedRolledback
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|xaSession
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|xaSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|XAResource
name|resource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
expr_stmt|;
name|resource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|int
name|messagesReceived
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Receiving message "
operator|+
operator|(
name|messagesReceived
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
name|messagesReceived
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|prepare
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"drain"
argument_list|,
literal|5
argument_list|,
name|drainUnack
argument_list|(
literal|5
argument_list|,
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|broker
operator|=
name|restartBroker
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"redrain"
argument_list|,
literal|5
argument_list|,
name|drainUnack
argument_list|(
literal|5
argument_list|,
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try consume... after restart"
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"prefetch"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|5
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cursor size 0"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|cursorSize
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|activeMQXAConnection
operator|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
expr_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|xaSession
operator|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|XAResource
name|xaResource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|Xid
index|[]
name|xids
init|=
name|xaResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
decl_stmt|;
name|xaResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rollback outcome for ack"
argument_list|)
expr_stmt|;
name|xaResource
operator|.
name|rollback
argument_list|(
name|xids
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try receive... after rollback"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message
init|=
name|regularReceive
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"message gone: "
operator|+
name|i
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|dumpMessages
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
literal|"none left"
argument_list|,
name|regularReceive
argument_list|(
literal|"TEST"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"prefetch"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getInFlightCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cursor size"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|cursorSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dq"
argument_list|,
literal|10
argument_list|,
name|proxy
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatsAndConsumeAfterAckPreparedRolledbackOutOfOrderRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
literal|20
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|xaSession
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|xaSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|XAResource
name|resource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
try|try
block|{
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received ("
operator|+
name|i
operator|+
literal|") : ,"
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resource
operator|.
name|prepare
argument_list|(
name|tid
argument_list|)
expr_stmt|;
comment|// no close - b/c messages end up in pagedInPendingDispatch!
comment|// activeMQXAConnection.close();
block|}
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|XAResource
name|xaResource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|Xid
index|[]
name|xids
init|=
name|xaResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
decl_stmt|;
name|xaResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|xaResource
operator|.
name|rollback
argument_list|(
name|xids
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|xaResource
operator|.
name|rollback
argument_list|(
name|xids
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|activeMQXAConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"RESTART"
argument_list|)
expr_stmt|;
name|broker
operator|=
name|restartBroker
argument_list|()
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// set maxBatchSize=1
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all="
operator|+
literal|1
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|receiveFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
decl_stmt|;
comment|// recover/rollback the second tx
name|ActiveMQXAConnectionFactory
name|activeMQXAConnectionFactory
init|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0"
argument_list|)
decl_stmt|;
name|activeMQXAConnectionFactory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|activeMQXAConnection
operator|=
operator|(
name|ActiveMQXAConnection
operator|)
name|activeMQXAConnectionFactory
operator|.
name|createXAConnection
argument_list|()
expr_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|xaSession
operator|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
expr_stmt|;
name|xaResource
operator|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
expr_stmt|;
name|xids
operator|=
name|xaResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMSTARTRSCAN
argument_list|)
expr_stmt|;
name|xaResource
operator|.
name|recover
argument_list|(
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|xids
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|xaResource
operator|.
name|rollback
argument_list|(
name|xids
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// another prefetch demand of 1
name|MessageConsumer
name|consumer2
init|=
name|session
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST?consumer.prefetchSize=2"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try receive... after rollback"
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|regularReceiveWith
argument_list|(
name|receiveFactory
argument_list|,
literal|"TEST"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"message 1: "
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|message
operator|=
name|regularReceiveWith
argument_list|(
name|receiveFactory
argument_list|,
literal|"TEST"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"last message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveInTwoBranches
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
name|messagesExpected
argument_list|)
expr_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|xaSession
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|xaSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|XAResource
name|resource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
specifier|final
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|byte
index|[]
name|branch
init|=
name|tid
operator|.
name|getBranchQualifier
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|branch2
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|branch
argument_list|,
name|branch
operator|.
name|length
argument_list|)
decl_stmt|;
name|branch2
index|[
literal|0
index|]
operator|=
literal|'!'
expr_stmt|;
name|Xid
name|branchTid
init|=
operator|new
name|Xid
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
name|tid
operator|.
name|getFormatId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|tid
operator|.
name|getGlobalTransactionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|branch2
return|;
block|}
block|}
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|int
name|messagesReceived
init|=
literal|0
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesExpected
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Receiving message "
operator|+
operator|(
name|messagesReceived
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
name|messagesReceived
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnectionSend
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnectionSend
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSessionSend
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destinationSend
init|=
name|xaSessionSend
operator|.
name|createQueue
argument_list|(
literal|"TEST_MOVE"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|xaSessionSend
operator|.
name|createProducer
argument_list|(
name|destinationSend
argument_list|)
decl_stmt|;
name|XAResource
name|resourceSend
init|=
name|xaSessionSend
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|resourceSend
operator|.
name|start
argument_list|(
name|branchTid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|toSend
init|=
operator|(
name|ActiveMQMessage
operator|)
name|xaSessionSend
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|toSend
operator|.
name|setTransactionId
argument_list|(
operator|new
name|XATransactionId
argument_list|(
name|branchTid
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|toSend
argument_list|)
expr_stmt|;
name|resourceSend
operator|.
name|end
argument_list|(
name|branchTid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resourceSend
operator|.
name|prepare
argument_list|(
name|branchTid
argument_list|)
expr_stmt|;
name|resource
operator|.
name|prepare
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Prepared"
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Commit Ack"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Commit Send"
argument_list|)
expr_stmt|;
name|resourceSend
operator|.
name|commit
argument_list|(
name|branchTid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try jmx browse... after commit"
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|proxy
operator|.
name|browseMessages
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dq "
argument_list|,
literal|1
argument_list|,
name|proxy
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 0"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|queueMoveViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|moveProxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueMoveViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"enq"
argument_list|,
literal|1
argument_list|,
name|moveProxy
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 1"
argument_list|,
literal|1
argument_list|,
name|moveProxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|regularReceive
argument_list|(
literal|"TEST_MOVE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 0"
argument_list|,
literal|0
argument_list|,
name|moveProxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveInTwoBranchesTwoBrokers
parameter_list|()
throws|throws
name|Exception
block|{
name|factory
operator|=
operator|new
name|ActiveMQXAConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all=0&jms.redeliveryPolicy.maximumRedeliveries="
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setWatchTopicAdvisories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sendMessages
argument_list|(
name|messagesExpected
argument_list|)
expr_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnection
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSession
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destination
init|=
name|xaSession
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|xaSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|XAResource
name|resource
init|=
name|xaSession
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
specifier|final
name|Xid
name|tid
init|=
name|createXid
argument_list|()
decl_stmt|;
name|byte
index|[]
name|branch
init|=
name|tid
operator|.
name|getBranchQualifier
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|branch2
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|branch
argument_list|,
name|branch
operator|.
name|length
argument_list|)
decl_stmt|;
name|branch2
index|[
literal|0
index|]
operator|=
literal|'!'
expr_stmt|;
name|Xid
name|branchTid
init|=
operator|new
name|Xid
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getFormatId
parameter_list|()
block|{
return|return
name|tid
operator|.
name|getFormatId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getGlobalTransactionId
parameter_list|()
block|{
return|return
name|tid
operator|.
name|getGlobalTransactionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getBranchQualifier
parameter_list|()
block|{
return|return
name|branch2
return|;
block|}
block|}
decl_stmt|;
name|resource
operator|.
name|start
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|int
name|messagesReceived
init|=
literal|0
decl_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesExpected
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Receiving message "
operator|+
operator|(
name|messagesReceived
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received : "
operator|+
name|message
argument_list|)
expr_stmt|;
name|messagesReceived
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|resource
operator|.
name|end
argument_list|(
name|tid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|ActiveMQXAConnection
name|activeMQXAConnectionSend
init|=
operator|(
name|ActiveMQXAConnection
operator|)
name|factory
operator|.
name|createXAConnection
argument_list|()
decl_stmt|;
name|activeMQXAConnectionSend
operator|.
name|start
argument_list|()
expr_stmt|;
name|XASession
name|xaSessionSend
init|=
name|activeMQXAConnection
operator|.
name|createXASession
argument_list|()
decl_stmt|;
name|Destination
name|destinationSend
init|=
name|xaSessionSend
operator|.
name|createQueue
argument_list|(
literal|"TEST_MOVE"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|xaSessionSend
operator|.
name|createProducer
argument_list|(
name|destinationSend
argument_list|)
decl_stmt|;
name|XAResource
name|resourceSend
init|=
name|xaSessionSend
operator|.
name|getXAResource
argument_list|()
decl_stmt|;
name|resourceSend
operator|.
name|start
argument_list|(
name|branchTid
argument_list|,
name|XAResource
operator|.
name|TMNOFLAGS
argument_list|)
expr_stmt|;
name|ActiveMQMessage
name|toSend
init|=
operator|(
name|ActiveMQMessage
operator|)
name|xaSessionSend
operator|.
name|createTextMessage
argument_list|()
decl_stmt|;
name|toSend
operator|.
name|setTransactionId
argument_list|(
operator|new
name|XATransactionId
argument_list|(
name|branchTid
argument_list|)
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|toSend
argument_list|)
expr_stmt|;
name|resourceSend
operator|.
name|end
argument_list|(
name|branchTid
argument_list|,
name|XAResource
operator|.
name|TMSUCCESS
argument_list|)
expr_stmt|;
name|resourceSend
operator|.
name|prepare
argument_list|(
name|branchTid
argument_list|)
expr_stmt|;
name|resource
operator|.
name|prepare
argument_list|(
name|tid
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Prepared"
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Commit Ack"
argument_list|)
expr_stmt|;
name|resource
operator|.
name|commit
argument_list|(
name|tid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Commit Send"
argument_list|)
expr_stmt|;
name|resourceSend
operator|.
name|commit
argument_list|(
name|branchTid
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dumpMessages
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Try jmx browse... after commit"
argument_list|)
expr_stmt|;
name|ObjectName
name|queueViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|proxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|proxy
operator|.
name|browseMessages
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"dq "
argument_list|,
literal|1
argument_list|,
name|proxy
operator|.
name|getDequeueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 0"
argument_list|,
literal|0
argument_list|,
name|proxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectName
name|queueMoveViewMBeanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName=localhost,destinationType=Queue,destinationName=TEST_MOVE"
argument_list|)
decl_stmt|;
name|QueueViewMBean
name|moveProxy
init|=
operator|(
name|QueueViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|queueMoveViewMBeanName
argument_list|,
name|QueueViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"enq"
argument_list|,
literal|1
argument_list|,
name|moveProxy
operator|.
name|getEnqueueCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 1"
argument_list|,
literal|1
argument_list|,
name|moveProxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|regularReceive
argument_list|(
literal|"TEST_MOVE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"size 0"
argument_list|,
literal|0
argument_list|,
name|moveProxy
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Message
name|regularReceive
parameter_list|(
name|String
name|qName
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
decl_stmt|;
return|return
name|regularReceiveWith
argument_list|(
name|factory
argument_list|,
name|qName
argument_list|)
return|;
block|}
specifier|private
name|Message
name|regularReceiveWith
parameter_list|(
name|ActiveMQConnectionFactory
name|factory
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|Exception
block|{
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|qName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
return|return
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
return|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|drainUnack
parameter_list|(
name|int
name|limit
parameter_list|,
name|String
name|qName
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|drained
init|=
literal|0
decl_stmt|;
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
operator|+
literal|"?jms.prefetchPolicy.all="
operator|+
name|limit
argument_list|)
decl_stmt|;
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|qName
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
while|while
condition|(
name|drained
operator|<
name|limit
operator|&&
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|drained
operator|++
expr_stmt|;
block|}
empty_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|drained
return|;
block|}
specifier|private
name|Message
name|regularBrowseFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
try|try
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|QueueBrowser
name|browser
init|=
name|session
operator|.
name|createBrowser
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Enumeration
name|e
init|=
name|browser
operator|.
name|getEnumeration
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
return|return
operator|(
name|Message
operator|)
name|e
operator|.
name|nextElement
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|sendMessages
parameter_list|(
name|int
name|messagesExpected
parameter_list|)
throws|throws
name|Exception
block|{
name|sendMessagesWith
argument_list|(
name|factory
argument_list|,
name|messagesExpected
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|sendMessagesWith
parameter_list|(
name|ConnectionFactory
name|factory
parameter_list|,
name|int
name|messagesExpected
parameter_list|)
throws|throws
name|Exception
block|{
name|javax
operator|.
name|jms
operator|.
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
literal|"TEST"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messagesExpected
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sending message "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|messagesExpected
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"test message "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|dumpMessages
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|persistenceAdapterChoice
operator|.
name|compareTo
argument_list|(
name|PersistenceAdapterChoice
operator|.
name|JDBC
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return;
block|}
name|WireFormat
name|wireFormat
init|=
operator|new
name|OpenWireFormat
argument_list|()
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|Connection
name|conn
init|=
operator|(
operator|(
name|JDBCPersistenceAdapter
operator|)
name|broker
operator|.
name|getPersistenceAdapter
argument_list|()
operator|)
operator|.
name|getDataSource
argument_list|()
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|PreparedStatement
name|statement
init|=
name|conn
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT ID, MSG, XID FROM ACTIVEMQ_MSGS"
argument_list|)
decl_stmt|;
name|ResultSet
name|result
init|=
name|statement
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Messages in broker db..."
argument_list|)
expr_stmt|;
while|while
condition|(
name|result
operator|.
name|next
argument_list|()
condition|)
block|{
name|long
name|id
init|=
name|result
operator|.
name|getLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
name|message
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
operator|)
name|wireFormat
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteSequence
argument_list|(
name|result
operator|.
name|getBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|xid
init|=
name|result
operator|.
name|getString
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"id: "
operator|+
name|id
operator|+
literal|", message SeqId: "
operator|+
name|message
operator|.
name|getMessageId
argument_list|()
operator|.
name|getBrokerSequenceId
argument_list|()
operator|+
literal|", XID:"
operator|+
name|xid
operator|+
literal|", MSG: "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
name|statement
operator|.
name|close
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createBroker
argument_list|(
literal|true
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|restartBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
return|return
name|createBroker
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|del
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|broker
operator|.
name|setAdvisorySupport
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|policyEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
name|policyEntry
operator|.
name|setExpireMessagesPeriod
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|policyEntry
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|setPersistenceAdapter
argument_list|(
name|broker
argument_list|,
name|persistenceAdapterChoice
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionUri
operator|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
end_class

end_unit

