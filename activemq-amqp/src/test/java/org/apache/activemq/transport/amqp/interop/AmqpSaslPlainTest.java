begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|interop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|AuthenticationUser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SimpleAuthenticationPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpClientTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|AmqpSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|client
operator|.
name|sasl
operator|.
name|PlainMechanism
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test broker behaviour when creating AMQP connections with SASL PLAIN mechanism.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpSaslPlainTest
extends|extends
name|AmqpClientTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ADMIN
init|=
literal|"admin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER_PASSWORD
init|=
literal|"password"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|performAdditionalConfiguration
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
name|brokerService
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|AuthenticationUser
argument_list|>
name|users
init|=
operator|new
name|ArrayList
argument_list|<
name|AuthenticationUser
argument_list|>
argument_list|()
decl_stmt|;
name|users
operator|.
name|add
argument_list|(
operator|new
name|AuthenticationUser
argument_list|(
name|USER
argument_list|,
name|USER_PASSWORD
argument_list|,
literal|"users"
argument_list|)
argument_list|)
expr_stmt|;
name|users
operator|.
name|add
argument_list|(
operator|new
name|AuthenticationUser
argument_list|(
name|ADMIN
argument_list|,
name|ADMIN
argument_list|,
literal|"admins"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleAuthenticationPlugin
name|authenticationPlugin
init|=
operator|new
name|SimpleAuthenticationPlugin
argument_list|(
name|users
argument_list|)
decl_stmt|;
name|brokerService
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
name|authenticationPlugin
block|}
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSaslPlainWithValidUsernameAndPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|(
name|USER
argument_list|,
name|USER_PASSWORD
argument_list|)
decl_stmt|;
name|doSucessfullConnectionTestImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSaslPlainWithValidUsernameAndPasswordAndAuthzidAsUser
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|(
name|USER
argument_list|,
name|USER_PASSWORD
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAuthzid
argument_list|(
name|USER
argument_list|)
expr_stmt|;
name|doSucessfullConnectionTestImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSaslPlainWithValidUsernameAndPasswordAndAuthzidAsUnkown
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|(
name|USER
argument_list|,
name|USER_PASSWORD
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAuthzid
argument_list|(
literal|"unknown"
argument_list|)
expr_stmt|;
name|doSucessfullConnectionTestImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doSucessfullConnectionTestImpl
parameter_list|(
name|AmqpClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|setMechanismRestriction
argument_list|(
name|PlainMechanism
operator|.
name|MECH_NAME
argument_list|)
expr_stmt|;
comment|// Expect connection to succeed
name|AmqpConnection
name|connection
init|=
name|client
operator|.
name|connect
argument_list|()
decl_stmt|;
comment|// Exercise it for verification
name|exerciseConnection
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|exerciseConnection
parameter_list|(
name|AmqpConnection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|AmqpSession
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|AmqpSender
name|sender
init|=
name|session
operator|.
name|createSender
argument_list|(
literal|"queue://"
operator|+
name|getTestName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueues
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getProxyToQueue
argument_list|(
name|getTestName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueueProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|brokerService
operator|.
name|getAdminView
argument_list|()
operator|.
name|getQueueProducers
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSaslPlainWithInvalidUsername
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|(
literal|"not-user"
argument_list|,
name|USER_PASSWORD
argument_list|)
decl_stmt|;
name|doFailedConnectionTestImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSaslPlainWithInvalidPassword
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|(
name|USER
argument_list|,
literal|"not-user-password"
argument_list|)
decl_stmt|;
name|doFailedConnectionTestImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSaslPlainWithInvalidUsernameAndAuthzid
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|(
literal|"not-user"
argument_list|,
name|USER_PASSWORD
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAuthzid
argument_list|(
name|USER
argument_list|)
expr_stmt|;
name|doFailedConnectionTestImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testSaslPlainWithInvalidPasswordAndAuthzid
parameter_list|()
throws|throws
name|Exception
block|{
name|AmqpClient
name|client
init|=
name|createAmqpClient
argument_list|(
name|USER
argument_list|,
literal|"not-user-password"
argument_list|)
decl_stmt|;
name|client
operator|.
name|setAuthzid
argument_list|(
name|USER
argument_list|)
expr_stmt|;
name|doFailedConnectionTestImpl
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doFailedConnectionTestImpl
parameter_list|(
name|AmqpClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|client
operator|.
name|setMechanismRestriction
argument_list|(
name|PlainMechanism
operator|.
name|MECH_NAME
argument_list|)
expr_stmt|;
comment|// Expect connection to fail
try|try
block|{
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"exected connection to fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Expected
name|Throwable
name|cause
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected security exception cause"
argument_list|,
name|cause
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected security exception cause"
argument_list|,
name|cause
operator|instanceof
name|SecurityException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

