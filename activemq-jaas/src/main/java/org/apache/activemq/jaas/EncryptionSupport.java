begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jaas
package|;
end_package

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|encryption
operator|.
name|pbe
operator|.
name|StandardPBEStringEncryptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|encryption
operator|.
name|pbe
operator|.
name|config
operator|.
name|EnvironmentStringPBEConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|properties
operator|.
name|PropertyValueEncryptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jasypt
operator|.
name|iv
operator|.
name|RandomIvGenerator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Holds utility methods used work with encrypted values.  */
end_comment

begin_class
specifier|public
class|class
name|EncryptionSupport
block|{
specifier|static
specifier|public
name|void
name|decrypt
parameter_list|(
name|Properties
name|props
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
name|StandardPBEStringEncryptor
name|encryptor
init|=
name|createEncryptor
argument_list|(
name|algorithm
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|k
range|:
operator|new
name|ArrayList
argument_list|(
name|props
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|k
decl_stmt|;
name|String
name|value
init|=
name|props
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|PropertyValueEncryptionUtils
operator|.
name|isEncryptedValue
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|PropertyValueEncryptionUtils
operator|.
name|decrypt
argument_list|(
name|value
argument_list|,
name|encryptor
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|StandardPBEStringEncryptor
name|createEncryptor
parameter_list|(
name|String
name|algorithm
parameter_list|)
block|{
name|StandardPBEStringEncryptor
name|encryptor
init|=
operator|new
name|StandardPBEStringEncryptor
argument_list|()
decl_stmt|;
name|EnvironmentStringPBEConfig
name|config
init|=
operator|new
name|EnvironmentStringPBEConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|algorithm
operator|!=
literal|null
condition|)
block|{
name|encryptor
operator|.
name|setAlgorithm
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
comment|// From Jasypt: for PBE-AES-based algorithms, the IV generator is MANDATORY"
if|if
condition|(
name|algorithm
operator|.
name|startsWith
argument_list|(
literal|"PBE"
argument_list|)
operator|&&
name|algorithm
operator|.
name|contains
argument_list|(
literal|"AES"
argument_list|)
condition|)
block|{
name|encryptor
operator|.
name|setIvGenerator
argument_list|(
operator|new
name|RandomIvGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|config
operator|.
name|setPasswordEnvName
argument_list|(
literal|"ACTIVEMQ_ENCRYPTION_PASSWORD"
argument_list|)
expr_stmt|;
name|encryptor
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
name|encryptor
return|;
block|}
block|}
end_class

end_unit

