begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|mqtt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|KeepAliveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|SchedulerTimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|AbstractInactivityMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|InactivityIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ThreadPoolUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|MQTTInactivityMonitor
extends|extends
name|TransportFilter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MQTTInactivityMonitor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_CHECK_TIME_MILLS
init|=
literal|30000
decl_stmt|;
specifier|private
specifier|static
name|ThreadPoolExecutor
name|ASYNC_TASKS
decl_stmt|;
specifier|private
specifier|static
name|int
name|CHECKER_COUNTER
decl_stmt|;
specifier|private
specifier|static
name|Timer
name|READ_CHECK_TIMER
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|monitorStarted
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|failed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|commandReceived
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|inReceive
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|lastReceiveCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReentrantLock
name|sendLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
name|SchedulerTimerTask
name|readCheckerTask
decl_stmt|;
specifier|private
name|long
name|readCheckTime
init|=
name|DEFAULT_CHECK_TIME_MILLS
decl_stmt|;
specifier|private
name|long
name|initialDelayTime
init|=
name|DEFAULT_CHECK_TIME_MILLS
decl_stmt|;
specifier|private
name|boolean
name|keepAliveResponseRequired
decl_stmt|;
specifier|private
name|MQTTProtocolConverter
name|protocolConverter
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|readChecker
init|=
operator|new
name|Runnable
argument_list|()
block|{
name|long
name|lastRunTime
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|elapsed
init|=
operator|(
name|now
operator|-
name|lastRunTime
operator|)
decl_stmt|;
if|if
condition|(
name|lastRunTime
operator|!=
literal|0
operator|&&
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|""
operator|+
name|elapsed
operator|+
literal|" ms elapsed since last read check."
argument_list|)
expr_stmt|;
block|}
comment|// Perhaps the timer executed a read check late.. and then executes
comment|// the next read check on time which causes the time elapsed between
comment|// read checks to be small..
comment|// If less than 90% of the read check Time elapsed then abort this readcheck.
if|if
condition|(
operator|!
name|allowReadCheck
argument_list|(
name|elapsed
argument_list|)
condition|)
block|{
comment|// FUNKY qdox bug does not allow me to inline this expression.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Aborting read check.. Not enough time elapsed since last read check."
argument_list|)
expr_stmt|;
return|return;
block|}
name|lastRunTime
operator|=
name|now
expr_stmt|;
name|readCheck
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|boolean
name|allowReadCheck
parameter_list|(
name|long
name|elapsed
parameter_list|)
block|{
return|return
name|elapsed
operator|>
operator|(
name|readCheckTime
operator|*
literal|9
operator|/
literal|10
operator|)
return|;
block|}
specifier|public
name|MQTTInactivityMonitor
parameter_list|(
name|Transport
name|next
parameter_list|,
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|next
operator|.
name|start
argument_list|()
expr_stmt|;
name|startMonitorThread
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|stopMonitorThread
argument_list|()
expr_stmt|;
name|next
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|final
name|void
name|readCheck
parameter_list|()
block|{
name|int
name|currentCounter
init|=
name|next
operator|.
name|getReceiveCounter
argument_list|()
decl_stmt|;
name|int
name|previousCounter
init|=
name|lastReceiveCounter
operator|.
name|getAndSet
argument_list|(
name|currentCounter
argument_list|)
decl_stmt|;
if|if
condition|(
name|inReceive
operator|.
name|get
argument_list|()
operator|||
name|currentCounter
operator|!=
name|previousCounter
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"A receive is in progress"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|commandReceived
operator|.
name|get
argument_list|()
operator|&&
name|monitorStarted
operator|.
name|get
argument_list|()
operator|&&
operator|!
name|ASYNC_TASKS
operator|.
name|isTerminating
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No message received since last read check for "
operator|+
name|toString
argument_list|()
operator|+
literal|"! Throwing InactivityIOException."
argument_list|)
expr_stmt|;
block|}
name|ASYNC_TASKS
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|protocolConverter
operator|!=
literal|null
condition|)
block|{
name|protocolConverter
operator|.
name|onTransportError
argument_list|()
expr_stmt|;
block|}
name|onException
argument_list|(
operator|new
name|InactivityIOException
argument_list|(
literal|"Channel was inactive for too (>"
operator|+
name|readCheckTime
operator|+
literal|") long: "
operator|+
name|next
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Message received since last read check, resetting flag: "
argument_list|)
expr_stmt|;
block|}
block|}
name|commandReceived
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
name|commandReceived
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|inReceive
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|==
name|KeepAliveInfo
operator|.
name|class
condition|)
block|{
name|KeepAliveInfo
name|info
init|=
operator|(
name|KeepAliveInfo
operator|)
name|command
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
name|sendLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|info
operator|.
name|setResponseRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|oneway
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sendLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|transportListener
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|inReceive
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|oneway
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
comment|// To prevent the inactivity monitor from sending a message while we
comment|// are performing a send we take the lock.
name|this
operator|.
name|sendLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|doOnewaySend
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|sendLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Must be called under lock, either read or write on sendLock.
specifier|private
name|void
name|doOnewaySend
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failed
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InactivityIOException
argument_list|(
literal|"Cannot send, channel has already failed: "
operator|+
name|next
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
throw|;
block|}
name|next
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
if|if
condition|(
name|failed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|stopMonitorThread
argument_list|()
expr_stmt|;
name|transportListener
operator|.
name|onException
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getReadCheckTime
parameter_list|()
block|{
return|return
name|readCheckTime
return|;
block|}
specifier|public
name|void
name|setReadCheckTime
parameter_list|(
name|long
name|readCheckTime
parameter_list|)
block|{
name|this
operator|.
name|readCheckTime
operator|=
name|readCheckTime
expr_stmt|;
block|}
specifier|public
name|long
name|getInitialDelayTime
parameter_list|()
block|{
return|return
name|initialDelayTime
return|;
block|}
specifier|public
name|void
name|setInitialDelayTime
parameter_list|(
name|long
name|initialDelayTime
parameter_list|)
block|{
name|this
operator|.
name|initialDelayTime
operator|=
name|initialDelayTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|isKeepAliveResponseRequired
parameter_list|()
block|{
return|return
name|this
operator|.
name|keepAliveResponseRequired
return|;
block|}
specifier|public
name|void
name|setKeepAliveResponseRequired
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|keepAliveResponseRequired
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMonitorStarted
parameter_list|()
block|{
return|return
name|this
operator|.
name|monitorStarted
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setProtocolConverter
parameter_list|(
name|MQTTProtocolConverter
name|protocolConverter
parameter_list|)
block|{
name|this
operator|.
name|protocolConverter
operator|=
name|protocolConverter
expr_stmt|;
block|}
specifier|public
name|MQTTProtocolConverter
name|getProtocolConverter
parameter_list|()
block|{
return|return
name|protocolConverter
return|;
block|}
specifier|synchronized
name|void
name|startMonitorThread
parameter_list|()
block|{
comment|// Not yet configured if this isn't set yet.
if|if
condition|(
name|protocolConverter
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|monitorStarted
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|readCheckTime
operator|>
literal|0
condition|)
block|{
name|readCheckerTask
operator|=
operator|new
name|SchedulerTimerTask
argument_list|(
name|readChecker
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readCheckTime
operator|>
literal|0
condition|)
block|{
name|monitorStarted
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|AbstractInactivityMonitor
operator|.
name|class
init|)
block|{
if|if
condition|(
name|CHECKER_COUNTER
operator|==
literal|0
condition|)
block|{
name|ASYNC_TASKS
operator|=
name|createExecutor
argument_list|()
expr_stmt|;
name|READ_CHECK_TIMER
operator|=
operator|new
name|Timer
argument_list|(
literal|"InactivityMonitor ReadCheck"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|CHECKER_COUNTER
operator|++
expr_stmt|;
if|if
condition|(
name|readCheckTime
operator|>
literal|0
condition|)
block|{
name|READ_CHECK_TIMER
operator|.
name|schedule
argument_list|(
name|readCheckerTask
argument_list|,
name|initialDelayTime
argument_list|,
name|readCheckTime
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|synchronized
name|void
name|stopMonitorThread
parameter_list|()
block|{
if|if
condition|(
name|monitorStarted
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|readCheckerTask
operator|!=
literal|null
condition|)
block|{
name|readCheckerTask
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|AbstractInactivityMonitor
operator|.
name|class
init|)
block|{
name|READ_CHECK_TIMER
operator|.
name|purge
argument_list|()
expr_stmt|;
name|CHECKER_COUNTER
operator|--
expr_stmt|;
if|if
condition|(
name|CHECKER_COUNTER
operator|==
literal|0
condition|)
block|{
name|READ_CHECK_TIMER
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|READ_CHECK_TIMER
operator|=
literal|null
expr_stmt|;
name|ThreadPoolUtils
operator|.
name|shutdown
argument_list|(
name|ASYNC_TASKS
argument_list|)
expr_stmt|;
name|ASYNC_TASKS
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|ThreadFactory
name|factory
init|=
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|runnable
parameter_list|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|runnable
argument_list|,
literal|"MQTTInactivityMonitor Async Task: "
operator|+
name|runnable
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|thread
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|ThreadPoolExecutor
name|createExecutor
parameter_list|()
block|{
name|ThreadPoolExecutor
name|exec
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|exec
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|exec
return|;
block|}
block|}
end_class

end_unit

