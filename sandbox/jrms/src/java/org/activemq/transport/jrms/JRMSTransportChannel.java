begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**   *   * Copyright 2004 Protique Ltd  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|jrms
package|;
end_package

begin_import
import|import
name|EDU
operator|.
name|oswego
operator|.
name|cs
operator|.
name|dl
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronizedBoolean
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|multicast
operator|.
name|reliable
operator|.
name|RMException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|multicast
operator|.
name|reliable
operator|.
name|transport
operator|.
name|RMPacketSocket
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|multicast
operator|.
name|reliable
operator|.
name|transport
operator|.
name|SessionDoneException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|multicast
operator|.
name|reliable
operator|.
name|transport
operator|.
name|TransportProfile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|multicast
operator|.
name|reliable
operator|.
name|transport
operator|.
name|lrmp
operator|.
name|LRMPTransportProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|io
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|message
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportChannelSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramPacket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_comment
comment|/**  * A JRMS implementation of a TransportChannel  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|JRMSTransportChannel
extends|extends
name|TransportChannelSupport
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SOCKET_BUFFER_SIZE
init|=
literal|32
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JRMSTransportChannel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|WireFormat
name|wireFormat
decl_stmt|;
specifier|private
name|SynchronizedBoolean
name|closed
decl_stmt|;
specifier|private
name|SynchronizedBoolean
name|started
decl_stmt|;
specifier|private
name|Thread
name|thread
decl_stmt|;
comment|//need to change this - and use a thread pool
comment|// need to see our own messages
specifier|private
name|RMPacketSocket
name|socket
decl_stmt|;
specifier|private
name|IdGenerator
name|idGenerator
decl_stmt|;
specifier|private
name|String
name|channelId
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|InetAddress
name|inetAddress
decl_stmt|;
specifier|private
name|Object
name|lock
decl_stmt|;
comment|/**      * Construct basic helpers      */
specifier|protected
name|JRMSTransportChannel
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|)
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
name|idGenerator
operator|=
operator|new
name|IdGenerator
argument_list|()
expr_stmt|;
name|channelId
operator|=
name|idGenerator
operator|.
name|generateId
argument_list|()
expr_stmt|;
name|closed
operator|=
operator|new
name|SynchronizedBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|started
operator|=
operator|new
name|SynchronizedBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lock
operator|=
operator|new
name|Object
argument_list|()
expr_stmt|;
block|}
comment|/**      * Connect to a remote Node - e.g. a Broker      *      * @param remoteLocation      * @throws JMSException      */
specifier|public
name|JRMSTransportChannel
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|URI
name|remoteLocation
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|port
operator|=
name|remoteLocation
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|this
operator|.
name|inetAddress
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|remoteLocation
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|LRMPTransportProfile
name|profile
init|=
operator|new
name|LRMPTransportProfile
argument_list|(
name|inetAddress
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|profile
operator|.
name|setTTL
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|profile
operator|.
name|setOrdered
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|socket
operator|=
name|profile
operator|.
name|createRMPacketSocket
argument_list|(
name|TransportProfile
operator|.
name|SEND_RECEIVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ioe
parameter_list|)
block|{
name|ioe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|JMSException
name|jmsEx
init|=
operator|new
name|JMSException
argument_list|(
literal|"Initialization of JRMSTransportChannel failed: "
operator|+
name|ioe
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
throw|throw
name|jmsEx
throw|;
block|}
block|}
comment|/**      * close the channel      */
specifier|public
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|closed
operator|.
name|commit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
try|try
block|{
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|trace
argument_list|(
name|toString
argument_list|()
operator|+
literal|" now closed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * start listeneing for events      *      * @throws JMSException if an error occurs      */
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|started
operator|.
name|commit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|thread
operator|=
operator|new
name|Thread
argument_list|(
name|this
argument_list|,
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isServerSide
argument_list|()
condition|)
block|{
name|thread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Asynchronously send a Packet      *      * @param packet      * @throws JMSException      */
specifier|public
name|void
name|asyncSend
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|JMSException
block|{
try|try
block|{
name|DatagramPacket
name|dpacket
init|=
name|createDatagramPacket
argument_list|(
name|packet
argument_list|)
decl_stmt|;
comment|// lets sync to avoid concurrent writes
comment|//synchronized (lock) {
name|socket
operator|.
name|send
argument_list|(
name|dpacket
argument_list|)
expr_stmt|;
comment|//}
block|}
catch|catch
parameter_list|(
name|RMException
name|rme
parameter_list|)
block|{
name|JMSException
name|jmsEx
init|=
operator|new
name|JMSException
argument_list|(
literal|"syncSend failed "
operator|+
name|rme
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|rme
argument_list|)
expr_stmt|;
throw|throw
name|jmsEx
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|JMSException
name|jmsEx
init|=
operator|new
name|JMSException
argument_list|(
literal|"asyncSend failed "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|jmsEx
throw|;
block|}
block|}
specifier|public
name|boolean
name|isMulticast
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * reads packets from a Socket      */
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|DatagramPacket
name|dpacket
init|=
name|socket
operator|.
name|receive
argument_list|()
decl_stmt|;
name|Packet
name|packet
init|=
name|wireFormat
operator|.
name|readPacket
argument_list|(
name|channelId
argument_list|,
name|dpacket
argument_list|)
decl_stmt|;
if|if
condition|(
name|packet
operator|!=
literal|null
condition|)
block|{
name|doConsumePacket
argument_list|(
name|packet
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|trace
argument_list|(
literal|"The socket peer is now closed"
argument_list|)
expr_stmt|;
comment|//doClose(new IOException("Socket peer is now closed"));
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SessionDoneException
name|e
parameter_list|)
block|{
comment|// this isn't really an exception, it just indicates
comment|// that the socket has closed normally
name|log
operator|.
name|trace
argument_list|(
literal|"Session completed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RMException
name|ste
parameter_list|)
block|{
name|doClose
argument_list|(
name|ste
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|doClose
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Can this wireformat process packets of this version      * @param version the version number to test      * @return true if can accept the version      */
specifier|public
name|boolean
name|canProcessWireFormatVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
return|return
name|wireFormat
operator|.
name|canProcessWireFormatVersion
argument_list|(
name|version
argument_list|)
return|;
block|}
comment|/**      * @return the current version of this wire format      */
specifier|public
name|int
name|getCurrentWireFormatVersion
parameter_list|()
block|{
return|return
name|wireFormat
operator|.
name|getCurrentWireFormatVersion
argument_list|()
return|;
block|}
specifier|protected
name|DatagramPacket
name|createDatagramPacket
parameter_list|()
block|{
name|DatagramPacket
name|answer
init|=
operator|new
name|DatagramPacket
argument_list|(
operator|new
name|byte
index|[
name|SOCKET_BUFFER_SIZE
index|]
argument_list|,
name|SOCKET_BUFFER_SIZE
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAddress
argument_list|(
name|inetAddress
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|DatagramPacket
name|createDatagramPacket
parameter_list|(
name|Packet
name|packet
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
name|DatagramPacket
name|answer
init|=
name|wireFormat
operator|.
name|writePacket
argument_list|(
name|channelId
argument_list|,
name|packet
argument_list|)
decl_stmt|;
name|answer
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setAddress
argument_list|(
name|inetAddress
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|private
name|void
name|doClose
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|closed
operator|.
name|get
argument_list|()
condition|)
block|{
name|JMSException
name|jmsEx
init|=
operator|new
name|JMSException
argument_list|(
literal|"Error reading socket: "
operator|+
name|ex
argument_list|)
decl_stmt|;
name|jmsEx
operator|.
name|setLinkedException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|onAsyncException
argument_list|(
name|jmsEx
argument_list|)
expr_stmt|;
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * pretty print for object      *      * @return String representation of this object      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JRMSTransportChannel: "
operator|+
name|socket
return|;
block|}
specifier|public
name|void
name|forceDisconnect
parameter_list|()
block|{
comment|// TODO: implement me.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not yet Implemented."
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

