begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|RemoveInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ConnectionStateTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|Tracked
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|DefaultThreadPools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|CompositeTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|DefaultTransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|FutureResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|ResponseCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * A Transport that is made reliable by being able to fail over to another  * transport when a transport failure is detected.  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|FailoverTransport
implements|implements
name|CompositeTransport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FailoverTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TransportListener
name|transportListener
decl_stmt|;
specifier|private
name|boolean
name|disposed
decl_stmt|;
specifier|private
name|boolean
name|connected
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|URI
argument_list|>
name|uris
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|URI
argument_list|>
name|updated
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|reconnectMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|backupMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|sleepMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|listenerMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConnectionStateTracker
name|stateTracker
init|=
operator|new
name|ConnectionStateTracker
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Command
argument_list|>
name|requestMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Command
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|URI
name|connectedTransportURI
decl_stmt|;
specifier|private
name|URI
name|failedConnectTransportURI
decl_stmt|;
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|Transport
argument_list|>
name|connectedTransport
init|=
operator|new
name|AtomicReference
argument_list|<
name|Transport
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|TaskRunner
name|reconnectTask
decl_stmt|;
specifier|private
name|boolean
name|started
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|long
name|initialReconnectDelay
init|=
literal|10
decl_stmt|;
specifier|private
name|long
name|maxReconnectDelay
init|=
literal|1000
operator|*
literal|30
decl_stmt|;
specifier|private
name|double
name|backOffMultiplier
init|=
literal|2d
decl_stmt|;
specifier|private
name|long
name|timeout
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|useExponentialBackOff
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|randomize
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxReconnectAttempts
decl_stmt|;
specifier|private
name|int
name|startupMaxReconnectAttempts
decl_stmt|;
specifier|private
name|int
name|connectFailures
decl_stmt|;
specifier|private
name|long
name|reconnectDelay
init|=
name|this
operator|.
name|initialReconnectDelay
decl_stmt|;
specifier|private
name|Exception
name|connectionFailure
decl_stmt|;
specifier|private
name|boolean
name|firstConnection
init|=
literal|true
decl_stmt|;
comment|// optionally always have a backup created
specifier|private
name|boolean
name|backup
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|BackupTransport
argument_list|>
name|backups
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|BackupTransport
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|backupPoolSize
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|trackMessages
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|trackTransactionProducers
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|maxCacheSize
init|=
literal|128
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|TransportListener
name|disposedListener
init|=
operator|new
name|DefaultTransportListener
argument_list|()
block|{     }
decl_stmt|;
comment|//private boolean connectionInterruptProcessingComplete;
specifier|private
specifier|final
name|TransportListener
name|myTransportListener
init|=
name|createTransportListener
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|updateURIsSupported
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|reconnectSupported
init|=
literal|true
decl_stmt|;
specifier|public
name|FailoverTransport
parameter_list|()
throws|throws
name|InterruptedIOException
block|{
name|stateTracker
operator|.
name|setTrackTransactions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Setup a task that is used to reconnect the a connection async.
name|reconnectTask
operator|=
name|DefaultThreadPools
operator|.
name|getDefaultTaskRunnerFactory
argument_list|()
operator|.
name|createTaskRunner
argument_list|(
operator|new
name|Task
argument_list|()
block|{
specifier|public
name|boolean
name|iterate
parameter_list|()
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|boolean
name|buildBackup
init|=
literal|true
decl_stmt|;
name|boolean
name|doReconnect
init|=
operator|!
name|disposed
decl_stmt|;
synchronized|synchronized
init|(
name|backupMutex
init|)
block|{
if|if
condition|(
name|connectedTransport
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|disposed
condition|)
block|{
name|result
operator|=
name|doReconnect
argument_list|()
expr_stmt|;
name|buildBackup
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|buildBackup
condition|)
block|{
name|buildBackups
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// build backups on the next iteration
name|result
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|reconnectTask
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reconnect task has been interrupted."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|,
literal|"ActiveMQ Failover Worker: "
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TransportListener
name|createTransportListener
parameter_list|()
block|{
return|return
operator|new
name|TransportListener
argument_list|()
block|{
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Object
name|object
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|requestMap
init|)
block|{
name|object
operator|=
name|requestMap
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
name|Response
operator|)
name|command
operator|)
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|object
operator|!=
literal|null
operator|&&
name|object
operator|.
name|getClass
argument_list|()
operator|==
name|Tracked
operator|.
name|class
condition|)
block|{
operator|(
operator|(
name|Tracked
operator|)
name|object
operator|)
operator|.
name|onResponses
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|command
operator|.
name|isConnectionControl
argument_list|()
condition|)
block|{
name|handleConnectionControl
argument_list|(
operator|(
name|ConnectionControl
operator|)
name|command
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|transportListener
operator|!=
literal|null
condition|)
block|{
name|transportListener
operator|.
name|onCommand
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
try|try
block|{
name|handleTransportFailure
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|transportListener
operator|.
name|onException
argument_list|(
operator|new
name|InterruptedIOException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{
if|if
condition|(
name|transportListener
operator|!=
literal|null
condition|)
block|{
name|transportListener
operator|.
name|transportInterupted
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{
if|if
condition|(
name|transportListener
operator|!=
literal|null
condition|)
block|{
name|transportListener
operator|.
name|transportResumed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
specifier|public
specifier|final
name|void
name|handleTransportFailure
parameter_list|(
name|IOException
name|e
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|this
operator|+
literal|" handleTransportFailure: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
name|Transport
name|transport
init|=
name|connectedTransport
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|transport
operator|==
literal|null
condition|)
block|{
comment|// sync with possible in progress reconnect
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
name|transport
operator|=
name|connectedTransport
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
name|transport
operator|.
name|setTransportListener
argument_list|(
name|disposedListener
argument_list|)
expr_stmt|;
name|ServiceSupport
operator|.
name|dispose
argument_list|(
name|transport
argument_list|)
expr_stmt|;
name|boolean
name|reconnectOk
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
if|if
condition|(
name|started
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Transport ("
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
operator|+
literal|") failed to "
operator|+
name|connectedTransportURI
operator|+
literal|" , attempting to automatically reconnect due to: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Transport failed with the following exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|reconnectOk
operator|=
literal|true
expr_stmt|;
block|}
name|initialized
operator|=
literal|false
expr_stmt|;
name|failedConnectTransportURI
operator|=
name|connectedTransportURI
expr_stmt|;
name|connectedTransportURI
operator|=
literal|null
expr_stmt|;
name|connected
operator|=
literal|false
expr_stmt|;
name|stateTracker
operator|.
name|transportInterrupted
argument_list|()
expr_stmt|;
comment|// notify before any reconnect attempt so ack state can be
comment|// whacked
if|if
condition|(
name|transportListener
operator|!=
literal|null
condition|)
block|{
name|transportListener
operator|.
name|transportInterupted
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reconnectOk
condition|)
block|{
name|reconnectTask
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|handleConnectionControl
parameter_list|(
name|ConnectionControl
name|control
parameter_list|)
block|{
name|String
name|reconnectStr
init|=
name|control
operator|.
name|getReconnectTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|reconnectStr
operator|!=
literal|null
condition|)
block|{
name|reconnectStr
operator|=
name|reconnectStr
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|reconnectStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|reconnectStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|isReconnectSupported
argument_list|()
condition|)
block|{
name|reconnect
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reconnected to: "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to handle ConnectionControl reconnect to "
operator|+
name|reconnectStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|connectedStr
init|=
name|control
operator|.
name|getConnectedBrokers
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectedStr
operator|!=
literal|null
condition|)
block|{
name|connectedStr
operator|=
name|connectedStr
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectedStr
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|isUpdateURIsSupported
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|connectedStr
argument_list|,
literal|","
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|str
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse broker address: "
operator|+
name|str
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
try|try
block|{
name|updateURIs
argument_list|(
name|control
operator|.
name|isRebalanceConnection
argument_list|()
argument_list|,
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|URI
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to update transport URI's from: "
operator|+
name|connectedStr
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Started."
argument_list|)
expr_stmt|;
if|if
condition|(
name|started
condition|)
block|{
return|return;
block|}
name|started
operator|=
literal|true
expr_stmt|;
name|stateTracker
operator|.
name|setMaxCacheSize
argument_list|(
name|getMaxCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|stateTracker
operator|.
name|setTrackMessages
argument_list|(
name|isTrackMessages
argument_list|()
argument_list|)
expr_stmt|;
name|stateTracker
operator|.
name|setTrackTransactionProducers
argument_list|(
name|isTrackTransactionProducers
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectedTransport
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|stateTracker
operator|.
name|restore
argument_list|(
name|connectedTransport
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reconnect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|Transport
name|transportToStop
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopped."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|started
condition|)
block|{
return|return;
block|}
name|started
operator|=
literal|false
expr_stmt|;
name|disposed
operator|=
literal|true
expr_stmt|;
name|connected
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|BackupTransport
name|t
range|:
name|backups
control|)
block|{
name|t
operator|.
name|setDisposed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|backups
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectedTransport
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|transportToStop
operator|=
name|connectedTransport
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|reconnectMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|sleepMutex
init|)
block|{
name|sleepMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|reconnectTask
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|transportToStop
operator|!=
literal|null
condition|)
block|{
name|transportToStop
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getInitialReconnectDelay
parameter_list|()
block|{
return|return
name|initialReconnectDelay
return|;
block|}
specifier|public
name|void
name|setInitialReconnectDelay
parameter_list|(
name|long
name|initialReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|initialReconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxReconnectDelay
parameter_list|()
block|{
return|return
name|maxReconnectDelay
return|;
block|}
specifier|public
name|void
name|setMaxReconnectDelay
parameter_list|(
name|long
name|maxReconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectDelay
operator|=
name|maxReconnectDelay
expr_stmt|;
block|}
specifier|public
name|long
name|getReconnectDelay
parameter_list|()
block|{
return|return
name|reconnectDelay
return|;
block|}
specifier|public
name|void
name|setReconnectDelay
parameter_list|(
name|long
name|reconnectDelay
parameter_list|)
block|{
name|this
operator|.
name|reconnectDelay
operator|=
name|reconnectDelay
expr_stmt|;
block|}
specifier|public
name|double
name|getReconnectDelayExponent
parameter_list|()
block|{
return|return
name|backOffMultiplier
return|;
block|}
specifier|public
name|void
name|setReconnectDelayExponent
parameter_list|(
name|double
name|reconnectDelayExponent
parameter_list|)
block|{
name|this
operator|.
name|backOffMultiplier
operator|=
name|reconnectDelayExponent
expr_stmt|;
block|}
specifier|public
name|Transport
name|getConnectedTransport
parameter_list|()
block|{
return|return
name|connectedTransport
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|URI
name|getConnectedTransportURI
parameter_list|()
block|{
return|return
name|connectedTransportURI
return|;
block|}
specifier|public
name|int
name|getMaxReconnectAttempts
parameter_list|()
block|{
return|return
name|maxReconnectAttempts
return|;
block|}
specifier|public
name|void
name|setMaxReconnectAttempts
parameter_list|(
name|int
name|maxReconnectAttempts
parameter_list|)
block|{
name|this
operator|.
name|maxReconnectAttempts
operator|=
name|maxReconnectAttempts
expr_stmt|;
block|}
specifier|public
name|int
name|getStartupMaxReconnectAttempts
parameter_list|()
block|{
return|return
name|this
operator|.
name|startupMaxReconnectAttempts
return|;
block|}
specifier|public
name|void
name|setStartupMaxReconnectAttempts
parameter_list|(
name|int
name|startupMaxReconnectAttempts
parameter_list|)
block|{
name|this
operator|.
name|startupMaxReconnectAttempts
operator|=
name|startupMaxReconnectAttempts
expr_stmt|;
block|}
specifier|public
name|long
name|getTimeout
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
specifier|public
name|void
name|setTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**      * @return Returns the randomize.      */
specifier|public
name|boolean
name|isRandomize
parameter_list|()
block|{
return|return
name|randomize
return|;
block|}
comment|/**      * @param randomize      *            The randomize to set.      */
specifier|public
name|void
name|setRandomize
parameter_list|(
name|boolean
name|randomize
parameter_list|)
block|{
name|this
operator|.
name|randomize
operator|=
name|randomize
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBackup
parameter_list|()
block|{
return|return
name|backup
return|;
block|}
specifier|public
name|void
name|setBackup
parameter_list|(
name|boolean
name|backup
parameter_list|)
block|{
name|this
operator|.
name|backup
operator|=
name|backup
expr_stmt|;
block|}
specifier|public
name|int
name|getBackupPoolSize
parameter_list|()
block|{
return|return
name|backupPoolSize
return|;
block|}
specifier|public
name|void
name|setBackupPoolSize
parameter_list|(
name|int
name|backupPoolSize
parameter_list|)
block|{
name|this
operator|.
name|backupPoolSize
operator|=
name|backupPoolSize
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTrackMessages
parameter_list|()
block|{
return|return
name|trackMessages
return|;
block|}
specifier|public
name|void
name|setTrackMessages
parameter_list|(
name|boolean
name|trackMessages
parameter_list|)
block|{
name|this
operator|.
name|trackMessages
operator|=
name|trackMessages
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTrackTransactionProducers
parameter_list|()
block|{
return|return
name|this
operator|.
name|trackTransactionProducers
return|;
block|}
specifier|public
name|void
name|setTrackTransactionProducers
parameter_list|(
name|boolean
name|trackTransactionProducers
parameter_list|)
block|{
name|this
operator|.
name|trackTransactionProducers
operator|=
name|trackTransactionProducers
expr_stmt|;
block|}
specifier|public
name|int
name|getMaxCacheSize
parameter_list|()
block|{
return|return
name|maxCacheSize
return|;
block|}
specifier|public
name|void
name|setMaxCacheSize
parameter_list|(
name|int
name|maxCacheSize
parameter_list|)
block|{
name|this
operator|.
name|maxCacheSize
operator|=
name|maxCacheSize
expr_stmt|;
block|}
comment|/**      * @return Returns true if the command is one sent when a connection is      *         being closed.      */
specifier|private
name|boolean
name|isShutdownCommand
parameter_list|(
name|Command
name|command
parameter_list|)
block|{
return|return
operator|(
name|command
operator|!=
literal|null
operator|&&
operator|(
name|command
operator|.
name|isShutdownInfo
argument_list|()
operator|||
name|command
operator|instanceof
name|RemoveInfo
operator|)
operator|)
return|;
block|}
specifier|public
name|void
name|oneway
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|IOException
block|{
name|Command
name|command
init|=
operator|(
name|Command
operator|)
name|o
decl_stmt|;
name|Exception
name|error
init|=
literal|null
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
if|if
condition|(
name|isShutdownCommand
argument_list|(
name|command
argument_list|)
operator|&&
name|connectedTransport
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|command
operator|.
name|isShutdownInfo
argument_list|()
condition|)
block|{
comment|// Skipping send of ShutdownInfo command when not
comment|// connected.
return|return;
block|}
if|if
condition|(
name|command
operator|instanceof
name|RemoveInfo
operator|||
name|command
operator|.
name|isMessageAck
argument_list|()
condition|)
block|{
comment|// Simulate response to RemoveInfo command or ack (as it
comment|// will be stale)
name|stateTracker
operator|.
name|track
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|()
decl_stmt|;
name|response
operator|.
name|setCorrelationId
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
expr_stmt|;
name|myTransportListener
operator|.
name|onCommand
argument_list|(
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// Keep trying until the message is sent.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|disposed
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
comment|// Wait for transport to be connected.
name|Transport
name|transport
init|=
name|connectedTransport
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|timedout
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|transport
operator|==
literal|null
operator|&&
operator|!
name|disposed
operator|&&
name|connectionFailure
operator|==
literal|null
operator|&&
operator|!
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Waiting for transport to reconnect..: "
operator|+
name|command
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|timeout
operator|>
literal|0
operator|&&
operator|(
name|end
operator|-
name|start
operator|>
name|timeout
operator|)
condition|)
block|{
name|timedout
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Failover timed out after "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
break|break;
block|}
try|try
block|{
name|reconnectMutex
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interupted: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|transport
operator|=
name|connectedTransport
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|transport
operator|==
literal|null
condition|)
block|{
comment|// Previous loop may have exited due to use being
comment|// disposed.
if|if
condition|(
name|disposed
condition|)
block|{
name|error
operator|=
operator|new
name|IOException
argument_list|(
literal|"Transport disposed."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|connectionFailure
operator|!=
literal|null
condition|)
block|{
name|error
operator|=
name|connectionFailure
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|timedout
operator|==
literal|true
condition|)
block|{
name|error
operator|=
operator|new
name|IOException
argument_list|(
literal|"Failover timeout of "
operator|+
name|timeout
operator|+
literal|" ms reached."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
operator|=
operator|new
name|IOException
argument_list|(
literal|"Unexpected failure."
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// If it was a request and it was not being tracked by
comment|// the state tracker,
comment|// then hold it in the requestMap so that we can replay
comment|// it later.
name|Tracked
name|tracked
init|=
name|stateTracker
operator|.
name|track
argument_list|(
name|command
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|requestMap
init|)
block|{
if|if
condition|(
name|tracked
operator|!=
literal|null
operator|&&
name|tracked
operator|.
name|isWaitingForResponse
argument_list|()
condition|)
block|{
name|requestMap
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|tracked
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tracked
operator|==
literal|null
operator|&&
name|command
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
name|requestMap
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Send the message.
try|try
block|{
name|transport
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|stateTracker
operator|.
name|trackBack
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// If the command was not tracked.. we will retry in
comment|// this method
if|if
condition|(
name|tracked
operator|==
literal|null
condition|)
block|{
comment|// since we will retry in this method.. take it
comment|// out of the request
comment|// map so that it is not sent 2 times on
comment|// recovery
if|if
condition|(
name|command
operator|.
name|isResponseRequired
argument_list|()
condition|)
block|{
name|requestMap
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Rethrow the exception so it will handled by
comment|// the outer catch
throw|throw
name|e
throw|;
block|}
block|}
return|return;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Send oneway attempt: "
operator|+
name|i
operator|+
literal|" failed for command:"
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
name|handleTransportFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// Some one may be trying to stop our thread.
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|()
throw|;
block|}
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|error
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|error
throw|;
block|}
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|FutureResponse
name|asyncRequest
parameter_list|(
name|Object
name|command
parameter_list|,
name|ResponseCallback
name|responseCallback
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported Method"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|request
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported Method"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|request
parameter_list|(
name|Object
name|command
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported Method"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|boolean
name|rebalance
parameter_list|,
name|URI
name|u
index|[]
parameter_list|)
block|{
name|boolean
name|newURI
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|u
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|contains
argument_list|(
name|u
index|[
name|i
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|uris
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|u
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|newURI
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newURI
condition|)
block|{
name|reconnect
argument_list|(
name|rebalance
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|boolean
name|rebalance
parameter_list|,
name|URI
name|u
index|[]
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|u
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|uris
operator|.
name|remove
argument_list|(
name|u
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|reconnect
argument_list|(
name|rebalance
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|boolean
name|rebalance
parameter_list|,
name|String
name|u
parameter_list|)
block|{
try|try
block|{
name|URI
name|newURI
init|=
operator|new
name|URI
argument_list|(
name|u
argument_list|)
decl_stmt|;
if|if
condition|(
name|contains
argument_list|(
name|newURI
argument_list|)
operator|==
literal|false
condition|)
block|{
name|uris
operator|.
name|add
argument_list|(
name|newURI
argument_list|)
expr_stmt|;
name|reconnect
argument_list|(
name|rebalance
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to parse URI: "
operator|+
name|u
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reconnect
parameter_list|(
name|boolean
name|rebalance
parameter_list|)
block|{
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
if|if
condition|(
name|started
condition|)
block|{
if|if
condition|(
name|rebalance
condition|)
block|{
name|Transport
name|transport
init|=
name|this
operator|.
name|connectedTransport
operator|.
name|getAndSet
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Caught an exception stopping existing transport"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waking up reconnect task"
argument_list|)
expr_stmt|;
try|try
block|{
name|reconnectTask
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reconnect was triggered but transport is not started yet. Wait for start to connect the transport."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|URI
argument_list|>
name|getConnectList
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|URI
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|(
name|uris
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|failedConnectTransportURI
operator|!=
literal|null
condition|)
block|{
name|removed
operator|=
name|l
operator|.
name|remove
argument_list|(
name|failedConnectTransportURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomize
condition|)
block|{
comment|// Randomly, reorder the list by random swapping
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|p
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|100
operator|%
name|l
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|URI
name|t
init|=
name|l
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|l
operator|.
name|set
argument_list|(
name|p
argument_list|,
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|removed
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|failedConnectTransportURI
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"urlList connectionList:"
operator|+
name|l
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
specifier|public
name|TransportListener
name|getTransportListener
parameter_list|()
block|{
return|return
name|transportListener
return|;
block|}
specifier|public
name|void
name|setTransportListener
parameter_list|(
name|TransportListener
name|commandListener
parameter_list|)
block|{
synchronized|synchronized
init|(
name|listenerMutex
init|)
block|{
name|this
operator|.
name|transportListener
operator|=
name|commandListener
expr_stmt|;
name|listenerMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|narrow
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|target
operator|.
name|cast
argument_list|(
name|this
argument_list|)
return|;
block|}
name|Transport
name|transport
init|=
name|connectedTransport
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
return|return
name|transport
operator|.
name|narrow
argument_list|(
name|target
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|restoreTransport
parameter_list|(
name|Transport
name|t
parameter_list|)
throws|throws
name|Exception
throws|,
name|IOException
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// send information to the broker - informing it we are an ft client
name|ConnectionControl
name|cc
init|=
operator|new
name|ConnectionControl
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setFaultTolerant
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|oneway
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|stateTracker
operator|.
name|restore
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|Map
name|tmpMap
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|requestMap
init|)
block|{
name|tmpMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Integer
argument_list|,
name|Command
argument_list|>
argument_list|(
name|requestMap
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Command
argument_list|>
name|iter2
init|=
name|tmpMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Command
name|command
init|=
name|iter2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"restore, replay: "
operator|+
name|command
argument_list|)
expr_stmt|;
block|}
name|t
operator|.
name|oneway
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isUseExponentialBackOff
parameter_list|()
block|{
return|return
name|useExponentialBackOff
return|;
block|}
specifier|public
name|void
name|setUseExponentialBackOff
parameter_list|(
name|boolean
name|useExponentialBackOff
parameter_list|)
block|{
name|this
operator|.
name|useExponentialBackOff
operator|=
name|useExponentialBackOff
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|connectedTransportURI
operator|==
literal|null
condition|?
literal|"unconnected"
else|:
name|connectedTransportURI
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRemoteAddress
parameter_list|()
block|{
name|Transport
name|transport
init|=
name|connectedTransport
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|transport
operator|!=
literal|null
condition|)
block|{
return|return
name|transport
operator|.
name|getRemoteAddress
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isFaultTolerant
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|boolean
name|doReconnect
parameter_list|()
block|{
name|Exception
name|failure
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
if|if
condition|(
name|disposed
operator|||
name|connectionFailure
operator|!=
literal|null
condition|)
block|{
name|reconnectMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|connectedTransport
operator|.
name|get
argument_list|()
operator|!=
literal|null
operator|||
name|disposed
operator|||
name|connectionFailure
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|connectList
init|=
name|getConnectList
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|failure
operator|=
operator|new
name|IOException
argument_list|(
literal|"No uris available to connect to."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|useExponentialBackOff
condition|)
block|{
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|backupMutex
init|)
block|{
if|if
condition|(
name|backup
operator|&&
operator|!
name|backups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BackupTransport
name|bt
init|=
name|backups
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Transport
name|t
init|=
name|bt
operator|.
name|getTransport
argument_list|()
decl_stmt|;
name|URI
name|uri
init|=
name|bt
operator|.
name|getUri
argument_list|()
decl_stmt|;
name|t
operator|.
name|setTransportListener
argument_list|(
name|myTransportListener
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|started
condition|)
block|{
name|restoreTransport
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
name|failedConnectTransportURI
operator|=
literal|null
expr_stmt|;
name|connectedTransportURI
operator|=
name|uri
expr_stmt|;
name|connectedTransport
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|reconnectMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
name|connectFailures
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully reconnected to backup "
operator|+
name|uri
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Backup transport failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|URI
argument_list|>
name|iter
init|=
name|connectList
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
name|connectedTransport
operator|.
name|get
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|disposed
condition|)
block|{
name|URI
name|uri
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Transport
name|t
init|=
literal|null
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Attempting connect to: "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|t
operator|=
name|TransportFactory
operator|.
name|compositeConnect
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|t
operator|.
name|setTransportListener
argument_list|(
name|myTransportListener
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|started
condition|)
block|{
name|restoreTransport
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connection established"
argument_list|)
expr_stmt|;
name|reconnectDelay
operator|=
name|initialReconnectDelay
expr_stmt|;
name|connectedTransportURI
operator|=
name|uri
expr_stmt|;
name|connectedTransport
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|reconnectMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
name|connectFailures
operator|=
literal|0
expr_stmt|;
comment|// Make sure on initial startup, that the
comment|// transportListener
comment|// has been initialized for this instance.
synchronized|synchronized
init|(
name|listenerMutex
init|)
block|{
if|if
condition|(
name|transportListener
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// if it isn't set after 2secs - it
comment|// probably never will be
name|listenerMutex
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{                                     }
block|}
block|}
if|if
condition|(
name|transportListener
operator|!=
literal|null
condition|)
block|{
name|transportListener
operator|.
name|transportResumed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"transport resumed by transport listener not set"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstConnection
condition|)
block|{
name|firstConnection
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully connected to "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully reconnected to "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
name|connected
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failure
operator|=
name|e
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connect fail to: "
operator|+
name|uri
operator|+
literal|", reason: "
operator|+
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|t
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ee
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stop of failed transport: "
operator|+
name|t
operator|+
literal|" failed with reason: "
operator|+
name|ee
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|int
name|reconnectAttempts
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|firstConnection
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|startupMaxReconnectAttempts
operator|!=
literal|0
condition|)
block|{
name|reconnectAttempts
operator|=
name|this
operator|.
name|startupMaxReconnectAttempts
expr_stmt|;
block|}
block|}
if|if
condition|(
name|reconnectAttempts
operator|==
literal|0
condition|)
block|{
name|reconnectAttempts
operator|=
name|this
operator|.
name|maxReconnectAttempts
expr_stmt|;
block|}
if|if
condition|(
name|reconnectAttempts
operator|>
literal|0
operator|&&
operator|++
name|connectFailures
operator|>=
name|reconnectAttempts
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to connect to transport after: "
operator|+
name|connectFailures
operator|+
literal|" attempt(s)"
argument_list|)
expr_stmt|;
name|connectionFailure
operator|=
name|failure
expr_stmt|;
comment|// Make sure on initial startup, that the transportListener has
comment|// been initialized
comment|// for this instance.
synchronized|synchronized
init|(
name|listenerMutex
init|)
block|{
if|if
condition|(
name|transportListener
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|listenerMutex
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{                         }
block|}
block|}
if|if
condition|(
name|transportListener
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|connectionFailure
operator|instanceof
name|IOException
condition|)
block|{
name|transportListener
operator|.
name|onException
argument_list|(
operator|(
name|IOException
operator|)
name|connectionFailure
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportListener
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|connectionFailure
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|reconnectMutex
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
operator|!
name|disposed
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting "
operator|+
name|reconnectDelay
operator|+
literal|" ms before attempting connection. "
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|sleepMutex
init|)
block|{
try|try
block|{
name|sleepMutex
operator|.
name|wait
argument_list|(
name|reconnectDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useExponentialBackOff
condition|)
block|{
comment|// Exponential increment of reconnect delay.
name|reconnectDelay
operator|*=
name|backOffMultiplier
expr_stmt|;
if|if
condition|(
name|reconnectDelay
operator|>
name|maxReconnectDelay
condition|)
block|{
name|reconnectDelay
operator|=
name|maxReconnectDelay
expr_stmt|;
block|}
block|}
block|}
return|return
operator|!
name|disposed
return|;
block|}
specifier|final
name|boolean
name|buildBackups
parameter_list|()
block|{
synchronized|synchronized
init|(
name|backupMutex
init|)
block|{
if|if
condition|(
operator|!
name|disposed
operator|&&
name|backup
operator|&&
name|backups
operator|.
name|size
argument_list|()
operator|<
name|backupPoolSize
condition|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|connectList
init|=
name|getConnectList
argument_list|()
decl_stmt|;
comment|// removed disposed backups
name|List
argument_list|<
name|BackupTransport
argument_list|>
name|disposedList
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupTransport
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|BackupTransport
name|bt
range|:
name|backups
control|)
block|{
if|if
condition|(
name|bt
operator|.
name|isDisposed
argument_list|()
condition|)
block|{
name|disposedList
operator|.
name|add
argument_list|(
name|bt
argument_list|)
expr_stmt|;
block|}
block|}
name|backups
operator|.
name|removeAll
argument_list|(
name|disposedList
argument_list|)
expr_stmt|;
name|disposedList
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|URI
argument_list|>
name|iter
init|=
name|connectList
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
name|backups
operator|.
name|size
argument_list|()
operator|<
name|backupPoolSize
condition|;
control|)
block|{
name|URI
name|uri
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|connectedTransportURI
operator|!=
literal|null
operator|&&
operator|!
name|connectedTransportURI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
try|try
block|{
name|BackupTransport
name|bt
init|=
operator|new
name|BackupTransport
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|bt
operator|.
name|setUri
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|backups
operator|.
name|contains
argument_list|(
name|bt
argument_list|)
condition|)
block|{
name|Transport
name|t
init|=
name|TransportFactory
operator|.
name|compositeConnect
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|t
operator|.
name|setTransportListener
argument_list|(
name|bt
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|bt
operator|.
name|setTransport
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|backups
operator|.
name|add
argument_list|(
name|bt
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to build backup "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isDisposed
parameter_list|()
block|{
return|return
name|disposed
return|;
block|}
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
return|return
name|connected
return|;
block|}
specifier|public
name|void
name|reconnect
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
name|add
argument_list|(
literal|true
argument_list|,
operator|new
name|URI
index|[]
block|{
name|uri
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isReconnectSupported
parameter_list|()
block|{
return|return
name|this
operator|.
name|reconnectSupported
return|;
block|}
specifier|public
name|void
name|setReconnectSupported
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|reconnectSupported
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUpdateURIsSupported
parameter_list|()
block|{
return|return
name|this
operator|.
name|updateURIsSupported
return|;
block|}
specifier|public
name|void
name|setUpdateURIsSupported
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|updateURIsSupported
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|updateURIs
parameter_list|(
name|boolean
name|rebalance
parameter_list|,
name|URI
index|[]
name|updatedURIs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|isUpdateURIsSupported
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|URI
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|(
name|this
operator|.
name|updated
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|URI
argument_list|>
name|add
init|=
operator|new
name|ArrayList
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|updatedURIs
operator|!=
literal|null
operator|&&
name|updatedURIs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Set
argument_list|<
name|URI
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|URI
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|updatedURIs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|URI
name|uri
init|=
name|updatedURIs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|URI
name|uri
range|:
name|set
control|)
block|{
if|if
condition|(
name|copy
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
operator|==
literal|false
condition|)
block|{
name|add
operator|.
name|add
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
name|this
operator|.
name|updated
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|updated
operator|.
name|addAll
argument_list|(
name|add
argument_list|)
expr_stmt|;
for|for
control|(
name|URI
name|uri
range|:
name|copy
control|)
block|{
name|this
operator|.
name|uris
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|rebalance
argument_list|,
name|add
operator|.
name|toArray
argument_list|(
operator|new
name|URI
index|[
name|add
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|int
name|getReceiveCounter
parameter_list|()
block|{
name|Transport
name|transport
init|=
name|connectedTransport
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|transport
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|transport
operator|.
name|getReceiveCounter
argument_list|()
return|;
block|}
specifier|public
name|void
name|connectionInterruptProcessingComplete
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|reconnectMutex
init|)
block|{
name|stateTracker
operator|.
name|connectionInterruptProcessingComplete
argument_list|(
name|this
argument_list|,
name|connectionId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|contains
parameter_list|(
name|URI
name|newURI
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
try|try
block|{
for|for
control|(
name|URI
name|uri
range|:
name|uris
control|)
block|{
if|if
condition|(
name|newURI
operator|.
name|getPort
argument_list|()
operator|==
name|uri
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|InetAddress
name|newAddr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|newURI
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|InetAddress
name|addr
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|uri
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|equals
argument_list|(
name|newAddr
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to verify URI "
operator|+
name|newURI
operator|+
literal|" already known: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

