begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|//Copyright 2003-2005 Arthur van Hoff, Rick Blair
end_comment

begin_comment
comment|//Licensed under Apache License version 2.0
end_comment

begin_comment
comment|//Original license LGPL
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * JmDNS service information.  *  * @version %I%, %G%  * @author	Arthur van Hoff, Jeff Sonstein, Werner Randelshofer  */
end_comment

begin_class
specifier|public
class|class
name|ServiceInfo
implements|implements
name|DNSListener
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ServiceInfo
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|NO_VALUE
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
name|JmDNS
name|dns
decl_stmt|;
comment|// State machine
comment|/**      * The state of this service info.      * This is used only for services announced by JmDNS.      *<p/>      * For proper handling of concurrency, this variable must be      * changed only using methods advanceState(), revertState() and cancel().      */
specifier|private
name|DNSState
name|state
init|=
name|DNSState
operator|.
name|PROBING_1
decl_stmt|;
comment|/**      * Task associated to this service info.      * Possible tasks are JmDNS.Prober, JmDNS.Announcer, JmDNS.Responder,      * JmDNS.Canceler.      */
name|TimerTask
name|task
decl_stmt|;
name|String
name|type
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
name|String
name|server
decl_stmt|;
name|int
name|port
decl_stmt|;
name|int
name|weight
decl_stmt|;
name|int
name|priority
decl_stmt|;
name|byte
name|text
index|[]
decl_stmt|;
name|Hashtable
name|props
decl_stmt|;
name|InetAddress
name|addr
decl_stmt|;
comment|/**      * Construct a service description for registrating with JmDNS.      *      * @param type fully qualified service type name, such as<code>_http._tcp.local.</code>.      * @param name unqualified service instance name, such as<code>foobar</code>      * @param port the local port on which the service runs      * @param text string describing the service      */
specifier|public
name|ServiceInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|port
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a service description for registrating with JmDNS.      *      * @param type     fully qualified service type name, such as<code>_http._tcp.local.</code>.      * @param name     unqualified service instance name, such as<code>foobar</code>      * @param port     the local port on which the service runs      * @param weight   weight of the service      * @param priority priority of the service      * @param text     string describing the service      */
specifier|public
name|ServiceInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|weight
parameter_list|,
name|int
name|priority
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|port
argument_list|,
name|weight
argument_list|,
name|priority
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
name|text
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|writeUTF
argument_list|(
name|out
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|out
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected exception: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Construct a service description for registrating with JmDNS. The properties hashtable must      * map property names to either Strings or byte arrays describing the property values.      *      * @param type     fully qualified service type name, such as<code>_http._tcp.local.</code>.      * @param name     unqualified service instance name, such as<code>foobar</code>      * @param port     the local port on which the service runs      * @param weight   weight of the service      * @param priority priority of the service      * @param props    properties describing the service      */
specifier|public
name|ServiceInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|weight
parameter_list|,
name|int
name|priority
parameter_list|,
name|Hashtable
name|props
parameter_list|)
block|{
name|this
argument_list|(
name|type
argument_list|,
name|name
argument_list|,
name|port
argument_list|,
name|weight
argument_list|,
name|priority
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|256
argument_list|)
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|props
operator|.
name|keys
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Object
name|val
init|=
name|props
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|out2
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|writeUTF
argument_list|(
name|out2
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|String
condition|)
block|{
name|out2
operator|.
name|write
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|writeUTF
argument_list|(
name|out2
argument_list|,
operator|(
name|String
operator|)
name|val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|val
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|out2
operator|.
name|write
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bval
init|=
operator|(
name|byte
index|[]
operator|)
name|val
decl_stmt|;
name|out2
operator|.
name|write
argument_list|(
name|bval
argument_list|,
literal|0
argument_list|,
name|bval
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|val
operator|!=
name|NO_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid property value: "
operator|+
name|val
argument_list|)
throw|;
block|}
block|}
block|}
name|byte
name|data
index|[]
init|=
name|out2
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|text
operator|=
name|out
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected exception: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Construct a service description for registrating with JmDNS.      *      * @param type     fully qualified service type name, such as<code>_http._tcp.local.</code>.      * @param name     unqualified service instance name, such as<code>foobar</code>      * @param port     the local port on which the service runs      * @param weight   weight of the service      * @param priority priority of the service      * @param text     bytes describing the service      */
specifier|public
name|ServiceInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|port
parameter_list|,
name|int
name|weight
parameter_list|,
name|int
name|priority
parameter_list|,
name|byte
name|text
index|[]
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|weight
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
block|}
comment|/**      * Construct a service record during service discovery.      */
name|ServiceInfo
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"type must be fully qualified DNS name ending in '.': "
operator|+
name|type
argument_list|)
throw|;
block|}
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * During recovery we need to duplicate service info to reregister them      */
name|ServiceInfo
parameter_list|(
name|ServiceInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|info
operator|.
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|info
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|info
operator|.
name|port
expr_stmt|;
name|this
operator|.
name|weight
operator|=
name|info
operator|.
name|weight
expr_stmt|;
name|this
operator|.
name|priority
operator|=
name|info
operator|.
name|priority
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|info
operator|.
name|text
expr_stmt|;
block|}
block|}
comment|/**      * Fully qualified service type name, such as<code>_http._tcp.local.</code> .      */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Unqualified service instance name, such as<code>foobar</code> .      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Sets the service instance name.      *      * @param name unqualified service instance name, such as<code>foobar</code>      */
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Fully qualified service name, such as<code>foobar._http._tcp.local.</code> .      */
specifier|public
name|String
name|getQualifiedName
parameter_list|()
block|{
return|return
name|name
operator|+
literal|"."
operator|+
name|type
return|;
block|}
comment|/**      * Get the name of the server.      */
specifier|public
name|String
name|getServer
parameter_list|()
block|{
return|return
name|server
return|;
block|}
comment|/**      * Get the host address of the service (ie X.X.X.X).      */
specifier|public
name|String
name|getHostAddress
parameter_list|()
block|{
return|return
operator|(
name|addr
operator|!=
literal|null
condition|?
name|addr
operator|.
name|getHostAddress
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
specifier|public
name|InetAddress
name|getAddress
parameter_list|()
block|{
return|return
name|addr
return|;
block|}
comment|/**      * Get the InetAddress of the service.      */
specifier|public
name|InetAddress
name|getInetAddress
parameter_list|()
block|{
return|return
name|addr
return|;
block|}
comment|/**      * Get the port for the service.      */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Get the priority of the service.      */
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|priority
return|;
block|}
comment|/**      * Get the weight of the service.      */
specifier|public
name|int
name|getWeight
parameter_list|()
block|{
return|return
name|weight
return|;
block|}
comment|/**      * Get the text for the serivce as raw bytes.      */
specifier|public
name|byte
index|[]
name|getTextBytes
parameter_list|()
block|{
return|return
name|text
return|;
block|}
comment|/**      * Get the text for the service. This will interpret the text bytes      * as a UTF8 encoded string. Will return null if the bytes are not      * a valid UTF8 encoded string.      */
specifier|public
name|String
name|getTextString
parameter_list|()
block|{
if|if
condition|(
operator|(
name|text
operator|==
literal|null
operator|)
operator|||
operator|(
name|text
operator|.
name|length
operator|==
literal|0
operator|)
operator|||
operator|(
operator|(
name|text
operator|.
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|text
index|[
literal|0
index|]
operator|==
literal|0
operator|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|readUTF
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Get the URL for this service. An http URL is created by      * combining the address, port, and path properties.      */
specifier|public
name|String
name|getURL
parameter_list|()
block|{
return|return
name|getURL
argument_list|(
literal|"http"
argument_list|)
return|;
block|}
comment|/**      * Get the URL for this service. An URL is created by      * combining the protocol, address, port, and path properties.      */
specifier|public
name|String
name|getURL
parameter_list|(
name|String
name|protocol
parameter_list|)
block|{
name|String
name|url
init|=
name|protocol
operator|+
literal|"://"
operator|+
name|getAddress
argument_list|()
operator|+
literal|":"
operator|+
name|getPort
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|getPropertyString
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|url
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|url
operator|+=
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|path
else|:
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
block|}
return|return
name|url
return|;
block|}
comment|/**      * Get a property of the service. This involves decoding the      * text bytes into a property list. Returns null if the property      * is not found or the text data could not be decoded correctly.      */
specifier|public
specifier|synchronized
name|byte
index|[]
name|getPropertyBytes
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|byte
index|[]
operator|)
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**      * Get a property of the service. This involves decoding the      * text bytes into a property list. Returns null if the property      * is not found, the text data could not be decoded correctly, or      * the resulting bytes are not a valid UTF8 string.      */
specifier|public
specifier|synchronized
name|String
name|getPropertyString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|byte
name|data
index|[]
init|=
operator|(
name|byte
index|[]
operator|)
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|data
operator|==
name|NO_VALUE
condition|)
block|{
return|return
literal|"true"
return|;
block|}
return|return
name|readUTF
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Enumeration of the property names.      */
specifier|public
name|Enumeration
name|getPropertyNames
parameter_list|()
block|{
name|Hashtable
name|props
init|=
name|getProperties
argument_list|()
decl_stmt|;
return|return
operator|(
name|props
operator|!=
literal|null
operator|)
condition|?
name|props
operator|.
name|keys
argument_list|()
else|:
operator|new
name|Vector
argument_list|()
operator|.
name|elements
argument_list|()
return|;
block|}
comment|/**      * Write a UTF string with a length to a stream.      */
name|void
name|writeUTF
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|str
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|c
operator|>=
literal|0x0001
operator|)
operator|&&
operator|(
name|c
operator|<=
literal|0x007F
operator|)
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|c
operator|>
literal|0x07FF
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|0xE0
operator||
operator|(
operator|(
name|c
operator|>>
literal|12
operator|)
operator|&
literal|0x0F
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|0
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|write
argument_list|(
literal|0xC0
operator||
operator|(
operator|(
name|c
operator|>>
literal|6
operator|)
operator|&
literal|0x1F
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0x80
operator||
operator|(
operator|(
name|c
operator|>>
literal|0
operator|)
operator|&
literal|0x3F
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Read data bytes as a UTF stream.      */
name|String
name|readUTF
parameter_list|(
name|byte
name|data
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|end
init|=
name|off
operator|+
name|len
init|;
name|off
operator|<
name|end
condition|;
control|)
block|{
name|int
name|ch
init|=
name|data
index|[
name|off
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
switch|switch
condition|(
name|ch
operator|>>
literal|4
condition|)
block|{
case|case
literal|0
case|:
case|case
literal|1
case|:
case|case
literal|2
case|:
case|case
literal|3
case|:
case|case
literal|4
case|:
case|case
literal|5
case|:
case|case
literal|6
case|:
case|case
literal|7
case|:
comment|// 0xxxxxxx
break|break;
case|case
literal|12
case|:
case|case
literal|13
case|:
if|if
condition|(
name|off
operator|>=
name|len
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 110x xxxx   10xx xxxx
name|ch
operator|=
operator|(
operator|(
name|ch
operator|&
literal|0x1F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|data
index|[
name|off
operator|++
index|]
operator|&
literal|0x3F
operator|)
expr_stmt|;
break|break;
case|case
literal|14
case|:
if|if
condition|(
name|off
operator|+
literal|2
operator|>=
name|len
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 1110 xxxx  10xx xxxx  10xx xxxx
name|ch
operator|=
operator|(
operator|(
name|ch
operator|&
literal|0x0f
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|off
operator|++
index|]
operator|&
literal|0x3F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|data
index|[
name|off
operator|++
index|]
operator|&
literal|0x3F
operator|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|off
operator|+
literal|1
operator|>=
name|len
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// 10xx xxxx,  1111 xxxx
name|ch
operator|=
operator|(
operator|(
name|ch
operator|&
literal|0x3F
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
name|data
index|[
name|off
operator|++
index|]
operator|&
literal|0x0f
operator|)
expr_stmt|;
break|break;
block|}
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|synchronized
name|Hashtable
name|getProperties
parameter_list|()
block|{
if|if
condition|(
operator|(
name|props
operator|==
literal|null
operator|)
operator|&&
operator|(
name|text
operator|!=
literal|null
operator|)
condition|)
block|{
name|Hashtable
name|props
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|int
name|off
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|off
operator|<
name|text
operator|.
name|length
condition|)
block|{
comment|// length of the next key value pair
name|int
name|len
init|=
name|text
index|[
name|off
operator|++
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
operator|(
name|len
operator|==
literal|0
operator|)
operator|||
operator|(
name|off
operator|+
name|len
operator|>
name|text
operator|.
name|length
operator|)
condition|)
block|{
name|props
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
comment|// look for the '='
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
operator|(
name|i
operator|<
name|len
operator|)
operator|&&
operator|(
name|text
index|[
name|off
operator|+
name|i
index|]
operator|!=
literal|'='
operator|)
condition|;
name|i
operator|++
control|)
block|{
empty_stmt|;
block|}
comment|// get the property name
name|String
name|name
init|=
name|readUTF
argument_list|(
name|text
argument_list|,
name|off
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|props
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|i
operator|==
name|len
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|NO_VALUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byte
name|value
index|[]
init|=
operator|new
name|byte
index|[
name|len
operator|-
operator|++
name|i
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|text
argument_list|,
name|off
operator|+
name|i
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|len
operator|-
name|i
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|off
operator|+=
name|len
expr_stmt|;
block|}
block|}
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
comment|// REMIND: Oops, this shouldn't be public!
comment|/**      * JmDNS callback to update a DNS record.      */
specifier|public
name|void
name|updateRecord
parameter_list|(
name|JmDNS
name|jmdns
parameter_list|,
name|long
name|now
parameter_list|,
name|DNSRecord
name|rec
parameter_list|)
block|{
if|if
condition|(
operator|(
name|rec
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|rec
operator|.
name|isExpired
argument_list|(
name|now
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|rec
operator|.
name|type
condition|)
block|{
case|case
name|DNSConstants
operator|.
name|TYPE_A
case|:
comment|// IPv4
case|case
name|DNSConstants
operator|.
name|TYPE_AAAA
case|:
comment|// IPv6 FIXME [PJYF Oct 14 2004] This has not been tested
if|if
condition|(
name|rec
operator|.
name|name
operator|.
name|equals
argument_list|(
name|server
argument_list|)
condition|)
block|{
name|addr
operator|=
operator|(
operator|(
name|DNSRecord
operator|.
name|Address
operator|)
name|rec
operator|)
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DNSConstants
operator|.
name|TYPE_SRV
case|:
if|if
condition|(
name|rec
operator|.
name|name
operator|.
name|equals
argument_list|(
name|getQualifiedName
argument_list|()
argument_list|)
condition|)
block|{
name|DNSRecord
operator|.
name|Service
name|srv
init|=
operator|(
name|DNSRecord
operator|.
name|Service
operator|)
name|rec
decl_stmt|;
name|server
operator|=
name|srv
operator|.
name|server
expr_stmt|;
name|port
operator|=
name|srv
operator|.
name|port
expr_stmt|;
name|weight
operator|=
name|srv
operator|.
name|weight
expr_stmt|;
name|priority
operator|=
name|srv
operator|.
name|priority
expr_stmt|;
name|addr
operator|=
literal|null
expr_stmt|;
comment|// changed to use getCache() instead - jeffs
comment|// updateRecord(jmdns, now, (DNSRecord)jmdns.cache.get(server, TYPE_A, CLASS_IN));
name|updateRecord
argument_list|(
name|jmdns
argument_list|,
name|now
argument_list|,
operator|(
name|DNSRecord
operator|)
name|jmdns
operator|.
name|getCache
argument_list|()
operator|.
name|get
argument_list|(
name|server
argument_list|,
name|DNSConstants
operator|.
name|TYPE_A
argument_list|,
name|DNSConstants
operator|.
name|CLASS_IN
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DNSConstants
operator|.
name|TYPE_TXT
case|:
if|if
condition|(
name|rec
operator|.
name|name
operator|.
name|equals
argument_list|(
name|getQualifiedName
argument_list|()
argument_list|)
condition|)
block|{
name|DNSRecord
operator|.
name|Text
name|txt
init|=
operator|(
name|DNSRecord
operator|.
name|Text
operator|)
name|rec
decl_stmt|;
name|text
operator|=
name|txt
operator|.
name|text
expr_stmt|;
block|}
break|break;
block|}
comment|// Future Design Pattern
comment|// This is done, to notify the wait loop in method
comment|// JmDNS.getServiceInfo(type, name, timeout);
if|if
condition|(
name|hasData
argument_list|()
operator|&&
name|dns
operator|!=
literal|null
condition|)
block|{
name|dns
operator|.
name|handleServiceResolved
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dns
operator|=
literal|null
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns true if the service info is filled with data.      */
name|boolean
name|hasData
parameter_list|()
block|{
return|return
name|server
operator|!=
literal|null
operator|&&
name|addr
operator|!=
literal|null
operator|&&
name|text
operator|!=
literal|null
return|;
block|}
comment|// State machine
comment|/**      * Sets the state and notifies all objects that wait on the ServiceInfo.      */
specifier|synchronized
name|void
name|advanceState
parameter_list|()
block|{
name|state
operator|=
name|state
operator|.
name|advance
argument_list|()
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the state and notifies all objects that wait on the ServiceInfo.      */
specifier|synchronized
name|void
name|revertState
parameter_list|()
block|{
name|state
operator|=
name|state
operator|.
name|revert
argument_list|()
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sets the state and notifies all objects that wait on the ServiceInfo.      */
specifier|synchronized
name|void
name|cancel
parameter_list|()
block|{
name|state
operator|=
name|DNSState
operator|.
name|CANCELED
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the current state of this info.      */
name|DNSState
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|instanceof
name|ServiceInfo
operator|)
operator|&&
name|getQualifiedName
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ServiceInfo
operator|)
name|obj
operator|)
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNiceTextString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|len
init|=
name|text
operator|.
name|length
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>=
literal|20
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
break|break;
block|}
name|int
name|ch
init|=
name|text
index|[
name|i
index|]
operator|&
literal|0xFF
decl_stmt|;
if|if
condition|(
operator|(
name|ch
operator|<
literal|' '
operator|)
operator|||
operator|(
name|ch
operator|>
literal|127
operator|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\\0"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|ch
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"service["
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getNiceTextString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

