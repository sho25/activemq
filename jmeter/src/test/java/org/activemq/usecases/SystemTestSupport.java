begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jorphan
operator|.
name|logging
operator|.
name|LoggingManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|EDU
operator|.
name|oswego
operator|.
name|cs
operator|.
name|dl
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_class
specifier|public
class|class
name|SystemTestSupport
extends|extends
name|TestCase
implements|implements
name|MessageListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ACTIVEMQ_SERVER
init|=
literal|"ActiveMQ Server"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|TRANSACTED_FALSE
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOOL_DEFAULT
init|=
literal|"TOOL.DEFAULT"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LAST_MESSAGE
init|=
literal|"#LAST"
decl_stmt|;
specifier|public
name|String
name|userName
decl_stmt|;
specifier|public
name|String
name|password
decl_stmt|;
specifier|private
specifier|static
name|int
name|msgCounter
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|Map
name|ProducerMap
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
name|producerCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|consumerCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|subjectCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|messageCount
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|isPersistent
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|isDurable
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|isTopic
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|testStillRunning
init|=
literal|true
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
name|Map
name|consumerMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
name|Map
name|prodNameMap
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|Map
name|prodMsgMap
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
comment|/**      * Default constructor      */
specifier|protected
name|SystemTestSupport
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|ProducerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|msgCounter
operator|=
literal|0
expr_stmt|;
name|testStillRunning
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Constructor      *      * @param isTopic - true when topic, false when queue.      * @param isPersistent - true when the delivery mode is persistent.      * @param isDurable - true when the suscriber is durable(For topic only).      * @param producerCount - number of producers.      * @param consumerCount - number of consumers.      * @param subjectCount - number of destinations.      * @param messageCount - number of messages to be delivered.      * @param testTitle - test title/name.      *      */
specifier|protected
name|SystemTestSupport
parameter_list|(
name|boolean
name|isTopic
parameter_list|,
name|boolean
name|isPersistent
parameter_list|,
name|boolean
name|isDurable
parameter_list|,
name|int
name|producerCount
parameter_list|,
name|int
name|consumerCount
parameter_list|,
name|int
name|subjectCount
parameter_list|,
name|int
name|messageCount
parameter_list|,
name|String
name|testTitle
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|isTopic
operator|=
name|isTopic
expr_stmt|;
name|this
operator|.
name|isPersistent
operator|=
name|isPersistent
expr_stmt|;
name|this
operator|.
name|isDurable
operator|=
name|isDurable
expr_stmt|;
name|this
operator|.
name|producerCount
operator|=
name|producerCount
expr_stmt|;
name|this
operator|.
name|consumerCount
operator|=
name|consumerCount
expr_stmt|;
name|this
operator|.
name|subjectCount
operator|=
name|subjectCount
expr_stmt|;
name|this
operator|.
name|messageCount
operator|=
name|messageCount
expr_stmt|;
name|this
operator|.
name|testParameterSettings
argument_list|(
name|testTitle
argument_list|)
expr_stmt|;
name|ProducerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|consumerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prodNameMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prodMsgMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|msgCounter
operator|=
literal|0
expr_stmt|;
name|testStillRunning
operator|=
literal|true
expr_stmt|;
block|}
comment|/****************************************************      *      *  Producer section      *      ****************************************************/
comment|/**      * Creates the message producer threads.      */
specifier|protected
name|void
name|publish
parameter_list|()
throws|throws
name|JMSException
block|{
name|String
name|subjects
index|[]
init|=
name|getSubjects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|producerCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|x
init|=
name|i
decl_stmt|;
specifier|final
name|String
name|subject
init|=
name|subjects
index|[
name|i
operator|%
name|subjects
operator|.
name|length
index|]
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|publish
argument_list|(
name|x
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates the producer and send the messages.      *      * @param x - producer number.      * @param subject -  the destination where the messages will be sent.      */
specifier|protected
name|void
name|publish
parameter_list|(
name|int
name|x
parameter_list|,
name|String
name|subject
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|messageBody
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|createDestination
argument_list|(
name|session
argument_list|,
name|subject
argument_list|)
decl_stmt|;
name|MessageProducer
name|publisher
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPersistent
condition|)
block|{
name|publisher
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|publisher
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|NON_PERSISTENT
argument_list|)
expr_stmt|;
block|}
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
comment|//Sending messages
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|messageCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|messageCount
operator|!=
name|i
condition|)
name|messageBody
operator|=
literal|"#BODY"
expr_stmt|;
else|else
name|messageBody
operator|=
name|LAST_MESSAGE
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"PROD"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|messageBody
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|sb
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|publisher
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
block|}
comment|/****************************************************      *      *  Consumer section      *      ****************************************************/
comment|/**      * Generates the topic/queue destinations.      *      * @return String[] - topic/queue destination name.      */
specifier|protected
name|String
index|[]
name|getSubjects
parameter_list|()
block|{
comment|//Create the subjects.
name|String
index|[]
name|subjects
init|=
operator|new
name|String
index|[
name|subjectCount
index|]
decl_stmt|;
comment|//Appended to the subject to determine if its a queue or topic.
name|String
name|prefix
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|isTopic
condition|)
block|{
name|prefix
operator|=
literal|".TOPIC"
expr_stmt|;
block|}
else|else
block|{
name|prefix
operator|=
literal|".QUEUE"
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subjects
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|subjects
index|[
name|i
index|]
operator|=
name|TOOL_DEFAULT
operator|+
name|prefix
operator|+
name|i
expr_stmt|;
block|}
return|return
name|subjects
return|;
block|}
comment|/**      * Suscribes the consumers to the topic/queue destinations.      */
specifier|protected
name|void
name|subscribe
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|subjects
index|[]
init|=
name|getSubjects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|consumerCount
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subject
init|=
name|subjects
index|[
name|i
operator|%
name|subjectCount
index|]
decl_stmt|;
name|subscribe
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Suscribes the consumer to the topic/queue specified by the subject.      *      * @param subject - the Destination where the consumer waits upon for messages.      */
specifier|protected
name|void
name|subscribe
parameter_list|(
name|String
name|subject
parameter_list|)
throws|throws
name|Exception
block|{
name|ConnectionFactory
name|factory
init|=
name|createConnectionFactory
argument_list|()
decl_stmt|;
name|ActiveMQConnection
name|connection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|factory
operator|.
name|createConnection
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|destination
init|=
name|createDestination
argument_list|(
name|session
argument_list|,
name|subject
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connection
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Processes the received message.      *      * @param message - message received by the listener.      */
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|ActiveMQMessage
name|amsg
init|=
operator|(
name|ActiveMQMessage
operator|)
name|message
decl_stmt|;
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|textMessage
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|amsg
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
name|msgCounter
operator|++
expr_stmt|;
name|String
name|strMsgCounter
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|msgCounter
argument_list|)
decl_stmt|;
name|ProducerMap
operator|.
name|put
argument_list|(
name|strMsgCounter
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unable to force deserialize the content "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Validates the result of the producing and consumption of messages by the server.      * It checks for duplicate messages, message count and order.      */
specifier|protected
specifier|synchronized
name|void
name|timerLoop
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessagingSystemTest.timerLoop() * started * "
argument_list|)
expr_stmt|;
name|Map
name|ProducerTextMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Map
name|currentProducerMap
init|=
literal|null
decl_stmt|;
name|String
name|producerName
init|=
literal|null
decl_stmt|;
name|String
name|msgBody
init|=
literal|null
decl_stmt|;
name|String
name|consumerName
init|=
literal|null
decl_stmt|;
name|String
name|ProdSequenceNo
init|=
literal|null
decl_stmt|;
name|String
name|mapKey
init|=
literal|null
decl_stmt|;
name|int
name|expectedNoOfMessages
init|=
name|messageCount
decl_stmt|;
name|boolean
name|dowhile
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|dowhile
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|//Retrieve the map containing the received messages data
name|currentProducerMap
operator|=
name|resetProducerMap
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentProducerMap
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|dowhile
operator|=
literal|false
expr_stmt|;
block|}
comment|//Put the map values to another map for parsing.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|currentProducerMap
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ProdMsg
init|=
operator|(
name|String
operator|)
name|currentProducerMap
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|producerName
operator|=
name|ProdMsg
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ProdMsg
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
argument_list|)
expr_stmt|;
name|msgBody
operator|=
name|ProdMsg
operator|.
name|substring
argument_list|(
name|ProdMsg
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
operator|+
literal|1
argument_list|,
name|ProdMsg
operator|.
name|lastIndexOf
argument_list|(
literal|"#"
argument_list|)
argument_list|)
expr_stmt|;
name|ProdSequenceNo
operator|=
name|ProdMsg
operator|.
name|substring
argument_list|(
name|ProdMsg
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|,
name|ProdMsg
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|,
name|ProdMsg
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|,
name|ProdMsg
operator|.
name|lastIndexOf
argument_list|(
literal|"#"
argument_list|)
argument_list|)
expr_stmt|;
name|consumerName
operator|=
name|ProdMsg
operator|.
name|substring
argument_list|(
name|ProdMsg
operator|.
name|lastIndexOf
argument_list|(
literal|"#"
argument_list|)
argument_list|,
name|ProdMsg
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTopic
condition|)
block|{
name|mapKey
operator|=
name|consumerName
operator|+
name|producerName
expr_stmt|;
block|}
else|else
block|{
name|mapKey
operator|=
name|producerName
expr_stmt|;
block|}
if|if
condition|(
name|ProducerTextMap
operator|.
name|containsKey
argument_list|(
name|mapKey
argument_list|)
condition|)
block|{
comment|//Increment the counter value
name|Integer
name|value
init|=
operator|(
name|Integer
operator|)
name|ProducerTextMap
operator|.
name|get
argument_list|(
name|mapKey
argument_list|)
decl_stmt|;
name|ProducerTextMap
operator|.
name|put
argument_list|(
name|mapKey
argument_list|,
operator|new
name|Integer
argument_list|(
name|value
operator|.
name|intValue
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Put the Producer Name in the map
name|ProducerTextMap
operator|.
name|put
argument_list|(
name|mapKey
argument_list|,
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Integer
name|messageCounter
init|=
operator|(
name|Integer
operator|)
name|ProducerTextMap
operator|.
name|get
argument_list|(
name|mapKey
argument_list|)
decl_stmt|;
name|Integer
name|ProducerSeqID
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|ProdSequenceNo
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTopic
condition|)
block|{
comment|// Check for duplicate message.
if|if
condition|(
name|messageCounter
operator|.
name|intValue
argument_list|()
operator|>
name|expectedNoOfMessages
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Should not have received duplicate messages!"
argument_list|,
name|messageCounter
operator|.
name|intValue
argument_list|()
operator|<=
name|expectedNoOfMessages
argument_list|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|LAST_MESSAGE
operator|.
name|equals
argument_list|(
name|msgBody
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"entered MsgBody.equals(LAST_MESSAGE)..."
operator|+
name|mapKey
operator|+
literal|" "
operator|+
name|messageCounter
operator|.
name|intValue
argument_list|()
operator|+
literal|"="
operator|+
name|expectedNoOfMessages
argument_list|)
expr_stmt|;
comment|// Validates that the messages received is equal to the number
comment|// of expected messages
if|if
condition|(
name|messageCounter
operator|.
name|intValue
argument_list|()
operator|!=
name|expectedNoOfMessages
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"entered messageCounter.intValue() != expectedNoOfMessages..."
argument_list|)
expr_stmt|;
comment|// Checks for message order.
name|assertTrue
argument_list|(
literal|"Should have received messages in order!"
argument_list|,
name|messageCounter
operator|.
name|intValue
argument_list|()
operator|==
name|expectedNoOfMessages
argument_list|)
expr_stmt|;
if|if
condition|(
name|messageCounter
operator|.
name|intValue
argument_list|()
operator|!=
name|expectedNoOfMessages
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Should have received messages in order!"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|currentProducerMap
operator|.
name|size
argument_list|()
operator|==
name|i
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessagingSystemTest.timerLoop() says system_test_pass!!!... "
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|//Create map for each consumer
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|consumerCount
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|consumerMap
operator|.
name|containsKey
argument_list|(
operator|new
name|String
argument_list|(
name|consumerName
argument_list|)
argument_list|)
condition|)
block|{
name|consumerMap
operator|.
name|put
argument_list|(
operator|new
name|String
argument_list|(
name|consumerName
argument_list|)
argument_list|,
operator|new
name|LinkedHashMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//create Producer Name Map
if|if
condition|(
operator|!
name|prodNameMap
operator|.
name|containsKey
argument_list|(
name|producerName
argument_list|)
condition|)
block|{
name|prodNameMap
operator|.
name|put
argument_list|(
name|producerName
argument_list|,
operator|(
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
comment|//Get the current size of consumer
name|int
name|seqVal
init|=
literal|0
decl_stmt|;
name|Object
index|[]
name|cObj
init|=
name|consumerMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|cObj
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|String
name|cMapKey
init|=
operator|(
name|String
operator|)
name|cObj
index|[
name|k
index|]
decl_stmt|;
name|Map
name|cMapVal
init|=
operator|(
name|Map
operator|)
name|consumerMap
operator|.
name|get
argument_list|(
name|cObj
index|[
name|k
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cMapKey
operator|.
name|equals
argument_list|(
name|consumerName
argument_list|)
condition|)
block|{
name|seqVal
operator|=
name|cMapVal
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|//Put object to its designated consumer map
name|Object
index|[]
name|consumerObj
init|=
name|consumerMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|consumerObj
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|String
name|cMapKey
init|=
operator|(
name|String
operator|)
name|consumerObj
index|[
name|j
index|]
decl_stmt|;
name|Map
name|cMapVal
init|=
operator|(
name|LinkedHashMap
operator|)
name|consumerMap
operator|.
name|get
argument_list|(
name|consumerObj
index|[
name|j
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cMapKey
operator|.
name|equals
argument_list|(
name|consumerName
argument_list|)
condition|)
block|{
name|cMapVal
operator|.
name|put
argument_list|(
operator|new
name|Integer
argument_list|(
name|seqVal
argument_list|)
argument_list|,
operator|(
name|producerName
operator|+
literal|"/"
operator|+
name|ProducerSeqID
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add data to table row
if|if
condition|(
operator|!
name|isTopic
condition|)
block|{
name|String
name|msgKey
init|=
name|consumerName
operator|+
literal|"#"
operator|+
name|producerName
operator|+
literal|"#"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|ProdSequenceNo
argument_list|)
decl_stmt|;
name|String
name|msgVal
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|messageCounter
argument_list|)
operator|+
literal|"#"
operator|+
name|msgBody
decl_stmt|;
if|if
condition|(
operator|!
name|prodMsgMap
operator|.
name|containsKey
argument_list|(
name|msgKey
argument_list|)
condition|)
block|{
name|prodMsgMap
operator|.
name|put
argument_list|(
operator|(
name|msgKey
operator|)
argument_list|,
operator|(
name|msgVal
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isTopic
condition|)
block|{
comment|//Validate message sequence
name|boolean
name|isMsgNotOrdered
init|=
name|validateMsg
argument_list|(
name|prodNameMap
argument_list|,
name|consumerMap
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Should have received messages in order!"
argument_list|,
name|isMsgNotOrdered
argument_list|)
expr_stmt|;
block|}
name|testStillRunning
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessagingSystemTest.timerLoop() * ended * "
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the message entries and clears the map for another set      * of messages to be processed.      *      * @return Map - messages to be processed.      */
specifier|protected
specifier|synchronized
name|Map
name|resetProducerMap
parameter_list|()
block|{
name|Map
name|copy
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|HashMap
argument_list|(
name|ProducerMap
argument_list|)
argument_list|)
decl_stmt|;
name|ProducerMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|msgCounter
operator|=
literal|0
expr_stmt|;
return|return
name|copy
return|;
block|}
comment|/****************************************************      *      *  Utility section      *      ****************************************************/
comment|/**      * Creates the session destination.      *      * @param session - connection session.      * @param subject - destination name.      * @return Destination - session destination.      */
specifier|protected
name|ActiveMQDestination
name|createDestination
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|subject
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isTopic
condition|)
block|{
return|return
operator|(
name|ActiveMQDestination
operator|)
name|session
operator|.
name|createQueue
argument_list|(
name|subject
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|ActiveMQDestination
operator|)
name|session
operator|.
name|createTopic
argument_list|(
name|subject
argument_list|)
return|;
block|}
block|}
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost?broker.persistent=false"
argument_list|)
return|;
block|}
comment|/****************************************************      *      *  Unit test section      *      ****************************************************/
comment|/**      * Executes the unit test by running the producers and consumers.      * It checks for duplicate messages, message count and order.      */
specifier|protected
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessagingSystemTest.doTest() * start *"
argument_list|)
expr_stmt|;
comment|//Set up the consumers
name|subscribe
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessagingSystemTest.doTest() after suscribe()..."
argument_list|)
expr_stmt|;
comment|//Set up the producers
name|publish
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessagingSystemTest.doTest() after publish()..."
argument_list|)
expr_stmt|;
comment|//Run the test
name|Thread
name|timer
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|timerLoop
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|timer
operator|.
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|testStillRunning
condition|)
block|{
try|try
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|==
name|timer
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MessagingSystemTest.doTest() * end *"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Validates the messages received.      *      * @param prodNameMap      * @param cMap      * @return      */
specifier|protected
name|boolean
name|validateMsg
parameter_list|(
name|Map
name|prodNameMap
parameter_list|,
name|Map
name|cMap
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Object
index|[]
name|cObj
init|=
name|cMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cObj
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Map
name|childMap
init|=
operator|(
name|Map
operator|)
name|cMap
operator|.
name|get
argument_list|(
name|cObj
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|Object
index|[]
name|nameObj
init|=
name|prodNameMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nameObj
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|prodName
init|=
operator|(
name|String
operator|)
name|nameObj
index|[
name|i
index|]
decl_stmt|;
name|String
name|tempProdHolder
init|=
literal|null
decl_stmt|;
name|String
name|tempProdIDHolder
init|=
literal|null
decl_stmt|;
name|Object
index|[]
name|childObj
init|=
name|childMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|childObj
operator|.
name|length
condition|;
name|k
operator|++
control|)
block|{
name|Integer
name|childMapKey
init|=
operator|(
name|Integer
operator|)
name|childObj
index|[
name|k
index|]
decl_stmt|;
name|String
name|childMapVal
init|=
operator|(
name|String
operator|)
name|childMap
operator|.
name|get
argument_list|(
name|childObj
index|[
name|k
index|]
argument_list|)
decl_stmt|;
name|String
name|prodVal
init|=
name|childMapVal
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|childMapVal
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|prodIDVal
init|=
name|childMapVal
operator|.
name|substring
argument_list|(
name|childMapVal
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|,
name|childMapVal
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prodVal
operator|.
name|equals
argument_list|(
name|prodName
argument_list|)
condition|)
block|{
if|if
condition|(
name|tempProdHolder
operator|==
literal|null
condition|)
block|{
name|tempProdHolder
operator|=
name|prodVal
expr_stmt|;
name|tempProdIDHolder
operator|=
name|prodIDVal
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|prodIDVal
argument_list|)
operator|>
name|Integer
operator|.
name|parseInt
argument_list|(
name|tempProdIDHolder
argument_list|)
condition|)
block|{
name|tempProdHolder
operator|=
name|prodVal
expr_stmt|;
name|tempProdIDHolder
operator|=
name|prodIDVal
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
continue|continue;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Prints the test settings.      *      * @param strTestTitle - unit test name.      */
specifier|public
name|void
name|testParameterSettings
parameter_list|(
name|String
name|strTestTitle
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|strTestTitle
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"============================================================"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test settings:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"isTopic="
operator|+
operator|new
name|Boolean
argument_list|(
name|isTopic
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"isPersistent="
operator|+
operator|new
name|Boolean
argument_list|(
name|isPersistent
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"isDurable="
operator|+
operator|new
name|Boolean
argument_list|(
name|isDurable
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"producerCount="
operator|+
name|producerCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"consumerCount="
operator|+
name|consumerCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"subjectCount="
operator|+
name|subjectCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"messageCount="
operator|+
name|messageCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

