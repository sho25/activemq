begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|SocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLServerSocketFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|SslContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|tcp
operator|.
name|TcpTransport
operator|.
name|InitBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|URISupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|wireformat
operator|.
name|WireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An implementation of the TcpTransportFactory using SSL. The major  * contribution from this class is that it is aware of SslTransportServer and  * SslTransport classes. All Transports and TransportServers created from this  * factory will have their needClientAuth option set to false.  */
end_comment

begin_class
specifier|public
class|class
name|SslTransportFactory
extends|extends
name|TcpTransportFactory
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SslTransportFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Overriding to use SslTransportServer and allow for proper reflection.      */
annotation|@
name|Override
specifier|public
name|TransportServer
name|doBind
parameter_list|(
specifier|final
name|URI
name|location
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|URISupport
operator|.
name|parseParameters
argument_list|(
name|location
argument_list|)
argument_list|)
decl_stmt|;
name|ServerSocketFactory
name|serverSocketFactory
init|=
name|createServerSocketFactory
argument_list|()
decl_stmt|;
name|SslTransportServer
name|server
init|=
name|createSslTransportServer
argument_list|(
name|location
argument_list|,
operator|(
name|SSLServerSocketFactory
operator|)
name|serverSocketFactory
argument_list|)
decl_stmt|;
name|server
operator|.
name|setWireFormatFactory
argument_list|(
name|createWireFormatFactory
argument_list|(
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|server
argument_list|,
name|options
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|transportOptions
init|=
name|IntrospectionSupport
operator|.
name|extractProperties
argument_list|(
name|options
argument_list|,
literal|"transport."
argument_list|)
decl_stmt|;
name|server
operator|.
name|setTransportOption
argument_list|(
name|transportOptions
argument_list|)
expr_stmt|;
name|server
operator|.
name|bind
argument_list|()
expr_stmt|;
return|return
name|server
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Allows subclasses of SslTransportFactory to create custom instances of      * SslTransportServer.      *      * @param location      * @param serverSocketFactory      * @return a new SslTransportServer initialized from the given location and socket factory.      * @throws IOException      * @throws URISyntaxException      */
specifier|protected
name|SslTransportServer
name|createSslTransportServer
parameter_list|(
specifier|final
name|URI
name|location
parameter_list|,
name|SSLServerSocketFactory
name|serverSocketFactory
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
return|return
operator|new
name|SslTransportServer
argument_list|(
name|this
argument_list|,
name|location
argument_list|,
name|serverSocketFactory
argument_list|)
return|;
block|}
comment|/**      * Overriding to allow for proper configuration through reflection but delegate to get common      * configuration      */
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
name|Transport
name|compositeConfigure
parameter_list|(
name|Transport
name|transport
parameter_list|,
name|WireFormat
name|format
parameter_list|,
name|Map
name|options
parameter_list|)
block|{
name|SslTransport
name|sslTransport
init|=
name|transport
operator|.
name|narrow
argument_list|(
name|SslTransport
operator|.
name|class
argument_list|)
decl_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|sslTransport
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|compositeConfigure
argument_list|(
name|transport
argument_list|,
name|format
argument_list|,
name|options
argument_list|)
return|;
block|}
comment|/**      * Overriding to use SslTransports.      */
annotation|@
name|Override
specifier|protected
name|Transport
name|createTransport
parameter_list|(
name|URI
name|location
parameter_list|,
name|WireFormat
name|wf
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|URI
name|localLocation
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
name|location
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// see if the path is a local URI location
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|localPortIndex
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|localPortIndex
operator|+
literal|1
argument_list|,
name|path
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|localString
init|=
name|location
operator|.
name|getScheme
argument_list|()
operator|+
literal|":/"
operator|+
name|path
decl_stmt|;
name|localLocation
operator|=
operator|new
name|URI
argument_list|(
name|localString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"path isn't a valid local location for SslTransport to use"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|SocketFactory
name|socketFactory
init|=
name|createSocketFactory
argument_list|()
decl_stmt|;
return|return
operator|new
name|SslTransport
argument_list|(
name|wf
argument_list|,
operator|(
name|SSLSocketFactory
operator|)
name|socketFactory
argument_list|,
name|location
argument_list|,
name|localLocation
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**      * Creates a new SSL ServerSocketFactory. The given factory will use      * user-provided key and trust managers (if the user provided them).      *      * @return Newly created (Ssl)ServerSocketFactory.      * @throws IOException      */
annotation|@
name|Override
specifier|protected
name|ServerSocketFactory
name|createServerSocketFactory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|SslContext
operator|.
name|getCurrentSslContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SslContext
name|ctx
init|=
name|SslContext
operator|.
name|getCurrentSslContext
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|ctx
operator|.
name|getSSLContext
argument_list|()
operator|.
name|getServerSocketFactory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|SSLServerSocketFactory
operator|.
name|getDefault
argument_list|()
return|;
block|}
block|}
comment|/**      * Creates a new SSL SocketFactory. The given factory will use user-provided      * key and trust managers (if the user provided them).      *      * @return Newly created (Ssl)SocketFactory.      * @throws IOException      */
annotation|@
name|Override
specifier|protected
name|SocketFactory
name|createSocketFactory
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|SslContext
operator|.
name|getCurrentSslContext
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SslContext
name|ctx
init|=
name|SslContext
operator|.
name|getCurrentSslContext
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|ctx
operator|.
name|getSSLContext
argument_list|()
operator|.
name|getSocketFactory
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|SSLSocketFactory
operator|.
name|getDefault
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SslTransport
name|createTransport
parameter_list|(
name|WireFormat
name|wireFormat
parameter_list|,
name|Socket
name|socket
parameter_list|,
name|InitBuffer
name|initBuffer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SslTransport
argument_list|(
name|wireFormat
argument_list|,
operator|(
name|SSLSocket
operator|)
name|socket
argument_list|,
name|initBuffer
argument_list|)
return|;
block|}
block|}
end_class

end_unit

