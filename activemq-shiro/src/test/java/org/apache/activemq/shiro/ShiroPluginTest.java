begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|MutableBrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authc
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authc
operator|.
name|DefaultAuthenticationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|authz
operator|.
name|AuthorizationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|env
operator|.
name|IniEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|DefaultConnectionSubjectFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|shiro
operator|.
name|subject
operator|.
name|SubjectFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|JmsResourceProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|TestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|authc
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|config
operator|.
name|Ini
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|env
operator|.
name|DefaultEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|mgt
operator|.
name|DefaultSecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|realm
operator|.
name|text
operator|.
name|IniRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * @since 5.10.0  */
end_comment

begin_class
specifier|public
class|class
name|ShiroPluginTest
extends|extends
name|TestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ShiroPluginTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|BrokerService
name|broker
decl_stmt|;
specifier|protected
name|SecureJmsResourceProvider
name|resourceProvider
decl_stmt|;
specifier|protected
name|ConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|Session
name|session
decl_stmt|;
specifier|protected
name|Destination
name|destination
decl_stmt|;
specifier|protected
name|MessageConsumer
name|consumer
decl_stmt|;
specifier|protected
name|MessageProducer
name|producer
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|resourceProvider
operator|=
operator|new
name|SecureJmsResourceProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down broker..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|session
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|connection
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
name|broker
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker shut down."
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|reconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|reconnect
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|reconnect
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
comment|// Close the prev connection.
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|session
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|username
operator|==
literal|null
operator|&&
name|password
operator|==
literal|null
condition|)
block|{
name|connection
operator|=
name|resourceProvider
operator|.
name|createConnection
argument_list|(
name|connectionFactory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|connection
operator|=
name|resourceProvider
operator|.
name|createConnection
argument_list|(
name|connectionFactory
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
name|reconnectSession
argument_list|()
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|reconnectSession
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|session
operator|=
name|resourceProvider
operator|.
name|createSession
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|destination
operator|=
name|resourceProvider
operator|.
name|createDestination
argument_list|(
name|session
argument_list|,
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|producer
operator|=
name|resourceProvider
operator|.
name|createProducer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
name|consumer
operator|=
name|resourceProvider
operator|.
name|createConsumer
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ConnectionFactory
name|newConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|resourceProvider
operator|.
name|createConnectionFactory
argument_list|()
return|;
block|}
specifier|protected
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|startBroker
argument_list|()
expr_stmt|;
name|topic
operator|=
name|resourceProvider
operator|.
name|isTopic
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
name|newConnectionFactory
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|startBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|BrokerPlugin
modifier|...
name|plugins
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createBroker
argument_list|(
name|plugins
argument_list|,
name|resourceProvider
operator|.
name|getServerUri
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|(
name|BrokerPlugin
index|[]
name|plugins
parameter_list|,
name|String
modifier|...
name|connectorUris
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
if|if
condition|(
name|plugins
operator|!=
literal|null
operator|&&
name|plugins
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|brokerService
operator|.
name|setPlugins
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectorUris
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|uri
range|:
name|connectorUris
control|)
block|{
name|brokerService
operator|.
name|addConnector
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|brokerService
return|;
block|}
specifier|protected
name|ShiroPlugin
name|createPlugin
parameter_list|(
name|String
name|iniPath
parameter_list|)
block|{
name|Ini
name|ini
init|=
name|Ini
operator|.
name|fromResourcePath
argument_list|(
name|iniPath
argument_list|)
decl_stmt|;
name|Environment
name|env
init|=
operator|new
name|IniEnvironment
argument_list|(
name|ini
argument_list|)
decl_stmt|;
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
return|return
name|plugin
return|;
block|}
specifier|public
name|void
name|testNoEnvironmentOrSecurityManager
parameter_list|()
throws|throws
name|Exception
block|{
comment|//should build IniEnvironment from shiro.ini in the classpath at the least:
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|installPlugin
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Ini
name|ini
init|=
name|Ini
operator|.
name|fromResourcePath
argument_list|(
literal|"classpath:shiro.ini"
argument_list|)
decl_stmt|;
name|IniRealm
name|realm
init|=
call|(
name|IniRealm
call|)
argument_list|(
operator|(
name|DefaultSecurityManager
operator|)
name|plugin
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
operator|.
name|getRealms
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ini
argument_list|,
name|realm
operator|.
name|getIni
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetIni
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|Ini
name|ini
init|=
name|Ini
operator|.
name|fromResourcePath
argument_list|(
literal|"classpath:minimal.shiro.ini"
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|setIni
argument_list|(
name|ini
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|installPlugin
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|IniRealm
name|realm
init|=
call|(
name|IniRealm
call|)
argument_list|(
operator|(
name|DefaultSecurityManager
operator|)
name|plugin
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
operator|.
name|getRealms
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|ini
argument_list|,
name|realm
operator|.
name|getIni
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetIniString
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setIniConfig
argument_list|(
literal|"[users]\n"
operator|+
literal|"system = manager, system\n"
operator|+
literal|"[roles]\n"
operator|+
literal|"system = *"
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|installPlugin
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|IniRealm
name|realm
init|=
call|(
name|IniRealm
call|)
argument_list|(
operator|(
name|DefaultSecurityManager
operator|)
name|plugin
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
operator|.
name|getRealms
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Ini
name|ini
init|=
name|realm
operator|.
name|getIni
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ini
operator|.
name|getSection
argument_list|(
literal|"users"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"manager, system"
argument_list|,
name|ini
operator|.
name|getSection
argument_list|(
literal|"users"
argument_list|)
operator|.
name|get
argument_list|(
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ini
operator|.
name|getSection
argument_list|(
literal|"roles"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|ini
operator|.
name|getSection
argument_list|(
literal|"roles"
argument_list|)
operator|.
name|get
argument_list|(
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetIniResourcePath
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"classpath:minimal.shiro.ini"
decl_stmt|;
name|plugin
operator|.
name|setIniResourcePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|installPlugin
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Ini
name|ini
init|=
name|Ini
operator|.
name|fromResourcePath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|IniRealm
name|realm
init|=
call|(
name|IniRealm
call|)
argument_list|(
operator|(
name|DefaultSecurityManager
operator|)
name|plugin
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
operator|.
name|getRealms
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ini
argument_list|,
name|realm
operator|.
name|getIni
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetSubjectFilter
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|SubjectFilter
name|filter
init|=
operator|new
name|SubjectFilter
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setSubjectFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|filter
argument_list|,
name|plugin
operator|.
name|getSubjectFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|//assert that the AuthenticationFilter is always the next filter in the chain after the SubjectFilter:
name|assertSame
argument_list|(
name|plugin
operator|.
name|getAuthenticationFilter
argument_list|()
argument_list|,
name|filter
operator|.
name|getNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetAuthenticationFilter
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|AuthenticationFilter
name|filter
init|=
operator|new
name|AuthenticationFilter
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setAuthenticationFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|filter
argument_list|,
name|plugin
operator|.
name|getAuthenticationFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|//assert that the AuthenticationFilter is always the next filter in the chain after the SubjectFilter:
name|assertSame
argument_list|(
name|plugin
operator|.
name|getSubjectFilter
argument_list|()
operator|.
name|getNext
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetAuthorizationFilter
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|AuthorizationFilter
name|filter
init|=
operator|new
name|AuthorizationFilter
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setAuthorizationFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|filter
argument_list|,
name|plugin
operator|.
name|getAuthorizationFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|//assert that the AuthenticationFilter is always the next filter in the chain after the AuthenticationFilter:
name|assertSame
argument_list|(
name|plugin
operator|.
name|getAuthenticationFilter
argument_list|()
operator|.
name|getNext
argument_list|()
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetEnvironment
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|Environment
name|env
init|=
operator|new
name|DefaultEnvironment
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|env
argument_list|,
name|plugin
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetSecurityManager
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|mgt
operator|.
name|SecurityManager
name|securityManager
init|=
operator|new
name|DefaultSecurityManager
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|securityManager
argument_list|,
name|plugin
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSecurityManagerWhenInstalled
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|shiro
operator|.
name|mgt
operator|.
name|SecurityManager
name|securityManager
init|=
operator|new
name|DefaultSecurityManager
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|plugin
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
comment|//we will auto-create one when only a sm is provided
name|plugin
operator|.
name|installPlugin
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|securityManager
argument_list|,
name|plugin
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|plugin
operator|.
name|getEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|securityManager
argument_list|,
name|plugin
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEnabledWhenNotInstalled
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|//enabled by default
name|plugin
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plugin
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEnabledWhenInstalled
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
name|createPlugin
argument_list|(
literal|"classpath:minimal.shiro.ini"
argument_list|)
decl_stmt|;
name|this
operator|.
name|broker
operator|=
name|createBroker
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plugin
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAuthenticationEnabledWhenNotInstalled
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthenticationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthenticationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plugin
operator|.
name|isAuthenticationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthenticationEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthenticationEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAuthenticationEnabledWhenInstalled
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setEnvironment
argument_list|(
operator|new
name|DefaultEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|installPlugin
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthenticationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthenticationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plugin
operator|.
name|isAuthenticationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthenticationEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthenticationEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSetAuthenticationPolicy
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|DefaultAuthenticationPolicy
name|policy
init|=
operator|new
name|DefaultAuthenticationPolicy
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setAuthenticationPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|policy
argument_list|,
name|plugin
operator|.
name|getAuthenticationPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|policy
argument_list|,
name|plugin
operator|.
name|getAuthenticationFilter
argument_list|()
operator|.
name|getAuthenticationPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|policy
argument_list|,
operator|(
operator|(
name|DefaultConnectionSubjectFactory
operator|)
name|plugin
operator|.
name|getSubjectFilter
argument_list|()
operator|.
name|getConnectionSubjectFactory
argument_list|()
operator|)
operator|.
name|getAuthenticationPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAuthorizationEnabledWhenNotInstalled
parameter_list|()
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthorizationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthorizationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plugin
operator|.
name|isAuthorizationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthorizationEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthorizationEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAuthorizationEnabledWhenInstalled
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
operator|new
name|ShiroPlugin
argument_list|()
decl_stmt|;
name|plugin
operator|.
name|setEnvironment
argument_list|(
operator|new
name|DefaultEnvironment
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|installPlugin
argument_list|(
operator|new
name|MutableBrokerFilter
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthorizationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthorizationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|plugin
operator|.
name|isAuthorizationEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setAuthorizationEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|plugin
operator|.
name|isAuthorizationEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
name|createPlugin
argument_list|(
literal|"classpath:minimal.shiro.ini"
argument_list|)
decl_stmt|;
name|this
operator|.
name|broker
operator|=
name|createBroker
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|reconnect
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
name|createPlugin
argument_list|(
literal|"classpath:nosystem.shiro.ini"
argument_list|)
decl_stmt|;
name|plugin
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|createBroker
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testRuntimeDisableEnableChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|ShiroPlugin
name|plugin
init|=
name|createPlugin
argument_list|(
literal|"classpath:nosystem.shiro.ini"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|DefaultAuthenticationPolicy
operator|)
name|plugin
operator|.
name|getAuthenticationPolicy
argument_list|()
operator|)
operator|.
name|setVmConnectionAuthenticationRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|plugin
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|createBroker
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
comment|//connection has no credentials.  When disabled, this should succeed:
name|reconnect
argument_list|()
expr_stmt|;
comment|//now enable the plugin and assert that credentials are required:
name|plugin
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|reconnect
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Connections without passwords in this configuration should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AuthenticationException
argument_list|)
expr_stmt|;
block|}
comment|//this should work now that we're authenticating:
name|reconnect
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|SecureJmsResourceProvider
extends|extends
name|JmsResourceProvider
block|{
comment|/**          * Creates a connection, authenticating with the specified username and password.          *          * @see org.apache.activemq.test.JmsResourceProvider#createConnection(javax.jms.ConnectionFactory)          */
specifier|public
name|Connection
name|createConnection
parameter_list|(
name|ConnectionFactory
name|cf
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
if|if
condition|(
name|getClientID
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|getClientID
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|connection
return|;
block|}
block|}
block|}
end_class

end_unit

