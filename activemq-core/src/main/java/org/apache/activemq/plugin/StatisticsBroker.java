begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMapMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|state
operator|.
name|ProducerState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A StatisticsBroker You can retrieve a Map Message for a Destination - or  * Broker containing statistics as key-value pairs The message must contain a  * replyTo Destination - else its ignored  *   */
end_comment

begin_class
specifier|public
class|class
name|StatisticsBroker
extends|extends
name|BrokerFilter
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StatisticsBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|STATS_DESTINATION_PREFIX
init|=
literal|"ActiveMQ.Statistics.Destination"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STATS_BROKER_PREFIX
init|=
literal|"ActiveMQ.Statistics.Broker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|ProducerId
name|advisoryProducerId
init|=
operator|new
name|ProducerId
argument_list|()
decl_stmt|;
comment|/**      *       * Constructor      *       * @param next      */
specifier|public
name|StatisticsBroker
parameter_list|(
name|Broker
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|advisoryProducerId
operator|.
name|setConnectionId
argument_list|(
name|ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sets the persistence mode      *       * @see org.apache.activemq.broker.BrokerFilter#send(org.apache.activemq.broker.ProducerBrokerExchange,      *      org.apache.activemq.command.Message)      */
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|producerExchange
parameter_list|,
name|Message
name|messageSend
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|msgDest
init|=
name|messageSend
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|ActiveMQDestination
name|replyTo
init|=
name|messageSend
operator|.
name|getReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyTo
operator|!=
literal|null
condition|)
block|{
name|String
name|physicalName
init|=
name|msgDest
operator|.
name|getPhysicalName
argument_list|()
decl_stmt|;
name|boolean
name|destStats
init|=
name|physicalName
operator|.
name|regionMatches
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|,
name|STATS_DESTINATION_PREFIX
argument_list|,
literal|0
argument_list|,
name|STATS_DESTINATION_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|brokerStats
init|=
name|physicalName
operator|.
name|regionMatches
argument_list|(
literal|true
argument_list|,
literal|0
argument_list|,
name|STATS_BROKER_PREFIX
argument_list|,
literal|0
argument_list|,
name|STATS_BROKER_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|destStats
condition|)
block|{
name|String
name|queueryName
init|=
name|physicalName
operator|.
name|substring
argument_list|(
name|STATS_DESTINATION_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|physicalName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|queryDest
init|=
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|queueryName
argument_list|,
name|msgDest
operator|.
name|getDestinationType
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Destination
argument_list|>
name|set
init|=
name|getDestinations
argument_list|(
name|queryDest
argument_list|)
decl_stmt|;
for|for
control|(
name|Destination
name|dest
range|:
name|set
control|)
block|{
name|DestinationStatistics
name|stats
init|=
name|dest
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|ActiveMQMapMessage
name|statsMessage
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"destinationName"
argument_list|,
name|dest
operator|.
name|getActiveMQDestination
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"size"
argument_list|,
name|stats
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"enqueueCount"
argument_list|,
name|stats
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"dequeueCount"
argument_list|,
name|stats
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"dispatchCount"
argument_list|,
name|stats
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"expiredCount"
argument_list|,
name|stats
operator|.
name|getExpired
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"inflightCount"
argument_list|,
name|stats
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"messagesCached"
argument_list|,
name|stats
operator|.
name|getMessagesCached
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setInt
argument_list|(
literal|"memoryPercentUsage"
argument_list|,
name|dest
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"memoryUsage"
argument_list|,
name|dest
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"memoryLimit"
argument_list|,
name|dest
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setDouble
argument_list|(
literal|"averageEnqueueTime"
argument_list|,
name|stats
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getAverageTime
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setDouble
argument_list|(
literal|"maxEnqueueTime"
argument_list|,
name|stats
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getMaxTime
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setDouble
argument_list|(
literal|"minEnqueueTime"
argument_list|,
name|stats
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getMinTime
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"consumerCount"
argument_list|,
name|stats
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"producerCount"
argument_list|,
name|stats
operator|.
name|getProducers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|sendStats
argument_list|(
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
argument_list|,
name|statsMessage
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|brokerStats
condition|)
block|{
name|ActiveMQMapMessage
name|statsMessage
init|=
operator|new
name|ActiveMQMapMessage
argument_list|()
decl_stmt|;
name|BrokerService
name|brokerService
init|=
name|getBrokerService
argument_list|()
decl_stmt|;
name|RegionBroker
name|regionBroker
init|=
operator|(
name|RegionBroker
operator|)
name|brokerService
operator|.
name|getRegionBroker
argument_list|()
decl_stmt|;
name|SystemUsage
name|systemUsage
init|=
name|brokerService
operator|.
name|getSystemUsage
argument_list|()
decl_stmt|;
name|DestinationStatistics
name|stats
init|=
name|regionBroker
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"brokerName"
argument_list|,
name|regionBroker
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"brokerId"
argument_list|,
name|regionBroker
operator|.
name|getBrokerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"size"
argument_list|,
name|stats
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"enqueueCount"
argument_list|,
name|stats
operator|.
name|getEnqueues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"dequeueCount"
argument_list|,
name|stats
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"dispatchCount"
argument_list|,
name|stats
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"expiredCount"
argument_list|,
name|stats
operator|.
name|getExpired
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"inflightCount"
argument_list|,
name|stats
operator|.
name|getInflight
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"messagesCached"
argument_list|,
name|stats
operator|.
name|getMessagesCached
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setInt
argument_list|(
literal|"memoryPercentUsage"
argument_list|,
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"memoryUsage"
argument_list|,
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"memoryLimit"
argument_list|,
name|systemUsage
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setInt
argument_list|(
literal|"storePercentUsage"
argument_list|,
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"storeUsage"
argument_list|,
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"storeLimit"
argument_list|,
name|systemUsage
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setInt
argument_list|(
literal|"tempPercentUsage"
argument_list|,
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getPercentUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"tempUsage"
argument_list|,
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"tempLimit"
argument_list|,
name|systemUsage
operator|.
name|getTempUsage
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setDouble
argument_list|(
literal|"averageEnqueueTime"
argument_list|,
name|stats
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getAverageTime
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setDouble
argument_list|(
literal|"maxEnqueueTime"
argument_list|,
name|stats
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getMaxTime
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setDouble
argument_list|(
literal|"minEnqueueTime"
argument_list|,
name|stats
operator|.
name|getProcessTime
argument_list|()
operator|.
name|getMinTime
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"consumerCount"
argument_list|,
name|stats
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|statsMessage
operator|.
name|setLong
argument_list|(
literal|"producerCount"
argument_list|,
name|stats
operator|.
name|getProducers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|answer
init|=
name|brokerService
operator|.
name|getTransportConnectorURIsAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"tcp"
argument_list|)
decl_stmt|;
name|answer
operator|=
name|answer
operator|!=
literal|null
condition|?
name|answer
else|:
literal|""
expr_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"openwire"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|=
name|brokerService
operator|.
name|getTransportConnectorURIsAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"stomp"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|!=
literal|null
condition|?
name|answer
else|:
literal|""
expr_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"stomp"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|=
name|brokerService
operator|.
name|getTransportConnectorURIsAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"ssl"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|!=
literal|null
condition|?
name|answer
else|:
literal|""
expr_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"ssl"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|answer
operator|=
name|brokerService
operator|.
name|getTransportConnectorURIsAsMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"stomp+ssl"
argument_list|)
expr_stmt|;
name|answer
operator|=
name|answer
operator|!=
literal|null
condition|?
name|answer
else|:
literal|""
expr_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"stomp+ssl"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|URI
name|uri
init|=
name|brokerService
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|answer
operator|=
name|uri
operator|!=
literal|null
condition|?
name|uri
operator|.
name|toString
argument_list|()
else|:
literal|""
expr_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"vm"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|brokerService
operator|.
name|getDataDirectoryFile
argument_list|()
decl_stmt|;
name|answer
operator|=
name|file
operator|!=
literal|null
condition|?
name|file
operator|.
name|getCanonicalPath
argument_list|()
else|:
literal|""
expr_stmt|;
name|statsMessage
operator|.
name|setString
argument_list|(
literal|"dataDirectory"
argument_list|,
name|answer
argument_list|)
expr_stmt|;
name|sendStats
argument_list|(
name|producerExchange
operator|.
name|getConnectionContext
argument_list|()
argument_list|,
name|statsMessage
argument_list|,
name|replyTo
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|super
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|messageSend
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting StatisticsBroker"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|sendStats
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ActiveMQMapMessage
name|msg
parameter_list|,
name|ActiveMQDestination
name|replyTo
parameter_list|)
throws|throws
name|Exception
block|{
name|msg
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setType
argument_list|(
name|AdvisorySupport
operator|.
name|ADIVSORY_MESSAGE_TYPE
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
name|this
operator|.
name|advisoryProducerId
argument_list|,
name|this
operator|.
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setDestination
argument_list|(
name|replyTo
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setResponseRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setProducerId
argument_list|(
name|this
operator|.
name|advisoryProducerId
argument_list|)
expr_stmt|;
name|boolean
name|originalFlowControl
init|=
name|context
operator|.
name|isProducerFlowControl
argument_list|()
decl_stmt|;
specifier|final
name|ProducerBrokerExchange
name|producerExchange
init|=
operator|new
name|ProducerBrokerExchange
argument_list|()
decl_stmt|;
name|producerExchange
operator|.
name|setConnectionContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setMutable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|producerExchange
operator|.
name|setProducerState
argument_list|(
operator|new
name|ProducerState
argument_list|(
operator|new
name|ProducerInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|context
operator|.
name|setProducerFlowControl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|next
operator|.
name|send
argument_list|(
name|producerExchange
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|setProducerFlowControl
argument_list|(
name|originalFlowControl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

