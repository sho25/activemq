begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|function
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|FunctionCallExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|MessageEvaluationContext
import|;
end_import

begin_comment
comment|/**  * Function which replaces regular expression matches in a source string to a replacement literal.  *<p/>  * For Example:  * REPLACE('1,2/3', '[,/]', ';') returns '1;2;3'  */
end_comment

begin_class
specifier|public
class|class
name|replaceFunction
implements|implements
name|FilterFunction
block|{
comment|/**      * Check whether the given expression is valid for this function.      *      * @param    expr - the expression consisting of a call to this function.      * @return true - if three arguments are passed to the function; false - otherwise.      */
specifier|public
name|boolean
name|isValid
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|.
name|getNumArguments
argument_list|()
operator|==
literal|3
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
comment|/**      * Indicate that this function does not return a boolean value.      *      * @param    expr - the expression consisting of a call to this function.      * @return false - this filter function always evaluates to a string.      */
specifier|public
name|boolean
name|returnsBoolean
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Evaluate the given expression for this function in the given context.  The result of the evaluation is a      * string with all matches of the regular expression, from the evaluation of the second argument, replaced by      * the string result from the evaluation of the third argument.  Replacement is performed by      * String#replaceAll().      *<p/>      * Note that all three arguments must be Strings.      *      * @param    expr - the expression consisting of a call to this function.      * @return String - the result of the replacement.      */
specifier|public
name|Object
name|evaluate
parameter_list|(
name|FunctionCallExpression
name|expr
parameter_list|,
name|MessageEvaluationContext
name|message_ctx
parameter_list|)
throws|throws
name|javax
operator|.
name|jms
operator|.
name|JMSException
block|{
name|String
name|src
decl_stmt|;
name|String
name|match_regex
decl_stmt|;
name|String
name|repl_lit
decl_stmt|;
name|String
name|result
decl_stmt|;
name|src
operator|=
operator|(
name|String
operator|)
name|expr
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
operator|.
name|evaluate
argument_list|(
name|message_ctx
argument_list|)
expr_stmt|;
name|match_regex
operator|=
operator|(
name|String
operator|)
name|expr
operator|.
name|getArgument
argument_list|(
literal|1
argument_list|)
operator|.
name|evaluate
argument_list|(
name|message_ctx
argument_list|)
expr_stmt|;
name|repl_lit
operator|=
operator|(
name|String
operator|)
name|expr
operator|.
name|getArgument
argument_list|(
literal|2
argument_list|)
operator|.
name|evaluate
argument_list|(
name|message_ctx
argument_list|)
expr_stmt|;
name|result
operator|=
name|src
operator|.
name|replaceAll
argument_list|(
name|match_regex
argument_list|,
name|repl_lit
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

