begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|journal
operator|.
name|active
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_comment
comment|/**  * This contains all the data needed to write and force a list of records to a  * LogFile. The more records that can be cramed into a single BatchedWrite, the  * higher throughput that can be achived by a write and force operation.  *   * @version $Revision: 1.1 $  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|BatchedWrite
block|{
specifier|private
specifier|final
name|Packet
name|packet
decl_stmt|;
specifier|public
name|Throwable
name|error
decl_stmt|;
specifier|private
name|Location
name|mark
decl_stmt|;
specifier|private
name|boolean
name|appendDisabled
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|appendInProgress
init|=
literal|false
decl_stmt|;
specifier|private
name|CountDownLatch
name|writeDoneCountDownLatch
decl_stmt|;
comment|/**      * @param packet      */
specifier|public
name|BatchedWrite
parameter_list|(
name|Packet
name|packet
parameter_list|)
block|{
name|this
operator|.
name|packet
operator|=
name|packet
expr_stmt|;
block|}
comment|/**      * @throws InterruptedException      *       */
specifier|synchronized
specifier|private
name|void
name|disableAppend
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|appendDisabled
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|appendInProgress
condition|)
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @param packet2      * @param mark2      * @return      */
specifier|public
name|boolean
name|append
parameter_list|(
name|Record
name|record
parameter_list|,
name|Location
name|recordMark
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|appendDisabled
condition|)
return|return
literal|false
return|;
name|appendInProgress
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|force
operator|&&
name|writeDoneCountDownLatch
operator|==
literal|null
condition|)
name|writeDoneCountDownLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|record
operator|.
name|read
argument_list|(
name|packet
argument_list|)
expr_stmt|;
comment|// if we fit the record in this batch
if|if
condition|(
operator|!
name|record
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
if|if
condition|(
name|recordMark
operator|!=
literal|null
condition|)
name|mark
operator|=
name|recordMark
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|appendInProgress
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|notify
argument_list|()
expr_stmt|;
if|if
condition|(
name|appendDisabled
condition|)
return|return
literal|false
return|;
else|else
return|return
name|packet
operator|.
name|remaining
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
specifier|public
name|void
name|waitForForce
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|writeDoneCountDownLatch
operator|!=
literal|null
condition|)
block|{
name|writeDoneCountDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
throw|throw
name|error
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|forced
parameter_list|()
block|{
if|if
condition|(
name|writeDoneCountDownLatch
operator|!=
literal|null
condition|)
block|{
name|writeDoneCountDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeFailed
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|writeDoneCountDownLatch
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|error
operator|=
name|error
expr_stmt|;
block|}
name|writeDoneCountDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Packet
name|getPacket
parameter_list|()
block|{
return|return
name|packet
return|;
block|}
comment|/**      * @return      */
specifier|public
name|Location
name|getMark
parameter_list|()
block|{
return|return
name|mark
return|;
block|}
comment|/**      * @throws InterruptedException      *       */
specifier|public
name|void
name|flip
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|disableAppend
argument_list|()
expr_stmt|;
name|packet
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getForce
parameter_list|()
block|{
return|return
name|writeDoneCountDownLatch
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

