begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidClientIDException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|InvalidSelectorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|selector
operator|.
name|SelectorParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|LongSequenceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|Proton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|DescribedType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Accepted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|AmqpValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Modified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Rejected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Released
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|TerminusDurability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Coordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Declare
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Declared
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|Discharge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transaction
operator|.
name|TransactionalState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|AmqpError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|DeliveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|ErrorCondition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|SenderSettleMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Delivery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|EndpointState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|CollectorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|ProtocolTracer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|impl
operator|.
name|TransportImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|framing
operator|.
name|TransportFrame
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|jms
operator|.
name|AMQPNativeInboundTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|jms
operator|.
name|AMQPRawInboundTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|jms
operator|.
name|AutoOutboundTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|jms
operator|.
name|EncodedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|jms
operator|.
name|InboundTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|jms
operator|.
name|JMSMappingInboundTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|jms
operator|.
name|OutboundTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|fusesource
operator|.
name|hawtbuf
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|AmqpProtocolConverter
implements|implements
name|IAmqpProtocolConverter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|TRACE_FRAMES
init|=
name|AmqpTransportFilter
operator|.
name|TRACE_FRAMES
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpProtocolConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BYTE_ARRAY
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHANNEL_MAX
init|=
literal|32767
decl_stmt|;
specifier|private
specifier|final
name|AmqpTransport
name|amqpTransport
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|COPY
init|=
name|Symbol
operator|.
name|getSymbol
argument_list|(
literal|"copy"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|JMS_SELECTOR
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"jms-selector"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|NO_LOCAL
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"no-local"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|ANONYMOUS_RELAY
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-anonymous-relay"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|JMS_MAPPING_VERSION
init|=
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-jms-mapping-version"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Symbol
name|DURABLE_SUBSCRIPTION_ENDED
init|=
name|Symbol
operator|.
name|getSymbol
argument_list|(
literal|"DURABLE_SUBSCRIPTION_ENDED"
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|prefetch
decl_stmt|;
specifier|protected
name|int
name|producerCredit
decl_stmt|;
specifier|protected
name|Transport
name|protonTransport
init|=
name|Proton
operator|.
name|transport
argument_list|()
decl_stmt|;
specifier|protected
name|Connection
name|protonConnection
init|=
name|Proton
operator|.
name|connection
argument_list|()
decl_stmt|;
specifier|protected
name|Collector
name|eventCollector
init|=
operator|new
name|CollectorImpl
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|useByteDestinationTypeAnnotation
decl_stmt|;
specifier|public
name|AmqpProtocolConverter
parameter_list|(
name|AmqpTransport
name|transport
parameter_list|)
block|{
name|this
operator|.
name|amqpTransport
operator|=
name|transport
expr_stmt|;
comment|// the configured maxFrameSize on the URI.
name|int
name|maxFrameSize
init|=
name|transport
operator|.
name|getWireFormat
argument_list|()
operator|.
name|getMaxAmqpFrameSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxFrameSize
operator|>
name|AmqpWireFormat
operator|.
name|NO_AMQP_MAX_FRAME_SIZE
condition|)
block|{
name|this
operator|.
name|protonTransport
operator|.
name|setMaxFrameSize
argument_list|(
name|maxFrameSize
argument_list|)
expr_stmt|;
block|}
name|useByteDestinationTypeAnnotation
operator|=
name|transport
operator|.
name|getWireFormat
argument_list|()
operator|.
name|isUseByteDestinationTypeAnnotation
argument_list|()
expr_stmt|;
name|this
operator|.
name|protonTransport
operator|.
name|bind
argument_list|(
name|this
operator|.
name|protonConnection
argument_list|)
expr_stmt|;
comment|// NOTE: QPid JMS client has a bug where the channel max is stored as a
comment|//       short value in the Connection class which means that if we allow
comment|//       the default channel max of 65535 to be sent then no new sessions
comment|//       can be created because the value would be -1 when checked.
name|this
operator|.
name|protonTransport
operator|.
name|setChannelMax
argument_list|(
name|CHANNEL_MAX
argument_list|)
expr_stmt|;
name|this
operator|.
name|protonConnection
operator|.
name|collect
argument_list|(
name|eventCollector
argument_list|)
expr_stmt|;
name|this
operator|.
name|protonConnection
operator|.
name|setProperties
argument_list|(
name|getConnectionProperties
argument_list|()
argument_list|)
expr_stmt|;
name|updateTracer
argument_list|()
expr_stmt|;
block|}
comment|/**      * Load and return a<code>Map<Symbol, Object></code> that contains the connection      * properties which will allow the client to better communicate with this broker.      *      * @return the properties that are sent to new clients on connect.      */
specifier|protected
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|getConnectionProperties
parameter_list|()
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|ANONYMOUS_RELAY
argument_list|,
name|amqpTransport
operator|.
name|getWireFormat
argument_list|()
operator|.
name|getAnonymousNodeName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateTracer
parameter_list|()
block|{
if|if
condition|(
name|amqpTransport
operator|.
name|isTrace
argument_list|()
condition|)
block|{
operator|(
operator|(
name|TransportImpl
operator|)
name|protonTransport
operator|)
operator|.
name|setProtocolTracer
argument_list|(
operator|new
name|ProtocolTracer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|receivedFrame
parameter_list|(
name|TransportFrame
name|transportFrame
parameter_list|)
block|{
name|TRACE_FRAMES
operator|.
name|trace
argument_list|(
literal|"{} | RECV: {}"
argument_list|,
name|AmqpProtocolConverter
operator|.
name|this
operator|.
name|amqpTransport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|transportFrame
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sentFrame
parameter_list|(
name|TransportFrame
name|transportFrame
parameter_list|)
block|{
name|TRACE_FRAMES
operator|.
name|trace
argument_list|(
literal|"{} | SENT: {}"
argument_list|,
name|AmqpProtocolConverter
operator|.
name|this
operator|.
name|amqpTransport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|transportFrame
operator|.
name|getBody
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|pumpProtonToSocket
parameter_list|()
block|{
try|try
block|{
name|boolean
name|done
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
name|ByteBuffer
name|toWrite
init|=
name|protonTransport
operator|.
name|getOutputBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|toWrite
operator|!=
literal|null
operator|&&
name|toWrite
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending {} bytes out"
argument_list|,
name|toWrite
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|amqpTransport
operator|.
name|sendToAmqp
argument_list|(
name|toWrite
argument_list|)
expr_stmt|;
name|protonTransport
operator|.
name|outputConsumed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|amqpTransport
operator|.
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|AmqpSessionContext
block|{
specifier|private
specifier|final
name|SessionId
name|sessionId
decl_stmt|;
name|long
name|nextProducerId
init|=
literal|0
decl_stmt|;
name|long
name|nextConsumerId
init|=
literal|0
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerContext
argument_list|>
name|consumers
init|=
operator|new
name|HashMap
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerContext
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|AmqpSessionContext
parameter_list|(
name|ConnectionId
name|connectionId
parameter_list|,
name|long
name|id
parameter_list|)
block|{
name|sessionId
operator|=
operator|new
name|SessionId
argument_list|(
name|connectionId
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|Sasl
name|sasl
decl_stmt|;
comment|/**      * Convert a AMQP command      */
annotation|@
name|Override
specifier|public
name|void
name|onAMQPData
parameter_list|(
name|Object
name|command
parameter_list|)
throws|throws
name|Exception
block|{
name|Buffer
name|frame
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|getClass
argument_list|()
operator|==
name|AmqpHeader
operator|.
name|class
condition|)
block|{
name|AmqpHeader
name|header
init|=
operator|(
name|AmqpHeader
operator|)
name|command
decl_stmt|;
switch|switch
condition|(
name|header
operator|.
name|getProtocolId
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
break|break;
comment|// nothing to do..
case|case
literal|3
case|:
comment|// Client will be using SASL for auth..
name|sasl
operator|=
name|protonTransport
operator|.
name|sasl
argument_list|()
expr_stmt|;
name|sasl
operator|.
name|setMechanisms
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ANONYMOUS"
block|,
literal|"PLAIN"
block|}
argument_list|)
expr_stmt|;
name|sasl
operator|.
name|server
argument_list|()
expr_stmt|;
break|break;
default|default:
block|}
name|frame
operator|=
name|header
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|=
operator|(
name|Buffer
operator|)
name|command
expr_stmt|;
block|}
name|onFrame
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFrame
parameter_list|(
name|Buffer
name|frame
parameter_list|)
throws|throws
name|Exception
block|{
while|while
condition|(
name|frame
operator|.
name|length
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|int
name|count
init|=
name|protonTransport
operator|.
name|input
argument_list|(
name|frame
operator|.
name|data
argument_list|,
name|frame
operator|.
name|offset
argument_list|,
name|frame
operator|.
name|length
argument_list|)
decl_stmt|;
name|frame
operator|.
name|moveHead
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Could not decode AMQP frame: "
operator|+
name|frame
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
if|if
condition|(
name|sasl
operator|!=
literal|null
condition|)
block|{
comment|// Lets try to complete the sasl handshake.
if|if
condition|(
name|sasl
operator|.
name|getRemoteMechanisms
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
literal|"PLAIN"
operator|.
name|equals
argument_list|(
name|sasl
operator|.
name|getRemoteMechanisms
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|sasl
operator|.
name|pending
argument_list|()
index|]
decl_stmt|;
name|sasl
operator|.
name|recv
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|Buffer
index|[]
name|parts
init|=
operator|new
name|Buffer
argument_list|(
name|data
argument_list|)
operator|.
name|split
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|parts
index|[
literal|0
index|]
operator|.
name|utf8
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parts
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|connectionInfo
operator|.
name|setPassword
argument_list|(
name|parts
index|[
literal|1
index|]
operator|.
name|utf8
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// We can't really auth at this point since we don't
comment|// know the client id yet.. :(
name|sasl
operator|.
name|done
argument_list|(
name|Sasl
operator|.
name|SaslOutcome
operator|.
name|PN_SASL_OK
argument_list|)
expr_stmt|;
name|amqpTransport
operator|.
name|getWireFormat
argument_list|()
operator|.
name|magicRead
operator|=
literal|false
expr_stmt|;
name|sasl
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL [PLAIN] Handshake complete."
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"ANONYMOUS"
operator|.
name|equals
argument_list|(
name|sasl
operator|.
name|getRemoteMechanisms
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|sasl
operator|.
name|done
argument_list|(
name|Sasl
operator|.
name|SaslOutcome
operator|.
name|PN_SASL_OK
argument_list|)
expr_stmt|;
name|amqpTransport
operator|.
name|getWireFormat
argument_list|()
operator|.
name|magicRead
operator|=
literal|false
expr_stmt|;
name|sasl
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL [ANONYMOUS] Handshake complete."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Event
name|event
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|event
operator|=
name|eventCollector
operator|.
name|peek
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CONNECTION_REMOTE_OPEN
case|:
case|case
name|CONNECTION_REMOTE_CLOSE
case|:
name|processConnectionEvent
argument_list|(
name|event
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SESSION_REMOTE_OPEN
case|:
case|case
name|SESSION_REMOTE_CLOSE
case|:
name|processSessionEvent
argument_list|(
name|event
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_REMOTE_OPEN
case|:
case|case
name|LINK_REMOTE_CLOSE
case|:
case|case
name|LINK_REMOTE_DETACH
case|:
name|processLinkEvent
argument_list|(
name|event
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LINK_FLOW
case|:
name|processLinkFlow
argument_list|(
name|event
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELIVERY
case|:
name|processDelivery
argument_list|(
name|event
operator|.
name|getDelivery
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|eventCollector
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
operator|new
name|AmqpProtocolException
argument_list|(
literal|"Could not process AMQP commands"
argument_list|,
literal|true
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processLinkFlow
parameter_list|(
name|Link
name|link
parameter_list|)
throws|throws
name|Exception
block|{
name|Object
name|context
init|=
name|link
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|int
name|credit
init|=
name|link
operator|.
name|getRemoteCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
name|context
operator|instanceof
name|ConsumerContext
condition|)
block|{
name|ConsumerContext
name|consumerContext
init|=
operator|(
name|ConsumerContext
operator|)
name|context
decl_stmt|;
comment|// change ActiveMQ consumer prefetch if needed
if|if
condition|(
name|consumerContext
operator|.
name|credit
operator|==
literal|0
operator|&&
name|consumerContext
operator|.
name|consumerPrefetch
operator|!=
name|credit
operator|&&
name|credit
operator|>
literal|0
condition|)
block|{
name|ConsumerControl
name|control
init|=
operator|new
name|ConsumerControl
argument_list|()
decl_stmt|;
name|control
operator|.
name|setConsumerId
argument_list|(
name|consumerContext
operator|.
name|consumerId
argument_list|)
expr_stmt|;
name|control
operator|.
name|setDestination
argument_list|(
name|consumerContext
operator|.
name|destination
argument_list|)
expr_stmt|;
name|control
operator|.
name|setPrefetch
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|consumerContext
operator|.
name|consumerPrefetch
operator|=
name|credit
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|control
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|consumerContext
operator|.
name|credit
operator|=
name|credit
expr_stmt|;
block|}
operator|(
operator|(
name|AmqpDeliveryListener
operator|)
name|link
operator|.
name|getContext
argument_list|()
operator|)
operator|.
name|drainCheck
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|processConnectionEvent
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|Exception
block|{
name|EndpointState
name|remoteState
init|=
name|connection
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteState
operator|==
name|EndpointState
operator|.
name|ACTIVE
condition|)
block|{
name|onConnectionOpen
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remoteState
operator|==
name|EndpointState
operator|.
name|CLOSED
condition|)
block|{
name|doClose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processLinkEvent
parameter_list|(
name|Link
name|link
parameter_list|)
throws|throws
name|Exception
block|{
name|EndpointState
name|remoteState
init|=
name|link
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteState
operator|==
name|EndpointState
operator|.
name|ACTIVE
condition|)
block|{
name|onLinkOpen
argument_list|(
name|link
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remoteState
operator|==
name|EndpointState
operator|.
name|CLOSED
condition|)
block|{
operator|(
operator|(
name|AmqpDeliveryListener
operator|)
name|link
operator|.
name|getContext
argument_list|()
operator|)
operator|.
name|onClose
argument_list|()
expr_stmt|;
name|link
operator|.
name|close
argument_list|()
expr_stmt|;
name|link
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processSessionEvent
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|EndpointState
name|remoteState
init|=
name|session
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteState
operator|==
name|EndpointState
operator|.
name|ACTIVE
condition|)
block|{
name|onSessionOpen
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|remoteState
operator|==
name|EndpointState
operator|.
name|CLOSED
condition|)
block|{
comment|// TODO - close links?
name|onSessionClose
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|processDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|delivery
operator|.
name|isPartial
argument_list|()
condition|)
block|{
name|AmqpDeliveryListener
name|listener
init|=
operator|(
name|AmqpDeliveryListener
operator|)
name|delivery
operator|.
name|getLink
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|onDelivery
argument_list|(
name|delivery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|closing
init|=
literal|false
decl_stmt|;
name|boolean
name|closedSocket
init|=
literal|false
decl_stmt|;
specifier|private
name|void
name|doClose
parameter_list|()
block|{
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|closing
operator|=
literal|true
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|connectionId
argument_list|)
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|closedSocket
condition|)
block|{
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|ShutdownInfo
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onAMQPException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|closedSocket
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|closing
condition|)
block|{
name|amqpTransport
operator|.
name|sendToActiveMQ
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|amqpTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{             }
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onActiveMQCommand
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|command
operator|.
name|isResponse
argument_list|()
condition|)
block|{
name|Response
name|response
init|=
operator|(
name|Response
operator|)
name|command
decl_stmt|;
name|ResponseHandler
name|rh
init|=
name|resposeHandlers
operator|.
name|remove
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|response
operator|.
name|getCorrelationId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rh
operator|!=
literal|null
condition|)
block|{
name|rh
operator|.
name|onResponse
argument_list|(
name|this
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Pass down any unexpected errors. Should this close the connection?
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isMessageDispatch
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|command
decl_stmt|;
name|ConsumerContext
name|consumerContext
init|=
name|subscriptionsByConsumerId
operator|.
name|get
argument_list|(
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|consumerContext
operator|!=
literal|null
condition|)
block|{
comment|// End of Queue Browse will have no Message object.
if|if
condition|(
name|md
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Dispatching MessageId: {} to consumer"
argument_list|,
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Dispatching End of Browse Command to consumer {}"
argument_list|,
name|md
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|consumerContext
operator|.
name|onMessageDispatch
argument_list|(
name|md
argument_list|)
expr_stmt|;
if|if
condition|(
name|md
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Finished Dispatch of MessageId: {} to consumer"
argument_list|,
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ConnectionError
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
comment|// Pass down any unexpected async errors. Should this close the connection?
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ConnectionError
operator|)
name|command
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|handleException
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|.
name|isBrokerInfo
argument_list|()
condition|)
block|{
comment|// ignore
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Do not know how to process ActiveMQ Command {}"
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|IdGenerator
name|CONNECTION_ID_GENERATOR
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConnectionId
name|connectionId
init|=
operator|new
name|ConnectionId
argument_list|(
name|CONNECTION_ID_GENERATOR
operator|.
name|generateId
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ConnectionInfo
name|connectionInfo
init|=
operator|new
name|ConnectionInfo
argument_list|()
decl_stmt|;
specifier|private
name|long
name|nextSessionId
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|nextTempDestinationId
init|=
literal|0
decl_stmt|;
specifier|static
specifier|abstract
class|class
name|AmqpDeliveryListener
block|{
specifier|abstract
specifier|public
name|void
name|onDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
name|void
name|onClose
parameter_list|()
throws|throws
name|Exception
block|{         }
specifier|public
name|void
name|drainCheck
parameter_list|()
block|{         }
specifier|abstract
name|void
name|doCommit
parameter_list|()
throws|throws
name|Exception
function_decl|;
specifier|abstract
name|void
name|doRollback
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
name|void
name|onConnectionOpen
parameter_list|()
throws|throws
name|AmqpProtocolException
block|{
name|connectionInfo
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
comment|// configureInactivityMonitor(connect.keepAlive());
name|String
name|clientId
init|=
name|protonConnection
operator|.
name|getRemoteContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
operator|&&
operator|!
name|clientId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connectionInfo
operator|.
name|setClientId
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|protonConnection
operator|.
name|getRemoteProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|props
operator|.
name|containsKey
argument_list|(
name|JMS_MAPPING_VERSION
argument_list|)
condition|)
block|{
name|useByteDestinationTypeAnnotation
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|useByteDestinationTypeAnnotation
condition|)
block|{
name|outboundTransformer
operator|.
name|setUseByteDestinationTypeAnnotations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|connectionInfo
operator|.
name|setTransportContext
argument_list|(
name|amqpTransport
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|connectionInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|protonConnection
operator|.
name|open
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|SecurityException
condition|)
block|{
name|protonConnection
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|UNAUTHORIZED_ACCESS
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|InvalidClientIDException
condition|)
block|{
name|protonConnection
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|protonConnection
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|ILLEGAL_STATE
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|protonConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
name|amqpTransport
operator|.
name|onException
argument_list|(
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|exception
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|onSessionOpen
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|AmqpSessionContext
name|sessionContext
init|=
operator|new
name|AmqpSessionContext
argument_list|(
name|connectionId
argument_list|,
name|nextSessionId
operator|++
argument_list|)
decl_stmt|;
name|session
operator|.
name|setContext
argument_list|(
name|sessionContext
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|SessionInfo
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|session
operator|.
name|setIncomingCapacity
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|onSessionClose
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|AmqpSessionContext
name|sessionContext
init|=
operator|(
name|AmqpSessionContext
operator|)
name|session
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionContext
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Session {} closed"
argument_list|,
name|sessionContext
operator|.
name|sessionId
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|session
operator|.
name|setContext
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|free
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|onLinkOpen
parameter_list|(
name|Link
name|link
parameter_list|)
block|{
name|link
operator|.
name|setSource
argument_list|(
name|link
operator|.
name|getRemoteSource
argument_list|()
argument_list|)
expr_stmt|;
name|link
operator|.
name|setTarget
argument_list|(
name|link
operator|.
name|getRemoteTarget
argument_list|()
argument_list|)
expr_stmt|;
name|AmqpSessionContext
name|sessionContext
init|=
operator|(
name|AmqpSessionContext
operator|)
name|link
operator|.
name|getSession
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|link
operator|instanceof
name|Receiver
condition|)
block|{
name|onReceiverOpen
argument_list|(
operator|(
name|Receiver
operator|)
name|link
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onSenderOpen
argument_list|(
operator|(
name|Sender
operator|)
name|link
argument_list|,
name|sessionContext
argument_list|)
expr_stmt|;
block|}
block|}
name|InboundTransformer
name|inboundTransformer
decl_stmt|;
specifier|protected
name|InboundTransformer
name|getInboundTransformer
parameter_list|()
block|{
if|if
condition|(
name|inboundTransformer
operator|==
literal|null
condition|)
block|{
name|String
name|transformer
init|=
name|amqpTransport
operator|.
name|getTransformer
argument_list|()
decl_stmt|;
if|if
condition|(
name|transformer
operator|.
name|equals
argument_list|(
name|InboundTransformer
operator|.
name|TRANSFORMER_JMS
argument_list|)
condition|)
block|{
name|inboundTransformer
operator|=
operator|new
name|JMSMappingInboundTransformer
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|transformer
operator|.
name|equals
argument_list|(
name|InboundTransformer
operator|.
name|TRANSFORMER_NATIVE
argument_list|)
condition|)
block|{
name|inboundTransformer
operator|=
operator|new
name|AMQPNativeInboundTransformer
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|transformer
operator|.
name|equals
argument_list|(
name|InboundTransformer
operator|.
name|TRANSFORMER_RAW
argument_list|)
condition|)
block|{
name|inboundTransformer
operator|=
operator|new
name|AMQPRawInboundTransformer
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unknown transformer type {} using native one instead"
argument_list|,
name|transformer
argument_list|)
expr_stmt|;
name|inboundTransformer
operator|=
operator|new
name|AMQPNativeInboundTransformer
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useByteDestinationTypeAnnotation
condition|)
block|{
name|inboundTransformer
operator|.
name|setUseByteDestinationTypeAnnotations
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|inboundTransformer
return|;
block|}
specifier|abstract
class|class
name|BaseProducerContext
extends|extends
name|AmqpDeliveryListener
block|{
name|ByteArrayOutputStream
name|current
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|recvBuffer
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|8
index|]
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
block|{
name|Receiver
name|receiver
init|=
operator|(
operator|(
name|Receiver
operator|)
name|delivery
operator|.
name|getLink
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|delivery
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delivery was not readable!"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|current
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
block|}
name|int
name|count
decl_stmt|;
while|while
condition|(
operator|(
name|count
operator|=
name|receiver
operator|.
name|recv
argument_list|(
name|recvBuffer
argument_list|,
literal|0
argument_list|,
name|recvBuffer
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|current
operator|.
name|write
argument_list|(
name|recvBuffer
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// Expecting more deliveries..
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|receiver
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Buffer
name|buffer
init|=
name|current
operator|.
name|toBuffer
argument_list|()
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
name|onMessage
argument_list|(
name|receiver
argument_list|,
name|delivery
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|doCommit
parameter_list|()
throws|throws
name|Exception
block|{         }
annotation|@
name|Override
name|void
name|doRollback
parameter_list|()
throws|throws
name|Exception
block|{         }
specifier|abstract
specifier|protected
name|void
name|onMessage
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
name|Delivery
name|delivery
parameter_list|,
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
class|class
name|ProducerContext
extends|extends
name|BaseProducerContext
block|{
specifier|private
specifier|final
name|ProducerId
name|producerId
decl_stmt|;
specifier|private
specifier|final
name|LongSequenceGenerator
name|messageIdGenerator
init|=
operator|new
name|LongSequenceGenerator
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|anonymous
decl_stmt|;
specifier|public
name|ProducerContext
parameter_list|(
name|ProducerId
name|producerId
parameter_list|,
name|ActiveMQDestination
name|destination
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
block|{
name|this
operator|.
name|producerId
operator|=
name|producerId
expr_stmt|;
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|anonymous
operator|=
name|anonymous
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMessage
parameter_list|(
specifier|final
name|Receiver
name|receiver
parameter_list|,
specifier|final
name|Delivery
name|delivery
parameter_list|,
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|EncodedMessage
name|em
init|=
operator|new
name|EncodedMessage
argument_list|(
name|delivery
operator|.
name|getMessageFormat
argument_list|()
argument_list|,
name|buffer
operator|.
name|data
argument_list|,
name|buffer
operator|.
name|offset
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
decl_stmt|;
specifier|final
name|ActiveMQMessage
name|message
init|=
operator|(
name|ActiveMQMessage
operator|)
name|getInboundTransformer
argument_list|()
operator|.
name|transform
argument_list|(
name|em
argument_list|)
decl_stmt|;
comment|// TODO - we need to cast TempTopic to TempQueue as we internally are using temp queues for all dynamic destinations
comment|// we need to figure out how to support both queues and topics
if|if
condition|(
name|message
operator|.
name|getJMSReplyTo
argument_list|()
operator|!=
literal|null
operator|&&
name|message
operator|.
name|getJMSReplyTo
argument_list|()
operator|instanceof
name|ActiveMQTempTopic
condition|)
block|{
name|ActiveMQTempTopic
name|tempTopic
init|=
operator|(
name|ActiveMQTempTopic
operator|)
name|message
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
name|message
operator|.
name|setJMSReplyTo
argument_list|(
operator|new
name|ActiveMQTempQueue
argument_list|(
name|tempTopic
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|current
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setJMSDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAnonymous
argument_list|()
condition|)
block|{
name|Destination
name|toDestination
init|=
name|message
operator|.
name|getJMSDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|toDestination
operator|==
literal|null
operator|||
operator|!
operator|(
name|toDestination
operator|instanceof
name|ActiveMQDestination
operator|)
condition|)
block|{
name|Rejected
name|rejected
init|=
operator|new
name|Rejected
argument_list|()
decl_stmt|;
name|ErrorCondition
name|condition
init|=
operator|new
name|ErrorCondition
argument_list|()
decl_stmt|;
name|condition
operator|.
name|setCondition
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|condition
operator|.
name|setDescription
argument_list|(
literal|"Missing to field for message sent to an anonymous producer"
argument_list|)
expr_stmt|;
name|rejected
operator|.
name|setError
argument_list|(
name|condition
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|rejected
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|message
operator|.
name|setProducerId
argument_list|(
name|producerId
argument_list|)
expr_stmt|;
comment|// Always override the AMQP client's MessageId with our own.  Preserve
comment|// the original in the TextView property for later Ack.
name|MessageId
name|messageId
init|=
operator|new
name|MessageId
argument_list|(
name|producerId
argument_list|,
name|messageIdGenerator
operator|.
name|getNextSequenceId
argument_list|()
argument_list|)
decl_stmt|;
name|MessageId
name|amqpMessageId
init|=
name|message
operator|.
name|getMessageId
argument_list|()
decl_stmt|;
if|if
condition|(
name|amqpMessageId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|amqpMessageId
operator|.
name|getTextView
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|messageId
operator|.
name|setTextView
argument_list|(
name|amqpMessageId
operator|.
name|getTextView
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageId
operator|.
name|setTextView
argument_list|(
name|amqpMessageId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|setMessageId
argument_list|(
name|messageId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Inbound Message:{} from Producer:{}"
argument_list|,
name|message
operator|.
name|getMessageId
argument_list|()
argument_list|,
name|producerId
operator|+
literal|":"
operator|+
name|messageId
operator|.
name|getProducerSequenceId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|DeliveryState
name|remoteState
init|=
name|delivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteState
operator|!=
literal|null
operator|&&
name|remoteState
operator|instanceof
name|TransactionalState
condition|)
block|{
name|TransactionalState
name|s
init|=
operator|(
name|TransactionalState
operator|)
name|remoteState
decl_stmt|;
name|long
name|txid
init|=
name|toLong
argument_list|(
name|s
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|message
operator|.
name|setTransactionId
argument_list|(
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|onSend
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|delivery
operator|.
name|remotelySettled
argument_list|()
condition|)
block|{
name|sendToActiveMQ
argument_list|(
name|message
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|er
init|=
operator|(
name|ExceptionResponse
operator|)
name|response
decl_stmt|;
name|Rejected
name|rejected
init|=
operator|new
name|Rejected
argument_list|()
decl_stmt|;
name|ErrorCondition
name|condition
init|=
operator|new
name|ErrorCondition
argument_list|()
decl_stmt|;
name|condition
operator|.
name|setCondition
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"failed"
argument_list|)
argument_list|)
expr_stmt|;
name|condition
operator|.
name|setDescription
argument_list|(
name|er
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|rejected
operator|.
name|setError
argument_list|(
name|condition
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|rejected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|receiver
operator|.
name|getCredit
argument_list|()
operator|<=
operator|(
name|prefetch
operator|*
literal|.2
operator|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending more credit ({}) to producer: {}"
argument_list|,
name|prefetch
operator|-
name|receiver
operator|.
name|getCredit
argument_list|()
argument_list|,
name|producerId
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
name|prefetch
operator|-
name|receiver
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remoteState
operator|!=
literal|null
operator|&&
name|remoteState
operator|instanceof
name|TransactionalState
condition|)
block|{
name|TransactionalState
name|txAccepted
init|=
operator|new
name|TransactionalState
argument_list|()
decl_stmt|;
name|txAccepted
operator|.
name|setOutcome
argument_list|(
name|Accepted
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|txAccepted
operator|.
name|setTxnId
argument_list|(
operator|(
operator|(
name|TransactionalState
operator|)
name|remoteState
operator|)
operator|.
name|getTxnId
argument_list|()
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|txAccepted
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delivery
operator|.
name|disposition
argument_list|(
name|Accepted
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|receiver
operator|.
name|getCredit
argument_list|()
operator|<=
operator|(
name|prefetch
operator|*
literal|.2
operator|)
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending more credit ({}) to producer: {}"
argument_list|,
name|prefetch
operator|-
name|receiver
operator|.
name|getCredit
argument_list|()
argument_list|,
name|producerId
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
name|prefetch
operator|-
name|receiver
operator|.
name|getCredit
argument_list|()
argument_list|)
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|producerId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isAnonymous
parameter_list|()
block|{
return|return
name|anonymous
return|;
block|}
block|}
name|long
name|nextTransactionId
init|=
literal|1
decl_stmt|;
class|class
name|Transaction
block|{     }
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Transaction
argument_list|>
name|transactions
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Transaction
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|byte
index|[]
name|toBytes
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
literal|8
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|data
return|;
block|}
specifier|private
name|long
name|toLong
parameter_list|(
name|Binary
name|value
parameter_list|)
block|{
name|Buffer
name|buffer
init|=
operator|new
name|Buffer
argument_list|(
name|value
operator|.
name|getArray
argument_list|()
argument_list|,
name|value
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|value
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|buffer
operator|.
name|bigEndianEditor
argument_list|()
operator|.
name|readLong
argument_list|()
return|;
block|}
name|AmqpDeliveryListener
name|coordinatorContext
init|=
operator|new
name|BaseProducerContext
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onMessage
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
specifier|final
name|Delivery
name|delivery
parameter_list|,
name|Buffer
name|buffer
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|msg
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
name|buffer
operator|.
name|offset
decl_stmt|;
name|int
name|len
init|=
name|buffer
operator|.
name|length
decl_stmt|;
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|decoded
init|=
name|msg
operator|.
name|decode
argument_list|(
name|buffer
operator|.
name|data
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
assert|assert
name|decoded
operator|>
literal|0
operator|:
literal|"Make progress decoding the message"
assert|;
name|offset
operator|+=
name|decoded
expr_stmt|;
name|len
operator|-=
name|decoded
expr_stmt|;
block|}
specifier|final
name|Object
name|action
init|=
operator|(
operator|(
name|AmqpValue
operator|)
name|msg
operator|.
name|getBody
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"COORDINATOR received: {}, [{}]"
argument_list|,
name|action
argument_list|,
name|buffer
argument_list|)
expr_stmt|;
if|if
condition|(
name|action
operator|instanceof
name|Declare
condition|)
block|{
name|Declare
name|declare
init|=
operator|(
name|Declare
operator|)
name|action
decl_stmt|;
if|if
condition|(
name|declare
operator|.
name|getGlobalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"don't know how to handle a declare /w a set GlobalId"
argument_list|)
throw|;
block|}
name|long
name|txid
init|=
name|nextTransactionId
operator|++
decl_stmt|;
name|TransactionInfo
name|txinfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionId
argument_list|,
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
argument_list|,
name|TransactionInfo
operator|.
name|BEGIN
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|txinfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"started transaction {}"
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|Declared
name|declared
init|=
operator|new
name|Declared
argument_list|()
decl_stmt|;
name|declared
operator|.
name|setTxnId
argument_list|(
operator|new
name|Binary
argument_list|(
name|toBytes
argument_list|(
name|txid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|declared
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|action
operator|instanceof
name|Discharge
condition|)
block|{
name|Discharge
name|discharge
init|=
operator|(
name|Discharge
operator|)
name|action
decl_stmt|;
name|long
name|txid
init|=
name|toLong
argument_list|(
name|discharge
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|operation
decl_stmt|;
if|if
condition|(
name|discharge
operator|.
name|getFail
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"rollback transaction {}"
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|operation
operator|=
name|TransactionInfo
operator|.
name|ROLLBACK
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"commit transaction {}"
argument_list|,
name|txid
argument_list|)
expr_stmt|;
name|operation
operator|=
name|TransactionInfo
operator|.
name|COMMIT_ONE_PHASE
expr_stmt|;
block|}
name|AmqpSessionContext
name|context
init|=
operator|(
name|AmqpSessionContext
operator|)
name|receiver
operator|.
name|getSession
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
for|for
control|(
name|ConsumerContext
name|consumer
range|:
name|context
operator|.
name|consumers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|operation
operator|==
name|TransactionInfo
operator|.
name|ROLLBACK
condition|)
block|{
name|consumer
operator|.
name|doRollback
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|consumer
operator|.
name|doCommit
argument_list|()
expr_stmt|;
block|}
block|}
name|TransactionInfo
name|txinfo
init|=
operator|new
name|TransactionInfo
argument_list|(
name|connectionId
argument_list|,
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
argument_list|,
name|operation
argument_list|)
decl_stmt|;
name|sendToActiveMQ
argument_list|(
name|txinfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|ExceptionResponse
name|er
init|=
operator|(
name|ExceptionResponse
operator|)
name|response
decl_stmt|;
name|Rejected
name|rejected
init|=
operator|new
name|Rejected
argument_list|()
decl_stmt|;
name|rejected
operator|.
name|setError
argument_list|(
name|createErrorCondition
argument_list|(
literal|"failed"
argument_list|,
name|er
operator|.
name|getException
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|disposition
argument_list|(
name|rejected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delivery
operator|.
name|disposition
argument_list|(
name|Accepted
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"TX: {} settling {}"
argument_list|,
name|operation
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|ConsumerContext
name|consumer
range|:
name|context
operator|.
name|consumers
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|operation
operator|==
name|TransactionInfo
operator|.
name|ROLLBACK
condition|)
block|{
name|consumer
operator|.
name|pumpOutbound
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected coordinator message type: "
operator|+
name|action
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|void
name|onReceiverOpen
parameter_list|(
specifier|final
name|Receiver
name|receiver
parameter_list|,
name|AmqpSessionContext
name|sessionContext
parameter_list|)
block|{
comment|// Client is producing to this receiver object
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|transport
operator|.
name|Target
name|remoteTarget
init|=
name|receiver
operator|.
name|getRemoteTarget
argument_list|()
decl_stmt|;
name|int
name|flow
init|=
name|producerCredit
decl_stmt|;
comment|// use client's preference if set
if|if
condition|(
name|receiver
operator|.
name|getRemoteCredit
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|flow
operator|=
name|receiver
operator|.
name|getRemoteCredit
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|remoteTarget
operator|instanceof
name|Coordinator
condition|)
block|{
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|setContext
argument_list|(
name|coordinatorContext
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
name|flow
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|open
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Target
name|target
init|=
operator|(
name|Target
operator|)
name|remoteTarget
decl_stmt|;
name|ProducerId
name|producerId
init|=
operator|new
name|ProducerId
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|,
name|sessionContext
operator|.
name|nextProducerId
operator|++
argument_list|)
decl_stmt|;
name|ActiveMQDestination
name|dest
init|=
literal|null
decl_stmt|;
name|boolean
name|anonymous
init|=
literal|false
decl_stmt|;
name|String
name|targetNodeName
init|=
name|target
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|targetNodeName
operator|!=
literal|null
operator|&&
name|targetNodeName
operator|.
name|equals
argument_list|(
name|amqpTransport
operator|.
name|getWireFormat
argument_list|()
operator|.
name|getAnonymousNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|anonymous
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target
operator|.
name|getDynamic
argument_list|()
condition|)
block|{
name|dest
operator|=
name|createTempQueue
argument_list|()
expr_stmt|;
name|Target
name|actualTarget
init|=
operator|new
name|Target
argument_list|()
decl_stmt|;
name|actualTarget
operator|.
name|setAddress
argument_list|(
name|dest
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|actualTarget
operator|.
name|setDynamic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|setTarget
argument_list|(
name|actualTarget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dest
operator|=
name|createDestination
argument_list|(
name|remoteTarget
argument_list|)
expr_stmt|;
block|}
name|ProducerContext
name|producerContext
init|=
operator|new
name|ProducerContext
argument_list|(
name|producerId
argument_list|,
name|dest
argument_list|,
name|anonymous
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|setContext
argument_list|(
name|producerContext
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|flow
argument_list|(
name|flow
argument_list|)
expr_stmt|;
name|ProducerInfo
name|producerInfo
init|=
operator|new
name|ProducerInfo
argument_list|(
name|producerId
argument_list|)
decl_stmt|;
name|producerInfo
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|producerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|receiver
operator|.
name|setTarget
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|SecurityException
condition|)
block|{
name|receiver
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|UNAUTHORIZED_ACCESS
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INTERNAL_ERROR
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|exception
parameter_list|)
block|{
name|receiver
operator|.
name|setTarget
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|Symbol
operator|.
name|getSymbol
argument_list|(
name|exception
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ActiveMQDestination
name|createDestination
parameter_list|(
name|Object
name|terminus
parameter_list|)
throws|throws
name|AmqpProtocolException
block|{
if|if
condition|(
name|terminus
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|terminus
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
name|source
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
operator|)
name|terminus
decl_stmt|;
if|if
condition|(
name|source
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
operator|||
name|source
operator|.
name|getAddress
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AmqpProtocolException
argument_list|(
literal|"amqp:invalid-field"
argument_list|,
literal|"source address not set"
argument_list|)
throw|;
block|}
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|source
operator|.
name|getAddress
argument_list|()
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|terminus
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Target
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Target
name|target
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Target
operator|)
name|terminus
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
operator|||
name|target
operator|.
name|getAddress
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AmqpProtocolException
argument_list|(
literal|"amqp:invalid-field"
argument_list|,
literal|"target address not set"
argument_list|)
throw|;
block|}
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|target
operator|.
name|getAddress
argument_list|()
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|terminus
operator|instanceof
name|Coordinator
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected terminus type: "
operator|+
name|terminus
argument_list|)
throw|;
block|}
block|}
name|OutboundTransformer
name|outboundTransformer
init|=
operator|new
name|AutoOutboundTransformer
argument_list|(
name|ActiveMQJMSVendor
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
class|class
name|ConsumerContext
extends|extends
name|AmqpDeliveryListener
block|{
specifier|private
specifier|final
name|ConsumerId
name|consumerId
decl_stmt|;
specifier|private
specifier|final
name|Sender
name|sender
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|presettle
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|public
name|ConsumerInfo
name|info
decl_stmt|;
specifier|private
name|boolean
name|endOfBrowse
init|=
literal|false
decl_stmt|;
specifier|public
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|int
name|credit
decl_stmt|;
specifier|public
name|int
name|consumerPrefetch
decl_stmt|;
specifier|protected
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
name|dispatchedInTx
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ConsumerContext
parameter_list|(
name|ConsumerId
name|consumerId
parameter_list|,
name|Sender
name|sender
parameter_list|)
block|{
name|this
operator|.
name|consumerId
operator|=
name|consumerId
expr_stmt|;
name|this
operator|.
name|sender
operator|=
name|sender
expr_stmt|;
name|this
operator|.
name|presettle
operator|=
name|sender
operator|.
name|getRemoteSenderSettleMode
argument_list|()
operator|==
name|SenderSettleMode
operator|.
name|SETTLED
expr_stmt|;
block|}
name|long
name|nextTagId
init|=
literal|0
decl_stmt|;
name|HashSet
argument_list|<
name|byte
index|[]
argument_list|>
name|tagCache
init|=
operator|new
name|HashSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|nextTag
parameter_list|()
block|{
name|byte
index|[]
name|rc
decl_stmt|;
if|if
condition|(
name|tagCache
operator|!=
literal|null
operator|&&
operator|!
name|tagCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iterator
init|=
name|tagCache
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|rc
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|rc
operator|=
name|Long
operator|.
name|toHexString
argument_list|(
name|nextTagId
operator|++
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|rc
return|;
block|}
name|void
name|checkinTag
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
if|if
condition|(
name|tagCache
operator|.
name|size
argument_list|()
operator|<
literal|1024
condition|)
block|{
name|tagCache
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
name|AmqpSessionContext
name|session
init|=
operator|(
name|AmqpSessionContext
operator|)
name|sender
operator|.
name|getSession
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|consumers
operator|.
name|remove
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sendToActiveMQ
argument_list|(
operator|new
name|RemoveInfo
argument_list|(
name|consumerId
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
name|outbound
init|=
operator|new
name|LinkedList
argument_list|<
name|MessageDispatch
argument_list|>
argument_list|()
decl_stmt|;
comment|// called when the connection receives a JMS message from ActiveMQ
specifier|public
name|void
name|onMessageDispatch
parameter_list|(
name|MessageDispatch
name|md
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
comment|// Lock to prevent stepping on TX redelivery
synchronized|synchronized
init|(
name|outbound
init|)
block|{
name|outbound
operator|.
name|addLast
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|pumpOutbound
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
name|Buffer
name|currentBuffer
decl_stmt|;
name|Delivery
name|currentDelivery
decl_stmt|;
specifier|final
name|String
name|MESSAGE_FORMAT_KEY
init|=
name|outboundTransformer
operator|.
name|getPrefixVendor
argument_list|()
operator|+
literal|"MESSAGE_FORMAT"
decl_stmt|;
specifier|public
name|void
name|pumpOutbound
parameter_list|()
throws|throws
name|Exception
block|{
while|while
condition|(
operator|!
name|closed
condition|)
block|{
while|while
condition|(
name|currentBuffer
operator|!=
literal|null
condition|)
block|{
name|int
name|sent
init|=
name|sender
operator|.
name|send
argument_list|(
name|currentBuffer
operator|.
name|data
argument_list|,
name|currentBuffer
operator|.
name|offset
argument_list|,
name|currentBuffer
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|sent
operator|>
literal|0
condition|)
block|{
name|currentBuffer
operator|.
name|moveHead
argument_list|(
name|sent
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentBuffer
operator|.
name|length
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|presettle
condition|)
block|{
name|settle
argument_list|(
name|currentDelivery
argument_list|,
name|MessageAck
operator|.
name|INDIVIDUAL_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|advance
argument_list|()
expr_stmt|;
block|}
name|currentBuffer
operator|=
literal|null
expr_stmt|;
name|currentDelivery
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
return|return;
block|}
block|}
if|if
condition|(
name|outbound
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|MessageDispatch
name|md
init|=
name|outbound
operator|.
name|removeFirst
argument_list|()
decl_stmt|;
try|try
block|{
name|ActiveMQMessage
name|temp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|md
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Topics can dispatch the same Message to more than one consumer
comment|// so we must copy to prevent concurrent read / write to the same
comment|// message object.
if|if
condition|(
name|md
operator|.
name|getDestination
argument_list|()
operator|.
name|isTopic
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|md
operator|.
name|getMessage
argument_list|()
init|)
block|{
name|temp
operator|=
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|temp
operator|=
operator|(
name|ActiveMQMessage
operator|)
name|md
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|temp
operator|.
name|getProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|MESSAGE_FORMAT_KEY
argument_list|)
condition|)
block|{
name|temp
operator|.
name|setProperty
argument_list|(
name|MESSAGE_FORMAT_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ActiveMQMessage
name|jms
init|=
name|temp
decl_stmt|;
if|if
condition|(
name|jms
operator|==
literal|null
condition|)
block|{
comment|// It's the end of browse signal.
name|endOfBrowse
operator|=
literal|true
expr_stmt|;
name|drainCheck
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jms
operator|.
name|setRedeliveryCounter
argument_list|(
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
name|jms
operator|.
name|setReadOnlyBody
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|EncodedMessage
name|amqp
init|=
name|outboundTransformer
operator|.
name|transform
argument_list|(
name|jms
argument_list|)
decl_stmt|;
if|if
condition|(
name|amqp
operator|!=
literal|null
operator|&&
name|amqp
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|currentBuffer
operator|=
operator|new
name|Buffer
argument_list|(
name|amqp
operator|.
name|getArray
argument_list|()
argument_list|,
name|amqp
operator|.
name|getArrayOffset
argument_list|()
argument_list|,
name|amqp
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|presettle
condition|)
block|{
name|currentDelivery
operator|=
name|sender
operator|.
name|delivery
argument_list|(
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|byte
index|[]
name|tag
init|=
name|nextTag
argument_list|()
decl_stmt|;
name|currentDelivery
operator|=
name|sender
operator|.
name|delivery
argument_list|(
name|tag
argument_list|,
literal|0
argument_list|,
name|tag
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|currentDelivery
operator|.
name|setContext
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO: message could not be generated what now?
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|settle
parameter_list|(
specifier|final
name|Delivery
name|delivery
parameter_list|,
specifier|final
name|int
name|ackType
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|tag
init|=
name|delivery
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
literal|null
operator|&&
name|tag
operator|.
name|length
operator|>
literal|0
operator|&&
name|delivery
operator|.
name|remotelySettled
argument_list|()
condition|)
block|{
name|checkinTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ackType
operator|==
operator|-
literal|1
condition|)
block|{
comment|// we are going to settle, but redeliver.. we we won't yet ack
comment|// to ActiveMQ
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
name|onMessageDispatch
argument_list|(
operator|(
name|MessageDispatch
operator|)
name|delivery
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|delivery
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|MessageAck
name|ack
init|=
operator|new
name|MessageAck
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setConsumerId
argument_list|(
name|consumerId
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setFirstMessageId
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setLastMessageId
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setMessageCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setAckType
argument_list|(
operator|(
name|byte
operator|)
name|ackType
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setDestination
argument_list|(
name|md
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|DeliveryState
name|remoteState
init|=
name|delivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|remoteState
operator|!=
literal|null
operator|&&
name|remoteState
operator|instanceof
name|TransactionalState
condition|)
block|{
name|TransactionalState
name|s
init|=
operator|(
name|TransactionalState
operator|)
name|remoteState
decl_stmt|;
name|long
name|txid
init|=
name|toLong
argument_list|(
name|s
operator|.
name|getTxnId
argument_list|()
argument_list|)
decl_stmt|;
name|LocalTransactionId
name|localTxId
init|=
operator|new
name|LocalTransactionId
argument_list|(
name|connectionId
argument_list|,
name|txid
argument_list|)
decl_stmt|;
name|ack
operator|.
name|setTransactionId
argument_list|(
name|localTxId
argument_list|)
expr_stmt|;
comment|// Store the message sent in this TX we might need to
comment|// re-send on rollback
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|setTransactionId
argument_list|(
name|localTxId
argument_list|)
expr_stmt|;
name|dispatchedInTx
operator|.
name|addFirst
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending Ack to ActiveMQ: {}"
argument_list|,
name|ack
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|ack
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|delivery
operator|.
name|settle
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|drainCheck
parameter_list|()
block|{
comment|// If we are a browser.. lets not say we are drained until
comment|// we hit the end of browse message.
if|if
condition|(
name|info
operator|.
name|isBrowser
argument_list|()
operator|&&
operator|!
name|endOfBrowse
condition|)
return|return;
if|if
condition|(
name|outbound
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sender
operator|.
name|drained
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDelivery
parameter_list|(
name|Delivery
name|delivery
parameter_list|)
throws|throws
name|Exception
block|{
name|MessageDispatch
name|md
init|=
operator|(
name|MessageDispatch
operator|)
name|delivery
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|DeliveryState
name|state
init|=
name|delivery
operator|.
name|getRemoteState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|TransactionalState
condition|)
block|{
name|TransactionalState
name|txState
init|=
operator|(
name|TransactionalState
operator|)
name|state
decl_stmt|;
if|if
condition|(
name|txState
operator|.
name|getOutcome
argument_list|()
operator|instanceof
name|DeliveryState
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"onDelivery: TX delivery state = {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|state
operator|=
operator|(
name|DeliveryState
operator|)
name|txState
operator|.
name|getOutcome
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|Accepted
condition|)
block|{
if|if
condition|(
operator|!
name|delivery
operator|.
name|remotelySettled
argument_list|()
condition|)
block|{
name|delivery
operator|.
name|disposition
argument_list|(
operator|new
name|Accepted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|settle
argument_list|(
name|delivery
argument_list|,
name|MessageAck
operator|.
name|DELIVERED_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|state
operator|instanceof
name|Accepted
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"onDelivery: accepted state = {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|delivery
operator|.
name|remotelySettled
argument_list|()
condition|)
block|{
name|delivery
operator|.
name|disposition
argument_list|(
operator|new
name|Accepted
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|settle
argument_list|(
name|delivery
argument_list|,
name|MessageAck
operator|.
name|INDIVIDUAL_ACK_TYPE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Rejected
condition|)
block|{
comment|// re-deliver /w incremented delivery counter.
name|md
operator|.
name|setRedeliveryCounter
argument_list|(
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"onDelivery: Rejected state = {}, delivery count now {}"
argument_list|,
name|state
argument_list|,
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
name|settle
argument_list|(
name|delivery
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Released
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"onDelivery: Released state = {}"
argument_list|,
name|state
argument_list|)
expr_stmt|;
comment|// re-deliver&& don't increment the counter.
name|settle
argument_list|(
name|delivery
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|instanceof
name|Modified
condition|)
block|{
name|Modified
name|modified
init|=
operator|(
name|Modified
operator|)
name|state
decl_stmt|;
if|if
condition|(
name|modified
operator|.
name|getDeliveryFailed
argument_list|()
condition|)
block|{
comment|// increment delivery counter..
name|md
operator|.
name|setRedeliveryCounter
argument_list|(
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|trace
argument_list|(
literal|"onDelivery: Modified state = {}, delivery count now {}"
argument_list|,
name|state
argument_list|,
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
argument_list|)
expr_stmt|;
name|byte
name|ackType
init|=
operator|-
literal|1
decl_stmt|;
name|Boolean
name|undeliverableHere
init|=
name|modified
operator|.
name|getUndeliverableHere
argument_list|()
decl_stmt|;
if|if
condition|(
name|undeliverableHere
operator|!=
literal|null
operator|&&
name|undeliverableHere
condition|)
block|{
comment|// receiver does not want the message..
comment|// perhaps we should DLQ it?
name|ackType
operator|=
name|MessageAck
operator|.
name|POSION_ACK_TYPE
expr_stmt|;
block|}
name|settle
argument_list|(
name|delivery
argument_list|,
name|ackType
argument_list|)
expr_stmt|;
block|}
block|}
name|pumpOutbound
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|doCommit
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|dispatchedInTx
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MessageDispatch
name|md
init|=
name|dispatchedInTx
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|MessageAck
name|pendingTxAck
init|=
operator|new
name|MessageAck
argument_list|(
name|md
argument_list|,
name|MessageAck
operator|.
name|STANDARD_ACK_TYPE
argument_list|,
name|dispatchedInTx
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|pendingTxAck
operator|.
name|setTransactionId
argument_list|(
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|getTransactionId
argument_list|()
argument_list|)
expr_stmt|;
name|pendingTxAck
operator|.
name|setFirstMessageId
argument_list|(
name|dispatchedInTx
operator|.
name|getLast
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sending commit Ack to ActiveMQ: {}"
argument_list|,
name|pendingTxAck
argument_list|)
expr_stmt|;
name|dispatchedInTx
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|pendingTxAck
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|doRollback
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|outbound
init|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Rolling back {} messages for redelivery. "
argument_list|,
name|dispatchedInTx
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|MessageDispatch
name|md
range|:
name|dispatchedInTx
control|)
block|{
name|md
operator|.
name|setRedeliveryCounter
argument_list|(
name|md
operator|.
name|getRedeliveryCounter
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|md
operator|.
name|getMessage
argument_list|()
operator|.
name|setTransactionId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|outbound
operator|.
name|addFirst
argument_list|(
name|md
argument_list|)
expr_stmt|;
block|}
name|dispatchedInTx
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerContext
argument_list|>
name|subscriptionsByConsumerId
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ConsumerId
argument_list|,
name|ConsumerContext
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|void
name|onSenderOpen
parameter_list|(
specifier|final
name|Sender
name|sender
parameter_list|,
specifier|final
name|AmqpSessionContext
name|sessionContext
parameter_list|)
block|{
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
name|source
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
operator|)
name|sender
operator|.
name|getRemoteSource
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|ConsumerId
name|id
init|=
operator|new
name|ConsumerId
argument_list|(
name|sessionContext
operator|.
name|sessionId
argument_list|,
name|sessionContext
operator|.
name|nextConsumerId
operator|++
argument_list|)
decl_stmt|;
specifier|final
name|ConsumerContext
name|consumerContext
init|=
operator|new
name|ConsumerContext
argument_list|(
name|id
argument_list|,
name|sender
argument_list|)
decl_stmt|;
name|sender
operator|.
name|setContext
argument_list|(
name|consumerContext
argument_list|)
expr_stmt|;
name|String
name|selector
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|Map
name|filter
init|=
name|source
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|DescribedType
name|value
init|=
operator|(
name|DescribedType
operator|)
name|filter
operator|.
name|get
argument_list|(
name|JMS_SELECTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|selector
operator|=
name|value
operator|.
name|getDescribed
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Validate the Selector.
try|try
block|{
name|SelectorParser
operator|.
name|parse
argument_list|(
name|selector
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSelectorException
name|e
parameter_list|)
block|{
name|sender
operator|.
name|setSource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
name|consumerContext
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
name|ActiveMQDestination
name|dest
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
name|source
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
argument_list|()
expr_stmt|;
name|source
operator|.
name|setAddress
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|source
operator|.
name|setCapabilities
argument_list|(
name|DURABLE_SUBSCRIPTION_ENDED
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
comment|// Looks like durable sub removal.
name|RemoveSubscriptionInfo
name|rsi
init|=
operator|new
name|RemoveSubscriptionInfo
argument_list|()
decl_stmt|;
name|rsi
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setSubscriptionName
argument_list|(
name|sender
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsi
operator|.
name|setClientId
argument_list|(
name|connectionInfo
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|consumerContext
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|rsi
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|sender
operator|.
name|setSource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|SecurityException
condition|)
block|{
name|sender
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|UNAUTHORIZED_ACCESS
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INTERNAL_ERROR
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|contains
argument_list|(
name|source
operator|.
name|getCapabilities
argument_list|()
argument_list|,
name|DURABLE_SUBSCRIPTION_ENDED
argument_list|)
condition|)
block|{
name|consumerContext
operator|.
name|closed
operator|=
literal|true
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|source
operator|.
name|getDynamic
argument_list|()
condition|)
block|{
comment|// lets create a temp dest.
name|dest
operator|=
name|createTempQueue
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|Source
argument_list|()
expr_stmt|;
name|source
operator|.
name|setAddress
argument_list|(
name|dest
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
name|source
operator|.
name|setDynamic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dest
operator|=
name|createDestination
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
name|subscriptionsByConsumerId
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|consumerContext
argument_list|)
expr_stmt|;
name|ConsumerInfo
name|consumerInfo
init|=
operator|new
name|ConsumerInfo
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|consumerContext
operator|.
name|info
operator|=
name|consumerInfo
expr_stmt|;
name|consumerInfo
operator|.
name|setSelector
argument_list|(
name|selector
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setNoRangeAcks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|consumerInfo
operator|.
name|setDestination
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|consumerContext
operator|.
name|destination
operator|=
name|dest
expr_stmt|;
name|consumerInfo
operator|.
name|setPrefetchSize
argument_list|(
name|sender
operator|.
name|getRemoteCredit
argument_list|()
argument_list|)
expr_stmt|;
name|consumerContext
operator|.
name|credit
operator|=
name|sender
operator|.
name|getRemoteCredit
argument_list|()
expr_stmt|;
name|consumerContext
operator|.
name|consumerPrefetch
operator|=
name|consumerInfo
operator|.
name|getPrefetchSize
argument_list|()
expr_stmt|;
name|consumerInfo
operator|.
name|setDispatchAsync
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|getDistributionMode
argument_list|()
operator|==
name|COPY
operator|&&
name|dest
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|consumerInfo
operator|.
name|setBrowser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|TerminusDurability
operator|.
name|UNSETTLED_STATE
operator|.
name|equals
argument_list|(
name|source
operator|.
name|getDurable
argument_list|()
argument_list|)
operator|&&
name|dest
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|consumerInfo
operator|.
name|setSubscriptionName
argument_list|(
name|sender
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
name|filter
init|=
name|source
operator|.
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|DescribedType
name|value
init|=
operator|(
name|DescribedType
operator|)
name|filter
operator|.
name|get
argument_list|(
name|NO_LOCAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|consumerInfo
operator|.
name|setNoLocal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|sendToActiveMQ
argument_list|(
name|consumerInfo
argument_list|,
operator|new
name|ResponseHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponse
parameter_list|(
name|IAmqpProtocolConverter
name|converter
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|.
name|isException
argument_list|()
condition|)
block|{
name|sender
operator|.
name|setSource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
operator|(
operator|(
name|ExceptionResponse
operator|)
name|response
operator|)
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|exception
operator|instanceof
name|SecurityException
condition|)
block|{
name|sender
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|UNAUTHORIZED_ACCESS
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|exception
operator|instanceof
name|InvalidSelectorException
condition|)
block|{
name|sender
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INVALID_FIELD
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sender
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|AmqpError
operator|.
name|INTERNAL_ERROR
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subscriptionsByConsumerId
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sessionContext
operator|.
name|consumers
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|consumerContext
argument_list|)
expr_stmt|;
name|sender
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
name|pumpProtonToSocket
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmqpProtocolException
name|e
parameter_list|)
block|{
name|sender
operator|.
name|setSource
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sender
operator|.
name|setCondition
argument_list|(
operator|new
name|ErrorCondition
argument_list|(
name|Symbol
operator|.
name|getSymbol
argument_list|(
name|e
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|private
name|boolean
name|contains
parameter_list|(
name|Symbol
index|[]
name|haystack
parameter_list|,
name|Symbol
name|needle
parameter_list|)
block|{
if|if
condition|(
name|haystack
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Symbol
name|capability
range|:
name|haystack
control|)
block|{
if|if
condition|(
name|capability
operator|==
name|needle
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|ActiveMQDestination
name|createTempQueue
parameter_list|()
block|{
name|ActiveMQDestination
name|rc
decl_stmt|;
name|rc
operator|=
operator|new
name|ActiveMQTempQueue
argument_list|(
name|connectionId
argument_list|,
name|nextTempDestinationId
operator|++
argument_list|)
expr_stmt|;
name|DestinationInfo
name|info
init|=
operator|new
name|DestinationInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setConnectionId
argument_list|(
name|connectionId
argument_list|)
expr_stmt|;
name|info
operator|.
name|setOperationType
argument_list|(
name|DestinationInfo
operator|.
name|ADD_OPERATION_TYPE
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|sendToActiveMQ
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
comment|// //////////////////////////////////////////////////////////////////////////
comment|//
comment|// Implementation methods
comment|//
comment|// //////////////////////////////////////////////////////////////////////////
specifier|private
specifier|final
name|Object
name|commnadIdMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastCommandId
decl_stmt|;
name|int
name|generateCommandId
parameter_list|()
block|{
synchronized|synchronized
init|(
name|commnadIdMutex
init|)
block|{
return|return
name|lastCommandId
operator|++
return|;
block|}
block|}
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
name|resposeHandlers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|ResponseHandler
argument_list|>
argument_list|()
decl_stmt|;
name|void
name|sendToActiveMQ
parameter_list|(
name|Command
name|command
parameter_list|,
name|ResponseHandler
name|handler
parameter_list|)
block|{
name|command
operator|.
name|setCommandId
argument_list|(
name|generateCommandId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|handler
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|setResponseRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|resposeHandlers
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|command
operator|.
name|getCommandId
argument_list|()
argument_list|)
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
name|amqpTransport
operator|.
name|sendToActiveMQ
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
name|void
name|handleException
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception detail"
argument_list|,
name|exception
argument_list|)
expr_stmt|;
try|try
block|{
name|amqpTransport
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to stop AMQP Transport "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|ErrorCondition
name|createErrorCondition
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|createErrorCondition
argument_list|(
name|name
argument_list|,
literal|""
argument_list|)
return|;
block|}
name|ErrorCondition
name|createErrorCondition
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|ErrorCondition
name|condition
init|=
operator|new
name|ErrorCondition
argument_list|()
decl_stmt|;
name|condition
operator|.
name|setCondition
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|condition
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
return|return
name|condition
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrefetch
parameter_list|(
name|int
name|prefetch
parameter_list|)
block|{
name|this
operator|.
name|prefetch
operator|=
name|prefetch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProducerCredit
parameter_list|(
name|int
name|producerCredit
parameter_list|)
block|{
name|this
operator|.
name|producerCredit
operator|=
name|producerCredit
expr_stmt|;
block|}
block|}
end_class

end_unit

