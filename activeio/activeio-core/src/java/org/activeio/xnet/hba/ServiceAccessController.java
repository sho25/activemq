begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|hba
package|;
end_package

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|ServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|xnet
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet4Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_class
specifier|public
class|class
name|ServiceAccessController
implements|implements
name|ServerService
block|{
specifier|private
specifier|final
name|ServerService
name|next
decl_stmt|;
specifier|private
name|IPAddressPermission
index|[]
name|allowHosts
decl_stmt|;
specifier|public
name|ServiceAccessController
parameter_list|(
name|ServerService
name|next
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
block|}
specifier|public
name|ServiceAccessController
parameter_list|(
name|String
name|name
parameter_list|,
name|ServerService
name|next
parameter_list|,
name|IPAddressPermission
index|[]
name|ipAddressMasks
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|this
operator|.
name|allowHosts
operator|=
name|ipAddressMasks
expr_stmt|;
block|}
specifier|public
name|void
name|service
parameter_list|(
name|Socket
name|socket
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|IOException
block|{
comment|// Check authorization
name|checkHostsAuthorization
argument_list|(
name|socket
operator|.
name|getInetAddress
argument_list|()
argument_list|,
name|socket
operator|.
name|getLocalAddress
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|.
name|service
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IPAddressPermission
index|[]
name|getAllowHosts
parameter_list|()
block|{
return|return
name|allowHosts
return|;
block|}
specifier|public
name|void
name|setAllowHosts
parameter_list|(
name|IPAddressPermission
index|[]
name|ipAddressMasks
parameter_list|)
block|{
name|this
operator|.
name|allowHosts
operator|=
name|ipAddressMasks
expr_stmt|;
block|}
specifier|public
name|void
name|checkHostsAuthorization
parameter_list|(
name|InetAddress
name|clientAddress
parameter_list|,
name|InetAddress
name|serverAddress
parameter_list|)
throws|throws
name|SecurityException
block|{
comment|// Check the client ip against the server ip. Hosts are
comment|// allowed to access themselves, so if these ips
comment|// match, the following for loop will be skipped.
if|if
condition|(
name|clientAddress
operator|.
name|equals
argument_list|(
name|serverAddress
argument_list|)
condition|)
block|{
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allowHosts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|allowHosts
index|[
name|i
index|]
operator|.
name|implies
argument_list|(
name|clientAddress
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Host "
operator|+
name|clientAddress
operator|.
name|getHostAddress
argument_list|()
operator|+
literal|" is not authorized to access this service."
argument_list|)
throw|;
block|}
specifier|private
name|void
name|parseAdminIPs
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LinkedList
name|ipAddressMasksList
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
try|try
block|{
name|InetAddress
index|[]
name|localIps
init|=
name|InetAddress
operator|.
name|getAllByName
argument_list|(
literal|"localhost"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|localIps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|localIps
index|[
name|i
index|]
operator|instanceof
name|Inet4Address
condition|)
block|{
name|ipAddressMasksList
operator|.
name|add
argument_list|(
operator|new
name|ExactIPAddressPermission
argument_list|(
name|localIps
index|[
name|i
index|]
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ipAddressMasksList
operator|.
name|add
argument_list|(
operator|new
name|ExactIPv6AddressPermission
argument_list|(
name|localIps
index|[
name|i
index|]
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
literal|"Could not get localhost inet address"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|String
name|ipString
init|=
name|props
operator|.
name|getProperty
argument_list|(
literal|"only_from"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ipString
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|ipString
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|mask
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|ipAddressMasksList
operator|.
name|add
argument_list|(
name|IPAddressPermissionFactory
operator|.
name|getIPAddressMask
argument_list|(
name|mask
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|allowHosts
operator|=
operator|(
name|IPAddressPermission
index|[]
operator|)
name|ipAddressMasksList
operator|.
name|toArray
argument_list|(
operator|new
name|IPAddressPermission
index|[
name|ipAddressMasksList
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|Exception
block|{
name|parseAdminIPs
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|next
operator|.
name|init
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|ServiceException
block|{
name|next
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|ServiceException
block|{
name|next
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|next
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getIP
parameter_list|()
block|{
return|return
name|next
operator|.
name|getIP
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|next
operator|.
name|getPort
argument_list|()
return|;
block|}
block|}
end_class

end_unit

