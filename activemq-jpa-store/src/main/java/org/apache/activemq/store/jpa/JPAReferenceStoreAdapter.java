begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jpa
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|EntityManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|persistence
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|ReferenceStoreAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicReferenceStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IOExceptionSupport
import|;
end_import

begin_comment
comment|/**  * An implementation of {@link ReferenceStoreAdapter} that uses JPA to  * store it's message references.  *   * @org.apache.xbean.XBean element="jpaReferenceStoreAdapter"  *   * @version $Revision: 1.17 $  */
end_comment

begin_class
specifier|public
class|class
name|JPAReferenceStoreAdapter
extends|extends
name|JPAPersistenceAdapter
implements|implements
name|ReferenceStoreAdapter
block|{
annotation|@
name|Override
specifier|public
name|MessageStore
name|createQueueMessageStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Use createQueueReferenceStore instead."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|TopicMessageStore
name|createTopicMessageStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Use createTopicReferenceStore instead."
argument_list|)
throw|;
block|}
specifier|public
name|ReferenceStore
name|createQueueReferenceStore
parameter_list|(
name|ActiveMQQueue
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|JPAReferenceStore
name|rc
init|=
operator|new
name|JPAReferenceStore
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|TopicReferenceStore
name|createTopicReferenceStore
parameter_list|(
name|ActiveMQTopic
name|destination
parameter_list|)
throws|throws
name|IOException
block|{
name|JPATopicReferenceStore
name|rc
init|=
operator|new
name|JPATopicReferenceStore
argument_list|(
name|this
argument_list|,
name|destination
argument_list|)
decl_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|void
name|deleteAllMessages
parameter_list|()
throws|throws
name|IOException
block|{
name|EntityManager
name|manager
init|=
name|beginEntityManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"delete from StoredMessageReference m"
argument_list|)
decl_stmt|;
name|query
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
name|query
operator|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"delete from StoredSubscription ss"
argument_list|)
expr_stmt|;
name|query
operator|.
name|executeUpdate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|rollbackEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|commitEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|getDestinations
parameter_list|()
block|{
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
name|rc
init|=
operator|new
name|HashSet
argument_list|<
name|ActiveMQDestination
argument_list|>
argument_list|()
decl_stmt|;
name|EntityManager
name|manager
init|=
name|beginEntityManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"select distinct m.destination from StoredMessageReference m"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|dest
range|:
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|query
operator|.
name|getResultList
argument_list|()
control|)
block|{
name|rc
operator|.
name|add
argument_list|(
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|dest
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|rollbackEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|commitEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|long
name|getLastMessageBrokerSequenceId
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|rc
init|=
literal|0
decl_stmt|;
name|EntityManager
name|manager
init|=
name|beginEntityManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"select max(m.id) from StoredMessageReference m"
argument_list|)
decl_stmt|;
name|Long
name|t
init|=
operator|(
name|Long
operator|)
name|query
operator|.
name|getSingleResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|rc
operator|=
name|t
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|rollbackEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|commitEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getReferenceFileIdsInUse
parameter_list|()
throws|throws
name|IOException
block|{
name|HashSet
argument_list|<
name|Integer
argument_list|>
name|rc
init|=
literal|null
decl_stmt|;
name|EntityManager
name|manager
init|=
name|beginEntityManager
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|Query
name|query
init|=
name|manager
operator|.
name|createQuery
argument_list|(
literal|"select distinct m.fileId from StoredMessageReference m"
argument_list|)
decl_stmt|;
name|rc
operator|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|query
operator|.
name|getResultList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|rollbackEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
throw|throw
name|IOExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|commitEntityManager
argument_list|(
literal|null
argument_list|,
name|manager
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
comment|/**      * @return      * @see org.apache.activemq.store.ReferenceStoreAdapter#isStoreValid()      */
specifier|public
name|boolean
name|isStoreValid
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * @see org.apache.activemq.store.ReferenceStoreAdapter#clearMessages()      */
specifier|public
name|void
name|clearMessages
parameter_list|()
block|{             }
comment|/**      * @see org.apache.activemq.store.ReferenceStoreAdapter#recoverState()      */
specifier|public
name|void
name|recoverState
parameter_list|()
block|{             }
block|}
end_class

end_unit

