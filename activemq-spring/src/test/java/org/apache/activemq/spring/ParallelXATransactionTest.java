begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|JmsTemplate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jms
operator|.
name|core
operator|.
name|MessageCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|annotation
operator|.
name|DirtiesContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|ContextConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|junit4
operator|.
name|SpringJUnit4ClassRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|test
operator|.
name|context
operator|.
name|transaction
operator|.
name|TransactionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|PlatformTransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|TransactionStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionCallbackWithoutResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|transaction
operator|.
name|support
operator|.
name|TransactionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|SpringJUnit4ClassRunner
operator|.
name|class
argument_list|)
annotation|@
name|ContextConfiguration
argument_list|(
name|locations
operator|=
block|{
literal|"classpath:spring/xa.xml"
block|}
argument_list|)
annotation|@
name|TransactionConfiguration
argument_list|(
name|transactionManager
operator|=
literal|"transactionManager"
argument_list|,
name|defaultRollback
operator|=
literal|false
argument_list|)
specifier|public
class|class
name|ParallelXATransactionTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ParallelXATransactionTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"transactionManager"
argument_list|)
name|PlatformTransactionManager
name|txManager
init|=
literal|null
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"transactionManager2"
argument_list|)
name|PlatformTransactionManager
name|txManager2
init|=
literal|null
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"jmsTemplate"
argument_list|)
name|JmsTemplate
name|jmsTemplate
init|=
literal|null
decl_stmt|;
annotation|@
name|Resource
argument_list|(
name|name
operator|=
literal|"jmsTemplate2"
argument_list|)
name|JmsTemplate
name|jmsTemplate2
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NB_MSG
init|=
literal|100
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BODY
init|=
name|Arrays
operator|.
name|toString
argument_list|(
operator|new
name|int
index|[
literal|1024
index|]
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|QUEUES
init|=
block|{
literal|"TEST.queue1"
block|,
literal|"TEST.queue2"
block|,
literal|"TEST.queue3"
block|,
literal|"TEST.queue4"
block|,
literal|"TEST.queue5"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|AUDIT
init|=
literal|"TEST.audit"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SLEEP
init|=
literal|500
decl_stmt|;
annotation|@
name|Test
annotation|@
name|DirtiesContext
specifier|public
name|void
name|testParalellXaTx
parameter_list|()
throws|throws
name|Exception
block|{
class|class
name|ProducerThread
extends|extends
name|Thread
block|{
name|PlatformTransactionManager
name|txManager
decl_stmt|;
name|JmsTemplate
name|jmsTemplate
decl_stmt|;
name|Exception
name|lastException
decl_stmt|;
specifier|public
name|ProducerThread
parameter_list|(
name|JmsTemplate
name|jmsTemplate
parameter_list|,
name|PlatformTransactionManager
name|txManager
parameter_list|)
block|{
name|this
operator|.
name|jmsTemplate
operator|=
name|jmsTemplate
expr_stmt|;
name|this
operator|.
name|txManager
operator|=
name|txManager
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
literal|10
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|SLEEP
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|TransactionTemplate
name|tt
init|=
operator|new
name|TransactionTemplate
argument_list|(
name|this
operator|.
name|txManager
argument_list|)
decl_stmt|;
try|try
block|{
name|tt
operator|.
name|execute
argument_list|(
operator|new
name|TransactionCallbackWithoutResult
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doInTransactionWithoutResult
parameter_list|(
name|TransactionStatus
name|status
parameter_list|)
block|{
try|try
block|{
for|for
control|(
specifier|final
name|String
name|queue
range|:
name|QUEUES
control|)
block|{
name|jmsTemplate
operator|.
name|send
argument_list|(
name|queue
operator|+
literal|","
operator|+
name|AUDIT
argument_list|,
operator|new
name|MessageCreator
argument_list|()
block|{
specifier|public
name|Message
name|createMessage
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"P1: "
operator|+
name|queue
operator|+
literal|" - "
operator|+
name|BODY
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
call|(
name|long
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|SLEEP
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"P1: Send msg to "
operator|+
name|queue
operator|+
literal|","
operator|+
name|AUDIT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception occurred "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|e
parameter_list|)
block|{
name|lastException
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|Exception
name|getLastException
parameter_list|()
block|{
return|return
name|lastException
return|;
block|}
block|}
name|ProducerThread
name|t1
init|=
operator|new
name|ProducerThread
argument_list|(
name|jmsTemplate
argument_list|,
name|txManager
argument_list|)
decl_stmt|;
name|ProducerThread
name|t2
init|=
operator|new
name|ProducerThread
argument_list|(
name|jmsTemplate2
argument_list|,
name|txManager2
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|t1
operator|.
name|getLastException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception occurred "
operator|+
name|t1
operator|.
name|getLastException
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t2
operator|.
name|getLastException
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Exception occurred "
operator|+
name|t2
operator|.
name|getLastException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

