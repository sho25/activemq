begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|bugs
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ServerSessionPool
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicPublisher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TopicSubscriber
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AMQ3961Test
block|{
specifier|private
specifier|static
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|static
name|String
name|BROKER_ADDRESS
init|=
literal|"tcp://localhost:0"
decl_stmt|;
specifier|private
name|ActiveMQConnectionFactory
name|connectionFactory
decl_stmt|;
specifier|private
name|String
name|connectionUri
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connectionUri
operator|=
name|brokerService
operator|.
name|addConnector
argument_list|(
name|BROKER_ADDRESS
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|connectionUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|brokerService
operator|.
name|stop
argument_list|()
expr_stmt|;
name|brokerService
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
specifier|public
class|class
name|TestServerSessionPool
implements|implements
name|ServerSessionPool
block|{
specifier|private
specifier|final
name|TopicConnection
name|connection
decl_stmt|;
specifier|public
name|TestServerSessionPool
parameter_list|(
specifier|final
name|TopicConnection
name|connection
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ServerSession
name|getServerSession
parameter_list|()
throws|throws
name|JMSException
block|{
specifier|final
name|TopicSession
name|topicSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
return|return
operator|new
name|TestServerSession
argument_list|(
name|topicSession
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|TestServerSession
implements|implements
name|ServerSession
implements|,
name|MessageListener
block|{
specifier|private
specifier|final
name|TopicSession
name|session
decl_stmt|;
specifier|public
name|TestServerSession
parameter_list|(
specifier|final
name|TopicSession
name|session
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|session
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Session
name|getSession
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|session
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
block|{
name|session
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
synchronized|synchronized
init|(
name|processedSessions
init|)
block|{
name|processedSessions
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|16
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TestServerSession
argument_list|>
name|processedSessions
init|=
operator|new
name|LinkedList
argument_list|<
name|TestServerSession
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TestServerSession
argument_list|>
name|committedSessions
init|=
operator|new
name|LinkedList
argument_list|<
name|TestServerSession
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPrefetchInDurableSubscription
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TestTopic"
argument_list|)
decl_stmt|;
specifier|final
name|TopicConnection
name|initialSubConnection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|initialSubConnection
operator|.
name|setClientID
argument_list|(
literal|"TestClient"
argument_list|)
expr_stmt|;
name|initialSubConnection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|TopicSession
name|initialSubSession
init|=
name|initialSubConnection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|CLIENT_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|TopicSubscriber
name|initialSubscriber
init|=
name|initialSubSession
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
literal|"TestSubscriber"
argument_list|)
decl_stmt|;
name|initialSubscriber
operator|.
name|close
argument_list|()
expr_stmt|;
name|initialSubSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|initialSubConnection
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|TopicConnection
name|publisherConnection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|publisherConnection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|TopicSession
name|publisherSession
init|=
name|publisherConnection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
specifier|final
name|TopicPublisher
name|publisher
init|=
name|publisherSession
operator|.
name|createPublisher
argument_list|(
name|topic
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Message
name|msg
init|=
name|publisherSession
operator|.
name|createTextMessage
argument_list|(
literal|"Message #"
operator|+
name|i
argument_list|)
decl_stmt|;
name|publisher
operator|.
name|publish
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|publisher
operator|.
name|close
argument_list|()
expr_stmt|;
name|publisherSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|publisherConnection
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|TopicConnection
name|connection
init|=
name|connectionFactory
operator|.
name|createTopicConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|setClientID
argument_list|(
literal|"TestClient"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|TestServerSessionPool
name|pool
init|=
operator|new
name|TestServerSessionPool
argument_list|(
name|connection
argument_list|)
decl_stmt|;
specifier|final
name|ConnectionConsumer
name|connectionConsumer
init|=
name|connection
operator|.
name|createDurableConnectionConsumer
argument_list|(
name|topic
argument_list|,
literal|"TestSubscriber"
argument_list|,
literal|null
argument_list|,
name|pool
argument_list|,
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|lastMsgCount
init|=
literal|0
decl_stmt|;
name|int
name|msgCount
init|=
literal|0
decl_stmt|;
do|do
block|{
name|lastMsgCount
operator|=
name|msgCount
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200L
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|processedSessions
init|)
block|{
name|msgCount
operator|=
name|processedSessions
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|lastMsgCount
operator|<
name|msgCount
condition|)
do|;
if|if
condition|(
name|lastMsgCount
operator|==
literal|0
condition|)
block|{
break|break;
block|}
specifier|final
name|LinkedList
argument_list|<
name|TestServerSession
argument_list|>
name|collected
decl_stmt|;
synchronized|synchronized
init|(
name|processedSessions
init|)
block|{
name|collected
operator|=
operator|new
name|LinkedList
argument_list|<
name|TestServerSession
argument_list|>
argument_list|(
name|processedSessions
argument_list|)
expr_stmt|;
name|processedSessions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Iterator
argument_list|<
name|TestServerSession
argument_list|>
name|sessions
init|=
name|collected
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sessions
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|TestServerSession
name|session
init|=
name|sessions
operator|.
name|next
argument_list|()
decl_stmt|;
name|committedSessions
operator|.
name|add
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|getSession
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
name|session
operator|.
name|getSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|connectionConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|TopicSession
name|finalSession
init|=
name|connection
operator|.
name|createTopicSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|finalSession
operator|.
name|unsubscribe
argument_list|(
literal|"TestSubscriber"
argument_list|)
expr_stmt|;
name|finalSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|MESSAGE_COUNT
argument_list|,
name|committedSessions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

