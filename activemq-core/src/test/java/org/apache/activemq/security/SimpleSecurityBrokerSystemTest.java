begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|jaas
operator|.
name|GroupPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
operator|.
name|DestinationMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|JaasAuthenticationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SimpleAuthenticationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SimpleAuthorizationBroker
import|;
end_import

begin_comment
comment|/**  * Tests that the broker allows/fails access to destinations based on the  * security policy installed on the broker.  *  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|SimpleSecurityBrokerSystemTest
extends|extends
name|JmsTestSupport
block|{
specifier|static
specifier|final
name|GroupPrincipal
name|guests
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"guests"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|users
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"users"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|GroupPrincipal
name|admins
init|=
operator|new
name|GroupPrincipal
argument_list|(
literal|"admins"
argument_list|)
decl_stmt|;
specifier|public
name|ActiveMQDestination
name|destination
decl_stmt|;
specifier|public
name|SecurityFactory
name|authorizationFactory
decl_stmt|;
specifier|public
name|SecurityFactory
name|authenticationFactory
decl_stmt|;
interface|interface
name|SecurityFactory
block|{
specifier|public
name|Broker
name|create
parameter_list|(
name|Broker
name|broker
parameter_list|)
function_decl|;
block|}
class|class
name|SimpleAuthorizationFactory
implements|implements
name|SecurityFactory
block|{
specifier|public
name|Broker
name|create
parameter_list|(
name|Broker
name|broker
parameter_list|)
block|{
name|DestinationMap
name|readAccess
init|=
operator|new
name|DestinationMap
argument_list|()
decl_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|admins
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|guests
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|admins
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|guests
argument_list|)
expr_stmt|;
name|DestinationMap
name|writeAccess
init|=
operator|new
name|DestinationMap
argument_list|()
decl_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|admins
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|guests
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|admins
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.>"
argument_list|)
argument_list|,
name|guests
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|guests
argument_list|)
expr_stmt|;
name|readAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|guests
argument_list|)
expr_stmt|;
name|writeAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"ActiveMQ.Advisory.>"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|DestinationMap
name|adminAccess
init|=
operator|new
name|DestinationMap
argument_list|()
decl_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|admins
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|users
argument_list|)
expr_stmt|;
name|adminAccess
operator|.
name|put
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|">"
argument_list|)
argument_list|,
name|guests
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleAuthorizationBroker
argument_list|(
name|broker
argument_list|,
name|writeAccess
argument_list|,
name|readAccess
argument_list|,
name|adminAccess
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SimpleAuthorizationBroker"
return|;
block|}
block|}
class|class
name|SimpleAuthenticationFactory
implements|implements
name|SecurityFactory
block|{
specifier|public
name|Broker
name|create
parameter_list|(
name|Broker
name|broker
parameter_list|)
block|{
name|HashMap
name|u
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|u
operator|.
name|put
argument_list|(
literal|"guest"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
name|HashMap
name|groups
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
literal|"system"
argument_list|,
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|admins
block|,
name|users
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|users
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
literal|"guest"
argument_list|,
operator|new
name|HashSet
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|guests
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleAuthenticationBroker
argument_list|(
name|broker
argument_list|,
name|u
argument_list|,
name|groups
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SimpleAuthenticationBroker"
return|;
block|}
block|}
static|static
block|{
name|String
name|path
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.security.auth.login.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|URL
name|resource
init|=
name|SimpleSecurityBrokerSystemTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"login.config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|resource
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.auth.login.config"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Path to login config: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
class|class
name|JaasAuthenticationFactory
implements|implements
name|SecurityFactory
block|{
specifier|public
name|Broker
name|create
parameter_list|(
name|Broker
name|broker
parameter_list|)
block|{
return|return
operator|new
name|JaasAuthenticationBroker
argument_list|(
name|broker
argument_list|,
literal|"activemq-test-domain"
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"JassAuthenticationBroker"
return|;
block|}
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
return|return
name|suite
argument_list|(
name|SimpleSecurityBrokerSystemTest
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|suite
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombos
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"authorizationFactory"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|SimpleAuthorizationFactory
argument_list|()
block|,         }
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"authenticationFactory"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|SimpleAuthenticationFactory
argument_list|()
block|,
operator|new
name|JaasAuthenticationFactory
argument_list|()
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|broker
init|=
operator|new
name|BrokerService
argument_list|()
block|{
specifier|protected
name|Broker
name|addInterceptors
parameter_list|(
name|Broker
name|broker
parameter_list|)
throws|throws
name|IOException
block|{
name|broker
operator|=
name|super
operator|.
name|addInterceptors
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|=
name|authorizationFactory
operator|.
name|create
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|broker
operator|=
name|authenticationFactory
operator|.
name|create
argument_list|(
name|broker
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
block|}
decl_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|initCombosForTestUserReceiveFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserReceiveFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestInvalidAuthentication
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInvalidAuthentication
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
comment|// No user id
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
try|try
block|{
comment|// Bad password
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"user"
argument_list|,
literal|"krap"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
try|try
block|{
comment|// Bad userid
name|Connection
name|c
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"userkrap"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{         }
block|}
specifier|public
name|void
name|initCombosForTestUserReceiveSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserReceiveSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestReceiveSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestReceiveSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestReceiveFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestReceiveFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doReceive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestUserSendSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserSendSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestUserSendFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"user"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUserSendFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestSendFails
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST"
argument_list|)
block|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"USERS.FOO"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestSendFails
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initCombosForTestGuestSendSucceeds
parameter_list|()
block|{
name|addCombinationValues
argument_list|(
literal|"userName"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"guest"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"password"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"password"
block|}
argument_list|)
expr_stmt|;
name|addCombinationValues
argument_list|(
literal|"destination"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|ActiveMQQueue
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"GUEST.BAR"
argument_list|)
block|,         }
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGuestSendSucceeds
parameter_list|()
throws|throws
name|JMSException
block|{
name|doSend
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws JMSException      */
specifier|public
name|void
name|doSend
parameter_list|(
name|boolean
name|fail
parameter_list|)
throws|throws
name|JMSException
block|{
name|Connection
name|adminConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|adminConnection
argument_list|)
expr_stmt|;
name|adminConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|adminSession
init|=
name|adminConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|adminSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
try|try
block|{
name|sendMessages
argument_list|(
name|session
argument_list|,
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
comment|// If test is expected to fail, the cause must only be a SecurityException
comment|// otherwise rethrow the exception
if|if
condition|(
operator|!
name|fail
operator|||
operator|!
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SecurityException
operator|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|fail
condition|)
name|assertNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
else|else
block|{
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|m
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveNoWait
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @throws JMSException      */
specifier|public
name|void
name|doReceive
parameter_list|(
name|boolean
name|fail
parameter_list|)
throws|throws
name|JMSException
block|{
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|consumer
operator|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
name|fail
argument_list|(
literal|"Expected failure due to security constraint."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
if|if
condition|(
name|fail
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SecurityException
condition|)
return|return;
throw|throw
name|e
throw|;
block|}
name|Connection
name|adminConnection
init|=
name|factory
operator|.
name|createConnection
argument_list|(
literal|"system"
argument_list|,
literal|"manager"
argument_list|)
decl_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|adminConnection
argument_list|)
expr_stmt|;
name|Session
name|adminSession
init|=
name|adminConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|sendMessages
argument_list|(
name|adminSession
argument_list|,
name|destination
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Message
name|m
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|m
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|consumer
operator|.
name|receiveNoWait
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

