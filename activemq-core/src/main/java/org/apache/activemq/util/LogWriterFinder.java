begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|LogWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportLoggerView
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Class used to find a LogWriter implementation, and returning  * a LogWriter object, taking as argument the name of a log writer.  * The mapping between the log writer names and the classes  * implementing LogWriter is specified by the files in the  * resources/META-INF/services/org/apache/activemq/transport/logwriters  * directory.  *   * @author David Martin Clavo david(dot)martin(dot)clavo(at)gmail.com  * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|LogWriterFinder
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TransportLoggerView
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
name|classMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|()
decl_stmt|;
comment|/**      * Builds a LogWriterFinder that will look for the mappings between      * LogWriter names and classes in the directory "path".      * @param path The directory where the files that map log writer names to      * LogWriter classes are.       */
specifier|public
name|LogWriterFinder
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
comment|/**      * Returns a LogWriter object, given a log writer name (for example "default", or "custom").      * Uses a ConcurrentHashMap to cache the Class objects that have already been loaded.      * @param logWriterName a log writer name (for example "default", or "custom").      * @return a LogWriter object to be used by the TransportLogger class.      * @throws IllegalAccessException      * @throws InstantiationException      * @throws IOException      * @throws ClassNotFoundException      */
specifier|public
name|LogWriter
name|newInstance
parameter_list|(
name|String
name|logWriterName
parameter_list|)
throws|throws
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|Class
name|clazz
init|=
operator|(
name|Class
operator|)
name|classMap
operator|.
name|get
argument_list|(
name|logWriterName
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|clazz
operator|=
name|newInstance
argument_list|(
name|doFindLogWriterProperties
argument_list|(
name|logWriterName
argument_list|)
argument_list|)
expr_stmt|;
name|classMap
operator|.
name|put
argument_list|(
name|logWriterName
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|LogWriter
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
comment|/**      * Loads and returns a class given a Properties object with a "class" property.      * @param properties a Properties object with a "class" property.      * @return a Class object.      * @throws ClassNotFoundException      * @throws IOException      */
specifier|private
name|Class
name|newInstance
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
name|String
name|className
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Expected property is missing: "
operator|+
literal|"class"
argument_list|)
throw|;
block|}
name|Class
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|clazz
operator|=
name|LogWriterFinder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
comment|/**      * Given a log writer name, returns a Properties object with a "class" property      * whose value is a String with the name of the class to be loaded.      * @param logWriterName a log writer name.      * @return a Properties object with a "class" property      * @throws IOException      */
specifier|protected
name|Properties
name|doFindLogWriterProperties
parameter_list|(
name|String
name|logWriterName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|path
operator|+
name|logWriterName
decl_stmt|;
comment|// lets try the thread context class loader first
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
name|classLoader
operator|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
name|InputStream
name|in
init|=
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|in
operator|=
name|LogWriterFinder
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not find log writer for resource: "
operator|+
name|uri
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not find log writer for resource: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
comment|// lets load the file
name|BufferedInputStream
name|reader
init|=
literal|null
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
block|}
block|}
end_class

end_unit

