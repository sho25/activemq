begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|JmsMultipleBrokersTestSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|DurableSubscriberWithNetworkRestartTest
extends|extends
name|JmsMultipleBrokersTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|DurableSubscriberWithNetworkRestartTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HUB
init|=
literal|"HubBroker"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SPOKE
init|=
literal|"SpokeBroker"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10
decl_stmt|;
specifier|public
name|boolean
name|dynamicOnly
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|testSendOnAReceiveOnBWithTransportDisconnectDynamicOnly
parameter_list|()
throws|throws
name|Exception
block|{
name|dynamicOnly
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|testSendOnAReceiveOnBWithTransportDisconnect
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|dynamicOnly
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSendOnAReceiveOnBWithTransportDisconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|bridge
argument_list|(
name|SPOKE
argument_list|,
name|HUB
argument_list|)
expr_stmt|;
name|startAllBrokers
argument_list|()
expr_stmt|;
name|verifyDuplexBridgeMbean
argument_list|()
expr_stmt|;
comment|// Setup connection
name|URI
name|hubURI
init|=
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
operator|.
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectURI
argument_list|()
decl_stmt|;
name|URI
name|spokeURI
init|=
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
operator|.
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectURI
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|facHub
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|hubURI
argument_list|)
decl_stmt|;
name|ActiveMQConnectionFactory
name|facSpoke
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|spokeURI
argument_list|)
decl_stmt|;
name|Connection
name|conHub
init|=
name|facHub
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|Connection
name|conSpoke
init|=
name|facSpoke
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|conHub
operator|.
name|setClientID
argument_list|(
literal|"clientHUB"
argument_list|)
expr_stmt|;
name|conSpoke
operator|.
name|setClientID
argument_list|(
literal|"clientSPOKE"
argument_list|)
expr_stmt|;
name|conHub
operator|.
name|start
argument_list|()
expr_stmt|;
name|conSpoke
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|sesHub
init|=
name|conHub
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Session
name|sesSpoke
init|=
name|conSpoke
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
name|String
name|consumerName
init|=
literal|"consumerName"
decl_stmt|;
comment|// Setup consumers
name|MessageConsumer
name|remoteConsumer
init|=
name|sesHub
operator|.
name|createDurableSubscriber
argument_list|(
name|topic
argument_list|,
name|consumerName
argument_list|)
decl_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|remoteConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Setup producer
name|MessageProducer
name|localProducer
init|=
name|sesSpoke
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|localProducer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
specifier|final
name|String
name|payloadString
init|=
operator|new
name|String
argument_list|(
operator|new
name|byte
index|[
literal|10
operator|*
literal|1024
index|]
argument_list|)
decl_stmt|;
comment|// Send messages
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|test
init|=
name|sesSpoke
operator|.
name|createTextMessage
argument_list|(
literal|"test-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|test
operator|.
name|setStringProperty
argument_list|(
literal|"payload"
argument_list|,
name|payloadString
argument_list|)
expr_stmt|;
name|localProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
block|}
name|localProducer
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|String
name|options
init|=
literal|"?persistent=true&useJmx=true&deleteAllMessagesOnStartup=false"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
operator|.
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/"
operator|+
name|SPOKE
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|bridge
argument_list|(
name|SPOKE
argument_list|,
name|HUB
argument_list|)
expr_stmt|;
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"restarted spoke..:"
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"got mbeans on restart"
argument_list|,
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|countMbeans
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
operator|.
name|broker
argument_list|,
literal|"networkBridge"
argument_list|,
literal|20000
argument_list|)
operator|==
operator|(
name|dynamicOnly
condition|?
literal|1
else|:
literal|2
operator|)
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyDuplexBridgeMbean
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countMbeans
argument_list|(
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
operator|.
name|broker
argument_list|,
literal|"networkBridge"
argument_list|,
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|countMbeans
parameter_list|(
name|BrokerService
name|broker
parameter_list|,
name|String
name|type
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|expiryTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|contains
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|type
operator|=
name|type
operator|+
literal|"=*"
expr_stmt|;
block|}
specifier|final
name|ObjectName
name|beanName
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.apache.activemq:type=Broker,brokerName="
operator|+
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|+
literal|","
operator|+
name|type
operator|+
literal|",*"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|mbeans
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|mbeans
operator|=
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|queryNames
argument_list|(
name|beanName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|mbeans
operator|!=
literal|null
condition|)
block|{
name|count
operator|=
name|mbeans
operator|.
name|size
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found: "
operator|+
name|count
operator|+
literal|", matching type: "
operator|+
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|ObjectName
name|objectName
range|:
name|mbeans
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|objectName
argument_list|)
expr_stmt|;
block|}
comment|//} else {
comment|//logAllMbeans(broker);
block|}
block|}
do|while
condition|(
operator|(
name|mbeans
operator|==
literal|null
operator|||
name|mbeans
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|expiryTime
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
do|;
comment|// If port 1099 is in use when the Broker starts, starting the jmx connector
comment|// will fail.  So, if we have no mbsc to query, skip the test.
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
name|assumeNotNull
argument_list|(
name|mbeans
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|logAllMbeans
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
throws|throws
name|MalformedURLException
block|{
try|try
block|{
comment|// trace all existing MBeans
name|Set
argument_list|<
name|?
argument_list|>
name|all
init|=
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|queryNames
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Total MBean count="
operator|+
name|all
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|all
control|)
block|{
comment|//ObjectInstance bean = (ObjectInstance)o;
name|LOG
operator|.
name|info
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"getMBeanServer ex: "
operator|+
name|ignored
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|NetworkConnector
name|bridge
parameter_list|(
name|String
name|from
parameter_list|,
name|String
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|NetworkConnector
name|networkConnector
init|=
name|bridgeBrokers
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|dynamicOnly
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|networkConnector
operator|.
name|setSuppressDuplicateQueueSubscriptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setConsumerTTL
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|networkConnector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|networkConnector
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startAllBrokers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Ensure HUB is started first so bridge will be active from the get go
name|BrokerItem
name|brokerItem
init|=
name|brokers
operator|.
name|get
argument_list|(
name|HUB
argument_list|)
decl_stmt|;
name|brokerItem
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|brokerItem
operator|=
name|brokers
operator|.
name|get
argument_list|(
name|SPOKE
argument_list|)
expr_stmt|;
name|brokerItem
operator|.
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|sleep
argument_list|(
literal|600
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setAutoFail
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|createBrokers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createBrokers
parameter_list|(
name|boolean
name|del
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|options
init|=
literal|"?persistent=true&useJmx=true&deleteAllMessagesOnStartup="
operator|+
name|del
decl_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61617)/"
operator|+
name|HUB
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
literal|"broker:(tcp://localhost:61616)/"
operator|+
name|SPOKE
operator|+
name|options
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|configureBroker
parameter_list|(
name|BrokerService
name|broker
parameter_list|)
block|{
name|broker
operator|.
name|setKeepDurableSubsActive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|setCreateConnector
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PolicyMap
name|defaultPolcyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultPolicy
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
comment|//defaultPolicy.setUseCache(false);
if|if
condition|(
name|broker
operator|.
name|getBrokerName
argument_list|()
operator|.
name|equals
argument_list|(
name|HUB
argument_list|)
condition|)
block|{
name|defaultPolicy
operator|.
name|setStoreUsageHighWaterMark
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getStoreUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|1
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
name|defaultPolcyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultPolicy
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDestinationPolicy
argument_list|(
name|defaultPolcyMap
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getSystemUsage
argument_list|()
operator|.
name|getMemoryUsage
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|100
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|sleep
parameter_list|(
name|int
name|milliSecondTime
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|milliSecondTime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|igonred
parameter_list|)
block|{         }
block|}
block|}
end_class

end_unit

