begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|openwire
operator|.
name|OpenWireFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportThreadSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
operator|.
name|replay
operator|.
name|DatagramReplayStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|udp
operator|.
name|replay
operator|.
name|ExceptionIfDroppedPacketStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|DatagramSocket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AsynchronousCloseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|DatagramChannel
import|;
end_import

begin_comment
comment|/**  * An implementation of the {@link Transport} interface using raw UDP  *   * @version $Revision$  */
end_comment

begin_class
specifier|public
class|class
name|UdpTransport
extends|extends
name|TransportThreadSupport
implements|implements
name|Transport
implements|,
name|Service
implements|,
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|UdpTransport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CommandChannel
name|commandChannel
decl_stmt|;
specifier|private
name|OpenWireFormat
name|wireFormat
decl_stmt|;
specifier|private
name|ByteBufferPool
name|bufferPool
decl_stmt|;
specifier|private
name|DatagramReplayStrategy
name|replayStrategy
init|=
operator|new
name|ExceptionIfDroppedPacketStrategy
argument_list|()
decl_stmt|;
specifier|private
name|int
name|datagramSize
init|=
literal|4
operator|*
literal|1024
decl_stmt|;
specifier|private
name|long
name|maxInactivityDuration
init|=
literal|0
decl_stmt|;
comment|// 30000;
specifier|private
name|SocketAddress
name|targetAddress
decl_stmt|;
specifier|private
name|SocketAddress
name|originalTargetAddress
decl_stmt|;
specifier|private
name|DatagramChannel
name|channel
decl_stmt|;
specifier|private
name|boolean
name|trace
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|useLocalHost
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|port
decl_stmt|;
specifier|private
name|int
name|minmumWireFormatVersion
decl_stmt|;
specifier|private
name|String
name|description
init|=
literal|null
decl_stmt|;
specifier|private
name|CommandProcessor
name|commandProcessor
init|=
operator|new
name|CommandProcessor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Command
name|command
parameter_list|,
name|DatagramHeader
name|header
parameter_list|)
block|{
name|doConsume
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|private
name|DatagramHeader
name|wireFormatHeader
decl_stmt|;
specifier|protected
name|UdpTransport
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|wireFormat
operator|=
name|wireFormat
expr_stmt|;
block|}
specifier|public
name|UdpTransport
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|URI
name|remoteLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetAddress
operator|=
name|createAddress
argument_list|(
name|remoteLocation
argument_list|)
expr_stmt|;
name|description
operator|=
name|remoteLocation
operator|.
name|toString
argument_list|()
operator|+
literal|"@"
expr_stmt|;
block|}
specifier|public
name|UdpTransport
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|SocketAddress
name|socketAddress
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|targetAddress
operator|=
name|socketAddress
expr_stmt|;
name|this
operator|.
name|description
operator|=
literal|"UdpServerConnection@"
expr_stmt|;
block|}
comment|/**      * Used by the server transport      */
specifier|public
name|UdpTransport
parameter_list|(
name|OpenWireFormat
name|wireFormat
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|this
argument_list|(
name|wireFormat
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
name|this
operator|.
name|targetAddress
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|description
operator|=
literal|"UdpServer@"
expr_stmt|;
block|}
comment|/**      * A one way asynchronous send      */
specifier|public
name|void
name|oneway
parameter_list|(
name|Command
name|command
parameter_list|)
throws|throws
name|IOException
block|{
name|oneway
argument_list|(
name|command
argument_list|,
name|targetAddress
argument_list|)
expr_stmt|;
block|}
comment|/**      * A one way asynchronous send to a given address      */
specifier|public
name|void
name|oneway
parameter_list|(
name|Command
name|command
parameter_list|,
name|SocketAddress
name|address
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Sending oneway from: "
operator|+
name|this
operator|+
literal|" to target: "
operator|+
name|targetAddress
argument_list|)
expr_stmt|;
block|}
name|checkStarted
argument_list|(
name|command
argument_list|)
expr_stmt|;
name|commandChannel
operator|.
name|write
argument_list|(
name|command
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doConsume
parameter_list|(
name|Command
name|command
parameter_list|,
name|DatagramHeader
name|header
parameter_list|)
throws|throws
name|IOException
block|{
name|wireFormatHeader
operator|=
name|header
expr_stmt|;
block|}
comment|/**      * @return pretty print of 'this'      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|description
operator|!=
literal|null
condition|)
block|{
return|return
name|description
operator|+
name|port
return|;
block|}
else|else
block|{
return|return
literal|"udp://"
operator|+
name|targetAddress
operator|+
literal|"@"
operator|+
name|port
return|;
block|}
block|}
comment|/**      * reads packets from a Socket      */
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Consumer thread starting for: "
operator|+
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|commandChannel
operator|.
name|read
argument_list|(
name|commandProcessor
argument_list|)
expr_stmt|;
block|}
comment|/*              * catch (SocketTimeoutException e) { } catch              * (InterruptedIOException e) { }              */
catch|catch
parameter_list|(
name|AsynchronousCloseException
name|e
parameter_list|)
block|{
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Caught while closing: "
operator|+
name|e2
operator|+
literal|". Now Closed"
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
try|try
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Caught while closing: "
operator|+
name|e2
operator|+
literal|". Now Closed"
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|IOException
condition|)
block|{
name|onException
argument_list|(
operator|(
name|IOException
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|boolean
name|isTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
specifier|public
name|void
name|setTrace
parameter_list|(
name|boolean
name|trace
parameter_list|)
block|{
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
specifier|public
name|long
name|getMaxInactivityDuration
parameter_list|()
block|{
return|return
name|maxInactivityDuration
return|;
block|}
specifier|public
name|DatagramChannel
name|getChannel
parameter_list|()
block|{
return|return
name|channel
return|;
block|}
specifier|public
name|void
name|setChannel
parameter_list|(
name|DatagramChannel
name|channel
parameter_list|)
block|{
name|this
operator|.
name|channel
operator|=
name|channel
expr_stmt|;
block|}
comment|/**      * Sets the maximum inactivity duration      */
specifier|public
name|void
name|setMaxInactivityDuration
parameter_list|(
name|long
name|maxInactivityDuration
parameter_list|)
block|{
name|this
operator|.
name|maxInactivityDuration
operator|=
name|maxInactivityDuration
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUseLocalHost
parameter_list|()
block|{
return|return
name|useLocalHost
return|;
block|}
comment|/**      * Sets whether 'localhost' or the actual local host name should be used to      * make local connections. On some operating systems such as Macs its not      * possible to connect as the local host name so localhost is better.      */
specifier|public
name|void
name|setUseLocalHost
parameter_list|(
name|boolean
name|useLocalHost
parameter_list|)
block|{
name|this
operator|.
name|useLocalHost
operator|=
name|useLocalHost
expr_stmt|;
block|}
specifier|public
name|CommandChannel
name|getCommandChannel
parameter_list|()
block|{
return|return
name|commandChannel
return|;
block|}
comment|/**      * Sets the implementation of the command channel to use.      */
specifier|public
name|void
name|setCommandChannel
parameter_list|(
name|CommandChannel
name|commandChannel
parameter_list|)
block|{
name|this
operator|.
name|commandChannel
operator|=
name|commandChannel
expr_stmt|;
block|}
specifier|public
name|DatagramReplayStrategy
name|getReplayStrategy
parameter_list|()
block|{
return|return
name|replayStrategy
return|;
block|}
comment|/**      * Sets the strategy used to replay missed datagrams      */
specifier|public
name|void
name|setReplayStrategy
parameter_list|(
name|DatagramReplayStrategy
name|replayStrategy
parameter_list|)
block|{
name|this
operator|.
name|replayStrategy
operator|=
name|replayStrategy
expr_stmt|;
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
comment|/**      * Sets the port to connect on      */
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
specifier|public
name|int
name|getMinmumWireFormatVersion
parameter_list|()
block|{
return|return
name|minmumWireFormatVersion
return|;
block|}
specifier|public
name|void
name|setMinmumWireFormatVersion
parameter_list|(
name|int
name|minmumWireFormatVersion
parameter_list|)
block|{
name|this
operator|.
name|minmumWireFormatVersion
operator|=
name|minmumWireFormatVersion
expr_stmt|;
block|}
specifier|public
name|OpenWireFormat
name|getWireFormat
parameter_list|()
block|{
return|return
name|wireFormat
return|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
specifier|protected
name|CommandProcessor
name|getCommandProcessor
parameter_list|()
block|{
return|return
name|commandProcessor
return|;
block|}
specifier|protected
name|void
name|setCommandProcessor
parameter_list|(
name|CommandProcessor
name|commandProcessor
parameter_list|)
block|{
name|this
operator|.
name|commandProcessor
operator|=
name|commandProcessor
expr_stmt|;
block|}
comment|/**      * Creates an address from the given URI      */
specifier|protected
name|InetSocketAddress
name|createAddress
parameter_list|(
name|URI
name|remoteLocation
parameter_list|)
throws|throws
name|UnknownHostException
throws|,
name|IOException
block|{
name|String
name|host
init|=
name|resolveHostName
argument_list|(
name|remoteLocation
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|remoteLocation
operator|.
name|getPort
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|String
name|resolveHostName
parameter_list|(
name|String
name|host
parameter_list|)
throws|throws
name|UnknownHostException
block|{
name|String
name|localName
init|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
decl_stmt|;
if|if
condition|(
name|localName
operator|!=
literal|null
operator|&&
name|isUseLocalHost
argument_list|()
condition|)
block|{
if|if
condition|(
name|localName
operator|.
name|equals
argument_list|(
name|host
argument_list|)
condition|)
block|{
return|return
literal|"localhost"
return|;
block|}
block|}
return|return
name|host
return|;
block|}
specifier|protected
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
block|{
name|SocketAddress
name|localAddress
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|channel
operator|=
name|DatagramChannel
operator|.
name|open
argument_list|()
expr_stmt|;
name|channel
operator|.
name|configureBlocking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// TODO
comment|// connect to default target address to avoid security checks each time
comment|// channel = channel.connect(targetAddress);
name|DatagramSocket
name|socket
init|=
name|channel
operator|.
name|socket
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Binding to address: "
operator|+
name|localAddress
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|bind
argument_list|(
name|localAddress
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|==
literal|0
condition|)
block|{
name|port
operator|=
name|socket
operator|.
name|getLocalPort
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bufferPool
operator|==
literal|null
condition|)
block|{
name|bufferPool
operator|=
operator|new
name|DefaultBufferPool
argument_list|()
expr_stmt|;
block|}
name|commandChannel
operator|=
operator|new
name|CommandChannel
argument_list|(
name|channel
argument_list|,
name|wireFormat
argument_list|,
name|bufferPool
argument_list|,
name|datagramSize
argument_list|,
name|replayStrategy
argument_list|,
name|targetAddress
argument_list|)
expr_stmt|;
name|commandChannel
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// lets pass the header& address into the channel so it avoids a
comment|// re-request
if|if
condition|(
name|wireFormatHeader
operator|!=
literal|null
condition|)
block|{
name|commandChannel
operator|.
name|onDatagramReceived
argument_list|(
name|wireFormatHeader
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|doStart
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|channel
operator|!=
literal|null
condition|)
block|{
name|channel
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * We have received the WireFormatInfo from the server on the actual channel      * we should use for all future communication with the server, so lets set      * the target to be the actual channel that the server has chosen for us to      * talk on.      */
specifier|public
name|void
name|useLastInboundDatagramAsNewTarget
parameter_list|()
block|{
if|if
condition|(
name|originalTargetAddress
operator|==
literal|null
condition|)
block|{
name|originalTargetAddress
operator|=
name|targetAddress
expr_stmt|;
block|}
name|SocketAddress
name|lastAddress
init|=
name|commandChannel
operator|.
name|getLastReadDatagramAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastAddress
operator|!=
literal|null
condition|)
block|{
name|targetAddress
operator|=
name|lastAddress
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

