begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|amqp_1_0
operator|.
name|jms
operator|.
name|impl
operator|.
name|ConnectionFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|JmsClientRequestResponseTest
extends|extends
name|AmqpTestSupport
implements|implements
name|MessageListener
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JmsClientRequestResponseTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|Connection
name|requestorConnection
decl_stmt|;
specifier|private
name|Destination
name|requestDestination
decl_stmt|;
specifier|private
name|Session
name|requestorSession
decl_stmt|;
specifier|private
name|Connection
name|responderConnection
decl_stmt|;
specifier|private
name|MessageProducer
name|responseProducer
decl_stmt|;
specifier|private
name|Session
name|responderSession
decl_stmt|;
specifier|private
name|Destination
name|replyDestination
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JMSException
argument_list|>
name|failures
init|=
operator|new
name|Vector
argument_list|<
name|JMSException
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|dynamicallyCreateProducer
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useAsyncConsumer
init|=
literal|true
decl_stmt|;
specifier|private
name|Thread
name|syncThread
decl_stmt|;
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|requestorConnection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|requestorConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|responderConnection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|responderConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
if|if
condition|(
name|syncThread
operator|!=
literal|null
condition|)
block|{
name|syncThread
operator|.
name|join
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doSetupConnections
parameter_list|(
name|boolean
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|responderConnection
operator|=
name|createConnection
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-responder"
argument_list|)
expr_stmt|;
name|responderSession
operator|=
name|responderConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|requestDestination
operator|=
name|responderSession
operator|.
name|createTopic
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|requestDestination
operator|=
name|responderSession
operator|.
name|createQueue
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|responseProducer
operator|=
name|responderSession
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|MessageConsumer
name|requestConsumer
init|=
name|responderSession
operator|.
name|createConsumer
argument_list|(
name|requestDestination
argument_list|)
decl_stmt|;
if|if
condition|(
name|useAsyncConsumer
condition|)
block|{
name|requestConsumer
operator|.
name|setMessageListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|syncThread
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|syncConsumeLoop
argument_list|(
name|requestConsumer
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|syncThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|responderConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|requestorConnection
operator|=
name|createConnection
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-requestor"
argument_list|)
expr_stmt|;
name|requestorSession
operator|=
name|requestorConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|replyDestination
operator|=
name|requestorSession
operator|.
name|createTemporaryTopic
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|replyDestination
operator|=
name|requestorSession
operator|.
name|createTemporaryQueue
argument_list|()
expr_stmt|;
block|}
name|requestorConnection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRequestResponseToTempQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetupConnections
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|doTestRequestResponse
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRequestResponseToTempTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetupConnections
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doTestRequestResponse
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doTestRequestResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|MessageProducer
name|requestProducer
init|=
name|requestorSession
operator|.
name|createProducer
argument_list|(
name|requestDestination
argument_list|)
decl_stmt|;
name|MessageConsumer
name|replyConsumer
init|=
name|requestorSession
operator|.
name|createConsumer
argument_list|(
name|replyDestination
argument_list|)
decl_stmt|;
name|TextMessage
name|requestMessage
init|=
name|requestorSession
operator|.
name|createTextMessage
argument_list|(
literal|"SomeRequest"
argument_list|)
decl_stmt|;
name|requestMessage
operator|.
name|setJMSReplyTo
argument_list|(
name|replyDestination
argument_list|)
expr_stmt|;
name|requestProducer
operator|.
name|send
argument_list|(
name|requestMessage
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent request to destination: {}"
argument_list|,
name|requestDestination
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|replyConsumer
operator|.
name|receive
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|replyMessage
init|=
operator|(
name|TextMessage
operator|)
name|msg
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received reply."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|replyMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Wrong message content"
argument_list|,
name|replyMessage
operator|.
name|getText
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"response"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Should have received a reply by now"
argument_list|)
expr_stmt|;
block|}
name|replyConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should not have had any failures: "
operator|+
name|failures
argument_list|,
literal|0
argument_list|,
name|failures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Can be overridden in subclasses to test against a different transport suchs as NIO.      *      * @return the port to connect to on the Broker.      */
specifier|protected
name|int
name|getBrokerPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
specifier|private
name|Connection
name|createConnection
parameter_list|(
name|String
name|clientId
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|createConnection
argument_list|(
name|clientId
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
name|Connection
name|createConnection
parameter_list|(
name|String
name|clientId
parameter_list|,
name|boolean
name|syncPublish
parameter_list|,
name|boolean
name|useSsl
parameter_list|)
throws|throws
name|JMSException
block|{
name|int
name|brokerPort
init|=
name|getBrokerPort
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating connection on port {}"
argument_list|,
name|brokerPort
argument_list|)
expr_stmt|;
specifier|final
name|ConnectionFactoryImpl
name|factory
init|=
operator|new
name|ConnectionFactoryImpl
argument_list|(
literal|"localhost"
argument_list|,
name|brokerPort
argument_list|,
literal|"admin"
argument_list|,
literal|"password"
argument_list|,
literal|null
argument_list|,
name|useSsl
argument_list|)
decl_stmt|;
name|factory
operator|.
name|setSyncPublish
argument_list|(
name|syncPublish
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setTopicPrefix
argument_list|(
literal|"topic://"
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setQueuePrefix
argument_list|(
literal|"queue://"
argument_list|)
expr_stmt|;
specifier|final
name|Connection
name|connection
init|=
name|factory
operator|.
name|createConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|clientId
operator|!=
literal|null
operator|&&
operator|!
name|clientId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connection
operator|.
name|setClientID
argument_list|(
name|clientId
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|ExceptionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|JMSException
name|exception
parameter_list|)
block|{
name|exception
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|connection
return|;
block|}
specifier|protected
name|void
name|syncConsumeLoop
parameter_list|(
name|MessageConsumer
name|requestConsumer
parameter_list|)
block|{
try|try
block|{
name|Message
name|message
init|=
name|requestConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No message received"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|TextMessage
name|requestMessage
init|=
operator|(
name|TextMessage
operator|)
name|message
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Received request."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|requestMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Destination
name|replyDestination
init|=
name|requestMessage
operator|.
name|getJMSReplyTo
argument_list|()
decl_stmt|;
if|if
condition|(
name|replyDestination
operator|instanceof
name|Topic
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reply destination is: {}"
argument_list|,
operator|(
operator|(
name|Topic
operator|)
name|replyDestination
operator|)
operator|.
name|getTopicName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Reply destination is: {}"
argument_list|,
operator|(
operator|(
name|Queue
operator|)
name|replyDestination
operator|)
operator|.
name|getQueueName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TextMessage
name|replyMessage
init|=
name|responderSession
operator|.
name|createTextMessage
argument_list|(
literal|"response for: "
operator|+
name|requestMessage
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|replyMessage
operator|.
name|setJMSCorrelationID
argument_list|(
name|requestMessage
operator|.
name|getJMSMessageID
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dynamicallyCreateProducer
condition|)
block|{
name|responseProducer
operator|=
name|responderSession
operator|.
name|createProducer
argument_list|(
name|replyDestination
argument_list|)
expr_stmt|;
name|responseProducer
operator|.
name|send
argument_list|(
name|replyMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|responseProducer
operator|.
name|send
argument_list|(
name|replyDestination
argument_list|,
name|replyMessage
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent reply."
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|replyMessage
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|onException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onException
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

