begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|temp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|util
operator|.
name|IOHelper
import|;
end_import

begin_class
specifier|public
class|class
name|TempStoreTest
extends|extends
name|TestCase
block|{
specifier|protected
name|TempStore
name|ts
decl_stmt|;
specifier|protected
specifier|final
name|LinkedList
argument_list|<
name|Message
argument_list|>
name|testList
init|=
operator|new
name|LinkedList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Message
argument_list|>
name|list
decl_stmt|;
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|list
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|list
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|first
init|=
name|createMessage
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|this
operator|.
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|this
operator|.
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|testList
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddLast
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|list
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|testList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|last
init|=
name|createMessage
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|this
operator|.
name|list
operator|.
name|add
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|last
argument_list|,
name|this
operator|.
name|list
operator|.
name|get
argument_list|(
name|this
operator|.
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|this
operator|.
name|testList
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|list
operator|.
name|addAll
argument_list|(
name|testList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|this
operator|.
name|list
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|list
operator|.
name|size
argument_list|()
argument_list|,
name|testList
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|this
operator|.
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|testList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMessageId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|testList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|testList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|this
operator|.
name|list
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Message
name|createMessage
parameter_list|(
name|int
name|seq
parameter_list|)
block|{
name|ActiveMQMessage
name|message
init|=
operator|new
name|ActiveMQMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|setCommandId
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|message
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"queue"
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|setMessageId
argument_list|(
operator|new
name|MessageId
argument_list|(
literal|"c1:1:1"
argument_list|,
name|seq
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|message
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|ts
operator|=
operator|new
name|TempStore
argument_list|()
expr_stmt|;
name|File
name|directory
init|=
operator|new
name|File
argument_list|(
literal|"target/test"
argument_list|)
decl_stmt|;
name|this
operator|.
name|ts
operator|.
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|mkdirs
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|IOHelper
operator|.
name|deleteChildren
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|ts
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|msg
init|=
name|createMessage
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|testList
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|list
operator|=
name|ts
operator|.
name|getList
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|testList
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|ts
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

