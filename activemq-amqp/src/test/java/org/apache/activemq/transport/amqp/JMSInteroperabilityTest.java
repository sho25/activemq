begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests interoperability between OpenWire and AMQP  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|JMSInteroperabilityTest
extends|extends
name|JMSClientTestSupport
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JMSInteroperabilityTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|transformer
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"Transformer->{0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"jms"
block|}
block|,
block|{
literal|"native"
block|}
block|,
block|{
literal|"raw"
block|}
block|,             }
argument_list|)
return|;
block|}
specifier|public
name|JMSInteroperabilityTest
parameter_list|(
name|String
name|transformer
parameter_list|)
block|{
name|this
operator|.
name|transformer
operator|=
name|transformer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isUseOpenWireConnector
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getAmqpTransformer
parameter_list|()
block|{
return|return
name|transformer
return|;
block|}
comment|//----- Tests for OpenWire to Qpid JMS using MapMessage ------------------//
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testMapMessageSendReceive
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|openwire
init|=
name|createJMSConnection
argument_list|()
decl_stmt|;
name|Connection
name|amqp
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|openwire
operator|.
name|start
argument_list|()
expr_stmt|;
name|amqp
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|openwireSession
init|=
name|openwire
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Session
name|amqpSession
init|=
name|amqp
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|openwireSession
operator|.
name|createQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|openwireProducer
init|=
name|openwireSession
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|amqpConsumer
init|=
name|amqpSession
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// Create the Message
name|ObjectMessage
name|outgoing
init|=
name|openwireSession
operator|.
name|createObjectMessage
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|outgoingMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outgoingMap
operator|.
name|put
argument_list|(
literal|"none"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|outgoingMap
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|outgoingMap
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
literal|255L
argument_list|)
expr_stmt|;
name|outgoingMap
operator|.
name|put
argument_list|(
literal|"empty-string"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|outgoingMap
operator|.
name|put
argument_list|(
literal|"negative-int"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|outgoingMap
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
literal|0.12f
argument_list|)
expr_stmt|;
name|outgoing
operator|.
name|setObject
argument_list|(
name|outgoingMap
argument_list|)
expr_stmt|;
name|openwireProducer
operator|.
name|send
argument_list|(
name|outgoing
argument_list|)
expr_stmt|;
comment|// Now consumer the ObjectMessage
name|Message
name|received
init|=
name|amqpConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|instanceof
name|ObjectMessage
argument_list|)
expr_stmt|;
name|ObjectMessage
name|incoming
init|=
operator|(
name|ObjectMessage
operator|)
name|received
decl_stmt|;
name|Object
name|incomingObject
init|=
name|incoming
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|incomingObject
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|incomingObject
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|incomingMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|incomingObject
decl_stmt|;
name|assertEquals
argument_list|(
name|outgoingMap
operator|.
name|size
argument_list|()
argument_list|,
name|incomingMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amqp
operator|.
name|close
argument_list|()
expr_stmt|;
name|openwire
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//----- Tests for OpenWire to Qpid JMS using ObjectMessage ---------------//
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testObjectMessageContainingList
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|openwire
init|=
name|createJMSConnection
argument_list|()
decl_stmt|;
name|Connection
name|amqp
init|=
name|createConnection
argument_list|()
decl_stmt|;
name|openwire
operator|.
name|start
argument_list|()
expr_stmt|;
name|amqp
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|openwireSession
init|=
name|openwire
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Session
name|amqpSession
init|=
name|amqp
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Destination
name|queue
init|=
name|openwireSession
operator|.
name|createQueue
argument_list|(
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|MessageProducer
name|openwireProducer
init|=
name|openwireSession
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
name|MessageConsumer
name|amqpConsumer
init|=
name|amqpSession
operator|.
name|createConsumer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// Create the Message
name|ObjectMessage
name|outgoing
init|=
name|openwireSession
operator|.
name|createObjectMessage
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|outgoingList
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|outgoingList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|outgoingList
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|outgoingList
operator|.
name|add
argument_list|(
literal|255L
argument_list|)
expr_stmt|;
name|outgoingList
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|outgoingList
operator|.
name|add
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|outgoingList
operator|.
name|add
argument_list|(
literal|0.12f
argument_list|)
expr_stmt|;
name|outgoing
operator|.
name|setObject
argument_list|(
name|outgoingList
argument_list|)
expr_stmt|;
name|openwireProducer
operator|.
name|send
argument_list|(
name|outgoing
argument_list|)
expr_stmt|;
comment|// Now consumer the ObjectMessage
name|Message
name|received
init|=
name|amqpConsumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|received
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|received
operator|instanceof
name|ObjectMessage
argument_list|)
expr_stmt|;
name|ObjectMessage
name|incoming
init|=
operator|(
name|ObjectMessage
operator|)
name|received
decl_stmt|;
name|Object
name|incomingObject
init|=
name|incoming
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|incomingObject
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|incomingObject
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|incomingList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|incomingObject
decl_stmt|;
name|assertEquals
argument_list|(
name|outgoingList
operator|.
name|size
argument_list|()
argument_list|,
name|incomingList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|amqp
operator|.
name|close
argument_list|()
expr_stmt|;
name|openwire
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

