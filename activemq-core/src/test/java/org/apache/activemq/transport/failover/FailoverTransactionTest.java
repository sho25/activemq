begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|failover
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPluginSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConsumerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageAck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|TransactionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|jdbc
operator|.
name|JDBCPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|KahaDBPersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|// see https://issues.apache.org/activemq/browse/AMQ-2473
end_comment

begin_class
specifier|public
class|class
name|FailoverTransactionTest
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FailoverTransactionTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|QUEUE_NAME
init|=
literal|"FailoverWithTx"
decl_stmt|;
specifier|private
name|String
name|url
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
specifier|public
name|void
name|startCleanBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|startBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|stopBroker
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|startBroker
parameter_list|(
name|boolean
name|deleteAllMessagesOnStartup
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|(
name|deleteAllMessagesOnStartup
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|BrokerService
name|createBroker
parameter_list|(
name|boolean
name|deleteAllMessagesOnStartup
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|addConnector
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessagesOnStartup
argument_list|)
expr_stmt|;
return|return
name|broker
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverProducerCloseBeforeTransaction
parameter_list|()
throws|throws
name|Exception
block|{
name|startCleanBroker
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|produceMessage
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
comment|// restart to force failover and connection state recovery before the commit
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|startBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"we got the message"
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverCommitReplyLost
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFailoverCommitReplyLost
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverCommitReplyLostJdbc
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFailoverCommitReplyLost
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailoverCommitReplyLostKahaDB
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFailoverCommitReplyLost
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestFailoverCommitReplyLost
parameter_list|(
specifier|final
name|int
name|adapter
parameter_list|)
throws|throws
name|Exception
block|{
name|broker
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|,
name|onePhase
argument_list|)
expr_stmt|;
comment|// so commit will hang as if reply is lost
name|context
operator|.
name|setDontSendReponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping broker post commit..."
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_empty_stmt
unit|}                    }         })
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|produceMessage
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|CountDownLatch
name|commitDoneLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// broker will die on commit reply so this will hang till restart
end_comment

begin_expr_stmt
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doing async commit..."
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|commitDoneLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"done async commit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// will be stopped by the plugin
end_comment

begin_expr_stmt
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
literal|"tx committed trough failover"
argument_list|,
name|commitDoneLatch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// new transaction
end_comment

begin_decl_stmt
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|20000
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNotNull
argument_list|(
literal|"we got the message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
literal|"we got just one message"
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// ensure no dangling messages with fresh broker etc
end_comment

begin_expr_stmt
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for remaining/hung messages.."
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// after restart, ensure no dangling messages
end_comment

begin_expr_stmt
name|cf
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Session
name|session2
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|consumer
operator|=
name|session2
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
literal|"no messges left dangling but got: "
operator|+
name|msg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
name|void
name|setPersistenceAdapter
parameter_list|(
name|int
name|adapter
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|adapter
condition|)
block|{
case|case
literal|0
case|:
break|break;
case|case
literal|1
case|:
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
operator|new
name|JDBCPersistenceAdapter
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|KahaDBPersistenceAdapter
name|store
init|=
operator|new
name|KahaDBPersistenceAdapter
argument_list|()
decl_stmt|;
name|store
operator|.
name|setDirectory
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/activemq-data/kahadb/FailoverTransactionTest"
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPersistenceAdapter
argument_list|(
name|store
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testFailoverProducerCloseBeforeTransactionFailWhenDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|startCleanBroker
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")?trackTransactionProducers=false"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|produceMessage
argument_list|(
name|session
argument_list|,
name|destination
argument_list|)
expr_stmt|;
comment|// restart to force failover and connection state recovery before the commit
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|startBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// without tracking producers, message will not be replayed on recovery
name|assertNull
argument_list|(
literal|"we got the message"
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testFailoverMultipleProducerCloseBeforeTransaction
parameter_list|()
throws|throws
name|Exception
block|{
name|startCleanBroker
argument_list|()
expr_stmt|;
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Queue
name|destination
init|=
name|session
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
decl_stmt|;
name|TextMessage
name|message
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|message
operator|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Test message: "
operator|+
name|count
argument_list|)
expr_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// restart to force failover and connection state recovery before the commit
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|startBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
literal|"we got all the message: "
operator|+
name|count
argument_list|,
name|consumer
operator|.
name|receive
argument_list|(
literal|20000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testFailoverConsumerCommitLost
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|adapter
init|=
literal|0
decl_stmt|;
name|broker
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|TransactionId
name|xid
parameter_list|,
name|boolean
name|onePhase
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|commitTransaction
argument_list|(
name|context
argument_list|,
name|xid
argument_list|,
name|onePhase
argument_list|)
expr_stmt|;
comment|// so commit will hang as if reply is lost
name|context
operator|.
name|setDontSendReponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping broker post commit..."
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_empty_stmt
unit|}    	            } 	    })
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Session
name|producerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|Session
name|consumerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Queue
name|destination
init|=
name|producerSession
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|MessageConsumer
name|consumer
init|=
name|consumerSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|produceMessage
argument_list|(
name|producerSession
argument_list|,
name|destination
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Vector
argument_list|<
name|Message
argument_list|>
name|receivedMessages
init|=
operator|new
name|Vector
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|CountDownLatch
name|commitDoneLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doing async commit after consume..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|20000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got message: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|receivedMessages
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|consumerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
name|commitDoneLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"done async commit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// will be stopped by the plugin
end_comment

begin_expr_stmt
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
literal|"tx committed trough failover"
argument_list|,
name|commitDoneLatch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
literal|"we got a message"
argument_list|,
literal|1
argument_list|,
name|receivedMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// new transaction
end_comment

begin_decl_stmt
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|20000
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
literal|"we did not get a duplicate message"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|consumerSession
operator|.
name|commit
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// ensure no dangling messages with fresh broker etc
end_comment

begin_expr_stmt
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for remaining/hung messages.."
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// after restart, ensure no dangling messages
end_comment

begin_expr_stmt
name|cf
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Session
name|session2
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MessageConsumer
name|consumer2
init|=
name|session2
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|msg
operator|=
name|consumer2
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
name|consumer2
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
literal|"no messges left dangling but got: "
operator|+
name|msg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|} 	     @
name|Test
specifier|public
name|void
name|testFailoverConsumerAckLost
parameter_list|()
throws|throws
name|Exception
block|{
comment|// as failure depends on hash order, do a few times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|doTestFailoverConsumerAckLost
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|stopBroker
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|doTestFailoverConsumerAckLost
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|adapter
init|=
literal|0
decl_stmt|;
name|broker
operator|=
name|createBroker
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|BrokerPluginSupport
argument_list|()
block|{
comment|// broker is killed on delivered ack as prefetch is 1
annotation|@
name|Override
specifier|public
name|void
name|acknowledge
parameter_list|(
name|ConsumerBrokerExchange
name|consumerExchange
parameter_list|,
specifier|final
name|MessageAck
name|ack
parameter_list|)
throws|throws
name|Exception
block|{
name|consumerExchange
operator|.
name|getConnectionContext
argument_list|()
operator|.
name|setDontSendReponse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping broker on ack: "
operator|+
name|ack
argument_list|)
expr_stmt|;
try|try
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

begin_empty_stmt
unit|}                 }         })
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Vector
argument_list|<
name|Connection
argument_list|>
name|connections
init|=
operator|new
name|Vector
argument_list|<
name|Connection
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ActiveMQConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Connection
name|connection
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Session
name|producerSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|Queue
name|destination
init|=
name|producerSession
operator|.
name|createQueue
argument_list|(
name|QUEUE_NAME
operator|+
literal|"?consumer.prefetchSize=1"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Session
name|consumerSession1
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connections
operator|.
name|add
argument_list|(
name|connection
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Session
name|consumerSession2
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|MessageConsumer
name|consumer1
init|=
name|consumerSession1
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|MessageConsumer
name|consumer2
init|=
name|consumerSession2
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|produceMessage
argument_list|(
name|producerSession
argument_list|,
name|destination
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|produceMessage
argument_list|(
name|producerSession
argument_list|,
name|destination
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|Vector
argument_list|<
name|Message
argument_list|>
name|receivedMessages
init|=
operator|new
name|Vector
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|CountDownLatch
name|commitDoneLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"doing async commit after consume..."
argument_list|)
expr_stmt|;
try|try
block|{
name|Message
name|msg
init|=
name|consumer1
operator|.
name|receive
argument_list|(
literal|20000
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumer1 first attempt got message: "
operator|+
name|msg
argument_list|)
expr_stmt|;
name|receivedMessages
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|7
argument_list|)
expr_stmt|;
comment|// should not get a second message as there are two messages and two consumers
comment|// but with failover and unordered connection restore it can get the second
comment|// message which could create a problem for a pending ack
name|msg
operator|=
name|consumer1
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"consumer1 second attempt got message: "
operator|+
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|receivedMessages
operator|.
name|add
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"committing consumer1 session: "
operator|+
name|receivedMessages
operator|.
name|size
argument_list|()
operator|+
literal|" messsage(s)"
argument_list|)
expr_stmt|;
name|consumerSession1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|commitDoneLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"done async commit"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// will be stopped by the plugin
end_comment

begin_expr_stmt
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
literal|"tx committed trough failover"
argument_list|,
name|commitDoneLatch
operator|.
name|await
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// getting 2 is indicative of a problem - proven with dangling message found after restart
end_comment

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"received message count: "
operator|+
name|receivedMessages
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// new transaction
end_comment

begin_decl_stmt
name|Message
name|msg
init|=
name|consumer1
operator|.
name|receive
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"post: from consumer1 received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
literal|"should be nothing left for consumer1"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|consumerSession1
operator|.
name|commit
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// consumer2 should get other message provided consumer1 did not get 2
end_comment

begin_expr_stmt
name|msg
operator|=
name|consumer2
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"post: from consumer2 received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|receivedMessages
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"got second message on consumer2"
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|consumerSession2
operator|.
name|commit
argument_list|()
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|Connection
name|c
range|:
name|connections
control|)
block|{
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_for

begin_comment
comment|// ensure no dangling messages with fresh broker etc
end_comment

begin_expr_stmt
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Checking for remaining/hung messages.."
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|=
name|createBroker
argument_list|(
literal|false
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|setPersistenceAdapter
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// after restart, ensure no dangling messages
end_comment

begin_expr_stmt
name|cf
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"failover:("
operator|+
name|url
operator|+
literal|")"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|=
name|cf
operator|.
name|createConnection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Session
name|sweeperSession
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|MessageConsumer
name|sweeper
init|=
name|sweeperSession
operator|.
name|createConsumer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|msg
operator|=
name|sweeper
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|msg
operator|==
literal|null
condition|)
block|{
name|msg
operator|=
name|sweeper
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|LOG
operator|.
name|info
argument_list|(
literal|"Sweep received: "
operator|+
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
literal|"no messges left dangling but got: "
operator|+
name|msg
argument_list|,
name|msg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
name|void
name|produceMessage
parameter_list|(
specifier|final
name|Session
name|producerSession
parameter_list|,
name|Queue
name|destination
parameter_list|)
throws|throws
name|JMSException
block|{
name|MessageProducer
name|producer
init|=
name|producerSession
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
decl_stmt|;
name|TextMessage
name|message
init|=
name|producerSession
operator|.
name|createTextMessage
argument_list|(
literal|"Test message"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

