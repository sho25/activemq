begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|pool
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|ConnectionPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jndi
operator|.
name|JNDIReferenceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jndi
operator|.
name|JNDIStorableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|IntrospectionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Add Service and Referenceable and TransportListener to @link{org.apache.activemq.jms.pool.PooledConnectionFactory}  *  * @org.apache.xbean.XBean element="pooledConnectionFactory"  */
end_comment

begin_class
specifier|public
class|class
name|PooledConnectionFactory
extends|extends
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|PooledConnectionFactory
implements|implements
name|JNDIStorableInterface
implements|,
name|Service
block|{
specifier|public
specifier|static
specifier|final
name|String
name|POOL_PROPS_PREFIX
init|=
literal|"pool"
decl_stmt|;
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|PooledConnectionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|PooledConnectionFactory
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|PooledConnectionFactory
parameter_list|(
name|ActiveMQConnectionFactory
name|activeMQConnectionFactory
parameter_list|)
block|{
name|setConnectionFactory
argument_list|(
name|activeMQConnectionFactory
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PooledConnectionFactory
parameter_list|(
name|String
name|brokerURL
parameter_list|)
block|{
name|setConnectionFactory
argument_list|(
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|brokerURL
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|buildFromProperties
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
name|ActiveMQConnectionFactory
name|activeMQConnectionFactory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|()
decl_stmt|;
name|activeMQConnectionFactory
operator|.
name|buildFromProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|setConnectionFactory
argument_list|(
name|activeMQConnectionFactory
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|setProperties
argument_list|(
name|this
argument_list|,
operator|new
name|HashMap
argument_list|(
name|props
argument_list|)
argument_list|,
name|POOL_PROPS_PREFIX
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|populateProperties
parameter_list|(
name|Properties
name|props
parameter_list|)
block|{
operator|(
operator|(
name|ActiveMQConnectionFactory
operator|)
name|getConnectionFactory
argument_list|()
operator|)
operator|.
name|populateProperties
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|IntrospectionSupport
operator|.
name|getProperties
argument_list|(
name|this
argument_list|,
name|props
argument_list|,
name|POOL_PROPS_PREFIX
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|buildFromProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|populateProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|Reference
name|getReference
parameter_list|()
throws|throws
name|NamingException
block|{
return|return
name|JNDIReferenceFactory
operator|.
name|createReference
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Connection
name|newPooledConnection
parameter_list|(
name|ConnectionPool
name|connection
parameter_list|)
block|{
return|return
operator|new
name|PooledConnection
argument_list|(
name|connection
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jms
operator|.
name|pool
operator|.
name|ConnectionPool
name|createConnectionPool
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
return|return
operator|new
name|ConnectionPool
argument_list|(
name|connection
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Connection
name|wrap
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|)
block|{
comment|// Add a transport Listener so that we can notice if this connection
comment|// should be expired due to a connection failure.
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|addTransportListener
argument_list|(
operator|new
name|TransportListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|setHasExpired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expiring connection {} on IOException: {}"
argument_list|,
name|connection
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Expiring connection on IOException"
argument_list|,
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{                     }
annotation|@
name|Override
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{                     }
block|}
argument_list|)
expr_stmt|;
comment|// make sure that we set the hasFailed flag, in case the transport already failed
comment|// prior to the addition of our new TransportListener
name|setHasExpired
argument_list|(
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|isTransportFailed
argument_list|()
argument_list|)
expr_stmt|;
comment|// may want to return an amq EnhancedConnection
return|return
name|connection
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|unWrap
parameter_list|(
name|Connection
name|connection
parameter_list|)
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|ActiveMQConnection
operator|)
name|connection
operator|)
operator|.
name|cleanUpTempDestinations
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

