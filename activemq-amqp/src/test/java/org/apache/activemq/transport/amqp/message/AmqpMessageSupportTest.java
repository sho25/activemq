begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|message
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|Proton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|Symbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|amqp
operator|.
name|messaging
operator|.
name|MessageAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AmqpMessageSupportTest
block|{
comment|//---------- getSymbol ---------------------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testGetSymbol
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|AmqpMessageSupport
operator|.
name|getSymbol
argument_list|(
literal|"x-opt-something-or-other"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//---------- getMessageAnnotation ----------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testGetMessageAnnotationWhenMessageHasAnnotationsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|messageAnnotationsMap
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|messageAnnotationsMap
operator|.
name|put
argument_list|(
name|Symbol
operator|.
name|valueOf
argument_list|(
literal|"x-opt-test"
argument_list|)
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setMessageAnnotations
argument_list|(
operator|new
name|MessageAnnotations
argument_list|(
name|messageAnnotationsMap
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|AmqpMessageSupport
operator|.
name|getMessageAnnotation
argument_list|(
literal|"x-opt-test"
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMessageAnnotationWhenMessageHasEmptyAnnotationsMap
parameter_list|()
block|{
name|Map
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
name|messageAnnotationsMap
init|=
operator|new
name|HashMap
argument_list|<
name|Symbol
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setMessageAnnotations
argument_list|(
operator|new
name|MessageAnnotations
argument_list|(
name|messageAnnotationsMap
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|AmqpMessageSupport
operator|.
name|getMessageAnnotation
argument_list|(
literal|"x-opt-test"
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMessageAnnotationWhenMessageHasNoAnnotationsMap
parameter_list|()
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|AmqpMessageSupport
operator|.
name|getMessageAnnotation
argument_list|(
literal|"x-opt-test"
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMessageAnnotationWhenMessageIsNull
parameter_list|()
block|{
name|assertNull
argument_list|(
name|AmqpMessageSupport
operator|.
name|getMessageAnnotation
argument_list|(
literal|"x-opt-test"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//---------- isContentType -----------------------------------------------//
annotation|@
name|Test
specifier|public
name|void
name|testIsContentTypeWithNullStringValueAndNullMessageContentType
parameter_list|()
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|AmqpMessageSupport
operator|.
name|isContentType
argument_list|(
literal|null
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsContentTypeWithNonNullStringValueAndNullMessageContentType
parameter_list|()
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|AmqpMessageSupport
operator|.
name|isContentType
argument_list|(
literal|"test"
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsContentTypeWithNonNullStringValueAndNonNullMessageContentTypeNotEqual
parameter_list|()
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
literal|"fails"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AmqpMessageSupport
operator|.
name|isContentType
argument_list|(
literal|"test"
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsContentTypeWithNonNullStringValueAndNonNullMessageContentTypeEqual
parameter_list|()
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AmqpMessageSupport
operator|.
name|isContentType
argument_list|(
literal|"test"
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsContentTypeWithNullStringValueAndNonNullMessageContentType
parameter_list|()
block|{
name|Message
name|message
init|=
name|Proton
operator|.
name|message
argument_list|()
decl_stmt|;
name|message
operator|.
name|setContentType
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AmqpMessageSupport
operator|.
name|isContentType
argument_list|(
literal|null
argument_list|,
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

