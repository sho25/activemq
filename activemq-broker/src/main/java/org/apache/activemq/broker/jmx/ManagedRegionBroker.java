begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|Broker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ConnectionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|ProducerBrokerExchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|OpenTypeSupport
operator|.
name|OpenTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|RegionBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Subscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|TopicSubscription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|AbortSlowConsumerStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|MessageId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ProducerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|SubscriptionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|MessageRecoveryListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|PersistenceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|TopicMessageStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|thread
operator|.
name|TaskRunnerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transaction
operator|.
name|XATransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usage
operator|.
name|SystemUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMXSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|ServiceStopper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|SubscriptionKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|ManagedRegionBroker
extends|extends
name|RegionBroker
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ManagedRegionBroker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ManagementContext
name|managementContext
decl_stmt|;
specifier|private
specifier|final
name|ObjectName
name|brokerObjectName
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|topics
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|queues
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|temporaryQueues
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|temporaryTopics
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
name|queueSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
name|topicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
name|durableTopicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
name|inactiveDurableTopicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
name|temporaryQueueSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
name|temporaryTopicSubscribers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|SubscriptionView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
name|queueProducers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
name|topicProducers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
name|temporaryQueueProducers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
name|temporaryTopicProducers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
name|dynamicDestinationProducers
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ObjectName
argument_list|,
name|ProducerView
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|SubscriptionKey
argument_list|,
name|ObjectName
argument_list|>
name|subscriptionKeys
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|SubscriptionKey
argument_list|,
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Subscription
argument_list|,
name|ObjectName
argument_list|>
name|subscriptionMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|Subscription
argument_list|,
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|registeredMBeans
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<
name|ObjectName
argument_list|>
argument_list|()
decl_stmt|;
comment|/* This is the first broker in the broker interceptor chain. */
specifier|private
name|Broker
name|contextBroker
decl_stmt|;
specifier|private
specifier|final
name|ExecutorService
name|asyncInvokeService
decl_stmt|;
specifier|private
specifier|final
name|long
name|mbeanTimeout
decl_stmt|;
specifier|public
name|ManagedRegionBroker
parameter_list|(
name|BrokerService
name|brokerService
parameter_list|,
name|ManagementContext
name|context
parameter_list|,
name|ObjectName
name|brokerObjectName
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|SystemUsage
name|memoryManager
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|,
name|DestinationInterceptor
name|destinationInterceptor
parameter_list|,
name|Scheduler
name|scheduler
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|brokerService
argument_list|,
name|taskRunnerFactory
argument_list|,
name|memoryManager
argument_list|,
name|destinationFactory
argument_list|,
name|destinationInterceptor
argument_list|,
name|scheduler
argument_list|,
name|executor
argument_list|)
expr_stmt|;
name|this
operator|.
name|managementContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|brokerObjectName
operator|=
name|brokerObjectName
expr_stmt|;
name|this
operator|.
name|mbeanTimeout
operator|=
name|brokerService
operator|.
name|getMbeanInvocationTimeout
argument_list|()
expr_stmt|;
name|this
operator|.
name|asyncInvokeService
operator|=
name|mbeanTimeout
operator|>
literal|0
condition|?
name|executor
else|:
literal|null
expr_stmt|;
empty_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// build all existing durable subscriptions
name|buildExistingSubscriptions
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|(
name|ServiceStopper
name|stopper
parameter_list|)
block|{
name|super
operator|.
name|doStop
argument_list|(
name|stopper
argument_list|)
expr_stmt|;
comment|// lets remove any mbeans not yet removed
for|for
control|(
name|Iterator
argument_list|<
name|ObjectName
argument_list|>
name|iter
init|=
name|registeredMBeans
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ObjectName
name|name
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The MBean: "
operator|+
name|name
operator|+
literal|" is no longer registered with JMX"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|stopper
operator|.
name|onException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|registeredMBeans
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Region
name|createQueueRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|ManagedQueueRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Region
name|createTempQueueRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|ManagedTempQueueRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Region
name|createTempTopicRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|ManagedTempTopicRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Region
name|createTopicRegion
parameter_list|(
name|SystemUsage
name|memoryManager
parameter_list|,
name|TaskRunnerFactory
name|taskRunnerFactory
parameter_list|,
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
return|return
operator|new
name|ManagedTopicRegion
argument_list|(
name|this
argument_list|,
name|destinationStatistics
argument_list|,
name|memoryManager
argument_list|,
name|taskRunnerFactory
argument_list|,
name|destinationFactory
argument_list|)
return|;
block|}
specifier|public
name|void
name|register
parameter_list|(
name|ActiveMQDestination
name|destName
parameter_list|,
name|Destination
name|destination
parameter_list|)
block|{
comment|// TODO refactor to allow views for custom destinations
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|destName
argument_list|)
decl_stmt|;
name|DestinationView
name|view
decl_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|Queue
condition|)
block|{
name|view
operator|=
operator|new
name|QueueView
argument_list|(
name|this
argument_list|,
operator|(
name|Queue
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|destination
operator|instanceof
name|Topic
condition|)
block|{
name|view
operator|=
operator|new
name|TopicView
argument_list|(
name|this
argument_list|,
operator|(
name|Topic
operator|)
name|destination
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|=
literal|null
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"JMX View is not supported for custom destination: "
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|registerDestination
argument_list|(
name|objectName
argument_list|,
name|destName
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to register destination "
operator|+
name|destName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|ActiveMQDestination
name|destName
parameter_list|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|destName
argument_list|)
decl_stmt|;
name|unregisterDestination
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to unregister "
operator|+
name|destName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ObjectName
name|registerSubscription
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|Subscription
name|sub
parameter_list|)
block|{
name|String
name|connectionClientId
init|=
name|context
operator|.
name|getClientId
argument_list|()
decl_stmt|;
name|ObjectName
name|brokerJmxObjectName
init|=
name|brokerObjectName
decl_stmt|;
name|String
name|objectNameStr
init|=
name|getSubscriptionObjectName
argument_list|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
argument_list|,
name|connectionClientId
argument_list|,
name|brokerJmxObjectName
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|key
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|objectNameStr
argument_list|)
decl_stmt|;
name|SubscriptionView
name|view
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getConsumerId
argument_list|()
operator|.
name|getConnectionId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"OFFLINE"
argument_list|)
condition|)
block|{
comment|// add offline subscribers to inactive list
name|SubscriptionInfo
name|info
init|=
operator|new
name|SubscriptionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSubscriptionName
argument_list|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSelector
argument_list|(
name|sub
operator|.
name|getSelector
argument_list|()
argument_list|)
expr_stmt|;
name|addInactiveSubscription
argument_list|(
name|key
argument_list|,
name|info
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|userName
init|=
name|brokerService
operator|.
name|isPopulateUserNameInMBeans
argument_list|()
condition|?
name|context
operator|.
name|getUserName
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|view
operator|=
operator|new
name|DurableSubscriptionView
argument_list|(
name|this
argument_list|,
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|userName
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sub
operator|instanceof
name|TopicSubscription
condition|)
block|{
name|view
operator|=
operator|new
name|TopicSubscriptionView
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|userName
argument_list|,
operator|(
name|TopicSubscription
operator|)
name|sub
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|=
operator|new
name|SubscriptionView
argument_list|(
name|context
operator|.
name|getClientId
argument_list|()
argument_list|,
name|userName
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
block|}
name|registerSubscription
argument_list|(
name|objectName
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
argument_list|,
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
name|subscriptionMap
operator|.
name|put
argument_list|(
name|sub
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
return|return
name|objectName
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to register subscription "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getSubscriptionObjectName
parameter_list|(
name|ConsumerInfo
name|info
parameter_list|,
name|String
name|connectionClientId
parameter_list|,
name|ObjectName
name|brokerJmxObjectName
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|brokerJmxObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|String
name|brokerDomain
init|=
name|brokerJmxObjectName
operator|.
name|getDomain
argument_list|()
decl_stmt|;
name|String
name|objectNameStr
init|=
name|brokerDomain
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|",Type=Subscription,"
decl_stmt|;
name|String
name|destinationType
init|=
literal|"destinationType="
operator|+
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|getDestinationTypeAsString
argument_list|()
decl_stmt|;
name|String
name|destinationName
init|=
literal|"destinationName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|info
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|clientId
init|=
literal|"clientId="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connectionClientId
argument_list|)
decl_stmt|;
name|String
name|persistentMode
init|=
literal|"persistentMode="
decl_stmt|;
name|String
name|consumerId
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|persistentMode
operator|+=
literal|"Durable,subscriptionID="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|info
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|persistentMode
operator|+=
literal|"Non-Durable"
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getConsumerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|consumerId
operator|=
literal|",consumerId="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|info
operator|.
name|getConsumerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|objectNameStr
operator|+=
name|persistentMode
operator|+
literal|","
expr_stmt|;
name|objectNameStr
operator|+=
name|destinationType
operator|+
literal|","
expr_stmt|;
name|objectNameStr
operator|+=
name|destinationName
operator|+
literal|","
expr_stmt|;
name|objectNameStr
operator|+=
name|clientId
expr_stmt|;
name|objectNameStr
operator|+=
name|consumerId
expr_stmt|;
return|return
name|objectNameStr
return|;
block|}
annotation|@
name|Override
specifier|public
name|Subscription
name|addConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|Subscription
name|sub
init|=
name|super
operator|.
name|addConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|SubscriptionKey
name|subscriptionKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|sub
operator|.
name|getContext
argument_list|()
operator|.
name|getClientId
argument_list|()
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectName
name|inactiveName
init|=
name|subscriptionKeys
operator|.
name|get
argument_list|(
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|inactiveName
operator|!=
literal|null
condition|)
block|{
comment|// if it was inactive, register it
name|registerSubscription
argument_list|(
name|context
argument_list|,
name|sub
argument_list|)
expr_stmt|;
block|}
return|return
name|sub
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeConsumer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Subscription
name|sub
range|:
name|subscriptionMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|info
argument_list|)
condition|)
block|{
comment|// unregister all consumer subs
name|unregisterSubscription
argument_list|(
name|subscriptionMap
operator|.
name|get
argument_list|(
name|sub
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|removeConsumer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|super
operator|.
name|addProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|String
name|connectionClientId
init|=
name|context
operator|.
name|getClientId
argument_list|()
decl_stmt|;
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|info
argument_list|,
name|connectionClientId
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|brokerService
operator|.
name|isPopulateUserNameInMBeans
argument_list|()
condition|?
name|context
operator|.
name|getUserName
argument_list|()
else|:
literal|null
decl_stmt|;
name|ProducerView
name|view
init|=
operator|new
name|ProducerView
argument_list|(
name|info
argument_list|,
name|connectionClientId
argument_list|,
name|userName
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|registerProducer
argument_list|(
name|objectName
argument_list|,
name|info
operator|.
name|getDestination
argument_list|()
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeProducer
parameter_list|(
name|ConnectionContext
name|context
parameter_list|,
name|ProducerInfo
name|info
parameter_list|)
throws|throws
name|Exception
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|info
argument_list|,
name|context
operator|.
name|getClientId
argument_list|()
argument_list|)
decl_stmt|;
name|unregisterProducer
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|super
operator|.
name|removeProducer
argument_list|(
name|context
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|ProducerBrokerExchange
name|exchange
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getProducerState
argument_list|()
operator|!=
literal|null
operator|&&
name|exchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ProducerInfo
name|info
init|=
name|exchange
operator|.
name|getProducerState
argument_list|()
operator|.
name|getInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getDestination
argument_list|()
operator|==
literal|null
operator|&&
name|info
operator|.
name|getProducerId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|info
argument_list|,
name|exchange
operator|.
name|getConnectionContext
argument_list|()
operator|.
name|getClientId
argument_list|()
argument_list|)
decl_stmt|;
name|ProducerView
name|view
init|=
name|this
operator|.
name|dynamicDestinationProducers
operator|.
name|get
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|ActiveMQDestination
name|dest
init|=
name|message
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setLastUsedDestinationName
argument_list|(
name|dest
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|super
operator|.
name|send
argument_list|(
name|exchange
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unregisterSubscription
parameter_list|(
name|Subscription
name|sub
parameter_list|)
block|{
name|ObjectName
name|name
init|=
name|subscriptionMap
operator|.
name|remove
argument_list|(
name|sub
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SubscriptionKey
name|subscriptionKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|sub
operator|.
name|getContext
argument_list|()
operator|.
name|getClientId
argument_list|()
argument_list|,
name|sub
operator|.
name|getConsumerInfo
argument_list|()
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectName
name|inactiveName
init|=
name|subscriptionKeys
operator|.
name|get
argument_list|(
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|inactiveName
operator|!=
literal|null
condition|)
block|{
name|inactiveDurableTopicSubscribers
operator|.
name|remove
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to unregister subscription "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|registerDestination
parameter_list|(
name|ObjectName
name|key
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|DestinationView
name|view
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dest
operator|.
name|isQueue
argument_list|()
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryQueues
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queues
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryTopics
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|topics
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|AsyncAnnotatedMBean
operator|.
name|registerMBean
argument_list|(
name|asyncInvokeService
argument_list|,
name|mbeanTimeout
argument_list|,
name|managementContext
argument_list|,
name|view
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to register MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unregisterDestination
parameter_list|(
name|ObjectName
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|DestinationView
name|view
init|=
name|removeAndRemember
argument_list|(
name|topics
argument_list|,
name|key
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|view
operator|=
name|removeAndRemember
argument_list|(
name|queues
argument_list|,
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|view
operator|=
name|removeAndRemember
argument_list|(
name|temporaryQueues
argument_list|,
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|view
operator|=
name|removeAndRemember
argument_list|(
name|temporaryTopics
argument_list|,
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
if|if
condition|(
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to unregister MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|key
operator|=
name|view
operator|.
name|getSlowConsumerStrategy
argument_list|()
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to unregister slow consumer strategy MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|registerProducer
parameter_list|(
name|ObjectName
name|key
parameter_list|,
name|ActiveMQDestination
name|dest
parameter_list|,
name|ProducerView
name|view
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|dest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|isQueue
argument_list|()
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryQueueProducers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queueProducers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryTopicProducers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|topicProducers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|dynamicDestinationProducers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|AsyncAnnotatedMBean
operator|.
name|registerMBean
argument_list|(
name|asyncInvokeService
argument_list|,
name|mbeanTimeout
argument_list|,
name|managementContext
argument_list|,
name|view
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to register MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unregisterProducer
parameter_list|(
name|ObjectName
name|key
parameter_list|)
throws|throws
name|Exception
block|{
name|queueProducers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|topicProducers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryQueueProducers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryTopicProducers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|dynamicDestinationProducers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to unregister MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|DestinationView
name|removeAndRemember
parameter_list|(
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|map
parameter_list|,
name|ObjectName
name|key
parameter_list|,
name|DestinationView
name|view
parameter_list|)
block|{
name|DestinationView
name|candidate
init|=
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|candidate
operator|!=
literal|null
operator|&&
name|view
operator|==
literal|null
condition|)
block|{
name|view
operator|=
name|candidate
expr_stmt|;
block|}
return|return
name|candidate
operator|!=
literal|null
condition|?
name|candidate
else|:
name|view
return|;
block|}
specifier|protected
name|void
name|registerSubscription
parameter_list|(
name|ObjectName
name|key
parameter_list|,
name|ConsumerInfo
name|info
parameter_list|,
name|SubscriptionKey
name|subscriptionKey
parameter_list|,
name|SubscriptionView
name|view
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQDestination
name|dest
init|=
name|info
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|.
name|isQueue
argument_list|()
condition|)
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryQueueSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|queueSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dest
operator|.
name|isTemporary
argument_list|()
condition|)
block|{
name|temporaryTopicSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|info
operator|.
name|isDurable
argument_list|()
condition|)
block|{
name|durableTopicSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
comment|// unregister any inactive durable subs
try|try
block|{
name|ObjectName
name|inactiveName
init|=
name|subscriptionKeys
operator|.
name|get
argument_list|(
name|subscriptionKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|inactiveName
operator|!=
literal|null
condition|)
block|{
name|inactiveDurableTopicSubscribers
operator|.
name|remove
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|inactiveName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to unregister inactive durable subscriber: "
operator|+
name|subscriptionKey
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|topicSubscribers
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
name|AsyncAnnotatedMBean
operator|.
name|registerMBean
argument_list|(
name|asyncInvokeService
argument_list|,
name|mbeanTimeout
argument_list|,
name|managementContext
argument_list|,
name|view
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to register MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|unregisterSubscription
parameter_list|(
name|ObjectName
name|key
parameter_list|,
name|boolean
name|addToInactive
parameter_list|)
throws|throws
name|Exception
block|{
name|queueSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|topicSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryQueueSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|temporaryTopicSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|key
argument_list|)
condition|)
block|{
try|try
block|{
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to unregister MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|DurableSubscriptionView
name|view
init|=
operator|(
name|DurableSubscriptionView
operator|)
name|durableTopicSubscribers
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
comment|// need to put this back in the inactive list
name|SubscriptionKey
name|subscriptionKey
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|view
operator|.
name|getClientId
argument_list|()
argument_list|,
name|view
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|addToInactive
condition|)
block|{
name|SubscriptionInfo
name|info
init|=
operator|new
name|SubscriptionInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setClientId
argument_list|(
name|subscriptionKey
operator|.
name|getClientId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSubscriptionName
argument_list|(
name|subscriptionKey
operator|.
name|getSubscriptionName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSelector
argument_list|(
name|view
operator|.
name|getSelector
argument_list|()
argument_list|)
expr_stmt|;
name|addInactiveSubscription
argument_list|(
name|subscriptionKey
argument_list|,
name|info
argument_list|,
operator|(
name|brokerService
operator|.
name|isKeepDurableSubsActive
argument_list|()
condition|?
name|view
operator|.
name|subscription
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|buildExistingSubscriptions
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|SubscriptionKey
argument_list|,
name|SubscriptionInfo
argument_list|>
name|subscriptions
init|=
operator|new
name|HashMap
argument_list|<
name|SubscriptionKey
argument_list|,
name|SubscriptionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ActiveMQDestination
argument_list|>
name|destinations
init|=
name|destinationFactory
operator|.
name|getDestinations
argument_list|()
decl_stmt|;
if|if
condition|(
name|destinations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ActiveMQDestination
name|dest
range|:
name|destinations
control|)
block|{
if|if
condition|(
name|dest
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|SubscriptionInfo
index|[]
name|infos
init|=
name|destinationFactory
operator|.
name|getAllDurableSubscriptions
argument_list|(
operator|(
name|ActiveMQTopic
operator|)
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SubscriptionInfo
name|info
init|=
name|infos
index|[
name|i
index|]
decl_stmt|;
name|SubscriptionKey
name|key
init|=
operator|new
name|SubscriptionKey
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|alreadyKnown
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Restoring durable subscription mbean: "
operator|+
name|info
argument_list|)
expr_stmt|;
name|subscriptions
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|SubscriptionKey
argument_list|,
name|SubscriptionInfo
argument_list|>
name|entry
range|:
name|subscriptions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|addInactiveSubscription
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|alreadyKnown
parameter_list|(
name|SubscriptionKey
name|key
parameter_list|)
block|{
name|boolean
name|known
init|=
literal|false
decl_stmt|;
name|known
operator|=
operator|(
operator|(
name|TopicRegion
operator|)
name|getTopicRegion
argument_list|()
operator|)
operator|.
name|durableSubscriptionExists
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Sub with key: "
operator|+
name|key
operator|+
literal|", "
operator|+
operator|(
name|known
condition|?
literal|""
else|:
literal|"not"
operator|)
operator|+
literal|" already registered"
argument_list|)
expr_stmt|;
block|}
return|return
name|known
return|;
block|}
specifier|protected
name|void
name|addInactiveSubscription
parameter_list|(
name|SubscriptionKey
name|key
parameter_list|,
name|SubscriptionInfo
name|info
parameter_list|,
name|Subscription
name|subscription
parameter_list|)
block|{
try|try
block|{
name|ConsumerInfo
name|offlineConsumerInfo
init|=
name|subscription
operator|!=
literal|null
condition|?
name|subscription
operator|.
name|getConsumerInfo
argument_list|()
else|:
operator|(
operator|(
name|TopicRegion
operator|)
name|getTopicRegion
argument_list|()
operator|)
operator|.
name|createInactiveConsumerInfo
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|getSubscriptionObjectName
argument_list|(
name|offlineConsumerInfo
argument_list|,
name|info
operator|.
name|getClientId
argument_list|()
argument_list|,
name|brokerObjectName
argument_list|)
argument_list|)
decl_stmt|;
name|SubscriptionView
name|view
init|=
operator|new
name|InactiveDurableSubscriptionView
argument_list|(
name|this
argument_list|,
name|key
operator|.
name|getClientId
argument_list|()
argument_list|,
name|info
argument_list|,
name|subscription
argument_list|)
decl_stmt|;
try|try
block|{
name|AsyncAnnotatedMBean
operator|.
name|registerMBean
argument_list|(
name|asyncInvokeService
argument_list|,
name|mbeanTimeout
argument_list|,
name|managementContext
argument_list|,
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to register MBean: "
operator|+
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|inactiveDurableTopicSubscribers
operator|.
name|put
argument_list|(
name|objectName
argument_list|,
name|view
argument_list|)
expr_stmt|;
name|subscriptionKeys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to register subscription "
operator|+
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CompositeData
index|[]
name|browse
parameter_list|(
name|SubscriptionView
name|view
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|getSubscriberMessages
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|CompositeData
name|c
index|[]
init|=
operator|new
name|CompositeData
index|[
name|messages
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|c
index|[
name|i
index|]
operator|=
name|OpenTypeSupport
operator|.
name|convert
argument_list|(
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"failed to browse : "
operator|+
name|view
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|c
return|;
block|}
specifier|public
name|TabularData
name|browseAsTable
parameter_list|(
name|SubscriptionView
name|view
parameter_list|)
throws|throws
name|OpenDataException
block|{
name|OpenTypeFactory
name|factory
init|=
name|OpenTypeSupport
operator|.
name|getFactory
argument_list|(
name|ActiveMQMessage
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Message
argument_list|>
name|messages
init|=
name|getSubscriberMessages
argument_list|(
name|view
argument_list|)
decl_stmt|;
name|CompositeType
name|ct
init|=
name|factory
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
literal|"MessageList"
argument_list|,
literal|"MessageList"
argument_list|,
name|ct
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"JMSMessageID"
block|}
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|rc
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|messages
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|rc
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|ct
argument_list|,
name|factory
operator|.
name|getFields
argument_list|(
name|messages
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|protected
name|List
argument_list|<
name|Message
argument_list|>
name|getSubscriberMessages
parameter_list|(
name|SubscriptionView
name|view
parameter_list|)
block|{
comment|// TODO It is very dangerous operation for big backlogs
if|if
condition|(
operator|!
operator|(
name|destinationFactory
operator|instanceof
name|DestinationFactoryImpl
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unsupported by "
operator|+
name|destinationFactory
argument_list|)
throw|;
block|}
name|PersistenceAdapter
name|adapter
init|=
operator|(
operator|(
name|DestinationFactoryImpl
operator|)
name|destinationFactory
operator|)
operator|.
name|getPersistenceAdapter
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Message
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Message
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ActiveMQTopic
name|topic
init|=
operator|new
name|ActiveMQTopic
argument_list|(
name|view
operator|.
name|getDestinationName
argument_list|()
argument_list|)
decl_stmt|;
name|TopicMessageStore
name|store
init|=
name|adapter
operator|.
name|createTopicMessageStore
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|store
operator|.
name|recover
argument_list|(
operator|new
name|MessageRecoveryListener
argument_list|()
block|{
specifier|public
name|boolean
name|recoverMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|result
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|recoverMessageReference
parameter_list|(
name|MessageId
name|messageReference
parameter_list|)
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Should not be called."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|hasSpace
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isDuplicate
parameter_list|(
name|MessageId
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to browse messages for Subscription "
operator|+
name|view
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTopics
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|topics
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getQueues
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|queues
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryTopics
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|temporaryTopics
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryQueues
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|temporaryQueues
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTopicSubscribers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|topicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getDurableTopicSubscribers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|durableTopicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getQueueSubscribers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|queueSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryTopicSubscribers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|temporaryTopicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryQueueSubscribers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|temporaryQueueSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getInactiveDurableTopicSubscribers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|inactiveDurableTopicSubscribers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTopicProducers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|topicProducers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getQueueProducers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|queueProducers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryTopicProducers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|temporaryTopicProducers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getTemporaryQueueProducers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|temporaryQueueProducers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|ObjectName
index|[]
name|getDynamicDestinationProducers
parameter_list|()
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|set
init|=
name|dynamicDestinationProducers
operator|.
name|keySet
argument_list|()
decl_stmt|;
return|return
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectName
index|[
name|set
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|Broker
name|getContextBroker
parameter_list|()
block|{
return|return
name|contextBroker
return|;
block|}
specifier|public
name|void
name|setContextBroker
parameter_list|(
name|Broker
name|contextBroker
parameter_list|)
block|{
name|this
operator|.
name|contextBroker
operator|=
name|contextBroker
expr_stmt|;
block|}
specifier|protected
name|ObjectName
name|createObjectName
parameter_list|(
name|ActiveMQDestination
name|destName
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
comment|// Build the object name for the destination
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|brokerObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|brokerObjectName
operator|.
name|getDomain
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|destName
operator|.
name|getDestinationTypeAsString
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
literal|"Destination="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|destName
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|objectName
return|;
block|}
specifier|protected
name|ObjectName
name|createObjectName
parameter_list|(
name|ProducerInfo
name|producerInfo
parameter_list|,
name|String
name|connectionClientId
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
comment|// Build the object name for the producer info
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|brokerObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|String
name|destinationType
init|=
literal|"destinationType="
decl_stmt|;
name|String
name|destinationName
init|=
literal|"destinationName="
decl_stmt|;
if|if
condition|(
name|producerInfo
operator|.
name|getDestination
argument_list|()
operator|==
literal|null
condition|)
block|{
name|destinationType
operator|+=
literal|"Dynamic"
expr_stmt|;
name|destinationName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|destinationType
operator|+=
name|producerInfo
operator|.
name|getDestination
argument_list|()
operator|.
name|getDestinationTypeAsString
argument_list|()
expr_stmt|;
name|destinationName
operator|+=
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|producerInfo
operator|.
name|getDestination
argument_list|()
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|clientId
init|=
literal|"clientId="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|connectionClientId
argument_list|)
decl_stmt|;
name|String
name|producerId
init|=
literal|"producerId="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|producerInfo
operator|.
name|getProducerId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|brokerObjectName
operator|.
name|getDomain
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=Producer"
operator|+
literal|","
operator|+
name|destinationType
operator|+
literal|","
operator|+
operator|(
name|destinationName
operator|!=
literal|null
condition|?
name|destinationName
operator|+
literal|","
else|:
literal|""
operator|)
operator|+
name|clientId
operator|+
literal|","
operator|+
name|producerId
argument_list|)
decl_stmt|;
return|return
name|objectName
return|;
block|}
specifier|public
name|ObjectName
name|registerSlowConsumerStrategy
parameter_list|(
name|AbortSlowConsumerStrategy
name|strategy
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|ObjectName
name|objectName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|objectName
operator|=
name|createObjectName
argument_list|(
name|strategy
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|registeredMBeans
operator|.
name|contains
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|AbortSlowConsumerStrategyView
name|view
init|=
operator|new
name|AbortSlowConsumerStrategyView
argument_list|(
name|this
argument_list|,
name|strategy
argument_list|)
decl_stmt|;
name|AsyncAnnotatedMBean
operator|.
name|registerMBean
argument_list|(
name|asyncInvokeService
argument_list|,
name|mbeanTimeout
argument_list|,
name|managementContext
argument_list|,
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to register MBean: "
operator|+
name|strategy
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|objectName
return|;
block|}
specifier|protected
name|ObjectName
name|createObjectName
parameter_list|(
name|XATransaction
name|transaction
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|brokerObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|brokerObjectName
operator|.
name|getDomain
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=RecoveredXaTransaction"
operator|+
literal|","
operator|+
literal|"Xid="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|transaction
operator|.
name|getTransactionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|objectName
return|;
block|}
specifier|public
name|void
name|registerRecoveredTransactionMBean
parameter_list|(
name|XATransaction
name|transaction
parameter_list|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|transaction
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|registeredMBeans
operator|.
name|contains
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
name|RecoveredXATransactionView
name|view
init|=
operator|new
name|RecoveredXATransactionView
argument_list|(
name|this
argument_list|,
name|transaction
argument_list|)
decl_stmt|;
name|AsyncAnnotatedMBean
operator|.
name|registerMBean
argument_list|(
name|asyncInvokeService
argument_list|,
name|mbeanTimeout
argument_list|,
name|managementContext
argument_list|,
name|view
argument_list|,
name|objectName
argument_list|)
expr_stmt|;
name|registeredMBeans
operator|.
name|add
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to register prepared transaction MBean: "
operator|+
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregister
parameter_list|(
name|XATransaction
name|transaction
parameter_list|)
block|{
try|try
block|{
name|ObjectName
name|objectName
init|=
name|createObjectName
argument_list|(
name|transaction
argument_list|)
decl_stmt|;
if|if
condition|(
name|registeredMBeans
operator|.
name|remove
argument_list|(
name|objectName
argument_list|)
condition|)
block|{
try|try
block|{
name|managementContext
operator|.
name|unregisterMBean
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to unregister MBean: "
operator|+
name|objectName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failure reason: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to create object name to unregister "
operator|+
name|transaction
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ObjectName
name|createObjectName
parameter_list|(
name|AbortSlowConsumerStrategy
name|strategy
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|brokerObjectName
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|ObjectName
name|objectName
init|=
operator|new
name|ObjectName
argument_list|(
name|brokerObjectName
operator|.
name|getDomain
argument_list|()
operator|+
literal|":"
operator|+
literal|"BrokerName="
operator|+
name|map
operator|.
name|get
argument_list|(
literal|"BrokerName"
argument_list|)
operator|+
literal|","
operator|+
literal|"Type=SlowConsumerStrategy,"
operator|+
literal|"InstanceName="
operator|+
name|JMXSupport
operator|.
name|encodeObjectNamePart
argument_list|(
name|strategy
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|objectName
return|;
block|}
specifier|public
name|ObjectName
name|getSubscriberObjectName
parameter_list|(
name|Subscription
name|key
parameter_list|)
block|{
return|return
name|subscriptionMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Subscription
name|getSubscriber
parameter_list|(
name|ObjectName
name|key
parameter_list|)
block|{
name|Subscription
name|sub
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Subscription
argument_list|,
name|ObjectName
argument_list|>
name|entry
range|:
name|subscriptionMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|sub
operator|=
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|sub
return|;
block|}
specifier|public
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|DestinationView
argument_list|>
name|getQueueViews
parameter_list|()
block|{
return|return
name|queues
return|;
block|}
block|}
end_class

end_unit

