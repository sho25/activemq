begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_comment
comment|/**  *  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractVirtualDestTest
extends|extends
name|RuntimeConfigTestSupport
block|{
specifier|protected
name|void
name|forceAddDestination
parameter_list|(
name|String
name|dest
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
literal|"Consumer.A."
operator|+
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|exerciseVirtualTopic
parameter_list|(
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|exerciseVirtualTopic
argument_list|(
literal|"Consumer.A."
argument_list|,
name|topic
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|exerciseVirtualTopic
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|topic
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|prefix
operator|+
name|topic
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for: "
operator|+
name|consumer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createTopic
argument_list|(
name|topic
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
literal|"To vt:"
operator|+
name|topic
decl_stmt|;
name|Message
name|message
init|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got expected message"
argument_list|,
name|body
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|exerciseCompositeQueue
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|consumerQ
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|consumerQ
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for: "
operator|+
name|consumer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|dest
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|body
init|=
literal|"To cq:"
operator|+
name|dest
decl_stmt|;
name|Message
name|message
init|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"got message"
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got expected message"
argument_list|,
name|body
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|exerciseFilteredCompositeQueue
parameter_list|(
name|String
name|dest
parameter_list|,
name|String
name|consumerDestination
parameter_list|,
name|String
name|acceptedHeaderValue
parameter_list|)
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|connection
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
operator|.
name|createActiveMQConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|ActiveMQMessageConsumer
name|consumer
init|=
operator|(
name|ActiveMQMessageConsumer
operator|)
name|session
operator|.
name|createConsumer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|consumerDestination
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"new consumer for: "
operator|+
name|consumer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|session
operator|.
name|createQueue
argument_list|(
name|dest
argument_list|)
argument_list|)
decl_stmt|;
comment|// positive test
name|String
name|body
init|=
literal|"To filtered cq:"
operator|+
name|dest
decl_stmt|;
name|Message
name|message
init|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|body
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"odd"
argument_list|,
name|acceptedHeaderValue
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"The message did not reach the destination even though it should pass through the filter."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not get expected message"
argument_list|,
name|body
argument_list|,
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
comment|// negative test
name|message
operator|=
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
literal|"Not to filtered cq:"
operator|+
name|dest
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"odd"
argument_list|,
literal|"somethingElse"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"The message reached the destination, but it should have been removed by the filter."
argument_list|,
name|message
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Message
name|sendAndReceiveMessage
parameter_list|(
name|Session
name|session
parameter_list|,
name|ActiveMQMessageConsumer
name|consumer
parameter_list|,
name|MessageProducer
name|producer
parameter_list|,
specifier|final
name|String
name|messageBody
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sendAndReceiveMessage
argument_list|(
name|session
argument_list|,
name|consumer
argument_list|,
name|producer
argument_list|,
name|messageBody
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|Message
name|sendAndReceiveMessage
parameter_list|(
name|Session
name|session
parameter_list|,
name|ActiveMQMessageConsumer
name|consumer
parameter_list|,
name|MessageProducer
name|producer
parameter_list|,
specifier|final
name|String
name|messageBody
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertiesMap
parameter_list|)
throws|throws
name|Exception
block|{
name|TextMessage
name|messageToSend
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|messageBody
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertiesMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|headerKey
range|:
name|propertiesMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|messageToSend
operator|.
name|setStringProperty
argument_list|(
name|headerKey
argument_list|,
name|propertiesMap
operator|.
name|get
argument_list|(
name|headerKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|producer
operator|.
name|send
argument_list|(
name|messageToSend
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"sent to: "
operator|+
name|producer
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|message
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|&&
name|message
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|=
name|consumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|message
return|;
block|}
block|}
end_class

end_unit

