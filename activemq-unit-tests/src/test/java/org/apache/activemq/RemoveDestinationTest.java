begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|DestinationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|jmx
operator|.
name|DestinationViewMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RemoveDestinationTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|VM_BROKER_URL
init|=
literal|"vm://localhost?create=false"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BROKER_URL
init|=
literal|"broker:vm://localhost?broker.persistent=false&broker.useJmx=true"
decl_stmt|;
name|BrokerService
name|broker
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|=
name|BrokerFactory
operator|.
name|createBroker
argument_list|(
operator|new
name|URI
argument_list|(
name|BROKER_URL
argument_list|)
argument_list|)
expr_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
name|broker
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|Connection
name|createConnection
parameter_list|(
specifier|final
name|boolean
name|start
parameter_list|)
throws|throws
name|JMSException
block|{
name|ConnectionFactory
name|cf
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|VM_BROKER_URL
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|cf
operator|.
name|createConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
condition|)
block|{
name|conn
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|conn
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveDestinationWithoutSubscriber
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|amqConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DestinationSource
name|destinationSource
init|=
name|amqConnection
operator|.
name|getDestinationSource
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|amqConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|TextMessage
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hellow World"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|amqTopic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|topic
decl_stmt|;
name|assertTrue
argument_list|(
name|destinationSource
operator|.
name|getTopics
argument_list|()
operator|.
name|contains
argument_list|(
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|amqConnection
operator|.
name|destroyDestination
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|topic
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|destinationSource
operator|.
name|getTopics
argument_list|()
operator|.
name|contains
argument_list|(
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveDestinationWithSubscriber
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQConnection
name|amqConnection
init|=
operator|(
name|ActiveMQConnection
operator|)
name|createConnection
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|DestinationSource
name|destinationSource
init|=
name|amqConnection
operator|.
name|getDestinationSource
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|amqConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|Topic
name|topic
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
name|session
operator|.
name|createConsumer
argument_list|(
name|topic
argument_list|)
decl_stmt|;
name|TextMessage
name|msg
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Hellow World"
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|consumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|ActiveMQTopic
name|amqTopic
init|=
operator|(
name|ActiveMQTopic
operator|)
name|topic
decl_stmt|;
name|assertTrue
argument_list|(
name|destinationPresentInAdminView
argument_list|(
name|broker
argument_list|,
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|destinationSource
operator|.
name|getTopics
argument_list|()
operator|.
name|contains
argument_list|(
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
comment|// This line generates a broker error since the consumer is still active.
try|try
block|{
name|amqConnection
operator|.
name|destroyDestination
argument_list|(
operator|(
name|ActiveMQDestination
operator|)
name|topic
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expect exception on destroy if comsumer present"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
name|amqTopic
operator|.
name|getTopicName
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|destinationSource
operator|.
name|getTopics
argument_list|()
operator|.
name|contains
argument_list|(
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|destinationPresentInAdminView
argument_list|(
name|broker
argument_list|,
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
comment|// The destination will not be removed with this call, but if you remove
comment|// the call above that generates the error it will.
name|amqConnection
operator|.
name|destroyDestination
argument_list|(
name|amqTopic
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|destinationSource
operator|.
name|getTopics
argument_list|()
operator|.
name|contains
argument_list|(
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|destinationPresentInAdminView
argument_list|(
name|broker
argument_list|,
name|amqTopic
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|destinationPresentInAdminView
parameter_list|(
name|BrokerService
name|broker2
parameter_list|,
name|ActiveMQTopic
name|amqTopic
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ObjectName
name|name
range|:
name|broker
operator|.
name|getAdminView
argument_list|()
operator|.
name|getTopics
argument_list|()
control|)
block|{
name|DestinationViewMBean
name|proxy
init|=
operator|(
name|DestinationViewMBean
operator|)
name|broker
operator|.
name|getManagementContext
argument_list|()
operator|.
name|newProxyInstance
argument_list|(
name|name
argument_list|,
name|DestinationViewMBean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|amqTopic
operator|.
name|getPhysicalName
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|found
return|;
block|}
block|}
end_class

end_unit

