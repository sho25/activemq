begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisoryBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|advisory
operator|.
name|AdvisorySupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|DestinationStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|CompositeTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|virtual
operator|.
name|VirtualDestinationInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConsumerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|java
operator|.
name|JavaRuntimeConfigurationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|plugin
operator|.
name|java
operator|.
name|JavaRuntimeConfigurationPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * This test is to show that dynamicallyIncludedDestinations will work properly  * when a network of brokers is configured to treat Virtual Destinations (Virtual topic and composite destination)  * as demand.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|VirtualConsumerDemandTest
block|{
specifier|protected
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VirtualConsumerDemandTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * test params      */
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
comment|//not duplex, useVirtualDestSubsOnCreation
block|{
literal|false
block|,
literal|true
block|}
block|,
comment|//duplex
block|{
literal|true
block|,
literal|false
block|}
block|,
block|{
literal|true
block|,
literal|true
block|}
block|,
block|{
literal|false
block|,
literal|false
block|}
block|}
argument_list|)
return|;
block|}
specifier|protected
name|Connection
name|localConnection
decl_stmt|;
specifier|protected
name|Connection
name|remoteConnection
decl_stmt|;
specifier|protected
name|BrokerService
name|localBroker
decl_stmt|;
specifier|protected
name|BrokerService
name|remoteBroker
decl_stmt|;
specifier|protected
name|JavaRuntimeConfigurationBroker
name|runtimeBroker
decl_stmt|;
specifier|protected
name|Session
name|localSession
decl_stmt|;
specifier|protected
name|Session
name|remoteSession
decl_stmt|;
specifier|protected
name|ActiveMQTopic
name|included
decl_stmt|;
specifier|protected
name|ActiveMQTopic
name|excluded
decl_stmt|;
specifier|protected
name|String
name|consumerName
init|=
literal|"durableSubs"
decl_stmt|;
specifier|protected
name|String
name|testTopicName
init|=
literal|"include.test.bar"
decl_stmt|;
specifier|protected
name|String
name|testQueueName
init|=
literal|"include.test.foo"
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isDuplex
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isUseVirtualDestSubsOnCreation
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|VirtualConsumerDemandTest
parameter_list|(
name|boolean
name|isDuplex
parameter_list|,
name|boolean
name|isUseVirtualDestSubsOnCreation
parameter_list|)
block|{
comment|// Assume.assumeTrue(
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|isDuplex
operator|=
name|isDuplex
expr_stmt|;
name|this
operator|.
name|isUseVirtualDestSubsOnCreation
operator|=
name|isUseVirtualDestSubsOnCreation
expr_stmt|;
block|}
comment|/**      * Test that the creation of a virtual topic will cause demand      * even without a consumer for the case of useVirtualDestSubsOnCreation == true      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testVirtualTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
literal|"VirtualTopic.>"
argument_list|)
decl_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
comment|//this will create the destination so messages accumulate
specifier|final
name|DestinationStatistics
name|remoteStats
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.cons1.VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
comment|//assert statistics
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteStats
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the creation of a virtual topic with a consumer will cause      * demand regardless of useVirtualDestSubsOnCreation      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testVirtualTopicWithConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//use just the default virtual topic setup
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
literal|"VirtualTopic.>"
argument_list|)
decl_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.cons1.VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseVirtualDestSubsOnCreation
condition|)
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that when a consumer goes offline for a virtual topic, that messages still flow      * to that queue if isUseVirtualDestSubsOnCreation is true      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testVirtualTopicWithConsumerGoOffline
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
comment|//use just the default virtual topic setup
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
literal|"VirtualTopic.>"
argument_list|)
decl_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.cons1.VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|//assert a message was forwarded
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//close the consumer and send a second message
name|bridgeConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
comment|//check that the message was forwarded
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|//make sure that the message can be received
name|MessageConsumer
name|bridgeConsumer2
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"Consumer.cons1.VirtualTopic.include.test.bar"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer2
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|//should be 4 advisories...1 or the virtual destination creation to a queue,
comment|//2 for new consumers, and 1 for a closed consumer
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test shows that if isUseVirtualDestSubsOnCreation is true,      * the creation of a composite destination that forwards to a Queue will create      * a virtual consumer and cause demand so that the queue will accumulate messages      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDynamicFlow
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that dynamic flow works for virtual destinations when a second composite      * topic is included, but is excluded from      * being forwarded from the remote broker      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSecondNonIncludedCompositeTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a composite topic that isn't included
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
literal|"include.test.bar2"
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//add one that is included
name|CompositeTopic
name|compositeTopic2
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|,
name|compositeTopic2
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that no messages are forwarded when isUseVirtualDestSubsOnCreation is false      * and there are no consumers      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testNoUseVirtualDestinationSubscriptionsOnCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|0
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that messages still flow when updating a composite topic to remove 1 of the      * forwarded destinations, but keep the other one      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testTwoTargetsRemove1
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge" and "include.test.bar.bridge2"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics2
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//two advisory messages sent for each target when destinations are created
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote2 dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics2
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|compositeTopic
operator|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
expr_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|2
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote2 dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics2
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//We delete 2, and re-add 1 target queue
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that messages still flow after removing one of the destinations that is a target      * but the other one sticks around      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testTwoTargetsRemove1Destination
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge" and "include.test.bar.bridge2"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics2
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote2 dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics2
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|removeDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//2 for each target queue destination in the virtual subscription
comment|//1 for the removal of a queue
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
comment|//make sure messages are still forwarded even after 1 target was deleted
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|2
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//1 because a send causes the queue to be recreated again which sends a new demand advisory
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that demand is destroyed after removing both targets from the composite Topic      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testTwoTargetsRemoveBoth
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge" and "include.test.bar.bridge2"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics2
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge2"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote2 dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics2
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote2 dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics2
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//2 for each target queue destination in the virtual subscription
comment|//2 for the removal of the virtual destination, which requires 2 advisories because there are 2 targets
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that dynamic flow works when the destination is created before the      * virtual destination has been added to the broker      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testDestinationAddedFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|remoteBroker
operator|.
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|remoteBroker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|1
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * This test shows that a consumer listening on the target of a composite destination will create      * a virtual consumer and cause demand so that the consumer will receive messages, regardless      * of whether isUseVirtualDestSubsOnCreation is true or false      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testWithConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
comment|//should only be 1 because of conduit subs even though there is 2 consumers
comment|//for the case where isUseVirtualDestSubsOnCreation is true,
comment|//1 for the composite destination creation and 1 for the actual consumer
return|return
literal|1
operator|==
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//if isUseVirtualDestSubsOnCreation is true we should have
comment|//two advisory consumer messages, else 1
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseVirtualDestSubsOnCreation
condition|)
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that demand still exists when only 1 of 2 consumers is removed from the      * destination      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testWith2ConsumersRemove1
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer2
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
comment|//should only be 1 because of conduit subs even though there is 2 consumers
comment|//for the case where isUseVirtualDestSubsOnCreation is true,
comment|//1 for the composite destination creation and 1 for the actual consumer
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
operator|!=
literal|null
operator|||
name|bridgeConsumer2
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bridgeConsumer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
comment|//make sure the message is still forwarded
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseVirtualDestSubsOnCreation
condition|)
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that demand is removed after both consumers are removed when      * isUseVirtualDestSubsOnCreation is false      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testWith2ConsumersRemoveBoth
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to queue "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer2
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
comment|//should only be 1 because of conduit subs even though there is 2 consumers
comment|//for the case where isUseVirtualDestSubsOnCreation is true,
comment|//1 for the composite destination creation and 1 for the actual consumer
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
operator|!=
literal|null
operator|||
name|bridgeConsumer2
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|bridgeConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|bridgeConsumer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//in this test, virtual destinations don't cause demand, only consumers on them
comment|//so we should have 2 create and 2 destroy
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Show that messages won't be send for an excluded destination      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testExcluded
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages to an excluded destination
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
literal|"excluded.test.bar"
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"excluded.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|excluded
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"excluded.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|excluded
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"broker consumer count"
argument_list|,
literal|0
argument_list|,
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseVirtualDestSubsOnCreation
condition|)
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that demand will be created when using a composite queue instead of a composite topic      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testSourceQueue
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getQueueVirtualDestinationAdvisoryConsumer
argument_list|(
name|testQueueName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from queue testQueueName
comment|//to topic "include.test.foo.bridge"
name|CompositeQueue
name|compositeQueue
init|=
name|createCompositeQueue
argument_list|(
name|testQueueName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.foo.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeQueue
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|testQueueName
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|testQueueName
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.foo.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|waitForConsumerCount
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|remoteStats
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|testQueueName
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|waitForDispatchFromLocalBroker
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//should only be 1 because of conduit subs
name|assertEquals
argument_list|(
literal|"broker consumer count"
argument_list|,
literal|1
argument_list|,
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//check remote stats - confirm the message isn't on the remote queue and was forwarded only
comment|//since that's how the composite queue was set up
name|assertEquals
argument_list|(
literal|"message count"
argument_list|,
literal|0
argument_list|,
name|remoteStats
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseVirtualDestSubsOnCreation
condition|)
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that the demand will be removed if the virtual destination is deleted      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testFlowRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//sleep to allow the route to be set up
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|remoteBroker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//remove the virtual destinations after startup
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
comment|//assert that no message was received
comment|//by the time we get here, there is no more virtual destinations so this won't
comment|//trigger demand
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|remoteBroker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//start the local broker after establishing the virtual topic to test replay
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//there should be an extra advisory because of replay
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testReplayWithConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|getBroker
argument_list|()
operator|.
name|addDestination
argument_list|(
name|remoteBroker
operator|.
name|getAdminConnectionContext
argument_list|()
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//start the local broker after establishing the virtual topic to test replay
name|localBroker
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|//with isUseVirtualDestSubsOnCreation is true, there should be 4 advisories (2 replay)
comment|//with !isUseVirtualDestSubsOnCreation, there should be 2 advisories (1 replay)
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|isUseVirtualDestSubsOnCreation
condition|)
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Test that the demand will be removed if the virtual destination is deleted      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testRemovedIfNoConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|)
expr_stmt|;
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|doSetUp
argument_list|(
literal|true
argument_list|,
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//destination creation will trigger the advisory since the virtual topic exists
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|testQueueName
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
specifier|final
name|DestinationStatistics
name|remoteDestStatistics
init|=
name|remoteBroker
operator|.
name|getDestination
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//remove the virtual destinations after startup, will trigger a remove advisory
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker consumer count"
argument_list|,
literal|0
argument_list|,
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remote dest messages"
argument_list|,
literal|0
argument_list|,
name|remoteDestStatistics
operator|.
name|getMessages
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//one add and one remove advisory
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that demand is created when the target of the compositeTopic is another topic      * and a consumer comes online      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testToTopic
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to topic "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createConsumer
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that demand is NOT created when the target of the compositeTopic is another topic      * and there are no consumers since the existience of a topic shouldn't case demand without      * a consumer or durable on it      *      * @throws Exception      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testToTopicNoConsumer
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to topic "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|excluded
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"broker consumer count"
argument_list|,
literal|0
argument_list|,
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertLocalBrokerStatistics
argument_list|(
name|destinationStatistics
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that demand will be created because of the existing of a durable subscription      * created on a topic that is the target of a compositeTopic      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testToTopicWithDurable
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to topic "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createDurableSubscriber
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|1
operator|==
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker dest stat dispatched"
argument_list|,
literal|1
argument_list|,
name|destinationStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker dest stat dequeues"
argument_list|,
literal|1
argument_list|,
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that messages still flow to the durable subscription on the forwarded      * destination even if it is offline      */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60
operator|*
literal|1000
argument_list|)
specifier|public
name|void
name|testToTopicWithDurableOffline
parameter_list|()
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|MessageConsumer
name|advisoryConsumer
init|=
name|getVirtualDestinationAdvisoryConsumer
argument_list|(
name|testTopicName
argument_list|)
decl_stmt|;
comment|//configure a virtual destination that forwards messages from topic testQueueName
comment|//to topic "include.test.bar.bridge"
name|CompositeTopic
name|compositeTopic
init|=
name|createCompositeTopic
argument_list|(
name|testTopicName
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|)
decl_stmt|;
name|runtimeBroker
operator|.
name|setVirtualDestinations
argument_list|(
operator|new
name|VirtualDestination
index|[]
block|{
name|compositeTopic
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MessageProducer
name|includedProducer
init|=
name|localSession
operator|.
name|createProducer
argument_list|(
name|included
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|Message
name|test
init|=
name|localSession
operator|.
name|createTextMessage
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|DestinationStatistics
name|destinationStatistics
init|=
name|localBroker
operator|.
name|getDestination
argument_list|(
name|included
argument_list|)
operator|.
name|getDestinationStatistics
argument_list|()
decl_stmt|;
comment|//create a durable subscription and go offline
name|MessageConsumer
name|bridgeConsumer
init|=
name|remoteSession
operator|.
name|createDurableSubscriber
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|bridgeConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|includedProducer
operator|.
name|send
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|1
operator|==
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|&&
name|destinationStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|//offline durable should still get receive the message over the bridge and ack
name|assertEquals
argument_list|(
literal|"broker dest stat dispatched"
argument_list|,
literal|1
argument_list|,
name|destinationStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker dest stat dequeues"
argument_list|,
literal|1
argument_list|,
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//reconnect to receive the message
name|MessageConsumer
name|bridgeConsumer2
init|=
name|remoteSession
operator|.
name|createDurableSubscriber
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
literal|"include.test.bar.bridge"
argument_list|)
argument_list|,
literal|"sub1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bridgeConsumer2
operator|.
name|receive
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|//make sure stats did not change
name|assertEquals
argument_list|(
literal|"broker dest stat dispatched"
argument_list|,
literal|1
argument_list|,
name|destinationStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"broker dest stat dequeues"
argument_list|,
literal|1
argument_list|,
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertAdvisoryBrokerCounts
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{      }
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|doTearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doTearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|localConnection
operator|!=
literal|null
condition|)
block|{
name|localConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remoteConnection
operator|!=
literal|null
condition|)
block|{
name|remoteConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|localBroker
operator|!=
literal|null
condition|)
block|{
name|localBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|remoteBroker
operator|!=
literal|null
condition|)
block|{
name|remoteBroker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doSetUp
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|,
name|VirtualDestination
index|[]
name|remoteVirtualDests
parameter_list|)
throws|throws
name|Exception
block|{
name|doSetUp
argument_list|(
name|deleteAllMessages
argument_list|,
name|remoteVirtualDests
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doSetUp
parameter_list|(
name|boolean
name|deleteAllMessages
parameter_list|,
name|VirtualDestination
index|[]
name|remoteVirtualDests
parameter_list|,
name|boolean
name|startNetworkConnector
parameter_list|)
throws|throws
name|Exception
block|{
name|remoteBroker
operator|=
name|createRemoteBroker
argument_list|(
name|isUseVirtualDestSubsOnCreation
argument_list|,
name|remoteVirtualDests
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|remoteBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|remoteBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|localBroker
operator|=
name|createLocalBroker
argument_list|(
name|startNetworkConnector
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|setDeleteAllMessagesOnStartup
argument_list|(
name|deleteAllMessages
argument_list|)
expr_stmt|;
name|localBroker
operator|.
name|start
argument_list|()
expr_stmt|;
name|localBroker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|URI
name|localURI
init|=
name|localBroker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|ActiveMQConnectionFactory
name|fac
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|localURI
argument_list|)
decl_stmt|;
name|fac
operator|.
name|setAlwaysSyncSend
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fac
operator|.
name|setDispatchAsync
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|localConnection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|localConnection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|localConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|URI
name|remoteURI
init|=
name|remoteBroker
operator|.
name|getVmConnectorURI
argument_list|()
decl_stmt|;
name|fac
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|remoteURI
argument_list|)
expr_stmt|;
name|remoteConnection
operator|=
name|fac
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|remoteConnection
operator|.
name|setClientID
argument_list|(
literal|"clientId"
argument_list|)
expr_stmt|;
name|remoteConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|included
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
expr_stmt|;
name|excluded
operator|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"exclude.test.bar"
argument_list|)
expr_stmt|;
name|localSession
operator|=
name|localConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|remoteSession
operator|=
name|remoteConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|NetworkConnector
name|connector
decl_stmt|;
specifier|protected
name|BrokerService
name|createLocalBroker
parameter_list|(
name|boolean
name|startNetworkConnector
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setMonitorConnectionSplits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDataDirectoryFile
argument_list|(
name|tempFolder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"localBroker"
argument_list|)
expr_stmt|;
name|connector
operator|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
literal|"static:(tcp://localhost:61617)"
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setName
argument_list|(
literal|"networkConnector"
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDynamicOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDecreaseNetworkConsumerPriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setConduitSubscriptions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
name|isDuplex
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setUseVirtualDestSubs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDynamicallyIncludedDestinations
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|testQueueName
argument_list|)
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
name|testTopicName
argument_list|)
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"VirtualTopic.>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setExcludedDestinations
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
literal|"exclude.test.foo"
argument_list|)
argument_list|,
operator|new
name|ActiveMQTopic
argument_list|(
literal|"exclude.test.bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|startNetworkConnector
condition|)
block|{
name|brokerService
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
block|}
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61616"
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
specifier|protected
name|AdvisoryBroker
name|remoteAdvisoryBroker
decl_stmt|;
specifier|protected
name|BrokerService
name|createRemoteBroker
parameter_list|(
name|boolean
name|isUsevirtualDestinationSubscriptionsOnCreation
parameter_list|,
name|VirtualDestination
index|[]
name|remoteVirtualDests
parameter_list|)
throws|throws
name|Exception
block|{
name|BrokerService
name|brokerService
init|=
operator|new
name|BrokerService
argument_list|()
decl_stmt|;
name|brokerService
operator|.
name|setBrokerName
argument_list|(
literal|"remoteBroker"
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDataDirectoryFile
argument_list|(
name|tempFolder
operator|.
name|newFolder
argument_list|()
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setPlugins
argument_list|(
operator|new
name|BrokerPlugin
index|[]
block|{
operator|new
name|JavaRuntimeConfigurationPlugin
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualDestSubs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setUseVirtualDestSubsOnCreation
argument_list|(
name|isUsevirtualDestinationSubscriptionsOnCreation
argument_list|)
expr_stmt|;
comment|//apply interceptor before getting the broker, which will cause it to be built
if|if
condition|(
name|remoteVirtualDests
operator|!=
literal|null
condition|)
block|{
name|VirtualDestinationInterceptor
name|interceptor
init|=
operator|new
name|VirtualDestinationInterceptor
argument_list|()
decl_stmt|;
name|interceptor
operator|.
name|setVirtualDestinations
argument_list|(
name|remoteVirtualDests
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|setDestinationInterceptors
argument_list|(
operator|new
name|DestinationInterceptor
index|[]
block|{
name|interceptor
block|}
argument_list|)
expr_stmt|;
block|}
name|runtimeBroker
operator|=
operator|(
name|JavaRuntimeConfigurationBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|JavaRuntimeConfigurationBroker
operator|.
name|class
argument_list|)
expr_stmt|;
name|remoteAdvisoryBroker
operator|=
operator|(
name|AdvisoryBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AdvisoryBroker
operator|.
name|class
argument_list|)
expr_stmt|;
name|NetworkConnector
name|connector
init|=
operator|new
name|DiscoveryNetworkConnector
argument_list|(
operator|new
name|URI
argument_list|(
literal|"static:(tcp://localhost:61616)"
argument_list|)
argument_list|)
decl_stmt|;
name|brokerService
operator|.
name|addNetworkConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|brokerService
operator|.
name|addConnector
argument_list|(
literal|"tcp://localhost:61617"
argument_list|)
expr_stmt|;
return|return
name|brokerService
return|;
block|}
specifier|protected
name|CompositeTopic
name|createCompositeTopic
parameter_list|(
name|String
name|name
parameter_list|,
name|ActiveMQDestination
modifier|...
name|forwardTo
parameter_list|)
block|{
name|CompositeTopic
name|compositeTopic
init|=
operator|new
name|CompositeTopic
argument_list|()
decl_stmt|;
name|compositeTopic
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|compositeTopic
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|compositeTopic
operator|.
name|setForwardTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|forwardTo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|compositeTopic
return|;
block|}
specifier|protected
name|CompositeQueue
name|createCompositeQueue
parameter_list|(
name|String
name|name
parameter_list|,
name|ActiveMQDestination
modifier|...
name|forwardTo
parameter_list|)
block|{
name|CompositeQueue
name|compositeQueue
init|=
operator|new
name|CompositeQueue
argument_list|()
decl_stmt|;
name|compositeQueue
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|compositeQueue
operator|.
name|setForwardOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|compositeQueue
operator|.
name|setForwardTo
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|forwardTo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|compositeQueue
return|;
block|}
specifier|protected
name|void
name|waitForConsumerCount
parameter_list|(
specifier|final
name|DestinationStatistics
name|destinationStatistics
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
comment|//should only be 1 for the composite destination creation
return|return
name|count
operator|==
name|destinationStatistics
operator|.
name|getConsumers
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|waitForDispatchFromLocalBroker
parameter_list|(
specifier|final
name|DestinationStatistics
name|destinationStatistics
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|count
operator|==
name|destinationStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
operator|&&
name|count
operator|==
name|destinationStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
operator|&&
name|count
operator|==
name|destinationStatistics
operator|.
name|getForwards
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MessageConsumer
name|getVirtualDestinationAdvisoryConsumer
parameter_list|(
name|String
name|topic
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|remoteSession
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getVirtualDestinationConsumerAdvisoryTopic
argument_list|(
operator|new
name|ActiveMQTopic
argument_list|(
name|topic
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|MessageConsumer
name|getQueueVirtualDestinationAdvisoryConsumer
parameter_list|(
name|String
name|queue
parameter_list|)
throws|throws
name|JMSException
block|{
return|return
name|remoteSession
operator|.
name|createConsumer
argument_list|(
name|AdvisorySupport
operator|.
name|getVirtualDestinationConsumerAdvisoryTopic
argument_list|(
operator|new
name|ActiveMQQueue
argument_list|(
name|queue
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|assertLocalBrokerStatistics
parameter_list|(
specifier|final
name|DestinationStatistics
name|localStatistics
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"local broker dest stat dispatched"
argument_list|,
name|count
argument_list|,
name|localStatistics
operator|.
name|getDispatched
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"local broker dest stat dequeues"
argument_list|,
name|count
argument_list|,
name|localStatistics
operator|.
name|getDequeues
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"local broker dest stat forwards"
argument_list|,
name|count
argument_list|,
name|localStatistics
operator|.
name|getForwards
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertRemoteAdvisoryCount
parameter_list|(
specifier|final
name|MessageConsumer
name|advisoryConsumer
parameter_list|,
specifier|final
name|int
name|count
parameter_list|)
throws|throws
name|JMSException
block|{
name|int
name|available
init|=
literal|0
decl_stmt|;
name|ActiveMQMessage
name|message
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|message
operator|=
operator|(
name|ActiveMQMessage
operator|)
name|advisoryConsumer
operator|.
name|receive
argument_list|(
literal|1000
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|available
operator|++
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"advisory data structure: {}"
argument_list|,
name|message
operator|.
name|getDataStructure
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|available
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertRemoteAdvisoryCount
parameter_list|(
specifier|final
name|MessageConsumer
name|advisoryConsumer
parameter_list|,
specifier|final
name|int
name|isSubOnCreationCount
parameter_list|,
specifier|final
name|int
name|isNotSubOnCreationCount
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|isUseVirtualDestSubsOnCreation
condition|)
block|{
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
name|isSubOnCreationCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertRemoteAdvisoryCount
argument_list|(
name|advisoryConsumer
argument_list|,
name|isNotSubOnCreationCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|void
name|assertAdvisoryBrokerCounts
parameter_list|(
name|int
name|virtualDestinationsCount
parameter_list|,
name|int
name|virtualDestinationConsumersCount
parameter_list|,
name|int
name|brokerConsumerDestsCount
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|virtualDestinationsField
init|=
name|AdvisoryBroker
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"virtualDestinations"
argument_list|)
decl_stmt|;
name|Field
name|virtualDestinationConsumersField
init|=
name|AdvisoryBroker
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"virtualDestinationConsumers"
argument_list|)
decl_stmt|;
name|Field
name|brokerConsumerDestsField
init|=
name|AdvisoryBroker
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"brokerConsumerDests"
argument_list|)
decl_stmt|;
name|virtualDestinationsField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|virtualDestinationConsumersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|brokerConsumerDestsField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|VirtualDestination
argument_list|>
name|virtualDestinations
init|=
operator|(
name|Set
argument_list|<
name|VirtualDestination
argument_list|>
operator|)
name|virtualDestinationsField
operator|.
name|get
argument_list|(
name|remoteAdvisoryBroker
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|ConsumerInfo
argument_list|,
name|VirtualDestination
argument_list|>
name|virtualDestinationConsumers
init|=
operator|(
name|ConcurrentMap
argument_list|<
name|ConsumerInfo
argument_list|,
name|VirtualDestination
argument_list|>
operator|)
name|virtualDestinationConsumersField
operator|.
name|get
argument_list|(
name|remoteAdvisoryBroker
argument_list|)
decl_stmt|;
name|ConcurrentMap
argument_list|<
name|Object
argument_list|,
name|ConsumerInfo
argument_list|>
name|brokerConsumerDests
init|=
operator|(
name|ConcurrentMap
argument_list|<
name|Object
argument_list|,
name|ConsumerInfo
argument_list|>
operator|)
name|brokerConsumerDestsField
operator|.
name|get
argument_list|(
name|remoteAdvisoryBroker
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|virtualDestinationsCount
argument_list|,
name|virtualDestinations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|virtualDestinationConsumersCount
argument_list|,
name|virtualDestinationConsumers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|brokerConsumerDestsCount
argument_list|,
name|brokerConsumerDests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

