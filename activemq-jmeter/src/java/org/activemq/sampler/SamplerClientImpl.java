begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|sampler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jmeter
operator|.
name|util
operator|.
name|JMeterUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jorphan
operator|.
name|logging
operator|.
name|LoggingManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|SamplerClientImpl
implements|implements
name|SamplerClient
block|{
specifier|private
specifier|static
name|Logger
name|log
init|=
name|LoggingManager
operator|.
name|getLoggerForClass
argument_list|()
decl_stmt|;
specifier|private
name|byte
name|eolByte
init|=
operator|(
name|byte
operator|)
name|JMeterUtils
operator|.
name|getPropDefault
argument_list|(
literal|"tcp.prod.eolByte"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Constructor for the ProducerClientImpl object.      */
specifier|public
name|SamplerClientImpl
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using eolByte="
operator|+
name|eolByte
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs "setuptest".      */
specifier|public
name|void
name|setupTest
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"setuptest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Logs "teardowntest".      */
specifier|public
name|void
name|teardownTest
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"teardowntest"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes String object to OutputStream object.      *      * @param os - OutputStream object.      * @param s - String object.      */
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|String
name|s
parameter_list|)
block|{
try|try
block|{
name|os
operator|.
name|write
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Write error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Wrote: "
operator|+
name|s
argument_list|)
expr_stmt|;
return|return;
block|}
comment|/**      * Converts InputStream object to String.      *      * @param is - InputSream object.      * @return contains information from InputStream object parameter.      */
specifier|public
name|String
name|read
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|w
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|x
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|w
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|eolByte
operator|!=
literal|0
operator|)
operator|&&
operator|(
name|buffer
index|[
name|x
operator|-
literal|1
index|]
operator|==
name|eolByte
operator|)
condition|)
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|e
parameter_list|)
block|{
comment|// drop out to handle buffer
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Read error:"
operator|+
name|e
argument_list|)
expr_stmt|;
return|return
literal|""
return|;
block|}
comment|// do we need to close byte array (or flush it?)
name|log
operator|.
name|debug
argument_list|(
literal|"Read: "
operator|+
name|w
operator|.
name|size
argument_list|()
operator|+
literal|"\n"
operator|+
name|w
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|w
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Non-functional implementation of the write method of      * the implementated class.      *      * @param os - OutputStream object.      * @param is - InputStream.      */
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|os
parameter_list|,
name|InputStream
name|is
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return;
block|}
comment|/**      * @return Returns the eolByte instance variable.      */
specifier|public
name|byte
name|getEolByte
parameter_list|()
block|{
return|return
name|eolByte
return|;
block|}
comment|/**      * Sets value to eolByte instance variable.      *      * @param eolByte - The eolByte to set..      */
specifier|public
name|void
name|setEolByte
parameter_list|(
name|byte
name|eolByte
parameter_list|)
block|{
name|this
operator|.
name|eolByte
operator|=
name|eolByte
expr_stmt|;
block|}
block|}
end_class

end_unit

