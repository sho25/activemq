begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|perf
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|DeliveryMode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Topic
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|network
operator|.
name|NetworkConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|xbean
operator|.
name|BrokerFactoryBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xbean
operator|.
name|spring
operator|.
name|context
operator|.
name|ClassPathXmlApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|ClassPathResource
import|;
end_import

begin_class
specifier|public
class|class
name|NetworkedSyncTest
extends|extends
name|TestCase
block|{
comment|// constants
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10000
decl_stmt|;
comment|//100000;
specifier|public
specifier|final
specifier|static
name|String
name|config
init|=
literal|"org/apache/activemq/perf/networkSync.xml"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|broker1URL
init|=
literal|"tcp://localhost:61616"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|broker2URL
init|=
literal|"tcp://localhost:62616"
decl_stmt|;
specifier|private
specifier|final
name|String
name|networkConnectorURL
init|=
literal|"static://("
operator|+
name|broker2URL
operator|+
literal|")"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NetworkedSyncTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|BrokerService
name|broker1
init|=
literal|null
decl_stmt|;
name|BrokerService
name|broker2
init|=
literal|null
decl_stmt|;
name|NetworkConnector
name|connector
init|=
literal|null
decl_stmt|;
comment|/**      * @param name      */
specifier|public
name|NetworkedSyncTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Testcase started."
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|NetworkedSyncTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws java.lang.Exception      */
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"setUp() called."
argument_list|)
expr_stmt|;
name|ClassPathXmlApplicationContext
name|context1
init|=
literal|null
decl_stmt|;
name|BrokerFactoryBean
name|brokerFactory
init|=
operator|new
name|BrokerFactoryBean
argument_list|(
operator|new
name|ClassPathResource
argument_list|(
name|config
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|brokerFactory
argument_list|)
expr_stmt|;
comment|/* start up first broker instance */
try|try
block|{
comment|// resolve broker1
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|NetworkedSyncTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|context1
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|broker1
operator|=
operator|(
name|BrokerService
operator|)
name|context1
operator|.
name|getBean
argument_list|(
literal|"broker1"
argument_list|)
expr_stmt|;
comment|// start the broker
if|if
condition|(
operator|!
name|broker1
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker broker1 not yet started. Kicking it off now."
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker broker1 already started. Not kicking it off a second time."
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
comment|// brokerService.stop();
block|}
comment|/* start up second broker instance */
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|NetworkedSyncTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|context1
operator|=
operator|new
name|ClassPathXmlApplicationContext
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|broker2
operator|=
operator|(
name|BrokerService
operator|)
name|context1
operator|.
name|getBean
argument_list|(
literal|"broker2"
argument_list|)
expr_stmt|;
comment|// start the broker
if|if
condition|(
operator|!
name|broker2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker broker2 not yet started. Kicking it off now."
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker broker2 already started. Not kicking it off a second time."
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
comment|// setup network connector from broker1 to broker2
name|connector
operator|=
name|broker1
operator|.
name|addNetworkConnector
argument_list|(
name|networkConnectorURL
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setBrokerName
argument_list|(
name|broker1
operator|.
name|getBrokerName
argument_list|()
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setDuplex
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Network connector created."
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws java.lang.Exception      */
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"tearDown() called."
argument_list|)
expr_stmt|;
if|if
condition|(
name|broker1
operator|!=
literal|null
operator|&&
name|broker1
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker1 still running, stopping it now."
argument_list|)
expr_stmt|;
name|broker1
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker1 not running, nothing to shutdown."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|broker2
operator|!=
literal|null
operator|&&
name|broker2
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker2 still running, stopping it now."
argument_list|)
expr_stmt|;
name|broker2
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Broker2 not running, nothing to shutdown."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMessageExchange
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMessageExchange() called."
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// create producer and consumer threads
name|Thread
name|producer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Producer
argument_list|()
argument_list|)
decl_stmt|;
name|Thread
name|consumer
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Consumer
argument_list|()
argument_list|)
decl_stmt|;
comment|// start threads
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// wait for threads to finish
name|producer
operator|.
name|join
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|join
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Duration: "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**  * Message producer running as a separate thread, connecting to broker1  *  * @author tmielke  *  */
end_comment

begin_class
class|class
name|Producer
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Producer
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * connect to broker and constantly send messages      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|MessageProducer
name|producer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|NetworkedSyncTest
operator|.
name|broker1URL
argument_list|)
decl_stmt|;
name|connection
operator|=
name|amq
operator|.
name|createConnection
argument_list|()
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Topic
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|producer
operator|.
name|setDeliveryMode
argument_list|(
name|DeliveryMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|long
name|counter
init|=
literal|0
decl_stmt|;
comment|// Create and send message
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NetworkedSyncTest
operator|.
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
literal|"Hello world! From: "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" : "
operator|+
name|this
operator|.
name|hashCode
argument_list|()
operator|+
literal|":"
operator|+
name|counter
decl_stmt|;
name|TextMessage
name|message
init|=
name|session
operator|.
name|createTextMessage
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|producer
operator|.
name|send
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"sent "
operator|+
name|counter
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|producer
operator|!=
literal|null
condition|)
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Problem closing down JMS objects: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_comment
comment|/*  * * Message consumer running as a separate thread, connecting to broker2  * @author tmielke  *  */
end_comment

begin_class
class|class
name|Consumer
implements|implements
name|Runnable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Consumer
operator|.
name|class
argument_list|)
decl_stmt|;
empty_stmt|;
comment|/**      * connect to broker and receive messages      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ActiveMQConnectionFactory
name|amq
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|NetworkedSyncTest
operator|.
name|broker2URL
argument_list|)
decl_stmt|;
name|connection
operator|=
name|amq
operator|.
name|createConnection
argument_list|()
expr_stmt|;
comment|// need to set clientID when using durable subscription.
name|connection
operator|.
name|setClientID
argument_list|(
literal|"tmielke"
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setExceptionListener
argument_list|(
operator|new
name|javax
operator|.
name|jms
operator|.
name|ExceptionListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|javax
operator|.
name|jms
operator|.
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
name|session
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|Destination
name|destination
init|=
name|session
operator|.
name|createTopic
argument_list|(
literal|"TEST.FOO"
argument_list|)
decl_stmt|;
name|consumer
operator|=
name|session
operator|.
name|createDurableSubscriber
argument_list|(
operator|(
name|Topic
operator|)
name|destination
argument_list|,
literal|"tmielke"
argument_list|)
expr_stmt|;
name|long
name|counter
init|=
literal|0
decl_stmt|;
comment|// Wait for a message
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NetworkedSyncTest
operator|.
name|MESSAGE_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Message
name|message2
init|=
name|consumer
operator|.
name|receive
argument_list|()
decl_stmt|;
if|if
condition|(
name|message2
operator|instanceof
name|TextMessage
condition|)
block|{
name|TextMessage
name|textMessage
init|=
operator|(
name|TextMessage
operator|)
name|message2
decl_stmt|;
name|textMessage
operator|.
name|getText
argument_list|()
expr_stmt|;
comment|// logger.info("Received: " + text);
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Received message of unsupported type. Expecting TextMessage. "
operator|+
name|message2
argument_list|)
expr_stmt|;
block|}
name|counter
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|counter
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"received "
operator|+
name|counter
operator|+
literal|" messages"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in Consumer: "
operator|+
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error closing down JMS objects: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

