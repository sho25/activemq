begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|console
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|IntrospectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ReflectionException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_class
specifier|public
class|class
name|MBeansAttributeQueryFilter
extends|extends
name|AbstractQueryFilter
block|{
specifier|public
specifier|static
specifier|final
name|String
name|KEY_OBJECT_NAME_ATTRIBUTE
init|=
literal|"Attribute:ObjectName:"
decl_stmt|;
specifier|private
name|JMXServiceURL
name|jmxServiceUrl
decl_stmt|;
specifier|private
name|Set
name|attribView
decl_stmt|;
comment|/**      * Create an mbean attributes query filter that is able to select specific      * mbean attributes based on the object name to get.      *       * @param jmxServiceUrl - JMX service url to connect to.      * @param attribView - the attributes to extract      * @param next - the next query filter      */
specifier|public
name|MBeansAttributeQueryFilter
parameter_list|(
name|JMXServiceURL
name|jmxServiceUrl
parameter_list|,
name|Set
name|attribView
parameter_list|,
name|MBeansObjectNameQueryFilter
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|jmxServiceUrl
operator|=
name|jmxServiceUrl
expr_stmt|;
name|this
operator|.
name|attribView
operator|=
name|attribView
expr_stmt|;
block|}
comment|/**      * Filter the query by retrieving the attributes specified, this will modify      * the collection to a list of AttributeList      *       * @param queries - query list      * @return List of AttributeList, which includes the ObjectName, which has a      *         key of MBeansAttributeQueryFilter.KEY_OBJECT_NAME_ATTRIBUTE      * @throws Exception      */
specifier|public
name|List
name|query
parameter_list|(
name|List
name|queries
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getMBeanAttributesCollection
argument_list|(
name|next
operator|.
name|query
argument_list|(
name|queries
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Retrieve the specified attributes of the mbean      *       * @param result - collection of ObjectInstances and/or ObjectNames      * @return List of AttributeList      * @throws IOException      * @throws ReflectionException      * @throws InstanceNotFoundException      * @throws NoSuchMethodException      */
specifier|protected
name|List
name|getMBeanAttributesCollection
parameter_list|(
name|Collection
name|result
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReflectionException
throws|,
name|InstanceNotFoundException
throws|,
name|NoSuchMethodException
throws|,
name|IntrospectionException
block|{
name|List
name|mbeansCollection
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|result
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|mbean
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|mbean
operator|instanceof
name|ObjectInstance
condition|)
block|{
name|mbeansCollection
operator|.
name|add
argument_list|(
name|getMBeanAttributes
argument_list|(
operator|(
operator|(
name|ObjectInstance
operator|)
name|mbean
operator|)
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|attribView
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mbean
operator|instanceof
name|ObjectName
condition|)
block|{
name|mbeansCollection
operator|.
name|add
argument_list|(
name|getMBeanAttributes
argument_list|(
operator|(
name|ObjectName
operator|)
name|mbean
argument_list|,
name|attribView
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchMethodException
argument_list|(
literal|"Cannot get the mbean attributes for class: "
operator|+
name|mbean
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|mbeansCollection
return|;
block|}
comment|/**      * Retrieve the specified attributes of the mbean      *       * @param obj - mbean ObjectInstance      * @param attrView - list of attributes to retrieve      * @return AttributeList for the mbean      * @throws ReflectionException      * @throws InstanceNotFoundException      * @throws IOException      */
specifier|protected
name|AttributeList
name|getMBeanAttributes
parameter_list|(
name|ObjectInstance
name|obj
parameter_list|,
name|Set
name|attrView
parameter_list|)
throws|throws
name|ReflectionException
throws|,
name|InstanceNotFoundException
throws|,
name|IOException
throws|,
name|IntrospectionException
block|{
return|return
name|getMBeanAttributes
argument_list|(
name|obj
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|attrView
argument_list|)
return|;
block|}
comment|/**      * Retrieve the specified attributes of the mbean      *       * @param objName - mbean ObjectName      * @param attrView - list of attributes to retrieve      * @return AttributeList for the mbean      * @throws IOException      * @throws ReflectionException      * @throws InstanceNotFoundException      */
specifier|protected
name|AttributeList
name|getMBeanAttributes
parameter_list|(
name|ObjectName
name|objName
parameter_list|,
name|Set
name|attrView
parameter_list|)
throws|throws
name|IOException
throws|,
name|ReflectionException
throws|,
name|InstanceNotFoundException
throws|,
name|IntrospectionException
block|{
name|JMXConnector
name|jmxConnector
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|jmxServiceUrl
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|server
init|=
name|jmxConnector
operator|.
name|getMBeanServerConnection
argument_list|()
decl_stmt|;
comment|// If no attribute view specified, get all attributes
name|String
index|[]
name|attribs
decl_stmt|;
if|if
condition|(
name|attrView
operator|==
literal|null
operator|||
name|attrView
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MBeanAttributeInfo
index|[]
name|infos
init|=
name|server
operator|.
name|getMBeanInfo
argument_list|(
name|objName
argument_list|)
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|attribs
operator|=
operator|new
name|String
index|[
name|infos
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|infos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|infos
index|[
name|i
index|]
operator|.
name|isReadable
argument_list|()
condition|)
block|{
name|attribs
index|[
name|i
index|]
operator|=
name|infos
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Get selected attributes
block|}
else|else
block|{
name|attribs
operator|=
operator|new
name|String
index|[
name|attrView
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|attrView
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|attribs
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|AttributeList
name|attribList
init|=
name|server
operator|.
name|getAttributes
argument_list|(
name|objName
argument_list|,
name|attribs
argument_list|)
decl_stmt|;
name|jmxConnector
operator|.
name|close
argument_list|()
expr_stmt|;
name|attribList
operator|.
name|add
argument_list|(
literal|0
argument_list|,
operator|new
name|Attribute
argument_list|(
name|KEY_OBJECT_NAME_ATTRIBUTE
argument_list|,
name|objName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|attribList
return|;
block|}
block|}
end_class

end_unit

