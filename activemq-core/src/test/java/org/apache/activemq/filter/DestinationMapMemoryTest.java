begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_class
specifier|public
class|class
name|DestinationMapMemoryTest
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testLongDestinationPath
parameter_list|()
throws|throws
name|Exception
block|{
name|ActiveMQTopic
name|d1
init|=
operator|new
name|ActiveMQTopic
argument_list|(
literal|"1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18"
argument_list|)
decl_stmt|;
name|DestinationMap
name|map
init|=
operator|new
name|DestinationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|d1
argument_list|,
name|d1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testVeryLongestinationPaths
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
literal|"1"
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|2
init|;
name|j
operator|<=
name|i
condition|;
name|j
operator|++
control|)
block|{
name|name
operator|+=
literal|"."
operator|+
name|j
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking: "
operator|+
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|ActiveMQDestination
name|d1
init|=
name|createDestination
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|DestinationMap
name|map
init|=
operator|new
name|DestinationMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|d1
argument_list|,
name|d1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Destination name too long: "
operator|+
name|name
operator|+
literal|" : "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|ActiveMQDestination
name|createDestination
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|ActiveMQTopic
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

