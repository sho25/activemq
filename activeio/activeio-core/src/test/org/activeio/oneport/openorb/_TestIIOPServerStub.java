begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
package|;
end_package

begin_comment
comment|/**  * Interface definition: TestIIOPServer.  *   * @author OpenORB Compiler  */
end_comment

begin_class
specifier|public
class|class
name|_TestIIOPServerStub
extends|extends
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ObjectImpl
implements|implements
name|TestIIOPServer
block|{
specifier|static
specifier|final
name|String
index|[]
name|_ids_list
init|=
block|{
literal|"IDL:org/activeio/oneport/TestIIOPServer:1.0"
block|}
decl_stmt|;
specifier|public
name|String
index|[]
name|_ids
parameter_list|()
block|{
return|return
name|_ids_list
return|;
block|}
specifier|private
specifier|final
specifier|static
name|Class
name|_opsClass
init|=
name|org
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServerOperations
operator|.
name|class
decl_stmt|;
comment|/**      * Operation test      */
specifier|public
name|void
name|test
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|_is_local
argument_list|()
condition|)
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|InputStream
name|_input
init|=
literal|null
decl_stmt|;
try|try
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|OutputStream
name|_output
init|=
name|this
operator|.
name|_request
argument_list|(
literal|"test"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|_input
operator|=
name|this
operator|.
name|_invoke
argument_list|(
name|_output
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|RemarshalException
name|_exception
parameter_list|)
block|{
continue|continue;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ApplicationException
name|_exception
parameter_list|)
block|{
name|String
name|_exception_id
init|=
name|_exception
operator|.
name|getId
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|UNKNOWN
argument_list|(
literal|"Unexpected User Exception: "
operator|+
name|_exception_id
argument_list|)
throw|;
block|}
finally|finally
block|{
name|this
operator|.
name|_releaseReply
argument_list|(
name|_input
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|omg
operator|.
name|CORBA
operator|.
name|portable
operator|.
name|ServantObject
name|_so
init|=
name|_servant_preinvoke
argument_list|(
literal|"test"
argument_list|,
name|_opsClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|_so
operator|==
literal|null
condition|)
continue|continue;
name|org
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServerOperations
name|_self
init|=
operator|(
name|org
operator|.
name|activeio
operator|.
name|oneport
operator|.
name|openorb
operator|.
name|TestIIOPServerOperations
operator|)
name|_so
operator|.
name|servant
decl_stmt|;
try|try
block|{
name|_self
operator|.
name|test
argument_list|()
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|_servant_postinvoke
argument_list|(
name|_so
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

