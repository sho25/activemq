begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|page
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|store
operator|.
name|kahadb
operator|.
name|disk
operator|.
name|util
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TransactionTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
name|long
name|NUMBER_OF_BYTES
init|=
literal|10485760L
decl_stmt|;
specifier|static
class|class
name|TransactionTestMarshaller
implements|implements
name|Marshaller
argument_list|<
name|List
argument_list|<
name|Byte
argument_list|>
argument_list|>
block|{
specifier|public
specifier|static
name|TransactionTestMarshaller
name|INSTANCE
init|=
operator|new
name|TransactionTestMarshaller
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|writePayload
parameter_list|(
specifier|final
name|List
argument_list|<
name|Byte
argument_list|>
name|object
parameter_list|,
specifier|final
name|DataOutput
name|dataOut
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Byte
name|b
range|:
name|object
control|)
block|{
name|dataOut
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Byte
argument_list|>
name|readPayload
parameter_list|(
specifier|final
name|DataInput
name|dataIn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Byte
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_BYTES
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|dataIn
operator|.
name|readByte
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFixedSize
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDeepCopySupported
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Byte
argument_list|>
name|deepCopy
parameter_list|(
specifier|final
name|List
argument_list|<
name|Byte
argument_list|>
name|source
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|source
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|testDeleteTempFileWhenRollback
parameter_list|()
throws|throws
name|IOException
block|{
name|PageFile
name|pf
init|=
operator|new
name|PageFile
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test-data"
argument_list|)
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|pf
operator|.
name|delete
argument_list|()
expr_stmt|;
name|pf
operator|.
name|setEnablePageCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pf
operator|.
name|load
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"maxKahaDBTxSize"
argument_list|,
literal|""
operator|+
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
name|pf
operator|.
name|tx
argument_list|()
decl_stmt|;
name|Page
argument_list|<
name|List
argument_list|<
name|Byte
argument_list|>
argument_list|>
name|page
init|=
name|tx
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|page
operator|.
name|set
argument_list|(
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|page
argument_list|,
name|TransactionTestMarshaller
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
name|tx
operator|.
name|getTempFile
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|pf
operator|.
name|flush
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHugeTransaction
parameter_list|()
throws|throws
name|IOException
block|{
name|PageFile
name|pf
init|=
operator|new
name|PageFile
argument_list|(
operator|new
name|File
argument_list|(
literal|"target/test-data"
argument_list|)
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|pf
operator|.
name|delete
argument_list|()
expr_stmt|;
name|pf
operator|.
name|setEnablePageCaching
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|pf
operator|.
name|load
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"maxKahaDBTxSize"
argument_list|,
literal|""
operator|+
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
name|pf
operator|.
name|tx
argument_list|()
decl_stmt|;
name|Page
argument_list|<
name|List
argument_list|<
name|Byte
argument_list|>
argument_list|>
name|page
init|=
name|tx
operator|.
name|allocate
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Byte
argument_list|>
name|bytes
init|=
name|getBytes
argument_list|()
decl_stmt|;
name|page
operator|.
name|set
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|tx
operator|.
name|store
argument_list|(
name|page
argument_list|,
name|TransactionTestMarshaller
operator|.
name|INSTANCE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|pf
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|=
name|pf
operator|.
name|tx
argument_list|()
expr_stmt|;
name|page
operator|=
name|tx
operator|.
name|load
argument_list|(
name|page
operator|.
name|getPageId
argument_list|()
argument_list|,
name|TransactionTestMarshaller
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_BYTES
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|page
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Byte
argument_list|>
name|getBytes
parameter_list|()
block|{
name|List
argument_list|<
name|Byte
argument_list|>
name|bytes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
name|b
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUMBER_OF_BYTES
condition|;
name|i
operator|++
control|)
block|{
name|bytes
operator|.
name|add
argument_list|(
name|b
operator|++
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
block|}
end_class

end_unit

