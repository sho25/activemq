begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|camel
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|JMSExceptionSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|PollingConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|camel
operator|.
name|Processor
import|;
end_import

begin_comment
comment|/**  * A JMS {@link javax.jms.MessageConsumer} which consumes message exchanges from  * a Camel {@link Endpoint}  *   * @version $Revision: $  */
end_comment

begin_class
specifier|public
class|class
name|CamelMessageConsumer
implements|implements
name|MessageConsumer
block|{
specifier|private
specifier|final
name|CamelDestination
name|destination
decl_stmt|;
specifier|private
specifier|final
name|Endpoint
name|endpoint
decl_stmt|;
specifier|private
specifier|final
name|ActiveMQSession
name|session
decl_stmt|;
specifier|private
specifier|final
name|String
name|messageSelector
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|noLocal
decl_stmt|;
specifier|private
name|MessageListener
name|messageListener
decl_stmt|;
specifier|private
name|Consumer
name|consumer
decl_stmt|;
specifier|private
name|PollingConsumer
name|pollingConsumer
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|public
name|CamelMessageConsumer
parameter_list|(
name|CamelDestination
name|destination
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|,
name|ActiveMQSession
name|session
parameter_list|,
name|String
name|messageSelector
parameter_list|,
name|boolean
name|noLocal
parameter_list|)
block|{
name|this
operator|.
name|destination
operator|=
name|destination
expr_stmt|;
name|this
operator|.
name|endpoint
operator|=
name|endpoint
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
name|this
operator|.
name|messageSelector
operator|=
name|messageSelector
expr_stmt|;
name|this
operator|.
name|noLocal
operator|=
name|noLocal
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|JMSException
block|{
if|if
condition|(
operator|!
name|closed
condition|)
block|{
name|closed
operator|=
literal|true
expr_stmt|;
try|try
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
name|consumer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pollingConsumer
operator|!=
literal|null
condition|)
block|{
name|pollingConsumer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|MessageListener
name|getMessageListener
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|messageListener
return|;
block|}
specifier|public
name|void
name|setMessageListener
parameter_list|(
name|MessageListener
name|messageListener
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|messageListener
operator|=
name|messageListener
expr_stmt|;
if|if
condition|(
name|messageListener
operator|!=
literal|null
operator|&&
name|consumer
operator|==
literal|null
condition|)
block|{
name|consumer
operator|=
name|createConsumer
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Message
name|receive
parameter_list|()
throws|throws
name|JMSException
block|{
name|Exchange
name|exchange
init|=
name|getPollingConsumer
argument_list|()
operator|.
name|receive
argument_list|()
decl_stmt|;
return|return
name|createMessage
argument_list|(
name|exchange
argument_list|)
return|;
block|}
specifier|public
name|Message
name|receive
parameter_list|(
name|long
name|timeoutMillis
parameter_list|)
throws|throws
name|JMSException
block|{
name|Exchange
name|exchange
init|=
name|getPollingConsumer
argument_list|()
operator|.
name|receive
argument_list|(
name|timeoutMillis
argument_list|)
decl_stmt|;
return|return
name|createMessage
argument_list|(
name|exchange
argument_list|)
return|;
block|}
specifier|public
name|Message
name|receiveNoWait
parameter_list|()
throws|throws
name|JMSException
block|{
name|Exchange
name|exchange
init|=
name|getPollingConsumer
argument_list|()
operator|.
name|receiveNoWait
argument_list|()
decl_stmt|;
return|return
name|createMessage
argument_list|(
name|exchange
argument_list|)
return|;
block|}
comment|// Properties
comment|// -----------------------------------------------------------------------
specifier|public
name|CamelDestination
name|getDestination
parameter_list|()
block|{
return|return
name|destination
return|;
block|}
specifier|public
name|Endpoint
name|getEndpoint
parameter_list|()
block|{
return|return
name|endpoint
return|;
block|}
specifier|public
name|String
name|getMessageSelector
parameter_list|()
block|{
return|return
name|messageSelector
return|;
block|}
specifier|public
name|boolean
name|isNoLocal
parameter_list|()
block|{
return|return
name|noLocal
return|;
block|}
specifier|public
name|ActiveMQSession
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
comment|// Implementation methods
comment|// -----------------------------------------------------------------------
specifier|protected
name|PollingConsumer
name|getPollingConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
if|if
condition|(
name|pollingConsumer
operator|==
literal|null
condition|)
block|{
name|pollingConsumer
operator|=
name|endpoint
operator|.
name|createPollingConsumer
argument_list|()
expr_stmt|;
name|pollingConsumer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
return|return
name|pollingConsumer
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|JMSException
block|{
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|Message
name|message
init|=
name|destination
operator|.
name|getBinding
argument_list|()
operator|.
name|makeJmsMessage
argument_list|(
name|exchange
argument_list|,
name|session
argument_list|)
decl_stmt|;
return|return
name|message
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|Consumer
name|createConsumer
parameter_list|()
throws|throws
name|JMSException
block|{
try|try
block|{
name|Consumer
name|answer
init|=
name|endpoint
operator|.
name|createConsumer
argument_list|(
operator|new
name|Processor
argument_list|()
block|{
specifier|public
name|void
name|process
parameter_list|(
name|Exchange
name|exchange
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|message
init|=
name|createMessage
argument_list|(
name|exchange
argument_list|)
decl_stmt|;
name|getMessageListener
argument_list|()
operator|.
name|onMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|answer
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|answer
return|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|JMSExceptionSupport
operator|.
name|create
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|checkClosed
parameter_list|()
throws|throws
name|javax
operator|.
name|jms
operator|.
name|IllegalStateException
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"The producer is closed"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

