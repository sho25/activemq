begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|sasl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ConnectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|AuthenticationBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|amqp
operator|.
name|AmqpTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|qpid
operator|.
name|proton
operator|.
name|engine
operator|.
name|Sasl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * SASL Authenitcation engine.  */
end_comment

begin_class
specifier|public
class|class
name|AmqpAuthenticator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AmqpAuthenticator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|mechanisms
init|=
operator|new
name|String
index|[]
block|{
literal|"PLAIN"
block|,
literal|"ANONYMOUS"
block|}
decl_stmt|;
specifier|private
specifier|final
name|BrokerService
name|brokerService
decl_stmt|;
specifier|private
specifier|final
name|AmqpTransport
name|transport
decl_stmt|;
specifier|private
specifier|final
name|Sasl
name|sasl
decl_stmt|;
specifier|private
name|AuthenticationBroker
name|authenticator
decl_stmt|;
specifier|public
name|AmqpAuthenticator
parameter_list|(
name|AmqpTransport
name|transport
parameter_list|,
name|Sasl
name|sasl
parameter_list|,
name|BrokerService
name|brokerService
parameter_list|)
block|{
name|this
operator|.
name|brokerService
operator|=
name|brokerService
expr_stmt|;
name|this
operator|.
name|transport
operator|=
name|transport
expr_stmt|;
name|this
operator|.
name|sasl
operator|=
name|sasl
expr_stmt|;
name|sasl
operator|.
name|setMechanisms
argument_list|(
name|mechanisms
argument_list|)
expr_stmt|;
name|sasl
operator|.
name|server
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return true if the SASL exchange has conpleted, regardless of success.      */
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
name|sasl
operator|.
name|getOutcome
argument_list|()
operator|!=
name|Sasl
operator|.
name|SaslOutcome
operator|.
name|PN_SASL_NONE
return|;
block|}
comment|/**      * @return the list of all SASL mechanisms that are supported curretnly.      */
specifier|public
name|String
index|[]
name|getSupportedMechanisms
parameter_list|()
block|{
return|return
name|mechanisms
return|;
block|}
specifier|public
name|void
name|processSaslExchange
parameter_list|(
name|ConnectionInfo
name|connectionInfo
parameter_list|)
block|{
if|if
condition|(
name|sasl
operator|.
name|getRemoteMechanisms
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|SaslMechanism
name|mechanism
init|=
name|getSaslMechanism
argument_list|(
name|sasl
operator|.
name|getRemoteMechanisms
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mechanism
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL [{}} Handshake started."
argument_list|,
name|mechanism
operator|.
name|getMechanismName
argument_list|()
argument_list|)
expr_stmt|;
name|mechanism
operator|.
name|processSaslStep
argument_list|(
name|sasl
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setUserName
argument_list|(
name|mechanism
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|connectionInfo
operator|.
name|setPassword
argument_list|(
name|mechanism
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tryAuthenticate
argument_list|(
name|connectionInfo
argument_list|,
name|transport
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
condition|)
block|{
name|sasl
operator|.
name|done
argument_list|(
name|Sasl
operator|.
name|SaslOutcome
operator|.
name|PN_SASL_OK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sasl
operator|.
name|done
argument_list|(
name|Sasl
operator|.
name|SaslOutcome
operator|.
name|PN_SASL_AUTH
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"SASL [{}} Handshake complete."
argument_list|,
name|mechanism
operator|.
name|getMechanismName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"SASL: could not find supported mechanism"
argument_list|)
expr_stmt|;
name|sasl
operator|.
name|done
argument_list|(
name|Sasl
operator|.
name|SaslOutcome
operator|.
name|PN_SASL_PERM
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//----- Internal implementation ------------------------------------------//
specifier|private
name|SaslMechanism
name|getSaslMechanism
parameter_list|(
name|String
index|[]
name|remoteMechanisms
parameter_list|)
block|{
name|String
name|primary
init|=
name|remoteMechanisms
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|primary
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"PLAIN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlainMechanism
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|primary
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ANONYMOUS"
argument_list|)
condition|)
block|{
return|return
operator|new
name|AnonymousMechanism
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|tryAuthenticate
parameter_list|(
name|ConnectionInfo
name|info
parameter_list|,
name|X509Certificate
index|[]
name|peerCertificates
parameter_list|)
block|{
try|try
block|{
return|return
name|getAuthenticator
argument_list|()
operator|.
name|authenticate
argument_list|(
name|info
operator|.
name|getUserName
argument_list|()
argument_list|,
name|info
operator|.
name|getPassword
argument_list|()
argument_list|,
name|peerCertificates
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|AuthenticationBroker
name|getAuthenticator
parameter_list|()
block|{
if|if
condition|(
name|authenticator
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|authenticator
operator|=
operator|(
name|AuthenticationBroker
operator|)
name|brokerService
operator|.
name|getBroker
argument_list|()
operator|.
name|getAdaptor
argument_list|(
name|AuthenticationBroker
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to lookup AuthenticationBroker from Broker, will use a default Noop version."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|authenticator
operator|==
literal|null
condition|)
block|{
name|authenticator
operator|=
operator|new
name|DefaultAuthenticationBroker
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|authenticator
return|;
block|}
specifier|private
class|class
name|DefaultAuthenticationBroker
implements|implements
name|AuthenticationBroker
block|{
annotation|@
name|Override
specifier|public
name|SecurityContext
name|authenticate
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|X509Certificate
index|[]
name|peerCertificates
parameter_list|)
throws|throws
name|SecurityException
block|{
return|return
operator|new
name|SecurityContext
argument_list|(
name|username
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Principal
argument_list|>
name|getPrincipals
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

