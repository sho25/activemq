begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright 2003-2005 Arthur van Hoff, Rick Blair  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|jmdns
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EventObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * ServiceEvent.  *  * @author Werner Randelshofer, Rick Blair  * @version %I%, %G%  */
end_comment

begin_class
specifier|public
class|class
name|ServiceEvent
extends|extends
name|EventObject
block|{
specifier|private
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ServiceEvent
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * The type name of the service.      */
specifier|private
name|String
name|type
decl_stmt|;
comment|/**      * The instance name of the service. Or null, if the event was      * fired to a service type listener.      */
specifier|private
name|String
name|name
decl_stmt|;
comment|/**      * The service info record, or null if the service could be be resolved.      * This is also null, if the event was fired to a service type listener.      */
specifier|private
name|ServiceInfo
name|info
decl_stmt|;
comment|/**      * Creates a new instance.      *      * @param source the JmDNS instance which originated the event.      * @param type   the type name of the service.      * @param name   the instance name of the service.      * @param info   the service info record, or null if the service could be be resolved.      */
specifier|public
name|ServiceEvent
parameter_list|(
name|JmDNS
name|source
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|name
parameter_list|,
name|ServiceInfo
name|info
parameter_list|)
block|{
name|super
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
comment|/**      * Returns the JmDNS instance which originated the event.      */
specifier|public
name|JmDNS
name|getDNS
parameter_list|()
block|{
return|return
operator|(
name|JmDNS
operator|)
name|getSource
argument_list|()
return|;
block|}
comment|/**      * Returns the fully qualified type of the service.      */
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/**      * Returns the instance name of the service.      * Always returns null, if the event is sent to a service type listener.      */
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**      * Returns the service info record, or null if the service could not be      * resolved.      * Always returns null, if the event is sent to a service type listener.      */
specifier|public
name|ServiceInfo
name|getInfo
parameter_list|()
block|{
return|return
name|info
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<"
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"> "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|super
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" name "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" type "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" info "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getInfo
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

