begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|TransportListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|journal
operator|.
name|DataFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|page
operator|.
name|PageFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBJournalLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBJournalUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBSlaveInit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBSlaveInitResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|replication
operator|.
name|pb
operator|.
name|PBClusterNodeStatus
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|kahadb
operator|.
name|store
operator|.
name|KahaDBStore
import|;
end_import

begin_class
specifier|public
class|class
name|ReplicationSlave
implements|implements
name|Service
implements|,
name|ClusterListener
implements|,
name|TransportListener
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TRANSFER_SESSIONS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ReplicationSlave
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReplicationService
name|replicationServer
decl_stmt|;
specifier|private
name|Transport
name|transport
decl_stmt|;
comment|// Used to bulk transfer the master state over to the slave..
specifier|private
specifier|final
name|Object
name|transferMutex
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|PBFileInfo
argument_list|>
name|transferQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|PBFileInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|TransferSession
argument_list|>
name|transferSessions
init|=
operator|new
name|LinkedList
argument_list|<
name|TransferSession
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|PBFileInfo
argument_list|>
name|bulkFiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PBFileInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PBSlaveInitResponse
name|initResponse
decl_stmt|;
specifier|private
name|boolean
name|online
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
comment|// Used to do real time journal updates..
name|int
name|journalUpdateFileId
decl_stmt|;
name|RandomAccessFile
name|journalUpateFile
decl_stmt|;
specifier|private
name|String
name|master
decl_stmt|;
specifier|public
name|ReplicationSlave
parameter_list|(
name|ReplicationService
name|replicationServer
parameter_list|)
block|{
name|this
operator|.
name|replicationServer
operator|=
name|replicationServer
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|onClusterChange
argument_list|(
name|replicationServer
operator|.
name|getClusterState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|doStop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doStart
parameter_list|()
throws|throws
name|Exception
throws|,
name|URISyntaxException
throws|,
name|IOException
block|{
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
comment|// Failure recovery might be trying to start us back up,
comment|// but the Replication server may have already stopped us so there is not need to start up.
if|if
condition|(
operator|!
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|replicationServer
operator|.
name|getCluster
argument_list|()
operator|.
name|setMemberStatus
argument_list|(
name|replicationServer
operator|.
name|createStatus
argument_list|(
name|State
operator|.
name|SLAVE_SYNCRONIZING
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|=
name|TransportFactory
operator|.
name|connect
argument_list|(
operator|new
name|URI
argument_list|(
name|master
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|.
name|setTransportListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Make sure the replication directory exists.
name|replicationServer
operator|.
name|getTempReplicationDir
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|ReplicationFrame
name|frame
init|=
operator|new
name|ReplicationFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
operator|new
name|PBHeader
argument_list|()
operator|.
name|setType
argument_list|(
name|PBType
operator|.
name|SLAVE_INIT
argument_list|)
argument_list|)
expr_stmt|;
name|PBSlaveInit
name|payload
init|=
operator|new
name|PBSlaveInit
argument_list|()
decl_stmt|;
name|payload
operator|.
name|setNodeId
argument_list|(
name|replicationServer
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
comment|// This call back is executed once the checkpoint is
comment|// completed and all data has been
comment|// synced to disk, but while a lock is still held on the
comment|// store so that no
comment|// updates are allowed.
name|HashMap
argument_list|<
name|String
argument_list|,
name|PBFileInfo
argument_list|>
name|infosMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PBFileInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// Add all the files that were being transfered..
name|File
name|tempReplicationDir
init|=
name|replicationServer
operator|.
name|getTempReplicationDir
argument_list|()
decl_stmt|;
name|File
index|[]
name|list
init|=
name|tempReplicationDir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|file
range|:
name|list
control|)
block|{
name|String
name|name
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"database-"
argument_list|)
condition|)
block|{
name|int
name|snapshot
decl_stmt|;
try|try
block|{
name|snapshot
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|"database-"
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
continue|continue;
block|}
name|PBFileInfo
name|info
init|=
name|ReplicationSupport
operator|.
name|createInfo
argument_list|(
literal|"database"
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|setSnapshotId
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|infosMap
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"journal-"
argument_list|)
condition|)
block|{
name|PBFileInfo
name|info
init|=
name|ReplicationSupport
operator|.
name|createInfo
argument_list|(
name|name
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|infosMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Add all the db files that were not getting transfered..
name|KahaDBStore
name|store
init|=
name|replicationServer
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|DataFile
argument_list|>
name|journalFiles
init|=
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|getFileMap
argument_list|()
decl_stmt|;
for|for
control|(
name|DataFile
name|df
range|:
name|journalFiles
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
literal|"journal-"
operator|+
name|df
operator|.
name|getDataFileId
argument_list|()
decl_stmt|;
comment|// Did we have a transfer in progress for that file already?
if|if
condition|(
name|infosMap
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|infosMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ReplicationSupport
operator|.
name|createInfo
argument_list|(
name|name
argument_list|,
name|df
operator|.
name|getFile
argument_list|()
argument_list|,
literal|0
argument_list|,
name|df
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|infosMap
operator|.
name|containsKey
argument_list|(
literal|"database"
argument_list|)
condition|)
block|{
name|File
name|pageFile
init|=
name|store
operator|.
name|getPageFile
argument_list|()
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|pageFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|infosMap
operator|.
name|put
argument_list|(
literal|"database"
argument_list|,
name|ReplicationSupport
operator|.
name|createInfo
argument_list|(
literal|"database"
argument_list|,
name|pageFile
argument_list|,
literal|0
argument_list|,
name|pageFile
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ArrayList
argument_list|<
name|PBFileInfo
argument_list|>
name|infos
init|=
operator|new
name|ArrayList
argument_list|<
name|PBFileInfo
argument_list|>
argument_list|(
name|infosMap
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PBFileInfo
name|info
range|:
name|infosMap
operator|.
name|values
argument_list|()
control|)
block|{
name|infos
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|payload
operator|.
name|setCurrentFilesList
argument_list|(
name|infos
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|payload
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sending master slave init command: "
operator|+
name|payload
argument_list|)
expr_stmt|;
name|online
operator|=
literal|false
expr_stmt|;
name|transport
operator|.
name|oneway
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doStop
parameter_list|()
throws|throws
name|Exception
throws|,
name|IOException
block|{
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
if|if
condition|(
name|this
operator|.
name|transport
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
name|this
operator|.
name|transport
operator|=
literal|null
expr_stmt|;
block|}
comment|// Stop any current transfer sessions.
for|for
control|(
name|TransferSession
name|session
range|:
name|this
operator|.
name|transferSessions
control|)
block|{
name|session
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|transferQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|initResponse
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|bulkFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|online
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|journalUpateFile
operator|!=
literal|null
condition|)
block|{
name|journalUpateFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|journalUpateFile
operator|=
literal|null
expr_stmt|;
block|}
name|journalUpdateFileId
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onClusterChange
parameter_list|(
name|ClusterState
name|config
parameter_list|)
block|{
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
try|try
block|{
if|if
condition|(
name|master
operator|==
literal|null
operator|||
operator|!
name|master
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getMaster
argument_list|()
argument_list|)
condition|)
block|{
name|master
operator|=
name|config
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
name|doStart
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not restart syncing with new master: "
operator|+
name|config
operator|.
name|getMaster
argument_list|()
operator|+
literal|", due to: "
operator|+
name|e
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
try|try
block|{
name|ReplicationFrame
name|frame
init|=
operator|(
name|ReplicationFrame
operator|)
name|command
decl_stmt|;
switch|switch
condition|(
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|SLAVE_INIT_RESPONSE
case|:
name|onSlaveInitResponse
argument_list|(
name|frame
argument_list|,
operator|(
name|PBSlaveInitResponse
operator|)
name|frame
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|JOURNAL_UPDATE
case|:
name|onJournalUpdate
argument_list|(
name|frame
argument_list|,
operator|(
name|PBJournalUpdate
operator|)
name|frame
operator|.
name|getPayload
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|failed
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|started
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replication session fail to master: "
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|doStop
argument_list|()
expr_stmt|;
comment|// Wait a little an try to establish the session again..
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|doStart
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{ 		}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{ 	}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{ 	}
specifier|private
name|void
name|onJournalUpdate
parameter_list|(
name|ReplicationFrame
name|frame
parameter_list|,
name|PBJournalUpdate
name|update
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Send an ack back once we get the ack.. yeah it's a little dirty to ack before it's on disk,
comment|// but chances are low that both machines are going to loose power at the same time and this way,
comment|// we reduce the latency the master sees from us.
if|if
condition|(
name|update
operator|.
name|getSendAck
argument_list|()
condition|)
block|{
name|ReplicationFrame
name|ack
init|=
operator|new
name|ReplicationFrame
argument_list|()
decl_stmt|;
name|ack
operator|.
name|setHeader
argument_list|(
operator|new
name|PBHeader
argument_list|()
operator|.
name|setType
argument_list|(
name|PBType
operator|.
name|JOURNAL_UPDATE_ACK
argument_list|)
argument_list|)
expr_stmt|;
name|ack
operator|.
name|setPayload
argument_list|(
name|update
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|transport
operator|.
name|oneway
argument_list|(
name|ack
argument_list|)
expr_stmt|;
block|}
comment|// TODO: actually do the disk write in an async thread so that this thread can be
comment|// start reading in the next journal updated.
name|boolean
name|onlineRecovery
init|=
literal|false
decl_stmt|;
name|PBJournalLocation
name|location
init|=
name|update
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|update
operator|.
name|getData
argument_list|()
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
if|if
condition|(
name|journalUpateFile
operator|==
literal|null
operator|||
name|journalUpdateFileId
operator|!=
name|location
operator|.
name|getFileId
argument_list|()
condition|)
block|{
if|if
condition|(
name|journalUpateFile
operator|!=
literal|null
condition|)
block|{
name|journalUpateFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|File
name|file
decl_stmt|;
name|String
name|name
init|=
literal|"journal-"
operator|+
name|location
operator|.
name|getFileId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|file
operator|=
name|replicationServer
operator|.
name|getTempReplicationFile
argument_list|(
name|name
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bulkFiles
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|bulkFiles
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|PBFileInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Once the data has been synced.. we are going to
comment|// go into an online recovery mode...
name|file
operator|=
name|replicationServer
operator|.
name|getReplicationFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|journalUpateFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|file
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
name|journalUpdateFileId
operator|=
name|location
operator|.
name|getFileId
argument_list|()
expr_stmt|;
block|}
comment|//			System.out.println("Writing: "+location.getFileId()+":"+location.getOffset()+" with "+data.length);
name|journalUpateFile
operator|.
name|seek
argument_list|(
name|location
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|journalUpateFile
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|online
condition|)
block|{
name|onlineRecovery
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|onlineRecovery
condition|)
block|{
name|KahaDBStore
name|store
init|=
name|replicationServer
operator|.
name|getStore
argument_list|()
decl_stmt|;
comment|// Let the journal know that we appended to one of it's files..
name|store
operator|.
name|getJournal
argument_list|()
operator|.
name|appendedExternally
argument_list|(
name|ReplicationSupport
operator|.
name|convert
argument_list|(
name|location
argument_list|)
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Now incrementally recover those records.
name|store
operator|.
name|incrementalRecover
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|commitBulkTransfer
parameter_list|()
block|{
try|try
block|{
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Slave synhcronization complete, going online..."
argument_list|)
expr_stmt|;
name|replicationServer
operator|.
name|getStore
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|journalUpateFile
operator|!=
literal|null
condition|)
block|{
name|journalUpateFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|journalUpateFile
operator|=
literal|null
expr_stmt|;
block|}
comment|// If we got a new snapshot of the database, then we need to
comment|// delete it's assisting files too.
if|if
condition|(
name|bulkFiles
operator|.
name|containsKey
argument_list|(
literal|"database"
argument_list|)
condition|)
block|{
name|PageFile
name|pageFile
init|=
name|replicationServer
operator|.
name|getStore
argument_list|()
operator|.
name|getPageFile
argument_list|()
decl_stmt|;
name|pageFile
operator|.
name|getRecoveryFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
name|pageFile
operator|.
name|getFreeFile
argument_list|()
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|PBFileInfo
name|info
range|:
name|bulkFiles
operator|.
name|values
argument_list|()
control|)
block|{
name|File
name|from
init|=
name|replicationServer
operator|.
name|getTempReplicationFile
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|info
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|to
init|=
name|replicationServer
operator|.
name|getReplicationFile
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|to
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|move
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
name|delete
argument_list|(
name|initResponse
operator|.
name|getDeleteFilesList
argument_list|()
argument_list|)
expr_stmt|;
name|online
operator|=
literal|true
expr_stmt|;
name|replicationServer
operator|.
name|getStore
argument_list|()
operator|.
name|open
argument_list|()
expr_stmt|;
name|replicationServer
operator|.
name|getCluster
argument_list|()
operator|.
name|setMemberStatus
argument_list|(
name|replicationServer
operator|.
name|createStatus
argument_list|(
name|State
operator|.
name|SLAVE_ONLINE
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Slave is now online.  We are now eligible to become the master."
argument_list|)
expr_stmt|;
block|}
comment|// Let the master know we are now online.
name|ReplicationFrame
name|frame
init|=
operator|new
name|ReplicationFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
operator|new
name|PBHeader
argument_list|()
operator|.
name|setType
argument_list|(
name|PBType
operator|.
name|SLAVE_ONLINE
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|.
name|oneway
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|onSlaveInitResponse
parameter_list|(
name|ReplicationFrame
name|frame
parameter_list|,
name|PBSlaveInitResponse
name|response
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got init response: "
operator|+
name|response
argument_list|)
expr_stmt|;
name|initResponse
operator|=
name|response
expr_stmt|;
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
name|bulkFiles
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|PBFileInfo
argument_list|>
name|infos
init|=
name|response
operator|.
name|getCopyFilesList
argument_list|()
decl_stmt|;
for|for
control|(
name|PBFileInfo
name|info
range|:
name|infos
control|)
block|{
name|bulkFiles
operator|.
name|put
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|File
name|target
init|=
name|replicationServer
operator|.
name|getReplicationFile
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// are we just appending to an existing file journal file?
if|if
condition|(
name|info
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"journal-"
argument_list|)
operator|&&
name|info
operator|.
name|getStart
argument_list|()
operator|>
literal|0
operator|&&
name|target
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// Then copy across the first bits..
name|File
name|tempFile
init|=
name|replicationServer
operator|.
name|getTempReplicationFile
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|info
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
decl_stmt|;
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|FileOutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|info
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{}
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{}
block|}
block|}
block|}
name|transferQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|transferQueue
operator|.
name|addAll
argument_list|(
name|infos
argument_list|)
expr_stmt|;
block|}
name|addTransferSession
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PBFileInfo
name|dequeueTransferQueue
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
if|if
condition|(
name|transferQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|transferQueue
operator|.
name|removeFirst
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|addTransferSession
parameter_list|()
block|{
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
while|while
condition|(
name|transport
operator|!=
literal|null
operator|&&
operator|!
name|transferQueue
operator|.
name|isEmpty
argument_list|()
operator|&&
name|transferSessions
operator|.
name|size
argument_list|()
operator|<
name|MAX_TRANSFER_SESSIONS
condition|)
block|{
name|TransferSession
name|transferSession
init|=
operator|new
name|TransferSession
argument_list|()
decl_stmt|;
name|transferSessions
operator|.
name|add
argument_list|(
name|transferSession
argument_list|)
expr_stmt|;
try|try
block|{
name|transferSession
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transferSessions
operator|.
name|remove
argument_list|(
name|transferSession
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Once we are done processing all the transfers..
if|if
condition|(
name|transferQueue
operator|.
name|isEmpty
argument_list|()
operator|&&
name|transferSessions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|commitBulkTransfer
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|move
parameter_list|(
name|File
name|from
parameter_list|,
name|File
name|to
parameter_list|)
throws|throws
name|IOException
block|{
comment|// If a simple rename/mv does not work..
name|to
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|from
operator|.
name|renameTo
argument_list|(
name|to
argument_list|)
condition|)
block|{
comment|// Copy and Delete.
name|FileInputStream
name|is
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|os
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|to
argument_list|)
expr_stmt|;
name|os
operator|.
name|getChannel
argument_list|()
operator|.
name|transferFrom
argument_list|(
name|is
operator|.
name|getChannel
argument_list|()
argument_list|,
literal|0
argument_list|,
name|is
operator|.
name|getChannel
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{ 				}
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{ 				}
block|}
name|from
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|TransferSession
implements|implements
name|Service
implements|,
name|TransportListener
block|{
name|Transport
name|transport
decl_stmt|;
specifier|private
name|PBFileInfo
name|info
decl_stmt|;
specifier|private
name|File
name|toFile
decl_stmt|;
specifier|private
name|AtomicBoolean
name|stopped
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
name|long
name|transferStart
decl_stmt|;
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"File transfer session started."
argument_list|)
expr_stmt|;
name|transport
operator|=
name|TransportFactory
operator|.
name|connect
argument_list|(
operator|new
name|URI
argument_list|(
name|replicationServer
operator|.
name|getClusterState
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|transport
operator|.
name|setTransportListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|transport
operator|.
name|start
argument_list|()
expr_stmt|;
name|sendNextRequestOrStop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|sendNextRequestOrStop
parameter_list|()
block|{
try|try
block|{
name|PBFileInfo
name|info
init|=
name|dequeueTransferQueue
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|toFile
operator|=
name|replicationServer
operator|.
name|getTempReplicationFile
argument_list|(
name|info
operator|.
name|getName
argument_list|()
argument_list|,
name|info
operator|.
name|getSnapshotId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|ReplicationFrame
name|frame
init|=
operator|new
name|ReplicationFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|setHeader
argument_list|(
operator|new
name|PBHeader
argument_list|()
operator|.
name|setType
argument_list|(
name|PBType
operator|.
name|FILE_TRANSFER
argument_list|)
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setPayload
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Requesting file: "
operator|+
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|transferStart
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|transport
operator|.
name|oneway
argument_list|(
name|frame
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|stopped
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"File transfer session stopped."
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|transferQueue
operator|.
name|addLast
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|info
operator|=
literal|null
expr_stmt|;
block|}
name|transport
operator|.
name|stop
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|transferMutex
init|)
block|{
name|transferSessions
operator|.
name|remove
argument_list|(
name|TransferSession
operator|.
name|this
argument_list|)
expr_stmt|;
name|addTransferSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|onCommand
parameter_list|(
name|Object
name|command
parameter_list|)
block|{
try|try
block|{
name|ReplicationFrame
name|frame
init|=
operator|(
name|ReplicationFrame
operator|)
name|command
decl_stmt|;
name|InputStream
name|is
init|=
operator|(
name|InputStream
operator|)
name|frame
operator|.
name|getPayload
argument_list|()
decl_stmt|;
name|toFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|RandomAccessFile
name|os
init|=
operator|new
name|RandomAccessFile
argument_list|(
name|toFile
argument_list|,
literal|"rw"
argument_list|)
decl_stmt|;
name|os
operator|.
name|seek
argument_list|(
name|info
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getPayloadSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|transferTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|this
operator|.
name|transferStart
decl_stmt|;
name|float
name|rate
init|=
name|frame
operator|.
name|getHeader
argument_list|()
operator|.
name|getPayloadSize
argument_list|()
operator|*
name|transferTime
operator|/
literal|1024000f
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"File "
operator|+
name|info
operator|.
name|getName
argument_list|()
operator|+
literal|" transfered in "
operator|+
name|transferTime
operator|+
literal|" (ms) at "
operator|+
name|rate
operator|+
literal|" Kb/Sec"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|info
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|toFile
operator|=
literal|null
expr_stmt|;
name|sendNextRequestOrStop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|failed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onException
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{
name|failed
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|failed
parameter_list|(
name|Exception
name|error
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Replication session failure: "
operator|+
name|transport
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{ 			}
block|}
specifier|public
name|void
name|transportInterupted
parameter_list|()
block|{ 		}
specifier|public
name|void
name|transportResumed
parameter_list|()
block|{ 		}
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|length
operator|&&
operator|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|length
operator|-
name|pos
argument_list|)
argument_list|)
operator|)
operator|>=
literal|0
operator|)
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|c
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|DataOutput
name|os
parameter_list|,
name|long
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
operator|*
literal|4
index|]
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
name|long
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|length
operator|&&
operator|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|min
argument_list|(
name|buffer
operator|.
name|length
argument_list|,
name|length
operator|-
name|pos
argument_list|)
argument_list|)
operator|)
operator|>=
literal|0
operator|)
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|c
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|delete
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|files
parameter_list|)
block|{
for|for
control|(
name|String
name|fn
range|:
name|files
control|)
block|{
try|try
block|{
name|replicationServer
operator|.
name|getReplicationFile
argument_list|(
name|fn
argument_list|)
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{ 			}
block|}
block|}
block|}
end_class

end_unit

