begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQDestination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProtocolException
import|;
end_import

begin_class
class|class
name|DestinationNamer
block|{
specifier|static
name|ActiveMQDestination
name|convert
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ProtocolException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"/queue/"
argument_list|)
condition|)
block|{
name|String
name|q_name
init|=
name|name
operator|.
name|substring
argument_list|(
literal|"/queue/"
operator|.
name|length
argument_list|()
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|q_name
argument_list|,
name|ActiveMQDestination
operator|.
name|QUEUE_TYPE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"/topic/"
argument_list|)
condition|)
block|{
name|String
name|t_name
init|=
name|name
operator|.
name|substring
argument_list|(
literal|"/topic/"
operator|.
name|length
argument_list|()
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|ActiveMQDestination
operator|.
name|createDestination
argument_list|(
name|t_name
argument_list|,
name|ActiveMQDestination
operator|.
name|TOPIC_TYPE
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|ProtocolException
argument_list|(
literal|"Illegal destination name: ["
operator|+
name|name
operator|+
literal|"] -- ActiveMQ TTMP destinations "
operator|+
literal|"must begine with /queue/ or /topic/"
argument_list|)
throw|;
block|}
block|}
specifier|static
name|String
name|convert
parameter_list|(
name|Destination
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|ActiveMQDestination
name|amq_d
init|=
operator|(
name|ActiveMQDestination
operator|)
name|d
decl_stmt|;
name|String
name|p_name
init|=
name|amq_d
operator|.
name|getPhysicalName
argument_list|()
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|amq_d
operator|.
name|isQueue
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"/queue/"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|amq_d
operator|.
name|isTopic
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"/topic/"
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|p_name
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

