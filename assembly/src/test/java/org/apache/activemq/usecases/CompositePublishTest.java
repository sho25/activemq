begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2005-2006 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|usecases
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTopic
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|test
operator|.
name|JmsSendReceiveTestSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
class|class
name|CompositePublishTest
extends|extends
name|JmsSendReceiveTestSupport
block|{
specifier|protected
name|Connection
name|sendConnection
decl_stmt|;
specifier|protected
name|Connection
name|receiveConnection
decl_stmt|;
specifier|protected
name|Session
name|receiveSession
decl_stmt|;
specifier|protected
name|MessageConsumer
index|[]
name|consumers
decl_stmt|;
specifier|protected
name|List
index|[]
name|messageLists
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|connectionFactory
operator|=
name|createConnectionFactory
argument_list|()
expr_stmt|;
name|sendConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|sendConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|receiveConnection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|receiveConnection
operator|.
name|start
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created sendConnection: "
operator|+
name|sendConnection
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created receiveConnection: "
operator|+
name|receiveConnection
argument_list|)
expr_stmt|;
name|session
operator|=
name|sendConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|receiveSession
operator|=
name|receiveConnection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created sendSession: "
operator|+
name|session
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created receiveSession: "
operator|+
name|receiveSession
argument_list|)
expr_stmt|;
name|producer
operator|=
name|session
operator|.
name|createProducer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created producer: "
operator|+
name|producer
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
condition|)
block|{
name|consumerDestination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|getConsumerSubject
argument_list|()
argument_list|)
expr_stmt|;
name|producerDestination
operator|=
name|session
operator|.
name|createTopic
argument_list|(
name|getProducerSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|consumerDestination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|getConsumerSubject
argument_list|()
argument_list|)
expr_stmt|;
name|producerDestination
operator|=
name|session
operator|.
name|createQueue
argument_list|(
name|getProducerSubject
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created  consumer destination: "
operator|+
name|consumerDestination
operator|+
literal|" of type: "
operator|+
name|consumerDestination
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Created  producer destination: "
operator|+
name|producerDestination
operator|+
literal|" of type: "
operator|+
name|producerDestination
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Destination
index|[]
name|destinations
init|=
name|getDestinations
argument_list|()
decl_stmt|;
name|consumers
operator|=
operator|new
name|MessageConsumer
index|[
name|destinations
operator|.
name|length
index|]
expr_stmt|;
name|messageLists
operator|=
operator|new
name|List
index|[
name|destinations
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|destinations
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Destination
name|dest
init|=
name|destinations
index|[
name|i
index|]
decl_stmt|;
name|messageLists
index|[
name|i
index|]
operator|=
name|createConcurrentList
argument_list|()
expr_stmt|;
name|consumers
index|[
name|i
index|]
operator|=
name|receiveSession
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|consumers
index|[
name|i
index|]
operator|.
name|setMessageListener
argument_list|(
name|createMessageListener
argument_list|(
name|i
argument_list|,
name|messageLists
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Started connections"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|MessageListener
name|createMessageListener
parameter_list|(
name|int
name|i
parameter_list|,
specifier|final
name|List
name|messageList
parameter_list|)
block|{
return|return
operator|new
name|MessageListener
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|consumeMessage
argument_list|(
name|message
argument_list|,
name|messageList
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**      * Returns the subject on which we publish      */
specifier|protected
name|String
name|getSubject
parameter_list|()
block|{
return|return
name|getPrefix
argument_list|()
operator|+
literal|"FOO.BAR,"
operator|+
name|getPrefix
argument_list|()
operator|+
literal|"FOO.X.Y"
return|;
block|}
comment|/**      * Returns the destinations to which we consume      */
specifier|protected
name|Destination
index|[]
name|getDestinations
parameter_list|()
block|{
return|return
operator|new
name|Destination
index|[]
block|{
operator|new
name|ActiveMQTopic
argument_list|(
name|getPrefix
argument_list|()
operator|+
literal|"FOO.BAR"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
name|getPrefix
argument_list|()
operator|+
literal|"FOO.*"
argument_list|)
block|,
operator|new
name|ActiveMQTopic
argument_list|(
name|getPrefix
argument_list|()
operator|+
literal|"FOO.X.Y"
argument_list|)
block|}
return|;
block|}
specifier|protected
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|super
operator|.
name|getSubject
argument_list|()
operator|+
literal|"."
return|;
block|}
specifier|protected
name|void
name|assertMessagesAreReceived
parameter_list|()
throws|throws
name|JMSException
block|{
name|waitForMessagesToBeDelivered
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|messageLists
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Message list: "
operator|+
name|i
operator|+
literal|" contains: "
operator|+
name|messageLists
index|[
name|i
index|]
operator|.
name|size
argument_list|()
operator|+
literal|" message(s)"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|size
init|=
name|messageLists
operator|.
name|length
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|assertMessagesReceivedAreValid
argument_list|(
name|messageLists
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ActiveMQConnectionFactory
name|createConnectionFactory
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"vm://localhost"
argument_list|)
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|receiveSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|sendConnection
operator|.
name|close
argument_list|()
expr_stmt|;
name|receiveConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

