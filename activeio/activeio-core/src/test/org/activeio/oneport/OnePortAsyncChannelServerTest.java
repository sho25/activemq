begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|oneport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|AcceptListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|AsyncToSyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|adapter
operator|.
name|SyncToAsyncChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|AsyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|async
operator|.
name|FilterAsyncChannelServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|FilterSyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|SyncChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|sync
operator|.
name|socket
operator|.
name|SocketSyncChannelFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|stream
operator|.
name|sync
operator|.
name|socket
operator|.
name|SocketMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  */
end_comment

begin_class
specifier|public
class|class
name|OnePortAsyncChannelServerTest
extends|extends
name|TestCase
block|{
specifier|static
specifier|private
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnePortAsyncChannelServerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|public
name|AtomicInteger
name|serverPacketCounter
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|OnePortAsyncChannelServer
name|server
decl_stmt|;
specifier|public
name|AsyncChannelServer
name|httpServer
decl_stmt|;
specifier|public
name|AsyncChannelServer
name|iiopServer
decl_stmt|;
specifier|public
name|SocketSyncChannelFactory
name|channelFactory
decl_stmt|;
specifier|public
name|BlockingQueue
name|resultSlot
init|=
operator|new
name|ArrayBlockingQueue
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testIIOPAccept
parameter_list|()
throws|throws
name|Exception
block|{
name|serverPacketCounter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hitIIOPServer
argument_list|()
expr_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|resultSlot
operator|.
name|poll
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"IIOP"
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// Verify that a request when through the one port.
name|assertTrue
argument_list|(
name|serverPacketCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHttpAccept
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
name|serverPacketCounter
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hitHttpServer
argument_list|()
expr_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|resultSlot
operator|.
name|poll
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"HTTP"
argument_list|,
name|type
argument_list|)
expr_stmt|;
comment|// Verify that a request when through the one port.
name|assertTrue
argument_list|(
name|serverPacketCounter
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|hitHttpServer
parameter_list|()
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
name|URI
name|connectURI
init|=
name|server
operator|.
name|getConnectURI
argument_list|()
decl_stmt|;
name|String
name|url
init|=
literal|"http://"
operator|+
name|connectURI
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|connectURI
operator|.
name|getPort
argument_list|()
operator|+
literal|"/index.action"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|InputStream
name|is
init|=
operator|new
name|URL
argument_list|(
name|url
argument_list|)
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|StringBuffer
name|b
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
while|while
condition|(
operator|(
name|c
operator|=
name|is
operator|.
name|read
argument_list|()
operator|)
operator|>=
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"HTTP response: "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|hitIIOPServer
parameter_list|()
throws|throws
name|Exception
block|{
name|SyncChannel
name|channel
init|=
name|channelFactory
operator|.
name|openSyncChannel
argument_list|(
name|server
operator|.
name|getConnectURI
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|SocketMetadata
operator|)
name|channel
operator|.
name|getAdapter
argument_list|(
name|SocketMetadata
operator|.
name|class
argument_list|)
operator|)
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayPacket
argument_list|(
literal|"GIOPcrapcrap"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|flush
argument_list|()
expr_stmt|;
name|channel
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testUnknownAccept
parameter_list|()
throws|throws
name|IOException
throws|,
name|URISyntaxException
throws|,
name|InterruptedException
block|{
name|SyncChannel
name|channel
init|=
name|channelFactory
operator|.
name|openSyncChannel
argument_list|(
name|server
operator|.
name|getConnectURI
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|SocketMetadata
operator|)
name|channel
operator|.
name|getAdapter
argument_list|(
name|SocketMetadata
operator|.
name|class
argument_list|)
operator|)
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|channel
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayPacket
argument_list|(
literal|"Licensed under the Apache License, Version 2.0 (the \"License\")"
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|type
init|=
operator|(
name|String
operator|)
name|resultSlot
operator|.
name|poll
argument_list|(
literal|1000
operator|*
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|channel
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|channelFactory
operator|=
operator|new
name|SocketSyncChannelFactory
argument_list|()
expr_stmt|;
name|ThreadPoolExecutor
name|executor
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|arg0
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
name|arg0
argument_list|,
literal|"activeio:"
operator|+
operator|(
name|count
operator|++
operator|)
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|AsyncChannelFactory
name|factory
init|=
name|SyncToAsyncChannelFactory
operator|.
name|adapt
argument_list|(
name|channelFactory
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|AsyncChannelServer
name|cs
init|=
name|factory
operator|.
name|bindAsyncChannel
argument_list|(
operator|new
name|URI
argument_list|(
literal|"tcp://localhost:0"
argument_list|)
argument_list|)
decl_stmt|;
name|cs
operator|=
operator|new
name|FilterAsyncChannelServer
argument_list|(
name|cs
argument_list|)
block|{
specifier|public
name|void
name|onAccept
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
name|SyncChannel
name|syncChannel
init|=
name|AsyncToSyncChannel
operator|.
name|adapt
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|super
operator|.
name|onAccept
argument_list|(
operator|new
name|FilterSyncChannel
argument_list|(
name|syncChannel
argument_list|)
block|{
specifier|public
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|Packet
name|read
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|IOException
block|{
name|Packet
name|packet
init|=
name|super
operator|.
name|read
argument_list|(
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|packet
operator|!=
literal|null
operator|&&
name|packet
operator|.
name|hasRemaining
argument_list|()
condition|)
name|serverPacketCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|packet
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|server
operator|=
operator|new
name|OnePortAsyncChannelServer
argument_list|(
name|cs
argument_list|)
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|startHTTPServer
argument_list|()
expr_stmt|;
name|startIIOPServer
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Running on: "
operator|+
name|server
operator|.
name|getConnectURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @throws IOException      * @throws NamingException      */
specifier|protected
name|void
name|startIIOPServer
parameter_list|()
throws|throws
name|Exception
block|{
name|iiopServer
operator|=
name|server
operator|.
name|bindAsyncChannel
argument_list|(
name|IIOPRecognizer
operator|.
name|IIOP_RECOGNIZER
argument_list|)
expr_stmt|;
name|iiopServer
operator|.
name|setAcceptListener
argument_list|(
operator|new
name|AcceptListener
argument_list|()
block|{
specifier|public
name|void
name|onAccept
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Got a IIOP connection."
argument_list|)
expr_stmt|;
name|resultSlot
operator|.
name|offer
argument_list|(
literal|"IIOP"
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|channel
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onAcceptError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
name|iiopServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws IOException      * @throws Exception      */
specifier|protected
name|void
name|startHTTPServer
parameter_list|()
throws|throws
name|Exception
block|{
name|httpServer
operator|=
name|server
operator|.
name|bindAsyncChannel
argument_list|(
name|HttpRecognizer
operator|.
name|HTTP_RECOGNIZER
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|setAcceptListener
argument_list|(
operator|new
name|AcceptListener
argument_list|()
block|{
specifier|public
name|void
name|onAccept
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Got a HTTP connection."
argument_list|)
expr_stmt|;
name|resultSlot
operator|.
name|offer
argument_list|(
literal|"HTTP"
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|byte
name|data
index|[]
init|=
operator|(
literal|"HTTP/1.1 200 OK\r\n"
operator|+
literal|"Content-Type: text/html; charset=UTF-8\r\n"
operator|+
literal|"\r\n"
operator|+
literal|"Hello World"
operator|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|SocketMetadata
operator|)
name|channel
operator|.
name|getAdapter
argument_list|(
name|SocketMetadata
operator|.
name|class
argument_list|)
operator|)
operator|.
name|setTcpNoDelay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|AsyncChannel
operator|)
name|channel
operator|)
operator|.
name|write
argument_list|(
operator|new
name|ByteArrayPacket
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|channel
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onAcceptError
parameter_list|(
name|IOException
name|error
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|stopIIOPServer
argument_list|()
expr_stmt|;
name|stopHTTPServer
argument_list|()
expr_stmt|;
name|server
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws InterruptedException      *       */
specifier|protected
name|void
name|stopHTTPServer
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|httpServer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
comment|/**      * @throws Exception      *       */
specifier|protected
name|void
name|stopIIOPServer
parameter_list|()
throws|throws
name|Exception
block|{
name|iiopServer
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

