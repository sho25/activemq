begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2004 Hiram Chirino  *   * Licensed under the Apache License, Version 2.0 (the "License");   * you may not use this file except in compliance with the License.   * You may obtain a copy of the License at   *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   * See the License for the specific language governing permissions and   * limitations under the License.   *   **/
end_comment

begin_package
package|package
name|org
operator|.
name|activeio
operator|.
name|adapter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|Packet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|AppendedPacket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activeio
operator|.
name|packet
operator|.
name|ByteArrayPacket
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|final
specifier|public
class|class
name|PacketByteArrayOutputStream
extends|extends
name|OutputStream
block|{
specifier|private
name|Packet
name|result
decl_stmt|;
specifier|private
name|Packet
name|current
decl_stmt|;
name|int
name|nextAllocationSize
init|=
literal|0
decl_stmt|;
specifier|public
name|PacketByteArrayOutputStream
parameter_list|()
block|{
name|this
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PacketByteArrayOutputStream
parameter_list|(
name|int
name|initialSize
parameter_list|)
block|{
name|nextAllocationSize
operator|=
name|initialSize
expr_stmt|;
name|current
operator|=
name|allocate
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Packet
name|allocate
parameter_list|()
block|{
name|ByteArrayPacket
name|packet
init|=
operator|new
name|ByteArrayPacket
argument_list|(
operator|new
name|byte
index|[
name|nextAllocationSize
index|]
argument_list|)
decl_stmt|;
name|nextAllocationSize
operator|<<=
literal|3
expr_stmt|;
comment|// x by 8
return|return
name|packet
return|;
block|}
specifier|public
name|void
name|skip
parameter_list|(
name|int
name|size
parameter_list|)
block|{
while|while
condition|(
name|size
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|allocatedNext
argument_list|()
expr_stmt|;
block|}
name|int
name|skip
init|=
operator|(
operator|(
name|size
operator|<=
name|current
operator|.
name|remaining
argument_list|()
operator|)
condition|?
name|size
else|:
name|current
operator|.
name|remaining
argument_list|()
operator|)
decl_stmt|;
name|current
operator|.
name|position
argument_list|(
name|current
operator|.
name|position
argument_list|()
operator|+
name|skip
argument_list|)
expr_stmt|;
name|size
operator|-=
name|skip
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|allocatedNext
argument_list|()
expr_stmt|;
block|}
name|current
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|allocatedNext
argument_list|()
expr_stmt|;
block|}
name|int
name|wrote
init|=
name|current
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|off
operator|+=
name|wrote
expr_stmt|;
name|len
operator|-=
name|wrote
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|allocatedNext
parameter_list|()
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|current
operator|.
name|flip
argument_list|()
expr_stmt|;
name|result
operator|=
name|current
expr_stmt|;
block|}
else|else
block|{
name|current
operator|.
name|flip
argument_list|()
expr_stmt|;
name|result
operator|=
name|AppendedPacket
operator|.
name|join
argument_list|(
name|result
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
name|current
operator|=
name|allocate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Packet
name|getPacket
parameter_list|()
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|current
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|current
operator|.
name|slice
argument_list|()
return|;
block|}
else|else
block|{
name|current
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|AppendedPacket
operator|.
name|join
argument_list|(
name|result
argument_list|,
name|current
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|result
operator|=
literal|null
expr_stmt|;
name|current
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|current
operator|.
name|position
argument_list|()
operator|+
operator|(
name|result
operator|==
literal|null
condition|?
literal|0
else|:
name|result
operator|.
name|remaining
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

