begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_comment
comment|/**  * A filter performing a comparison of two objects  *   * @version $Revision: 1.2 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ComparisonExpression
extends|extends
name|BinaryExpression
implements|implements
name|BooleanExpression
block|{
specifier|public
specifier|static
name|BooleanExpression
name|createBetween
parameter_list|(
name|Expression
name|value
parameter_list|,
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|)
block|{
return|return
name|LogicExpression
operator|.
name|createAND
argument_list|(
name|createGreaterThanEqual
argument_list|(
name|value
argument_list|,
name|left
argument_list|)
argument_list|,
name|createLessThanEqual
argument_list|(
name|value
argument_list|,
name|right
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createNotBetween
parameter_list|(
name|Expression
name|value
parameter_list|,
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|)
block|{
return|return
name|LogicExpression
operator|.
name|createOR
argument_list|(
name|createLessThan
argument_list|(
name|value
argument_list|,
name|left
argument_list|)
argument_list|,
name|createGreaterThan
argument_list|(
name|value
argument_list|,
name|right
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|final
specifier|private
name|HashSet
name|REGEXP_CONTROL_CHARS
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
static|static
block|{
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'['
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|']'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'^'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'$'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'?'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'+'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'{'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'}'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'|'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'('
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|')'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'&'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'<'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'>'
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'='
argument_list|)
argument_list|)
expr_stmt|;
name|REGEXP_CONTROL_CHARS
operator|.
name|add
argument_list|(
operator|new
name|Character
argument_list|(
literal|'!'
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|LikeExpression
extends|extends
name|UnaryExpression
implements|implements
name|BooleanExpression
block|{
name|Pattern
name|likePattern
decl_stmt|;
comment|/**          * @param left          */
specifier|public
name|LikeExpression
parameter_list|(
name|Expression
name|right
parameter_list|,
name|String
name|like
parameter_list|,
name|int
name|escape
parameter_list|)
block|{
name|super
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|StringBuffer
name|regexp
init|=
operator|new
name|StringBuffer
argument_list|(
name|like
operator|.
name|length
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
name|regexp
operator|.
name|append
argument_list|(
literal|"\\A"
argument_list|)
expr_stmt|;
comment|// The beginning of the input
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|like
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|like
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|escape
operator|==
operator|(
literal|0xFFFF
operator|&
name|c
operator|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|like
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// nothing left to escape...
break|break;
block|}
name|char
name|t
init|=
name|like
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|regexp
operator|.
name|append
argument_list|(
literal|"\\x"
argument_list|)
expr_stmt|;
name|regexp
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|0xFFFF
operator|&
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|regexp
operator|.
name|append
argument_list|(
literal|".*?"
argument_list|)
expr_stmt|;
comment|// Do a non-greedy match
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'_'
condition|)
block|{
name|regexp
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
comment|// match one
block|}
elseif|else
if|if
condition|(
name|REGEXP_CONTROL_CHARS
operator|.
name|contains
argument_list|(
operator|new
name|Character
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|regexp
operator|.
name|append
argument_list|(
literal|"\\x"
argument_list|)
expr_stmt|;
name|regexp
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
literal|0xFFFF
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|regexp
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|regexp
operator|.
name|append
argument_list|(
literal|"\\z"
argument_list|)
expr_stmt|;
comment|// The end of the input
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"regexp: "
operator|+
name|like
operator|+
literal|": "
operator|+
name|regexp
argument_list|)
expr_stmt|;
name|likePattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regexp
operator|.
name|toString
argument_list|()
argument_list|,
name|Pattern
operator|.
name|DOTALL
argument_list|)
expr_stmt|;
block|}
comment|/**          * @see org.activemq.filter.UnaryExpression#getExpressionSymbol()          */
specifier|public
name|String
name|getExpressionSymbol
parameter_list|()
block|{
return|return
literal|"LIKE"
return|;
block|}
comment|/**          * @see org.activemq.filter.Expression#evaluate(MessageEvaluationContext)          */
specifier|public
name|Object
name|evaluate
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|rv
init|=
name|this
operator|.
name|getRight
argument_list|()
operator|.
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|rv
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|rv
operator|instanceof
name|String
operator|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
comment|//throw new RuntimeException("LIKE can only operate on String identifiers.  LIKE attemped on: '" + rv.getClass());
block|}
return|return
name|likePattern
operator|.
name|matcher
argument_list|(
operator|(
name|String
operator|)
name|rv
argument_list|)
operator|.
name|matches
argument_list|()
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|public
name|boolean
name|matches
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|object
init|=
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|object
operator|!=
literal|null
operator|&&
name|object
operator|==
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createLike
parameter_list|(
name|Expression
name|left
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|escape
parameter_list|)
block|{
if|if
condition|(
name|escape
operator|!=
literal|null
operator|&&
name|escape
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The ESCAPE string litteral is invalid.  It can only be one character.  Litteral used: "
operator|+
name|escape
argument_list|)
throw|;
block|}
name|int
name|c
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|escape
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
literal|0xFFFF
operator|&
name|escape
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LikeExpression
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|c
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createNotLike
parameter_list|(
name|Expression
name|left
parameter_list|,
name|String
name|right
parameter_list|,
name|String
name|escape
parameter_list|)
block|{
return|return
name|UnaryExpression
operator|.
name|createNOT
argument_list|(
name|createLike
argument_list|(
name|left
argument_list|,
name|right
argument_list|,
name|escape
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createInFilter
parameter_list|(
name|Expression
name|left
parameter_list|,
name|List
name|elements
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|left
operator|instanceof
name|PropertyExpression
operator|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected a property for In expression, got: "
operator|+
name|left
argument_list|)
throw|;
return|return
name|UnaryExpression
operator|.
name|createInExpression
argument_list|(
operator|(
name|PropertyExpression
operator|)
name|left
argument_list|,
name|elements
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createNotInFilter
parameter_list|(
name|Expression
name|left
parameter_list|,
name|List
name|elements
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|left
operator|instanceof
name|PropertyExpression
operator|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected a property for In expression, got: "
operator|+
name|left
argument_list|)
throw|;
return|return
name|UnaryExpression
operator|.
name|createInExpression
argument_list|(
operator|(
name|PropertyExpression
operator|)
name|left
argument_list|,
name|elements
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createIsNull
parameter_list|(
name|Expression
name|left
parameter_list|)
block|{
return|return
name|doCreateEqual
argument_list|(
name|left
argument_list|,
name|ConstantExpression
operator|.
name|NULL
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createIsNotNull
parameter_list|(
name|Expression
name|left
parameter_list|)
block|{
return|return
name|UnaryExpression
operator|.
name|createNOT
argument_list|(
name|doCreateEqual
argument_list|(
name|left
argument_list|,
name|ConstantExpression
operator|.
name|NULL
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createNotEqual
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|)
block|{
return|return
name|UnaryExpression
operator|.
name|createNOT
argument_list|(
name|createEqual
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createEqual
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|)
block|{
name|checkEqualOperand
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|checkEqualOperand
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|checkEqualOperandCompatability
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
return|return
name|doCreateEqual
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|BooleanExpression
name|doCreateEqual
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|)
block|{
return|return
operator|new
name|ComparisonExpression
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
block|{
specifier|public
name|Object
name|evaluate
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|lv
init|=
name|left
operator|.
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|Object
name|rv
init|=
name|right
operator|.
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
comment|// Iff one of the values is null
if|if
condition|(
name|lv
operator|==
literal|null
operator|^
name|rv
operator|==
literal|null
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
if|if
condition|(
name|lv
operator|==
name|rv
operator|||
name|lv
operator|.
name|equals
argument_list|(
name|rv
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
if|if
condition|(
name|lv
operator|instanceof
name|Comparable
operator|&&
name|rv
operator|instanceof
name|Comparable
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|Comparable
operator|)
name|lv
argument_list|,
operator|(
name|Comparable
operator|)
name|rv
argument_list|)
return|;
block|}
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|protected
name|boolean
name|asBoolean
parameter_list|(
name|int
name|answer
parameter_list|)
block|{
return|return
name|answer
operator|==
literal|0
return|;
block|}
specifier|public
name|String
name|getExpressionSymbol
parameter_list|()
block|{
return|return
literal|"="
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createGreaterThan
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|)
block|{
name|checkLessThanOperand
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|checkLessThanOperand
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
operator|new
name|ComparisonExpression
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
block|{
specifier|protected
name|boolean
name|asBoolean
parameter_list|(
name|int
name|answer
parameter_list|)
block|{
return|return
name|answer
operator|>
literal|0
return|;
block|}
specifier|public
name|String
name|getExpressionSymbol
parameter_list|()
block|{
return|return
literal|">"
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createGreaterThanEqual
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|)
block|{
name|checkLessThanOperand
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|checkLessThanOperand
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
operator|new
name|ComparisonExpression
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
block|{
specifier|protected
name|boolean
name|asBoolean
parameter_list|(
name|int
name|answer
parameter_list|)
block|{
return|return
name|answer
operator|>=
literal|0
return|;
block|}
specifier|public
name|String
name|getExpressionSymbol
parameter_list|()
block|{
return|return
literal|">="
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createLessThan
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|)
block|{
name|checkLessThanOperand
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|checkLessThanOperand
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
operator|new
name|ComparisonExpression
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
block|{
specifier|protected
name|boolean
name|asBoolean
parameter_list|(
name|int
name|answer
parameter_list|)
block|{
return|return
name|answer
operator|<
literal|0
return|;
block|}
specifier|public
name|String
name|getExpressionSymbol
parameter_list|()
block|{
return|return
literal|"<"
return|;
block|}
block|}
return|;
block|}
specifier|public
specifier|static
name|BooleanExpression
name|createLessThanEqual
parameter_list|(
specifier|final
name|Expression
name|left
parameter_list|,
specifier|final
name|Expression
name|right
parameter_list|)
block|{
name|checkLessThanOperand
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|checkLessThanOperand
argument_list|(
name|right
argument_list|)
expr_stmt|;
return|return
operator|new
name|ComparisonExpression
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
block|{
specifier|protected
name|boolean
name|asBoolean
parameter_list|(
name|int
name|answer
parameter_list|)
block|{
return|return
name|answer
operator|<=
literal|0
return|;
block|}
specifier|public
name|String
name|getExpressionSymbol
parameter_list|()
block|{
return|return
literal|"<="
return|;
block|}
block|}
return|;
block|}
comment|/**      * Only Numeric expressions can be used in>,>=,< or<= expressions.s       *  	 * @param expr 	 */
specifier|public
specifier|static
name|void
name|checkLessThanOperand
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ConstantExpression
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|ConstantExpression
operator|)
name|expr
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Number
condition|)
return|return;
comment|// Else it's boolean or a String..
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Value '"
operator|+
name|expr
operator|+
literal|"' cannot be compared."
argument_list|)
throw|;
block|}
if|if
condition|(
name|expr
operator|instanceof
name|BooleanExpression
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Value '"
operator|+
name|expr
operator|+
literal|"' cannot be compared."
argument_list|)
throw|;
block|}
block|}
comment|/**      * Validates that the expression can be used in == or<> expression.        * Cannot not be NULL TRUE or FALSE litterals.      *  	 * @param expr 	 */
specifier|public
specifier|static
name|void
name|checkEqualOperand
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|ConstantExpression
condition|)
block|{
name|Object
name|value
init|=
operator|(
operator|(
name|ConstantExpression
operator|)
name|expr
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"'"
operator|+
name|expr
operator|+
literal|"' cannot be compared."
argument_list|)
throw|;
block|}
block|}
comment|/** 	 *  	 * @param left 	 * @param right 	 */
specifier|private
specifier|static
name|void
name|checkEqualOperandCompatability
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|instanceof
name|ConstantExpression
operator|&&
name|right
operator|instanceof
name|ConstantExpression
condition|)
block|{
if|if
condition|(
name|left
operator|instanceof
name|BooleanExpression
operator|&&
operator|!
operator|(
name|right
operator|instanceof
name|BooleanExpression
operator|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"'"
operator|+
name|left
operator|+
literal|"' cannot be compared with '"
operator|+
name|right
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param left      * @param right      */
specifier|public
name|ComparisonExpression
parameter_list|(
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|)
block|{
name|super
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|evaluate
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Comparable
name|lv
init|=
operator|(
name|Comparable
operator|)
name|left
operator|.
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Comparable
name|rv
init|=
operator|(
name|Comparable
operator|)
name|right
operator|.
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|rv
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|compare
argument_list|(
name|lv
argument_list|,
name|rv
argument_list|)
return|;
block|}
specifier|protected
name|Boolean
name|compare
parameter_list|(
name|Comparable
name|lv
parameter_list|,
name|Comparable
name|rv
parameter_list|)
block|{
name|Class
name|lc
init|=
name|lv
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|Class
name|rc
init|=
name|rv
operator|.
name|getClass
argument_list|()
decl_stmt|;
comment|// If the the objects are not of the same type,
comment|// try to convert up to allow the comparison.
if|if
condition|(
name|lc
operator|!=
name|rc
condition|)
block|{
if|if
condition|(
name|lc
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|rc
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|lv
operator|=
operator|new
name|Long
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|lv
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Float
operator|.
name|class
condition|)
block|{
name|lv
operator|=
operator|new
name|Float
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|lv
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|lv
operator|=
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|lv
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|lc
operator|==
name|Long
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|rc
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|rv
operator|=
operator|new
name|Long
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|rv
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Float
operator|.
name|class
condition|)
block|{
name|lv
operator|=
operator|new
name|Float
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|lv
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|lv
operator|=
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|lv
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|lc
operator|==
name|Float
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|rc
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|rv
operator|=
operator|new
name|Float
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|rv
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|rv
operator|=
operator|new
name|Float
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|rv
operator|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|lv
operator|=
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|lv
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|lc
operator|==
name|Double
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|rc
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|rv
operator|=
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|rv
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|rv
operator|=
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|rv
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rc
operator|==
name|Float
operator|.
name|class
condition|)
block|{
name|rv
operator|=
operator|new
name|Float
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|rv
operator|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
block|}
else|else
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
name|asBoolean
argument_list|(
name|lv
operator|.
name|compareTo
argument_list|(
name|rv
argument_list|)
argument_list|)
condition|?
name|Boolean
operator|.
name|TRUE
else|:
name|Boolean
operator|.
name|FALSE
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|asBoolean
parameter_list|(
name|int
name|answer
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|matches
parameter_list|(
name|MessageEvaluationContext
name|message
parameter_list|)
throws|throws
name|JMSException
block|{
name|Object
name|object
init|=
name|evaluate
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|object
operator|!=
literal|null
operator|&&
name|object
operator|==
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
end_class

end_unit

