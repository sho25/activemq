begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|nio
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|BytesMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|TransportConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|util
operator|.
name|Wait
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"javadoc"
block|}
argument_list|)
specifier|public
class|class
name|NIOSSLConcurrencyTest
extends|extends
name|TestCase
block|{
name|BrokerService
name|broker
decl_stmt|;
name|Connection
name|connection
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|KEYSTORE_TYPE
init|=
literal|"jks"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVER_KEYSTORE
init|=
literal|"src/test/resources/server.keystore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TRUST_KEYSTORE
init|=
literal|"src/test/resources/client.keystore"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PRODUCER_COUNT
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CONSUMER_COUNT
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_COUNT
init|=
literal|10000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MESSAGE_SIZE
init|=
literal|4096
decl_stmt|;
specifier|final
name|ConsumerThread
index|[]
name|consumers
init|=
operator|new
name|ConsumerThread
index|[
name|CONSUMER_COUNT
index|]
decl_stmt|;
specifier|final
name|Session
index|[]
name|producerSessions
init|=
operator|new
name|Session
index|[
name|PRODUCER_COUNT
index|]
decl_stmt|;
specifier|final
name|Session
index|[]
name|consumerSessions
init|=
operator|new
name|Session
index|[
name|CONSUMER_COUNT
index|]
decl_stmt|;
name|byte
index|[]
name|messageData
decl_stmt|;
specifier|volatile
name|boolean
name|failed
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|,
name|TRUST_KEYSTORE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStorePassword"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.trustStoreType"
argument_list|,
name|KEYSTORE_TYPE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|,
name|SERVER_KEYSTORE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStoreType"
argument_list|,
name|KEYSTORE_TYPE
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|,
name|PASSWORD
argument_list|)
expr_stmt|;
name|broker
operator|=
operator|new
name|BrokerService
argument_list|()
expr_stmt|;
name|broker
operator|.
name|setPersistent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|setUseJmx
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TransportConnector
name|connector
init|=
name|broker
operator|.
name|addConnector
argument_list|(
literal|"nio+ssl://localhost:0?transport.needClientAuth=true&transport.enabledCipherSuites=SSL_RSA_WITH_RC4_128_SHA,SSL_DH_anon_WITH_3DES_EDE_CBC_SHA"
argument_list|)
decl_stmt|;
name|broker
operator|.
name|start
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStarted
argument_list|()
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
name|messageData
operator|=
operator|new
name|byte
index|[
name|MESSAGE_SIZE
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MESSAGE_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|messageData
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|i
operator|&
literal|0xff
argument_list|)
expr_stmt|;
block|}
name|ActiveMQConnectionFactory
name|factory
init|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
literal|"nio+ssl://localhost:"
operator|+
name|connector
operator|.
name|getConnectUri
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|=
name|factory
operator|.
name|createConnection
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PRODUCER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|producerSessions
index|[
name|i
index|]
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSUMER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|consumerSessions
index|[
name|i
index|]
operator|=
name|connection
operator|.
name|createSession
argument_list|(
literal|false
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|stop
argument_list|()
expr_stmt|;
name|broker
operator|.
name|waitUntilStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|PRODUCER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Queue
name|dest
init|=
name|producerSessions
index|[
name|i
index|]
operator|.
name|createQueue
argument_list|(
literal|"TEST"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ProducerThread
name|producer
init|=
operator|new
name|ProducerThread
argument_list|(
name|producerSessions
index|[
name|i
index|]
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|producer
operator|.
name|setMessageCount
argument_list|(
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSUMER_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Queue
name|dest
init|=
name|consumerSessions
index|[
name|i
index|]
operator|.
name|createQueue
argument_list|(
literal|"TEST"
operator|+
name|i
argument_list|)
decl_stmt|;
name|ConsumerThread
name|consumer
init|=
operator|new
name|ConsumerThread
argument_list|(
name|consumerSessions
index|[
name|i
index|]
argument_list|,
name|dest
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|setMessageCount
argument_list|(
name|MESSAGE_COUNT
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumers
index|[
name|i
index|]
operator|=
name|consumer
expr_stmt|;
block|}
name|Wait
operator|.
name|waitFor
argument_list|(
operator|new
name|Wait
operator|.
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isSatisified
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|failed
operator|||
name|getReceived
argument_list|()
operator|==
name|PRODUCER_COUNT
operator|*
name|MESSAGE_COUNT
return|;
block|}
block|}
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PRODUCER_COUNT
operator|*
name|MESSAGE_COUNT
argument_list|,
name|getReceived
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|getReceived
parameter_list|()
block|{
name|int
name|received
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ConsumerThread
name|consumer
range|:
name|consumers
control|)
block|{
name|received
operator|+=
name|consumer
operator|.
name|getReceived
argument_list|()
expr_stmt|;
block|}
return|return
name|received
return|;
block|}
specifier|private
class|class
name|ConsumerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ConsumerThread
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|messageCount
init|=
literal|1000
decl_stmt|;
name|int
name|received
init|=
literal|0
decl_stmt|;
name|Destination
name|dest
decl_stmt|;
name|Session
name|sess
decl_stmt|;
name|boolean
name|breakOnNull
init|=
literal|true
decl_stmt|;
specifier|public
name|ConsumerThread
parameter_list|(
name|Session
name|sess
parameter_list|,
name|Destination
name|dest
parameter_list|)
block|{
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
name|this
operator|.
name|sess
operator|=
name|sess
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MessageConsumer
name|consumer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|consumer
operator|=
name|sess
operator|.
name|createConsumer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
while|while
condition|(
name|received
operator|<
name|messageCount
condition|)
block|{
name|Message
name|msg
init|=
name|consumer
operator|.
name|receive
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Received test message: "
operator|+
name|received
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|breakOnNull
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|consumer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|consumer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|int
name|getReceived
parameter_list|()
block|{
return|return
name|received
return|;
block|}
specifier|public
name|void
name|setMessageCount
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
name|this
operator|.
name|messageCount
operator|=
name|messageCount
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ProducerThread
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ProducerThread
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|messageCount
init|=
literal|1000
decl_stmt|;
name|Destination
name|dest
decl_stmt|;
specifier|protected
name|Session
name|sess
decl_stmt|;
name|int
name|sleep
init|=
literal|0
decl_stmt|;
name|int
name|sentCount
init|=
literal|0
decl_stmt|;
specifier|public
name|ProducerThread
parameter_list|(
name|Session
name|sess
parameter_list|,
name|Destination
name|dest
parameter_list|)
block|{
name|this
operator|.
name|dest
operator|=
name|dest
expr_stmt|;
name|this
operator|.
name|sess
operator|=
name|sess
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|MessageProducer
name|producer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|producer
operator|=
name|sess
operator|.
name|createProducer
argument_list|(
name|dest
argument_list|)
expr_stmt|;
for|for
control|(
name|sentCount
operator|=
literal|0
init|;
name|sentCount
operator|<
name|messageCount
condition|;
name|sentCount
operator|++
control|)
block|{
name|producer
operator|.
name|send
argument_list|(
name|createMessage
argument_list|(
name|sentCount
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sent 'test message: "
operator|+
name|sentCount
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sleep
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|failed
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|producer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|producer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|Message
name|createMessage
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|Exception
block|{
name|BytesMessage
name|b
init|=
name|sess
operator|.
name|createBytesMessage
argument_list|()
decl_stmt|;
name|b
operator|.
name|writeBytes
argument_list|(
name|messageData
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
specifier|public
name|void
name|setMessageCount
parameter_list|(
name|int
name|messageCount
parameter_list|)
block|{
name|this
operator|.
name|messageCount
operator|=
name|messageCount
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

