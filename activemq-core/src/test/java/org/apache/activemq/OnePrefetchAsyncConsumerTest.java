begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionConsumer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|MessageProducer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ServerSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ServerSessionPool
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|broker
operator|.
name|region
operator|.
name|policy
operator|.
name|PolicyMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|// see: https://issues.apache.org/activemq/browse/AMQ-2651
end_comment

begin_class
specifier|public
class|class
name|OnePrefetchAsyncConsumerTest
extends|extends
name|EmbeddedBrokerTestSupport
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|OnePrefetchAsyncConsumerTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TestMutex
name|testMutex
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
specifier|protected
name|ConnectionConsumer
name|connectionConsumer
decl_stmt|;
specifier|protected
name|Queue
name|queue
decl_stmt|;
specifier|protected
name|CountDownLatch
name|messageTwoDelay
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|void
name|testPrefetchExtension
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
decl_stmt|;
name|MessageProducer
name|producer
init|=
name|session
operator|.
name|createProducer
argument_list|(
name|queue
argument_list|)
decl_stmt|;
comment|// when Msg1 is acked, the PrefetchSubscription will (incorrectly?) increment its prefetchExtension
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Msg1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Msg2 will exhaust the ServerSessionPool (since it only has 1 ServerSession)
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Msg2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Msg3 will cause the test to fail as it will attempt to retrieve an additional ServerSession from
comment|// an exhausted ServerSessionPool due to the (incorrectly?) incremented prefetchExtension in the PrefetchSubscription
name|producer
operator|.
name|send
argument_list|(
name|session
operator|.
name|createTextMessage
argument_list|(
literal|"Msg3"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// wait for test to complete and the test result to get set
comment|// this happens asynchronously since the messages are delivered asynchronously
synchronized|synchronized
init|(
name|testMutex
init|)
block|{
while|while
condition|(
operator|!
name|testMutex
operator|.
name|testCompleted
condition|)
block|{
name|testMutex
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
comment|//test completed, result is ready
name|assertTrue
argument_list|(
literal|"Attempted to retrieve more than one ServerSession at a time"
argument_list|,
name|testMutex
operator|.
name|testSuccessful
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ConnectionFactory
name|createConnectionFactory
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|broker
operator|.
name|getTransportConnectors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPublishableConnectString
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|bindAddress
operator|=
literal|"tcp://localhost:0"
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|testMutex
operator|=
operator|new
name|TestMutex
argument_list|()
expr_stmt|;
name|connection
operator|=
name|createConnection
argument_list|()
expr_stmt|;
name|queue
operator|=
name|createQueue
argument_list|()
expr_stmt|;
comment|// note the last arg of 1, this becomes the prefetchSize in PrefetchSubscription
name|connectionConsumer
operator|=
name|connection
operator|.
name|createConnectionConsumer
argument_list|(
name|queue
argument_list|,
literal|null
argument_list|,
operator|new
name|TestServerSessionPool
argument_list|(
name|connection
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|connection
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|connectionConsumer
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|BrokerService
name|createBroker
parameter_list|()
throws|throws
name|Exception
block|{
name|BrokerService
name|answer
init|=
name|super
operator|.
name|createBroker
argument_list|()
decl_stmt|;
name|PolicyMap
name|policyMap
init|=
operator|new
name|PolicyMap
argument_list|()
decl_stmt|;
name|PolicyEntry
name|defaultEntry
init|=
operator|new
name|PolicyEntry
argument_list|()
decl_stmt|;
comment|// ensure prefetch is exact. only delivery next when current is acked
name|defaultEntry
operator|.
name|setUsePrefetchExtension
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|policyMap
operator|.
name|setDefaultEntry
argument_list|(
name|defaultEntry
argument_list|)
expr_stmt|;
name|answer
operator|.
name|setDestinationPolicy
argument_list|(
name|policyMap
argument_list|)
expr_stmt|;
return|return
name|answer
return|;
block|}
specifier|protected
name|Queue
name|createQueue
parameter_list|()
block|{
return|return
operator|new
name|ActiveMQQueue
argument_list|(
name|getDestinationString
argument_list|()
argument_list|)
return|;
block|}
comment|// simulates a ServerSessionPool with only 1 ServerSession
specifier|private
class|class
name|TestServerSessionPool
implements|implements
name|ServerSessionPool
block|{
name|Connection
name|connection
decl_stmt|;
name|TestServerSession
name|serverSession
decl_stmt|;
name|boolean
name|serverSessionInUse
init|=
literal|false
decl_stmt|;
specifier|public
name|TestServerSessionPool
parameter_list|(
name|Connection
name|connection
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
name|serverSession
operator|=
operator|new
name|TestServerSession
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ServerSession
name|getServerSession
parameter_list|()
throws|throws
name|JMSException
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|serverSessionInUse
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"asked for session while in use, not serialised delivery"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|testMutex
init|)
block|{
name|testMutex
operator|.
name|testSuccessful
operator|=
literal|false
expr_stmt|;
name|testMutex
operator|.
name|testCompleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|serverSessionInUse
operator|=
literal|true
expr_stmt|;
return|return
name|serverSession
return|;
block|}
block|}
block|}
specifier|private
class|class
name|TestServerSession
implements|implements
name|ServerSession
block|{
name|TestServerSessionPool
name|pool
decl_stmt|;
name|Session
name|session
decl_stmt|;
specifier|public
name|TestServerSession
parameter_list|(
name|TestServerSessionPool
name|pool
parameter_list|)
throws|throws
name|JMSException
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|session
operator|=
name|pool
operator|.
name|connection
operator|.
name|createSession
argument_list|(
literal|true
argument_list|,
name|Session
operator|.
name|AUTO_ACKNOWLEDGE
argument_list|)
expr_stmt|;
name|session
operator|.
name|setMessageListener
argument_list|(
operator|new
name|TestMessageListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
throws|throws
name|JMSException
block|{
return|return
name|session
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|JMSException
block|{
comment|// use a separate thread to process the message asynchronously
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// let the session deliver the message
name|session
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// commit the tx and
comment|// return ServerSession to pool
synchronized|synchronized
init|(
name|pool
init|)
block|{
try|try
block|{
name|session
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{                         }
name|pool
operator|.
name|serverSessionInUse
operator|=
literal|false
expr_stmt|;
block|}
comment|// let the test check if the test was completed
synchronized|synchronized
init|(
name|testMutex
init|)
block|{
name|testMutex
operator|.
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|TestMessageListener
implements|implements
name|MessageListener
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
try|try
block|{
name|String
name|text
init|=
operator|(
operator|(
name|TextMessage
operator|)
name|message
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"got message: "
operator|+
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"Msg3"
argument_list|)
condition|)
block|{
comment|// if we get here, Exception in getServerSession() was not thrown, test is successful
comment|// this obviously doesn't happen now,
comment|// need to fix prefetchExtension computation logic in PrefetchSubscription to get here
synchronized|synchronized
init|(
name|testMutex
init|)
block|{
if|if
condition|(
operator|!
name|testMutex
operator|.
name|testCompleted
condition|)
block|{
name|testMutex
operator|.
name|testSuccessful
operator|=
literal|true
expr_stmt|;
name|testMutex
operator|.
name|testCompleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|text
operator|.
name|equals
argument_list|(
literal|"Msg2"
argument_list|)
condition|)
block|{
comment|// simulate long message processing so that Msg3 comes when Msg2 is still being processed
comment|// and thus the single ServerSession is in use
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|JMSException
name|e
parameter_list|)
block|{             }
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{             }
block|}
block|}
specifier|private
class|class
name|TestMutex
block|{
name|boolean
name|testCompleted
init|=
literal|false
decl_stmt|;
name|boolean
name|testSuccessful
init|=
literal|true
decl_stmt|;
block|}
block|}
end_class

end_unit

