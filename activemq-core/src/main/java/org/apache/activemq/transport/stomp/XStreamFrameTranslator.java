begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|transport
operator|.
name|stomp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|JMSException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|ObjectMessage
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jms
operator|.
name|TextMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQBytesMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQObjectMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|command
operator|.
name|ActiveMQTextMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|XStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamReader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|HierarchicalStreamWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|json
operator|.
name|JettisonMappedXmlDriver
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|xml
operator|.
name|PrettyPrintWriter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|thoughtworks
operator|.
name|xstream
operator|.
name|io
operator|.
name|xml
operator|.
name|XppReader
import|;
end_import

begin_comment
comment|/**  * Frame translator implementation that uses XStream to convert messages to and from XML and JSON  * @author<a href="mailto:dejan@nighttale.net">Dejan Bosanac</a>   */
end_comment

begin_class
specifier|public
class|class
name|XStreamFrameTranslator
extends|extends
name|LegacyFrameTranslator
block|{
name|XStream
name|xStream
init|=
operator|new
name|XStream
argument_list|()
decl_stmt|;
specifier|public
name|ActiveMQMessage
name|convertFrame
parameter_list|(
name|ProtocolConverter
name|converter
parameter_list|,
name|StompFrame
name|command
parameter_list|)
throws|throws
name|JMSException
throws|,
name|ProtocolException
block|{
name|Map
name|headers
init|=
name|command
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|ActiveMQMessage
name|msg
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|CONTENT_LENGTH
argument_list|)
condition|)
block|{
name|msg
operator|=
name|super
operator|.
name|convertFrame
argument_list|(
name|converter
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|ActiveMQObjectMessage
name|objMsg
init|=
operator|new
name|ActiveMQObjectMessage
argument_list|()
decl_stmt|;
name|Object
name|obj
init|=
name|unmarshall
argument_list|(
operator|new
name|String
argument_list|(
name|command
operator|.
name|getContent
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION
argument_list|)
argument_list|)
decl_stmt|;
name|objMsg
operator|.
name|setObject
argument_list|(
operator|(
name|Serializable
operator|)
name|obj
argument_list|)
expr_stmt|;
name|msg
operator|=
name|objMsg
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|msg
operator|=
name|super
operator|.
name|convertFrame
argument_list|(
name|converter
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
name|FrameTranslator
operator|.
name|Helper
operator|.
name|copyStandardHeadersFromFrameToMessage
argument_list|(
name|converter
argument_list|,
name|command
argument_list|,
name|msg
argument_list|,
name|this
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
name|StompFrame
name|convertMessage
parameter_list|(
name|ProtocolConverter
name|converter
parameter_list|,
name|ActiveMQMessage
name|message
parameter_list|)
throws|throws
name|IOException
throws|,
name|JMSException
block|{
if|if
condition|(
name|message
operator|.
name|getDataStructureType
argument_list|()
operator|==
name|ActiveMQObjectMessage
operator|.
name|DATA_STRUCTURE_TYPE
condition|)
block|{
name|StompFrame
name|command
init|=
operator|new
name|StompFrame
argument_list|()
decl_stmt|;
name|command
operator|.
name|setAction
argument_list|(
name|Stomp
operator|.
name|Responses
operator|.
name|MESSAGE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|command
operator|.
name|setHeaders
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|FrameTranslator
operator|.
name|Helper
operator|.
name|copyStandardHeadersFromMessageToFrame
argument_list|(
name|converter
argument_list|,
name|message
argument_list|,
name|command
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ActiveMQObjectMessage
name|msg
init|=
operator|(
name|ActiveMQObjectMessage
operator|)
name|message
operator|.
name|copy
argument_list|()
decl_stmt|;
name|command
operator|.
name|setContent
argument_list|(
name|marshall
argument_list|(
name|msg
operator|.
name|getObject
argument_list|()
argument_list|,
name|headers
operator|.
name|get
argument_list|(
name|Stomp
operator|.
name|Headers
operator|.
name|TRANSFORMATION
argument_list|)
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|command
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|convertMessage
argument_list|(
name|converter
argument_list|,
name|message
argument_list|)
return|;
block|}
block|}
comment|/**      * Marshalls the Object to a string using XML or JSON      * encoding      */
specifier|protected
name|String
name|marshall
parameter_list|(
name|Serializable
name|object
parameter_list|,
name|String
name|transformation
parameter_list|)
throws|throws
name|JMSException
block|{
name|StringWriter
name|buffer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|HierarchicalStreamWriter
name|out
decl_stmt|;
if|if
condition|(
name|transformation
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jms-json"
argument_list|)
condition|)
block|{
name|out
operator|=
operator|new
name|JettisonMappedXmlDriver
argument_list|()
operator|.
name|createWriter
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
operator|new
name|PrettyPrintWriter
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|getXStream
argument_list|()
operator|.
name|marshal
argument_list|(
name|object
argument_list|,
name|out
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Unmarshalls the XML or JSON encoded message to an      * Object      */
specifier|protected
name|Object
name|unmarshall
parameter_list|(
name|String
name|text
parameter_list|,
name|String
name|transformation
parameter_list|)
block|{
name|HierarchicalStreamReader
name|in
decl_stmt|;
if|if
condition|(
name|transformation
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"jms-json"
argument_list|)
condition|)
block|{
name|in
operator|=
operator|new
name|JettisonMappedXmlDriver
argument_list|()
operator|.
name|createReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|=
operator|new
name|XppReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|getXStream
argument_list|()
operator|.
name|unmarshal
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|// Properties
comment|// -------------------------------------------------------------------------
specifier|public
name|XStream
name|getXStream
parameter_list|()
block|{
if|if
condition|(
name|xStream
operator|==
literal|null
condition|)
block|{
name|xStream
operator|=
name|createXStream
argument_list|()
expr_stmt|;
block|}
return|return
name|xStream
return|;
block|}
specifier|public
name|void
name|setXStream
parameter_list|(
name|XStream
name|xStream
parameter_list|)
block|{
name|this
operator|.
name|xStream
operator|=
name|xStream
expr_stmt|;
block|}
comment|// Implementation methods
comment|// -------------------------------------------------------------------------
specifier|protected
name|XStream
name|createXStream
parameter_list|()
block|{
return|return
operator|new
name|XStream
argument_list|()
return|;
block|}
block|}
end_class

end_unit

