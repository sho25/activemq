begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *   * Copyright 2005-2006 The Apache Software Foundation  *   * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with  * the License. You may obtain a copy of the License at  *   * http://www.apache.org/licenses/LICENSE-2.0  *   * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on  * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the  * specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|ObjectMarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|activemq
operator|.
name|kaha
operator|.
name|RuntimeStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/** * A container of roots for other Containers *  * @version $Revision: 1.2 $ */
end_comment

begin_class
class|class
name|RootContainer
extends|extends
name|MapContainerImpl
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RootContainer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Marshaller
name|rootMarshaller
init|=
operator|new
name|ObjectMarshaller
argument_list|()
decl_stmt|;
specifier|protected
name|RootContainer
parameter_list|(
name|Object
name|id
parameter_list|,
name|StoreImpl
name|rfs
parameter_list|,
name|LocatableItem
name|root
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|id
argument_list|,
name|rfs
argument_list|,
name|root
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addRoot
parameter_list|(
name|Object
name|key
parameter_list|,
name|LocatableItem
name|er
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|LocatableItem
name|entry
init|=
name|writeRoot
argument_list|(
name|key
argument_list|,
name|er
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|entry
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|list
init|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|LocatableItem
name|writeRoot
parameter_list|(
name|Object
name|key
parameter_list|,
name|LocatableItem
name|value
parameter_list|)
block|{
name|long
name|pos
init|=
name|Item
operator|.
name|POSITION_NOT_SET
decl_stmt|;
name|LocatableItem
name|item
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|pos
operator|=
name|store
operator|.
name|storeItem
argument_list|(
name|rootMarshaller
argument_list|,
name|value
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|LocatableItem
name|last
init|=
name|list
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|LocatableItem
operator|)
name|list
operator|.
name|getLast
argument_list|()
decl_stmt|;
name|last
operator|=
name|last
operator|==
literal|null
condition|?
name|root
else|:
name|last
expr_stmt|;
name|long
name|prev
init|=
name|last
operator|.
name|getOffset
argument_list|()
decl_stmt|;
name|long
name|next
init|=
name|Item
operator|.
name|POSITION_NOT_SET
decl_stmt|;
name|item
operator|=
operator|new
name|LocatableItem
argument_list|(
name|prev
argument_list|,
name|next
argument_list|,
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"writing root ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|log
operator|.
name|debug
argument_list|(
literal|"root = "
operator|+
name|value
argument_list|)
expr_stmt|;
name|next
operator|=
name|store
operator|.
name|storeItem
argument_list|(
name|rootMarshaller
argument_list|,
name|key
argument_list|,
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|last
operator|.
name|setNextItem
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateItem
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"Failed to write root"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|item
return|;
block|}
specifier|protected
name|Object
name|getValue
parameter_list|(
name|LocatableItem
name|item
parameter_list|)
block|{
name|LocatableItem
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
operator|&&
name|item
operator|.
name|getReferenceItem
argument_list|()
operator|!=
name|Item
operator|.
name|POSITION_NOT_SET
condition|)
block|{
name|LocatableItem
name|value
init|=
operator|new
name|LocatableItem
argument_list|()
decl_stmt|;
name|value
operator|.
name|setOffset
argument_list|(
name|item
operator|.
name|getReferenceItem
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|=
operator|(
name|LocatableItem
operator|)
name|store
operator|.
name|readItem
argument_list|(
name|rootMarshaller
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|//now read the item
name|result
operator|.
name|setOffset
argument_list|(
name|item
operator|.
name|getReferenceItem
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|readItem
argument_list|(
name|rootMarshaller
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Could not read item "
operator|+
name|item
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

