begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Copyright 2004 The Apache Software Foundation  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|activemq
operator|.
name|network
operator|.
name|jms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|ActiveMQConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|broker
operator|.
name|BrokerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|activemq
operator|.
name|util
operator|.
name|LRUCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|jndi
operator|.
name|JndiTemplate
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|emory
operator|.
name|mathcs
operator|.
name|backport
operator|.
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * This bridge joins the gap between foreign JMS providers and ActiveMQ As some JMS providers are still only 1.0.1  * compliant, this bridge itself aimed to be JMS 1.0.2 compliant.  *   * @version $Revision: 1.1.1.1 $  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|JmsConnector
implements|implements
name|Service
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|log
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|JmsConnector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|JndiTemplate
name|jndiTemplate
decl_stmt|;
specifier|protected
name|JmsMesageConvertor
name|jmsMessageConvertor
decl_stmt|;
specifier|private
name|List
name|inboundBridges
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|private
name|List
name|outboundBridges
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|replyToDestinationCacheSize
init|=
literal|10000
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|initialized
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|AtomicBoolean
name|started
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|protected
name|ActiveMQConnectionFactory
name|embeddedConnectionFactory
decl_stmt|;
specifier|protected
name|LRUCache
name|replyToBridges
init|=
operator|new
name|LRUCache
argument_list|()
block|{
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
name|enty
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
name|maxCacheSize
condition|)
block|{
name|Iterator
name|iter
init|=
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
name|lru
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|remove
argument_list|(
name|lru
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|DestinationBridge
name|bridge
init|=
operator|(
name|DestinationBridge
operator|)
name|lru
operator|.
name|getValue
argument_list|()
decl_stmt|;
try|try
block|{
name|bridge
operator|.
name|stop
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Expired bridge: "
operator|+
name|bridge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"stopping expired bridge"
operator|+
name|bridge
operator|+
literal|" caused an exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
specifier|public
name|boolean
name|init
parameter_list|()
block|{
name|boolean
name|result
init|=
name|initialized
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|jndiTemplate
operator|==
literal|null
condition|)
block|{
name|jndiTemplate
operator|=
operator|new
name|JndiTemplate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jmsMessageConvertor
operator|==
literal|null
condition|)
block|{
name|jmsMessageConvertor
operator|=
operator|new
name|SimpleJmsMessageConvertor
argument_list|()
expr_stmt|;
block|}
name|replyToBridges
operator|.
name|setMaxCacheSize
argument_list|(
name|getReplyToDestinationCacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inboundBridges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DestinationBridge
name|bridge
init|=
operator|(
name|DestinationBridge
operator|)
name|inboundBridges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outboundBridges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DestinationBridge
name|bridge
init|=
operator|(
name|DestinationBridge
operator|)
name|outboundBridges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|started
operator|.
name|compareAndSet
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inboundBridges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DestinationBridge
name|bridge
init|=
operator|(
name|DestinationBridge
operator|)
name|inboundBridges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outboundBridges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DestinationBridge
name|bridge
init|=
operator|(
name|DestinationBridge
operator|)
name|outboundBridges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bridge
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * One way to configure the local connection - this is called by      * The BrokerService when the Connector is embedded      * @param service      */
specifier|public
name|void
name|setBrokerService
parameter_list|(
name|BrokerService
name|service
parameter_list|)
block|{
name|embeddedConnectionFactory
operator|=
operator|new
name|ActiveMQConnectionFactory
argument_list|(
name|service
operator|.
name|getVmConnectorURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return Returns the jndiTemplate.      */
specifier|public
name|JndiTemplate
name|getJndiTemplate
parameter_list|()
block|{
return|return
name|jndiTemplate
return|;
block|}
comment|/**      * @param jndiTemplate      *            The jndiTemplate to set.      */
specifier|public
name|void
name|setJndiTemplate
parameter_list|(
name|JndiTemplate
name|jndiTemplate
parameter_list|)
block|{
name|this
operator|.
name|jndiTemplate
operator|=
name|jndiTemplate
expr_stmt|;
block|}
comment|/**      * @return Returns the jmsMessageConvertor.      */
specifier|public
name|JmsMesageConvertor
name|getJmsMessageConvertor
parameter_list|()
block|{
return|return
name|jmsMessageConvertor
return|;
block|}
comment|/**      * @param jmsMessageConvertor      *            The jmsMessageConvertor to set.      */
specifier|public
name|void
name|setJmsMessageConvertor
parameter_list|(
name|JmsMesageConvertor
name|jmsMessageConvertor
parameter_list|)
block|{
name|this
operator|.
name|jmsMessageConvertor
operator|=
name|jmsMessageConvertor
expr_stmt|;
block|}
comment|/**      * @return Returns the replyToDestinationCacheSize.      */
specifier|public
name|int
name|getReplyToDestinationCacheSize
parameter_list|()
block|{
return|return
name|replyToDestinationCacheSize
return|;
block|}
comment|/**      * @param replyToDestinationCacheSize      *            The replyToDestinationCacheSize to set.      */
specifier|public
name|void
name|setReplyToDestinationCacheSize
parameter_list|(
name|int
name|replyToDestinationCacheSize
parameter_list|)
block|{
name|this
operator|.
name|replyToDestinationCacheSize
operator|=
name|replyToDestinationCacheSize
expr_stmt|;
block|}
specifier|protected
name|void
name|addInboundBridge
parameter_list|(
name|DestinationBridge
name|bridge
parameter_list|)
block|{
name|inboundBridges
operator|.
name|add
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addOutboundBridge
parameter_list|(
name|DestinationBridge
name|bridge
parameter_list|)
block|{
name|outboundBridges
operator|.
name|add
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeInboundBridge
parameter_list|(
name|DestinationBridge
name|bridge
parameter_list|)
block|{
name|inboundBridges
operator|.
name|add
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|removeOutboundBridge
parameter_list|(
name|DestinationBridge
name|bridge
parameter_list|)
block|{
name|outboundBridges
operator|.
name|add
argument_list|(
name|bridge
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

